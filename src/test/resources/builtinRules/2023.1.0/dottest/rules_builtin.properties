ARRU=Collection Usage Guidelines
ARRU.DNUGCI=Do not use non-generic collection for class fields
BRM=Better Readability and Maintainability
BRM.APRIS=Avoid 'protected' access for members of 'sealed' classes.
BRM.LINUPPERCASE=Use 'L' instead of 'l' to express 'long' integer constants
BRM.SFH=Always provide appropriate file header (copyright information, etc.)
BRM.SFH.AllowHeadersAtRandomLocation-label=Allow text to be placed at any position in file.
BRM.SFH.AllowHeadersAtTheEnd-label=Allow text to be placed at the end of file.
BRM.SFH.AllowHeadersOnTheBeginning-label=Allow text on the beginning of the file.
BRM.SFH.HeaderPattern-label=Provide regular expressions/wildcards for header lines
BRM.SFH.WildcardOrRegExp-label=Matching method\:
BRM.SFH.WildcardOrRegExp.0-label=Wildcards
BRM.SFH.WildcardOrRegExp.1-label=Regular Expressions
BRM.SFT=Use spaces for tabs/indentation
BRM.SFT.Tabs-label=Count of spaces for tab indentation
CDD=Code Duplication Detection
CLS=CLS Compliance
CMUG=Class Member Usage Guidelines
CMUG.CU=Constructor Usage
CMUG.CU.ATES=Avoid throwing exceptions from static constructors
CMUG.CU.CNPC=Use a consistent naming pattern for constructor overloads
CMUG.EVU=Event Usage
CMUG.EVU.ANLPE=Avoid never listened private events
CMUG.EVU.ANRE=Avoid never raised events
CMUG.EVU.CMCIPE=Consider method calls instead of private events
CMUG.EVU.DNRVFE=Do not return values from events
CMUG.EVU.ECEE=Event argument classes should extend System.EventArgs
CMUG.EVU.ESATA=Events should accept exactly two arguments.
CMUG.EVU.ESPSO=Events should provide object sender.
CMUG.EVU.OESP=OnEvent methods should be protected
CMUG.EVU.OESP.Prefixes-label=Method prefix
CMUG.EVU.OESV=OnEvent method should be virtual and not sealed.
CMUG.EVU.OESV.Prefixes-label=Method prefix
CMUG.EVU.POEM=Provide OnEvent method for every event
CMUG.EVU.POEM.Prefixes-label=Method prefix
CMUG.EVU.RNRIE=Review never raised inherited events
CMUG.EVU.UFE=Unsubscribe from event
CMUG.EVU.UFE.TypesToAnalyze-label=Analyze following observing types (wildcards supported)\:
CMUG.EVU.UFE.TypesToObserve-label=Analyze following observable types (wildcards supported)\:
CMUG.EVU.UGEH=Use generic event handlers
CMUG.EVU.UGEH.TypeRegexes-label=Regular expressions of full delegate names to skip
CMUG.FU=Field Usage
CMUG.FU.AUPF=Avoid unused private fields.
CMUG.FU.FAMTH=Fields access modifiers should keep type hermetic.
CMUG.FU.FAMTH.CheckAccessibilityGroup-label=Forbid defining
CMUG.FU.FAMTH.CheckFieldTypesGroup-label=fields which are\:
CMUG.FU.FAMTH.CheckInstanceReadonlyClassField-label=instance 'readonly' class members,
CMUG.FU.FAMTH.CheckInstanceReadonlyStructField-label=instance 'readonly' struct members,
CMUG.FU.FAMTH.CheckInstanceWritableClassField-label=instance writable class members,
CMUG.FU.FAMTH.CheckInstanceWritableStructField-label=instance writable struct members,
CMUG.FU.FAMTH.CheckProtectedAsPrivateInSealed-label=Treat 'protected' fields in 'sealed' classes as 'private'.
CMUG.FU.FAMTH.CheckStaticReadonlyClassField-label='static readonly' or 'const' class members,
CMUG.FU.FAMTH.CheckStaticReadonlyStructField-label='static readonly' or 'const' struct members.
CMUG.FU.FAMTH.CheckStaticWritableClassField-label='static' writable class members,
CMUG.FU.FAMTH.CheckStaticWritableStructField-label='static' writable struct members,
CMUG.FU.FAMTH.CustomGuidelinesConfigurationGroup-label=Custom guidelines settings (only if "Custom guidelines" option selected)
CMUG.FU.FAMTH.Mode-label=Please select one of the following options to specify how rule will validate field definitions\:
CMUG.FU.FAMTH.Mode.0-label=Parasoft field definition guidelines.\r\nRecommended. Forbids usages of 'public', 'internal' and 'protected' fields other than 'static readonly' or 'const'.
CMUG.FU.FAMTH.Mode.1-label=Microsoft field definition guidelines.\r\nForbids usages of 'public' and 'protected' instance fields regardless if they are writable or read-only. This setting does not cover 'internal' and 'static' fields.
CMUG.FU.FAMTH.Mode.2-label=Custom guidelines.
CMUG.MU=Method Usage
CMUG.MU.APSM=Avoid parameter swapping when overriding or implementing methods.
CMUG.MU.CNPM=Use a consistent naming pattern for method overloads
CMUG.MU.RETVAL=Ensure that method return values are used
CMUG.MU.RETVAL.blackListMethods-label=Results from all other methods are not allowed to be thrown away.
CMUG.MU.RETVAL.blackListMethods.COLUMN_0-label=Method declaring type regex
CMUG.MU.RETVAL.blackListMethods.COLUMN_1-label=Method name regex
CMUG.MU.RETVAL.modeSelection-label=
CMUG.MU.RETVAL.modeSelection.0-label=Results from all other methods are not allowed to be thrown away.
CMUG.MU.RETVAL.modeSelection.1-label=Results from the following methods are not allowed to be thrown away.
CMUG.MU.RETVAL.whiteListMethods-label=Results from the following methods are allowed to be thrown away
CMUG.MU.RETVAL.whiteListMethods.COLUMN_0-label=Method declaring type regex
CMUG.MU.RETVAL.whiteListMethods.COLUMN_1-label=Method name regex
CMUG.MU.RETVAL.whiteListReturningType-label=Results of given types are allowed to be thrown away
CMUG.MU.RETVAL.whiteListReturningType.COLUMN_0-label=Method declaring type regex
CMUG.MU.RETVAL.whiteListReturningType.COLUMN_1-label=Returned type regex
CMUG.PRU=Property Usage
CMUG.PRU.AUPPA=Avoid unused private property accessors
COM=COM Guidelines
CS=C\# only
CS.BRM=Better Readability and Maintainability
CS.BRM.AIBA=Avoid 'is' before 'as'
CS.BRM.BEB=Avoid block statements with empty bodies.
CS.BRM.CCB=Always enclose if and else bodies with curly braces
CS.BRM.CPEB=Avoid checked, unchecked, fixed and unsafe statements with empty bodies.
CS.BRM.ETK=Use keyword 'this' explicitly when accessing capitalized members
CS.BRM.ETK.ExpressionsOptions-label=Expressions
CS.BRM.ETK.ExpressionsOptions.0-label=Complex expressions only
CS.BRM.ETK.ExpressionsOptions.1-label=All expressions
CS.BRM.ETK.IncludeLowercasedMembers-label=Include lowercased members
CS.BRM.ETK.IncludeMethodsCalls-label=Include methods invocations
CS.BRM.ETK.IncludePrefixedMembers-label=Include members with _ prefix
CS.BRM.ICB=Always enclose iteration statements bodies with curly braces.
CS.BRM.KFATNC=Keep file and type names consistent
CS.BRM.KFATNC.IgnoredFilesList-label=File names to ignore (as RegExp)
CS.BRM.KFATNC.IgnoredTypesList-label=Full type names to ignore (as RegExp)
CS.BRM.PNPT=Use preferred names for primitive types
CS.BRM.PNPT.UsePrimitiveTypes-label=Select prefered naming for primitive types
CS.BRM.PNPT.UsePrimitiveTypes.0-label=Use keywords for primitive types
CS.BRM.PNPT.UsePrimitiveTypes.1-label=Use .NET type names for primitive types
CS.BRM.SWDEFLAST=Place 'default' as the last case of the 'switch' statement
CS.CDD=Code Duplication Detection
CS.CDD.DUPU=Avoid duplicate using statements
CS.CMUG=Class Member Usage Guidelines
CS.CMUG.PRU=Property Usage
CS.EXCEPT=Exceptions
CS.EXCEPT.RETHROW=Avoid clearing stack trace while rethrowing exceptions
CS.IFD=Implementing Finalize and Dispose
CS.INTER=Internationalization
CS.INTER.ITT=String literals should be internationalized
CS.INTER.ITT.CallingMethods-label=Ignore all string literals passed to the following methods
CS.INTER.ITT.CallingMethods.COLUMN_0-label=Type fully qualified name (as a regular expression)
CS.INTER.ITT.CallingMethods.COLUMN_1-label=Method name (as a regular expression)
CS.INTER.ITT.ContainingClasses-label=Ignore all string literals defined in following classes and methods
CS.INTER.ITT.ContainingClasses.COLUMN_0-label=Type fully qualified name (as a regular expression)
CS.INTER.ITT.ContainingClasses.COLUMN_1-label=Method name (as a regular expression)
CS.INTER.ITT.IgnoreDotSeparatedStrings-label=Ignore literals which are alphanumeric strings sparated with dots, e.g.\: "Foo.Bar.Baz"
CS.INTER.ITT.IgnoreReflectionMethodsInvocations-label=Ignore literals which are passed to some calls of System.Reflection members, e.g.\: typeof(int).GetMethod("Parse")
CS.INTER.ITT.IgnoreSystemDataNamespaceInvocations-label=Ignore literals which are passed to some calls of System.Data members, e.g.\: connection.ChangeDatabase("database name")
CS.INTER.ITT.IgnoreSystemDiagnosticsProcessInvocations-label=Ignore literals which are passed to some calls of System.Process members, e.g.\: Process.GetProcesses("myProcess")
CS.INTER.ITT.IgnoreSystemEnvironmentInvocations-label=Ignore literals which are passed to some calls of System.Environment members, e.g.\: Environment.GetEnvironmentVariable("var")
CS.INTER.ITT.IgnoreSystemIONamespaceInvocations-label=Ignore literals which are passed to some calls of System.IO members, e.g.\: Path.Combine("C\:", "Temp")
CS.INTER.ITT.IgnoreSystemWindowsFormsNamespaceInvocations-label=Ignore literals which are passed to some calls of System.Windows.Forms members, e.g.\: Clipboard.GetData("format")
CS.INTER.ITT.IgnoreUnderlineSeparatedStrings-label=Ignore literals which are alphanumeric strings sparated with uderlines, e.g.\: "foo_bar_baz"
CS.INTER.ITT.IgnoreXmlAndUriInvocations-label=Ignore literals which are passed to some calls of xml related classes and Uri class members, e.g.\: XmlReader.Create("uri")
CS.INTER.ITT.ValueRegEx-label=Ignore literals which match regular expression
CS.INTER.ITT.VarNameRegEx-label=Ignore literals assigned to fields and variables which names match regular expression
CS.NG=Naming Guidelines
CS.NG.VAR=Variables Naming
CS.NG.VAR.PNCFV=Follow proper naming convention for method variables and consts.
CS.NG.VAR.PNCFV.ConstantsCamelCase-label=camelCase
CS.NG.VAR.PNCFV.ConstantsLowerCase-label=lower_case
CS.NG.VAR.PNCFV.ConstantsParametersGroup-label=Method local constants
CS.NG.VAR.PNCFV.ConstantsPascalCase-label=PascalCase
CS.NG.VAR.PNCFV.ConstantsPrefix-label=Prefix
CS.NG.VAR.PNCFV.ConstantsPrefixObligatory-label=Is prefix obligatory
CS.NG.VAR.PNCFV.ConstantsUpperCase-label=UPPER_CASE
CS.NG.VAR.PNCFV.ConstantsUseHungarianNotation-label=Hungarian Notation
CS.NG.VAR.PNCFV.HungarianNotation-label=Hungarian Notation
CS.NG.VAR.PNCFV.HungarianNotation.COLUMN_0-label=Full type name
CS.NG.VAR.PNCFV.HungarianNotation.COLUMN_1-label=Notation
CS.NG.VAR.PNCFV.VariablesCamelCase-label=camelCase
CS.NG.VAR.PNCFV.VariablesLowerCase-label=lower_case
CS.NG.VAR.PNCFV.VariablesParametersGroup-label=Method local variables
CS.NG.VAR.PNCFV.VariablesPascalCase-label=PascalCase
CS.NG.VAR.PNCFV.VariablesPrefix-label=Prefix
CS.NG.VAR.PNCFV.VariablesPrefixObligatory-label=Is prefix obligatory
CS.NG.VAR.PNCFV.VariablesUpperCase-label=UPPER_CASE
CS.NG.VAR.PNCFV.VariablesUseHungarianNotation-label=Hungarian Notation
CS.OOM=Metrics
CS.PB=Possible Bugs
CS.PB.AWC=Avoid assignment within a condition.
CS.PB.BITBOOL=Do not use bitwise operators on bool operands.
CS.PB.CCA=Avoid confusing assignments to constructor arguments.
CS.PB.EEB=Avoid try, catch, finally and using statements with empty bodies.
CS.PB.FPLI=Do not use floating point variables as loop indices.
CS.PB.IDNE=Avoid increment and decrement statements which have no effect
CS.PB.IEB=Avoid iteration statements with empty bodies.
CS.PB.IVFLC=Use initializer variable in a condition of 'for' loop
CS.PB.IVFLI=Use initializer variable in 'for' loop iterator section.
CS.PB.MCO=Review '?\:' operator for potential misuse.
CS.PB.NACC=Avoid inaccessible classes and structs.
CS.PB.NSIVFLB=Do not modify 'for' loop initializer variable in 'for' loop body.
CS.PB.NSIVFLN=Do not increment or decrement on the same variable over multiple nested 'for' loop statements.
CS.PB.PUO=Avoid using the unary + operator
CS.PB.REA=Return empty collection instead of null
CS.PB.REA.AnalyzeArrays-label=Arrays
CS.PB.REA.AnalyzeCollections-label=Common collection types
CS.PB.REA.AnalyzeIEnumerable-label=Non-array collections implementing IEnumerable
CS.PB.REA.CollectionsToAnalyzeGroup-label=Collections to analyze\:
CS.PB.REA.CustomTypes-label=Custom fully qualified types (with wildcards)\:
CS.PB.SHIFT=Do not use an integer outside the range of [0, 31] as the amount of a shift
CS.PB.USC=Useless Code
CS.PB.USC.CC=Avoid unreachable code in condition
CS.PB.VTNV=Do not compare value types to null
CS.PB.WIBS=Avoid wrong indentation of blockless statements
CS.PE=Possible Exception
CS.SEC=Security Inspection
CS.SEC.RSFSS=Do not re-create string from SecureString.
CS.SEC.SSFP=Use SecureString instead of String for password.
CS.SEC.SSFP.Pattern-label=Pattern of variables which should be checked\:
CS.SERIAL=Serialization Guidelines
CS.TRS=Threads & Synchronization
CS.TRS.LCB=Always enclose lock statement body with curly braces.
CS.TRS.LEB=Avoid lock statements with empty bodies.
CT=Casting Types Guidelines
ERR=Error Raising and Handling
EXCEPT=Exceptions
EXCEPT.TIEC=Avoid throwing exceptions from exceptions constructors
GC=Garbage Collector
GC.ASC=Avoid static collections which may lead to memory leakage
GC.UFID=Dispose IDisposable local variable
GC.UFID.ActivationMethods-description=Allows to declare custom activating methods, which are useful when object constructions are not equivalent to activating them
GC.UFID.ActivationMethods-label=Regular expressions of activating methods full type names and method names
GC.UFID.ActivationMethods.COLUMN_0-label=Activating method declaring type regex
GC.UFID.ActivationMethods.COLUMN_1-label=Activating method name regex
GC.UFID.ClosingMethods-label=Regular expressions of aliases of System.IDisposable.Dispose()
GC.UFID.ClosingMethods.COLUMN_0-label=Closing method declaring type regex
GC.UFID.ClosingMethods.COLUMN_1-label=Closing method name regex
GC.UFID.FactoryMethods-description=Allows to declare custom factory methods, which produce new objects where caller is responsible for disposing
GC.UFID.FactoryMethods-label=Regular expressions of factory methods full type names and method names
GC.UFID.FactoryMethods.COLUMN_0-label=Factory method declaring type regex
GC.UFID.FactoryMethods.COLUMN_1-label=Factory method name regex
GC.UFID.SpecialMethods-label=Regular expressions of methods which are responsible for scheduling disposing the object
GC.UFID.SpecialMethods.COLUMN_0-label=Special method declaring type regex
GC.UFID.SpecialMethods.COLUMN_1-label=Special method name regex
IFD=Implementing Finalize and Dispose
IFD.ACFD=Avoid calling Finalize directly
IFD.ATED=Avoid throwing exceptions from the Dispose method implementations
IFD.ATEF=Avoid throwing exceptions from finalizers
IFD.CBDM=Call the Dispose method of the base class from the Dispose method in the derived class
IFD.DBDTFF=Method 'Dispose(bool)' in method 'Dispose()' should be called with true and in finalizer with false.
IFD.DCDSF=IDisposable.Dispose() implementation should call specific methods
IFD.DCID=Always call Dispose(bool) in finalizer if IDisposable is implemented
IFD.DNV=Method 'Dispose()' should not be overridable.
IFD.IDDR=Implement IDisposable in types which are using disposable resources
IFD.IDWBP=Implement Dispose(bool) as a virtual and unsealed method if IDisposable is implemented
IFD.IDWF=Implement IDisposable when you provide a destructor (finalizer)
IFD.MDPP=Method 'Dispose(bool)' should be private or protected
IFD.SRIF=Provide finalizers in types which use resources
IFD.SRIF.NativeResourceTypes-label=Native resource full type names
IFD.SRII=Implement IDisposable in types which are using system resources
IFD.SRII.NativeResourceTypes-label=Native resource full type names
IFD.TICUFDS=Type that implements 'IDisposable' should contain and use field with information about dispose state.
IFD.TICUFDS.FieldNames-label=Allowed field/property names (wildcards are allowed, the first on this list is recommended)
IFD.TIID=Type that implements 'IDisposable' should implement 'Dispose(bool)' method.
INTER=Internationalization
NG=Naming Guidelines
NG.ABBR=Abbreviations
NG.ACRO=Well Known Acronyms
NG.AN=Attribute Naming
NG.ATNC=Avoiding Type Name Confusion
NG.ATNC.ALSN=Avoid language-specific names
NG.ATNC.UUTN=Use universal type names
NG.CAPSTY=Capitalization Styles
NG.CAPSTY.CAMEL=Camel Case for Names
NG.CAPSTY.PASCAL=Pascal Case for Names
NG.CAPSTY.UPPER=Upper Case for Names
NG.CASE=Case Sensitivity
NG.CN=Class Naming
NG.ETN=Enumeration Type Naming
NG.EVN=Event Naming
NG.EVN.EHNEEH=Use the suffix 'EventHandler' for event handlers delegates names.
NG.FN=Field Naming
NG.FN.PNCFN=Follow proper naming conventions for field names
NG.FN.PNCFN.HungarianNotation-label=Hungarian Notation
NG.FN.PNCFN.HungarianNotation.COLUMN_0-label=Full type name
NG.FN.PNCFN.HungarianNotation.COLUMN_1-label=Notation
NG.FN.PNCFN.PrivateInstanceCamelCase-label=camelCase
NG.FN.PNCFN.PrivateInstanceLowerCase-label=lower_case
NG.FN.PNCFN.PrivateInstancePascalCase-label=PascalCase
NG.FN.PNCFN.PrivateInstancePrefix-label=Prefix
NG.FN.PNCFN.PrivateInstanceUpperCase-label=UPPER_CASE
NG.FN.PNCFN.PrivateInstanceUseHungarianNotation-label=Hungarian Notation
NG.FN.PNCFN.PrivateIsPrefixObligatory-label=Is prefix obligatory
NG.FN.PNCFN.PrivateOrProtectedConstCamelCase-label=camelCase
NG.FN.PNCFN.PrivateOrProtectedConstGroup-label=Private or Protected Const Fields
NG.FN.PNCFN.PrivateOrProtectedConstLowerCase-label=lower_case
NG.FN.PNCFN.PrivateOrProtectedConstPascalCase-label=PascalCase
NG.FN.PNCFN.PrivateOrProtectedConstPrefix-label=Prefix
NG.FN.PNCFN.PrivateOrProtectedConstPrefixObligatory-label=Is prefix obligatory
NG.FN.PNCFN.PrivateOrProtectedConstUpperCase-label=UPPER_CASE
NG.FN.PNCFN.PrivateOrProtectedConstUseHungarianNotation-label=Hungarian Notation
NG.FN.PNCFN.PrivateOrProtectedStaticReadonlyComplexCamelCase-label=camelCase
NG.FN.PNCFN.PrivateOrProtectedStaticReadonlyComplexGroup-label=Private or Protected Static Readonly Complex Fields
NG.FN.PNCFN.PrivateOrProtectedStaticReadonlyComplexLowerCase-label=lower_case
NG.FN.PNCFN.PrivateOrProtectedStaticReadonlyComplexPascalCase-label=PascalCase
NG.FN.PNCFN.PrivateOrProtectedStaticReadonlyComplexPrefix-label=Prefix
NG.FN.PNCFN.PrivateOrProtectedStaticReadonlyComplexPrefixObligatory-label=Is prefix obligatory
NG.FN.PNCFN.PrivateOrProtectedStaticReadonlyComplexUpperCase-label=UPPER_CASE
NG.FN.PNCFN.PrivateOrProtectedStaticReadonlyComplexUseHungarianNotation-label=Hungarian Notation
NG.FN.PNCFN.PrivateOrProtectedStaticReadonlyPrimitiveCamelCase-label=camelCase
NG.FN.PNCFN.PrivateOrProtectedStaticReadonlyPrimitiveGroup-label=Private or Protected Static Readonly Primitive Fields
NG.FN.PNCFN.PrivateOrProtectedStaticReadonlyPrimitiveLowerCase-label=lower_case
NG.FN.PNCFN.PrivateOrProtectedStaticReadonlyPrimitivePascalCase-label=PascalCase
NG.FN.PNCFN.PrivateOrProtectedStaticReadonlyPrimitivePrefix-label=Prefix
NG.FN.PNCFN.PrivateOrProtectedStaticReadonlyPrimitivePrefixObligatory-label=Is prefix obligatory
NG.FN.PNCFN.PrivateOrProtectedStaticReadonlyPrimitiveUpperCase-label=UPPER_CASE
NG.FN.PNCFN.PrivateOrProtectedStaticReadonlyPrimitiveUseHungarianNotation-label=Hungarian Notation
NG.FN.PNCFN.PrivateOrProtectedStaticReadwriteCamelCase-label=camelCase
NG.FN.PNCFN.PrivateOrProtectedStaticReadwriteGroup-label=Private or Protected Static Writable Fields
NG.FN.PNCFN.PrivateOrProtectedStaticReadwriteLowerCase-label=lower_case
NG.FN.PNCFN.PrivateOrProtectedStaticReadwriteObligatory-label=Is prefix obligatory
NG.FN.PNCFN.PrivateOrProtectedStaticReadwritePascalCase-label=PascalCase
NG.FN.PNCFN.PrivateOrProtectedStaticReadwritePrefix-label=Prefix
NG.FN.PNCFN.PrivateOrProtectedStaticReadwriteUpperCase-label=UPPER_CASE
NG.FN.PNCFN.PrivateOrProtectedStaticReadwriteUseHungarianNotation-label=Hungarian Notation
NG.FN.PNCFN.ProtectedInstanceCamelCase-label=camelCase
NG.FN.PNCFN.ProtectedInstanceLowerCase-label=lower_case
NG.FN.PNCFN.ProtectedInstancePascalCase-label=PascalCase
NG.FN.PNCFN.ProtectedInstancePrefix-label=Prefix
NG.FN.PNCFN.ProtectedInstanceUpperCase-label=UPPER_CASE
NG.FN.PNCFN.ProtectedInstanceUseHungarianNotation-label=Hungarian Notation
NG.FN.PNCFN.ProtectedIsPrefixObligatory-label=Is prefix obligatory
NG.FN.PNCFN.PublicOrInternalConstCamelCase-label=camelCase
NG.FN.PNCFN.PublicOrInternalConstGroup-label=Public or Internal Const Fields
NG.FN.PNCFN.PublicOrInternalConstLowerCase-label=lower_case
NG.FN.PNCFN.PublicOrInternalConstPascalCase-label=PascalCase
NG.FN.PNCFN.PublicOrInternalConstPrefix-label=Prefix
NG.FN.PNCFN.PublicOrInternalConstPrefixObligatory-label=Is prefix obligatory
NG.FN.PNCFN.PublicOrInternalConstUpperCase-label=UPPER_CASE
NG.FN.PNCFN.PublicOrInternalConstUseHungarianNotation-label=Hungarian Notation
NG.FN.PNCFN.PublicOrInternalInstanceCamelCase-label=camelCase
NG.FN.PNCFN.PublicOrInternalInstanceGroup-label=Public or Internal Instance Fields
NG.FN.PNCFN.PublicOrInternalInstanceLowerCase-label=lower_case
NG.FN.PNCFN.PublicOrInternalInstancePascalCase-label=PascalCase
NG.FN.PNCFN.PublicOrInternalInstancePrefix-label=Prefix
NG.FN.PNCFN.PublicOrInternalInstancePrefixObligatory-label=Is prefix obligatory
NG.FN.PNCFN.PublicOrInternalInstanceUpperCase-label=UPPER_CASE
NG.FN.PNCFN.PublicOrInternalInstanceUseHungarianNotation-label=Hungarian Notation
NG.FN.PNCFN.PublicOrInternalStaticReadonlyComplexCamelCase-label=camelCase
NG.FN.PNCFN.PublicOrInternalStaticReadonlyComplexGroup-label=Public or Internal Static Readonly Complex Fields
NG.FN.PNCFN.PublicOrInternalStaticReadonlyComplexLowerCase-label=lower_case
NG.FN.PNCFN.PublicOrInternalStaticReadonlyComplexPascalCase-label=PascalCase
NG.FN.PNCFN.PublicOrInternalStaticReadonlyComplexPrefix-label=Prefix
NG.FN.PNCFN.PublicOrInternalStaticReadonlyComplexPrefixObligatory-label=Is prefix obligatory
NG.FN.PNCFN.PublicOrInternalStaticReadonlyComplexUpperCase-label=UPPER_CASE
NG.FN.PNCFN.PublicOrInternalStaticReadonlyComplexUseHungarianNotation-label=Hungarian Notation
NG.FN.PNCFN.PublicOrInternalStaticReadonlyPrimitiveCamelCase-label=camelCase
NG.FN.PNCFN.PublicOrInternalStaticReadonlyPrimitiveFieldsObligatory-label=Is prefix obligatory
NG.FN.PNCFN.PublicOrInternalStaticReadonlyPrimitiveGroup-label=Public or Internal Static Readonly Primitive Fields
NG.FN.PNCFN.PublicOrInternalStaticReadonlyPrimitiveLowerCase-label=lower_case
NG.FN.PNCFN.PublicOrInternalStaticReadonlyPrimitivePascalCase-label=PascalCase
NG.FN.PNCFN.PublicOrInternalStaticReadonlyPrimitivePrefix-label=Prefix
NG.FN.PNCFN.PublicOrInternalStaticReadonlyPrimitiveUpperCase-label=UPPER_CASE
NG.FN.PNCFN.PublicOrInternalStaticReadonlyPrimitiveUseHungarianNotation-label=Hungarian Notation
NG.FN.PNCFN.PublicOrInternalStaticReadwriteCamelCase-label=camelCase
NG.FN.PNCFN.PublicOrInternalStaticReadwriteGroup-label=Public or Internal Static Writable Fields
NG.FN.PNCFN.PublicOrInternalStaticReadwriteLowerCase-label=lower_case
NG.FN.PNCFN.PublicOrInternalStaticReadwritePascalCase-label=PascalCase
NG.FN.PNCFN.PublicOrInternalStaticReadwritePrefix-label=Prefix
NG.FN.PNCFN.PublicOrInternalStaticReadwritePrefixObligatory-label=Is prefix obligatory
NG.FN.PNCFN.PublicOrInternalStaticReadwriteUpperCase-label=UPPER_CASE
NG.FN.PNCFN.PublicOrInternalStaticReadwriteUseHungarianNotation-label=Hungarian Notation
NG.IN=Interface Naming
NG.MYST=Avoid mysterious acronyms
NG.NN=Namespace Naming
NG.PN=Parameter Naming
NG.PRN=Property Naming
NG.SFN=Static Field Naming
NG.WC=Word Choice
NG.WC.COMMON=Common Names
NG.WC.KEYWORD=Conflicting with Keywords
OOM=Object Oriented Metrics
OPU=Operator Overloading Usage Guidelines
OPU.ATEE=Avoid throwing exceptions from Equals methods
OPU.ATEGH=Avoid throwing exceptions from GetHashCode methods
OPU.ATEI=Avoid throwing exceptions from implicit type conversion operators
OPU.ATEOE=Avoid throwing exceptions in equality operators
OPU.CPIEQ=Compare parameter instance of Equals(Object) method
OPU.CPIEQ.OperandsOrder-description=The order should match order defined in OPU.CPTEQ rule.
OPU.CPIEQ.OperandsOrder-label=Operands order
OPU.CPIEQ.OperandsOrder.0-label=obj parameter always as left operand, e.g.\: if (object.ReferenceEquals(obj, this))
OPU.CPIEQ.OperandsOrder.1-label=obj parameter always as right operand, e.g.\: if(object.ReferenceEquals(this, obj))
OPU.CPIEQ.OperandsOrder.2-label=any
OPU.IGHWE=Override the GetHashCode method whenever you override the Equals method.
PB=Possible Bugs
PB.AIRC=Avoid infinite recursive method calls
PB.ALEEU=Use at least one method with an external effect on an object.
PB.ALEEU.MethodsWithOutsideEffect-label=Methods
PB.ALEEU.SupportedCtorSignatures-label=Constructors
PB.ALVT=Do not use value types as arguments of Monitor.Enter and Monitor.Exit
PB.ATETS=Avoid throwing exceptions from ToString method
PB.CFSRLV=Close file system resource on local variable.
PB.CFSRLV.ActivationMethods-description=Regular expressions of full type names which are taken into account and optionally activating methods which actives these types. Activating methods are useful when object constructions are not equivalent to activating them
PB.CFSRLV.ActivationMethods-label=Activating methods
PB.CFSRLV.ActivationMethods.COLUMN_0-label=Activating method declaring type regex
PB.CFSRLV.ActivationMethods.COLUMN_1-label=Activating method name regex
PB.CFSRLV.ClosingMethods-description=Regular expressions of aliases of System.IDisposable.Dispose(). See rule GC.UFID for details
PB.CFSRLV.ClosingMethods-label=Closing methods
PB.CFSRLV.ClosingMethods.COLUMN_0-label=Closing method declaring type regex
PB.CFSRLV.ClosingMethods.COLUMN_1-label=Closing method name regex
PB.CFSRLV.FactoryMethods-description=Regular expressions of factory methods full type names and method names. Allows to declare custom factory methods, which produce new objects where caller is responsible for disposing. See rule GC.UFID for details
PB.CFSRLV.FactoryMethods-label=Factory methods
PB.CFSRLV.FactoryMethods.COLUMN_0-label=Factory method declaring type regex
PB.CFSRLV.FactoryMethods.COLUMN_1-label=Factory method name regex
PB.CFSRLV.SpecialMethods-description=Regular expressions of methods which are responsible for scheduling disposing the object. See rule GC.UFID for details
PB.CFSRLV.SpecialMethods-label=Special methods
PB.CFSRLV.SpecialMethods.COLUMN_0-label=Special method declaring type regex
PB.CFSRLV.SpecialMethods.COLUMN_1-label=Special method name regex
PB.DNUP=Use TryParse method instead Parse on primitive types
PB.IAU=Avoid internal API usage in extensions code.
PB.IAU.ExternalApi-label=Regular expression of full type names of extensions code.
PB.IAU.InternalApi-label=Regular expression of full type names of internal code.
PB.IAU.PublicApi-label=Regular expression of full type names public API.
PB.II=Incomplete Implementation
PB.II.NIE=Do not leave code which throws System.NotImplementedException
PB.II.TODO=Ensure that comments do not contain task tags
PB.II.TODO.RegularExpressions-label=Regular Expressions (case sensitive)
PB.II.TODO.Words-label=Words (case insensitive)
PB.PAPI=Make sure that published API does not change.
PB.PAPI.ApiRegularExpressions-label=Regular expressions for specifying api code.
PB.PAPI.CreateCurrentXmls-label=Save snapshots of current api image (Use in validation mode).
PB.PAPI.CurrentXmlsSuffix-label=Xmls suffixes of current api snapshot.
PB.PAPI.ExtensionsRegularExpression-label=Regular expressions for specifying extensions code.
PB.PAPI.InternalsRegularExpressions-label=Regular expressions for specifying internal code.
PB.PAPI.Options-label=Rule mode
PB.PAPI.Options.0-label=API recording mode.
PB.PAPI.Options.1-label=API validation mode.
PB.PAPI.PathOfXmls-label=Path for storing api xmls.
PB.PAPI.RecordingPhaseXmlsSuffix-label=Xmls suffixes in api recording mode.
PB.REG=Don't use illegal regular expression.
PB.RPIR=Review possible infinite recursive method calls
PB.SFAI=Ensure static field is initialized before it is used.
PB.TMTC=Ensure that method body used in ThreadStart/ParameterizedThreadStart is wrapped with 'try/catch'
PB.UAPIRF=Do not use API of .NET framework which is not required by your application
PB.UAPIRF.FrameworkSelectionGroup-label=Frameworks on which your code should execute
PB.UAPIRF.IgnoredAssemblies-label=References to symbols which are defined in the following assemblies are ignored\:
SEC=Security Inspection
SEC.ACWFB=Always cleanup before an exception filtering method is invoked
SEC.ADLL=Inspect calls to dynamically load libraries
SEC.APBIF=Avoid public instance fields that could be accessed by external classes.
SEC.CDBC=Review closing database connection.
SEC.CDBC.ActivationMethods-description=Regular expressions of full type names which are taken into account and optionally activating methods which actives these types. Activating methods are useful when object constructions are not equivalent to activating them
SEC.CDBC.ActivationMethods-label=Activating methods
SEC.CDBC.ActivationMethods.COLUMN_0-label=Full type names regex
SEC.CDBC.ActivationMethods.COLUMN_1-label=Activating method name regex
SEC.CDBC.ClosingMethods-description=Regular expressions of aliases of System.IDisposable.Dispose(). See rule GC.UFID for details
SEC.CDBC.ClosingMethods-label=Closing methods
SEC.CDBC.ClosingMethods.COLUMN_0-label=Closing method declaring type regex
SEC.CDBC.ClosingMethods.COLUMN_1-label=Closing method name regex
SEC.CDBC.FactoryMethods-description=Regular expressions of factory methods full type names and method names. Allows to declare custom factory methods, which produce new objects where caller is responsible for disposing. See rule GC.UFID for details
SEC.CDBC.FactoryMethods-label=Factory methods
SEC.CDBC.FactoryMethods.COLUMN_0-label=Factory method declaring type regex
SEC.CDBC.FactoryMethods.COLUMN_1-label=Factory method name regex
SEC.CDBC.SpecialMethods-description=Regular expressions of methods which are responsible for scheduling disposing the object. See rule GC.UFID for details
SEC.CDBC.SpecialMethods-label=Special methods
SEC.CDBC.SpecialMethods.COLUMN_0-label=Special method declaring type regex
SEC.CDBC.SpecialMethods.COLUMN_1-label=Special method name regex
SEC.CDBCLV=Close database connection local variable.
SEC.CDBCLV.ActivationMethods-description=Regular expressions of full type names which are taken into account and optionally activating methods which actives these types. Activating methods are useful when object constructions are not equivalent to activating them
SEC.CDBCLV.ActivationMethods-label=Activating methods
SEC.CDBCLV.ActivationMethods.COLUMN_0-label=Activating method declaring type regex
SEC.CDBCLV.ActivationMethods.COLUMN_1-label=Activating method name regex
SEC.CDBCLV.ClosingMethods-description=Regular expressions of aliases of System.IDisposable.Dispose(). See rule GC.UFID for details
SEC.CDBCLV.ClosingMethods-label=Closing methods
SEC.CDBCLV.ClosingMethods.COLUMN_0-label=Closing method declaring type regex
SEC.CDBCLV.ClosingMethods.COLUMN_1-label=Closing method name regex
SEC.CDBCLV.FactoryMethods-description=Regular expressions of factory methods full type names and method names. Allows to declare custom factory methods, which produce new objects where caller is responsible for disposing. See rule GC.UFID for details
SEC.CDBCLV.FactoryMethods-label=Factory methods
SEC.CDBCLV.FactoryMethods.COLUMN_0-label=Factory method declaring type regex
SEC.CDBCLV.FactoryMethods.COLUMN_1-label=Factory method name regex
SEC.CDBCLV.SpecialMethods-description=Regular expressions of methods which are responsible for scheduling disposing the object. See rule GC.UFID for details
SEC.CDBCLV.SpecialMethods-label=Special methods
SEC.CDBCLV.SpecialMethods.COLUMN_0-label=Special method declaring type regex
SEC.CDBCLV.SpecialMethods.COLUMN_1-label=Special method name regex
SEC.CDR=Review closing database resource.
SEC.CDR.ActivationMethods-description=Regular expressions of full type names which are taken into account and optionally activating methods which actives these types. Activating methods are useful when object constructions are not equivalent to activating them
SEC.CDR.ActivationMethods-label=Activating methods
SEC.CDR.ActivationMethods.COLUMN_0-label=Activating method declaring type regex
SEC.CDR.ActivationMethods.COLUMN_1-label=Activating method name regex
SEC.CDR.ClosingMethods-description=Regular expressions of aliases of System.IDisposable.Dispose(). See rule GC.UFID for details
SEC.CDR.ClosingMethods-label=Closing methods
SEC.CDR.ClosingMethods.COLUMN_0-label=Closing method declaring type regex
SEC.CDR.ClosingMethods.COLUMN_1-label=Closing method name regex
SEC.CDR.FactoryMethods-description=Regular expressions of factory methods full type names and method names. Allows to declare custom factory methods, which produce new objects where caller is responsible for disposing. See rule GC.UFID for details
SEC.CDR.FactoryMethods-label=Factory methods
SEC.CDR.FactoryMethods.COLUMN_0-label=Factory method declaring type regex
SEC.CDR.FactoryMethods.COLUMN_1-label=Factory method name regex
SEC.CDR.SpecialMethods-description=Regular expressions of methods which are responsible for scheduling disposing the object. See rule GC.UFID for details
SEC.CDR.SpecialMethods-label=Special methods
SEC.CDR.SpecialMethods.COLUMN_0-label=Special method declaring type regex
SEC.CDR.SpecialMethods.COLUMN_1-label=Special method name regex
SEC.CDRLV=Close database resource local variable.
SEC.CDRLV.ActivationMethods-description=Regular expressions of full type names which are taken into account and optionally activating methods which actives these types. Activating methods are useful when object constructions are not equivalent to activating them
SEC.CDRLV.ActivationMethods-label=Activating methods
SEC.CDRLV.ActivationMethods.COLUMN_0-label=Activating method declaring type regex
SEC.CDRLV.ActivationMethods.COLUMN_1-label=Activating method name regex
SEC.CDRLV.ClosingMethods-description=Regular expressions of full type names which are taken into account and optionally activating methods which actives these types. Activating methods are useful when object constructions are not equivalent to activating them
SEC.CDRLV.ClosingMethods-label=Activating methods
SEC.CDRLV.ClosingMethods.COLUMN_0-label=Closing method declaring type regex
SEC.CDRLV.ClosingMethods.COLUMN_1-label=Closing method name regex
SEC.CDRLV.ExcludedTypes-label=Types to exclude from analysis (supports wildcards)
SEC.CDRLV.FactoryMethods-description=Regular expressions of full type names which are taken into account and optionally activating methods which actives these types. Activating methods are useful when object constructions are not equivalent to activating them
SEC.CDRLV.FactoryMethods-label=Activating methods
SEC.CDRLV.FactoryMethods.COLUMN_0-label=Factory method declaring type regex
SEC.CDRLV.FactoryMethods.COLUMN_1-label=Factory method name regex
SEC.CDRLV.SpecialMethods-description=Regular expressions of full type names which are taken into account and optionally activating methods which actives these types. Activating methods are useful when object constructions are not equivalent to activating them
SEC.CDRLV.SpecialMethods-label=Activating methods
SEC.CDRLV.SpecialMethods.COLUMN_0-label=Special method declaring type regex
SEC.CDRLV.SpecialMethods.COLUMN_1-label=Special method name regex
SEC.DNCCKS=Do not change the RSA/DSA KeySize property.
SEC.NLT=Do not lock using objects obtained with typeof(ClassName) / GetType(ClassName)
SEC.VPPD=Encapsulate all dangerous data sources with validation methods
SEC.VPPD.AspNet-label=ASP.NET
SEC.VPPD.Console-label=Console
SEC.VPPD.DangerousMethods-label=Additional methods which return dangerous data
SEC.VPPD.DangerousMethods.COLUMN_0-label=Fully qualified type name
SEC.VPPD.DangerousMethods.COLUMN_1-label=Method name
SEC.VPPD.Database-label=Database
SEC.VPPD.Environment-label=Environment
SEC.VPPD.FilesAndStreams-label=Files and streams
SEC.VPPD.GuiControls-label=GUI controls
SEC.VPPD.PipesAndSockets-label=Pipes and sockets
SEC.VPPD.Reflection-label=Reflection
SEC.VPPD.SourcesOfDangerousDataGroup-label=Sources of dangerous (tainted) data
SEC.VPPD.UncheckedCode-label=Methods which are not checked
SEC.VPPD.UncheckedCode.COLUMN_0-label=Fully qualified type name
SEC.VPPD.UncheckedCode.COLUMN_1-label=Method name
SEC.VPPD.ValidationMethods-label=Methods which validate dangerous data
SEC.VPPD.ValidationMethods.COLUMN_0-label=Fully qualified type name
SEC.VPPD.ValidationMethods.COLUMN_1-label=Method name
SEC.VPPD.WildcardOrRegExp-label=Matching method
SEC.VPPD.WildcardOrRegExp.0-label=Wildcards
SEC.VPPD.WildcardOrRegExp.1-label=Regular expressions
SERIAL=Serialization Guidelines
SERIAL.BASECLASS=Ensure base classes are marked Serializable.
SERIAL.EXCEPTIONCLASS=Ensure exception classes are marked Serializable.
SERIAL.IDC=Always provide deserialization constructor when ISerializable interface is implemented
SERIAL.MEMBERFIELDS=Ensure entire graph of object can be serialized.
SERIAL.MGODWSPA=Mark ISerializable.GetObjectData with SecurityPermissionAttribute
SERIAL.XML=Xml Serialization Guidelines
SERIAL.XML.CSG=Ensure that readonly property which is a collection does not expose any sensitive information
SERIAL.XML.CTS=Ensure that property of collection type implements Add method and indexer
SERIAL.XML.DCTOR=Always provide default parameterless constructor in xml serialized class.
SERIAL.XML.NPCS=Make type used in xml serialization 'public'
SPR=Security Policy Rules
TRS=Threads & Synchronization
TRS.THREADABORT=Avoid calling Thread.Abort()
TRS.THREADSLEEP=Avoid calling Thread.Sleep()
TUG=Type Usage Guidelines
TUG.AU=Attribute Usage
TUG.BCU=Base Class Usage
TUG.DCU=Derived Class Usage
TUG.DCU.DNHF=Do not hide inherited fields.
TUG.EU=Enum Usage
TUG.EU.UEISC=Use enumerations instead of constant or static readonly fields
TUG.NTU=Nested Type Usage
TUG.NTU.AUPNT=Avoid unused nested private types
TUG.SCU=Sealed Class Usage
TUG.SU=Struct Usage
TUG.SU.IAS=Enforce custom attribute ImmutableAtomic
VB=Visual Basic Only
VB.BRM=Better Readability and Maintainability
VB.BRM.PNPT=Use preferred names for primitive types
VB.BRM.PNPT.UsePrimitiveTypes-label=Select prefered naming for primitive types
VB.BRM.PNPT.UsePrimitiveTypes.0-label=Use keywords for primitive types
VB.BRM.PNPT.UsePrimitiveTypes.1-label=Use .NET type names for primitive types
VB.IFD=Implementing Finalize and Dispose
VB.IFD.CBFM=Call the Finalize method of the base class from the finalizer in the derived class
WPF=Windows Presentation Foundation
WPF.GUG=Avoid controls out of bounds of a grid
