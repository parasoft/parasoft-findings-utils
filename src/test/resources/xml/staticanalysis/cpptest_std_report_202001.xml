<?xml version='1.0' encoding='UTF-8'?>
<ResultsSession buildId="2023-08-04" climode="true" execEnv="win32_x86_64" hasViols="true" id="1689407011442" lang="en_US" machine="machine-name" prjModule="build" project="" tag="${scontrol_branch}-win32_x86_64" time="2023-08-04T11:03:03+08:00" toolDispName="C/C++test" toolId="c++test" toolName="DTP Engine for C/C++" toolVer="2022.1.0" user="username">
   <TestConfig machine="machine-name" name="cpptest_settings" pseudoUrl="../cpptest_settings.properties" user="username" />
   <Authors>
      <Author id="dev1" name="username" />
   </Authors>
   <Analyzers>
      <Analyzer id="com.parasoft.xtest.scope.analyzer" name="Scope Analyzer" ver="10.6.0.20220510" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.code" name="Parasoft C/C++ Code Analyzer" ver="10.6.0.20220614B1716" />
      <Analyzer id="com.parasoft.xtest.dupcode.parser" name="Code Duplication Parser" ver="10.6.0.20220510" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.pattern" name="Parasoft C/C++ Static Analyzer" ver="10.6.0.20220614B1716" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.flow" name="Parasoft C/C++ Flow Analyzer" ver="10.6.0.20220527B3558" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.metrics" name="Parasoft C/C++ Metrics Analyzer" ver="10.6.0.20220614B1716" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.dupcode" name="Code Duplication Detector" ver="10.6.0.20220510" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.global" name="Parasoft C/C++ Global Static Analyzer" ver="10.6.0.20220614B1716" />
   </Analyzers>
   <VersionInfos>
      <StorageInfo ownerId="" resultId="ISetupResult" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IExecutionViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IFunctionalViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="" resultId="IChangeImpactViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IUnitTestViolation" ver="1" ver10x="1" />
   </VersionInfos>
   <Goals tsks="50">

   </Goals>
   <Metrics>
      <Metric avg="1.933" disp="true" id="METRIC.CC" max="8" min="1" name="McCabe Cyclomatic Complexity" noi="15" stddev="1.731">
         <Info avg="1.933" disp="true" elem="build" max="8" min="1" noi="15" stddev="1.731" />
      </Metric>
      <Metric avg="0.88" disp="true" id="METRIC.CLLOCRIF" max="1.8" min="0.211" name="Comment/Logical Lines in Files" noi="4" stddev="0.682">
         <Info avg="0.88" disp="true" elem="build" max="1.8" min="0.211" noi="4" stddev="0.682" />
      </Metric>
      <Metric avg="0.45" disp="true" id="METRIC.CLLOCRIM" max="3" min="0" name="Comment/Logical Lines in Methods" noi="14" stddev="0.764">
         <Info avg="0.45" disp="true" elem="build" max="3" min="0" noi="14" stddev="0.764" />
      </Metric>
      <Metric avg="0.333" disp="true" id="METRIC.DIF" max="1" min="0" name="Depth of Nested 'if' Statements" noi="15" stddev="0.471">
         <Info avg="0.333" disp="true" elem="build" max="1" min="0" noi="15" stddev="0.471" />
      </Metric>
      <Metric avg="1.533" disp="true" id="METRIC.ECC" max="7" min="1" name="Essential Cyclomatic Complexity" noi="15" stddev="1.543">
         <Info avg="1.533" disp="true" elem="build" max="7" min="1" noi="15" stddev="1.543" />
      </Metric>
      <Metric avg="6.534" disp="true" id="METRIC.HDIFM" max="20.132" min="0.5" name="Halstead Difficulty" noi="15" stddev="5.511">
         <Info avg="6.534" disp="true" elem="build" max="20.132" min="0.5" noi="15" stddev="5.511" />
      </Metric>
      <Metric avg="1936.4" disp="true" id="METRIC.HEFM" max="8638.537" min="5.805" name="Halstead Effort" noi="15" stddev="2468.183">
         <Info avg="1936.4" disp="true" elem="build" max="8638.537" min="5.805" noi="15" stddev="2468.183" />
      </Metric>
      <Metric avg="33.383" disp="true" id="METRIC.HICM" max="97.253" min="14.089" name="Halstead Intelligent Content" noi="15" stddev="21.895">
         <Info avg="33.383" disp="true" elem="build" max="97.253" min="14.089" noi="15" stddev="21.895" />
      </Metric>
      <Metric avg="42.067" disp="true" id="METRIC.HLENM" max="118" min="5" name="Halstead Program Length" noi="15" stddev="31.099">
         <Info avg="42.067" disp="true" elem="build" max="118" min="5" noi="15" stddev="31.099" />
      </Metric>
      <Metric avg="0.395" disp="true" id="METRIC.HLEVM" max="2" min="0.05" name="Halstead Program Level" noi="15" stddev="0.493">
         <Info avg="0.395" disp="true" elem="build" max="2" min="0.05" noi="15" stddev="0.493" />
      </Metric>
      <Metric avg="0.043" disp="true" id="METRIC.HNOBM" max="0.14" min="0.001" name="Halstead Number of Bugs" noi="15" stddev="0.041">
         <Info avg="0.043" disp="true" elem="build" max="0.14" min="0.001" noi="15" stddev="0.041" />
      </Metric>
      <Metric avg="107.578" disp="true" id="METRIC.HTTPM" max="479.919" min="0.322" name="Halstead Time to Program" noi="15" stddev="137.121">
         <Info avg="107.578" disp="true" elem="build" max="479.919" min="0.322" noi="15" stddev="137.121" />
      </Metric>
      <Metric avg="21" disp="true" id="METRIC.HVOCM" max="40" min="5" name="Halstead Program Vocabulary" noi="15" stddev="10.93">
         <Info avg="21" disp="true" elem="build" max="40" min="5" noi="15" stddev="10.93" />
      </Metric>
      <Metric avg="198.65" disp="true" id="METRIC.HVOLM" max="627.988" min="11.61" name="Halstead Program Volume" noi="15" stddev="171.717">
         <Info avg="198.65" disp="true" elem="build" max="627.988" min="11.61" noi="15" stddev="171.717" />
      </Metric>
      <Metric avg="1.667" disp="true" id="METRIC.MCC" max="4" min="1" name="Modified Cyclomatic Complexity" noi="15" stddev="0.869">
         <Info avg="1.667" disp="true" elem="build" max="4" min="1" noi="15" stddev="0.869" />
      </Metric>
      <Metric avg="0.667" disp="true" id="METRIC.NBD" max="3" min="0" name="Nested Blocks Depth" noi="15" stddev="0.869">
         <Info avg="0.667" disp="true" elem="build" max="3" min="0" noi="15" stddev="0.869" />
      </Metric>
      <Metric avg="13.75" disp="true" id="METRIC.NOBLIF" max="30" min="6" name="Blank Lines in Files" noi="4" stddev="9.497">
         <Info avg="13.75" disp="true" elem="build" max="30" min="6" noi="4" stddev="9.497" />
      </Metric>
      <Metric avg="1.6" disp="true" id="METRIC.NOBLIM" max="8" min="0" name="Blank Lines in Methods" noi="15" stddev="2.245">
         <Info avg="1.6" disp="true" elem="build" max="8" min="0" noi="15" stddev="2.245" />
      </Metric>
      <Metric avg="11.5" disp="true" id="METRIC.NOCLIF" max="15" min="8" name="Comment Lines in Files" noi="4" stddev="3.041">
         <Info avg="11.5" disp="true" elem="build" max="15" min="8" noi="4" stddev="3.041" />
      </Metric>
      <Metric avg="2.267" disp="true" id="METRIC.NOCLIM" max="8" min="0" name="Comment Lines in Methods" noi="15" stddev="2.435">
         <Info avg="2.267" disp="true" elem="build" max="8" min="0" noi="15" stddev="2.435" />
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.NOF" max="1" min="1" name="Number of Files" noi="4" stddev="0">
         <Info avg="1" disp="true" elem="build" max="1" min="1" noi="4" stddev="0" />
      </Metric>
      <Metric avg="29.25" disp="true" id="METRIC.NOLLOCIF" max="63" min="5" name="Logical Lines in Files" noi="4" stddev="23.112">
         <Info avg="29.25" disp="true" elem="build" max="63" min="5" noi="4" stddev="23.112" />
      </Metric>
      <Metric avg="7.8" disp="true" id="METRIC.NOLLOCIM" max="24" min="0" name="Logical Lines in Methods" noi="15" stddev="6.705">
         <Info avg="7.8" disp="true" elem="build" max="24" min="0" noi="15" stddev="6.705" />
      </Metric>
      <Metric avg="4.4" disp="true" id="METRIC.NOMCIM" max="16" min="0" name="Method Calls In Methods" noi="15" stddev="4.95">
         <Info avg="4.4" disp="true" elem="build" max="16" min="0" noi="15" stddev="4.95" />
      </Metric>
      <Metric avg="0.4" disp="true" id="METRIC.NOPAR" max="2" min="0" name="Parameters of Methods" noi="15" stddev="0.611">
         <Info avg="0.4" disp="true" elem="build" max="2" min="0" noi="15" stddev="0.611" />
      </Metric>
      <Metric avg="79" disp="true" id="METRIC.NOPLIF" max="155" min="30" name="Physical Lines in Files" noi="4" stddev="46.803">
         <Info avg="79" disp="true" elem="build" max="155" min="30" noi="4" stddev="46.803" />
      </Metric>
      <Metric avg="16.6" disp="true" id="METRIC.NOPLIM" max="38" min="4" name="Physical Lines in Methods" noi="15" stddev="10.831">
         <Info avg="16.6" disp="true" elem="build" max="38" min="4" noi="15" stddev="10.831" />
      </Metric>
      <Metric avg="0.533" disp="true" id="METRIC.NORET" max="2" min="0" name="Number of Returns in Methods" noi="15" stddev="0.618">
         <Info avg="0.533" disp="true" elem="build" max="2" min="0" noi="15" stddev="0.618" />
      </Metric>
      <Metric avg="55" disp="true" id="METRIC.NOSLIF" max="110" min="15" name="Source Lines in Files" noi="4" stddev="35.91">
         <Info avg="55" disp="true" elem="build" max="110" min="15" noi="4" stddev="35.91" />
      </Metric>
      <Metric avg="13.067" disp="true" id="METRIC.NOSLIM" max="33" min="3" name="Source Lines in Methods" noi="15" stddev="8.298">
         <Info avg="13.067" disp="true" elem="build" max="33" min="3" noi="15" stddev="8.298" />
      </Metric>
      <Metric avg="1.933" disp="true" id="METRIC.SCC" max="8" min="1" name="Strict Cyclomatic Complexity" noi="15" stddev="1.731">
         <Info avg="1.933" disp="true" elem="build" max="8" min="1" noi="15" stddev="1.731" />
      </Metric>
   </Metrics>
   <Scope>
      <Repositories />
      <Locations>
         <Loc auth="username" hash="-249486341" locRef="1" projId="build" projPath="/build" project="build" resProjPath="../../../../../../../../clock.c" totLns="30" uri="file://machine-name/C:/Workspace/jenkins_original_code_workspace/workspace/cicd.findings.cpptest.std.Timer.remote_docs/clock.c" />
         <Loc auth="username" hash="65740504" locRef="2" projId="build" projPath="/build" project="build" resProjPath="../../../../../../../../driver.c" totLns="76" uri="file://machine-name/C:/Workspace/jenkins_original_code_workspace/workspace/cicd.findings.cpptest.std.Timer.remote_docs/driver.c" />
         <Loc auth="username" hash="-275311578" locRef="3" projId="build" projPath="/build" project="build" resProjPath="../../../../../../../../timer.c" totLns="155" uri="file://machine-name/C:/Workspace/jenkins_original_code_workspace/workspace/cicd.findings.cpptest.std.Timer.remote_docs/timer.c" />
         <Loc auth="username" hash="844867668" locRef="4" projId="build" projPath="/build" project="build" resProjPath="../../../../../../../../stdinout.c" totLns="55" uri="file://machine-name/C:/Workspace/jenkins_original_code_workspace/workspace/cicd.findings.cpptest.std.Timer.remote_docs/stdinout.c" />
      </Locations>
   </Scope>

  <SetupProblems />

   <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:47">
      <Projects>
         <Project bdCheckedFiles="0" bdTotalFiles="0" checkedFiles="4" checkedLns="316" id="build" name="build" qfixErrs="0" suppErrs="0" totErrs="2428" totFiles="4" totLns="316" />
      </Projects>


      <Rules>
         <CategoriesList>
            <Category authTot="0;" authUrg="0;" desc="DISA ASD STIG" name="APSC_DV" rules="104" total="0">
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001850 The application must not display passwords/PINs as clear text." name="APSC_DV-001850" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001750 The application must transmit only cryptographically-protected passwords." name="APSC_DV-001750" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000480 The application must enforce approved authorizations for controlling the flow of information within the system based on organization-defined information flow control policies." name="APSC_DV-000480" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000160 The application must implement DoD-approved encryption to protect the confidentiality of remote access sessions." name="APSC_DV-000160" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002460 The application must maintain the confidentiality and integrity of information during preparation for transmission." name="APSC_DV-002460" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-002560 The application must not be subject to input handling vulnerabilities." name="APSC_DV-002560" rules="11" total="1" />
               <Category authTot="28;" authUrg="0;" desc="APSC_DV-003110 The application must not contain embedded authentication data." name="APSC_DV-003110" rules="1" total="28" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002000 The application must terminate all network connections associated with a communications session at the end of the session." name="APSC_DV-002000" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002440 The application must protect the confidentiality and integrity of transmitted information." name="APSC_DV-002440" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002540 The application must not be vulnerable to SQL Injection." name="APSC_DV-002540" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000500 The application must prevent non-privileged users from executing privileged functions to include disabling, circumventing, or altering implemented security safeguards/countermeasures." name="APSC_DV-000500" rules="1" total="0" />
               <Category authTot="4;" authUrg="0;" desc="APSC_DV-001995 The application must not be vulnerable to race conditions." name="APSC_DV-001995" rules="9" total="4" />
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-002520 The application must protect from canonical representation vulnerabilities." name="APSC_DV-002520" rules="11" total="1" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-003235 The application must not be subject to error handling vulnerabilities." name="APSC_DV-003235" rules="2" total="0" />
               <Category authTot="4;" authUrg="0;" desc="APSC_DV-002400 The application must restrict the ability to launch Denial of Service (DoS) attacks against itself or other information systems." name="APSC_DV-002400" rules="4" total="4" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002290 The application must use the Federal Information Processing Standard (FIPS) 140-2-validated cryptographic modules and random number generator if the application implements encryption, key exchange, digital signature, and hash functionality." name="APSC_DV-002290" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002390 XML-based applications must mitigate DoS attacks by using XML filters, parser options, or gateways." name="APSC_DV-002390" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002590 The application must not be vulnerable to overflow attacks." name="APSC_DV-002590" rules="11" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000170 The application must implement cryptographic mechanisms to protect the integrity of remote access sessions." name="APSC_DV-000170" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001300 The application must protect audit information from unauthorized deletion." name="APSC_DV-001300" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001740 The application must only store cryptographic representations of passwords." name="APSC_DV-001740" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000650 The application must not write sensitive data into the application logs." name="APSC_DV-000650" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001860 The application must use mechanisms meeting the requirements of applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance for authentication to a cryptographic module." name="APSC_DV-001860" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002470 The application must maintain the confidentiality and integrity of information during reception." name="APSC_DV-002470" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002350 The application must use appropriate cryptography in order to protect stored DoD information when required by the information owner or DoD policy." name="APSC_DV-002350" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002570 The application must generate error messages that provide information necessary for corrective actions without revealing information that could be exploited by adversaries." name="APSC_DV-002570" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002010 The application must implement NSA-approved cryptography to protect classified information in accordance with applicable federal laws, Executive Orders, directives, policies, regulations, and standards." name="APSC_DV-002010" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-002550 The application must not be vulnerable to XML-oriented attacks." name="APSC_DV-002550" rules="11" total="1" />
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-002530 The application must validate all input." name="APSC_DV-002530" rules="11" total="1" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002510 The application must protect from command injection." name="APSC_DV-002510" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002480 The application must not disclose unnecessary information to users." name="APSC_DV-002480" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001290 The application must protect audit information from unauthorized modification." name="APSC_DV-001290" rules="4" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="AUTOSAR C++14 Coding Guidelines" name="AUTOSAR" rules="554" total="0">
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-6-1 #error directive shall not be used" name="AUTOSAR-A16_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-3-1 All overloads of a function shall be visible from where it is called" name="AUTOSAR-A7_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M8-5-2 Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" name="AUTOSAR-M8_5_2" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-1 A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" name="AUTOSAR-A6_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A25-4-1 Ordering predicates used with associative containers and STL sorting and related algorithms shall adhere to a strict weak ordering relation" name="AUTOSAR-A25_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-1-1 The assignment-expression of a throw statement shall not itself cause an exception to be thrown" name="AUTOSAR-M15_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-1-3 An empty throw (throw;) shall only be used in the compound statement of a catch handler" name="AUTOSAR-M15_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-1-2 NULL shall not be thrown explicitly" name="AUTOSAR-M15_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-7-1 If the behavior of a user-defined special member function is identical to implicitly defined special member function, then it shall be defined &quot;=default&quot; or be left undefined" name="AUTOSAR-A12_7_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-3-2 The unary minus operator shall not be applied to an expression whose underlying type is unsigned" name="AUTOSAR-M5_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-3-1 Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" name="AUTOSAR-M5_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-3-4 Evaluation of the operand to the sizeof operator shall not contain side effects" name="AUTOSAR-M5_3_4" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-3-3 The unary &amp; operator shall not be overloaded" name="AUTOSAR-M5_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-2 All user-defined conversion operators shall be defined explicit" name="AUTOSAR-A13_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-3 User-defined conversion operators should not be used" name="AUTOSAR-A13_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-6-1 The goto statement shall not be used" name="AUTOSAR-A6_6_1" rules="1" total="0" />
               <Category authTot="4;" authUrg="0;" desc="AUTOSAR M27-0-1 The stream input/output library &lt;cstdio> shall not be used" name="AUTOSAR-M27_0_1" rules="1" total="4" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-1 If &quot;operator[]&quot; is to be overloaded with a non-const version, const version shall also be implemented" name="AUTOSAR-A13_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-16-1 The ternary conditional operator shall not be used as a sub-expression" name="AUTOSAR-A5_16_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-4 If two opposite operators are defined, one shall be defined in terms of the other" name="AUTOSAR-A13_5_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-5 Comparison operators shall be non-member functions with identical parameter types and noexcept" name="AUTOSAR-A13_5_5" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A23-0-2 Elements of a container shall only be accessed via valid references, iterators, and pointers" name="AUTOSAR-A23_0_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-1-4 If a function exits with an exception, then before a throw, the function shall place all objects/resources that the function constructed in valid states or it shall delete them" name="AUTOSAR-A15_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A23-0-1 An iterator shall not be implicitly converted to const_iterator" name="AUTOSAR-A23_0_1" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M4-5-3 Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary &amp; operator" name="AUTOSAR-M4_5_3" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-1-5 Exceptions shall not be thrown across execution boundaries" name="AUTOSAR-A15_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-17-1 The semantic equivalence between a binary operator and its assignment operator form shall be preserved" name="AUTOSAR-M5_17_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-1-2 An exception object shall not be a pointer" name="AUTOSAR-A15_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M4-5-1 Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &amp;&amp;, ||, !, the equality operators == and !=, the unary &amp; operator, and the conditional operator" name="AUTOSAR-M4_5_1" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M0-1-10 Every defined function should be called at least once" name="AUTOSAR-M0_1_10" rules="2" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-1-1 Only instances of types derived from std::exception shall be thrown" name="AUTOSAR-A15_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-4-1 Hierarchies should be based on interface classes" name="AUTOSAR-A10_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-7-1 The #pragma directive shall not be used" name="AUTOSAR-A16_7_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A11-0-1 A non-POD type should be defined as class" name="AUTOSAR-A11_0_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A11-0-2 A type defined as struct shall: (1) provide only public data members, (2) not provide any special member functions or methods, (3) not be a base of another struct or class, (4) not inherit from another struct or class" name="AUTOSAR-A11_0_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-3 Enumerations shall be declared as scoped enum classes" name="AUTOSAR-A7_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &amp;" name="AUTOSAR-M8_4_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-2 Enumeration underlying base type shall be explicitly defined" name="AUTOSAR-A7_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-1 An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" name="AUTOSAR-A7_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M8-4-2 The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration" name="AUTOSAR-M8_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-7-1 The character \ shall not occur as a last character of a C++ comment" name="AUTOSAR-A2_7_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-9-1 The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" name="AUTOSAR-M3_9_1" rules="1" total="0" />
               <Category authTot="27;" authUrg="0;" desc="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags" name="AUTOSAR-A2_7_3" rules="2" total="27" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-7-2 Sections of code shall not be &quot;commented out&quot;" name="AUTOSAR-A2_7_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M12-1-1 An object's dynamic type shall not be used from the body of its constructor or destructor" name="AUTOSAR-M12_1_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-9-3 The underlying bit representations of floating-point values shall not be used" name="AUTOSAR-M3_9_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A1-1-1 All code shall conform to ISO/IEC 14882:2014 - Programming Language C++ and shall not use deprecated features" name="AUTOSAR-A1_1_1" rules="11" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-1-2 Functions shall not be declared at block scope" name="AUTOSAR-M3_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-4-1 A switch statement shall have at least two case-clauses, distinct from the default label" name="AUTOSAR-A6_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-6-1 All class data members that are initialized by the constructor shall be initialized using member initializers" name="AUTOSAR-A12_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-0-3 Control shall not be transferred into a try or catch block using a goto or a switch statement" name="AUTOSAR-M15_0_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-6 A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" name="AUTOSAR-M5_2_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-9 A cast shall not convert a pointer type to an integral type" name="AUTOSAR-M5_2_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M14-5-3 A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" name="AUTOSAR-M14_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-2-1 The macro offsetof shall not be used" name="AUTOSAR-M18_2_1" rules="1" total="0" />
               <Category authTot="3;" authUrg="0;" desc="AUTOSAR M5-2-8 An object with integer type or pointer to void type shall not be converted to an object with pointer type" name="AUTOSAR-M5_2_8" rules="1" total="3" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-6-1 The right hand operand of the integer division or remainder operators shall not be equal to zero" name="AUTOSAR-A5_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-3 Casts from a base class to a derived class should not be performed on polymorphic types" name="AUTOSAR-M5_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-2 A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" name="AUTOSAR-M5_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-3 Do statements should not be used" name="AUTOSAR-A6_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-2 A for loop shall contain a single loop-counter which shall not have floating-point type" name="AUTOSAR-A6_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-5 Hexadecimal constants should be upper case" name="AUTOSAR-A2_13_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-6 Universal character names shall be used only inside character or string literals" name="AUTOSAR-A2_13_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-4 For-init-statement and expression should not perform actions other than loop-counter initialization and modification" name="AUTOSAR-A6_5_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-3 Type wchar_t shall not be used" name="AUTOSAR-A2_13_3" rules="1" total="0" />
               <Category authTot="26;" authUrg="0;" desc="AUTOSAR A2-13-4 String literals shall not be assigned to non-constant pointers" name="AUTOSAR-A2_13_4" rules="1" total="26" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-1 Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used" name="AUTOSAR-A2_13_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-2 String literals with different encoding prefixes shall not be concatenated" name="AUTOSAR-A2_13_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-15 Array indexing shall be the only form of pointer arithmetic" name="AUTOSAR-M5_0_15" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M5-0-16 A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" name="AUTOSAR-M5_0_16" rules="2" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-17 Subtraction between pointers shall only be applied to pointers that address elements of the same array" name="AUTOSAR-M5_0_17" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-18 >, >=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array" name="AUTOSAR-M5_0_18" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-0-2 At least the basic guarantee for exception safety shall be provided for all operations. In addition, each function may offer either the strong guarantee or the nothrow guarantee" name="AUTOSAR-A15_0_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M9-3-1 Const member functions shall not return non-const pointers or references to class-data" name="AUTOSAR-M9_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-10 If the bitwise operators ~ and &lt;&lt; are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" name="AUTOSAR-M5_0_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" name="AUTOSAR-M9_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-11 The plain char type shall only be used for the storage and use of character values" name="AUTOSAR-M5_0_11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-12 Signed char and unsigned char type shall only be used for the storage and use of numeric values" name="AUTOSAR-M5_0_12" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-14 The first operand of a conditional-operator shall have type bool" name="AUTOSAR-M5_0_14" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified" name="AUTOSAR-M7_1_2" rules="3" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-4 The register keyword shall not be used" name="AUTOSAR-A7_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-3 CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name" name="AUTOSAR-A7_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-2 The constexpr specifier shall be used for values that can be determined at compile time" name="AUTOSAR-A7_1_2" rules="2" total="0" />
               <Category authTot="12;" authUrg="0;" desc="AUTOSAR A7-1-1 Constexpr or const specifiers shall be used for immutable data declaration" name="AUTOSAR-A7_1_1" rules="1" total="12" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-8-1 A header file name shall be identical to a type name declared in it if it declares a type" name="AUTOSAR-A2_8_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-11-1 Volatile keyword shall not be used" name="AUTOSAR-A2_11_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A9-5-1 Unions shall not be used" name="AUTOSAR-A9_5_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement" name="AUTOSAR-M6_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-20 Non-constant operands to a binary bitwise operator shall have the same underlying type" name="AUTOSAR-M5_0_20" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-21 Bitwise operators shall only be applied to operands of unsigned underlying type" name="AUTOSAR-M5_0_21" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-0-1 The C library facilities shall only be accessed through C++ library headers" name="AUTOSAR-A18_0_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-0-3 The library &lt;clocale> (locale.h) and the setlocale function shall not be used" name="AUTOSAR-A18_0_3" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-4-2 Use of floating-point arithmetic shall be documented" name="AUTOSAR-M0_4_2" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A18-0-2 The error state of a conversion from string to a numeric value shall be checked" name="AUTOSAR-A18_0_2" rules="2" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-3-1 A function that contains &quot;forwarding reference&quot; as its argument shall not be overloaded" name="AUTOSAR-A13_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-5-1 A pointer to member shall not access non-existent class members" name="AUTOSAR-A5_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M14-6-1 In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" name="AUTOSAR-M14_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-4-2 Type long double shall not be used" name="AUTOSAR-A0_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-4-4 Range, domain and pole errors shall be checked when using math functions" name="AUTOSAR-A0_4_4" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A4-7-1 An integer expression shall not lead to data loss" name="AUTOSAR-A4_7_1" rules="8" total="1" />
               <Category authTot="5;" authUrg="0;" desc="AUTOSAR A7-2-5 Enumerations should be used to represent sets of related named constants" name="AUTOSAR-A7_2_5" rules="1" total="5" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-4 In an enumeration, either (1) none, (2) the first or (3) all enumerators shall be initialized" name="AUTOSAR-A7_2_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-6 std::make_shared shall be used to construct objects owned by std::shared_ptr" name="AUTOSAR-A20_8_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-5 std::make_unique shall be used to construct objects owned by std::unique_ptr" name="AUTOSAR-A20_8_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-7 A std::weak_ptr shall be used to represent temporary shared ownership" name="AUTOSAR-A20_8_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-2 A std::unique_ptr shall be used to represent exclusive ownership" name="AUTOSAR-A20_8_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-1 An already-owned pointer value shall not be stored in an unrelated smart pointer" name="AUTOSAR-A20_8_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-4 A std::unique_ptr shall be used over std::shared_ptr if ownership sharing is not required" name="AUTOSAR-A20_8_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-3 A std::shared_ptr shall be used to represent shared ownership" name="AUTOSAR-A20_8_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A9-6-1 Data types used for interfacing with hardware or conforming to communication protocols shall be trivial, standard-layout and only contain members of types with defined sizes" name="AUTOSAR-A9_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-2-3 Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character" name="AUTOSAR-M6_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-2-2 Floating-point expressions shall not be directly or indirectly tested for equality or inequality" name="AUTOSAR-M6_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-4-1 Destructor of a base class shall be public virtual, public override or protected non-virtual" name="AUTOSAR-A12_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-1 An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" name="AUTOSAR-A2_10_1" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-2-1 Assignment operators shall not be used in sub-expressions" name="AUTOSAR-M6_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-2-2 Expression statements shall not be explicit calls to constructors of temporary objects only" name="AUTOSAR-A6_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-2-1 Move and copy assignment operators shall either move or respectively copy base classes and data members of a class, without any side effects" name="AUTOSAR-A6_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A9-6-2 Bit-fields shall be used only when interfacing to hardware or conforming to communication protocols" name="AUTOSAR-A9_6_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-4-2 If a public destructor of a class is non-virtual, then the class should be declared final" name="AUTOSAR-A12_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-11 &quot;operator new&quot; and &quot;operator delete&quot; shall be defined together" name="AUTOSAR-A18_5_11" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-11 A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" name="AUTOSAR-A8_4_11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-10 Placement new shall be used only with properly aligned pointers to sufficient storage capacity" name="AUTOSAR-A18_5_10" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-10 A parameter shall be passed by reference if it can't be NULL" name="AUTOSAR-A8_4_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-13 A std::shared_ptr shall be passed to a function as: (1) a copy to express the function shares ownership (2) an lvalue reference to express that the function replaces the managed object (3) a const lvalue reference to express that the function retains a reference count" name="AUTOSAR-A8_4_13" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-12 A std::unique_ptr shall be passed to a function as: (1) a copy to express the function assumes ownership (2) an lvalue reference to express that the function replaces the managed object" name="AUTOSAR-A8_4_12" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-2 The std::vector&lt;bool> specialization shall not be used" name="AUTOSAR-A18_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-1 C-style arrays shall not be used" name="AUTOSAR-A18_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-2-1 An assignment operator shall return a reference to &quot;this&quot;" name="AUTOSAR-A13_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-4 A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" name="AUTOSAR-A18_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-0-3 The library functions abort, exit, getenv and system from library &lt;cstdlib> shall not be used" name="AUTOSAR-M18_0_3" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-2-2 A binary arithmetic operator and a bitwise operator shall return a &quot;prvalue&quot;" name="AUTOSAR-A13_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-3 The std::auto_ptr type shall not be used" name="AUTOSAR-A18_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-6 All std::hash specializations for user-defined types shall have a noexcept function call operator" name="AUTOSAR-A18_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-2-3 A relational operator shall return a boolean value" name="AUTOSAR-A13_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-0-5 The unbounded functions of library &lt;cstring> shall not be used" name="AUTOSAR-M18_0_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-0-4 The time handling functions of library &lt;ctime> shall not be used" name="AUTOSAR-M18_0_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M2-10-1 Different identifiers shall be typographically unambiguous" name="AUTOSAR-M2_10_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-14-1 The right hand operand of a logical &amp;&amp;, || operators shall not contain side effects" name="AUTOSAR-M5_14_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-9 A class, structure, or enumeration shall not be declared in the definition of its type" name="AUTOSAR-A7_1_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-8 A non-type specifier shall be placed before a type specifier in a declaration" name="AUTOSAR-A7_1_8" rules="1" total="0" />
               <Category authTot="8;" authUrg="0;" desc="AUTOSAR A7-1-7 Each expression statement and identifier declaration shall be placed on a separate line" name="AUTOSAR-A7_1_7" rules="3" total="8" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-6 The typedef specifier shall not be used" name="AUTOSAR-A7_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-5 The auto specifier shall not be used apart from following cases: (1) to declare that a variable has the same type as return type of a function call, (2) to declare that a variable has the same type as initializer of non-fundamental type, (3) to declare parameters of a generic lambda expression, (4) to declare a function template using trailing return type syntax" name="AUTOSAR-A7_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-2 Forwarding values to other functions shall be done via: (1) std::move if the value is an rvalue reference, (2) std::forward if the value is forwarding reference" name="AUTOSAR-A18_9_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-1 The std::bind shall not be used" name="AUTOSAR-A18_9_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-4 An argument to std::forward shall not be subsequently used" name="AUTOSAR-A18_9_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-3 The std::move shall not be used on objects declared const or const&amp;" name="AUTOSAR-A18_9_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A14-8-2 Explicit specializations of function templates shall not be used" name="AUTOSAR-A14_8_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-8-1 An object shall not be accessed outside of its lifetime" name="AUTOSAR-A3_8_1" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-3-2 The # and ## operators should not be used" name="AUTOSAR-M16_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-4 If a class has a user-declared constructor that takes a parameter of type std::initializer_list, then it shall be the only constructor apart from special member function constructors" name="AUTOSAR-A8_5_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-3-1 There shall be at most one occurrence of the # or ## operators in a single macro definition" name="AUTOSAR-M16_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-3-2 The identifier main shall not be used for a function other than the global function main" name="AUTOSAR-M7_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-3-1 The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" name="AUTOSAR-M7_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-2-1 The ', &quot;, /*, //, \ characters shall not occur in a header file name or in #include directive" name="AUTOSAR-A16_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-1 In an initialization list, the order of initialization shall be following: (1) virtual base classes in depth and left to right order of the inheritance graph, (2) direct base classes in left to right order of inheritance list, (3) non-static data members in the order they were declared in the class definition" name="AUTOSAR-A8_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-3-4 Using-directives shall not be used" name="AUTOSAR-M7_3_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-0 All memory shall be initialized before it is read" name="AUTOSAR-A8_5_0" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-3-3 There shall be no unnamed namespaces in header files" name="AUTOSAR-M7_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-3 A variable of type auto shall not be initialized using {} or ={} braced-initialization" name="AUTOSAR-A8_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-3-6 Using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" name="AUTOSAR-M7_3_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-2-2 There shall be no unused include directives" name="AUTOSAR-A16_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-2 Braced-initialization {}, without equals sign, shall be used for variable initialization" name="AUTOSAR-A8_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A17-0-1 Reserved identifiers, macros and functions in the C++ standard library shall not be defined, redefined or undefined" name="AUTOSAR-A17_0_1" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A9-3-1 Member functions shall not return non-const &quot;raw&quot; pointers or references to private or protected data owned by the class" name="AUTOSAR-A9_3_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-5 A loop-control-variable other than the loop-counter shall not be modified within condition or expression" name="AUTOSAR-M6_5_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-4 The loop-counter shall be modified by one of: --, ++, -= n, or += n; where n remains constant for the duration of the loop" name="AUTOSAR-M6_5_4" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M3-4-1 An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" name="AUTOSAR-M3_4_1" rules="2" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-3 The loop-counter shall not be modified within condition or statement" name="AUTOSAR-M6_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" name="AUTOSAR-M6_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-6 A loop-control-variable other than the loop-counter which is modified in statement shall have type bool" name="AUTOSAR-M6_5_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-1-2 User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" name="AUTOSAR-A13_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-2-1 An object shall not be assigned to an overlapping object" name="AUTOSAR-M0_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M4-10-1 NULL shall not be used as an integer value" name="AUTOSAR-M4_10_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-1-3 User defined literals operators shall only perform conversion of passed parameters" name="AUTOSAR-A13_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-3-3 Pointers to incomplete class types shall not be deleted" name="AUTOSAR-A5_3_3" rules="1" total="0" />
               <Category authTot="4;" authUrg="0;" desc="AUTOSAR A5-3-2 Null pointers shall not be dereferenced" name="AUTOSAR-A5_3_2" rules="1" total="4" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-3-1 Evaluation of the operand to the typeid operator shall not contain side effects" name="AUTOSAR-A5_3_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-7-1 The signal handling facilities of &lt;csignal> shall not be used" name="AUTOSAR-M18_7_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A26-5-1 Pseudorandom numbers shall not be generated using std::rand()" name="AUTOSAR-A26_5_1" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M4-10-2 Literal zero (0) shall not be used as the null-pointer-constant" name="AUTOSAR-M4_10_2" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-6 A class or enumeration name shall not be hidden by a variable, function or enumerator declaration in the same scope" name="AUTOSAR-A2_10_6" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A26-5-2 Random number engines shall not be default-initialized" name="AUTOSAR-A26_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-4 The identifier name of a non-member object with static storage duration or static function shall not be reused within a namespace" name="AUTOSAR-A2_10_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-5 An identifier name of a function with static storage duration or a non-member object with external or internal linkage should not be reused" name="AUTOSAR-A2_10_5" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A4-5-1 Expressions with type enum or enum class shall not be used as operands to built-in and overloaded operators other than the subscript operator [ ], the assignment operator =, the equality operators == and !=, the unary &amp; operator, and the relational operators &lt;, &lt;=, >, >=" name="AUTOSAR-A4_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-5-3 The std::terminate() function shall not be called implicitly" name="AUTOSAR-A15_5_3" rules="11" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-5-2 Program shall not be abruptly terminated. In particular, an implicit or explicit invocation of std::abort(), std::quick_exit(), std::_Exit(), std::terminate() shall not be done" name="AUTOSAR-A15_5_2" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-5-1 All user-provided class destructors, deallocation functions, move constructors, move assignment operators and swap functions shall not exit with an exception. A noexcept exception specification shall be added to these functions as appropriate" name="AUTOSAR-A15_5_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M9-6-4 Named bit-fields with signed integer type shall have a length of more than one bit" name="AUTOSAR-M9_6_4" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M5-2-10 The increment (++) and decrement (--) operators shall not be mixed with other operators in an expression" name="AUTOSAR-M5_2_10" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-12 An identifier with array type passed as a function argument shall not decay to a pointer" name="AUTOSAR-M5_2_12" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-11 The comma operator, &amp;&amp; operator and the || operator shall not be overloaded" name="AUTOSAR-M5_2_11" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A14-7-2 Template specialization shall be declared in the same file (1) as the primary template (2) as a user-defined type, for which the specialization is declared" name="AUTOSAR-A14_7_2" rules="1" total="0" />
               <Category authTot="26;" authUrg="0;" desc="AUTOSAR A3-9-1 Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" name="AUTOSAR-A3_9_1" rules="1" total="26" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-2-3 Include guards shall be provided" name="AUTOSAR-M16_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-6 Trivial accessor and mutator functions should be inlined" name="AUTOSAR-A3_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-5 A function definition shall only be placed in a class definition if (1) the function is intended to be inlined (2) it is a member function template (3) it is a member function of a class template" name="AUTOSAR-A3_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-4 When an array with external linkage is declared, its size shall be stated explicitly" name="AUTOSAR-A3_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-3 Implementation files, that are defined locally in the project, should have a file name extension of &quot;.cpp&quot;" name="AUTOSAR-A3_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-2 Header files, that are defined locally in the project, shall have a file name extension of one of: &quot;.h&quot;, &quot;.hpp&quot; or &quot;.hxx&quot;" name="AUTOSAR-A3_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule" name="AUTOSAR-A3_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-3-1 Only those characters specified in the C++ Language Standard basic source character set shall be used in the source code" name="AUTOSAR-A2_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-1-2 A base class shall only be declared virtual if it is used in a diamond hierarchy" name="AUTOSAR-M10_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-1-1 Classes should not be derived from virtual bases" name="AUTOSAR-M10_1_1" rules="1" total="0" />
               <Category authTot="4;" authUrg="0;" desc="AUTOSAR M8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" name="AUTOSAR-M8_0_1" rules="1" total="4" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-2 All if ... else if constructs shall be terminated with an else clause" name="AUTOSAR-M6_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement" name="AUTOSAR-M6_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A17-1-1 Use of the C Standard Library shall be encapsulated and isolated" name="AUTOSAR-A17_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A21-8-1 Arguments to character-handling functions shall be representable as an unsigned char" name="AUTOSAR-A21_8_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-1-3 An accessible base class shall not be both virtual and non-virtual in the same hierarchy" name="AUTOSAR-M10_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-6 The final clause of a switch statement shall be the default-clause" name="AUTOSAR-M6_4_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A25-1-1 Non-static data members or captured values of predicate function objects that are state related to this object's identity shall not be copied" name="AUTOSAR-A25_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause" name="AUTOSAR-M6_4_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-4 A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" name="AUTOSAR-M6_4_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-3 A switch statement shall be a well-formed switch statement" name="AUTOSAR-M6_4_3" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M2-7-1 The character sequence /* shall not be used within a C-style comment" name="AUTOSAR-M2_7_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-7 The condition of a switch statement shall not have bool type" name="AUTOSAR-M6_4_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-1 dynamic_cast should not be used" name="AUTOSAR-A5_2_1" rules="1" total="0" />
               <Category authTot="33;" authUrg="0;" desc="AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested" name="AUTOSAR-M0_3_2" rules="1" total="33" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A5-2-5 An array or container shall not be accessed beyond its range" name="AUTOSAR-A5_2_5" rules="4" total="1" />
               <Category authTot="7;" authUrg="0;" desc="AUTOSAR M0-3-1 Minimization of run-time failures shall be ensured by the use of at least one of: (a) static analysis tools/techniques; (b) dynamic analysis tools/techniques; (c) explicit coding of checks to handle run-time faults" name="AUTOSAR-M0_3_1" rules="10" total="7" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-4 reinterpret_cast shall not be used" name="AUTOSAR-A5_2_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-3 A cast shall not remove any const or volatile qualification from the type of a pointer or reference" name="AUTOSAR-A5_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-2 Traditional C-style casts shall not be used" name="AUTOSAR-A5_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-5 Checked exceptions that could be thrown from a function shall be specified together with the function declaration and they shall be identical in all function declarations and for all its overriders" name="AUTOSAR-A15_4_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M17-0-2 The names of standard library macros and objects shall not be reused" name="AUTOSAR-M17_0_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-3 The noexcept specification of a function shall either be identical across all translation units, or identical or more restrictive between a virtual member function and an overrider" name="AUTOSAR-A15_4_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-4 A declaration of non-throwing function shall contain noexcept specification" name="AUTOSAR-A15_4_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M17-0-3 The names of standard library functions shall not be overridden" name="AUTOSAR-M17_0_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-1 Dynamic exception-specification shall not be used" name="AUTOSAR-A15_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-2 If a function is declared to be noexcept, noexcept(true) or noexcept(&lt;true condition>), then it shall not exit with an exception" name="AUTOSAR-A15_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-1-1 Class shall not be derived from more than one base class which is not an interface class" name="AUTOSAR-A10_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M17-0-5 The setjmp macro and the longjmp function shall not be used" name="AUTOSAR-M17_0_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-1-2 All #else, #elif and #endif pre-processor directives shall reside in the same file as the #if or #ifdef directive to which they are related" name="AUTOSAR-M16_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A11-3-1 Friend declarations shall not be used" name="AUTOSAR-A11_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-1-1 The defined pre-processor operator shall only be used in one of the two standard forms" name="AUTOSAR-M16_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-5-2 The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" name="AUTOSAR-M7_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-5-1 A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function" name="AUTOSAR-M7_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-4 An identifier with external linkage shall have exactly one definition" name="AUTOSAR-M3_2_4" rules="1" total="0" />
               <Category authTot="5;" authUrg="0;" desc="AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include" name="AUTOSAR-A16_0_1" rules="5" total="5" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-2-1 All accessible entity names within a multiple inheritance hierarchy should be unique" name="AUTOSAR-M10_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M8-3-1 Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments" name="AUTOSAR-M8_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-1 Constructors shall explicitly initialize all virtual base classes, all direct non-virtual base classes and all non-static data members" name="AUTOSAR-A12_1_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-2 Both NSDMI and a non-static member initializer in a constructor shall not be used in the same type" name="AUTOSAR-A12_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-4 Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" name="AUTOSAR-M15_3_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-3 If all user-defined constructors of a class initialize data members with constant values that are the same across all constructors, then data members shall be initialized using NSDMI instead" name="AUTOSAR-A12_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-7 Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last" name="AUTOSAR-M15_3_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-4 All constructors that are callable with a single argument of fundamental type shall be declared explicit" name="AUTOSAR-A12_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-6 Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" name="AUTOSAR-M15_3_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-1 All declarations of an object or function shall have compatible types" name="AUTOSAR-M3_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A17-6-1 Non-standard entities shall not be added to standard namespaces" name="AUTOSAR-A17_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-3 A type, object or function that is used in multiple translation units shall be declared in one and only one file" name="AUTOSAR-M3_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-10-1 A pointer to member virtual function shall only be tested for equality with null-pointer-constant" name="AUTOSAR-A5_10_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-2 The One Definition Rule shall not be violated" name="AUTOSAR-M3_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-6 The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators" name="AUTOSAR-A5_2_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-5 Common class initialization for non-constant members shall be done by a delegating constructor" name="AUTOSAR-A12_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-1 Exceptions shall be raised only after start-up and before termination" name="AUTOSAR-M15_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-6 Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors" name="AUTOSAR-A12_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-3 Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases" name="AUTOSAR-M15_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M11-0-1 Member data in non-POD class types shall be private" name="AUTOSAR-M11_0_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-2 Variables shall not be implicitly captured in a lambda expression" name="AUTOSAR-A5_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-1 Literal values shall not be used apart from type initialization, otherwise symbolic names shall be used instead" name="AUTOSAR-A5_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant" name="AUTOSAR-A4_10_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-6 Return type of a non-void return type lambda expression should be explicitly specified" name="AUTOSAR-A5_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-4 A lambda expression object shall not outlive any of its reference-captured objects" name="AUTOSAR-A5_1_4" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-3 Parameter list (possibly empty) shall be included in every lambda expression" name="AUTOSAR-A5_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-3-4 Catch-all (ellipsis and std::exception) handlers shall be used only in (a) main, (b) task main functions, (c) in functions that are supposed to isolate independent components and (d) when calling third-party code that uses exceptions not according to AUTOSAR C++14 guidelines" name="AUTOSAR-A15_3_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-3-5 A class type exception shall be caught by reference or const reference" name="AUTOSAR-A15_3_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-3-2 If a function throws an exception, it shall be handled when meaningful actions can be taken, otherwise it shall be propagated" name="AUTOSAR-A15_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M2-13-2 Octal constants (other than zero) and octal escape sequences (other than &quot;\0&quot; ) shall not be used" name="AUTOSAR-M2_13_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-3-3 Main function and a task main function shall catch at least: base class exceptions from all third-party libraries used, std::exception and all otherwise unhandled exceptions" name="AUTOSAR-A15_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-6-1 Functions declared with the [[noreturn]] attribute shall not return" name="AUTOSAR-A7_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M2-13-4 Literal suffixes shall be upper case" name="AUTOSAR-M2_13_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M2-13-3 A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" name="AUTOSAR-M2_13_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-19-1 Evaluation of constant unsigned integer expressions shall not lead to wrap-around" name="AUTOSAR-M5_19_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A14-5-1 A template constructor shall not participate in overload resolution for a single argument of the enclosing class type" name="AUTOSAR-A14_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-2-1 Non-virtual member functions shall not be redefined in derived classes" name="AUTOSAR-A10_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-2-1 When declaring function templates, the trailing return type syntax shall be used if the return type depends on the type of parameters" name="AUTOSAR-A8_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A14-5-3 A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations." name="AUTOSAR-A14_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-6 &quot;forward&quot; parameters declared as T &amp;&amp; shall always be forwarded" name="AUTOSAR-A8_4_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-5 Arguments to a function-like macro shall not contain tokens that look like pre-processing directives" name="AUTOSAR-M16_0_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-5 &quot;consume&quot; parameters declared as X &amp;&amp; shall always be moved from" name="AUTOSAR-A8_4_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-8 Output parameters shall not be used" name="AUTOSAR-A8_4_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-4-1 All usage of assembler shall be documented" name="AUTOSAR-M7_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-7 &quot;in&quot; parameters for &quot;cheap to copy&quot; types shall be passed by value" name="AUTOSAR-A8_4_7" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-2 Macros shall only be #define'd or #undef'd in the global namespace" name="AUTOSAR-M16_0_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-6 Copy and move constructors and copy assignment and move assignment operators shall be declared protected or defined &quot;=delete&quot; in base class" name="AUTOSAR-A12_8_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-3-2 Static and thread-local objects shall be constant-initialized" name="AUTOSAR-A3_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-2 All exit paths from a function with non-void return type shall have an explicit return statement with an expression" name="AUTOSAR-A8_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-1 #include directives in a file shall only be preceded by other pre-processor directives or comments" name="AUTOSAR-M16_0_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-4-3 Assembly language shall be encapsulated and isolated" name="AUTOSAR-M7_4_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-7 Assignment operators should be declared with the ref-qualifier &amp;" name="AUTOSAR-A12_8_7" rules="1" total="0" />
               <Category authTot="4;" authUrg="0;" desc="AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file" name="AUTOSAR-A3_3_1" rules="2" total="4" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-1 Functions shall not be defined using the ellipsis notation" name="AUTOSAR-A8_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-4-2 Assembler instructions shall only be introduced using the asm declaration" name="AUTOSAR-M7_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-4 Multiple output values from a function should be returned as a struct or tuple" name="AUTOSAR-A8_4_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-3 Common ways of passing parameters should be used" name="AUTOSAR-A8_4_3" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-4-1 The asm declaration shall not be used" name="AUTOSAR-A7_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-5-1 Trigraphs shall not be used" name="AUTOSAR-A2_5_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-5-2 Digraphs shall not be used" name="AUTOSAR-A2_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-9 &quot;in-out&quot; parameters declared as T &amp; shall be modified" name="AUTOSAR-A8_4_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-8 If the # token appears as the first token on a line, then it shall be immediately followed by a pre-processing token" name="AUTOSAR-M16_0_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-7 Undefined macro identifiers shall not be used in #if or #elif pre-processor directives, except as operands to the defined operator" name="AUTOSAR-M16_0_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-6 In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" name="AUTOSAR-M16_0_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-0-2 Bitwise operations and operations that assume data representation in memory shall not be performed on objects" name="AUTOSAR-A12_0_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-3-3 A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" name="AUTOSAR-M10_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-6-3 The continue statement shall only be used within a well-formed for loop" name="AUTOSAR-M6_6_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-3-2 If a function has internal linkage then all re-declarations shall include the static storage class specifier" name="AUTOSAR-M3_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-6-2 The goto statement shall jump to a label declared later in the same function body" name="AUTOSAR-M6_6_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-0-1 If a class declares a copy or move operation, or a destructor, either via &quot;=default&quot;, &quot;=delete&quot;, or via a user-provided declaration, then all others of these five special member functions shall be declared as well" name="AUTOSAR-A12_0_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-6-1 Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" name="AUTOSAR-M6_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-2 User-defined copy and move assignment operators should use user-defined no-throw swap function" name="AUTOSAR-A12_8_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-3 Moved-from object shall not be read-accessed" name="AUTOSAR-A12_8_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-4 Move constructor shall not initialize its class members and base classes using copy semantics" name="AUTOSAR-A12_8_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-8 Lambda expressions should not be defined inside another lambda expression" name="AUTOSAR-A5_1_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-5 A copy assignment and a move assignment operators shall handle self-assignment" name="AUTOSAR-A12_8_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-7 A lambda shall not be an operand to decltype or typeid" name="AUTOSAR-A5_1_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M19-3-1 The error indicator errno shall not be used" name="AUTOSAR-M19_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-1 Move and copy constructors shall move and respectively copy base classes and data members of a class, without any side effects" name="AUTOSAR-A12_8_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-3 The declaration of objects shall contain no more than two levels of pointer indirection" name="AUTOSAR-A5_0_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-9 An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression" name="AUTOSAR-M5_0_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-8-1 The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand" name="AUTOSAR-M5_8_1" rules="1" total="0" />
               <Category authTot="5;" authUrg="0;" desc="AUTOSAR A0-1-1 A project shall not contain instances of non-volatile variables being given values that are not subsequently used" name="AUTOSAR-A0_1_1" rules="1" total="5" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-2 The condition of an if-statement and the condition of an iteration statement shall have type bool" name="AUTOSAR-A5_0_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-8 An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" name="AUTOSAR-M5_0_8" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used" name="AUTOSAR-A0_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-1 The value of an expression shall be the same under any order of evaluation that the standard permits" name="AUTOSAR-A5_0_1" rules="7" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-1-4 A project shall not contain non-volatile POD variables having only one use" name="AUTOSAR-M0_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-1-3 Every function defined in an anonymous namespace, or static function with internal linkage, or private member function shall be used" name="AUTOSAR-A0_1_3" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M0-1-2 A project shall not contain infeasible paths" name="AUTOSAR-M0_1_2" rules="29" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-5 There shall be no implicit floating-integral conversions" name="AUTOSAR-M5_0_5" rules="2" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A27-0-4 C-style strings shall not be used" name="AUTOSAR-A27_0_4" rules="4" total="2" />
               <Category authTot="10;" authUrg="0;" desc="AUTOSAR M0-1-3 A project shall not contain unused variables" name="AUTOSAR-M0_1_3" rules="3" total="10" />
               <Category authTot="4;" authUrg="0;" desc="AUTOSAR M5-0-4 An implicit integral conversion shall not change the signedness of the underlying type" name="AUTOSAR-M5_0_4" rules="1" total="4" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A18-5-2 Non-placement new or delete expressions shall not be used" name="AUTOSAR-A18_5_2" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A27-0-3 Alternate input and output operations on a file stream shall not be used without an intervening flush or positioning call" name="AUTOSAR-A27_0_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-7 There shall be no explicit floating-integral conversions of a cvalue expression" name="AUTOSAR-M5_0_7" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-1 Functions malloc, calloc, realloc and free shall not be used" name="AUTOSAR-A18_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A27-0-2 A C-style string shall guarantee sufficient space for data and the null terminator" name="AUTOSAR-A27_0_2" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-4 Pointer arithmetic shall not be used with pointers to non-final classes" name="AUTOSAR-A5_0_4" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-1-1 A project shall not contain unreachable code" name="AUTOSAR-M0_1_1" rules="7" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-6 An implicit integral or floating-point conversion shall not reduce the size of the underlying type" name="AUTOSAR-M5_0_6" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-6-1 Digit sequences separators ' shall only be used as follows: (1) for decimal, every 3 digits, (2) for hexadecimal, every 2 digits, (3) for binary, every 4 digits" name="AUTOSAR-A13_6_1" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A27-0-1 Inputs from independent components shall be validated" name="AUTOSAR-A27_0_1" rules="8" total="1" />
               <Category authTot="1;" authUrg="1;" desc="AUTOSAR A0-1-4 There shall be no unused named parameters in non-virtual functions" name="AUTOSAR-A0_1_4" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-1-5 There shall be no unused named parameters in the set of parameters for a virtual function and all the functions that override it" name="AUTOSAR-A0_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-1-6 There should be no unused type declarations" name="AUTOSAR-A0_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-3-5 A user-defined assignment operator shall not be virtual" name="AUTOSAR-A10_3_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-2-1 Constructors that are not noexcept shall not be invoked before program startup" name="AUTOSAR-A15_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-5-2 Functions shall not call themselves, either directly or indirectly" name="AUTOSAR-A7_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-18-1 The comma operator shall not be used" name="AUTOSAR-M5_18_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-5-1 A function shall not return a reference or a pointer to a parameter that is passed by reference to const" name="AUTOSAR-A7_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-4 If a project has sized or unsized version of operator &quot;delete&quot; globally defined, then both sized and unsized versions shall be defined" name="AUTOSAR-A18_5_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-3 The form of the delete expression shall match the form of the new expression used to allocate the memory" name="AUTOSAR-A18_5_3" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-3 A cvalue expression shall not be implicitly converted to a different underlying type" name="AUTOSAR-M5_0_3" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-5 Memory management functions shall ensure the following: (a) deterministic behavior resulting with the existence of worst-case execution time, (b) avoiding memory fragmentation, (c) avoid running out of memory, (d) avoiding mismatched allocations or deallocations, (e) no dependence on non-deterministic calls to kernel" name="AUTOSAR-A18_5_5" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-2 Limited dependence should be placed on C++ operator precedence rules in expressions" name="AUTOSAR-M5_0_2" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-3-1 Virtual function declaration shall contain exactly one of the three specifiers:" name="AUTOSAR-A10_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-8 Objects that do not outlive a function shall have automatic storage duration" name="AUTOSAR-A18_5_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-3-2 Each overriding virtual function shall be declared with the override or final specifier" name="AUTOSAR-A10_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-3-3 Virtual functions shall not be introduced in a final class" name="AUTOSAR-A10_3_3" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M0-1-8 All functions with void return type shall have external side effect(s)" name="AUTOSAR-M0_1_8" rules="2" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-9 Custom implementations of dynamic memory allocation and deallocation functions shall meet the semantic requirements specified in the corresponding &quot;Required behaviour&quot; clause from the C++ Standard" name="AUTOSAR-A18_5_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-1-9 There shall be no dead code" name="AUTOSAR-M0_1_9" rules="1" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Flow Analysis" name="BD" rules="122" total="0">
               <Category authTot="0;" authUrg="0;" desc="Incorrect API usage" name="BD-API" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Miscellaneous" name="BD-MISC" rules="2" total="0" />
               <Category authTot="14;" authUrg="0;" desc="Possible Bugs" name="BD-PB" rules="67" total="14" />
               <Category authTot="0;" authUrg="0;" desc="Resources" name="BD-RES" rules="8" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Security" name="BD-SECURITY" rules="19" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Containers" name="BD-CO" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Threads &amp; Synchronization" name="BD-TRS" rules="15" total="0" />
            </Category>
            <Category authTot="14;" authUrg="14;" desc="Code Duplication Detection" name="CDD" rules="4" total="14" />
            <Category authTot="0;" authUrg="0;" desc="SEI CERT C" name="CERT_C" rules="363" total="0">
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC12_C (REC) Detect and remove code that has no effect or is never executed" name="CERT_C-MSC12" rules="8" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC11_C (REC) Incorporate diagnostic tests using assertions" name="CERT_C-MSC11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC14_C (REC) Do not introduce unnecessary platform dependencies" name="CERT_C-MSC14" rules="1" total="0" />
               <Category authTot="5;" authUrg="0;" desc="CERT-MSC13_C (REC) Detect and remove unused values" name="CERT_C-MSC13" rules="1" total="5" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC15_C (REC) Do not depend on undefined behavior" name="CERT_C-MSC15" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-WIN00_C (REC) Be specific when dynamically loading libraries" name="CERT_C-WIN00" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP03_C (REC) Detect and handle floating-point errors" name="CERT_C-FLP03" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC17_C (REC) Finish every set of statements associated with a case label with a break statement" name="CERT_C-MSC17" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP02_C (REC) Avoid using floating-point numbers when precise computation is needed" name="CERT_C-FLP02" rules="1" total="0" />
               <Category authTot="5;" authUrg="0;" desc="CERT-MSC19_C (REC) For functions that return an array, prefer returning an empty array over a null value" name="CERT_C-MSC19" rules="2" total="5" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP06_C (REC) Convert integers to floating point for floating-point operations" name="CERT_C-FLP06" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT02_C (REC) Understand integer conversion rules" name="CERT_C-INT02" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP00_C (REC) Understand the limitations of floating-point numbers" name="CERT_C-FLP00" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-API01_C (REC) Avoid laying out strings in memory directly before sensitive data" name="CERT_C-API01" rules="2" total="2" />
               <Category authTot="4;" authUrg="0;" desc="CERT-API02_C (REC) Functions that read or write to or from an array should take an argument to specify the source or target size" name="CERT_C-API02" rules="2" total="4" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT08_C (REC) Verify that all integer values are in range" name="CERT_C-INT08" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT09_C (REC) Ensure enumeration constants map to unique values" name="CERT_C-INT09" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT07_C (REC) Use only explicitly signed or unsigned char type for numeric values" name="CERT_C-INT07" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT04_C (REC) Enforce limits on integer values originating from tainted sources" name="CERT_C-INT04" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT05_C (REC) Do not use input functions to convert character data if they cannot handle all possible inputs" name="CERT_C-INT05" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV30_C (RULE) Do not modify the object referenced by the return value of certain functions" name="CERT_C-ENV30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC22_C (REC) Use the setjmp(), longjmp() facility securely" name="CERT_C-MSC22" rules="1" total="0" />
               <Category authTot="5;" authUrg="0;" desc="CERT-MSC24_C (REC) Do not use deprecated or obsolescent functions" name="CERT_C-MSC24" rules="4" total="5" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT13_C (REC) Use bitwise operators only on unsigned operands" name="CERT_C-INT13" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT12_C (REC) Do not make assumptions about the type of a plain int bit-field when used in an expression" name="CERT_C-INT12" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-INT10_C (REC) Do not assume a positive remainder when using the % operator" name="CERT_C-INT10" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV33_C (RULE) Do not call system()" name="CERT_C-ENV33" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV34_C (RULE) Do not store pointers returned by certain functions" name="CERT_C-ENV34" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT18_C (REC) Evaluate integer expressions in a larger size before comparing or assigning to that size" name="CERT_C-INT18" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV31_C (RULE) Do not rely on an environment pointer following an operation that may invalidate it" name="CERT_C-ENV31" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT15_C (REC) Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types" name="CERT_C-INT15" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC30_C (RULE) Do not use the rand() function for generating pseudorandom numbers" name="CERT_C-MSC30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV32_C (RULE) All exit handlers must return normally" name="CERT_C-ENV32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT16_C (REC) Do not make assumptions about representation of signed integers" name="CERT_C-INT16" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM00_C (REC) Allocate and free memory in the same module, at the same level of abstraction" name="CERT_C-MEM00" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM01_C (REC) Store a new value in pointers immediately after free()" name="CERT_C-MEM01" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG30_C (RULE) Call only asynchronous-safe functions within signal handlers" name="CERT_C-SIG30" rules="1" total="0" />
               <Category authTot="8;" authUrg="0;" desc="CERT-MEM04_C (REC) Beware of zero-length allocations" name="CERT_C-MEM04" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM05_C (REC) Avoid large stack allocations" name="CERT_C-MEM05" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG31_C (RULE) Do not access shared objects in signal handlers" name="CERT_C-SIG31" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-MEM02_C (REC) Immediately cast the result of a memory allocation function call into a pointer to the allocated type" name="CERT_C-MEM02" rules="2" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG34_C (RULE) Do not call signal() from within interruptible signal handlers" name="CERT_C-SIG34" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM03_C (REC) Clear sensitive information stored in reusable resources" name="CERT_C-MEM03" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG35_C (RULE) Do not return from a computational exception signal handler" name="CERT_C-SIG35" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE31_C (RULE) Avoid side effects in arguments to unsafe macros" name="CERT_C-PRE31" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE32_C (RULE) Do not use preprocessor directives in invocations of function-like macros" name="CERT_C-PRE32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE30_C (RULE) Do not create a universal character name through concatenation" name="CERT_C-PRE30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV02_C (REC) Beware of multiple environment variables with the same effective name" name="CERT_C-ENV02" rules="1" total="0" />
               <Category authTot="4;" authUrg="0;" desc="CERT-ENV01_C (REC) Do not make assumptions about the size of an environment variable" name="CERT_C-ENV01" rules="3" total="4" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC01_C (REC) Strive for logical completeness" name="CERT_C-MSC01" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC04_C (REC) Use comments consistently and in a readable fashion" name="CERT_C-MSC04" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC07_C (REC) Detect and remove dead code" name="CERT_C-MSC07" rules="8" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC09_C (REC) Character encoding: Use subset of ASCII for safety" name="CERT_C-MSC09" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT35_C (RULE) Use correct integer precisions" name="CERT_C-INT35" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT36_C (RULE) Converting a pointer to integer or integer to pointer" name="CERT_C-INT36" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT33_C (RULE) Ensure that division and remainder operations do not result in divide-by-zero errors" name="CERT_C-INT33" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT34_C (RULE) Do not shift an expression by a negative number of bits or by greater than or equal to the number of bits that exist in the operand" name="CERT_C-INT34" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-INT31_C (RULE) Ensure that integer conversions do not result in lost or misinterpreted data" name="CERT_C-INT31" rules="15" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT32_C (RULE) Ensure that operations on signed integers do not result in overflow" name="CERT_C-INT32" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT30_C (RULE) Ensure that unsigned integer operations do not wrap" name="CERT_C-INT30" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO34_C (RULE) Distinguish between characters read from a file and EOF or WEOF" name="CERT_C-FIO34" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO32_C (RULE) Do not perform operations on devices that are only appropriate for files" name="CERT_C-FIO32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO38_C (RULE) Do not copy a FILE object" name="CERT_C-FIO38" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO39_C (RULE) Do not alternately input and output from a stream without an intervening flush or positioning call" name="CERT_C-FIO39" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-FIO37_C (RULE) Do not assume that fgets() or fgetws() returns a nonempty string when successful" name="CERT_C-FIO37" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP44_C (RULE) Do not rely on side effects in operands to sizeof, _Alignof, or _Generic" name="CERT_C-EXP44" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP45_C (RULE) Do not perform assignments in selection statements" name="CERT_C-EXP45" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP42_C (RULE) Do not compare padding data" name="CERT_C-EXP42" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP43_C (RULE) Avoid undefined behavior when using restrict-qualified pointers" name="CERT_C-EXP43" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-FIO30_C (RULE) Exclude user input from format strings" name="CERT_C-FIO30" rules="3" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP46_C (RULE) Do not use a bitwise operator with a Boolean-like operand" name="CERT_C-EXP46" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP47_C (RULE) Do not call va_arg with an argument of the incorrect type" name="CERT_C-EXP47" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM12_C (REC) Consider using a goto chain when leaving a function on error when using and releasing resources" name="CERT_C-MEM12" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR34_C (RULE) Cast characters to unsigned char before converting to larger integer sizes" name="CERT_C-STR34" rules="3" total="0" />
               <Category authTot="3;" authUrg="0;" desc="CERT-STR31_C (RULE) Guarantee that storage for strings has sufficient space for character data and the null terminator" name="CERT_C-STR31" rules="5" total="3" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR32_C (RULE) Do not pass a non-null-terminated character sequence to a library function that expects a string" name="CERT_C-STR32" rules="1" total="0" />
               <Category authTot="26;" authUrg="0;" desc="CERT-STR30_C (RULE) Do not attempt to modify string literals" name="CERT_C-STR30" rules="2" total="26" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO45_C (RULE) Avoid TOCTOU race conditions while accessing files" name="CERT_C-FIO45" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO46_C (RULE) Do not access a closed file" name="CERT_C-FIO46" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO44_C (RULE) Only use values for fsetpos() that are returned from fgetpos()" name="CERT_C-FIO44" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR37_C (RULE) Arguments to character-handling functions must be representable as an unsigned char" name="CERT_C-STR37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR38_C (RULE) Do not confuse narrow and wide character strings and functions" name="CERT_C-STR38" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO47_C (RULE) Use valid format strings" name="CERT_C-FIO47" rules="6" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-FIO41_C (RULE) Do not call getc(), putc(), getwc(), or putwc() with a stream argument that has side effects" name="CERT_C-FIO41" rules="5" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO42_C (RULE) Close files when they are no longer needed" name="CERT_C-FIO42" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO40_C (RULE) Reset strings on fgets() or fgetws() failure" name="CERT_C-FIO40" rules="1" total="0" />
               <Category authTot="8;" authUrg="0;" desc="CERT-MEM07_C (REC) Ensure that the arguments to calloc(), when multiplied, do not wrap" name="CERT_C-MEM07" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC32_C (RULE) Properly seed pseudorandom number generators" name="CERT_C-MSC32" rules="1" total="0" />
               <Category authTot="10;" authUrg="0;" desc="CERT-MSC33_C (RULE) Do not pass invalid data to the asctime() function" name="CERT_C-MSC33" rules="1" total="10" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC38_C (RULE) Do not treat a predefined identifier as an object if it might only be implemented as a macro" name="CERT_C-MSC38" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC37_C (RULE) Ensure that control never reaches the end of a non-void function" name="CERT_C-MSC37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC39_C (RULE) Do not call va_arg() on a va_list that has an indeterminate value" name="CERT_C-MSC39" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP30_C (RULE) Do not depend on the order of evaluation for side effects" name="CERT_C-EXP30" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON40_C (RULE) Do not refer to an atomic variable twice in an expression" name="CERT_C-CON40" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP20_C (REC) Perform explicit tests to determine success, true and false, and equality" name="CERT_C-EXP20" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON43_C (RULE) Do not allow data races in multithreaded code" name="CERT_C-CON43" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON41_C (RULE) Wrap functions that can fail spuriously in a loop" name="CERT_C-CON41" rules="1" total="0" />
               <Category authTot="28;" authUrg="0;" desc="CERT-MSC41_C (RULE) Never hard code sensitive information" name="CERT_C-MSC41" rules="1" total="28" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC40_C (RULE) Do not violate constraints" name="CERT_C-MSC40" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM33_C (RULE) Allocate and copy structures containing a flexible array member dynamically" name="CERT_C-MEM33" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM34_C (RULE) Only free memory allocated dynamically" name="CERT_C-MEM34" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM31_C (RULE) Free dynamically allocated memory when no longer needed" name="CERT_C-MEM31" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM35_C (RULE) Allocate sufficient memory for an object" name="CERT_C-MEM35" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG01_C (REC) Understand implementation-specific details regarding signal handler persistence" name="CERT_C-SIG01" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM36_C (RULE) Do not modify the alignment of objects by calling realloc()" name="CERT_C-MEM36" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG00_C (REC) Mask signals handled by noninterruptible signal handlers" name="CERT_C-SIG00" rules="1" total="0" />
               <Category authTot="5;" authUrg="0;" desc="CERT-API00_C (REC) Functions should validate their parameters" name="CERT_C-API00" rules="1" total="5" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO24_C (REC) Do not open a file that is already open" name="CERT_C-FIO24" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG02_C (REC) Avoid using signals to implement normal functionality" name="CERT_C-SIG02" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO21_C (REC) Do not create temporary files in shared directories" name="CERT_C-FIO21" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO22_C (REC) Close files before spawning processes" name="CERT_C-FIO22" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP40_C (RULE) Do not modify constant objects" name="CERT_C-EXP40" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM30_C (RULE) Do not access freed memory" name="CERT_C-MEM30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP33_C (RULE) Do not read uninitialized memory" name="CERT_C-EXP33" rules="1" total="0" />
               <Category authTot="4;" authUrg="0;" desc="CERT-EXP34_C (RULE) Do not dereference null pointers" name="CERT_C-EXP34" rules="1" total="4" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP32_C (RULE) Do not access a volatile object through a nonvolatile reference" name="CERT_C-EXP32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON32_C (RULE) Prevent data races when accessing bit-fields from multiple threads" name="CERT_C-CON32" rules="1" total="0" />
               <Category authTot="25;" authUrg="1;" desc="CERT-EXP37_C (RULE) Call functions with the correct number and type of arguments" name="CERT_C-EXP37" rules="4" total="25" />
               <Category authTot="4;" authUrg="0;" desc="CERT-CON33_C (RULE) Avoid race conditions when using library functions" name="CERT_C-CON33" rules="1" total="4" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON30_C (RULE) Clean up thread-specific storage" name="CERT_C-CON30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP35_C (RULE) Do not modify objects with temporary lifetime" name="CERT_C-EXP35" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON31_C (RULE) Do not destroy a mutex while it is locked" name="CERT_C-CON31" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP36_C (RULE) Do not cast pointers into more strictly aligned pointer types" name="CERT_C-EXP36" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON36_C (RULE) Wrap functions that can spuriously wake up in a loop" name="CERT_C-CON36" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON37_C (RULE) Do not call signal() in a multithreaded program" name="CERT_C-CON37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON34_C (RULE) Declare objects shared between threads with appropriate storage durations" name="CERT_C-CON34" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP39_C (RULE) Do not access a variable through a pointer of an incompatible type" name="CERT_C-EXP39" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON35_C (RULE) Avoid deadlock by locking in a predefined order" name="CERT_C-CON35" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON38_C (RULE) Preserve thread safety and liveness when using condition variables" name="CERT_C-CON38" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON39_C (RULE) Do not join or detach a thread that was previously joined or detached" name="CERT_C-CON39" rules="1" total="0" />
               <Category authTot="5;" authUrg="0;" desc="CERT-DCL22_C (REC) Use volatile for data that cannot be cached" name="CERT_C-DCL22" rules="1" total="5" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL20_C (REC) Explicitly specify void when a function accepts no arguments" name="CERT_C-DCL20" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP00_C (REC) Use parentheses for precedence of operation" name="CERT_C-EXP00" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP05_C (REC) Do not cast away a const qualification" name="CERT_C-EXP05" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP02_C (REC) Be aware of the short-circuit behavior of the logical AND and OR operators" name="CERT_C-EXP02" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-EXP08_C (REC) Ensure pointer arithmetic is used correctly" name="CERT_C-EXP08" rules="2" total="1" />
               <Category authTot="1;" authUrg="0;" desc="CERT-DCL19_C (REC) Minimize the scope of variables and functions" name="CERT_C-DCL19" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL18_C (REC) Do not begin integer constants with 0 when specifying a decimal value" name="CERT_C-DCL18" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL12_C (REC) Implement abstract data types using opaque types" name="CERT_C-DCL12" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO01_C (REC) Be careful using functions that use file names for identification" name="CERT_C-FIO01" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL11_C (REC) Understand the type issues associated with variadic functions" name="CERT_C-DCL11" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL10_C (REC) Maintain the contract between the writer and caller of variadic functions" name="CERT_C-DCL10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL16_C (REC) Use &quot;L,&quot; not &quot;l,&quot; to indicate a long value" name="CERT_C-DCL16" rules="1" total="0" />
               <Category authTot="4;" authUrg="0;" desc="CERT-DCL15_C (REC) Declare file-scope objects or functions that do not need external linkage as static" name="CERT_C-DCL15" rules="1" total="4" />
               <Category authTot="1;" authUrg="0;" desc="CERT-DCL13_C (REC) Declare function parameters that are pointers to values not changed by the function as const" name="CERT_C-DCL13" rules="1" total="1" />
               <Category authTot="35;" authUrg="0;" desc="CERT-EXP12_C (REC) Do not ignore values returned by functions" name="CERT_C-EXP12" rules="2" total="35" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP10_C (REC) Do not depend on the order of evaluation of subexpressions or the order in which side effects take place" name="CERT_C-EXP10" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP15_C (REC) Do not place a semicolon on the same line as an if, for, or while statement" name="CERT_C-EXP15" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP16_C (REC) Do not compare function pointers to constant values" name="CERT_C-EXP16" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP14_C (REC) Beware of integer promotion when performing bitwise operations on integer types smaller than int" name="CERT_C-EXP14" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP19_C (REC) Use braces for the body of an if, for, or while statement" name="CERT_C-EXP19" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR00_C (REC) Represent characters using an appropriate type" name="CERT_C-STR00" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-STR09_C (REC) Don't assume numeric values for expressions with type plain character" name="CERT_C-STR09" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR07_C (REC) Use the bounds-checking interfaces for string manipulation" name="CERT_C-STR07" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR04_C (REC) Use plain char for characters in the basic character set" name="CERT_C-STR04" rules="1" total="0" />
               <Category authTot="26;" authUrg="0;" desc="CERT-STR05_C (REC) Use pointers to const when referring to string literals" name="CERT_C-STR05" rules="1" total="26" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR02_C (REC) Sanitize data passed to complex subsystems" name="CERT_C-STR02" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR03_C (REC) Do not inadvertently truncate a string" name="CERT_C-STR03" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL41_C (RULE) Do not declare variables inside a switch statement before the first case label" name="CERT_C-DCL41" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL40_C (RULE) Do not create incompatible declarations of the same function or object" name="CERT_C-DCL40" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON01_C (REC) Acquire and release synchronization primitives in the same module, at the same level of abstraction" name="CERT_C-CON01" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON02_C (REC) Do not use volatile as a synchronization primitive" name="CERT_C-CON02" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON05_C (REC) Do not perform operations that can block while holding a lock" name="CERT_C-CON05" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR11_C (REC) Do not specify the bound of a character array initialized with a string literal" name="CERT_C-STR11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL39_C (RULE) Avoid information leakage when passing a structure across a trust boundary" name="CERT_C-DCL39" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR10_C (REC) Do not concatenate different type of string literals" name="CERT_C-STR10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL31_C (RULE) Declare identifiers before using them" name="CERT_C-DCL31" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL38_C (RULE) Use the correct syntax when declaring a flexible array member" name="CERT_C-DCL38" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL37_C (RULE) Do not declare or define a reserved identifier" name="CERT_C-DCL37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL36_C (RULE) Do not declare an identifier with conflicting linkage classifications" name="CERT_C-DCL36" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL30_C (RULE) Declare objects with appropriate storage durations" name="CERT_C-DCL30" rules="2" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-ARR01_C (REC) Do not apply the sizeof operator to a pointer when taking the size of an array" name="CERT_C-ARR01" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR02_C (REC) Explicitly specify array bounds, even if implicitly defined by an initializer" name="CERT_C-ARR02" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE02_C (REC) Macro replacement lists should be parenthesized" name="CERT_C-PRE02" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE00_C (REC) Prefer inline or static functions to function-like macros" name="CERT_C-PRE00" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE01_C (REC) Use parentheses within macros around parameter names" name="CERT_C-PRE01" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE06_C (REC) Enclose header files in an include guard" name="CERT_C-PRE06" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE07_C (REC) Avoid using repeated question marks" name="CERT_C-PRE07" rules="1" total="0" />
               <Category authTot="39;" authUrg="0;" desc="CERT-POS54_C (RULE) Detect and handle POSIX library errors" name="CERT_C-POS54" rules="3" total="39" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR30_C (RULE) Set errno to zero before calling a library function known to set errno, and check errno only after the function returns a value indicating failure" name="CERT_C-ERR30" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR32_C (RULE) Do not rely on indeterminate values of errno" name="CERT_C-ERR32" rules="1" total="0" />
               <Category authTot="40;" authUrg="0;" desc="CERT-ERR33_C (RULE) Detect and handle standard library errors" name="CERT_C-ERR33" rules="4" total="40" />
               <Category authTot="1;" authUrg="0;" desc="CERT-ERR34_C (RULE) Detect errors when converting a string to a number" name="CERT_C-ERR34" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS51_C (RULE) Avoid deadlock with POSIX threads by locking in predefined order" name="CERT_C-POS51" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS50_C (RULE) Declare objects shared between POSIX threads with appropriate storage durations" name="CERT_C-POS50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS53_C (RULE) Do not use more than one mutex for concurrent waiting operations on a condition variable" name="CERT_C-POS53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS52_C (RULE) Do not perform operations that can block while holding a POSIX lock" name="CERT_C-POS52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR06_C (REC) Understand the termination behavior of assert() and abort()" name="CERT_C-ERR06" rules="1" total="0" />
               <Category authTot="4;" authUrg="1;" desc="CERT-ERR07_C (REC) Prefer functions that support error checking over equivalent functions that don't" name="CERT_C-ERR07" rules="2" total="4" />
               <Category authTot="6;" authUrg="0;" desc="CERT-DCL06_C (REC) Use meaningful symbolic constants to represent literal values" name="CERT_C-DCL06" rules="1" total="6" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL01_C (REC) Do not reuse variable names in subscopes" name="CERT_C-DCL01" rules="2" total="0" />
               <Category authTot="12;" authUrg="0;" desc="CERT-DCL00_C (REC) Const-qualify immutable objects" name="CERT_C-DCL00" rules="1" total="12" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL05_C (REC) Use typedefs of non-pointer types only" name="CERT_C-DCL05" rules="1" total="0" />
               <Category authTot="4;" authUrg="0;" desc="CERT-DCL04_C (REC) Do not declare more than one variable per declaration" name="CERT_C-DCL04" rules="1" total="4" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL02_C (REC) Use visually distinct identifiers" name="CERT_C-DCL02" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS44_C (RULE) Do not use signals to terminate threads" name="CERT_C-POS44" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS48_C (RULE) Do not unlock or destroy another POSIX thread's mutex" name="CERT_C-POS48" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS47_C (RULE) Do not use threads that can be canceled asynchronously" name="CERT_C-POS47" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS49_C (RULE) When data must be accessed by multiple threads, provide a mutex and guarantee no adjacent data is also accessed" name="CERT_C-POS49" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-WIN30_C (RULE) Properly pair allocation and deallocation functions" name="CERT_C-WIN30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR01_C (REC) Use ferror() rather than errno to check for FILE stream errors" name="CERT_C-ERR01" rules="1" total="0" />
               <Category authTot="3;" authUrg="1;" desc="CERT-ERR02_C (REC) Avoid in-band error indicators" name="CERT_C-ERR02" rules="1" total="3" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR04_C (REC) Choose an appropriate termination strategy" name="CERT_C-ERR04" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR05_C (REC) Application-independent code should provide error detection without dictating error handling" name="CERT_C-ERR05" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP37_C (RULE) Do not use object representations to compare floating-point values" name="CERT_C-FLP37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP36_C (RULE) Preserve precision when converting integral values to floating-point type" name="CERT_C-FLP36" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP34_C (RULE) Ensure that floating-point conversions are within range of the new type" name="CERT_C-FLP34" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS33_C (RULE) Do not use vfork()" name="CERT_C-POS33" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR32_C (RULE) Ensure size arguments for variable length arrays are in a valid range" name="CERT_C-ARR32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS35_C (RULE) Avoid race conditions while checking for the existence of a symbolic link" name="CERT_C-POS35" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS34_C (RULE) Do not call putenv() with a pointer to an automatic variable as the argument" name="CERT_C-POS34" rules="2" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-ARR30_C (RULE) Do not form or use out-of-bounds pointers or array subscripts" name="CERT_C-ARR30" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS37_C (RULE) Ensure that privilege relinquishment is successful" name="CERT_C-POS37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP32_C (RULE) Prevent or detect domain and range errors in math functions" name="CERT_C-FLP32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS36_C (RULE) Observe correct revocation order while relinquishing privileges" name="CERT_C-POS36" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS39_C (RULE) Use the correct byte ordering when transferring data between systems" name="CERT_C-POS39" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP30_C (RULE) Do not use floating-point variables as loop counters" name="CERT_C-FLP30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS38_C (RULE) Beware of race conditions when using fork and file descriptors" name="CERT_C-POS38" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-ARR39_C (RULE) Do not add or subtract a scaled integer to a pointer" name="CERT_C-ARR39" rules="3" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR38_C (RULE) Guarantee that library functions do not form invalid pointers" name="CERT_C-ARR38" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR37_C (RULE) Do not add or subtract an integer to a pointer to a non-array object" name="CERT_C-ARR37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR36_C (RULE) Do not subtract or compare two pointers that do not refer to the same array" name="CERT_C-ARR36" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS30_C (RULE) Use the readlink() function properly" name="CERT_C-POS30" rules="3" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="SEI CERT C++" name="CERT_CPP" rules="143" total="0">
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL55_CPP (RULE) Avoid information leakage when passing a class object across a trust boundary" name="CERT_CPP-DCL55" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR52_CPP (RULE) Do not use setjmp() or longjmp()" name="CERT_CPP-ERR52" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL56_CPP (RULE) Avoid cycles during initialization of static objects" name="CERT_CPP-DCL56" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR51_CPP (RULE) Handle all exceptions" name="CERT_CPP-ERR51" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON56_CPP (RULE) Do not speculatively lock a non-recursive mutex that is already owned by the calling thread" name="CERT_CPP-CON56" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL53_CPP (RULE) Do not write syntactically ambiguous declarations" name="CERT_CPP-DCL53" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR50_CPP (RULE) Do not abruptly terminate the program" name="CERT_CPP-ERR50" rules="14" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL54_CPP (RULE) Overload allocation and deallocation functions as a pair in the same scope" name="CERT_CPP-DCL54" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL59_CPP (RULE) Do not define an unnamed namespace in a header file" name="CERT_CPP-DCL59" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM51_CPP (RULE) Properly deallocate dynamically allocated resources" name="CERT_CPP-MEM51" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM52_CPP (RULE) Detect and handle memory allocation errors" name="CERT_CPP-MEM52" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL57_CPP (RULE) Do not let exceptions escape from destructors or deallocation functions" name="CERT_CPP-DCL57" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL58_CPP (RULE) Do not modify the standard namespaces" name="CERT_CPP-DCL58" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM50_CPP (RULE) Do not access freed memory" name="CERT_CPP-MEM50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON50_CPP (RULE) Do not destroy a mutex while it is locked" name="CERT_CPP-CON50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM55_CPP (RULE) Honor replacement dynamic storage management requirements" name="CERT_CPP-MEM55" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON51_CPP (RULE) Ensure actively held locks are released on exceptional conditions" name="CERT_CPP-CON51" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR59_CPP (RULE) Do not throw an exception across execution boundaries" name="CERT_CPP-ERR59" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM56_CPP (RULE) Do not store an already-owned pointer value in an unrelated smart pointer" name="CERT_CPP-MEM56" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR58_CPP (RULE) Handle all exceptions thrown before main() begins executing" name="CERT_CPP-ERR58" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM53_CPP (RULE) Explicitly construct and destruct objects when manually managing object lifetime" name="CERT_CPP-MEM53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR57_CPP (RULE) Do not leak resources when handling exceptions" name="CERT_CPP-ERR57" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM54_CPP (RULE) Provide placement new with properly aligned pointers to sufficient storage capacity" name="CERT_CPP-MEM54" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON54_CPP (RULE) Wrap functions that can spuriously wake up in a loop" name="CERT_CPP-CON54" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR56_CPP (RULE) Guarantee exception safety" name="CERT_CPP-ERR56" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON55_CPP (RULE) Preserve thread safety and liveness when using condition variables" name="CERT_CPP-CON55" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR55_CPP (RULE) Honor exception specifications" name="CERT_CPP-ERR55" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON52_CPP (RULE) Prevent data races when accessing bit-fields from multiple threads" name="CERT_CPP-CON52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR54_CPP (RULE) Catch handlers should order their parameter types from most derived to least derived" name="CERT_CPP-ERR54" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM57_CPP (RULE) Avoid using default operator new for over-aligned types" name="CERT_CPP-MEM57" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON53_CPP (RULE) Avoid deadlock by locking in a predefined order" name="CERT_CPP-CON53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR53_CPP (RULE) Do not reference base classes or class data members in a constructor or destructor function-try-block handler" name="CERT_CPP-ERR53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR53_CPP (RULE) Range check element access" name="CERT_CPP-STR53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL51_CPP (RULE) Do not declare or define a reserved identifier" name="CERT_CPP-DCL51" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR50_CPP (RULE) Guarantee that storage for strings has sufficient space for character data and the null terminator" name="CERT_CPP-STR50" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL52_CPP (RULE) Never qualify a reference type with const or volatile" name="CERT_CPP-DCL52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR52_CPP (RULE) Use valid references, pointers, and iterators to reference elements of a basic_string" name="CERT_CPP-STR52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL50_CPP (RULE) Do not define a C-style variadic function" name="CERT_CPP-DCL50" rules="1" total="0" />
               <Category authTot="4;" authUrg="0;" desc="CERT-STR51_CPP (RULE) Do not attempt to create a std::string from a null pointer" name="CERT_CPP-STR51" rules="1" total="4" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP53_CPP (RULE) Write constructor member initializers in the canonical order" name="CERT_CPP-OOP53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP52_CPP (RULE) Do not delete a polymorphic object without a virtual destructor" name="CERT_CPP-OOP52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP51_CPP (RULE) Do not slice derived objects" name="CERT_CPP-OOP51" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP50_CPP (RULE) Do not invoke virtual functions from constructors or destructors" name="CERT_CPP-OOP50" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP57_CPP (RULE) Prefer special member functions and overloaded operators to C Standard Library functions" name="CERT_CPP-OOP57" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC50_CPP (RULE) Do not use std::rand() for generating pseudorandom numbers" name="CERT_CPP-MSC50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP56_CPP (RULE) Honor replacement handler requirements" name="CERT_CPP-OOP56" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC51_CPP (RULE) Ensure your random number generator is properly seeded" name="CERT_CPP-MSC51" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP55_CPP (RULE) Do not use pointer-to-member operators to access nonexistent members" name="CERT_CPP-OOP55" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC52_CPP (RULE) Value-returning functions must return a value from all exit paths" name="CERT_CPP-MSC52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP54_CPP (RULE) Gracefully handle self-copy assignment" name="CERT_CPP-OOP54" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP58_CPP (RULE) Copy operations must not mutate the source object" name="CERT_CPP-OOP58" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO51_CPP (RULE) Close files when they are no longer needed" name="CERT_CPP-FIO51" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO50_CPP (RULE) Do not alternately input and output from a file stream without an intervening positioning call" name="CERT_CPP-FIO50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL60_CPP (RULE) Obey the one-definition rule" name="CERT_CPP-DCL60" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP55_CPP (RULE) Do not access a cv-qualified object through a cv-unqualified type" name="CERT_CPP-EXP55" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP56_CPP (RULE) Do not call a function with a mismatched language linkage" name="CERT_CPP-EXP56" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP53_CPP (RULE) Do not read uninitialized memory" name="CERT_CPP-EXP53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP54_CPP (RULE) Do not access an object outside of its lifetime" name="CERT_CPP-EXP54" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP59_CPP (RULE) Use offsetof() on valid types and members" name="CERT_CPP-EXP59" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP57_CPP (RULE) Do not cast or delete pointers to incomplete classes" name="CERT_CPP-EXP57" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP58_CPP (RULE) Pass an object of the correct type to va_start" name="CERT_CPP-EXP58" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP62_CPP (RULE) Do not access the bits of an object representation that are not part of the object's value representation" name="CERT_CPP-EXP62" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP63_CPP (RULE) Do not rely on the value of a moved-from object" name="CERT_CPP-EXP63" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP60_CPP (RULE) Do not pass a nonstandard-layout type object across execution boundaries" name="CERT_CPP-EXP60" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP61_CPP (RULE) A lambda object must not outlive any of its reference captured objects" name="CERT_CPP-EXP61" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC53_CPP (RULE) Do not return from a function declared [[noreturn]]" name="CERT_CPP-MSC53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC54_CPP (RULE) A signal handler must be a plain old function" name="CERT_CPP-MSC54" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-ERR62_CPP (RULE) Detect errors when converting a string to a number" name="CERT_CPP-ERR62" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR61_CPP (RULE) Catch exceptions by lvalue reference" name="CERT_CPP-ERR61" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR60_CPP (RULE) Exception objects must be nothrow copy constructible" name="CERT_CPP-ERR60" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR57_CPP (RULE) Provide a valid ordering predicate" name="CERT_CPP-CTR57" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR58_CPP (RULE) Predicate function objects should not be mutable" name="CERT_CPP-CTR58" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR53_CPP (RULE) Use valid iterator ranges" name="CERT_CPP-CTR53" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR54_CPP (RULE) Do not subtract iterators that do not refer to the same container" name="CERT_CPP-CTR54" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR55_CPP (RULE) Do not use an additive operator on an iterator if the result would overflow" name="CERT_CPP-CTR55" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR56_CPP (RULE) Do not use pointer arithmetic on polymorphic objects" name="CERT_CPP-CTR56" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR50_CPP (RULE) Guarantee that container indices and iterators are within the valid range" name="CERT_CPP-CTR50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR51_CPP (RULE) Use valid references, pointers, and iterators to reference elements of a container" name="CERT_CPP-CTR51" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR52_CPP (RULE) Guarantee that library functions do not overflow" name="CERT_CPP-CTR52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT50_CPP (RULE) Do not cast to an out-of-range enumeration value" name="CERT_CPP-INT50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP51_CPP (RULE) Do not delete an array through a pointer of the incorrect type" name="CERT_CPP-EXP51" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP52_CPP (RULE) Do not rely on side effects in unevaluated operands" name="CERT_CPP-EXP52" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP50_CPP (RULE) Do not depend on the order of evaluation for side effects" name="CERT_CPP-EXP50" rules="6" total="0" />
            </Category>
            <Category authTot="194;" authUrg="5;" desc="Coding Conventions" name="CODSTA" rules="441" total="194">
               <Category authTot="13;" authUrg="0;" desc="Coding Conventions for C++" name="CODSTA-CPP" rules="112" total="13" />
               <Category authTot="0;" authUrg="0;" desc="Coding Conventions for Modern C++" name="CODSTA-MCPP" rules="68" total="0" />
            </Category>
            <Category authTot="89;" authUrg="0;" desc="Comments" name="COMMENT" rules="16" total="89" />
            <Category authTot="0;" authUrg="0;" desc="Common Weakness Enumeration" name="CWE" rules="83" total="0">
               <Category authTot="0;" authUrg="0;" desc="CWE-532 Inclusion of Sensitive Information in Log Files" name="CWE-532" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-772 Missing Release of Resource after Effective Lifetime" name="CWE-772" rules="2" total="0" />
               <Category authTot="6;" authUrg="0;" desc="CWE-476 NULL Pointer Dereference" name="CWE-476" rules="2" total="6" />
               <Category authTot="0;" authUrg="0;" desc="CWE-770 Allocation of Resources Without Limits or Throttling" name="CWE-770" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-190 Integer Overflow or Wraparound" name="CWE-190" rules="7" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" name="CWE-78" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-617 Reachable Assertion" name="CWE-617" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-835 Loop with Unreachable Exit Condition ('Infinite Loop')" name="CWE-835" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-415 Double Free" name="CWE-415" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer" name="CWE-119" rules="11" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CWE-416 Use After Free" name="CWE-416" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-611 Improper Restriction of XML External Entity Reference" name="CWE-611" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-732 Incorrect Permission Assignment for Critical Resource" name="CWE-732" rules="2" total="0" />
               <Category authTot="28;" authUrg="0;" desc="CWE-798 Use of Hard-coded Credentials" name="CWE-798" rules="1" total="28" />
               <Category authTot="1;" authUrg="0;" desc="CWE-125 Out-of-bounds Read" name="CWE-125" rules="4" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CWE-400 Uncontrolled Resource Consumption" name="CWE-400" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-269 Improper Privilege Management" name="CWE-269" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-863 Incorrect Authorization" name="CWE-863" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-200 Information Exposure" name="CWE-200" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-287 Improper Authentication" name="CWE-287" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-362 Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')" name="CWE-362" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-20 Improper Input Validation" name="CWE-20" rules="10" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" name="CWE-22" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" name="CWE-89" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CWE-704 Incorrect Type Conversion or Cast" name="CWE-704" rules="12" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CWE-426 Untrusted Search Path" name="CWE-426" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CWE-787 Out-of-bounds Write" name="CWE-787" rules="7" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CWE-326 Inadequate Encryption Strength" name="CWE-326" rules="1" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Exceptions" name="EXCEPT" rules="26" total="0" />
            <Category authTot="95;" authUrg="0;" desc="Formatting" name="FORMAT" rules="51" total="95" />
            <Category authTot="7;" authUrg="0;" desc="Global Static Analysis" name="GLOBAL" rules="20" total="7" />
            <Category authTot="0;" authUrg="0;" desc="High Integrity C++" name="HICPP" rules="234" total="0">
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.2.2 Initialize none, the first only or all enumerators in an enumeration" name="HICPP-7_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.1.1 Do not use tab characters in source files" name="HICPP-2_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.5.3 Use nullptr for the null pointer constant" name="HICPP-2_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 15.1.1 Only use instances of std::exception for exceptions" name="HICPP-15_1_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.5.2 Do not use octal constants (other than zero)" name="HICPP-2_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.5.1 Do not concatenate strings with different encoding prefixes" name="HICPP-2_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.4 Write members in an initialization list in the order in which they are declared" name="HICPP-12_4_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.2.1 Use an explicit enumeration base and ensure that it is large enough to store all enumerators" name="HICPP-7_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.5 Use delegating constructors to reduce code duplication" name="HICPP-12_4_5" rules="1" total="0" />
               <Category authTot="3;" authUrg="0;" desc="HIC++ 3.3.1 Do not use variables with static storage duration" name="HICPP-3_3_1" rules="1" total="3" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.5.1 Do not ignore the result of std::remove, std::remove if or std::unique" name="HICPP-17_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.5 Implement a minimal set of operators and use them to implement all other related operators" name="HICPP-13_2_5" rules="1" total="0" />
               <Category authTot="8;" authUrg="0;" desc="HIC++ 4.1.1 Ensure that a function argument does not undergo an array-to-pointer conversion" name="HICPP-4_1_1" rules="2" total="8" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.4.2 Ensure that a braced aggregate initializer matches the layout of the aggregate object" name="HICPP-8_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.4.1 Do not access an invalid object or an object with indeterminate value" name="HICPP-8_4_1" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.1.2 If a member of a set of callable functions includes a universal reference parameter, ensure that one appears in the same position for all other members" name="HICPP-13_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.1 Within the scope of a lock, ensure that no static path results in a lock of the same mutex" name="HICPP-18_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.2 Ensure that order of nesting of locks in a project forms a DAG" name="HICPP-18_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.5 Do not access the members of std::mutex directly" name="HICPP-18_3_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.6 Do not use relaxed atomics" name="HICPP-18_3_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.3.3 Ensure that the form of delete matches the form of new used to allocate the memory" name="HICPP-5_3_3" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.3 Do not use std::recursive mutex" name="HICPP-18_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.7.2 Ensure that a pointer to member that is a virtual function is only compared (==) with nullptr" name="HICPP-5_7_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.1.1 Ensure that all overloads of a function are visible from where it is called" name="HICPP-13_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.4 Only use std::unique lock when std::lock guard cannot be used" name="HICPP-18_3_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.7.1 Do not write code that expects floating point calculations to yield exact results" name="HICPP-5_7_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.3.2 Allocate memory using new and release it using delete" name="HICPP-5_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.3.1 Do not apply unary minus to operands of unsigned type" name="HICPP-5_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.2.1 Declare bit-fields with an explicitly unsigned integral or enumeration type" name="HICPP-9_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.3.1 Correctly declare overloads for operator new and delete" name="HICPP-12_3_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.1.4 Ensure that a switch statement has at least two case labels, distinct from the default label" name="HICPP-6_1_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 11.1.1 Declare all data members private" name="HICPP-11_1_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.1.3 Ensure that a non-empty case statement block does not fall through to the next label" name="HICPP-6_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.1.2 Explicitly cover all paths through multi-way selection statements" name="HICPP-6_1_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.1.1 Enclose the body of a selection or an iteration statement in a compound statement" name="HICPP-6_1_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.3.1 Do not use using directives" name="HICPP-7_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 15.2.1 Do not throw an exception from a destructor" name="HICPP-15_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.4.1 Ensure that each identifier is distinct from any other visible identifier" name="HICPP-2_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.7 Declare assignment operators with the ref-qualifier &amp;" name="HICPP-12_5_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 10.3.1 Ensure that a derived class has at most one base class which is not an interface class" name="HICPP-10_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.8 Make the copy assignment operator of an abstract class protected or define it =delete" name="HICPP-12_5_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.6 Use an atomic, non-throwing swap operation to implement the copy and move assignment operators" name="HICPP-12_5_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.3 Ensure that a user defined move/copy constructor only moves/copies base and member objects" name="HICPP-12_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.4 Declare noexcept the move constructor and move assignment operator" name="HICPP-12_5_4" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="HIC++ 8.1.1 Do not use multiple levels of pointer indirection" name="HICPP-8_1_1" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.2.1 Do not declare functions at block scope" name="HICPP-3_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.4.1 Use const container calls when result is immediately converted to a const iterator" name="HICPP-17_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.4.2 Use API calls that construct objects in place" name="HICPP-17_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 4.4.1 Do not convert floating values to integral types except through use of standard library functions" name="HICPP-4_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.1 Do not overload operators with special semantics" name="HICPP-13_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.2.2 Synchronize access to data shared between threads using a single lock" name="HICPP-18_2_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.2 Ensure that the return type of an overloaded binary operator matches the built-in counterparts" name="HICPP-13_2_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.2.3 Do not share volatile data between threads" name="HICPP-18_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.3 Declare binary arithmetic and bitwise operators as non-members" name="HICPP-13_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.4 When overloading the subscript operator (operator[]) implement both const and non-const versions" name="HICPP-13_2_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.2.1 Use high integrity::thread in place of std::thread" name="HICPP-18_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.6.1 Do not use bitwise operators with signed operands" name="HICPP-5_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.2.4 Use std::call_once rather than the Double-Checked Locking pattern" name="HICPP-18_2_4" rules="1" total="0" />
               <Category authTot="5;" authUrg="0;" desc="HIC++ 5.2.1 Ensure that pointer or array access is demonstrably within bounds of a valid object" name="HICPP-5_2_1" rules="3" total="5" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.2.2 Ensure that functions do not call themselves, either directly or indirectly" name="HICPP-5_2_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.2 Ensure that a constructor initializes explicitly all base classes and non-static data members" name="HICPP-12_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.3 Do not specify both an NSDMI and a member initializer in a constructor for the same non static member" name="HICPP-12_4_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.1 Do not use the dynamic type of an object unless the object is fully constructed" name="HICPP-12_4_1" rules="2" total="0" />
               <Category authTot="1;" authUrg="0;" desc="HIC++ 6.4.1 Postpone variable definitions as long as possible" name="HICPP-6_4_1" rules="2" total="1" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 15.3.2 Ensure that a program does not result in a call to std::terminate" name="HICPP-15_3_2" rules="3" total="0" />
               <Category authTot="5;" authUrg="0;" desc="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards" name="HICPP-16_1_1" rules="9" total="5" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 16.1.2 Do not include a path specifier in filenames supplied in #include directives" name="HICPP-16_1_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 11.2.1 Do not use friend declarations" name="HICPP-11_2_1" rules="1" total="0" />
               <Category authTot="25;" authUrg="0;" desc="HIC++ 2.3.1 Do not use the C comment delimiters /* ... */" name="HICPP-2_3_1" rules="1" total="25" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.4.1 Ensure that any objects, functions or types to be used from a single translation unit are defined in an unnamed namespace in the main source file" name="HICPP-7_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.4.3 Ensure that an object or a function used from multiple translation units is declared in a single header file" name="HICPP-7_4_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.4.2 Ensure that an inline function, a function template, or a type used from multiple translation units is defined in a single header file" name="HICPP-7_4_2" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 16.1.5 Include directly the minimum number of headers required for compilation" name="HICPP-16_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 16.1.3 Match the filename in a #include directive to the one on the filesystem" name="HICPP-16_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 15.3.1 Do not access non-static members from a catch handler of constructor/destructor function try block" name="HICPP-15_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 16.1.4 Use &lt;> brackets for system and standard library headers. Use quotes for all other headers" name="HICPP-16_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.3.2 Do not comment out code" name="HICPP-2_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 10.2.1 Use the override special identifier when overriding a virtual function" name="HICPP-10_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.4 Do not create smart pointers of array type" name="HICPP-17_3_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.5 Do not create an rvalue reference of std::array" name="HICPP-17_3_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.1.1 Do not hide declarations" name="HICPP-3_1_1" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.1 Do not use std::move on objects declared with const or const &amp; type" name="HICPP-17_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 14.1.1 Use variadic templates rather than an ellipsis" name="HICPP-14_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.2 Use std::forward to forward universal references" name="HICPP-17_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.3 Do not subsequently use the argument to std::forward" name="HICPP-17_3_3" rules="1" total="0" />
               <Category authTot="15;" authUrg="0;" desc="HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object" name="HICPP-3_5_1" rules="4" total="15" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 4.3.1 Do not convert an expression of wider floating point type to a narrower floating point type" name="HICPP-4_3_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.10 Use static assert for assertions involving compile time constants" name="HICPP-7_1_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.2.4 Do not pass std::unique ptr by const reference" name="HICPP-8_2_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.2.3 Pass small objects with a trivial copy constructor by value" name="HICPP-8_2_3" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.2.2 Do not declare functions with an excessive number of parameters" name="HICPP-8_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.2.1 Make parameter names absent or identical in all declarations" name="HICPP-8_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.1.1 Do not use platform specific multi-threading facilities" name="HICPP-18_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.6 Do not code side effects into the right-hand operands of: &amp;&amp;, ||, sizeof, typeid or a function passed to condition variable::wait" name="HICPP-5_1_6" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.5 Include a (possibly empty) parameter list in every lambda expression" name="HICPP-5_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.5.1 Ensure that the right hand operand of the division or remainder operators is demonstrably non-zero" name="HICPP-5_5_1" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="HIC++ 5.1.2 Do not rely on the sequence of evaluation within an expression" name="HICPP-5_1_2" rules="10" total="1" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.1 Use symbolic names instead of literal values in code" name="HICPP-5_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.4 Do not capture variables implicitly in a lambda" name="HICPP-5_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.3 Use parentheses in expressions to specify the intent of the expression" name="HICPP-5_1_3" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.1 Define explicitly =default or =delete implicit special member functions of concrete classes" name="HICPP-12_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.2 Define special members =default if the behavior is equivalent" name="HICPP-12_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.3.2 Ensure that execution of a function with a non-void return type ends in a return statement with a value" name="HICPP-6_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.1.1 Do not declare implicit user defined conversions" name="HICPP-12_1_1" rules="2" total="0" />
               <Category authTot="1;" authUrg="0;" desc="HIC++ 1.2.1 Ensure that all statements are reachable" name="HICPP-1_2_1" rules="10" total="1" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.2.2 Ensure that no expression or sub-expression is redundant" name="HICPP-1_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.3.1 Ensure that the label(s) for a jump statement or a switch condition appear later, in the same or an enclosing block" name="HICPP-6_3_1" rules="3" total="0" />
               <Category authTot="1;" authUrg="0;" desc="HIC++ 7.1.4 Place CV-qualifiers on the right hand side of the type they apply to" name="HICPP-7_1_4" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.2.1 Do not use digraphs or trigraphs" name="HICPP-2_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.3 Do not place type specifiers before non-type specifiers in a declaration" name="HICPP-7_1_3" rules="1" total="0" />
               <Category authTot="15;" authUrg="0;" desc="HIC++ 7.1.6 Use class types or typedefs to abstract scalar quantities and standard integer types" name="HICPP-7_1_6" rules="3" total="15" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.5 Do not inline large functions" name="HICPP-7_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.5.1 Do not use the asm declaration" name="HICPP-7_5_1" rules="1" total="0" />
               <Category authTot="3;" authUrg="0;" desc="HIC++ 7.1.8 Use auto id = expr when declaring a variable to have the same type as its initializer function call" name="HICPP-7_1_8" rules="1" total="3" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.7 Use a trailing return type in preference to type disambiguation using typename" name="HICPP-7_1_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.9 Do not explicitly specify the return type of a lambda" name="HICPP-7_1_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 10.1.1 Ensure that access to base class subobjects does not require explicit disambiguation" name="HICPP-10_1_1" rules="1" total="0" />
               <Category authTot="12;" authUrg="0;" desc="HIC++ 7.1.2 Use const whenever possible" name="HICPP-7_1_2" rules="1" total="12" />
               <Category authTot="8;" authUrg="0;" desc="HIC++ 7.1.1 Declare each identifier on a separate line in a separate declaration" name="HICPP-7_1_1" rules="2" total="8" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 14.2.2 Do not explicitly specialize a function template that is overloaded with other templates" name="HICPP-14_2_2" rules="1" total="0" />
               <Category authTot="8;" authUrg="0;" desc="HIC++ 17.2.1 Wrap use of the C Standard Library" name="HICPP-17_2_1" rules="2" total="8" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.4.1 Do not return a reference or a pointer to an automatic variable defined within the function" name="HICPP-3_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 14.2.3 Declare extern an explicitly instantiated template" name="HICPP-14_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.4.3 Use RAII for resources" name="HICPP-3_4_3" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 14.2.1 Declare template specializations in the same file as the primary template they specialize." name="HICPP-14_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.4.2 Do not assign the address of a variable to a pointer with a greater lifetime" name="HICPP-3_4_2" rules="1" total="0" />
               <Category authTot="3;" authUrg="0;" desc="HIC++ 4.2.2 Ensure that data loss does not demonstrably occur in an integral expression" name="HICPP-4_2_2" rules="6" total="3" />
               <Category authTot="2;" authUrg="0;" desc="HIC++ 4.2.1 Ensure that the U suffix is applied to a literal used in a context requiring an unsigned integral expression" name="HICPP-4_2_1" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.3.4 Define =delete functions with parameters of type rvalue reference to const" name="HICPP-8_3_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.3.3 Do not use default arguments" name="HICPP-8_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.3.1 Do not write functions with an excessive McCabe Cyclomatic Complexity" name="HICPP-8_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.4.1 Do not use std::condition variable any on a std::mutex" name="HICPP-18_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.4.3 Do not convert from a base class to a derived class" name="HICPP-5_4_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.4.2 Do not cast an expression to an enumeration type" name="HICPP-5_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.8.1 Do not use the conditional operator (?:) as a sub-expression" name="HICPP-5_8_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.4.1 Only use casting forms: static cast (excl. void*), dynamic cast or explicit constructor call" name="HICPP-5_4_1" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.1.5 Do not introduce virtual functions in a final class" name="HICPP-9_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.1.1 Do not use std::vector&lt;bool>" name="HICPP-17_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.1.3 Do not return non-const handles to class data from const member functions" name="HICPP-9_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.1.4 Do not write member functions which return non-const handles to data less accessible than the member function" name="HICPP-9_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.1.1 Declare static any member function that does not require this. Alternatively, declare const any member function that does not modify the externally visible state of the object" name="HICPP-9_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.1.2 Make default arguments the same or absent when overriding a virtual function" name="HICPP-9_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.3.4 Do not use deprecated STL library features" name="HICPP-1_3_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.3.3 Do not use the C Standard Library .h headers" name="HICPP-1_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.2.4 Only modify a for loop counter in the for expression" name="HICPP-6_2_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.3.5 Do not use throw exception specifications" name="HICPP-1_3_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.2.3 Do not alter a control or counter variable more than once in a loop" name="HICPP-6_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.2.1 Declare virtual, private or protected the destructor of a type used as a base class" name="HICPP-12_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.3.2 Do not use the register keyword" name="HICPP-1_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.3.1 Do not use the increment operator (++) on a variable of type bool" name="HICPP-1_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.2.2 Ensure that a loop has a single loop counter, an optional control variable, and is not degenerate" name="HICPP-6_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.2.1 Implement a loop that only uses element values as a range-based loop" name="HICPP-6_2_1" rules="1" total="0" />
            </Category>
            <Category authTot="14;" authUrg="0;" desc="Initialization" name="INIT" rules="20" total="14" />
            <Category authTot="267;" authUrg="1;" desc="Joint Strike Fighter" name="JSF" rules="278" total="267" />
            <Category authTot="80;" authUrg="2;" desc="Metrics" name="METRICS" rules="43" total="80" />
            <Category authTot="68;" authUrg="1;" desc="MISRA C 1998" name="MISRA" rules="60" total="68" />
            <Category authTot="115;" authUrg="1;" desc="MISRA C 2004" name="MISRA2004" rules="221" total="115" />
            <Category authTot="132;" authUrg="0;" desc="MISRA C++ 2008" name="MISRA2008" rules="336" total="132" />
            <Category authTot="0;" authUrg="0;" desc="MISRA C 2012 (Legacy)" name="MISRA2012" rules="322" total="0">
               <Category authTot="132;" authUrg="3;" desc="MISRA C 2012 Rules" name="MISRA2012-RULE" rules="279" total="132" />
               <Category authTot="25;" authUrg="0;" desc="MISRA C 2012 Directives" name="MISRA2012-DIR" rules="43" total="25" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="MISRA C 2012" name="MISRAC2012" rules="322" total="0">
               <Category authTot="0;" authUrg="0;" desc="Rule 11.3 (Required) A cast shall not be performed between a pointer to object type and a pointer to a different object type" name="MISRAC2012-RULE_11_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.13 (Required) A line whose first token is # shall be a valid preprocessing directive" name="MISRAC2012-RULE_20_13" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.5 (Required) An external object or function shall be declared once in one and only one file" name="MISRAC2012-RULE_8_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 11.4 (Advisory) A conversion should not be performed between a pointer to object and an integer type" name="MISRAC2012-RULE_11_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.12 (Required) A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" name="MISRAC2012-RULE_20_12" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.6 (Required) An identifier with external linkage shall have exactly one external definition" name="MISRAC2012-RULE_8_6" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="Rule 11.5 (Advisory) A conversion should not be performed from pointer to void into pointer to object" name="MISRAC2012-RULE_11_5" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="Rule 15.1 (Advisory) The goto statement should not be used" name="MISRAC2012-RULE_15_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.11 (Required) A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" name="MISRAC2012-RULE_20_11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.3 (Required) All declarations of an object or function shall use the same names and type qualifiers" name="MISRAC2012-RULE_8_3" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 11.6 (Required) A cast shall not be performed between pointer to void and an arithmetic type" name="MISRAC2012-RULE_11_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 15.2 (Required) The goto statement shall jump to a label declared later in the same function" name="MISRAC2012-RULE_15_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.10 (Advisory) The # and ## preprocessor operators should not be used" name="MISRAC2012-RULE_20_10" rules="1" total="0" />
               <Category authTot="4;" authUrg="1;" desc="Rule 8.4 (Required) A compatible declaration shall be visible when an object or function with external linkage is defined" name="MISRAC2012-RULE_8_4" rules="2" total="4" />
               <Category authTot="0;" authUrg="0;" desc="Rule 11.7 (Required) A cast shall not be performed between pointer to object and a non-integer arithmetic type" name="MISRAC2012-RULE_11_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 15.3 (Required) Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement" name="MISRAC2012-RULE_15_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.9 (Advisory) An object should be defined at block scope if its identifier only appears in a single function" name="MISRAC2012-RULE_8_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 11.8 (Required) A cast shall not remove any const or volatile qualification from the type pointed to by a pointer" name="MISRAC2012-RULE_11_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 15.4 (Advisory) There should be no more than one break or goto statement used to terminate any iteration statement" name="MISRAC2012-RULE_15_4" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant" name="MISRAC2012-RULE_11_9" rules="2" total="2" />
               <Category authTot="3;" authUrg="0;" desc="Rule 15.5 (Advisory) A function should have a single point of exit at the end" name="MISRAC2012-RULE_15_5" rules="1" total="3" />
               <Category authTot="0;" authUrg="0;" desc="Rule 19.1 (Mandatory) An object shall not be assigned or copied to an overlapping object" name="MISRAC2012-RULE_19_1" rules="3" total="0" />
               <Category authTot="6;" authUrg="0;" desc="Rule 8.7 (Advisory) Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" name="MISRAC2012-RULE_8_7" rules="1" total="6" />
               <Category authTot="0;" authUrg="0;" desc="Rule 15.6 (Required) The body of an iteration-statement or a selection-statement shall be a compound-statement" name="MISRAC2012-RULE_15_6" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 19.2 (Advisory) The union keyword should not be used" name="MISRAC2012-RULE_19_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.8 (Required) The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage" name="MISRAC2012-RULE_8_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.14 (Required) The validity of values received from external sources shall be checked" name="MISRAC2012-DIR_4_14" rules="12" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 15.7 (Required) All if ... else if constructs shall be terminated with an else statement" name="MISRAC2012-RULE_15_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.13 (Advisory) Functions which are designed to provide operations on a resource should be called in an appropriate sequence" name="MISRAC2012-DIR_4_13" rules="6" total="0" />
               <Category authTot="2;" authUrg="0;" desc="Dir 4.12 (Required) Dynamic memory allocation shall not be used" name="MISRAC2012-DIR_4_12" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.11 (Required) The validity of values passed to library functions shall be checked" name="MISRAC2012-DIR_4_11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.10 (Required) Precautions shall be taken in order to prevent the contents of a header file being included more than once" name="MISRAC2012-DIR_4_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.14 (Required) All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related" name="MISRAC2012-RULE_20_14" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 4.1 (Required) Octal and hexadecimal escape sequences shall be terminated" name="MISRAC2012-RULE_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 4.2 (Advisory) Trigraphs should not be used" name="MISRAC2012-RULE_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.1 (Required) Types shall be explicitly specified" name="MISRAC2012-RULE_8_1" rules="2" total="0" />
               <Category authTot="10;" authUrg="1;" desc="Rule 8.2 (Required) Function types shall be in prototype form with named parameters" name="MISRAC2012-RULE_8_2" rules="3" total="10" />
               <Category authTot="0;" authUrg="0;" desc="Rule 11.1 (Required) Conversions shall not be performed between a pointer to a function and any other type" name="MISRAC2012-RULE_11_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 11.2 (Required) Conversions shall not be performed between a pointer to an incomplete type and any other type" name="MISRAC2012-RULE_11_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.3 (Required) The same file shall not be open for read and write access at the same time on different streams" name="MISRAC2012-RULE_22_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.4 (Mandatory) There shall be no attempt to write to a stream which has been opened as read-only" name="MISRAC2012-RULE_22_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.5 (Mandatory) A pointer to a FILE object shall not be dereferenced" name="MISRAC2012-RULE_22_5" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.6 (Mandatory) The value of a pointer to a FILE shall not be used after the associated stream has been closed" name="MISRAC2012-RULE_22_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.7 (Required) The macro EOF shall only be compared with the unmodified return value from any Standard Library function capable of returning EOF" name="MISRAC2012-RULE_22_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.8 (Required) The value of errno shall be set to zero prior to a call to an errno-setting-function" name="MISRAC2012-RULE_22_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.9 (Required) The value of errno shall be tested against zero after calling an errno-setting-function" name="MISRAC2012-RULE_22_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.1 (Required) All resources obtained dynamically by means of Standard Library functions shall be explicitly released" name="MISRAC2012-RULE_22_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.2 (Mandatory) A block of memory shall only be freed if it was allocated by means of a" name="MISRAC2012-RULE_22_2" rules="2" total="0" />
               <Category authTot="1;" authUrg="0;" desc="Rule 10.4 (Required) Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" name="MISRAC2012-RULE_10_4" rules="2" total="1" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.5 (Advisory) The value of an expression should not be cast to an inappropriate essential type" name="MISRAC2012-RULE_10_5" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 14.1 (Required) A loop counter shall not have essentially floating type" name="MISRAC2012-RULE_14_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.6 (Required) The value of a composite expression shall not be assigned to an object with wider essential type" name="MISRAC2012-RULE_10_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 14.2 (Required) A for loop shall be well-formed" name="MISRAC2012-RULE_14_2" rules="4" total="0" />
               <Category authTot="26;" authUrg="0;" desc="Rule 7.4 (Required) A string literal shall not be assigned to an object unless the object's type is &quot;pointer to const-qualified char&quot;" name="MISRAC2012-RULE_7_4" rules="1" total="26" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.7 (Required) If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" name="MISRAC2012-RULE_10_7" rules="2" total="0" />
               <Category authTot="1;" authUrg="0;" desc="Rule 14.3 (Required) Controlling expressions shall not be invariant" name="MISRAC2012-RULE_14_3" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.8 (Required) The value of a composite expression shall not be cast to a different essential type category or a wider essential type" name="MISRAC2012-RULE_10_8" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="Rule 14.4 (Required) The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type" name="MISRAC2012-RULE_14_4" rules="1" total="2" />
               <Category authTot="1;" authUrg="0;" desc="Rule 18.1 (Required) A pointer resulting from arithmetic on a pointer operand shall address an element of the same array as that pointer operand" name="MISRAC2012-RULE_18_1" rules="3" total="1" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.2 (Required) Subtraction between pointers shall only be applied to pointers that address elements of the same array" name="MISRAC2012-RULE_18_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.3 (Required) The relational operators >, >=, &lt; and &lt;= shall not be applied to objects of pointer type except where they point into the same object" name="MISRAC2012-RULE_18_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.4 (Advisory) The +, -, += and -= operators should not be applied to an expression of pointer type" name="MISRAC2012-RULE_18_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.5 (Advisory) Declarations should contain no more than two levels of pointer nesting" name="MISRAC2012-RULE_18_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.6 (Required) The address of an object with automatic storage shall not be copied to another object that persists after the first object has ceased to exist" name="MISRAC2012-RULE_18_6" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.7 (Required) Flexible array members shall not be declared" name="MISRAC2012-RULE_18_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.8 (Required) Variable-length array types shall not be used" name="MISRAC2012-RULE_18_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 3.2 (Required) Line-splicing shall not be used in // comments" name="MISRAC2012-RULE_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 3.1 (Required) The character sequences /* and // shall not be used within a comment" name="MISRAC2012-RULE_3_1" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 7.2 (Required) A &quot;u&quot; or &quot;U&quot; suffix shall be applied to all integer constants that are represented in an unsigned type" name="MISRAC2012-RULE_7_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.1 (Required) Operands shall not be of an inappropriate essential type" name="MISRAC2012-RULE_10_1" rules="7" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 7.3 (Required) The lowercase character &quot;l&quot; shall not be used in a literal suffix" name="MISRAC2012-RULE_7_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.2 (Required) Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" name="MISRAC2012-RULE_10_2" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="Rule 10.3 (Required) The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category" name="MISRAC2012-RULE_10_3" rules="2" total="1" />
               <Category authTot="0;" authUrg="0;" desc="Rule 7.1 (Required) Octal constants shall not be used" name="MISRAC2012-RULE_7_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.14 (Required) The Standard Library function memcmp shall not be used to compare null terminated strings" name="MISRAC2012-RULE_21_14" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.4 (Required) The standard header file &lt;setjmp.h> shall not be used" name="MISRAC2012-RULE_21_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.13 (Mandatory) Any value passed to a function in &lt;ctype.h> shall be representable as an unsigned char or be the value EOF" name="MISRAC2012-RULE_21_13" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.5 (Required) The standard header file &lt;signal.h> shall not be used" name="MISRAC2012-RULE_21_5" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.12 (Advisory) The exception handling features of &lt;fenv.h> should not be used" name="MISRAC2012-RULE_21_12" rules="1" total="0" />
               <Category authTot="3;" authUrg="1;" desc="Rule 21.6 (Required) The Standard Library input/output functions shall not be used" name="MISRAC2012-RULE_21_6" rules="1" total="3" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.11 (Required) The standard header file &lt;tgmath.h> shall not be used" name="MISRAC2012-RULE_21_11" rules="2" total="0" />
               <Category authTot="1;" authUrg="0;" desc="Rule 21.7 (Required) The atof, atoi, atol and atoll functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_7" rules="1" total="1" />
               <Category authTot="10;" authUrg="0;" desc="Rule 21.10 (Required) The Standard Library time and date functions shall not be used" name="MISRAC2012-RULE_21_10" rules="1" total="10" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.8 (Required) The Standard Library termination functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_8" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.9 (Required) The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.19 (Mandatory) The pointers returned by the Standard Library functions localeconv, getenv, setlocale or, strerror shall only be used as if they have pointer to const-qualified type" name="MISRAC2012-RULE_21_19" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.18 (Mandatory) The size_t argument passed to any function in &lt;string.h> shall have an appropriate value" name="MISRAC2012-RULE_21_18" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.17 (Mandatory) Use of the string handling functions from &lt;string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters" name="MISRAC2012-RULE_21_17" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.16 (Required) The pointer arguments to the Standard Library function memcmp shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" name="MISRAC2012-RULE_21_16" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.15 (Required) The pointer arguments to the Standard Library functions memcpy, memmove and memcmp shall be pointers to qualified or unqualified versions of compatible types" name="MISRAC2012-RULE_21_15" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.1 (Required) #define and #undef shall not be used on a reserved identifier or reserved macro name" name="MISRAC2012-RULE_21_1" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.2 (Required) A reserved identifier or macro name shall not be declared" name="MISRAC2012-RULE_21_2" rules="3" total="0" />
               <Category authTot="2;" authUrg="0;" desc="Rule 21.3 (Required) The memory allocation and deallocation functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_3" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="Rule 13.1 (Required) Initializer lists shall not contain persistent side effects" name="MISRAC2012-RULE_13_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 13.2 (Required) The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders" name="MISRAC2012-RULE_13_2" rules="7" total="0" />
               <Category authTot="1;" authUrg="0;" desc="Rule 13.3 (Advisory) A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator" name="MISRAC2012-RULE_13_3" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="Rule 13.4 (Advisory) The result of an assignment operator should not be used" name="MISRAC2012-RULE_13_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 13.5 (Required) The right hand operand of a logical &amp;&amp; or || operator shall not contain persistent side effects" name="MISRAC2012-RULE_13_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 17.1 (Required) The features of &lt;stdarg.h> shall not be used" name="MISRAC2012-RULE_17_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.21 (Required) The Standard Library function system of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_21" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 13.6 (Required) The operand of the sizeof operator shall not contain any expression which has potential side effects" name="MISRAC2012-RULE_13_6" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 17.2 (Required) Functions shall not call themselves, either directly or indirectly" name="MISRAC2012-RULE_17_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.20 (Mandatory) The pointer returned by the Standard Library functions asctime, ctime, gmtime, localtime, localeconv, getenv, setlocale or strerror shall not be used following a subsequent call to the same function" name="MISRAC2012-RULE_21_20" rules="1" total="0" />
               <Category authTot="15;" authUrg="0;" desc="Rule 17.3 (Mandatory) A function shall not be declared implicitly" name="MISRAC2012-RULE_17_3" rules="1" total="15" />
               <Category authTot="0;" authUrg="0;" desc="Rule 17.4 (Mandatory) All exit paths from a function with non-void return type shall have an explicit return statement with an expression" name="MISRAC2012-RULE_17_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 17.5 (Required) The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" name="MISRAC2012-RULE_17_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 17.6 (Mandatory) The declaration of an array parameter shall not contain the static keyword between the [ ]" name="MISRAC2012-RULE_17_6" rules="1" total="0" />
               <Category authTot="35;" authUrg="0;" desc="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used" name="MISRAC2012-RULE_17_7" rules="2" total="35" />
               <Category authTot="0;" authUrg="0;" desc="Rule 17.8 (Advisory) A function parameter should not be modified" name="MISRAC2012-RULE_17_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 2.3 (Advisory) A project should not contain unused type declarations" name="MISRAC2012-RULE_2_3" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 2.4 (Advisory) A project should not contain unused tag declarations" name="MISRAC2012-RULE_2_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 2.1 (Required) A project shall not contain unreachable code" name="MISRAC2012-RULE_2_1" rules="7" total="0" />
               <Category authTot="5;" authUrg="0;" desc="Rule 2.2 (Required) There shall be no dead code" name="MISRAC2012-RULE_2_2" rules="2" total="5" />
               <Category authTot="1;" authUrg="0;" desc="Rule 2.7 (Advisory) There should be no unused parameters in functions" name="MISRAC2012-RULE_2_7" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="Rule 2.5 (Advisory) A project should not contain unused macro definitions" name="MISRAC2012-RULE_2_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 6.1 (Required) Bit-fields shall only be declared with an appropriate type" name="MISRAC2012-RULE_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 2.6 (Advisory) A function should not contain unused label declarations" name="MISRAC2012-RULE_2_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 6.2 (Required) Single-bit named bit fields shall not be of a signed type" name="MISRAC2012-RULE_6_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.5 (Advisory) #undef should not be used" name="MISRAC2012-RULE_20_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.6 (Required) Tokens that look like a preprocessing directive shall not occur within a macro argument" name="MISRAC2012-RULE_20_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.7 (Required) Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" name="MISRAC2012-RULE_20_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.8 (Required) The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" name="MISRAC2012-RULE_20_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.9 (Required) All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation" name="MISRAC2012-RULE_20_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.1 (Advisory) #include directives should only be preceded by preprocessor directives or comments" name="MISRAC2012-RULE_20_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.2 (Required) The ', &quot; or \ characters and the /* or // character sequences shall not occur in a header file name" name="MISRAC2012-RULE_20_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.3 (Required) The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" name="MISRAC2012-RULE_20_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.4 (Required) A macro shall not be defined with the same name as a keyword" name="MISRAC2012-RULE_20_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 12.2 (Required) The right hand operand of a shift operator shall lie in the range zero to one less than the width in bits of the essential type of the left hand operand" name="MISRAC2012-RULE_12_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.8 (Required) Identifiers that define objects or functions with external linkage shall be unique" name="MISRAC2012-RULE_5_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 9.4 (Required) An element of an object shall not be initialized more than once" name="MISRAC2012-RULE_9_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 12.3 (Advisory) The comma operator should not be used" name="MISRAC2012-RULE_12_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.9 (Advisory) Identifiers that define objects or functions with internal linkage should be unique" name="MISRAC2012-RULE_5_9" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 9.5 (Required) Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" name="MISRAC2012-RULE_9_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 12.4 (Advisory) Evaluation of constant expressions should not lead to unsigned integer wrap-around" name="MISRAC2012-RULE_12_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.6 (Required) A typedef name shall be a unique identifier" name="MISRAC2012-RULE_5_6" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 9.2 (Required) The initializer for an aggregate or union shall be enclosed in braces" name="MISRAC2012-RULE_9_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 12.5 (Mandatory) The sizeof operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" name="MISRAC2012-RULE_12_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.1 (Required) All switch statements shall be well-formed" name="MISRAC2012-RULE_16_1" rules="8" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.7 (Required) A tag name shall be a unique identifier" name="MISRAC2012-RULE_5_7" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 9.3 (Required) Arrays shall not be partially initialized" name="MISRAC2012-RULE_9_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.2 (Required) A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" name="MISRAC2012-RULE_16_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.3 (Required) An unconditional break statement shall terminate every switch-clause" name="MISRAC2012-RULE_16_3" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.10 (Required) The value of errno shall only be tested when the last function to be called was an errno-setting-function" name="MISRAC2012-RULE_22_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.4 (Required) Every switch statement shall have a default label" name="MISRAC2012-RULE_16_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.5 (Required) A default label shall appear as either the first or the last switch label of a switch statement" name="MISRAC2012-RULE_16_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.9 (Advisory) A function should be used in preference to a function-like macro where they are interchangeable" name="MISRAC2012-DIR_4_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.6 (Required) Every switch statement shall have at least two switch-clauses" name="MISRAC2012-RULE_16_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.8 (Advisory) If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" name="MISRAC2012-DIR_4_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.7 (Required) A switch-expression shall not have essentially Boolean type" name="MISRAC2012-RULE_16_7" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.5 (Advisory) Identifiers in the same name space with overlapping visibility should be typographically unambiguous" name="MISRAC2012-DIR_4_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.4 (Advisory) Sections of code should not be &quot;commented out&quot;" name="MISRAC2012-DIR_4_4" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="Dir 4.7 (Required) If a function returns error information, then that error information shall be tested" name="MISRAC2012-DIR_4_7" rules="2" total="1" />
               <Category authTot="15;" authUrg="0;" desc="Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types" name="MISRAC2012-DIR_4_6" rules="3" total="15" />
               <Category authTot="7;" authUrg="0;" desc="Dir 4.1 (Required) Run-time failures shall be minimized" name="MISRAC2012-DIR_4_1" rules="11" total="7" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.12 (Required) Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" name="MISRAC2012-RULE_8_12" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="Rule 8.13 (Advisory) A pointer should point to a const-qualified type whenever possible" name="MISRAC2012-RULE_8_13" rules="2" total="1" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.3 (Required) Assembly language shall be encapsulated and isolated" name="MISRAC2012-DIR_4_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.14 (Required) The restrict type qualifier shall not be used" name="MISRAC2012-RULE_8_14" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.2 (Advisory) All usage of assembly language should be documented" name="MISRAC2012-DIR_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 1.1 (Required) The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits" name="MISRAC2012-RULE_1_1" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.10 (Required) An inline function shall be declared with the static storage class" name="MISRAC2012-RULE_8_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.11 (Advisory) When an array with external linkage is declared, its size should be explicitly specified" name="MISRAC2012-RULE_8_11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 1.4 (Required) Emergent language features shall not be used" name="MISRAC2012-RULE_1_4" rules="14" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.1 (Required) External identifiers shall be distinct" name="MISRAC2012-RULE_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" name="MISRAC2012-RULE_1_3" rules="15" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.4 (Required) Macro identifiers shall be distinct" name="MISRAC2012-RULE_5_4" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.5 (Required) Identifiers shall be distinct from macro names" name="MISRAC2012-RULE_5_5" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 9.1 (Mandatory) The value of an object with automatic storage duration shall not be read before it has been set" name="MISRAC2012-RULE_9_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.2 (Required) Identifiers declared in the same scope and name space shall be distinct" name="MISRAC2012-RULE_5_2" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 12.1 (Advisory) The precedence of operators within expressions should be made explicit" name="MISRAC2012-RULE_12_1" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.3 (Required) An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" name="MISRAC2012-RULE_5_3" rules="2" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Memory and Resource Management" name="MRM" rules="60" total="0" />
            <Category authTot="39;" authUrg="0;" desc="Naming Conventions" name="NAMING" rules="98" total="39">
               <Category authTot="72;" authUrg="0;" desc="Hungarian Notation" name="NAMING-HN" rules="44" total="72" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Object Oriented" name="OOP" rules="61" total="0" />
            <Category authTot="16;" authUrg="1;" desc="Optimization" name="OPT" rules="43" total="16" />
            <Category authTot="0;" authUrg="0;" desc="OWASP Top 10 Most Critical Web Application Security Risks (2017)" name="OWASP2017" rules="16" total="0">
               <Category authTot="0;" authUrg="0;" desc="OWASP A3 Sensitive Data Exposure" name="OWASP2017-A3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A2 Broken Authentication" name="OWASP2017-A2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A1 Injection" name="OWASP2017-A1" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A10 Insufficient Logging&amp;Monitoring" name="OWASP2017-A10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A6 Security Misconfiguration" name="OWASP2017-A6" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A5 Broken Access Control" name="OWASP2017-A5" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A4 XML External Entities (XXE)" name="OWASP2017-A4" rules="1" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="OWASP API Security Top 10 (2019)" name="OWASP2019" rules="42" total="0">
               <Category authTot="0;" authUrg="0;" desc="OWASP API2 Broken User Authentication" name="OWASP2019-API2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP API4 Lack of Resources &amp; Rate Limiting" name="OWASP2019-API4" rules="2" total="0" />
               <Category authTot="1;" authUrg="0;" desc="OWASP API3 Excessive Data Exposure" name="OWASP2019-API3" rules="17" total="1" />
               <Category authTot="0;" authUrg="0;" desc="OWASP API10 Insufficient Logging &amp; Monitoring" name="OWASP2019-API10" rules="2" total="0" />
               <Category authTot="4;" authUrg="0;" desc="OWASP API9 Improper Assets Management" name="OWASP2019-API9" rules="7" total="4" />
               <Category authTot="0;" authUrg="0;" desc="OWASP API8 Injection" name="OWASP2019-API8" rules="10" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP API7 Security Misconfiguration" name="OWASP2019-API7" rules="3" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="OWASP Top 10 Most Critical Web Application Security Risks (2021)" name="OWASP2021" rules="18" total="0">
               <Category authTot="0;" authUrg="0;" desc="OWASP A8 Software and Data Integrity Failures" name="OWASP2021-A8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A7 Identification and Authentication Failures" name="OWASP2021-A7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A5 Security Misconfiguration" name="OWASP2021-A5" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A9 Security Logging and Monitoring Failures" name="OWASP2021-A9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A4 Insecure Design" name="OWASP2021-A4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A3 Injection" name="OWASP2021-A3" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A2 Cryptographic Failures" name="OWASP2021-A2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A1 Broken Access Control" name="OWASP2021-A1" rules="3" total="0" />
            </Category>
            <Category authTot="16;" authUrg="14;" desc="Parser diagnostics" name="PARSER" rules="2" total="16" />
            <Category authTot="46;" authUrg="0;" desc="Possible Bugs" name="PB" rules="85" total="46" />
            <Category authTot="4;" authUrg="0;" desc="Physical File Organization" name="PFO" rules="10" total="4" />
            <Category authTot="20;" authUrg="0;" desc="Portability" name="PORT" rules="39" total="20" />
            <Category authTot="27;" authUrg="1;" desc="Preprocessor" name="PREPROC" rules="29" total="27" />
            <Category authTot="0;" authUrg="0;" desc="Qt Best Practices" name="QT" rules="18" total="0" />
            <Category authTot="20;" authUrg="0;" desc="Security" name="SECURITY" rules="54" total="20" />
            <Category authTot="0;" authUrg="0;" desc="STL Best Practices" name="STL" rules="42" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Template" name="TEMPL" rules="18" total="0" />
         </CategoriesList>
         <RulesList>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-000160" desc="Do not use weak encryption functions" id="APSC_DV-000160-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-000170" desc="Do not use weak encryption functions" id="APSC_DV-000170-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-000480" desc="Protect against SQL injection" id="APSC_DV-000480-a" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-000500" desc="Observe correct revocation order while relinquishing privileges" id="APSC_DV-000500-a" origId="SECURITY-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-000650" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="APSC_DV-000650-a" origId="SECURITY-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001290" desc="Protect against SQL injection" id="APSC_DV-001290-a" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001290" desc="Untrusted data is used as a loop boundary" id="APSC_DV-001290-b" origId="SECURITY-38" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001290" desc="Avoid passing user input into methods as parameters" id="APSC_DV-001290-c" origId="SECURITY-20" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001290" desc="Avoid using unsecured shell functions that may be affected by shell metacharacters" id="APSC_DV-001290-d" origId="SECURITY-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001300" desc="Protect against SQL injection" id="APSC_DV-001300-a" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001740" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-001740-a" origId="BD-SECURITY-SENSLOG" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001750" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-001750-a" origId="BD-SECURITY-SENSLOG" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001850" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-001850-a" origId="BD-SECURITY-SENSLOG" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001860" desc="Do not use weak encryption functions" id="APSC_DV-001860-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid race conditions when using fork and file descriptors" id="APSC_DV-001995-a" origId="BD-TRS-FORKFILE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid race conditions while checking for the existence of a symbolic link" id="APSC_DV-001995-b" origId="BD-TRS-SYMLINK" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid race conditions while accessing files" id="APSC_DV-001995-c" origId="BD-TRS-FRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Use locks to prevent race conditions when modifying bit fields" id="APSC_DV-001995-d" origId="BD-TRS-BITLOCK" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Do not use global variable with different locks set" id="APSC_DV-001995-e" origId="BD-TRS-MLOCK" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid using thread-unsafe functions" id="APSC_DV-001995-f" origId="SECURITY-25" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Usage of functions prone to race is not allowed" id="APSC_DV-001995-g" origId="SECURITY-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid using the 'vfork()' function" id="APSC_DV-001995-h" origId="SECURITY-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Properly define signal handlers" id="APSC_DV-001995-i" origId="BD-PB-SIGHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002000" desc="Ensure resources are freed" id="APSC_DV-002000-a" origId="BD-RES-LEAKS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002010" desc="Do not use weak encryption functions" id="APSC_DV-002010-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002290" desc="Do not use the rand() function for generating pseudorandom numbers" id="APSC_DV-002290-a" origId="SECURITY-02_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002290" desc="Properly seed pseudorandom number generators" id="APSC_DV-002290-b" origId="BD-SECURITY-RAND" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002290" desc="The 'random_shuffle' identifier should not be used" id="APSC_DV-002290-c" origId="CODSTA-MCPP-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002290" desc="Avoid functions which use random numbers from standard C library" id="APSC_DV-002290-d" origId="SECURITY-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002350" desc="Do not use weak encryption functions" id="APSC_DV-002350-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002390" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="APSC_DV-002390-a" origId="BD-SECURITY-XXEXRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002390" desc="Do not process structured text data natively" id="APSC_DV-002390-b" origId="CODSTA-201" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002390" desc="Do not use scanf and fscanf functions without specifying variable size in format string" id="APSC_DV-002390-c" origId="SECURITY-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002390" desc="Do not use mbstowcs() function" id="APSC_DV-002390-d" origId="SECURITY-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002400" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002400-a" origId="BD-SECURITY-TDINPUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002400" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="APSC_DV-002400-b" origId="PB-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002400" desc="Avoid using the 'vfork()' function" id="APSC_DV-002400-c" origId="SECURITY-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="APSC_DV-002400" desc="Avoid using thread-unsafe functions" id="APSC_DV-002400-d" origId="SECURITY-25" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002440" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-002440-a" origId="BD-SECURITY-SENSLOG" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002460" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-002460-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002470" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-002470-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002480" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="APSC_DV-002480-a" origId="SECURITY-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002510" desc="Protect against command injection" id="APSC_DV-002510-a" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against environment injection" id="APSC_DV-002520-a" origId="BD-SECURITY-TDENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against file name injection" id="APSC_DV-002520-b" origId="BD-SECURITY-TDFNAMES" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against SQL injection" id="APSC_DV-002520-c" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-002520" desc="Never use unfiltered data from an untrusted user as the format parameter" id="APSC_DV-002520-d" origId="SECURITY-36" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Avoid tainted data in array indexes" id="APSC_DV-002520-e" origId="BD-SECURITY-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against integer overflow/underflow from tainted data" id="APSC_DV-002520-f" origId="BD-SECURITY-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-002520-g" origId="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against command injection" id="APSC_DV-002520-h" origId="BD-SECURITY-TDCMD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Avoid printing tainted data on the output console" id="APSC_DV-002520-i" origId="BD-SECURITY-TDCONSOLE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002520-j" origId="BD-SECURITY-TDINPUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Untrusted data is used as a loop boundary" id="APSC_DV-002520-k" origId="SECURITY-38" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against environment injection" id="APSC_DV-002530-a" origId="BD-SECURITY-TDENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against file name injection" id="APSC_DV-002530-b" origId="BD-SECURITY-TDFNAMES" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against SQL injection" id="APSC_DV-002530-c" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-002530" desc="Never use unfiltered data from an untrusted user as the format parameter" id="APSC_DV-002530-d" origId="SECURITY-36" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Avoid tainted data in array indexes" id="APSC_DV-002530-e" origId="BD-SECURITY-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against integer overflow/underflow from tainted data" id="APSC_DV-002530-f" origId="BD-SECURITY-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-002530-g" origId="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against command injection" id="APSC_DV-002530-h" origId="BD-SECURITY-TDCMD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Avoid printing tainted data on the output console" id="APSC_DV-002530-i" origId="BD-SECURITY-TDCONSOLE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002530-j" origId="BD-SECURITY-TDINPUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Untrusted data is used as a loop boundary" id="APSC_DV-002530-k" origId="SECURITY-38" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002540" desc="Protect against SQL injection" id="APSC_DV-002540-a" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against environment injection" id="APSC_DV-002550-a" origId="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against file name injection" id="APSC_DV-002550-b" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against SQL injection" id="APSC_DV-002550-c" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-002550" desc="Never use unfiltered data from an untrusted user as the format parameter" id="APSC_DV-002550-d" origId="SECURITY-36" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Avoid tainted data in array indexes" id="APSC_DV-002550-e" origId="BD-SECURITY-ARRAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against integer overflow/underflow from tainted data" id="APSC_DV-002550-f" origId="BD-SECURITY-INTOVERF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-002550-g" origId="BD-SECURITY-LOG" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against command injection" id="APSC_DV-002550-h" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Avoid printing tainted data on the output console" id="APSC_DV-002550-i" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002550-j" origId="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Untrusted data is used as a loop boundary" id="APSC_DV-002550-k" origId="SECURITY-38" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against environment injection" id="APSC_DV-002560-a" origId="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against file name injection" id="APSC_DV-002560-b" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against SQL injection" id="APSC_DV-002560-c" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-002560" desc="Never use unfiltered data from an untrusted user as the format parameter" id="APSC_DV-002560-d" origId="SECURITY-36" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Avoid tainted data in array indexes" id="APSC_DV-002560-e" origId="BD-SECURITY-ARRAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against integer overflow/underflow from tainted data" id="APSC_DV-002560-f" origId="BD-SECURITY-INTOVERF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-002560-g" origId="BD-SECURITY-LOG" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against command injection" id="APSC_DV-002560-h" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Avoid printing tainted data on the output console" id="APSC_DV-002560-i" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002560-j" origId="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Untrusted data is used as a loop boundary" id="APSC_DV-002560-k" origId="SECURITY-38" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002570" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-002570-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002570" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="APSC_DV-002570-b" origId="SECURITY-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid buffer overflow due to defining incorrect format limits" id="APSC_DV-002590-a" origId="BD-PB-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid overflow due to reading a not zero terminated string" id="APSC_DV-002590-b" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid overflow when reading from a buffer" id="APSC_DV-002590-c" origId="BD-PB-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid overflow when writing to a buffer" id="APSC_DV-002590-d" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid integer overflows" id="APSC_DV-002590-e" origId="BD-PB-INTOVERF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Prevent buffer overflows from tainted data" id="APSC_DV-002590-f" origId="BD-SECURITY-BUFWRITE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Protect against integer overflow/underflow from tainted data" id="APSC_DV-002590-g" origId="BD-SECURITY-INTOVERF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="APSC_DV-002590-h" origId="BD-SECURITY-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid buffer read overflow from tainted data" id="APSC_DV-002590-i" origId="BD-SECURITY-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid buffer write overflow from tainted data" id="APSC_DV-002590-j" origId="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Ensure the output buffer is large enough when using path manipulation functions" id="APSC_DV-002590-k" origId="BD-PB-PATHBUF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="28;" authUrg="0;" cat="APSC_DV-003110" desc="Do not hard code string literals" id="APSC_DV-003110-a" origId="CODSTA-203" sev="1" total="28" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-003235" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-003235-a" origId="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-003235" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-003235-b" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="5;" authUrg="0;" cat="AUTOSAR-A0_1_1" desc="Avoid unused values" id="AUTOSAR-A0_1_1-a" origId="BD-PB-VOVR" sev="2" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_1_2" desc="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="AUTOSAR-A0_1_2-a" origId="CODSTA-CPP-58" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_1_3" desc="Every defined function with internal linkage shall be used at least once" id="AUTOSAR-A0_1_3-a" origId="OPT-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="AUTOSAR-A0_1_4" desc="Eliminate unused parameters" id="AUTOSAR-A0_1_4-a" origId="OPT-03" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_1_5" desc="There shall be no unused named parameters in virtual functions" id="AUTOSAR-A0_1_5-a" origId="OPT-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_1_6" desc="A project shall not contain unused type declarations" id="AUTOSAR-A0_1_6-a" origId="GLOBAL-UNUSEDTYPE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_4_2" desc="Type long double shall not be used" id="AUTOSAR-A0_4_2-a" origId="PORT-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_4_4" desc="Validate values passed to library functions" id="AUTOSAR-A0_4_4-a" origId="BD-API-VALPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_1_1" desc="Be wary about using multiple inheritance of classes that are not abstract interfaces" id="AUTOSAR-A10_1_1-a" origId="OOP-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_2_1" desc="Never redefine an inherited nonvirtual function" id="AUTOSAR-A10_2_1-a" origId="OOP-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_2_1" desc="Member functions declared in derived class should not hide functions declared in base classes" id="AUTOSAR-A10_2_1-b" origId="OOP-53" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_3_1" desc="Only one of virtual, override or final should be specified in a member function declaration" id="AUTOSAR-A10_3_1-a" origId="CODSTA-MCPP-24" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_3_2" desc="Each overriding virtual function shall be declared with the override or final specifier" id="AUTOSAR-A10_3_2-a" origId="CODSTA-MCPP-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_3_3" desc="Do not introduce virtual functions in a final class" id="AUTOSAR-A10_3_3-a" origId="CODSTA-MCPP-52" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_3_5" desc="A user-defined assignment operator shall not be virtual" id="AUTOSAR-A10_3_5-a" origId="OOP-56" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_4_1" desc="Hierarchies should be based on abstract classes" id="AUTOSAR-A10_4_1-a" origId="OOP-40" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A11_0_1" desc="A non-POD type should be defined as class" id="AUTOSAR-A11_0_1-a" origId="OOP-55" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A11_0_2" desc="Structs should only contain public data members and should not be a base or inherit" id="AUTOSAR-A11_0_2-a" origId="OOP-57" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A11_3_1" desc="Friend declarations shall not be used except declarations of comparison operators" id="AUTOSAR-A11_3_1-a" origId="OOP-11_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_0_1" desc="Copy and destroy consistently" id="AUTOSAR-A12_0_1-a" origId="MRM-40" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_0_2" desc="Do not compare objects of a class that may contain padding bits with C standard library functions" id="AUTOSAR-A12_0_2-a" origId="CODSTA-CPP-100" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_1" desc="All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" id="AUTOSAR-A12_1_1-a" origId="PB-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_1" desc="All member variables should be initialized in constructor" id="AUTOSAR-A12_1_1-b" origId="INIT-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_2" desc="Do not specify both an NSDMI and a member initializer in a constructor for the same non-static member" id="AUTOSAR-A12_1_2-a" origId="HICPP-12_4_3-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_3" desc="User-defined constructors that initialize data members with the same constant values across all constructors should initialize using NSDMI instead" id="AUTOSAR-A12_1_3-a" origId="INIT-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_4" desc="All constructors that are callable with a single argument of fundamental type shall be declared explicit" id="AUTOSAR-A12_1_4-a" origId="OOP-45" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_5" desc="Use delegating constructors to reduce code duplication" id="AUTOSAR-A12_1_5-a" origId="CODSTA-CPP-106" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_6" desc="Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors" id="AUTOSAR-A12_1_6-a" origId="CODSTA-MCPP-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_4_1" desc="Make base class destructors public and virtual, or protected and nonvirtual" id="AUTOSAR-A12_4_1-a" origId="OOP-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_4_2" desc="If a public destructor of a class is non-virtual, then the class should be declared final" id="AUTOSAR-A12_4_2-a" origId="CODSTA-MCPP-23" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_6_1" desc="Prefer initialization to assignment in constructors" id="AUTOSAR-A12_6_1-a" origId="INIT-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_7_1" desc="Define special members as =default when the behavior is equivalent to the compiler's behavior" id="AUTOSAR-A12_7_1-a" origId="CODSTA-CPP-105" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_1" desc="A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member" id="AUTOSAR-A12_8_1-a" origId="OOP-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_2" desc="User-defined copy and move assignment operators should use user-defined no-throw swap function" id="AUTOSAR-A12_8_2-a" origId="CODSTA-MCPP-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_3" desc="Do not rely on the value of a moved-from object" id="AUTOSAR-A12_8_3-a" origId="BD-PB-SUBSEQMOVE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_4" desc="Use std::move() on rvalue references and std::forward() on forwarding references" id="AUTOSAR-A12_8_4-a" origId="CODSTA-MCPP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_5" desc="Check for assignment to self in operator=" id="AUTOSAR-A12_8_5-a" origId="OOP-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_6" desc="Avoid public copy constructors and assignment operators in base classes" id="AUTOSAR-A12_8_6-a" origId="OOP-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_7" desc="Declare assignment operators with the ref-qualifier &amp;" id="AUTOSAR-A12_8_7-a" origId="CODSTA-MCPP-19" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_1_2" desc="User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" id="AUTOSAR-A13_1_2-a" origId="NAMING-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_1_3" desc="User defined literals operators shall only perform conversion of passed parameters" id="AUTOSAR-A13_1_3-a" origId="CODSTA-MCPP-33" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_2_1" desc="Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type" id="AUTOSAR-A13_2_1-a" origId="CODSTA-CPP-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_2_2" desc="A binary arithmetic operator and a bitwise operator shall return a 'prvalue'" id="AUTOSAR-A13_2_2-a" origId="CODSTA-CPP-102" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_2_3" desc="A relational operator shall return a boolean value" id="AUTOSAR-A13_2_3-a" origId="CODSTA-CPP-101" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_3_1" desc="Avoid Overloading on Forwarding References" id="AUTOSAR-A13_3_1-a" origId="CODSTA-MCPP-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_1" desc="When overloading the subscript operator (operator[]), implement both const and non-const versions" id="AUTOSAR-A13_5_1-a" origId="HICPP-13_2_4-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_2" desc="User-conversion cast operators should be made explicit" id="AUTOSAR-A13_5_2-a" origId="CODSTA-MCPP-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_3" desc="Do not use user-defined conversion functions" id="AUTOSAR-A13_5_3-a" origId="CODSTA-CPP-05" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_4" desc="If two opposite equality operators ('==', '!=') are defined in a class, one shall be defined in terms of the other" id="AUTOSAR-A13_5_4-b" origId="CODSTA-CPP-86" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_5" desc="Comparison operators shall be non-member functions" id="AUTOSAR-A13_5_5-a" origId="CODSTA-CPP-107" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_5" desc="Comparison operators shall be non-member functions with identical parameter types and noexcept" id="AUTOSAR-A13_5_5-b" origId="CODSTA-CPP-107_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_6_1" desc="Digit sequences separators ' shall only be used consistently" id="AUTOSAR-A13_6_1-a" origId="CODSTA-MCPP-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A14_5_1" desc="A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter" id="AUTOSAR-A14_5_1-a" origId="TEMPL-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A14_5_3" desc="A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations" id="AUTOSAR-A14_5_3-a" origId="TEMPL-18" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A14_7_2" desc="Template specialization shall be declared in the same file as the primary template or a user-defined type, for which the specialization is declared" id="AUTOSAR-A14_7_2-a" origId="TEMPL-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A14_8_2" desc="Overloaded function templates shall not be explicitly specialized" id="AUTOSAR-A14_8_2-a" origId="TEMPL-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_0_2" desc="Ensure resources are freed" id="AUTOSAR-A15_0_2-a" origId="BD-RES-LEAKS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_1_1" desc="Only use instances of std::exception for exceptions" id="AUTOSAR-A15_1_1-a" origId="HICPP-15_1_1-a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_1_2" desc="An exception object should not have pointer type" id="AUTOSAR-A15_1_2-a" origId="EXCEPT-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_1_4" desc="Ensure resources are freed" id="AUTOSAR-A15_1_4-a" origId="BD-RES-LEAKS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_1_5" desc="Do not throw an exception across execution boundaries" id="AUTOSAR-A15_1_5-a" origId="PORT-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_2_1" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="AUTOSAR-A15_2_1-a" origId="EXCEPT-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_2_1" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-A15_2_1-b" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_3_2" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-A15_3_2-a" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_3_3" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="AUTOSAR-A15_3_3-a" origId="EXCEPT-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_3_4" desc="Avoid using catch-all exception handlers" id="AUTOSAR-A15_3_4-a" origId="EXCEPT-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_3_5" desc="A class type exception shall always be caught by reference" id="AUTOSAR-A15_3_5-a" origId="EXCEPT-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_1" desc="Do not use throw exception specifications" id="AUTOSAR-A15_4_1-a" origId="EXCEPT-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_2" desc="Avoid throwing exceptions from functions that are declared not to throw" id="AUTOSAR-A15_4_2-a" origId="BD-PB-NOEXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_3" desc="If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" id="AUTOSAR-A15_4_3-a" origId="GLOBAL-EXCSPECDECL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_4" desc="Declare functions 'noexcept' if they will not emit exceptions" id="AUTOSAR-A15_4_4-a" origId="CODSTA-MCPP-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_5" desc="Checked exceptions that could be thrown from a function shall be specified in the comment directly before the function declaration" id="AUTOSAR-A15_4_5-a" origId="EXCEPT-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_1" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="AUTOSAR-A15_5_1-a" origId="EXCEPT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_1" desc="All user-provided move constructors and move assignment operators shall not exit with an exception" id="AUTOSAR-A15_5_1-b" origId="EXCEPT-21" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_2" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="AUTOSAR-A15_5_2-a" origId="PB-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_2" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-A15_5_2-b" origId="PB-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_2" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-A15_5_2-c" origId="PB-75_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="AUTOSAR-A15_5_3-a" origId="PB-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="AUTOSAR-A15_5_3-b" origId="EXCEPT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Do not throw from within destructor" id="AUTOSAR-A15_5_3-c" origId="EXCEPT-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="AUTOSAR-A15_5_3-d" origId="EXCEPT-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="An empty throw (throw;) shall only be used in the compound-statement of a catch handler" id="AUTOSAR-A15_5_3-e" origId="EXCEPT-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Exceptions shall be raised only after start-up and before termination of the program" id="AUTOSAR-A15_5_3-f" origId="EXCEPT-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-A15_5_3-g" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="AUTOSAR-A15_5_3-h" origId="EXCEPT-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="AUTOSAR-A15_5_3-i" origId="EXCEPT-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Always catch exceptions" id="AUTOSAR-A15_5_3-j" origId="BD-PB-EXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Properly define exit handlers" id="AUTOSAR-A15_5_3-k" origId="BD-PB-EXITHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" id="AUTOSAR-A16_0_1-a" origId="PREPROC-26" sev="2" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="#error directive shall not be used" id="AUTOSAR-A16_0_1-b" origId="PREPROC-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="The #pragma directive shall not be used" id="AUTOSAR-A16_0_1-c" origId="PREPROC-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="Avoid using macro definitions" id="AUTOSAR-A16_0_1-d" origId="PREPROC-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="#undef shall not be used" id="AUTOSAR-A16_0_1-e" origId="PREPROC-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_2_1" desc="The following character sequences shall not appear in header file names: ', \, /*, //, or &quot;" id="AUTOSAR-A16_2_1-a" origId="PB-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_2_2" desc="A file should directly include only the headers that contain declarations and definitions required to compile that file" id="AUTOSAR-A16_2_2-a" origId="OPT-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_6_1" desc="#error directive shall not be used" id="AUTOSAR-A16_6_1-a" origId="PREPROC-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_7_1" desc="The #pragma directive shall not be used" id="AUTOSAR-A16_7_1-a" origId="PREPROC-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Do not #define nor #undef identifier 'defined'" id="AUTOSAR-A17_0_1-a" origId="MISRA2004-20_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)" id="AUTOSAR-A17_0_1-b" origId="CODSTA-92_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="AUTOSAR-A17_0_1-c" origId="CODSTA-92_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Do not redefine reserved words" id="AUTOSAR-A17_0_1-d" origId="MISRA2004-20_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Do not #define or #undef identifiers with names which start with underscore" id="AUTOSAR-A17_0_1-e" origId="MISRA2004-20_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_1_1" desc="The error indicator 'errno' shall not be used" id="AUTOSAR-A17_1_1-a" origId="MISRA2004-20_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_6_1" desc="Do not modify the standard namespaces 'std' and 'posix'" id="AUTOSAR-A17_6_1-a" origId="CODSTA-CPP-95" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_0_1" desc="The C library shall not be used" id="AUTOSAR-A18_0_1-a" origId="CODSTA-CPP-59" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A18_0_2" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="AUTOSAR-A18_0_2-a" origId="MISRA2004-20_10" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A18_0_2" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="AUTOSAR-A18_0_2-b" origId="MISRA2004-20_10" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_0_3" desc="Do not include &lt;locale.h> header" id="AUTOSAR-A18_0_3-a" origId="MISRA-121_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_0_3" desc="Do not use 'setlocale' function" id="AUTOSAR-A18_0_3-b" origId="MISRA-121_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_1" desc="C-style arrays shall not be used" id="AUTOSAR-A18_1_1-a" origId="STL-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_2" desc="Avoid using vector&lt;bool>" id="AUTOSAR-A18_1_2-a" origId="STL-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_3" desc="Prefer to use std::unique_ptr instead of std::auto_ptr" id="AUTOSAR-A18_1_3-a" origId="CODSTA-MCPP-16_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_4" desc="A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" id="AUTOSAR-A18_1_4-a" origId="BD-PB-ARRPTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_6" desc="All std::hash specializations for user-defined types shall have a noexcept function call operator" id="AUTOSAR-A18_1_6-a" origId="CODSTA-MCPP-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_1" desc="Do not use calloc, malloc, realloc and free functions" id="AUTOSAR-A18_5_1-a" origId="MRM-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_10" desc="Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new'" id="AUTOSAR-A18_5_10-a" origId="MRM-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_10" desc="An overhead should be used when an array of objects is passed to the placement 'new' allocation function" id="AUTOSAR-A18_5_10-b" origId="MRM-55_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_11" desc="Write operator delete if you write operator new" id="AUTOSAR-A18_5_11-a" origId="MRM-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_11" desc="Write operator delete[] if you write operator new[]" id="AUTOSAR-A18_5_11-b" origId="MRM-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A18_5_2" desc="Dynamic heap memory allocation shall not be used" id="AUTOSAR-A18_5_2-a" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_3" desc="Never provide brackets ([]) for delete when deallocating non-arrays" id="AUTOSAR-A18_5_3-a" origId="MRM-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_3" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="AUTOSAR-A18_5_3-b" origId="MRM-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_3" desc="Properly deallocate dynamically allocated resources" id="AUTOSAR-A18_5_3-c" origId="BD-RES-BADDEALLOC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_4" desc="Define both sized and unsized versions of operator delete" id="AUTOSAR-A18_5_4-a" origId="CODSTA-MCPP-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_5" desc="Use the same form in corresponding calls to new/malloc and delete/free" id="AUTOSAR-A18_5_5-a" origId="MRM-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_5" desc="Freed memory shouldn't be accessed under any circumstances" id="AUTOSAR-A18_5_5-b" origId="MRM-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_5" desc="Properly define new handlers" id="AUTOSAR-A18_5_5-c" origId="BD-PB-NEWHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_8" desc="Use allocation by declaration rather than by new or malloc" id="AUTOSAR-A18_5_8-a" origId="MRM-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_9" desc="The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails" id="AUTOSAR-A18_5_9-a" origId="MRM-53" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_1" desc="Prefer lambdas over std::bind, std::bind1st and std::bind2nd" id="AUTOSAR-A18_9_1-a" origId="CODSTA-MCPP-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_2" desc="The 'std::forward' function shall be used to forward universal references" id="AUTOSAR-A18_9_2-a" origId="CODSTA-MCPP-13_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_3" desc="Do not use std::move on objects declared with the const or const &amp; type" id="AUTOSAR-A18_9_3-a" origId="CODSTA-MCPP-53" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_4" desc="Do not subsequently use the argument to std::forward" id="AUTOSAR-A18_9_4-a" origId="BD-PB-SUBSEQFRWD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'register' storage class specifier shall not be used" id="AUTOSAR-A1_1_1-a" origId="MISRA-028" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="A copy assignment operator should be declared when a copy constructor is declared (and vice versa)" id="AUTOSAR-A1_1_1-b" origId="MRM-40_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor" id="AUTOSAR-A1_1_1-c" origId="MRM-40_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The C library shall not be used" id="AUTOSAR-A1_1_1-d" origId="CODSTA-CPP-59" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Prefer lambdas over std::bind, std::bind1st and std::bind2nd" id="AUTOSAR-A1_1_1-e" origId="CODSTA-MCPP-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'binder1st' and 'binder2nd' identifiers should not be used" id="AUTOSAR-A1_1_1-f" origId="CODSTA-MCPP-07_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Prefer to use std::unique_ptr instead of std::auto_ptr" id="AUTOSAR-A1_1_1-g" origId="CODSTA-MCPP-16_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'random_shuffle' identifier should not be used" id="AUTOSAR-A1_1_1-h" origId="CODSTA-MCPP-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Do not use the increment operator (++) on an operand of type 'bool'" id="AUTOSAR-A1_1_1-i" origId="CODSTA-MCPP-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'set_unexpected' identifier should not be used" id="AUTOSAR-A1_1_1-j" origId="CODSTA-MCPP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Do not use throw exception specifications" id="AUTOSAR-A1_1_1-k" origId="EXCEPT-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_1" desc="Do not store an already-owned pointer value in an unrelated smart pointer" id="AUTOSAR-A20_8_1-a" origId="BD-PB-PTRVALUE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_2" desc="Use smart pointers when passing a pointer to an object in a thread" id="AUTOSAR-A20_8_2-a" origId="CODSTA-MCPP-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_3" desc="Use smart pointers when passing a pointer to an object in a thread" id="AUTOSAR-A20_8_3-a" origId="CODSTA-MCPP-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_4" desc="Consider using 'std::unique_ptr' instead of 'std::shared_ptr' for local objects" id="AUTOSAR-A20_8_4-a" origId="CODSTA-MCPP-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_5" desc="'std::make_unique' shall be used to construct objects owned by 'std::unique_ptr'" id="AUTOSAR-A20_8_5-a" origId="CODSTA-MCPP-16_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_6" desc="Prefer 'std::make_shared' to the direct use of new" id="AUTOSAR-A20_8_6-a" origId="CODSTA-MCPP-16_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_7" desc="Avoid cyclic shared_ptr references" id="AUTOSAR-A20_8_7-a" origId="BD-RES-CSP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A21_8_1" desc="Do not pass incorrect values to ctype.h library functions" id="AUTOSAR-A21_8_1-a" origId="BD-API-CTYPE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A23_0_1" desc="Use const container calls when the result is immediately converted to a const iterator" id="AUTOSAR-A23_0_1-a" origId="CODSTA-MCPP-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A23_0_2" desc="Do not modify container while iterating over it" id="AUTOSAR-A23_0_2-a" origId="BD-CO-ITMOD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A23_0_2" desc="Use valid references, pointers, and iterators to reference elements of a basic_string" id="AUTOSAR-A23_0_2-b" origId="BD-CO-STRMOD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A25_1_1" desc="Make predicates const pure functions" id="AUTOSAR-A25_1_1-a" origId="STL-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A25_4_1" desc="For associative containers never use comparison function returning true for equal values" id="AUTOSAR-A25_4_1-a" origId="STL-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A26_5_1" desc="Do not use the rand() function for generating pseudorandom numbers" id="AUTOSAR-A26_5_1-a" origId="SECURITY-02_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A26_5_2" desc="Properly seed pseudorandom number generators" id="AUTOSAR-A26_5_2-a" origId="BD-SECURITY-RAND" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid calling functions printf/wprintf with only one argument other than string constant" id="AUTOSAR-A27_0_1-a" origId="SECURITY-05" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid tainted data in array indexes" id="AUTOSAR-A27_0_1-b" origId="BD-SECURITY-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Prevent buffer overflows from tainted data" id="AUTOSAR-A27_0_1-c" origId="BD-SECURITY-BUFWRITE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="AUTOSAR-A27_0_1-d" origId="BD-SECURITY-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid buffer read overflow from tainted data" id="AUTOSAR-A27_0_1-e" origId="BD-SECURITY-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid buffer write overflow from tainted data" id="AUTOSAR-A27_0_1-f" origId="BD-SECURITY-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Protect against command injection" id="AUTOSAR-A27_0_1-g" origId="BD-SECURITY-TDCMD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Exclude unsanitized user input from format strings" id="AUTOSAR-A27_0_1-h" origId="BD-SECURITY-TDINPUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Avoid overflow due to reading a not zero terminated string" id="AUTOSAR-A27_0_2-a" origId="BD-PB-OVERFNZT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Avoid overflow when writing to a buffer" id="AUTOSAR-A27_0_2-b" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Do not use the 'char' buffer to store input from 'std::cin'" id="AUTOSAR-A27_0_2-c" origId="SECURITY-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Prevent buffer overflows from tainted data" id="AUTOSAR-A27_0_2-e" origId="BD-SECURITY-BUFWRITE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Avoid buffer write overflow from tainted data" id="AUTOSAR-A27_0_2-f" origId="BD-SECURITY-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_3" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="AUTOSAR-A27_0_3-a" origId="BD-PB-STREAMINOUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="AUTOSAR-A27_0_4-a" origId="SECURITY-07" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="Avoid using unsafe string functions that do not check bounds" id="AUTOSAR-A27_0_4-b" origId="SECURITY-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="Do not use the 'char' buffer to store input from 'std::cin'" id="AUTOSAR-A27_0_4-c" origId="SECURITY-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="C-style strings shall not be used" id="AUTOSAR-A27_0_4-d" origId="PB-76" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="AUTOSAR-A2_10_1-a" origId="MISRA2004-5_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="AUTOSAR-A2_10_1-b" origId="MISRA2004-5_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in a local scope should not hide identifiers declared in a class scope" id="AUTOSAR-A2_10_1-c" origId="CODSTA-CPP-83" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope" id="AUTOSAR-A2_10_1-d" origId="CODSTA-CPP-84" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope" id="AUTOSAR-A2_10_1-e" origId="CODSTA-CPP-85" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_4" desc="The identifier name of a non-member object with static storage duration shall not be reused within a namespace" id="AUTOSAR-A2_10_4-a" origId="GLOBAL-REUSEDQUALGLOBVAR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_4" desc="The identifier name of a non-member static function shall not be reused within a namespace" id="AUTOSAR-A2_10_4-b" origId="GLOBAL-REUSEDQUALSTATFUN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_5" desc="No object or function identifier with static storage duration should be reused" id="AUTOSAR-A2_10_5-a" origId="MISRA2004-5_5_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_5" desc="No object or function identifier with static storage duration should be reused" id="AUTOSAR-A2_10_5-b" origId="MISRA2004-5_5_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_6" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="AUTOSAR-A2_10_6-a" origId="CODSTA-CPP-87_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_6" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="AUTOSAR-A2_10_6-b" origId="CODSTA-CPP-87_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_6" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="AUTOSAR-A2_10_6-c" origId="CODSTA-CPP-87_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_11_1" desc="Do not use the volatile keyword" id="AUTOSAR-A2_11_1-a" origId="MISRA-046_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_1" desc="Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used" id="AUTOSAR-A2_13_1-a" origId="CODSTA-CPP-60_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_2" desc="String literals with different encoding prefixes shall not be concatenated" id="AUTOSAR-A2_13_2-a" origId="PB-38_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_3" desc="Type wchar_t shall not be used" id="AUTOSAR-A2_13_3-a" origId="PORT-33" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="26;" authUrg="0;" cat="AUTOSAR-A2_13_4" desc="A string literal shall not be modified" id="AUTOSAR-A2_13_4-a" origId="PB-27" sev="2" total="26" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_5" desc="Hexadecimal constants will be represented using all uppercase letters" id="AUTOSAR-A2_13_5-a" origId="CODSTA-50" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_6" desc="Universal character names shall be used only inside character or string literals" id="AUTOSAR-A2_13_6-a" origId="NAMING-52" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_3_1" desc="Only use characters defined in ISO C standard" id="AUTOSAR-A2_3_1-a" origId="MISRA-005" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_5_1" desc="Trigraphs shall not be used" id="AUTOSAR-A2_5_1-a" origId="MISRA2004-4_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_5_1" desc="Trigraphs shall not be used" id="AUTOSAR-A2_5_1-b" origId="MISRA2004-4_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_5_2" desc="Do not use the following digraphs: &lt;%, %>, &lt;:, :>, %:, %:%:" id="AUTOSAR-A2_5_2-a" origId="CODSTA-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_7_1" desc="Line-splicing shall not be used in // comments" id="AUTOSAR-A2_7_1-a" origId="COMMENT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_7_2" desc="Sections of code should not be &quot;commented out&quot;" id="AUTOSAR-A2_7_2-a" origId="MISRA2004-2_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="AUTOSAR-A2_7_3" desc="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" id="AUTOSAR-A2_7_3-a" origId="COMMENT-14" sev="2" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="12;" authUrg="0;" cat="AUTOSAR-A2_7_3" desc="Function parameters and return type should be documented in a comment that precedes the function declaration" id="AUTOSAR-A2_7_3-b" origId="COMMENT-14_b" sev="2" total="12" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_8_1" desc="An include file for a class should have a file name of the form &lt;class name> + extension" id="AUTOSAR-A2_8_1-a" origId="NAMING-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_1" desc="Don't define entities with linkage in a header file" id="AUTOSAR-A3_1_1-a" origId="PFO-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_2" desc="Header files should have a file extension of: &quot;.h&quot;, &quot;.hpp&quot; or &quot;.hxx&quot;" id="AUTOSAR-A3_1_2-a" origId="NAMING-53" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_3" desc="Implementation files in C++ will always have a file name extension of &quot;.cpp&quot;" id="AUTOSAR-A3_1_3-a" origId="NAMING-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_4" desc="When an array is declared with external linkage, its size shall be stated explicitly or defined implicitly by initialisation" id="AUTOSAR-A3_1_4-a" origId="MISRA2004-8_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_5" desc="A function definition should not be placed in a class specification unless the function is intended to be inlined" id="AUTOSAR-A3_1_5-a" origId="CODSTA-CPP-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_6" desc="Trivial accessor and mutator functions should be inlined" id="AUTOSAR-A3_1_6-a" origId="OPT-23" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="AUTOSAR-A3_3_1" desc="Objects or functions with external linkage shall be declared in a header file" id="AUTOSAR-A3_3_1-a" origId="MISRA-023" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_3_1" desc="Don't define entities with linkage in a header file" id="AUTOSAR-A3_3_1-b" origId="PFO-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_3_2" desc="Static and thread-local objects shall be constant-initialized" id="AUTOSAR-A3_3_2-a" origId="CODSTA-MCPP-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="Do not use resources that have been freed" id="AUTOSAR-A3_8_1-a" origId="BD-RES-FREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="The address of an object with automatic storage shall not be returned from a function" id="AUTOSAR-A3_8_1-b" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="AUTOSAR-A3_8_1-c" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="Do not point to a wrapped object that has been freed" id="AUTOSAR-A3_8_1-d" origId="BD-PB-WRAPESC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="26;" authUrg="0;" cat="AUTOSAR-A3_9_1" desc="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" id="AUTOSAR-A3_9_1-b" origId="CODSTA-223" sev="2" total="26" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_10_1" desc="NULL shall not be used as an integer value" id="AUTOSAR-A4_10_1-a" origId="CODSTA-CPP-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_10_1" desc="Prefer 'nullptr' over 'NULL' or '0'(zero)" id="AUTOSAR-A4_10_1-b" origId="CODSTA-MCPP-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_5_1" desc="Expressions with type enum shall not be used as operands to built-in operators other than  [ ],  =, ==, !=, &lt;, &lt;=, >, >=, and the unary &amp; operator" id="AUTOSAR-A4_5_1-a" origId="CODSTA-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid implicit conversions from signed to unsigned type" id="AUTOSAR-A4_7_1-a" origId="PB-56" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="AUTOSAR-A4_7_1-b" origId="MISRA-043_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid conversions of constant values to a narrower type" id="AUTOSAR-A4_7_1-c" origId="PORT-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="AUTOSAR-A4_7_1-d" origId="MISRA-043" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid implicit conversions from wider to narrower floating type" id="AUTOSAR-A4_7_1-e" origId="MISRA2004-10_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid implicit conversions from floating to integral type" id="AUTOSAR-A4_7_1-f" origId="MISRA2004-10_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="AUTOSAR-A4_7_1-g" origId="MISRA-043_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid integer overflows" id="AUTOSAR-A4_7_1-h" origId="BD-PB-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of function calls" id="AUTOSAR-A5_0_1-a" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Do not use more than one volatile between two adjacent sequence points" id="AUTOSAR-A5_0_1-b" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="AUTOSAR-A5_0_1-c" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="AUTOSAR-A5_0_1-d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="AUTOSAR-A5_0_1-e" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of function arguments" id="AUTOSAR-A5_0_1-f" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="AUTOSAR-A5_0_1-g" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_2" desc="The condition of an if-statement and the condition of an iteration-statement shall have type bool" id="AUTOSAR-A5_0_2-a" origId="CODSTA-CPP-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_3" desc="The declaration of objects should contain no more than 2 levels of pointer indirection" id="AUTOSAR-A5_0_3-a" origId="MISRA2004-17_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_4" desc="Don't treat arrays polymorphically" id="AUTOSAR-A5_0_4-a" origId="PB-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_4" desc="A pointer to an array of derived class objects should not be converted to a base class pointer" id="AUTOSAR-A5_0_4-b" origId="PB-57" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_4" desc="Do not treat arrays polymorphically" id="AUTOSAR-A5_0_4-c" origId="BD-PB-POLARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_10_1" desc="A pointer to member virtual function shall only be tested for equality with null-pointer-constant" id="AUTOSAR-A5_10_1-a" origId="CODSTA-MCPP-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_16_1" desc="The conditional operator should not be used as a sub-expression" id="AUTOSAR-A5_16_1-a" origId="CODSTA-224" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_1" desc="Avoid magic numbers" id="AUTOSAR-A5_1_1-a" origId="CODSTA-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_2" desc="Avoid default capture modes" id="AUTOSAR-A5_1_2-a" origId="CODSTA-MCPP-15_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_3" desc="Include a parameter list in every lambda expression" id="AUTOSAR-A5_1_3-a" origId="CODSTA-MCPP-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_4" desc="Never return lambdas that capture local objects by reference" id="AUTOSAR-A5_1_4-a" origId="CODSTA-MCPP-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_4" desc="Never capture local objects from an outer lambda by reference" id="AUTOSAR-A5_1_4-b" origId="CODSTA-MCPP-17_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_4" desc="The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime" id="AUTOSAR-A5_1_4-c" origId="CODSTA-MCPP-17_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_6" desc="Return type of a non-void return type lambda expression should be explicitly specified" id="AUTOSAR-A5_1_6-a" origId="CODSTA-MCPP-45" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_7" desc="A lambda shall not be an operand to typeid" id="AUTOSAR-A5_1_7-a" origId="CODSTA-MCPP-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_8" desc="Lambda expressions should not be defined inside another lambda expression" id="AUTOSAR-A5_1_8-a" origId="CODSTA-MCPP-44" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_1" desc="Avoid dynamic_casts" id="AUTOSAR-A5_2_1-a" origId="CODSTA-CPP-35" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_2" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="AUTOSAR-A5_2_2-a" origId="CODSTA-CPP-66" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_3" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="AUTOSAR-A5_2_3-a" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_4" desc="Avoid using reinterpret_cast" id="AUTOSAR-A5_2_4-a" origId="CODSTA-CPP-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="Avoid accessing arrays out of bounds" id="AUTOSAR-A5_2_5-a" origId="BD-PB-ARRAY" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="Avoid accessing arrays and pointers out of bounds" id="AUTOSAR-A5_2_5-b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="AUTOSAR-A5_2_5-c" origId="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="Avoid tainted data in array indexes" id="AUTOSAR-A5_2_5-d" origId="BD-SECURITY-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_6" desc="Each operand of a logical '&amp;&amp;' or '||' shall be a postfix-expression" id="AUTOSAR-A5_2_6-a" origId="CODSTA-90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_3_1" desc="The operand of the 'typeid' operator shall not contain any expression that has side effects" id="AUTOSAR-A5_3_1-a" origId="CODSTA-CPP-104" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_3_1" desc="The operand of the 'typeid' operator shall not contain a function call that causes side effects" id="AUTOSAR-A5_3_1-b" origId="CODSTA-CPP-104_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="4;" authUrg="0;" cat="AUTOSAR-A5_3_2" desc="Avoid null pointer dereferencing" id="AUTOSAR-A5_3_2-a" origId="BD-PB-NP" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_3_3" desc="Do not delete objects with incomplete class at the point of deletion" id="AUTOSAR-A5_3_3-a" origId="PB-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_5_1" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="AUTOSAR-A5_5_1-a" origId="CODSTA-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_6_1" desc="Avoid division by zero" id="AUTOSAR-A5_6_1-a" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_2_1" desc="Copy assignment operators should not have side effects that could affect copying the object" id="AUTOSAR-A6_2_1-a" origId="MRM-56" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_2_1" desc="Move assignment operators should not have side effects that could affect moving the object" id="AUTOSAR-A6_2_1-b" origId="MRM-57" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_2_2" desc="Expression statements shall not be explicit calls to constructors of temporary objects only" id="AUTOSAR-A6_2_2-a" origId="PB-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_4_1" desc="Every switch statement will have at least two cases and a potential default" id="AUTOSAR-A6_4_1-a" origId="CODSTA-54" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_1" desc="A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" id="AUTOSAR-A6_5_1-a" origId="CODSTA-MCPP-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_2" desc="A for loop shall contain a single loop-counter which shall not have floating type" id="AUTOSAR-A6_5_2-a" origId="CODSTA-CPP-69" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_3" desc="Prefer while statements over do statements" id="AUTOSAR-A6_5_3-a" origId="CODSTA-18" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_4" desc="The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter" id="AUTOSAR-A6_5_4-a" origId="CODSTA-52" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_4" desc="The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop" id="AUTOSAR-A6_5_4-b" origId="CODSTA-53" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_6_1" desc="The goto statement shall not be used" id="AUTOSAR-A6_6_1-a" origId="MISRA2004-14_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="12;" authUrg="0;" cat="AUTOSAR-A7_1_1" desc="Declare parameters or local variable as const whenever possible" id="AUTOSAR-A7_1_1-a" origId="CODSTA-CPP-53" sev="2" total="12" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_2" desc="Use constexpr to declare const variables whenever possible" id="AUTOSAR-A7_1_2-a" origId="CODSTA-MCPP-11_a_cpp11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_2" desc="Use constexpr to declare functions whenever possible" id="AUTOSAR-A7_1_2-b" origId="CODSTA-MCPP-11_b_cpp11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_3" desc="CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name" id="AUTOSAR-A7_1_3-a" origId="FORMAT-47_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_4" desc="The 'register' storage class specifier shall not be used" id="AUTOSAR-A7_1_4-a" origId="MISRA-028" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_5" desc="Do not overuse 'auto' specifier" id="AUTOSAR-A7_1_5-a" origId="CODSTA-MCPP-40" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_6" desc="Prefer alias declarations to typedefs" id="AUTOSAR-A7_1_6-a" origId="CODSTA-MCPP-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_7" desc="Only one statement shall be allowed per line" id="AUTOSAR-A7_1_7-a" origId="FORMAT-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="AUTOSAR-A7_1_7" desc="Multiple variable declarations shall not be allowed on the same line" id="AUTOSAR-A7_1_7-b" origId="FORMAT-29" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="AUTOSAR-A7_1_7" desc="Each variable should be declared in a separate declaration statement" id="AUTOSAR-A7_1_7-c" origId="FORMAT-33" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_8" desc="Do not place type specifiers before non-type specifiers in a declaration" id="AUTOSAR-A7_1_8-a" origId="HICPP-7_1_3-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_9" desc="A class, structure, or enumeration will not be declared in the definition of its type" id="AUTOSAR-A7_1_9-a" origId="CODSTA-CPP-56" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_1" desc="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="AUTOSAR-A7_2_1-a" origId="PB-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_2" desc="Use an explicit enumeration base and ensure that it is large enough to store all enumerators" id="AUTOSAR-A7_2_2-a" origId="HICPP-7_2_1-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_3" desc="Prefer Scoped Enums to Unscoped Enums" id="AUTOSAR-A7_2_3-a" origId="CODSTA-MCPP-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_4" desc="In an enumerator list, the &quot;=&quot; construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised" id="AUTOSAR-A7_2_4-a" origId="MISRA2004-9_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="AUTOSAR-A7_2_5" desc="Enumeration types shall be used instead of integer types (and constants) as case labels" id="AUTOSAR-A7_2_5-a" origId="CODSTA-55" sev="4" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_3_1" desc="Write a using declaration to redeclare overloaded functions" id="AUTOSAR-A7_3_1-a" origId="OOP-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_4_1" desc="Do not use the asm declaration" id="AUTOSAR-A7_4_1-a" origId="HICPP-7_5_1-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_5_1" desc="A function shall not return a pointer or a reference to a parameter that is passed by const reference" id="AUTOSAR-A7_5_1-a" origId="PB-39_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_5_2" desc="Functions shall not call themselves, either directly or indirectly" id="AUTOSAR-A7_5_2-a" origId="MISRA2004-16_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_6_1" desc="Never return from functions that should not return" id="AUTOSAR-A7_6_1-a" origId="BD-PB-NORETURN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_2_1" desc="Use a trailing return type syntax if the return type is preceded by the 'typename' keyword" id="AUTOSAR-A8_2_1-a" origId="TEMPL-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_1" desc="Do not use functions with variable numbers of arguments" id="AUTOSAR-A8_4_1-a" origId="MISRA-069" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_10" desc="A parameter shall be passed by reference if it can't be NULL" id="AUTOSAR-A8_4_10-a" origId="BD-PB-REFPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_11" desc="A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="AUTOSAR-A8_4_11-a" origId="CODSTA-MCPP-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="Do not pass std::unique_ptr by const reference" id="AUTOSAR-A8_4_12-a" origId="HICPP-8_2_4-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="AUTOSAR-A8_4_12-b" origId="CODSTA-MCPP-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object" id="AUTOSAR-A8_4_12-c" origId="CODSTA-MCPP-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr'" id="AUTOSAR-A8_4_12-d" origId="CODSTA-MCPP-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_13" desc="A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="AUTOSAR-A8_4_13-a" origId="CODSTA-MCPP-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_13" desc="A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object" id="AUTOSAR-A8_4_13-b" origId="CODSTA-MCPP-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_13" desc="Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr'" id="AUTOSAR-A8_4_13-c" origId="CODSTA-MCPP-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_2" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="AUTOSAR-A8_4_2-a" origId="MISRA2004-16_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_3" desc="Pass objects by reference instead of by value" id="AUTOSAR-A8_4_3-a" origId="OPT-14" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_3" desc="Declare reference parameters as const references whenever possible" id="AUTOSAR-A8_4_3-b" origId="CODSTA-CPP-43" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_4" desc="Multiple output values from a function should be returned as a struct or tuple" id="AUTOSAR-A8_4_4-a" origId="CODSTA-MCPP-48" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_5" desc="Use std::move() on rvalue references and std::forward() on forwarding references" id="AUTOSAR-A8_4_5-a" origId="CODSTA-MCPP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_6" desc="Use std::move() on rvalue references and std::forward() on forwarding references" id="AUTOSAR-A8_4_6-a" origId="CODSTA-MCPP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_7" desc="Pass built-in-types by value unless you are modifying them" id="AUTOSAR-A8_4_7-a" origId="CODSTA-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_7" desc="Pass small objects with a trivial copy constructor by value" id="AUTOSAR-A8_4_7-b" origId="HICPP-8_2_3-b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_8" desc="Output parameters shall not be used" id="AUTOSAR-A8_4_8-a" origId="CODSTA-CPP-103" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_9" desc="Declare reference parameters as const references whenever possible" id="AUTOSAR-A8_4_9-a" origId="CODSTA-CPP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_0" desc="Avoid use before initialization" id="AUTOSAR-A8_5_0-a" origId="BD-PB-NOTINIT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_1" desc="List members in an initialization list in the order in which they are declared" id="AUTOSAR-A8_5_1-a" origId="INIT-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_2" desc="Braced-initialization {}, without equals sign, shall be used for variable initialization" id="AUTOSAR-A8_5_2-a" origId="CODSTA-MCPP-38" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_3" desc="A variable of type auto shall not be initialized using '{}' or '={}' braced-initialization" id="AUTOSAR-A8_5_3-a" origId="CODSTA-MCPP-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_4" desc="Avoid overloading constructors with std::initializer_list" id="AUTOSAR-A8_5_4-a" origId="CODSTA-MCPP-47" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_3_1" desc="Public member functions shall not return non-const handles to private/protected class-data" id="AUTOSAR-A9_3_1-a" origId="OOP-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_3_1" desc="Protected member function shall not return non-const handles to private class-data" id="AUTOSAR-A9_3_1-b" origId="OOP-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_5_1" desc="Unions shall not be used" id="AUTOSAR-A9_5_1-a" origId="MISRA2004-18_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_5_1" desc="Unions shall not be used" id="AUTOSAR-A9_5_1-b" origId="MISRA2004-18_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_6_1" desc="Bit fields shall only be defined to be of type unsigned int or signed int" id="AUTOSAR-A9_6_1-a" origId="MISRA2004-6_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_6_2" desc="Do not declare member variables as bit-fields" id="AUTOSAR-A9_6_2-a" origId="CODSTA-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="AUTOSAR-M0_1_1-a" origId="MISRA2004-14_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="AUTOSAR-M0_1_1-b" origId="MISRA2004-14_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in &quot;else&quot; block" id="AUTOSAR-M0_1_1-c" origId="MISRA2004-14_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="AUTOSAR-M0_1_1-d" origId="MISRA2004-14_1_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="AUTOSAR-M0_1_1-e" origId="MISRA2004-14_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in 'for' loop" id="AUTOSAR-M0_1_1-f" origId="MISRA2004-14_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in switch statement" id="AUTOSAR-M0_1_1-g" origId="MISRA2004-14_1_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="1;" authUrg="0;" cat="AUTOSAR-M0_1_10" desc="Every defined function with external linkage shall be used at least once" id="AUTOSAR-M0_1_10-a" origId="GLOBAL-UNUSEDFUNC" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_10" desc="Every defined function with internal linkage shall be used at least once" id="AUTOSAR-M0_1_10-b" origId="OPT-30" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-a" origId="MISRA2004-13_7_ab" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-aa" origId="MISRA2004-13_7_aj" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-ab" origId="MISRA2004-13_7_k" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Avoid conditions that always evaluate to the same value" id="AUTOSAR-M0_1_2-ac" origId="BD-PB-CC" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-b" origId="MISRA2004-13_7_v" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-c" origId="MISRA2004-13_7_z" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-d" origId="MISRA2004-13_7_n" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-e" origId="MISRA2004-13_7_s" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-f" origId="MISRA2004-13_7_t" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-g" origId="MISRA2004-13_7_u" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-h" origId="MISRA2004-13_7_j" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-i" origId="MISRA2004-13_7_l" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-j" origId="MISRA2004-13_7_m" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-k" origId="MISRA2004-13_7_w" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-l" origId="MISRA2004-13_7_x" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-m" origId="MISRA2004-13_7_y" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-n" origId="MISRA2004-13_7_ac" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-o" origId="MISRA2004-13_7_ad" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-p" origId="MISRA2004-13_7_ae" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-q" origId="MISRA2004-13_7_af" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-r" origId="MISRA2004-13_7_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-s" origId="MISRA2004-13_7_aa" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-t" origId="MISRA2004-13_7_ak" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-u" origId="MISRA2004-13_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-v" origId="MISRA2004-13_7_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-w" origId="MISRA2004-13_7_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-x" origId="MISRA2004-13_7_ag" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-y" origId="MISRA2004-13_7_ah" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-z" origId="MISRA2004-13_7_ai" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="AUTOSAR-M0_1_3" desc="Avoid unused local variables" id="AUTOSAR-M0_1_3-a" origId="OPT-02" sev="2" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="AUTOSAR-M0_1_3" desc="Avoid unnecessary local variables" id="AUTOSAR-M0_1_3-b" origId="OPT-06" sev="2" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_3" desc="Avoid unused private member variables" id="AUTOSAR-M0_1_3-c" origId="OPT-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_4" desc="A project shall not contain non-volatile POD variables having only one use" id="AUTOSAR-M0_1_4-a" origId="GLOBAL-ONEUSEVAR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_8" desc="All non-empty functions with void return type shall have external side effect(s)" id="AUTOSAR-M0_1_8-a" origId="OPT-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M0_1_8" desc="Functions with void return type shall not be empty" id="AUTOSAR-M0_1_8-b" origId="OPT-32_b" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_9" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="AUTOSAR-M0_1_9-a" origId="MISRA2004-14_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_2_1" desc="An object shall not be assigned to an overlapping object" id="AUTOSAR-M0_2_1-a" origId="MISRA2004-18_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_2_1" desc="An object shall not be assigned to an overlapping object" id="AUTOSAR-M0_2_1-b" origId="PB-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Do not subtract two pointers that do not address elements of the same array" id="AUTOSAR-M0_3_1-a" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid overflow when writing to a buffer" id="AUTOSAR-M0_3_1-b" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Do not compare two unrelated pointers" id="AUTOSAR-M0_3_1-c" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid accessing arrays out of bounds" id="AUTOSAR-M0_3_1-d" origId="BD-PB-ARRAY" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid division by zero" id="AUTOSAR-M0_3_1-e" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="4;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid null pointer dereferencing" id="AUTOSAR-M0_3_1-f" origId="BD-PB-NP" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid overflow due to reading a not zero terminated string" id="AUTOSAR-M0_3_1-g" origId="BD-PB-OVERFNZT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid buffer overflow due to defining incorrect format limits" id="AUTOSAR-M0_3_1-h" origId="BD-PB-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid overflow when reading from a buffer" id="AUTOSAR-M0_3_1-i" origId="BD-PB-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="2;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Do not check for null after dereferencing" id="AUTOSAR-M0_3_1-j" origId="BD-PB-DEREF" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="33;" authUrg="0;" cat="AUTOSAR-M0_3_2" desc="If a function returns error information, then that error information shall be tested" id="AUTOSAR-M0_3_2-a" origId="MISRA2004-16_10" sev="2" total="33" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_4_2" desc="Use of floating-point arithmetic shall be documented" id="AUTOSAR-M0_4_2-a" origId="COMMENT-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_1_1" desc="Classes should not be derived from virtual bases" id="AUTOSAR-M10_1_1-a" origId="OOP-47" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_1_2" desc="A base class shall only be declared virtual if it is used in a diamond hierarchy" id="AUTOSAR-M10_1_2-a" origId="GLOBAL-VIRTBASECLASS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_1_3" desc="A base class shall not be both virtual and non-virtual in the same hierarchy" id="AUTOSAR-M10_1_3-a" origId="OOP-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_2_1" desc="All accessible entity names within a multiple inheritance hierarchy should be unique" id="AUTOSAR-M10_2_1-a" origId="CODSTA-CPP-92" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_3_3" desc="A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" id="AUTOSAR-M10_3_3-a" origId="OOP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M11_0_1" desc="Member data in non-POD types shall be private" id="AUTOSAR-M11_0_1-a" origId="OOP-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M12_1_1" desc="Do not use dynamic type of an object under construction" id="AUTOSAR-M12_1_1-a" origId="BD-PB-VCTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M14_5_3" desc="A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" id="AUTOSAR-M14_5_3-a" origId="TEMPL-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M14_6_1" desc="In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" id="AUTOSAR-M14_6_1-a" origId="TEMPL-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_0_3" desc="Control shall not be transferred into a try or catch block using a goto or a switch statement" id="AUTOSAR-M15_0_3-a" origId="EXCEPT-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_1_1" desc="The assignment-expression of a throw statement shall not itself cause an exception to be thrown" id="AUTOSAR-M15_1_1-a" origId="EXCEPT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_1_2" desc="NULL shall not be thrown explicitly" id="AUTOSAR-M15_1_2-a" origId="EXCEPT-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_1_3" desc="An empty throw (throw;) shall only be used in the compound-statement of a catch handler" id="AUTOSAR-M15_1_3-a" origId="EXCEPT-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_1" desc="Exceptions shall be raised only after start-up and before termination of the program" id="AUTOSAR-M15_3_1-a" origId="EXCEPT-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_3" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="AUTOSAR-M15_3_3-a" origId="EXCEPT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_4" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="AUTOSAR-M15_3_4-a" origId="EXCEPT-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_4" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-M15_3_4-b" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_6" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="AUTOSAR-M15_3_6-a" origId="EXCEPT-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_7" desc="Where multiple handlers are provided in a single 'try-catch' statement or 'function-try-block', any ellipsis (catch-all) handler shall occur last" id="AUTOSAR-M15_3_7-a" origId="EXCEPT-24" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_1" desc="#include statements in a file should only be preceded by other preprocessor directives or comments" id="AUTOSAR-M16_0_1-a" origId="MISRA2004-19_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_2" desc="Macros shall not be #define'd or #undef'd within a block" id="AUTOSAR-M16_0_2-a" origId="MISRA2004-19_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_5" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="AUTOSAR-M16_0_5-a" origId="MISRA2004-19_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_6" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="AUTOSAR-M16_0_6-a" origId="MISRA2004-19_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_7" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="AUTOSAR-M16_0_7-a" origId="MISRA2004-19_11_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_8" desc="Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" id="AUTOSAR-M16_0_8-a" origId="MISRA2004-19_16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_1_1" desc="The defined preprocessor operator shall only be used in one of the two standard forms" id="AUTOSAR-M16_1_1-a" origId="MISRA2004-19_14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_1_2" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="AUTOSAR-M16_1_2-a" origId="MISRA2004-19_17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_2_3" desc="Use multiple include guards" id="AUTOSAR-M16_2_3-a" origId="PFO-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_3_1" desc="There shall be at most one occurrence of the # or ## preprocessor operators in a single macro definition" id="AUTOSAR-M16_3_1-a" origId="MISRA2004-19_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_3_2" desc="The # and ## preprocessor operators should not be used" id="AUTOSAR-M16_3_2-a" origId="MISRA2004-19_13" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M17_0_2" desc="The names of standard library macros and objects shall not be reused" id="AUTOSAR-M17_0_2-a" origId="CODSTA-92" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M17_0_3" desc="The names of standard library functions shall not be overridden" id="AUTOSAR-M17_0_3-a" origId="CODSTA-93" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M17_0_5" desc="The setjmp macro and the longjmp function shall not be used" id="AUTOSAR-M17_0_5-a" origId="MISRA2004-20_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-M18_0_3-a" origId="PB-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-M18_0_3-b" origId="PB-75_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-M18_0_3-c" origId="SECURITY-48_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-M18_0_3-d" origId="SECURITY-52" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_4" desc="The time handling functions of library time.h shall not be used" id="AUTOSAR-M18_0_4-a" origId="MISRA2004-20_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_5" desc="The unbounded functions of library &lt;cstring> shall not be used" id="AUTOSAR-M18_0_5-a" origId="PB-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_2_1" desc="The macro offsetof, in library stddef.h, shall not be used" id="AUTOSAR-M18_2_1-a" origId="MISRA2004-20_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_7_1" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="AUTOSAR-M18_7_1-a" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_7_1" desc="The standard header file &lt;signal.h> shall not be used" id="AUTOSAR-M18_7_1-b" origId="MISRA2004-20_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M19_3_1" desc="The error indicator 'errno' shall not be used" id="AUTOSAR-M19_3_1-a" origId="MISRA2004-20_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="AUTOSAR-M27_0_1" desc="The input/output library stdio.h shall not be used" id="AUTOSAR-M27_0_1-a" origId="MISRA2004-20_9" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_10_1" desc="Different identifiers shall be typographically unambiguous" id="AUTOSAR-M2_10_1-a" origId="NAMING-47" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_13_2" desc="Octal constants (other than zero) shall not be used" id="AUTOSAR-M2_13_2-a" origId="MISRA2004-7_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_13_2" desc="Octal escape sequences shall not be used" id="AUTOSAR-M2_13_2-b" origId="MISRA2004-7_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_13_3" desc="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" id="AUTOSAR-M2_13_3-a" origId="CODSTA-68" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_13_4" desc="Literal suffixes shall use uppercase rather than lowercase letters" id="AUTOSAR-M2_13_4-a" origId="CODSTA-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_7_1" desc="The character sequence /* shall not be used within a C-style comment" id="AUTOSAR-M2_7_1-a" origId="MISRA2004-2_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_1_2" desc="Always declare functions at file scope" id="AUTOSAR-M3_1_2-a" origId="MISRA2004-8_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_1" desc="All declarations of an object or function shall have compatible types" id="AUTOSAR-M3_2_1-a" origId="GLOBAL-COMPATDECLS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_2" desc="The One Definition Rule shall not be violated" id="AUTOSAR-M3_2_2-a" origId="GLOBAL-ONEDEFRULE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_3" desc="A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="AUTOSAR-M3_2_3-a" origId="GLOBAL-ONEFILEDECL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_4" desc="An identifier with external linkage shall have exactly one external definition" id="AUTOSAR-M3_2_4-a" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_3_2" desc="If a function has internal linkage then all re-declarations shall include the 'static' storage class specifier" id="AUTOSAR-M3_3_2-a" origId="CODSTA-81" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M3_4_1" desc="Declare variables as locally as possible" id="AUTOSAR-M3_4_1-a" origId="OPT-01" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_4_1" desc="Objects shall be defined at block scope if they are only accessed from within a single function" id="AUTOSAR-M3_4_1-b" origId="MISRA2004-8_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_9_1" desc="The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" id="AUTOSAR-M3_9_1-a" origId="CODSTA-67" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_9_3" desc="The underlying bit representations of floating-point values shall not be used" id="AUTOSAR-M3_9_3-a" origId="MISRA2004-12_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M4_10_1" desc="NULL shall not be used as an integer value" id="AUTOSAR-M4_10_1-a" origId="CODSTA-CPP-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M4_10_2" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="AUTOSAR-M4_10_2-a" origId="CODSTA-CPP-63" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M4_5_1" desc="Expressions that are effectively Boolean should not be used as operands to operators other than (&amp;&amp;, ||, !, =, ==, !=, ?:)" id="AUTOSAR-M4_5_1-a" origId="MISRA2004-12_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M4_5_3" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary &amp; operator" id="AUTOSAR-M4_5_3-a" origId="CODSTA-69" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_10" desc="If the bitwise operators ~ and &lt;&lt; are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" id="AUTOSAR-M5_0_10-a" origId="MISRA2004-10_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_11" desc="The plain char type shall be used only for the storage and use of character values" id="AUTOSAR-M5_0_11-a" origId="MISRA2004-6_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_12" desc="signed and unsigned char type shall be used only for the storage and use of numeric values" id="AUTOSAR-M5_0_12-a" origId="MISRA2004-6_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_14" desc="The first operand of a conditional-operator shall have type bool" id="AUTOSAR-M5_0_14-a" origId="CODSTA-CPP-65" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_15" desc="Array indexing shall be the only allowed form of pointer arithmetic" id="AUTOSAR-M5_0_15-a" origId="MISRA2004-17_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-M5_0_16" desc="Avoid accessing arrays out of bounds" id="AUTOSAR-M5_0_16-a" origId="BD-PB-ARRAY" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_16" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="AUTOSAR-M5_0_16-b" origId="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_17" desc="Do not subtract two pointers that do not address elements of the same array" id="AUTOSAR-M5_0_17-a" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_18" desc="Do not compare two unrelated pointers" id="AUTOSAR-M5_0_18-a" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Use parenthesis for the right-hand operand of an assignment operator when it contains an assignment expression" id="AUTOSAR-M5_0_2-a" origId="MISRA2004-12_1_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="AUTOSAR-M5_0_2-b" origId="MISRA2004-12_1_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="No parentheses are required for the operand of a unary operator" id="AUTOSAR-M5_0_2-c" origId="MISRA2004-12_1_c" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="AUTOSAR-M5_0_2-d" origId="MISRA2004-12_1_d" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Use parentheses unless all operators in the expression are the same" id="AUTOSAR-M5_0_2-e" origId="MISRA2004-12_1_e" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="AUTOSAR-M5_0_2-f" origId="MISRA2004-12_1_f" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_20" desc="Non-constant operands to a binary bitwise operator shall have the same underlying type" id="AUTOSAR-M5_0_20-a" origId="CODSTA-66" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_21" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="AUTOSAR-M5_0_21-a" origId="CODSTA-63" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_3" desc="Avoid implicit conversions of complex expressions" id="AUTOSAR-M5_0_3-a" origId="MISRA2004-10_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_3" desc="Avoid implicit conversions of complex expressions" id="AUTOSAR-M5_0_3-b" origId="MISRA2004-10_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_3" desc="Avoid implicit conversions of complex expressions" id="AUTOSAR-M5_0_3-c" origId="MISRA2004-10_1_i" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="AUTOSAR-M5_0_4" desc="Avoid implicit conversions between signed and unsigned integer types" id="AUTOSAR-M5_0_4-a" origId="MISRA2004-10_1_a" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_5" desc="There shall be no implicit conversions from integral to floating type" id="AUTOSAR-M5_0_5-a" origId="MISRA2004-10_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_5" desc="Avoid implicit conversions from floating to integral type" id="AUTOSAR-M5_0_5-b" origId="MISRA2004-10_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_6" desc="Avoid implicit integral conversions from a wider to a narrower type" id="AUTOSAR-M5_0_6-a" origId="CODSTA-222" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_6" desc="Avoid implicit conversions from wider to narrower floating type" id="AUTOSAR-M5_0_6-b" origId="MISRA2004-10_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_6" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="AUTOSAR-M5_0_6-c" origId="MISRA2004-10_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_7" desc="The value of a complex expression of floating type should not be cast to an integer type" id="AUTOSAR-M5_0_7-a" origId="CODSTA-198_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_7" desc="The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" id="AUTOSAR-M5_0_7-b" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_8" desc="The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" id="AUTOSAR-M5_0_8-a" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_8" desc="The value of a complex expression of floating type should not be cast to a wider floating type" id="AUTOSAR-M5_0_8-b" origId="CODSTA-198" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_9" desc="The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" id="AUTOSAR-M5_0_9-a" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_14_1" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="AUTOSAR-M5_14_1-a" origId="MISRA2004-12_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_17_1" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="AUTOSAR-M5_17_1-a" origId="CODSTA-CPP-91" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_18_1" desc="The comma operator shall not be used" id="AUTOSAR-M5_18_1-a" origId="MISRA2004-12_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_19_1" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="AUTOSAR-M5_19_1-a" origId="PB-66_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_19_1" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="AUTOSAR-M5_19_1-b" origId="PB-66_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M5_2_10" desc="The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" id="AUTOSAR-M5_2_10-a" origId="MISRA2004-12_13" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_11" desc="Avoid overloading comma operator &quot;,&quot;" id="AUTOSAR-M5_2_11-a" origId="CODSTA-CPP-80" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_11" desc="Avoid overloading logical operators AND, OR (&amp;&amp;, ||)" id="AUTOSAR-M5_2_11-b" origId="CODSTA-CPP-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_12" desc="An identifier with array type passed as a function argument shall not decay to a pointer" id="AUTOSAR-M5_2_12-a" origId="PB-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_2" desc="A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" id="AUTOSAR-M5_2_2-a" origId="OOP-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_3" desc="Casts from a base class to a derived class should not be performed on polymorphic types" id="AUTOSAR-M5_2_3-a" origId="OOP-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_6" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="AUTOSAR-M5_2_6-a" origId="CODSTA-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-M5_2_8" desc="An object with integer type or pointer to void type shall not be converted to an object with pointer type" id="AUTOSAR-M5_2_8-a" origId="CODSTA-65" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_9" desc="A cast should not convert a pointer type to an integral type" id="AUTOSAR-M5_2_9-a" origId="MISRA2004-11_3_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_1" desc="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" id="AUTOSAR-M5_3_1-a" origId="CODSTA-CPP-67" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_2" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="AUTOSAR-M5_3_2-a" origId="MISRA2004-12_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_3" desc="The unary &amp; operator shall not be overloaded" id="AUTOSAR-M5_3_3-a" origId="CODSTA-CPP-68" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_4" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="AUTOSAR-M5_3_4-a" origId="MISRA2004-12_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_4" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="AUTOSAR-M5_3_4-b" origId="MISRA2004-12_3_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_4" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="AUTOSAR-M5_3_4-c" origId="MISRA2004-12_3_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_8_1" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="AUTOSAR-M5_8_1-a" origId="MISRA2004-12_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_2_1" desc="Assignment operators shall not be used in expressions that yield a Boolean value" id="AUTOSAR-M6_2_1-a" origId="MISRA2004-13_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_2_2" desc="Floating-point expressions shall not be tested for equality or inequality" id="AUTOSAR-M6_2_2-a" origId="MISRA2004-13_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_2_3" desc="A null statement shall occur on a line by itself or be followed by a comment" id="AUTOSAR-M6_2_3-a" origId="MISRA2004-14_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_3_1" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="AUTOSAR-M6_3_1-a" origId="MISRA2004-14_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_1" desc="'if' and 'else' should be followed by a compound statement" id="AUTOSAR-M6_4_1-a" origId="MISRA2004-14_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_2" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="AUTOSAR-M6_4_2-a" origId="MISRA2004-14_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="AUTOSAR-M6_4_3-a" origId="CODSTA-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="The final clause of a switch statement shall be the default-clause unless all enumeration values are tested" id="AUTOSAR-M6_4_3-b" origId="CODSTA-61" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="AUTOSAR-M6_4_3-c" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="Every switch statement shall have at least one case clause" id="AUTOSAR-M6_4_3-d" origId="MISRA2004-15_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="A switch expression shall not represent a value that is effectively Boolean" id="AUTOSAR-M6_4_3-e" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_4" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="AUTOSAR-M6_4_4-a" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_5" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="AUTOSAR-M6_4_5-a" origId="CODSTA-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_6" desc="The final clause of a switch statement shall be the default-clause unless all enumeration values are tested" id="AUTOSAR-M6_4_6-a" origId="CODSTA-61" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_7" desc="A switch expression shall not represent a value that is effectively Boolean" id="AUTOSAR-M6_4_7-a" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_2" desc="If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" id="AUTOSAR-M6_5_2-a" origId="CODSTA-CPP-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_3" desc="Do not modify for loop counter within a body of the loop" id="AUTOSAR-M6_5_3-a" origId="MISRA2004-13_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_4" desc="The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop" id="AUTOSAR-M6_5_4-a" origId="CODSTA-CPP-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_5" desc="A loop-control-variable other than the loop-counter shall not be modified within condition or expression" id="AUTOSAR-M6_5_5-a" origId="CODSTA-CPP-72" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_6" desc="A loop-control-variable other than the loop-counter which is modified in statement shall have type bool" id="AUTOSAR-M6_5_6-a" origId="CODSTA-CPP-73" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_6_1" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="AUTOSAR-M6_6_1-a" origId="CODSTA-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_6_2" desc="The goto statement shall jump to a label declared later in the same function body" id="AUTOSAR-M6_6_2-a" origId="CODSTA-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_6_3" desc="The continue statement shall only be used within a well formed for loop" id="AUTOSAR-M6_6_3-a" origId="CODSTA-80" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_1_2" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="AUTOSAR-M7_1_2-a" origId="MISRA2004-16_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M7_1_2" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="AUTOSAR-M7_1_2-b" origId="MISRA2004-16_7" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_1_2" desc="Declare reference parameters as const references whenever possible" id="AUTOSAR-M7_1_2-c" origId="CODSTA-CPP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_3_1" desc="The global namespace shall only contain main() and namespace declarations" id="AUTOSAR-M7_3_1-a" origId="CODSTA-CPP-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_3_2" desc="The identifier main shall not be used for a function other than the global function main" id="AUTOSAR-M7_3_2-a" origId="CODSTA-76" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_3_3" desc="There shall be no unnamed namespaces in header files" id="AUTOSAR-M7_3_3-a" origId="CODSTA-CPP-74" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_3_4" desc="using-directives shall not be used" id="AUTOSAR-M7_3_4-a" origId="CODSTA-CPP-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_3_6" desc="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" id="AUTOSAR-M7_3_6-a" origId="CODSTA-CPP-90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_4_1" desc="All usage of assembler shall be documented" id="AUTOSAR-M7_4_1-a" origId="COMMENT-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_4_2" desc="Assembler instructions shall only be introduced using the asm declaration" id="AUTOSAR-M7_4_2-a" origId="CODSTA-73" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_4_3" desc="Assembly language shall be encapsulated and isolated in C/C++ functions" id="AUTOSAR-M7_4_3-a" origId="CODSTA-114" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_5_1" desc="The address of an object with automatic storage shall not be returned from a function" id="AUTOSAR-M7_5_1-a" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_5_2" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="AUTOSAR-M7_5_2-a" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="AUTOSAR-M8_0_1" desc="Each variable should be declared in a separate declaration statement" id="AUTOSAR-M8_0_1-a" origId="FORMAT-33" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_3_1" desc="Do not redefine an inherited virtual function with a different default parameter value" id="AUTOSAR-M8_3_1-a" origId="OOP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_4_2" desc="The identifiers used in the declaration and definition of a function shall be identical" id="AUTOSAR-M8_4_2-a" origId="MISRA2004-16_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_4_4" desc="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" id="AUTOSAR-M8_4_4-a" origId="MISRA2004-16_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_5_2" desc="The initializer for an aggregate or union shall be enclosed in braces" id="AUTOSAR-M8_5_2-a" origId="INIT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_5_2" desc="Arrays shall not be partially initialized" id="AUTOSAR-M8_5_2-b" origId="MISRA2004-9_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_5_2" desc="The non-zero initialization of structures requires an explicit initializer for each element" id="AUTOSAR-M8_5_2-c" origId="MISRA2004-9_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M9_3_1" desc="Const member functions shall not return non-const pointers or references to class-data" id="AUTOSAR-M9_3_1-a" origId="CODSTA-CPP-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M9_3_3" desc="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="AUTOSAR-M9_3_3-a" origId="CODSTA-CPP-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M9_6_4" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="AUTOSAR-M9_6_4-a" origId="CODSTA-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not pass incorrect values to library functions" id="BD-API-BADPARAM" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not pass negative values to functions expecting non-negative arguments" id="BD-API-NEGPARAM" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not pass incorrect values to ctype.h library functions" id="BD-API-CTYPE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not check for a non-negative value after passing as a non-negative argument" id="BD-API-REVNEGPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="The size_t argument passed to any function in string.h shall have an appropriate value" id="BD-API-STRSIZE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Validate values passed to library functions" id="BD-API-VALPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not access iterator out of range" id="BD-CO-ITOUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Use valid references, pointers, and iterators to reference elements of a basic_string" id="BD-CO-STRMOD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not pass empty container iterators to std algorithms as destinations" id="BD-CO-EMPCON" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not compare iterators from different containers" id="BD-CO-ITINVCOMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not modify container while iterating over it" id="BD-CO-ITMOD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-MISC" desc="Always close transactions" id="BD-MISC-TRANS" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-MISC" desc="Prevent calling unsafe functions (custom rule)" id="BD-MISC-DC" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Always catch exceptions" id="BD-PB-EXCEPT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not modify string literals" id="BD-PB-MODSTR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid use before initialization" id="BD-PB-NOTINIT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="4;" authUrg="0;" cat="BD-PB" desc="Avoid null pointer dereferencing" id="BD-PB-NP" sev="1" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid buffer overflow due to defining incorrect format limits" id="BD-PB-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow due to reading a not zero terminated string" id="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow when reading from a buffer" id="BD-PB-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow when writing to a buffer" id="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overwriting method parameters" id="BD-PB-POVR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not point to a wrapped object that has been freed" id="BD-PB-WRAPESC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid division by zero" id="BD-PB-ZERO" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-PB" desc="Avoid accessing arrays out of bounds" id="BD-PB-ARRAY" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" id="BD-PB-ARRPTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid incorrect shift operations" id="BD-PB-BADSHIFT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Use the correct byte ordering when transferring data between systems" id="BD-PB-BYTEORD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-PB" desc="Avoid conditions that always evaluate to the same value" id="BD-PB-CC" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Consistently check the returned value of non-void functions" id="BD-PB-CHECKRET" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-PB" desc="Always check the returned value of non-void function" id="BD-PB-CHECKRETGEN" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="2;" authUrg="0;" cat="BD-PB" desc="Do not check for null after dereferencing" id="BD-PB-DEREF" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not modify the alignment of objects by calling realloc()" id="BD-PB-DNMPTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="The macro EOF should be compared with the unmodified return value from the Standard Library function" id="BD-PB-EOFCOMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly use errno value" id="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define exit handlers" id="BD-PB-EXITHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Reset strings on fgets() or fgetws() failure" id="BD-PB-FGETS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Only use values for fsetpos() that are returned from fgetpos()" id="BD-PB-FSETPOS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid infinite recursion" id="BD-PB-INFREC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not rely on an environment pointer following an operation that may invalidate it" id="BD-PB-INVENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="BD-PB-INVRET" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="The Standard Library function memcmp shall not be used to compare null terminated strings" id="BD-PB-MCCSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid calls to memory-setting functions that can be optimized out by the compiler" id="BD-PB-MEMOPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define new handlers" id="BD-PB-NEWHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid throwing exceptions from functions that are declared not to throw" id="BD-PB-NOEXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Declare non-returning functions with the attribute that specifies that they do not return" id="BD-PB-NORETDECL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Never return from functions that should not return" id="BD-PB-NORETURN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid accessing arrays and pointers out of bounds" id="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="An object shall not be assigned or copied to an overlapping object" id="BD-PB-OVERLAP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not treat arrays polymorphically" id="BD-PB-POLARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not compare two unrelated pointers" id="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not subtract two pointers that do not address elements of the same array" id="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not store an already-owned pointer value in an unrelated smart pointer" id="BD-PB-PTRVALUE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not call putenv() with a pointer to an automatic variable as the argument" id="BD-PB-PUTENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define signal handlers" id="BD-PB-SIGHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not return from a computational exception signal handler" id="BD-PB-SIGRETURN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="BD-PB-STREAMINOUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not subsequently use the argument to std::forward" id="BD-PB-SUBSEQFRWD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not rely on the value of a moved-from object" id="BD-PB-SUBSEQMOVE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid switch with unreachable branches" id="BD-PB-SWITCH" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define terminate handlers" id="BD-PB-TERMHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define unexpected handlers" id="BD-PB-UNEXPHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not use dynamic type of an object under construction" id="BD-PB-VCTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not use dynamic type of an object under destruction" id="BD-PB-VDTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Ensure the size of the variable length array is in valid range" id="BD-PB-VLASIZE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="The same file shall not be opened for read and write access at the same time on different streams" id="BD-PB-WRRDSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid writing to a stream which has been opened as read only" id="BD-PB-WRROS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid integer overflows" id="BD-PB-INTOVERF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Ensure strings are zero terminated" id="BD-PB-NZTS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Ensure the output buffer is large enough when using path manipulation functions" id="BD-PB-PATHBUF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="A parameter shall be passed by reference if it can't be NULL" id="BD-PB-REFPARAM" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Always throw the created std::exception object" id="BD-PB-STDEXC" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Suspicious setting of stream flags" id="BD-PB-STREAMFLAGS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Restore stream format" id="BD-PB-STREAMFMT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Use macros for variable arguments correctly" id="BD-PB-VARARGS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="5;" authUrg="0;" cat="BD-PB" desc="Avoid unused values" id="BD-PB-VOVR" sev="3" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid unreachable methods" id="BD-PB-UCMETH" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Guarantee that container indices are within the valid range" id="BD-PB-VALRANGE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not use recursion" id="BD-PB-RECFUN" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Properly deallocate dynamically allocated resources" id="BD-RES-BADDEALLOC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Ensure deallocation functions guarantee resource freeing" id="BD-RES-BADFREEF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not use resources that have been freed" id="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Allocate sufficient memory to hold an object of a given type" id="BD-RES-INSUFMEM" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not free resources using invalid pointers" id="BD-RES-INVFREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Ensure resources are freed" id="BD-RES-LEAKS" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Avoid cyclic shared_ptr references" id="BD-RES-CSP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not create variables on the stack above the defined limits" id="BD-RES-STACKLIM" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid tainted data in array indexes" id="BD-SECURITY-ARRAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Prevent buffer overflows from tainted data" id="BD-SECURITY-BUFWRITE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against integer overflow/underflow from tainted data" id="BD-SECURITY-INTOVERF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="BD-SECURITY-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid buffer read overflow from tainted data" id="BD-SECURITY-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid buffer write overflow from tainted data" id="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against command injection" id="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid printing tainted data on the output console" id="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against environment injection" id="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against file name injection" id="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Exclude unsanitized user input from format strings" id="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Validate potentially tainted data before it is used in the controlling expression of a loop" id="BD-SECURITY-TDLOOP" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against SQL injection" id="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid passing unvalidated binary data to log methods" id="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Properly seed pseudorandom number generators" id="BD-SECURITY-RAND" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Sensitive data should be cleared before being deallocated" id="BD-SECURITY-SENSFREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid passing sensitive data to functions that write to log files" id="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Validate potentially tainted data before it is used to determine the size of memory allocation" id="BD-SECURITY-TDALLOC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="BD-SECURITY-XXEXRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid double locking" id="BD-TRS-DLOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions when using fork and file descriptors" id="BD-TRS-FORKFILE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not abandon unreleased locks" id="BD-TRS-LOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not use global variable with different locks set" id="BD-TRS-MLOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not acquire locks in different order" id="BD-TRS-ORDER" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions while checking for the existence of a symbolic link" id="BD-TRS-SYMLINK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not use blocking functions while holding a lock" id="BD-TRS-TSHL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Declare objects shared between POSIX threads with appropriate storage durations" id="BD-TRS-ARG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Make const member functions thread-safe" id="BD-TRS-CMF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Variable should be used in context of single critical section" id="BD-TRS-DIFCS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions while accessing files" id="BD-TRS-FRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not join or detach a thread that was previously joined or detached" id="BD-TRS-JOINDETACH" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Use locks to prevent race conditions when modifying bit fields" id="BD-TRS-BITLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not destroy another thread's mutex" id="BD-TRS-DSTRLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not release a lock that has not been acquired" id="BD-TRS-REVLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="0;" authUrg="0;" cat="CDD" desc="Avoid function duplication" id="CDD-DUPM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="12;" authUrg="12;" cat="CDD" desc="Avoid code duplication" id="CDD-DUPC" sev="3" total="12" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="0;" authUrg="0;" cat="CDD" desc="Avoid duplication of #include directives" id="CDD-DUPI" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="2;" authUrg="2;" cat="CDD" desc="Avoid string literal duplication" id="CDD-DUPS" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="CERT_C-API00" desc="The validity of parameters must be checked inside each function" id="CERT_C-API00-a" origId="CODSTA-86" sev="3" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-API01" desc="Avoid overflow when writing to a buffer" id="CERT_C-API01-a" origId="BD-PB-OVERFWR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-API01" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-API01-b" origId="SECURITY-12" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-API02" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-API02-a" origId="SECURITY-12" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-API02" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="CERT_C-API02-b" origId="SECURITY-07" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-ARR01" desc="Do not call 'sizeof' on a pointer type" id="CERT_C-ARR01-a" origId="PB-32" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR02" desc="Explicitly specify array bounds in array declarations with initializers" id="CERT_C-ARR02-a" origId="CODSTA-200" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-ARR30" desc="Avoid accessing arrays out of bounds" id="CERT_C-ARR30-a" origId="BD-PB-ARRAY" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR32" desc="Ensure the size of the variable length array is in valid range" id="CERT_C-ARR32-a" origId="BD-PB-VLASIZE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR36" desc="Do not subtract two pointers that do not address elements of the same array" id="CERT_C-ARR36-a" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR36" desc="Do not compare two unrelated pointers" id="CERT_C-ARR36-b" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR37" desc="Pointer arithmetic shall not be applied to pointers that address variables of non-array type" id="CERT_C-ARR37-a" origId="PB-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid overflow when reading from a buffer" id="CERT_C-ARR38-a" origId="BD-PB-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid overflow when writing to a buffer" id="CERT_C-ARR38-b" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid buffer overflow due to defining incorrect format limits" id="CERT_C-ARR38-c" origId="BD-PB-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_C-ARR38-d" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-ARR39" desc="Avoid accessing arrays out of bounds" id="CERT_C-ARR39-a" origId="BD-PB-ARRAY" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR39" desc="Pointer arithmetic should not be used" id="CERT_C-ARR39-b" origId="MISRA-101" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR39" desc="Do not add or subtract a scaled integer to a pointer" id="CERT_C-ARR39-c" origId="CODSTA-189" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON01" desc="Do not abandon unreleased locks" id="CERT_C-CON01-a" origId="BD-TRS-LOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON02" desc="Do not use the volatile keyword" id="CERT_C-CON02-a" origId="MISRA-046_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON05" desc="Do not use blocking functions while holding a lock" id="CERT_C-CON05-a" origId="BD-TRS-TSHL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON30" desc="Ensure resources are freed" id="CERT_C-CON30-a" origId="BD-RES-LEAKS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON31" desc="Do not destroy another thread's mutex" id="CERT_C-CON31-a" origId="BD-TRS-DSTRLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON31" desc="Do not use resources that have been freed" id="CERT_C-CON31-b" origId="BD-RES-FREE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON31" desc="Do not free resources using invalid pointers" id="CERT_C-CON31-c" origId="BD-RES-INVFREE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON32" desc="Use locks to prevent race conditions when modifying bit fields" id="CERT_C-CON32-a" origId="BD-TRS-BITLOCK" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="CERT_C-CON33" desc="Avoid using thread-unsafe functions" id="CERT_C-CON33-a" origId="SECURITY-25" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON34" desc="Declare objects shared between POSIX threads with appropriate storage durations" id="CERT_C-CON34-a" origId="BD-TRS-ARG" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON35" desc="Avoid double locking" id="CERT_C-CON35-a" origId="BD-TRS-DLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON36" desc="Wrap functions that can spuriously wake up in a loop" id="CERT_C-CON36-a" origId="CODSTA-191" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON37" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-CON37-a" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON38" desc="Use the 'cnd_signal()' function with a unique condition variable" id="CERT_C-CON38-a" origId="SECURITY-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON39" desc="Do not join or detach a thread that was previously joined or detached" id="CERT_C-CON39-a" origId="BD-TRS-JOINDETACH" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON40" desc="Do not refer to an atomic variable twice in an expression" id="CERT_C-CON40-a" origId="CODSTA-195" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON41" desc="Wrap functions that can fail spuriously in a loop" id="CERT_C-CON41-a" origId="CODSTA-194" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON43" desc="Do not use global variable with different locks set" id="CERT_C-CON43-a" origId="BD-TRS-MLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="12;" authUrg="0;" cat="CERT_C-DCL00" desc="Declare parameters or local variable as const whenever possible" id="CERT_C-DCL00-a" origId="CODSTA-CPP-53" sev="3" total="12" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL01" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="CERT_C-DCL01-a" origId="MISRA2004-5_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL01" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="CERT_C-DCL01-b" origId="MISRA2004-5_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL02" desc="Use visually distinct identifiers" id="CERT_C-DCL02-a" origId="NAMING-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="CERT_C-DCL04" desc="Each variable should be declared in a separate declaration statement" id="CERT_C-DCL04-a" origId="FORMAT-33" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL05" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="CERT_C-DCL05-a" origId="MISRA2004-16_7_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="CERT_C-DCL06" desc="&quot;#define&quot; or enum constants should be used instead of hard coded values whenever possible" id="CERT_C-DCL06-a" origId="CODSTA-29" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL10" desc="The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" id="CERT_C-DCL10-a" origId="PB-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function" id="CERT_C-DCL11-a" origId="PB-45" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-DCL11-b" origId="PB-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function" id="CERT_C-DCL11-c" origId="PB-47" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-DCL11-d" origId="PB-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-DCL11-e" origId="PB-49" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" id="CERT_C-DCL11-f" origId="PB-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL12" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="CERT_C-DCL12-a" origId="CODSTA-115" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-DCL13" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="CERT_C-DCL13-a" origId="MISRA2004-16_7" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="CERT_C-DCL15" desc="Objects or functions with external linkage shall be declared in a header file" id="CERT_C-DCL15-a" origId="MISRA-023" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL16" desc="Use capital 'L' instead of lowercase 'l' to indicate long" id="CERT_C-DCL16-a" origId="PORT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL18" desc="Octal and hexadecimal escape sequences shall be terminated" id="CERT_C-DCL18-a" origId="CODSTA-117" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL18" desc="Octal constants (other than zero) shall not be used" id="CERT_C-DCL18-b" origId="MISRA2004-7_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-DCL19" desc="Declare variables as locally as possible" id="CERT_C-DCL19-a" origId="OPT-01" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL20" desc="The number of arguments passed to a function shall match the number of parameters" id="CERT_C-DCL20-a" origId="MISRA2004-16_6" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="5;" authUrg="0;" cat="CERT_C-DCL22" desc="Avoid unused values" id="CERT_C-DCL22-a" origId="BD-PB-VOVR" sev="3" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL30" desc="The address of an object with automatic storage shall not be returned from a function" id="CERT_C-DCL30-a" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL30" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="CERT_C-DCL30-b" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL31" desc="All functions shall be declared before use" id="CERT_C-DCL31-a" origId="MISRA-020" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL36" desc="Identifiers shall not simultaneously have both internal and external linkage in the same translation unit" id="CERT_C-DCL36-a" origId="MISRA-024" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL37" desc="Do not #define or #undef identifiers with names which start with underscore" id="CERT_C-DCL37-a" origId="MISRA2004-20_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL38" desc="The final member of a structure should not be an array of size '0' or '1'" id="CERT_C-DCL38-a" origId="CODSTA-192" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL39" desc="A pointer to a structure should not be passed to a function that can copy data to the user space" id="CERT_C-DCL39-a" origId="SECURITY-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="CERT_C-DCL40" desc="All declarations of an object or function shall have compatible types" id="CERT_C-DCL40-a" origId="GLOBAL-COMPATDECLS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL40" desc="If objects or functions are declared more than once their types shall be compatible" id="CERT_C-DCL40-b" origId="MISRA2004-8_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL41" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="CERT_C-DCL41-a" origId="MISRA2004-15_0_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-ENV01" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="CERT_C-ENV01-a" origId="SECURITY-07" sev="1" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-ENV01" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-ENV01-b" origId="SECURITY-12" sev="1" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ENV01" desc="Avoid overflow when writing to a buffer" id="CERT_C-ENV01-c" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV02" desc="Usage of system properties (environment variables) should be restricted" id="CERT_C-ENV02-a" origId="SECURITY-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV30" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="CERT_C-ENV30-a" origId="CODSTA-185_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ENV31" desc="Do not rely on an environment pointer following an operation that may invalidate it" id="CERT_C-ENV31-a" origId="BD-PB-INVENV" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ENV32" desc="Properly define exit handlers" id="CERT_C-ENV32-a" origId="BD-PB-EXITHAN" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV33" desc="Do not call the 'system()' function from the 'stdlib.h' or 'cstdlib' library with an argument other than '0' (null pointer)" id="CERT_C-ENV33-a" origId="SECURITY-48" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ENV34" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="CERT_C-ENV34-a" origId="BD-PB-INVRET" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR01" desc="The error indicator 'errno' shall not be used" id="CERT_C-ERR01-a" origId="MISRA2004-20_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="1;" cat="CERT_C-ERR02" desc="The Standard Library input/output functions shall not be used" id="CERT_C-ERR02-a" origId="CODSTA-110" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR04" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR04-a" origId="PB-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR04" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR04-b" origId="PB-75_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR04" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR04-c" origId="PB-75_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR05" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR05-a" origId="PB-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR05" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR05-b" origId="PB-75_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR05" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR05-c" origId="PB-75_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR06" desc="Do not use assertions" id="CERT_C-ERR06-a" origId="CODSTA-199" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-ERR07" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="CERT_C-ERR07-a" origId="MISRA2004-20_10" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="1;" cat="CERT_C-ERR07" desc="The Standard Library input/output functions shall not be used" id="CERT_C-ERR07-b" origId="CODSTA-110" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ERR30" desc="Properly use errno value" id="CERT_C-ERR30-a" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR30" desc="Provide error handling for file opening errors right next to the call to fopen" id="CERT_C-ERR30-b" origId="MRM-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ERR32" desc="Properly use errno value" id="CERT_C-ERR32-a" origId="BD-PB-ERRNO" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="35;" authUrg="0;" cat="CERT_C-ERR33" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-ERR33-a" origId="CODSTA-122_a" sev="1" total="35" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR33" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-ERR33-b" origId="CODSTA-122_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="4;" authUrg="0;" cat="CERT_C-ERR33" desc="Avoid null pointer dereferencing" id="CERT_C-ERR33-c" origId="BD-PB-NP" sev="1" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-ERR33" desc="Always check the returned value of non-void function" id="CERT_C-ERR33-d" origId="BD-PB-CHECKRETGEN" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-ERR34" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="CERT_C-ERR34-a" origId="MISRA2004-20_10" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP00" desc="Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used" id="CERT_C-EXP00-a" origId="CODSTA-97" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP02" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="CERT_C-EXP02-a" origId="MISRA2004-12_4_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP05" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="CERT_C-EXP05-a" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP08" desc="Pointer arithmetic should not be used" id="CERT_C-EXP08-a" origId="MISRA-101" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-EXP08" desc="Avoid accessing arrays out of bounds" id="CERT_C-EXP08-b" origId="BD-PB-ARRAY" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP10" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="CERT_C-EXP10-a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP10" desc="Don't write code that depends on the order of evaluation of function arguments" id="CERT_C-EXP10-b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP10" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="CERT_C-EXP10-c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP10" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="CERT_C-EXP10-d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="35;" authUrg="0;" cat="CERT_C-EXP12" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-EXP12-a" origId="CODSTA-122_a" sev="3" total="35" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP12" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-EXP12-b" origId="CODSTA-122_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP14" desc="Avoid mixing arithmetic of different precisions in the same expression" id="CERT_C-EXP14-a" origId="MISRA-043_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP15" desc="Suspicious use of semicolon" id="CERT_C-EXP15-a" origId="CODSTA-57" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP16" desc="Function address should not be compared to zero" id="CERT_C-EXP16-a" origId="PB-63" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP19" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="CERT_C-EXP19-a" origId="MISRA2004-14_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP20" desc="Avoid comparing values with TRUE macro/enum constant using equality operators (&quot;==&quot;, &quot;!=&quot;)" id="CERT_C-EXP20-a" origId="CODSTA-60" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="CERT_C-EXP30-a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="Don't write code that depends on the order of evaluation of function arguments" id="CERT_C-EXP30-b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="CERT_C-EXP30-c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="CERT_C-EXP30-d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP32" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="CERT_C-EXP32-a" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP33" desc="Avoid use before initialization" id="CERT_C-EXP33-a" origId="BD-PB-NOTINIT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="4;" authUrg="0;" cat="CERT_C-EXP34" desc="Avoid null pointer dereferencing" id="CERT_C-EXP34-a" origId="BD-PB-NP" sev="1" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP35" desc="Do not access an array in the result of a function call" id="CERT_C-EXP35-a" origId="CODSTA-196" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP36" desc="A cast should not be performed between a pointer to object type and a different pointer to object type" id="CERT_C-EXP36-a" origId="MISRA2004-11_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP37" desc="Identifiers shall be given for all of the parameters in a function prototype declaration" id="CERT_C-EXP37-a" origId="MISRA2004-16_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP37" desc="Function types shall have named parameters" id="CERT_C-EXP37-b" origId="CODSTA-158" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="1;" cat="CERT_C-EXP37" desc="Function types shall be in prototype form" id="CERT_C-EXP37-c" origId="CODSTA-159" sev="3" total="10" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="CERT_C-EXP37" desc="Functions shall always have visible prototype at the function call" id="CERT_C-EXP37-d" origId="MISRA-071_b" sev="3" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="There shall be no implicit conversions from integral to floating type" id="CERT_C-EXP39-a" origId="MISRA2004-10_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="A cast should not be performed between a pointer to object type and a different pointer to object type" id="CERT_C-EXP39-b" origId="MISRA2004-11_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid accessing arrays and pointers out of bounds" id="CERT_C-EXP39-c" origId="BD-PB-OVERFARRAY" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="CERT_C-EXP39-d" origId="BD-SECURITY-OVERFFMT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid buffer read overflow from tainted data" id="CERT_C-EXP39-e" origId="BD-SECURITY-OVERFRD" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid buffer write overflow from tainted data" id="CERT_C-EXP39-f" origId="BD-SECURITY-OVERFWR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP40" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="CERT_C-EXP40-a" origId="MISRA2004-11_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP42" desc="Don't memcpy or memcmp non-PODs" id="CERT_C-EXP42-a" origId="MRM-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP43" desc="The restrict type qualifier shall not be used" id="CERT_C-EXP43-a" origId="CODSTA-121" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP44" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="CERT_C-EXP44-a" origId="MISRA2004-12_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP44" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="CERT_C-EXP44-b" origId="MISRA2004-12_3_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP45" desc="Assignment operators shall not be used in conditions without brackets" id="CERT_C-EXP45-b" origId="PB-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP45" desc="Assignment operators shall not be used in expressions that yield a Boolean value" id="CERT_C-EXP45-d" origId="MISRA2004-13_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP46" desc="Expressions that are effectively Boolean should not be used as operands to operators other than (&amp;&amp;, ||, !, =, ==, !=, ?:)" id="CERT_C-EXP46-b" origId="MISRA2004-12_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP47" desc="Do not call va_arg with an argument of the incorrect type" id="CERT_C-EXP47-a" origId="PB-72" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO01" desc="Don't use chmod(), chown(), chgrp()" id="CERT_C-FIO01-a" origId="SECURITY-27" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO01" desc="Usage of functions prone to race is not allowed" id="CERT_C-FIO01-b" origId="SECURITY-19" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO21" desc="Usage of functions prone to race is not allowed" id="CERT_C-FIO21-a" origId="SECURITY-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO22" desc="Ensure resources are freed" id="CERT_C-FIO22-a" origId="BD-RES-LEAKS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO24" desc="Avoid race conditions while accessing files" id="CERT_C-FIO24-a" origId="BD-TRS-FRC" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-FIO30" desc="Avoid calling functions printf/wprintf with only one argument other than string constant" id="CERT_C-FIO30-a" origId="SECURITY-05" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO30" desc="Avoid using functions fprintf/fwprintf with only two parameters, when second parameter is a variable" id="CERT_C-FIO30-b" origId="SECURITY-08" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-FIO30" desc="Never use unfiltered data from an untrusted user as the format parameter" id="CERT_C-FIO30-c" origId="SECURITY-36" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO32" desc="Protect against file name injection" id="CERT_C-FIO32-a" origId="BD-SECURITY-TDFNAMES" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO34" desc="The macro EOF should be compared with the unmodified return value from the Standard Library function" id="CERT_C-FIO34-a" origId="BD-PB-EOFCOMP" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-FIO37" desc="Avoid accessing arrays out of bounds" id="CERT_C-FIO37-a" origId="BD-PB-ARRAY" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO38" desc="A pointer to a FILE object shall not be dereferenced" id="CERT_C-FIO38-a" origId="CODSTA-166_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO39" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="CERT_C-FIO39-a" origId="BD-PB-STREAMINOUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO40" desc="Reset strings on fgets() or fgetws() failure" id="CERT_C-FIO40-a" origId="BD-PB-FGETS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO41" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="CERT_C-FIO41-a" origId="MISRA2004-12_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO41" desc="Don't write code that depends on the order of evaluation of function arguments" id="CERT_C-FIO41-b" origId="MISRA2004-12_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO41" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="CERT_C-FIO41-c" origId="MISRA2004-12_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO41" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="CERT_C-FIO41-d" origId="MISRA2004-12_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-FIO41" desc="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects" id="CERT_C-FIO41-e" origId="CODSTA-123" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO42" desc="Ensure resources are freed" id="CERT_C-FIO42-a" origId="BD-RES-LEAKS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO44" desc="Only use values for fsetpos() that are returned from fgetpos()" id="CERT_C-FIO44-a" origId="BD-PB-FSETPOS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO45" desc="Avoid race conditions while accessing files" id="CERT_C-FIO45-a" origId="BD-TRS-FRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO46" desc="Do not use resources that have been freed" id="CERT_C-FIO46-a" origId="BD-RES-FREE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function" id="CERT_C-FIO47-a" origId="PB-45" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-FIO47-b" origId="PB-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function" id="CERT_C-FIO47-c" origId="PB-47" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-FIO47-d" origId="PB-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-FIO47-e" origId="PB-49" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" id="CERT_C-FIO47-f" origId="PB-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP00" desc="Floating-point expressions shall not be tested for equality or inequality" id="CERT_C-FLP00-a" origId="MISRA2004-13_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP02" desc="Floating-point expressions shall not be tested for equality or inequality" id="CERT_C-FLP02-a" origId="MISRA2004-13_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FLP03" desc="Avoid division by zero" id="CERT_C-FLP03-a" origId="BD-PB-ZERO" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP03" desc="Avoid implicit conversions from wider to narrower floating type" id="CERT_C-FLP03-b" origId="MISRA2004-10_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP03" desc="Avoid implicit conversions from narrower to wider floating type" id="CERT_C-FLP03-c" origId="MISRA2004-10_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP03" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="CERT_C-FLP03-d" origId="MISRA2004-10_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP06" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="CERT_C-FLP06-a" origId="MISRA-043_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP06" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="CERT_C-FLP06-b" origId="MISRA-043_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP30" desc="Do not use floating point variables as loop counters" id="CERT_C-FLP30-a" origId="MISRA-065" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FLP32" desc="Validate values passed to library functions" id="CERT_C-FLP32-a" origId="BD-API-VALPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP34" desc="Avoid implicit conversions from wider to narrower floating type" id="CERT_C-FLP34-a" origId="MISRA2004-10_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP34" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="CERT_C-FLP34-b" origId="MISRA2004-10_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP36" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="CERT_C-FLP36-a" origId="MISRA-043_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP36" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="CERT_C-FLP36-b" origId="MISRA-043_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP37" desc="Do not use object representations to compare floating-point values" id="CERT_C-FLP37-c" origId="CODSTA-190" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT02" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="CERT_C-INT02-a" origId="MISRA-043" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT02" desc="Avoid mixing arithmetic of different precisions in the same expression" id="CERT_C-INT02-b" origId="MISRA-043_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT04" desc="Protect against integer overflow/underflow from tainted data" id="CERT_C-INT04-a" origId="BD-SECURITY-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT04" desc="Avoid buffer read overflow from tainted data" id="CERT_C-INT04-b" origId="BD-SECURITY-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT04" desc="Avoid buffer write overflow from tainted data" id="CERT_C-INT04-c" origId="BD-SECURITY-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT05" desc="Avoid using unsafe string functions that do not check bounds" id="CERT_C-INT05-a" origId="SECURITY-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT07" desc="The plain char type shall be used only for the storage and use of character values" id="CERT_C-INT07-a" origId="MISRA2004-6_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT07" desc="signed and unsigned char type shall be used only for the storage and use of numeric values" id="CERT_C-INT07-b" origId="MISRA2004-6_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT08" desc="Avoid integer overflows" id="CERT_C-INT08-a" origId="BD-PB-INTOVERF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT09" desc="In an enumerator list, the &quot;=&quot; construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised" id="CERT_C-INT09-a" origId="MISRA2004-9_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-INT10" desc="Avoid accessing arrays out of bounds" id="CERT_C-INT10-a" origId="BD-PB-ARRAY" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT12" desc="Bit fields shall only be defined to be of type unsigned int or signed int" id="CERT_C-INT12-a" origId="MISRA2004-6_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT13" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="CERT_C-INT13-a" origId="CODSTA-63" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT15" desc="Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types" id="CERT_C-INT15-a" origId="PB-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT16" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="CERT_C-INT16-a" origId="CODSTA-63" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT18" desc="Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" id="CERT_C-INT18-a" origId="PB-65" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT18" desc="Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type" id="CERT_C-INT18-b" origId="PB-65_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT18" desc="Avoid possible integer overflow in expressions in which the result is cast to a wider integer type" id="CERT_C-INT18-c" origId="MISRA-048_a" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT30" desc="Avoid integer overflows" id="CERT_C-INT30-a" origId="BD-PB-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT30" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="CERT_C-INT30-b" origId="PB-66_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT30" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="CERT_C-INT30-c" origId="PB-66_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="CERT_C-INT31-a" origId="CODSTA-161_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="CERT_C-INT31-b" origId="CODSTA-161_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="CERT_C-INT31-c" origId="CODSTA-161_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="CERT_C-INT31-d" origId="CODSTA-161_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="CERT_C-INT31-e" origId="CODSTA-161_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" id="CERT_C-INT31-f" origId="CODSTA-161_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="CERT_C-INT31-g" origId="CODSTA-161_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="CERT_C-INT31-h" origId="CODSTA-163_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-INT31" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="CERT_C-INT31-i" origId="CODSTA-163_b" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-INT31" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="CERT_C-INT31-j" origId="CODSTA-164_a" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="The second and third operands of the ternary operator shall have the same essential type category" id="CERT_C-INT31-k" origId="CODSTA-164_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="CERT_C-INT31-l" origId="CODSTA-157" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="CERT_C-INT31-m" origId="CODSTA-156_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="CERT_C-INT31-n" origId="CODSTA-156_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="Avoid integer overflows" id="CERT_C-INT31-o" origId="BD-PB-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT32" desc="Avoid integer overflows" id="CERT_C-INT32-a" origId="BD-PB-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT32" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="CERT_C-INT32-b" origId="PB-66_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT32" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="CERT_C-INT32-c" origId="PB-66_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT33" desc="Avoid division by zero" id="CERT_C-INT33-a" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT34" desc="Avoid incorrect shift operations" id="CERT_C-INT34-a" origId="BD-PB-BADSHIFT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT35" desc="Use correct integer precisions when checking the right hand operand of the shift operator" id="CERT_C-INT35-a" origId="SECURITY-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT36" desc="A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t'" id="CERT_C-INT36-b" origId="CODSTA-127_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM00" desc="Do not allocate memory and expect that someone else will deallocate it later" id="CERT_C-MEM00-a" origId="MRM-18" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM00" desc="Do not allocate memory and expect that someone else will deallocate it later" id="CERT_C-MEM00-b" origId="MRM-19" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM00" desc="Do not allocate memory and expect that someone else will deallocate it later" id="CERT_C-MEM00-c" origId="MRM-20" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM00" desc="Do not use resources that have been freed" id="CERT_C-MEM00-d" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM00" desc="Ensure resources are freed" id="CERT_C-MEM00-e" origId="BD-RES-LEAKS" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM01" desc="Do not use resources that have been freed" id="CERT_C-MEM01-a" origId="BD-RES-FREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM01" desc="Always assign a new value to an expression that points to deallocated memory" id="CERT_C-MEM01-b" origId="MRM-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM01" desc="Always assign a new value to global or member variable that points to deallocated memory" id="CERT_C-MEM01-c" origId="MRM-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM01" desc="Always assign a new value to parameter or local variable that points to deallocated memory" id="CERT_C-MEM01-d" origId="MRM-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-MEM02" desc="Assignment operator should have operands of compatible types" id="CERT_C-MEM02-a" origId="PB-06" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-MEM02" desc="Do not assign function return value to a variable of incompatible type" id="CERT_C-MEM02-b" origId="PB-07" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM03" desc="Sensitive data should be cleared before being deallocated" id="CERT_C-MEM03-a" origId="BD-SECURITY-SENSFREE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CERT_C-MEM04" desc="The validity of values passed to library functions shall be checked" id="CERT_C-MEM04-a" origId="MISRA2004-20_3" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM05" desc="Do not use recursion" id="CERT_C-MEM05-a" origId="BD-PB-RECFUN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM05" desc="Ensure the size of the variable length array is in valid range" id="CERT_C-MEM05-b" origId="BD-PB-VLASIZE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CERT_C-MEM07" desc="The validity of values passed to library functions shall be checked" id="CERT_C-MEM07-a" origId="MISRA2004-20_3" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM12" desc="Ensure resources are freed" id="CERT_C-MEM12-a" origId="BD-RES-LEAKS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM30" desc="Do not use resources that have been freed" id="CERT_C-MEM30-a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM31" desc="Ensure resources are freed" id="CERT_C-MEM31-a" origId="BD-RES-LEAKS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM33" desc="Allocate structures containing a flexible array member dynamically" id="CERT_C-MEM33-a" origId="CODSTA-193" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM33" desc="Do not copy instances of structures containing a flexible array member" id="CERT_C-MEM33-b" origId="PB-71" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM34" desc="Do not free resources using invalid pointers" id="CERT_C-MEM34-a" origId="BD-RES-INVFREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM35" desc="Do not use sizeof operator on pointer type to specify the size of the memory to be allocated via 'malloc', 'calloc' or 'realloc' function" id="CERT_C-MEM35-a" origId="MRM-45" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM36" desc="Do not modify the alignment of objects by calling realloc()" id="CERT_C-MEM36-a" origId="BD-PB-DNMPTR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC01" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="CERT_C-MSC01-a" origId="MISRA2004-14_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC01" desc="The final clause of a switch statement shall be the default clause" id="CERT_C-MSC01-b" origId="MISRA2004-15_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC04" desc="The character sequence /* shall not be used within a C-style comment" id="CERT_C-MSC04-a" origId="MISRA2004-2_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC04" desc="The character sequence // shall not be used within a C-style comment" id="CERT_C-MSC04-b" origId="COMMENT-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC04" desc="The character sequence /* shall not be used within a C++-style comment" id="CERT_C-MSC04-c" origId="COMMENT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC04" desc="Line-splicing shall not be used in // comments" id="CERT_C-MSC04-d" origId="COMMENT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code in &quot;else&quot; block" id="CERT_C-MSC07-a" origId="MISRA2004-14_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="CERT_C-MSC07-b" origId="MISRA2004-14_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="CERT_C-MSC07-c" origId="MISRA2004-14_1_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code in switch statement" id="CERT_C-MSC07-d" origId="MISRA2004-14_1_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code in 'for' loop" id="CERT_C-MSC07-e" origId="MISRA2004-14_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="CERT_C-MSC07-f" origId="MISRA2004-14_1_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="CERT_C-MSC07-g" origId="MISRA2004-14_1_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="Avoid switch with unreachable branches" id="CERT_C-MSC07-h" origId="BD-PB-SWITCH" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC09" desc="Only use characters defined in ISO C standard" id="CERT_C-MSC09-a" origId="MISRA-005" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC11" desc="Assert liberally to document internal assumptions and invariants" id="CERT_C-MSC11-a" origId="CODSTA-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code in &quot;else&quot; block" id="CERT_C-MSC12-a" origId="MISRA2004-14_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="CERT_C-MSC12-b" origId="MISRA2004-14_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="CERT_C-MSC12-c" origId="MISRA2004-14_1_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code in switch statement" id="CERT_C-MSC12-d" origId="MISRA2004-14_1_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code in 'for' loop" id="CERT_C-MSC12-e" origId="MISRA2004-14_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="CERT_C-MSC12-f" origId="MISRA2004-14_1_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="CERT_C-MSC12-g" origId="MISRA2004-14_1_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="Avoid switch with unreachable branches" id="CERT_C-MSC12-h" origId="BD-PB-SWITCH" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="CERT_C-MSC13" desc="Avoid unnecessary local variables" id="CERT_C-MSC13-a" origId="OPT-06" sev="3" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC14" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="CERT_C-MSC14-a" origId="PB-73" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC15" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="CERT_C-MSC15-a" origId="PB-73" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC17" desc="Missing break statement between cases in a switch statement" id="CERT_C-MSC17-a" origId="CODSTA-149" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-MSC19" desc="Avoid accessing arrays out of bounds" id="CERT_C-MSC19-a" origId="BD-PB-ARRAY" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="4;" authUrg="0;" cat="CERT_C-MSC19" desc="Avoid null pointer dereferencing" id="CERT_C-MSC19-b" origId="BD-PB-NP" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC22" desc="The setjmp macro and the longjmp function shall not be used" id="CERT_C-MSC22-a" origId="MISRA2004-20_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-MSC24" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="CERT_C-MSC24-a" origId="MISRA2004-20_10" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC24" desc="The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-MSC24-b" origId="SECURITY-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-MSC24" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-MSC24-c" origId="SECURITY-12" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-MSC24" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="CERT_C-MSC24-d" origId="SECURITY-07" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC30" desc="Do not use the rand() function for generating pseudorandom numbers" id="CERT_C-MSC30-a" origId="SECURITY-02_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC32" desc="Properly seed pseudorandom number generators" id="CERT_C-MSC32-d" origId="BD-SECURITY-RAND" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="0;" cat="CERT_C-MSC33" desc="Avoid functions which use time from standard C library" id="CERT_C-MSC33-a" origId="SECURITY-01" sev="1" total="10" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC37" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="CERT_C-MSC37-a" origId="MISRA2004-16_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC38" desc="A function-like macro shall not be invoked without all of its arguments" id="CERT_C-MSC38-a" origId="MISRA2004-19_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC39" desc="Use macros for variable arguments correctly" id="CERT_C-MSC39-a" origId="BD-PB-VARARGS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC40" desc="An inline definition of a function with external linkage shall not contain definitions and uses of static objects" id="CERT_C-MSC40-a" origId="CODSTA-202" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="28;" authUrg="0;" cat="CERT_C-MSC41" desc="Do not hard code string literals" id="CERT_C-MSC41-a" origId="CODSTA-203" sev="1" total="28" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS30" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_C-POS30-a" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS30" desc="The values returned by functions 'read' and 'readlink' shall be used" id="CERT_C-POS30-b" origId="CODSTA-144" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS30" desc="Use of possibly not null-terminated string with functions expecting null-terminated string" id="CERT_C-POS30-c" origId="CODSTA-145" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS33" desc="Avoid using the 'vfork()' function" id="CERT_C-POS33-a" origId="SECURITY-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS34" desc="Usage of system properties (environment variables) should be restricted" id="CERT_C-POS34-a" origId="SECURITY-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS34" desc="Do not call putenv() with a pointer to an automatic variable as the argument" id="CERT_C-POS34-b" origId="BD-PB-PUTENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS35" desc="Avoid race conditions while checking for the existence of a symbolic link" id="CERT_C-POS35-b" origId="BD-TRS-SYMLINK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS36" desc="Observe correct revocation order while relinquishing privileges" id="CERT_C-POS36-a" origId="SECURITY-44" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS37" desc="Ensure that privilege relinquishment is successful" id="CERT_C-POS37-a" origId="SECURITY-45" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS38" desc="Avoid race conditions when using fork and file descriptors" id="CERT_C-POS38-a" origId="BD-TRS-FORKFILE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS39" desc="Use the correct byte ordering when transferring data between systems" id="CERT_C-POS39-a" origId="BD-PB-BYTEORD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS44" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-POS44-a" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS47" desc="The function 'pthread_setcanceltype()' should not be called with 'PTHREAD_CANCEL_ASYNCHRONOUS' argument" id="CERT_C-POS47-a" origId="SECURITY-43" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS48" desc="Do not destroy another thread's mutex" id="CERT_C-POS48-a" origId="BD-TRS-DSTRLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS48" desc="Do not release a lock that has not been acquired" id="CERT_C-POS48-b" origId="BD-TRS-REVLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS49" desc="Use locks to prevent race conditions when modifying bit fields" id="CERT_C-POS49-a" origId="BD-TRS-BITLOCK" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS50" desc="Declare objects shared between POSIX threads with appropriate storage durations" id="CERT_C-POS50-a" origId="BD-TRS-ARG" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS51" desc="Do not acquire locks in different order" id="CERT_C-POS51-a" origId="BD-TRS-ORDER" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS52" desc="Do not use blocking functions while holding a lock" id="CERT_C-POS52-a" origId="BD-TRS-TSHL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="CERT_C-POS53" desc="Do not use more than one mutex for concurrent waiting operations on a condition variable" id="CERT_C-POS53-a" origId="GLOBAL-CONDMUTEXVAR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="35;" authUrg="0;" cat="CERT_C-POS54" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-POS54-a" origId="CODSTA-122_a" sev="1" total="35" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS54" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-POS54-b" origId="CODSTA-122_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="4;" authUrg="0;" cat="CERT_C-POS54" desc="Avoid null pointer dereferencing" id="CERT_C-POS54-c" origId="BD-PB-NP" sev="1" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE00" desc="A function should be used in preference to a function-like macro" id="CERT_C-PRE00-a" origId="MISRA2004-19_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE01" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="CERT_C-PRE01-a" origId="MISRA2004-19_10" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE02" desc="Enclose in parentheses whole definition of a function-like macro" id="CERT_C-PRE02-a" origId="MISRA-096" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE06" desc="Use multiple include guards" id="CERT_C-PRE06-a" origId="PFO-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE07" desc="Trigraphs shall not be used" id="CERT_C-PRE07-a" origId="MISRA2004-4_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE30" desc="Avoid token concatenation that may produce universal character names" id="CERT_C-PRE30-a" origId="PREPROC-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE31" desc="Assertions should not contain assignments, increment, or decrement operators" id="CERT_C-PRE31-b" origId="CODSTA-150" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE31" desc="Assertions should not contain function calls nor function-like macro calls" id="CERT_C-PRE31-c" origId="CODSTA-150_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE31" desc="Avoid side effects in arguments to unsafe macros" id="CERT_C-PRE31-d" origId="CODSTA-150_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE32" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="CERT_C-PRE32-a" origId="MISRA2004-19_9" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-SIG00" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-SIG00-a" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-SIG01" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-SIG01-a" origId="MISRA2004-20_8_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-SIG02" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-SIG02-a" origId="MISRA2004-20_8_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG30" desc="Properly define signal handlers" id="CERT_C-SIG30-a" origId="BD-PB-SIGHAN" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG31" desc="Properly define signal handlers" id="CERT_C-SIG31-a" origId="BD-PB-SIGHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG34" desc="Properly define signal handlers" id="CERT_C-SIG34-a" origId="BD-PB-SIGHAN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG35" desc="Do not return from a computational exception signal handler" id="CERT_C-SIG35-a" origId="BD-PB-SIGRETURN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR00" desc="The plain char type shall be used only for the storage and use of character values" id="CERT_C-STR00-a" origId="MISRA2004-6_1" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR02" desc="Protect against command injection" id="CERT_C-STR02-a" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR02" desc="Protect against file name injection" id="CERT_C-STR02-b" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR02" desc="Protect against SQL injection" id="CERT_C-STR02-c" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR03" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_C-STR03-a" origId="BD-PB-OVERFNZT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR04" desc="The plain char type shall be used only for the storage and use of character values" id="CERT_C-STR04-a" origId="MISRA2004-6_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="26;" authUrg="0;" cat="CERT_C-STR05" desc="A string literal shall not be modified" id="CERT_C-STR05-a" origId="PB-27" sev="3" total="26" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR07" desc="Avoid using unsafe string functions that do not check bounds" id="CERT_C-STR07-a" origId="SECURITY-13" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-STR09" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary &amp; operator" id="CERT_C-STR09-a" origId="CODSTA-69" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR10" desc="Narrow and wide string literals shall not be concatenated" id="CERT_C-STR10-a" origId="PB-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR11" desc="Do not specify the bound of a character array initialized with a string literal" id="CERT_C-STR11-a" origId="CODSTA-197" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="26;" authUrg="0;" cat="CERT_C-STR30" desc="A string literal shall not be modified" id="CERT_C-STR30-a" origId="PB-27" sev="2" total="26" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR30" desc="Do not modify string literals" id="CERT_C-STR30-b" origId="BD-PB-MODSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-STR31" desc="Avoid accessing arrays out of bounds" id="CERT_C-STR31-a" origId="BD-PB-ARRAY" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Avoid overflow when writing to a buffer" id="CERT_C-STR31-b" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Prevent buffer overflows from tainted data" id="CERT_C-STR31-c" origId="BD-SECURITY-BUFWRITE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Avoid buffer write overflow from tainted data" id="CERT_C-STR31-d" origId="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-STR31" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-STR31-e" origId="SECURITY-12" sev="1" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR32" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_C-STR32-a" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR34" desc="Cast characters to unsigned char before assignment to larger integer sizes" id="CERT_C-STR34-b" origId="CODSTA-187_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR34" desc="An expressions of the 'signed char' type should not be used as an array index" id="CERT_C-STR34-c" origId="CODSTA-187_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR34" desc="Cast characters to unsigned char before converting to larger integer sizes" id="CERT_C-STR34-d" origId="CODSTA-187_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR37" desc="Do not pass incorrect values to ctype.h library functions" id="CERT_C-STR37-a" origId="BD-API-CTYPE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR38" desc="Do not confuse narrow and wide character strings and functions" id="CERT_C-STR38-a" origId="CODSTA-188" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-WIN00" desc="Use care to ensure that LoadLibrary() will load the correct library" id="CERT_C-WIN00-a" origId="SECURITY-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-WIN30" desc="Ensure resources are freed" id="CERT_C-WIN30-a" origId="BD-RES-LEAKS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CON50" desc="Do not destroy another thread's mutex" id="CERT_CPP-CON50-a" origId="BD-TRS-DSTRLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CON51" desc="Do not call lock() directly on a mutex" id="CERT_CPP-CON51-a" origId="CODSTA-MCPP-21" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CON52" desc="Use locks to prevent race conditions when modifying bit fields" id="CERT_CPP-CON52-a" origId="BD-TRS-BITLOCK" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CON53" desc="Do not acquire locks in different order" id="CERT_CPP-CON53-a" origId="BD-TRS-ORDER" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CON54" desc="Wrap functions that can spuriously wake up in a loop" id="CERT_CPP-CON54-a" origId="CODSTA-191" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CON55" desc="Do not use the 'notify_one()' function when multiple threads are waiting on the same condition variable" id="CERT_CPP-CON55-a" origId="SECURITY-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CON56" desc="Avoid double locking" id="CERT_CPP-CON56-a" origId="BD-TRS-DLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR50" desc="Guarantee that container indices are within the valid range" id="CERT_CPP-CTR50-a" origId="BD-PB-VALRANGE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR51" desc="Do not modify container while iterating over it" id="CERT_CPP-CTR51-a" origId="BD-CO-ITMOD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR52" desc="Do not pass empty container iterators to std algorithms as destinations" id="CERT_CPP-CTR52-a" origId="BD-CO-EMPCON" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR53" desc="Do not use an iterator range that isn't really a range" id="CERT_CPP-CTR53-a" origId="STL-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR53" desc="Do not compare iterators from different containers" id="CERT_CPP-CTR53-b" origId="BD-CO-ITINVCOMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR54" desc="Do not compare iterators from different containers" id="CERT_CPP-CTR54-a" origId="BD-CO-ITINVCOMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR54" desc="Do not compare two unrelated pointers" id="CERT_CPP-CTR54-b" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR54" desc="Do not subtract two pointers that do not address elements of the same array" id="CERT_CPP-CTR54-c" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR55" desc="Do not add or subtract a constant with a value greater than one from an iterator" id="CERT_CPP-CTR55-a" origId="PB-74" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR56" desc="Don't treat arrays polymorphically" id="CERT_CPP-CTR56-a" origId="PB-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR56" desc="A pointer to an array of derived class objects should not be converted to a base class pointer" id="CERT_CPP-CTR56-b" origId="PB-57" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR56" desc="Do not treat arrays polymorphically" id="CERT_CPP-CTR56-c" origId="BD-PB-POLARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR57" desc="For associative containers never use comparison function returning true for equal values" id="CERT_CPP-CTR57-a" origId="STL-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR58" desc="Make predicates const pure functions" id="CERT_CPP-CTR58-a" origId="STL-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL50" desc="Functions shall not be defined with a variable number of arguments" id="CERT_CPP-DCL50-a" origId="MISRA2004-16_1" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="Do not #define or #undef identifiers with names which start with underscore" id="CERT_CPP-DCL51-a" origId="MISRA2004-20_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="Do not redefine reserved words" id="CERT_CPP-DCL51-b" origId="MISRA2004-20_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="Do not #define nor #undef identifier 'defined'" id="CERT_CPP-DCL51-c" origId="MISRA2004-20_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="The names of standard library macros, objects and functions shall not be reused" id="CERT_CPP-DCL51-d" origId="MISRA2004-20_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="The names of standard library macros, objects and functions shall not be reused (C90)" id="CERT_CPP-DCL51-e" origId="MISRA2004-20_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="The names of standard library macros, objects and functions shall not be reused (C99)" id="CERT_CPP-DCL51-f" origId="MISRA2004-20_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL52" desc="Never qualify a reference type with 'const' or 'volatile'" id="CERT_CPP-DCL52-a" origId="CODSTA-CPP-97" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL53" desc="Parameter names in function declarations should not be enclosed in parentheses" id="CERT_CPP-DCL53-a" origId="FORMAT-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL53" desc="Local variable names in variable declarations should not be enclosed in parentheses" id="CERT_CPP-DCL53-b" origId="FORMAT-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL53" desc="Avoid function declarations that are syntactically ambiguous" id="CERT_CPP-DCL53-c" origId="PB-79" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL54" desc="Always provide new and delete together" id="CERT_CPP-DCL54-a" origId="MRM-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL55" desc="A pointer to a structure should not be passed to a function that can copy data to the user space" id="CERT_CPP-DCL55-a" origId="SECURITY-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL56" desc="Avoid initialization order problems across translation units by replacing non-local static objects with local static objects" id="CERT_CPP-DCL56-a" origId="INIT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL57" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="CERT_CPP-DCL57-a" origId="EXCEPT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL57" desc="Always catch exceptions" id="CERT_CPP-DCL57-b" origId="BD-PB-EXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL58" desc="Do not modify the standard namespaces 'std' and 'posix'" id="CERT_CPP-DCL58-a" origId="CODSTA-CPP-95" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL59" desc="There shall be no unnamed namespaces in header files" id="CERT_CPP-DCL59-a" origId="CODSTA-CPP-74" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL60" desc="A class, union or enum name (including qualification, if any) shall be a unique identifier" id="CERT_CPP-DCL60-a" origId="GLOBAL-UNIQUETYPE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="CERT_CPP-ERR50-a" origId="PB-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="CERT_CPP-ERR50-b" origId="EXCEPT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Do not throw from within destructor" id="CERT_CPP-ERR50-c" origId="EXCEPT-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="CERT_CPP-ERR50-d" origId="EXCEPT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="An empty throw (throw;) shall only be used in the compound-statement of a catch handler" id="CERT_CPP-ERR50-e" origId="EXCEPT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Exceptions shall be raised only after start-up and before termination of the program" id="CERT_CPP-ERR50-f" origId="EXCEPT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="CERT_CPP-ERR50-g" origId="EXCEPT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="CERT_CPP-ERR50-h" origId="EXCEPT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="CERT_CPP-ERR50-i" origId="EXCEPT-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Always catch exceptions" id="CERT_CPP-ERR50-j" origId="BD-PB-EXCEPT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Properly define exit handlers" id="CERT_CPP-ERR50-k" origId="BD-PB-EXITHAN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_CPP-ERR50-l" origId="PB-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Avoid throwing exceptions from functions that are declared not to throw" id="CERT_CPP-ERR50-m" origId="BD-PB-NOEXCEPT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_CPP-ERR50-n" origId="PB-75_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR51" desc="Always catch exceptions" id="CERT_CPP-ERR51-a" origId="BD-PB-EXCEPT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR51" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="CERT_CPP-ERR51-b" origId="EXCEPT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR52" desc="The setjmp macro and the longjmp function shall not be used" id="CERT_CPP-ERR52-a" origId="MISRA2004-20_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR52" desc="The standard header file &lt;setjmp.h> shall not be used" id="CERT_CPP-ERR52-b" origId="MISRA2004-20_7_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR53" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="CERT_CPP-ERR53-a" origId="EXCEPT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR54" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="CERT_CPP-ERR54-a" origId="EXCEPT-17" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR55" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="CERT_CPP-ERR55-a" origId="EXCEPT-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR56" desc="Always catch exceptions" id="CERT_CPP-ERR56-a" origId="BD-PB-EXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR56" desc="Do not leave 'catch' blocks empty" id="CERT_CPP-ERR56-b" origId="EXCEPT-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR57" desc="Ensure resources are freed" id="CERT_CPP-ERR57-a" origId="BD-RES-LEAKS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR58" desc="Exceptions shall be raised only after start-up and before termination of the program" id="CERT_CPP-ERR58-a" origId="EXCEPT-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR59" desc="Do not throw an exception across execution boundaries" id="CERT_CPP-ERR59-a" origId="PORT-30" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR60" desc="Exception objects must be nothrow copy constructible" id="CERT_CPP-ERR60-a" origId="EXCEPT-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR60" desc="An explicitly declared copy constructor for a class that inherits from 'std::exception' should have a non-throwing exception specification" id="CERT_CPP-ERR60-b" origId="EXCEPT-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR61" desc="A class type exception shall always be caught by reference" id="CERT_CPP-ERR61-a" origId="EXCEPT-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR61" desc="Throw by value, catch by reference" id="CERT_CPP-ERR61-b" origId="EXCEPT-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_CPP-ERR62" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="CERT_CPP-ERR62-a" origId="MISRA2004-20_10" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="CERT_CPP-EXP50-a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Don't write code that depends on the order of evaluation of function arguments" id="CERT_CPP-EXP50-b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="CERT_CPP-EXP50-c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="CERT_CPP-EXP50-d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="CERT_CPP-EXP50-e" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Don't write code that depends on the order of evaluation of function calls" id="CERT_CPP-EXP50-f" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP51" desc="Do not treat arrays polymorphically" id="CERT_CPP-EXP51-a" origId="BD-PB-POLARR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="CERT_CPP-EXP52-a" origId="MISRA2004-12_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="CERT_CPP-EXP52-b" origId="MISRA2004-12_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="CERT_CPP-EXP52-c" origId="MISRA2004-12_3_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="The operand of the 'typeid' operator shall not contain any expression that has side effects" id="CERT_CPP-EXP52-d" origId="CODSTA-CPP-104" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="The operand of the 'typeid' operator shall not contain a function call that causes side effects" id="CERT_CPP-EXP52-e" origId="CODSTA-CPP-104_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP53" desc="Avoid use before initialization" id="CERT_CPP-EXP53-a" origId="BD-PB-NOTINIT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP54" desc="Do not use resources that have been freed" id="CERT_CPP-EXP54-a" origId="BD-RES-FREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP54" desc="The address of an object with automatic storage shall not be returned from a function" id="CERT_CPP-EXP54-b" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP54" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="CERT_CPP-EXP54-c" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP55" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="CERT_CPP-EXP55-a" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP56" desc="Do not call a function with a mismatched language linkage" id="CERT_CPP-EXP56-a" origId="CODSTA-CPP-96" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP57" desc="Do not delete objects with incomplete class at the point of deletion" id="CERT_CPP-EXP57-a" origId="PB-55" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP57" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="CERT_CPP-EXP57-b" origId="CODSTA-125" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP58" desc="Use macros for variable arguments correctly" id="CERT_CPP-EXP58-a" origId="BD-PB-VARARGS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP59" desc="Use offsetof() on valid types and members" id="CERT_CPP-EXP59-a" origId="CODSTA-CPP-99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP60" desc="Do not pass a nonstandard-layout type object across execution boundaries" id="CERT_CPP-EXP60-a" origId="PORT-31" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP61" desc="Never return lambdas that capture local objects by reference" id="CERT_CPP-EXP61-a" origId="CODSTA-MCPP-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP61" desc="Never capture local objects from an outer lambda by reference" id="CERT_CPP-EXP61-b" origId="CODSTA-MCPP-17_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP61" desc="The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime" id="CERT_CPP-EXP61-c" origId="CODSTA-MCPP-17_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP62" desc="Do not compare objects of a class that may contain padding bits with C standard library functions" id="CERT_CPP-EXP62-a" origId="CODSTA-CPP-100" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP63" desc="Do not rely on the value of a moved-from object" id="CERT_CPP-EXP63-a" origId="BD-PB-SUBSEQMOVE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-FIO50" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="CERT_CPP-FIO50-a" origId="BD-PB-STREAMINOUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-FIO51" desc="Ensure resources are freed" id="CERT_CPP-FIO51-a" origId="BD-RES-LEAKS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-INT50" desc="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="CERT_CPP-INT50-a" origId="PB-70" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM50" desc="Do not use resources that have been freed" id="CERT_CPP-MEM50-a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM51" desc="Use the same form in corresponding calls to new/malloc and delete/free" id="CERT_CPP-MEM51-a" origId="MRM-06" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM51" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="CERT_CPP-MEM51-b" origId="MRM-36" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM51" desc="Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor" id="CERT_CPP-MEM51-c" origId="MRM-40_d" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM51" desc="Properly deallocate dynamically allocated resources" id="CERT_CPP-MEM51-d" origId="BD-RES-BADDEALLOC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM52" desc="Check the return value of new" id="CERT_CPP-MEM52-a" origId="MRM-34" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM52" desc="Do not allocate resources in function argument list because the order of evaluation of a function's parameters is undefined" id="CERT_CPP-MEM52-b" origId="MRM-01" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM53" desc="Do not invoke malloc/realloc for objects having constructors" id="CERT_CPP-MEM53-a" origId="MRM-08" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM54" desc="Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new'" id="CERT_CPP-MEM54-a" origId="MRM-55" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM54" desc="An overhead should be used when an array of objects is passed to the placement 'new' allocation function" id="CERT_CPP-MEM54-b" origId="MRM-55_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM55" desc="The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails" id="CERT_CPP-MEM55-a" origId="MRM-53" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM56" desc="Do not store an already-owned pointer value in an unrelated smart pointer" id="CERT_CPP-MEM56-a" origId="BD-PB-PTRVALUE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM57" desc="Avoid using the default operator 'new' for over-aligned types" id="CERT_CPP-MEM57-a" origId="MRM-54" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC50" desc="Do not use the rand() function for generating pseudorandom numbers" id="CERT_CPP-MSC50-a" origId="SECURITY-02_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC51" desc="Properly seed pseudorandom number generators" id="CERT_CPP-MSC51-a" origId="BD-SECURITY-RAND" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC52" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="CERT_CPP-MSC52-a" origId="MISRA2004-16_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC53" desc="Never return from functions that should not return" id="CERT_CPP-MSC53-a" origId="BD-PB-NORETURN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC54" desc="Properly define signal handlers" id="CERT_CPP-MSC54-a" origId="BD-PB-SIGHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP50" desc="Avoid calling virtual functions from constructors" id="CERT_CPP-OOP50-a" origId="OOP-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP50" desc="Avoid calling virtual functions from destructors" id="CERT_CPP-OOP50-b" origId="OOP-16_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP50" desc="Do not use dynamic type of an object under construction" id="CERT_CPP-OOP50-c" origId="BD-PB-VCTOR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP50" desc="Do not use dynamic type of an object under destruction" id="CERT_CPP-OOP50-d" origId="BD-PB-VDTOR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP51" desc="Avoid slicing function arguments / return value" id="CERT_CPP-OOP51-a" origId="PB-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP52" desc="Define a virtual destructor in classes used as base classes which have virtual functions" id="CERT_CPP-OOP52-a" origId="OOP-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP53" desc="List members in an initialization list in the order in which they are declared" id="CERT_CPP-OOP53-a" origId="INIT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP54" desc="Check for assignment to self in operator=" id="CERT_CPP-OOP54-a" origId="OOP-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP55" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="CERT_CPP-OOP55-a" origId="CODSTA-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP56" desc="Properly define terminate handlers" id="CERT_CPP-OOP56-a" origId="BD-PB-TERMHAN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP56" desc="Properly define unexpected handlers" id="CERT_CPP-OOP56-b" origId="BD-PB-UNEXPHAN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP56" desc="Properly define new handlers" id="CERT_CPP-OOP56-c" origId="BD-PB-NEWHAN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP57" desc="Do not initialize objects with a non-trivial class type using C standard library functions" id="CERT_CPP-OOP57-a" origId="CODSTA-CPP-93" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP57" desc="Do not compare objects of nonstandard-layout class type with C standard library functions" id="CERT_CPP-OOP57-b" origId="CODSTA-CPP-94" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP58" desc="Copy operations must not mutate the source object" id="CERT_CPP-OOP58-a" origId="CODSTA-CPP-98" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_CPP-STR50-b" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Avoid overflow when writing to a buffer" id="CERT_CPP-STR50-c" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Prevent buffer overflows from tainted data" id="CERT_CPP-STR50-e" origId="BD-SECURITY-BUFWRITE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Avoid buffer write overflow from tainted data" id="CERT_CPP-STR50-f" origId="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Do not use the 'char' buffer to store input from 'std::cin'" id="CERT_CPP-STR50-g" origId="SECURITY-51" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="4;" authUrg="0;" cat="CERT_CPP-STR51" desc="Avoid null pointer dereferencing" id="CERT_CPP-STR51-a" origId="BD-PB-NP" sev="1" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR52" desc="Use valid references, pointers, and iterators to reference elements of a basic_string" id="CERT_CPP-STR52-a" origId="BD-CO-STRMOD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR53" desc="Guarantee that container indices are within the valid range" id="CERT_CPP-STR53-a" origId="BD-PB-VALRANGE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Local variable or parameter names and class member variable or parent class/struct member variable names shall differ by more than a single character" id="CODSTA-22" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid internal or external name conflict with a C++ reserved word" id="CODSTA-39" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Local variables should not use the same names as member variables" id="CODSTA-44" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Parameters should not use the same names as member variables" id="CODSTA-45" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA" desc="Do not use break in for loops" id="CODSTA-08" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Global functions shall not declare parameters with array type" id="CODSTA-142" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not declare the size of an array when the array is passed into a function as a parameter" id="CODSTA-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not declare the size of an array when the array is initialized" id="CODSTA-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The declaration of an array parameter shall not contain the 'static' keyword between the [ ]" id="CODSTA-160" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A pointer to a FILE object shall not be dereferenced" id="CODSTA-166_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A pointer to a FILE object shall not be dereferenced by a library function" id="CODSTA-166_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The 'sizeof' operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" id="CODSTA-182" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="CODSTA-185_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not specify the bound of a character array initialized with a string literal" id="CODSTA-197" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="EOS should be used to terminate a string rather than NULL" id="CODSTA-20" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An inline definition of a function with external linkage shall not contain definitions and uses of static objects" id="CODSTA-202" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Literal suffixes shall use uppercase rather than lowercase letters" id="CODSTA-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="CODSTA" desc="Enumeration types shall be used instead of integer types (and constants) as case labels" id="CODSTA-55" sev="2" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Array elements shall be accessed by the array operator [ ]" id="CODSTA-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not define constants via #define" id="CODSTA-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Pointers to pointers should be avoided whenever possible" id="CODSTA-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid using the '?:' operator" id="CODSTA-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a function has no parameters, use ( ) instead of ( void )" id="CODSTA-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not cast pointers to functions to pointers to primitive types" id="CODSTA-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Storage type modifiers shall be associated with the type, not the variable or the function" id="CODSTA-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Signed and unsigned values shall not be mixed in arithmetic operations" id="CODSTA-100" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Signed and unsigned values shall not be mixed in second and third operand of conditional operator" id="CODSTA-101" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA" desc="A single operation with side-effect shall only be used in the proper context" id="CODSTA-102" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="CODSTA" desc="A call of function with side-effect shall only be used in the proper context" id="CODSTA-103" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators" id="CODSTA-104" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" id="CODSTA-107" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The standard header file &lt;tgmath.h> shall not be used" id="CODSTA-108" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The facilities that are specified as being provided by &lt;tgmath.h> should not be used" id="CODSTA-108_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="1;" cat="CODSTA" desc="The Standard Library input/output functions shall not be used" id="CODSTA-110" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The union keyword should not be used" id="CODSTA-111" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Variable-length array types shall not be used" id="CODSTA-112" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Flexible array members shall not be declared" id="CODSTA-113" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assembly language shall be encapsulated and isolated in C/C++ functions" id="CODSTA-114" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="CODSTA-116" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Octal and hexadecimal escape sequences shall be terminated" id="CODSTA-117" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="CODSTA" desc="A declaration shall be visible when an object or function with external linkage is defined" id="CODSTA-118" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="CODSTA-119" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid using shift operations instead of arithmetic operations" id="CODSTA-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An inline function shall be declared with the static storage class" id="CODSTA-120" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The restrict type qualifier shall not be used" id="CODSTA-121" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="35;" authUrg="0;" cat="CODSTA" desc="The value returned by a function having non-void return type shall be used" id="CODSTA-122_a" sev="3" total="35" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value returned by a function having non-void return type shall be used" id="CODSTA-122_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Conversions shall not be performed between a pointer to a function and any other type than pointer to function" id="CODSTA-124_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Conversions shall not be performed between non compatible pointer to a function types" id="CODSTA-124_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="CODSTA-125" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A cast shall not be performed between a pointer to object type and a pointer to a different object type" id="CODSTA-126" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A cast shall not be performed between pointer to void and an arithmetic type" id="CODSTA-129_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An implicit conversion shall not be performed between pointer to void and an arithmetic type" id="CODSTA-129_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc=">, >=, &lt;, &lt;= shall not be applied to pointer types except where they point to the same array" id="CODSTA-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="CODSTA-130" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA" desc="Use NULL instead of literal zero (0) as the null-pointer-constant" id="CODSTA-131" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A macro shall not be defined with the same name as a keyword in C90" id="CODSTA-133_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A macro shall not be defined with the same name as a keyword in C99" id="CODSTA-133_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="Type casting from any type to or from pointers shall not be used" id="CODSTA-135" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The identifiers va_list, va_arg, va_start, va_end, va_copy should not be used" id="CODSTA-136_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The identifiers va_list, va_arg, va_start, va_end should not be used" id="CODSTA-136_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The function call shall not be the operand of the sizeof operator" id="CODSTA-137" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The result of a built-in assignment operator should not be used" id="CODSTA-138" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Pointer subtraction shall only be applied to pointers that address elements of the same array" id="CODSTA-13_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Never convert consts to non-consts" id="CODSTA-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Initializer lists shall not contain persistent side effects" id="CODSTA-141_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA" desc="Functions which are called with array argument shall not be declared with pointer parameter" id="CODSTA-142_b" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Suspicious use of 'strcpy' without checking size of source buffer" id="CODSTA-143" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The values returned by functions 'read' and 'readlink' shall be used" id="CODSTA-144" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use of possibly not null-terminated string with functions expecting null-terminated string" id="CODSTA-145" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A value returned from a stdio character-oriented I/O function should not be implicitly converted to a type smaller than 'int'" id="CODSTA-146" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Pointer should not be compared with NULL using relational operators &lt;, >, >=, &lt;=" id="CODSTA-147" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use string literals as operands of equality or relational operators" id="CODSTA-148" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Missing break statement between cases in a switch statement" id="CODSTA-149" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assertions should not contain assignments, increment, or decrement operators" id="CODSTA-150" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid side effects in arguments to unsafe macros" id="CODSTA-150_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of a composite expression shall not be cast to a different essential type category or a wider essential type" id="CODSTA-152" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An external object or function shall not have more than one non-defining declaration in translation unit" id="CODSTA-154" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use typedefs from stdint.h instead of declaring your own in C99 code" id="CODSTA-155" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="CODSTA-156_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="CODSTA-156_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="CODSTA-157" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Function types shall have named parameters" id="CODSTA-158" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="1;" cat="CODSTA" desc="Function types shall be in prototype form" id="CODSTA-159" sev="3" total="10" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="CODSTA-161_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="CODSTA-161_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="CODSTA-161_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="CODSTA-161_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="CODSTA-161_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" id="CODSTA-161_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="CODSTA-161_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" id="CODSTA-162" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="CODSTA-163_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="CODSTA-163_b" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="CODSTA-164_a" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The second and third operands of the ternary operator shall have the same essential type category" id="CODSTA-164_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not cast from or to essentially Boolean type" id="CODSTA-165_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A loop counter in a 'for' loop shall not have essentially floating type" id="CODSTA-167_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A loop counter in 'while' and 'do-while' loops shall not have essentially floating type" id="CODSTA-167_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" id="CODSTA-168" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The first clause of a 'for' loop shall be well-formed" id="CODSTA-169_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The second clause of a 'for' loop shall be well-formed" id="CODSTA-169_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The third clause of a 'for' statement shall be well-formed" id="CODSTA-169_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="Do not use NULL identifier; use 0 instead" id="CODSTA-17" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c90)" id="CODSTA-170_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c99)" id="CODSTA-170_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The name of a macro should be distinct from the names of its parameters(c90)" id="CODSTA-171_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The name of a macro should be distinct from the names of its parameters(c99)" id="CODSTA-171_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c90)" id="CODSTA-172_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c99)" id="CODSTA-172_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="CODSTA-174_a_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="CODSTA-174_a_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="CODSTA-174_b_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="CODSTA-174_b_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="External identifiers shall be distinct" id="CODSTA-178" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c90)" id="CODSTA-179_a_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c99)" id="CODSTA-179_a_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers declared in the same block scope and name space shall be distinct (c90)" id="CODSTA-179_b_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers declared in the same block scope and name space shall be distinct (c99)" id="CODSTA-179_b_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers that define objects or functions with external linkage shall be unique" id="CODSTA-180" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types" id="CODSTA-183" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" id="CODSTA-184" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Strings pointed by members of the structure 'lconv' should not be modified" id="CODSTA-185_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" id="CODSTA-186" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Cast characters to unsigned char before assignment to larger integer sizes" id="CODSTA-187_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An expressions of the 'signed char' type should not be used as an array index" id="CODSTA-187_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Cast characters to unsigned char before converting to larger integer sizes" id="CODSTA-187_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not confuse narrow and wide character strings and functions" id="CODSTA-188" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not add or subtract a scaled integer to a pointer" id="CODSTA-189" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use the ctype.h facilities for character test" id="CODSTA-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use object representations to compare floating-point values" id="CODSTA-190" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Wrap functions that can spuriously wake up in a loop" id="CODSTA-191" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The final member of a structure should not be an array of size '0' or '1'" id="CODSTA-192" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Allocate structures containing a flexible array member dynamically" id="CODSTA-193" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Wrap functions that can fail spuriously in a loop" id="CODSTA-194" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not refer to an atomic variable twice in an expression" id="CODSTA-195" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not access an array in the result of a function call" id="CODSTA-196" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of a complex expression of floating type should not be cast to a wider floating type" id="CODSTA-198" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of a complex expression of floating type should not be cast to an integer type" id="CODSTA-198_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use assertions" id="CODSTA-199" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Explicitly specify array bounds in array declarations with initializers" id="CODSTA-200" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not process structured text data natively" id="CODSTA-201" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Functions declared as 'noreturn' shall have the 'void' return type" id="CODSTA-204" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not cast an array to the pointer to a structure of a larger size than the size of the array" id="CODSTA-205" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Noreturn' function specifier should not be used" id="CODSTA-206" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The &lt;stdnoreturn.h> header file should not be used" id="CODSTA-207" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The &lt;stdalign.h> header file shall not be used" id="CODSTA-208" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The facilities that are specified as being provided by &lt;stdatomic.h> should not be used" id="CODSTA-209" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Thread_local' storage class specifier should not be used" id="CODSTA-210" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The facilities that are specified as being provided by &lt;threads.h> should not be used" id="CODSTA-211" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The 'rsize_t' type should not be used" id="CODSTA-212" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Alignas' alignment specifier and the '_Alignof' operator should not be used" id="CODSTA-213" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Atomic' type specifier and the '_Atomic' type qualifier should not be used" id="CODSTA-214" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0'" id="CODSTA-215" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Generic' operator should not be used" id="CODSTA-216" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The 'errno_t' type should not be used" id="CODSTA-217" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S" id="CODSTA-218" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use the functions defined in Annex K of ISO/IEC 9899:2011 standard" id="CODSTA-219" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Arguments of integer-constant macros should be decimal, octal, or hexadecimal constants with appropriate values" id="CODSTA-220" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not include any type qualifiers in the specification of a function type" id="CODSTA-221" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid implicit integral conversions from a wider to a narrower type" id="CODSTA-222" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="26;" authUrg="0;" cat="CODSTA" desc="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" id="CODSTA-223" sev="3" total="26" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The conditional operator should not be used as a sub-expression" id="CODSTA-224" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA" desc="All 'if' statements should have an 'else' clause" id="CODSTA-23" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid magic numbers" id="CODSTA-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="CODSTA" desc="Avoid functions that modify global variables" id="CODSTA-27" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="CODSTA" desc="&quot;#define&quot; or enum constants should be used instead of hard coded values whenever possible" id="CODSTA-29" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid returning handles to function parameters" id="CODSTA-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA" desc="Avoid explicit type conversions (casts)" id="CODSTA-31" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="Do not write logical expressions of the type if(test) or if(!test)  when test is a pointer" id="CODSTA-32" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use operator ++ or -- in the conditional expression of if, while, or switch" id="CODSTA-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use a typedef to simplify program syntax when declaring function pointers" id="CODSTA-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Always provide a default branch for switch statements" id="CODSTA-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Pass built-in-types by value unless you are modifying them" id="CODSTA-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Prefer const objects or enums to #defines for simple constants" id="CODSTA-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use a #define that prevents the compiler from checking types" id="CODSTA-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="0;" cat="CODSTA" desc="'void' should be used when a function is passed or returns no values" id="CODSTA-40" sev="3" total="10" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="All structures should be typedef'd" id="CODSTA-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use the following digraphs: &lt;%, %>, &lt;:, :>, %:, %:%:" id="CODSTA-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Null initialize or increment expressions in for loops will not be used; a while loop will be used instead" id="CODSTA-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Hexadecimal constants will be represented using all uppercase letters" id="CODSTA-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter" id="CODSTA-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop" id="CODSTA-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Every switch statement will have at least two cases and a potential default" id="CODSTA-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="All 'case' and 'default' labels of 'switch' statement should have an explicit 'break' or a 'return' statement, or 'fall through' comment" id="CODSTA-56" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid comparing values with TRUE macro/enum constant using equality operators (&quot;==&quot;, &quot;!=&quot;)" id="CODSTA-60" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The final clause of a switch statement shall be the default-clause unless all enumeration values are tested" id="CODSTA-61" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="CODSTA-62" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="CODSTA-63" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="CODSTA-64" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA" desc="An object with integer type or pointer to void type shall not be converted to an object with pointer type" id="CODSTA-65" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Non-constant operands to a binary bitwise operator shall have the same underlying type" id="CODSTA-66" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" id="CODSTA-67" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" id="CODSTA-68" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary &amp; operator" id="CODSTA-69" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Expressions with type enum shall not be used as operands to built-in operators other than  [ ],  =, ==, !=, &lt;, &lt;=, >, >=, and the unary &amp; operator" id="CODSTA-70" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="CODSTA-71" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assembler instructions shall only be introduced using the asm declaration" id="CODSTA-73" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Bit-fields shall not have enum type" id="CODSTA-74" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Bit-fields shall be either bool type or an explicitly unsigned or signed integral type" id="CODSTA-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The identifier main shall not be used for a function other than the global function main" id="CODSTA-76" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The goto statement shall jump to a label declared later in the same function body" id="CODSTA-77" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="CODSTA-78" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="CODSTA-79" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The continue statement shall only be used within a well formed for loop" id="CODSTA-80" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a function has internal linkage then all re-declarations shall include the 'static' storage class specifier" id="CODSTA-81" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid infinite loops" id="CODSTA-82" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use empty infinite loops" id="CODSTA-82_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="All loops must have a fixed upper or lower bound" id="CODSTA-83" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA" desc="Avoid exit points within infinite loops" id="CODSTA-85" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="CODSTA" desc="The validity of parameters must be checked inside each function" id="CODSTA-86" sev="3" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use no more than one level of dereferencing" id="CODSTA-87" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Function pointers are not permitted" id="CODSTA-88" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA" desc="The declaration should not contain more than one level of pointer indirection" id="CODSTA-89" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Each operand of a logical '&amp;&amp;' or '||' shall be a postfix-expression" id="CODSTA-90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA" desc="A function shall have at most one exit point" id="CODSTA-91" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The names of standard library macros and objects shall not be reused" id="CODSTA-92" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="CODSTA-92_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)" id="CODSTA-92_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="2;" cat="CODSTA" desc="Do not declare pointer or array type" id="CODSTA-94" sev="3" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="11;" authUrg="0;" cat="CODSTA" desc="Do not declare pointer type" id="CODSTA-95" sev="3" total="11" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Bit-fields shall have explicitly unsigned integral or enumeration types only" id="CODSTA-96" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used" id="CODSTA-97" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="All 'if...else if' constructs will contain either a final else clause or a comment indicating why a final else clause is not necessary" id="CODSTA-98" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Signed and unsigned values shall not be mixed in comparison operations" id="CODSTA-99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The second or third operand of a ternary operator '?:' shall not contain side effects" id="CODSTA-105" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The exception handling features of &lt;fenv.h> should not be used" id="CODSTA-109" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="CODSTA-115" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA" desc="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects" id="CODSTA-123" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A conversion should not be performed between a pointer to object and an integer type" id="CODSTA-127" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t'" id="CODSTA-127_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA" desc="A conversion should not be performed from pointer to void into pointer to object" id="CODSTA-128" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A function parameter should not be modified" id="CODSTA-132" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" id="CODSTA-134" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use enumerations in boolean condition" id="CODSTA-151" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The cast operation to essentially enumeration type is not allowed" id="CODSTA-165_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use casts between essentially character types and essentially floating types" id="CODSTA-165_c" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A function should not contain unused type declarations" id="CODSTA-175_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A source file should not contain unused type declarations" id="CODSTA-175_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A function should not contain unused local tag declarations" id="CODSTA-176_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A source file should not contain unused tag declarations" id="CODSTA-176_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A source file should not contain unused macro definitions" id="CODSTA-177" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The +, -, += and -= operators should not be applied to an expression of pointer type" id="CODSTA-181" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid switch statements with only one case" id="CODSTA-41" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Suspicious use of semicolon" id="CODSTA-57" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Cast to void is not allowed" id="CODSTA-58" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Hardcoded array declarations and 'malloc' calls should not be used" id="CODSTA-59" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not declare member variables as bit-fields" id="CODSTA-02" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA" desc="Do not declare local variables with the 'static' keyword" id="CODSTA-04" sev="5" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assert liberally to document internal assumptions and invariants" id="CODSTA-11" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assertions should not contain function calls nor function-like macro calls" id="CODSTA-150_b" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Prefer while statements over do statements" id="CODSTA-18" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="28;" authUrg="0;" cat="CODSTA" desc="Do not hard code string literals" id="CODSTA-203" sev="5" total="28" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="When using enum, the values of each member should be explicitly declared" id="CODSTA-21" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The macro FALSE should be defined as 0 (zero)" id="CODSTA-24" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The enumeration constant named 'FALSE' should be explicitly initialized by 0 value" id="CODSTA-25" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Define fields for union declarations" id="CODSTA-28" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The macro TRUE should be defined as 1" id="CODSTA-42" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The enumeration constant named 'TRUE' should be explicitly initialized by 1 value" id="CODSTA-43" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use positive logic rather than negative logic whenever practical" id="CODSTA-46" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The names of standard library functions shall not be overridden" id="CODSTA-93" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Constructors allowing for conversion should be made explicit" id="CODSTA-CPP-04" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use user-defined conversion functions" id="CODSTA-CPP-05" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The first operand of a conditional-operator shall have type bool" id="CODSTA-CPP-65" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Declare at least one constructor to prevent the compiler from doing so" id="CODSTA-CPP-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Arrays shall not be used in interfaces" id="CODSTA-CPP-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Private and protected methods shall not declare parameters with array type" id="CODSTA-CPP-55_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Copy operations must not mutate the source object" id="CODSTA-CPP-98" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type" id="CODSTA-CPP-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Bitwise operators, comparison operators, logical operators, comma operator should be const" id="CODSTA-CPP-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid returning handles to class data from member functions" id="CODSTA-CPP-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Postfix increment and decrement should be implemented in terms of their prefix counterparts" id="CODSTA-CPP-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid overloading logical operators AND, OR (&amp;&amp;, ||)" id="CODSTA-CPP-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid using reinterpret_cast" id="CODSTA-CPP-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not define structs that contain member functions" id="CODSTA-CPP-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not compare objects of a class that may contain padding bits with C standard library functions" id="CODSTA-CPP-100" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A relational operator shall return a boolean value" id="CODSTA-CPP-101" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A binary arithmetic operator and a bitwise operator shall return a 'prvalue'" id="CODSTA-CPP-102" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Output parameters shall not be used" id="CODSTA-CPP-103" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The operand of the 'typeid' operator shall not contain any expression that has side effects" id="CODSTA-CPP-104" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The operand of the 'typeid' operator shall not contain a function call that causes side effects" id="CODSTA-CPP-104_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Define special members as =default when the behavior is equivalent to the compiler's behavior" id="CODSTA-CPP-105" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Use delegating constructors to reduce code duplication" id="CODSTA-CPP-106" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Comparison operators shall be non-member functions" id="CODSTA-CPP-107" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Comparison operators shall be non-member functions with identical parameter types and noexcept" id="CODSTA-CPP-107_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer C++-style casts" id="CODSTA-CPP-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Put classes that are used as base classes and classes that are used as member variables into separate include files" id="CODSTA-CPP-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Put classes that are used as function return type into separate include files" id="CODSTA-CPP-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Put classes that are used as argument types in function prototypes into separate include files" id="CODSTA-CPP-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Put functions that are used in the body of inline member function into separate include file" id="CODSTA-CPP-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="When two operators are opposites (such as == and !=), it is appropriate to define both" id="CODSTA-CPP-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use the 'struct' keyword to declare a variable in C++" id="CODSTA-CPP-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If you'd like to support mixed-mode operations make operators a non-member functions" id="CODSTA-CPP-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid making any assignment operator virtual. Do not return const T&amp; from assignment operator" id="CODSTA-CPP-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Consider making virtual functions nonpublic, and public functions nonvirtual" id="CODSTA-CPP-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Keep types and functions in separate namespaces unless they're specifically intended to work together" id="CODSTA-CPP-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Keep a type and its nonmember function interface in the same namespace" id="CODSTA-CPP-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="When binary arithmetic operators are defined  ( + , - , * , / , ^ , % , | , &amp; ), assignment versions should be provided too" id="CODSTA-CPP-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer the canonical forms of arithmetic and assignment operators" id="CODSTA-CPP-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer non-member operators than member ones to support mixed-mode arithmetic" id="CODSTA-CPP-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A function definition should not be placed in a class specification unless the function is intended to be inlined" id="CODSTA-CPP-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Member functions shall not be defined within the template class definition" id="CODSTA-CPP-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid using static_cast on pointers" id="CODSTA-CPP-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid dynamic_casts" id="CODSTA-CPP-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The global namespace shall only contain main() and namespace declarations" id="CODSTA-CPP-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not define class/struct/union inside function implementation" id="CODSTA-CPP-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Conversion operator, operator->, operator(), operator[] should be const" id="CODSTA-CPP-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Don't write namespace usings in a header file or before an #include" id="CODSTA-CPP-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use the 'enum' keyword to declare a variable in C++" id="CODSTA-CPP-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not declare member variables with the 'mutable' keyword" id="CODSTA-CPP-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Declare reference parameters as const references whenever possible" id="CODSTA-CPP-43" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Have the non-const version call the const version of member function instead of duplicating the const version definition" id="CODSTA-CPP-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="In the private section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others" id="CODSTA-CPP-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Order of scopes in class: public before all others" id="CODSTA-CPP-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Order of scopes in classes: protected before private" id="CODSTA-CPP-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="In the protected section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others" id="CODSTA-CPP-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="In the public section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others" id="CODSTA-CPP-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use static keyword except inside functions and classes" id="CODSTA-CPP-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not define inline functions in source files" id="CODSTA-CPP-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Consider using the natural relationship between the assignment version of an operator and the stand-alone version" id="CODSTA-CPP-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="12;" authUrg="0;" cat="CODSTA-CPP" desc="Declare parameters or local variable as const whenever possible" id="CODSTA-CPP-53" sev="3" total="12" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Member functions shall be declared const whenever possible" id="CODSTA-CPP-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A class, structure, or enumeration will not be declared in the definition of its type" id="CODSTA-CPP-56" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Namespaces will not be nested more than two levels deep" id="CODSTA-CPP-57" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="CODSTA-CPP-58" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The C library shall not be used" id="CODSTA-CPP-59" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used" id="CODSTA-CPP-60" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used" id="CODSTA-CPP-60_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="NULL shall not be used as an integer value" id="CODSTA-CPP-62" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="CODSTA-CPP-63" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The condition of an if-statement and the condition of an iteration-statement shall have type bool" id="CODSTA-CPP-64" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="CODSTA-CPP-66" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" id="CODSTA-CPP-67" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The unary &amp; operator shall not be overloaded" id="CODSTA-CPP-68" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A for loop shall contain a single loop-counter which shall not have floating type" id="CODSTA-CPP-69" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" id="CODSTA-CPP-70" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop" id="CODSTA-CPP-71" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A loop-control-variable other than the loop-counter shall not be modified within condition or expression" id="CODSTA-CPP-72" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A loop-control-variable other than the loop-counter which is modified in statement shall have type bool" id="CODSTA-CPP-73" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="There shall be no unnamed namespaces in header files" id="CODSTA-CPP-74" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="using-directives shall not be used" id="CODSTA-CPP-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier" id="CODSTA-CPP-76" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Const member functions shall not return non-const pointers or references to class-data" id="CODSTA-CPP-77" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="CODSTA-CPP-78" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Neither operand of an equality operator (== or !=) shall be a pointer to a virtual member function" id="CODSTA-CPP-79" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid overloading comma operator &quot;,&quot;" id="CODSTA-CPP-80" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid unencapsulated global variables (including variables declared in namespaces and public static members)" id="CODSTA-CPP-82" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Identifiers declared in a local scope should not hide identifiers declared in a class scope" id="CODSTA-CPP-83" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope" id="CODSTA-CPP-84" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope" id="CODSTA-CPP-85" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If two opposite equality operators ('==', '!=') are defined in a class, one shall be defined in terms of the other" id="CODSTA-CPP-86" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="CODSTA-CPP-87_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="CODSTA-CPP-87_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="CODSTA-CPP-87_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The name of typedef should not be the same as the name of its basic type" id="CODSTA-CPP-88" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" id="CODSTA-CPP-90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="CODSTA-CPP-91" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="All accessible entity names within a multiple inheritance hierarchy should be unique" id="CODSTA-CPP-92" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not initialize objects with a non-trivial class type using C standard library functions" id="CODSTA-CPP-93" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not compare objects of nonstandard-layout class type with C standard library functions" id="CODSTA-CPP-94" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not modify the standard namespaces 'std' and 'posix'" id="CODSTA-CPP-95" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not call a function with a mismatched language linkage" id="CODSTA-CPP-96" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Never qualify a reference type with 'const' or 'volatile'" id="CODSTA-CPP-97" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Use offsetof() on valid types and members" id="CODSTA-CPP-99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer non-member non-friend functions to member functions" id="CODSTA-CPP-22" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Classes which have only getters/setters (accessors/mutators) are not allowed" id="CODSTA-CPP-81" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not assign enumerations to bool" id="CODSTA-CPP-89" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer iostream.h to stdio.h" id="CODSTA-CPP-01" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Encapsulate global variables and constants, enumerated types, and typedefs in a class" id="CODSTA-CPP-18" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Assignment operator must return const reference" id="CODSTA-CPP-21" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Whenever a global function  is  referenced, use the :: operator" id="CODSTA-CPP-23" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use the keyword 'explicit' for a constructor" id="CODSTA-CPP-31" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Limiting the number of objects of a class" id="CODSTA-CPP-40" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer lambdas over std::bind, std::bind1st and std::bind2nd" id="CODSTA-MCPP-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer 'auto' to explicit type names in variable declarations" id="CODSTA-MCPP-08_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer 'auto' to explicit type names for function return types" id="CODSTA-MCPP-08_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="All std::hash specializations for user-defined types shall have a noexcept function call operator" id="CODSTA-MCPP-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="User-conversion cast operators should be made explicit" id="CODSTA-MCPP-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer alias declarations to typedefs" id="CODSTA-MCPP-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer Scoped Enums to Unscoped Enums" id="CODSTA-MCPP-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Each overriding virtual function shall be declared with the override or final specifier" id="CODSTA-MCPP-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Declare copy constructor and copy assignment operators with the 'delete' specifier to prevent copying of class" id="CODSTA-MCPP-06_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Declare copy constructor and copy assignment operators with the 'delete' specifier instead of using a base class with private methods to prevent copying of class" id="CODSTA-MCPP-06_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The 'binder1st' and 'binder2nd' identifiers should not be used" id="CODSTA-MCPP-07_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Declare functions 'noexcept' if they will not emit exceptions" id="CODSTA-MCPP-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer const iterators to iterators" id="CODSTA-MCPP-10_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer to use cbegin(), crbegin, cend(), crend() functions" id="CODSTA-MCPP-10_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use std::move() on rvalue references and std::forward() on forwarding references" id="CODSTA-MCPP-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The 'std::forward' function shall be used to forward universal references" id="CODSTA-MCPP-13_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid Overloading on Forwarding References" id="CODSTA-MCPP-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid default capture modes" id="CODSTA-MCPP-15_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use the 'this' pointer explicitly in lambdas with a default by-reference capture" id="CODSTA-MCPP-15_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer 'std::make_shared' to the direct use of new" id="CODSTA-MCPP-16_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer to use std::unique_ptr instead of std::auto_ptr" id="CODSTA-MCPP-16_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="'std::make_unique' shall be used to construct objects owned by 'std::unique_ptr'" id="CODSTA-MCPP-16_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Never return lambdas that capture local objects by reference" id="CODSTA-MCPP-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Never capture local objects from an outer lambda by reference" id="CODSTA-MCPP-17_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime" id="CODSTA-MCPP-17_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid unnecessary default capture modes in lambda expressions" id="CODSTA-MCPP-18_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid unnecessary lambda captures" id="CODSTA-MCPP-18_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Declare assignment operators with the ref-qualifier &amp;" id="CODSTA-MCPP-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use explicit ref-qualifiers on auto declarations in range-based 'for' loops" id="CODSTA-MCPP-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="If a public destructor of a class is non-virtual, then the class should be declared final" id="CODSTA-MCPP-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Only one of virtual, override or final should be specified in a member function declaration" id="CODSTA-MCPP-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Digit sequences separators ' shall only be used consistently" id="CODSTA-MCPP-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A pointer to member virtual function shall only be tested for equality with null-pointer-constant" id="CODSTA-MCPP-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A lambda shall not be an operand to typeid" id="CODSTA-MCPP-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use smart pointers when passing a pointer to an object in a thread" id="CODSTA-MCPP-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Consider using 'std::unique_ptr' instead of 'std::shared_ptr' for local objects" id="CODSTA-MCPP-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Define both sized and unsized versions of operator delete" id="CODSTA-MCPP-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Static and thread-local objects shall be constant-initialized" id="CODSTA-MCPP-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="User defined literals operators shall only perform conversion of passed parameters" id="CODSTA-MCPP-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="CODSTA-MCPP-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object" id="CODSTA-MCPP-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr'" id="CODSTA-MCPP-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors" id="CODSTA-MCPP-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Braced-initialization {}, without equals sign, shall be used for variable initialization" id="CODSTA-MCPP-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A variable of type auto shall not be initialized using '{}' or '={}' braced-initialization" id="CODSTA-MCPP-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not overuse 'auto' specifier" id="CODSTA-MCPP-40" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The 'random_shuffle' identifier should not be used" id="CODSTA-MCPP-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not use the increment operator (++) on an operand of type 'bool'" id="CODSTA-MCPP-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The 'set_unexpected' identifier should not be used" id="CODSTA-MCPP-43" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Lambda expressions should not be defined inside another lambda expression" id="CODSTA-MCPP-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Return type of a non-void return type lambda expression should be explicitly specified" id="CODSTA-MCPP-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Include a parameter list in every lambda expression" id="CODSTA-MCPP-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid overloading constructors with std::initializer_list" id="CODSTA-MCPP-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Multiple output values from a function should be returned as a struct or tuple" id="CODSTA-MCPP-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="User-defined copy and move assignment operators should use user-defined no-throw swap function" id="CODSTA-MCPP-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" id="CODSTA-MCPP-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use const container calls when the result is immediately converted to a const iterator" id="CODSTA-MCPP-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not introduce virtual functions in a final class" id="CODSTA-MCPP-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not use std::move on objects declared with the const or const &amp; type" id="CODSTA-MCPP-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not create an rvalue reference of std::array" id="CODSTA-MCPP-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use std::call_once rather than the Double-Checked Locking pattern" id="CODSTA-MCPP-55" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer 'nullptr' over 'NULL' or '0'(zero)" id="CODSTA-MCPP-04" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use constexpr to declare const variables whenever possible" id="CODSTA-MCPP-11_a_cpp11" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use constexpr to declare functions whenever possible" id="CODSTA-MCPP-11_b_cpp11" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer smart pointer members over raw pointer members" id="CODSTA-MCPP-16_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer smart pointers over raw pointers for arrays or STL containers" id="CODSTA-MCPP-16_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer smart pointers over raw local pointers" id="CODSTA-MCPP-20" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not call lock() directly on a mutex" id="CODSTA-MCPP-21" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Line-splicing shall not be used in // comments" id="COMMENT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="25;" authUrg="0;" cat="COMMENT" desc="Prefer C++ style comment" id="COMMENT-01" sev="3" total="25" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="COMMENT" desc="Provide copyright information" id="COMMENT-02" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="COMMENT" desc="Every source file will be documented with an introductory comment that provides information on the file" id="COMMENT-03" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="COMMENT" desc="Document functions in comments that precede function definitions" id="COMMENT-04" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Document functions in comments that precede function declarations" id="COMMENT-04_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="26;" authUrg="0;" cat="COMMENT" desc="Each variable declaration should be commented" id="COMMENT-05" sev="3" total="26" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Each typedef should be commented" id="COMMENT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Each enumeration value should be commented" id="COMMENT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Each structure member variable should be commented" id="COMMENT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="All usage of assembler shall be documented" id="COMMENT-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Use of floating-point arithmetic shall be documented" id="COMMENT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="The character sequence // shall not be used within a C-style comment" id="COMMENT-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="The character sequence /* shall not be used within a C++-style comment" id="COMMENT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="COMMENT" desc="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" id="COMMENT-14" sev="3" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="12;" authUrg="0;" cat="COMMENT" desc="Function parameters and return type should be documented in a comment that precedes the function declaration" id="COMMENT-14_b" sev="3" total="12" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid buffer overflow due to defining incorrect format limits" id="CWE-119-c" origId="BD-PB-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid overflow when reading from a buffer" id="CWE-119-d" origId="BD-PB-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid overflow when writing to a buffer" id="CWE-119-e" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid tainted data in array indexes" id="CWE-119-f" origId="BD-SECURITY-ARRAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Prevent buffer overflows from tainted data" id="CWE-119-g" origId="BD-SECURITY-BUFWRITE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid buffer read overflow from tainted data" id="CWE-119-h" origId="BD-SECURITY-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid buffer write overflow from tainted data" id="CWE-119-i" origId="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CWE-119" desc="Avoid accessing arrays out of bounds" id="CWE-119-a" origId="BD-PB-ARRAY" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid accessing arrays and pointers out of bounds" id="CWE-119-b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-119" desc="Suspicious use of 'strcpy' without checking size of source buffer" id="CWE-119-j" origId="CODSTA-143" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Ensure the output buffer is large enough when using path manipulation functions" id="CWE-119-k" origId="BD-PB-PATHBUF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-125" desc="Avoid overflow when reading from a buffer" id="CWE-125-c" origId="BD-PB-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-125" desc="Avoid buffer read overflow from tainted data" id="CWE-125-d" origId="BD-SECURITY-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CWE-125" desc="Avoid accessing arrays out of bounds" id="CWE-125-a" origId="BD-PB-ARRAY" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-125" desc="Avoid accessing arrays and pointers out of bounds" id="CWE-125-b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-190" desc="Avoid integer overflows" id="CWE-190-a" origId="BD-PB-INTOVERF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Avoid possible integer overflow in expressions in which the result is cast to a wider integer type" id="CWE-190-b" origId="MISRA-048_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" id="CWE-190-c" origId="PB-65" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type" id="CWE-190-d" origId="PB-65_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="CWE-190-e" origId="PB-66_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="CWE-190-f" origId="PB-66_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="CWE-190-g" origId="PB-73" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Avoid tainted data in array indexes" id="CWE-20-a" origId="BD-SECURITY-ARRAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against integer overflow/underflow from tainted data" id="CWE-20-b" origId="BD-SECURITY-INTOVERF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against command injection" id="CWE-20-d" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Avoid printing tainted data on the output console" id="CWE-20-e" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against environment injection" id="CWE-20-f" origId="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Exclude unsanitized user input from format strings" id="CWE-20-g" origId="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against SQL injection" id="CWE-20-h" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against file name injection" id="CWE-20-i" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Avoid passing unvalidated binary data to log methods" id="CWE-20-c" origId="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-20" desc="Untrusted data is used as a loop boundary" id="CWE-20-j" origId="SECURITY-38" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-200" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="CWE-200-a" origId="SECURITY-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-22" desc="Protect against file name injection" id="CWE-22-a" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-269" desc="Observe correct revocation order while relinquishing privileges" id="CWE-269-a" origId="SECURITY-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-269" desc="Ensure that privilege relinquishment is successful" id="CWE-269-b" origId="SECURITY-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-287" desc="Do not use weak encryption functions" id="CWE-287-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-326" desc="Do not use weak encryption functions" id="CWE-326-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-362" desc="Avoid race conditions when using fork and file descriptors" id="CWE-362-d" origId="BD-TRS-FORKFILE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-362" desc="Do not use global variable with different locks set" id="CWE-362-e" origId="BD-TRS-MLOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-362" desc="Usage of functions prone to race is not allowed" id="CWE-362-a" origId="SECURITY-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-362" desc="Avoid race conditions while accessing files" id="CWE-362-b" origId="BD-TRS-FRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-362" desc="Use locks to prevent race conditions when modifying bit fields" id="CWE-362-c" origId="BD-TRS-BITLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-400" desc="Do not create variables on the stack above the defined limits" id="CWE-400-a" origId="BD-RES-STACKLIM" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-415" desc="Do not use resources that have been freed" id="CWE-415-a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-416" desc="Do not use resources that have been freed" id="CWE-416-a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-416" desc="Do not point to a wrapped object that has been freed" id="CWE-416-b" origId="BD-PB-WRAPESC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-416" desc="Freed memory shouldn't be accessed under any circumstances" id="CWE-416-c" origId="MRM-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-426" desc="Use care to ensure that LoadLibrary() will load the correct library" id="CWE-426-a" origId="SECURITY-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="4;" authUrg="0;" cat="CWE-476" desc="Avoid null pointer dereferencing" id="CWE-476-a" origId="BD-PB-NP" sev="1" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="2;" authUrg="0;" cat="CWE-476" desc="Do not check for null after dereferencing" id="CWE-476-b" origId="BD-PB-DEREF" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-532" desc="Avoid passing sensitive data to functions that write to log files" id="CWE-532-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-611" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="CWE-611-a" origId="BD-SECURITY-XXEXRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-617" desc="Do not use assertions" id="CWE-617-a" origId="CODSTA-199" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Conversions shall not be performed between a pointer to a function and any other type than pointer to function" id="CWE-704-a" origId="CODSTA-124_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Conversions shall not be performed between non compatible pointer to a function types" id="CWE-704-b" origId="CODSTA-124_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="CWE-704-c" origId="CODSTA-125" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A cast shall not be performed between a pointer to object type and a pointer to a different object type" id="CWE-704-d" origId="CODSTA-126" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A cast shall not be performed between pointer to void and an arithmetic type" id="CWE-704-g" origId="CODSTA-129_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="An implicit conversion shall not be performed between pointer to void and an arithmetic type" id="CWE-704-h" origId="CODSTA-129_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="CWE-704-i" origId="CODSTA-130" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="CWE-704-j" origId="MISRA-043" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="CWE-704-k" origId="MISRA-043_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="CWE-704-l" origId="MISRA-043_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t'" id="CWE-704-e" origId="CODSTA-127_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CWE-704" desc="A conversion should not be performed from pointer to void into pointer to object" id="CWE-704-f" origId="CODSTA-128" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-732" desc="Specify the access permission bits if a file is created using the 'open' or 'openat' system call" id="CWE-732-b" origId="SECURITY-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-732" desc="Call 'umask' before calling 'mkstemp'" id="CWE-732-a" origId="SECURITY-40" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-770" desc="Validate potentially tainted data before it is used to determine the size of memory allocation" id="CWE-770-a" origId="BD-SECURITY-TDALLOC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-772" desc="Ensure resources are freed" id="CWE-772-a" origId="BD-RES-LEAKS" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-772" desc="Define a virtual destructor in classes used as base classes which have virtual functions" id="CWE-772-b" origId="OOP-22" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-78" desc="Protect against command injection" id="CWE-78-a" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid buffer overflow due to defining incorrect format limits" id="CWE-787-c" origId="BD-PB-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid overflow when writing to a buffer" id="CWE-787-d" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Prevent buffer overflows from tainted data" id="CWE-787-e" origId="BD-SECURITY-BUFWRITE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid buffer write overflow from tainted data" id="CWE-787-f" origId="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CWE-787" desc="Avoid accessing arrays out of bounds" id="CWE-787-a" origId="BD-PB-ARRAY" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid accessing arrays and pointers out of bounds" id="CWE-787-b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Ensure the output buffer is large enough when using path manipulation functions" id="CWE-787-g" origId="BD-PB-PATHBUF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="28;" authUrg="0;" cat="CWE-798" desc="Do not hard code string literals" id="CWE-798-a" origId="CODSTA-203" sev="5" total="28" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-835" desc="Avoid infinite loops" id="CWE-835-a" origId="CODSTA-82" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-863" desc="Do not use 'cuserid' function" id="CWE-863-a" origId="SECURITY-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-89" desc="Protect against SQL injection" id="CWE-89-a" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="EXCEPT-01" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Throw by value, catch by reference" id="EXCEPT-02" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Do not throw from within destructor" id="EXCEPT-03" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="The assignment-expression of a throw statement shall not itself cause an exception to be thrown" id="EXCEPT-11" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="All exceptions should be rethrown or logged with standard logger" id="EXCEPT-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.)" id="EXCEPT-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="EXCEPT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="An empty throw (throw;) shall only be used in the compound-statement of a catch handler" id="EXCEPT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Exceptions shall be raised only after start-up and before termination of the program" id="EXCEPT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="An exception object should not have pointer type" id="EXCEPT-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Control shall not be transferred into a try or catch block using a goto or a switch statement" id="EXCEPT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="NULL shall not be thrown explicitly" id="EXCEPT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="EXCEPT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="EXCEPT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="A class type exception shall always be caught by reference" id="EXCEPT-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="EXCEPT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="EXCEPT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="EXCEPT-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Exception objects must be nothrow copy constructible" id="EXCEPT-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="An explicitly declared copy constructor for a class that inherits from 'std::exception' should have a non-throwing exception specification" id="EXCEPT-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="All user-provided move constructors and move assignment operators shall not exit with an exception" id="EXCEPT-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Checked exceptions that could be thrown from a function shall be specified in the comment directly before the function declaration" id="EXCEPT-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Do not use throw exception specifications" id="EXCEPT-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Where multiple handlers are provided in a single 'try-catch' statement or 'function-try-block', any ellipsis (catch-all) handler shall occur last" id="EXCEPT-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Do not leave 'catch' blocks empty" id="EXCEPT-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Avoid using catch-all exception handlers" id="EXCEPT-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="14;" authUrg="0;" cat="FORMAT" desc="Place an opening brace '{' on its own line" id="FORMAT-02" sev="3" total="14" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="FORMAT" desc="Place a closing brace '}' on its own line" id="FORMAT-03" sev="3" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Physical lines should be less than eighty characters" id="FORMAT-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="The length of a macro should not exceed 10 lines" id="FORMAT-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Only one statement shall be allowed per line" id="FORMAT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding assignment operators" id="FORMAT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following assignment operators" id="FORMAT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding bitwise operators" id="FORMAT-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following bitwise operators" id="FORMAT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding and following bitwise operator '&amp;'" id="FORMAT-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character between a conditional statement keyword and its opening parenthesis" id="FORMAT-12" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a maximum of 1 ASCII space character following the opening parenthesis in conditional statements" id="FORMAT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding ternary conditional operator" id="FORMAT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following ternary conditional operator" id="FORMAT-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding and following relational and equality operators" id="FORMAT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no white space following '.' or '->' operator" id="FORMAT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no white space preceding '.' or '->' operator" id="FORMAT-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following all commas" id="FORMAT-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following all semicolons" id="FORMAT-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There should be no space between a unary operator &quot;!&quot; or &quot;~&quot; and its operand" id="FORMAT-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="FORMAT" desc="There should be no space between a increment/decrement operator (++/--) and its operand" id="FORMAT-22" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="FORMAT" desc="There shall be no white spaces between the 'return' statement or the 'sizeof' operator and the following opening parenthesis" id="FORMAT-23" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no spaces after the opening '(' and before closing ')' parenthesis that enclose the operand of the 'return' statement or the 'sizeof' operator" id="FORMAT-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="The operand of the 'sizeof' operator should be enclosed in parentheses" id="FORMAT-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="FORMAT" desc="Parenthesis shall be used with the &quot;return&quot; statement" id="FORMAT-25_b" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding and following logical operators" id="FORMAT-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Line should be indented by a multiple of four spaces" id="FORMAT-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="FORMAT" desc="In a function definition, the return type of the function should be written on a separate line directly above the function name" id="FORMAT-28" sev="3" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="FORMAT" desc="Multiple variable declarations shall not be allowed on the same line" id="FORMAT-29" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Place left parenthesis directly after function name" id="FORMAT-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Separate logical tests in conditional expressions" id="FORMAT-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="FORMAT" desc="Each variable should be declared in a separate declaration statement" id="FORMAT-33" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="14;" authUrg="0;" cat="FORMAT" desc="Braces &quot;{}&quot; which enclose a block should be placed in the same column" id="FORMAT-34" sev="3" total="14" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="When declaring functions, the leading parenthesis and the first argument are to be written on the same line as the function name" id="FORMAT-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Sibling statement lines should be indented to the same level" id="FORMAT-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="First line in control statement body should be indented more than control statement keyword" id="FORMAT-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="When declaring functions with more than 2 parameters, the leading parenthesis and the first argument are to be written on the same line as the function name, each additional argument will be written on a separate line" id="FORMAT-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="FORMAT" desc="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" id="FORMAT-42" sev="3" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="11;" authUrg="0;" cat="FORMAT" desc="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" id="FORMAT-43" sev="3" total="11" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="FORMAT" desc="Braces (&quot;{}&quot;) which enclose a block will not have an empty line after &quot;{&quot; nor before &quot;}&quot;" id="FORMAT-44" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There should be no space between a unary operator &quot;&amp;&quot;, &quot;*&quot;, &quot;+&quot;, &quot;-&quot; and its operand" id="FORMAT-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There should be no space between an increment/decrement operator (++/--) and its operand in macro definition" id="FORMAT-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="FORMAT" desc="Place CV-qualifiers on the right hand side of the type they apply to" id="FORMAT-47_a" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name" id="FORMAT-47_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Parameter names in function declarations should not be enclosed in parentheses" id="FORMAT-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Local variable names in variable declarations should not be enclosed in parentheses" id="FORMAT-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="FORMAT" desc="The dereference operator '*' and the address-of operator '&amp;' should be directly connected with the type" id="FORMAT-32" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="FORMAT" desc="Sort #include directives in alphabetical order" id="FORMAT-39" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Tabs that do not use ASCII spaces shall not be used" id="FORMAT-01" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="White spaces after the opening square bracket '[' and before its closing square bracket ']' shall be used in consistent way" id="FORMAT-40" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no space between '[' opening square bracket and preceding token" id="FORMAT-41" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="All declarations of an object or function shall have compatible types" id="GLOBAL-COMPATDECLS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="Do not use more than one mutex for concurrent waiting operations on a condition variable" id="GLOBAL-CONDMUTEXVAR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" id="GLOBAL-EXCSPECDECL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="An inline function that is used in multiple translation units shall be defined in one and only one file" id="GLOBAL-ONEDEFINLINE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="The One Definition Rule shall not be violated" id="GLOBAL-ONEDEFRULE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A function template that is used in multiple translation units shall be defined in one and only one file" id="GLOBAL-ONEDEFTEMPL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A type that is used in multiple translation units shall be defined in one and only one file" id="GLOBAL-ONEDEFTYPE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="An identifier with external linkage shall have exactly one external definition" id="GLOBAL-ONEEXTERNDEF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="GLOBAL-ONEFILEDECL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A project shall not contain non-volatile POD variables having only one use" id="GLOBAL-ONEUSEVAR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="The identifier name of a non-member object with static storage duration shall not be reused within a namespace" id="GLOBAL-REUSEDQUALGLOBVAR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="The identifier name of a non-member static function shall not be reused within a namespace" id="GLOBAL-REUSEDQUALSTATFUN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="All class templates, function templates, class template member functions and class template static members shall be instantiated at least one" id="GLOBAL-TEMPLNOINST" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A class, union or enum name (including qualification, if any) shall be a unique identifier" id="GLOBAL-UNIQUETYPE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A typedef name (including qualification, if any) shall be a unique identifier" id="GLOBAL-UNIQUETYPEDEF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="1;" authUrg="0;" cat="GLOBAL" desc="Every defined function with external linkage shall be used at least once" id="GLOBAL-UNUSEDFUNC" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A project shall not contain unused type declarations" id="GLOBAL-UNUSEDTYPE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="There shall be no unused parameters (named or unnamed) in the set of parameters for a virtual function and all the functions that override it" id="GLOBAL-UNUSEDVIRTPARAM" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A base class shall only be declared virtual if it is used in a diamond hierarchy" id="GLOBAL-VIRTBASECLASS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="6;" authUrg="0;" cat="GLOBAL" desc="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" id="GLOBAL-AVOIDEXTERN" sev="4" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-10_1_1" desc="For multiple inheritance use virtual common base class" id="HICPP-10_1_1-a" origId="OOP-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-10_2_1" desc="Each overriding virtual function shall be declared with the override or final specifier" id="HICPP-10_2_1-a" origId="CODSTA-MCPP-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-10_3_1" desc="Be wary about using multiple inheritance of classes that are not abstract interfaces" id="HICPP-10_3_1-a" origId="OOP-07" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-11_1_1" desc="Avoid &quot;public&quot; data members" id="HICPP-11_1_1-a" origId="OOP-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-11_1_1" desc="Avoid 'protected' data members" id="HICPP-11_1_1-b" origId="OOP-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-11_2_1" desc="Avoid using the friend mechanism" id="HICPP-11_2_1-a" origId="OOP-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_1_1" desc="Constructors allowing for conversion should be made explicit" id="HICPP-12_1_1-a" origId="CODSTA-CPP-04" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_1_1" desc="User-conversion cast operators should be made explicit" id="HICPP-12_1_1-b" origId="CODSTA-MCPP-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_2_1" desc="Make destructors virtual in base classes" id="HICPP-12_2_1-a" origId="OOP-24" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_3_1" desc="Write operator delete if you write operator new" id="HICPP-12_3_1-a" origId="MRM-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_3_1" desc="Write operator delete[] if you write operator new[]" id="HICPP-12_3_1-b" origId="MRM-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-12_4_1" desc="Do not use dynamic type of an object under construction" id="HICPP-12_4_1-b" origId="BD-PB-VCTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-12_4_1" desc="Do not use dynamic type of an object under destruction" id="HICPP-12_4_1-c" origId="BD-PB-VDTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_4_2" desc="All member variables should be initialized in constructor" id="HICPP-12_4_2-a" origId="INIT-06" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_4_3" desc="Do not specify both an NSDMI and a member initializer in a constructor for the same non-static member" id="HICPP-12_4_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_4_4" desc="List members in an initialization list in the order in which they are declared" id="HICPP-12_4_4-a" origId="INIT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_4_5" desc="Use delegating constructors to reduce code duplication" id="HICPP-12_4_5-a" origId="CODSTA-CPP-106" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_1" desc="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" id="HICPP-12_5_1-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_2" desc="Define special members as =default when the behavior is equivalent to the compiler's behavior" id="HICPP-12_5_2-a" origId="CODSTA-CPP-105" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_3" desc="A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member" id="HICPP-12_5_3-a" origId="OOP-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_4" desc="All user-provided move constructors and move assignment operators shall not exit with an exception" id="HICPP-12_5_4-a" origId="EXCEPT-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_6" desc="User-defined copy and move assignment operators should use user-defined no-throw swap function" id="HICPP-12_5_6-a" origId="CODSTA-MCPP-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_7" desc="Declare assignment operators with the ref-qualifier &amp;" id="HICPP-12_5_7-a" origId="CODSTA-MCPP-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_8" desc="The copy assignment operator shall be declared protected or private in an abstract class" id="HICPP-12_5_8-a" origId="OOP-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_1_1" desc="Write a using declaration to redeclare overloaded functions" id="HICPP-13_1_1-a" origId="OOP-17" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_1_2" desc="Avoid Overloading on Forwarding References" id="HICPP-13_1_2-a" origId="CODSTA-MCPP-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_1" desc="Avoid overloading logical operators AND, OR (&amp;&amp;, ||)" id="HICPP-13_2_1-a" origId="CODSTA-CPP-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_1" desc="Avoid overloading comma operator &quot;,&quot;" id="HICPP-13_2_1-b" origId="CODSTA-CPP-80" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_2" desc="A relational operator shall return a boolean value" id="HICPP-13_2_2-a" origId="CODSTA-CPP-101" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_2" desc="A binary arithmetic operator and a bitwise operator shall return a 'prvalue'" id="HICPP-13_2_2-b" origId="CODSTA-CPP-102" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_3" desc="Declare binary arithmetic and bitwise operators as non-members" id="HICPP-13_2_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_4" desc="When overloading the subscript operator (operator[]), implement both const and non-const versions" id="HICPP-13_2_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_5" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="HICPP-13_2_5-a" origId="CODSTA-CPP-91" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-14_1_1" desc="Do not use functions with variable numbers of arguments" id="HICPP-14_1_1-a" origId="MISRA-069" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-14_2_1" desc="All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template" id="HICPP-14_2_1-a" origId="TEMPL-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-14_2_2" desc="Overloaded function templates shall not be explicitly specialized" id="HICPP-14_2_2-a" origId="TEMPL-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-14_2_3" desc="Declare 'extern' an explicitly instantiated template" id="HICPP-14_2_3-a" origId="TEMPL-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-15_1_1" desc="Only use instances of std::exception for exceptions" id="HICPP-15_1_1-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-15_1_1" desc="Always throw the created std::exception object" id="HICPP-15_1_1-b" origId="BD-PB-STDEXC" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-15_2_1" desc="Do not throw from within destructor" id="HICPP-15_2_1-a" origId="EXCEPT-03" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-15_3_1" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="HICPP-15_3_1-a" origId="EXCEPT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-15_3_2" desc="Always catch exceptions" id="HICPP-15_3_2-a" origId="BD-PB-EXCEPT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-15_3_2" desc="Avoid throwing exceptions from functions that are declared not to throw" id="HICPP-15_3_2-c" origId="BD-PB-NOEXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-15_3_2" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="HICPP-15_3_2-b" origId="EXCEPT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="Avoid using macro definitions" id="HICPP-16_1_1-a" origId="PREPROC-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="HICPP-16_1_1-b" origId="PREPROC-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="HICPP-16_1_1" desc="The #ifdef, #else, #elif preprocessor directives should not be used" id="HICPP-16_1_1-c" origId="PREPROC-11" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="Use multiple include guards" id="HICPP-16_1_1-d" origId="PFO-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-16_1_1" desc="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" id="HICPP-16_1_1-e" origId="PREPROC-10_b" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="HICPP-16_1_1-f" origId="PREPROC-10_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="#error directive shall not be used" id="HICPP-16_1_1-g" origId="PREPROC-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="The #pragma directive shall not be used" id="HICPP-16_1_1-h" origId="PREPROC-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="#undef shall not be used" id="HICPP-16_1_1-i" origId="PREPROC-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_2" desc="Do not allow absolute or relative path names in #include statements" id="HICPP-16_1_2-a" origId="PREPROC-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_2" desc="The \ character should not occur in a header file name" id="HICPP-16_1_2-b" origId="NAMING-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_3" desc="Match the filename in a #include directive to the one on the filesystem" id="HICPP-16_1_3-a" origId="PREPROC-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_4" desc="Use &lt;> brackets for system and standard library headers. Use quotes for all other headers" id="HICPP-16_1_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="0;" authUrg="0;" cat="HICPP-16_1_5" desc="Avoid duplication of #include directives" id="HICPP-16_1_5-a" origId="CDD-DUPI" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_1_1" desc="Avoid using vector&lt;bool>" id="HICPP-17_1_1-a" origId="STL-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_2_1" desc="The error indicator 'errno' shall not be used" id="HICPP-17_2_1-b" origId="MISRA2004-20_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="HICPP-17_2_1" desc="Wrap use of the C Standard Library" id="HICPP-17_2_1-a" sev="4" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_3_1" desc="Do not use std::move on objects declared with the const or const &amp; type" id="HICPP-17_3_1-a" origId="CODSTA-MCPP-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_3_2" desc="The 'std::forward' function shall be used to forward universal references" id="HICPP-17_3_2-a" origId="CODSTA-MCPP-13_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-17_3_3" desc="Do not subsequently use the argument to std::forward" id="HICPP-17_3_3-a" origId="BD-PB-SUBSEQFRWD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_3_4" desc="Do not create smart pointers of array type" id="HICPP-17_3_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_3_5" desc="Do not create an rvalue reference of std::array" id="HICPP-17_3_5-a" origId="CODSTA-MCPP-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_4_1" desc="Use const container calls when the result is immediately converted to a const iterator" id="HICPP-17_4_1-a" origId="CODSTA-MCPP-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_4_2" desc="Prefer 'std::make_shared' to the direct use of new" id="HICPP-17_4_2-a" origId="CODSTA-MCPP-16_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_5_1" desc="Follow remove-like algorithms by erase to remove elements from a container" id="HICPP-17_5_1-a" origId="STL-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_1_1" desc="Do not use platform-specific multi-threading facilities" id="HICPP-18_1_1-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_2_1" desc="Use high_integrity::thread in place of std::thread" id="HICPP-18_2_1-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-18_2_2" desc="Do not use global variable with different locks set" id="HICPP-18_2_2-a" origId="BD-TRS-MLOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-18_2_2" desc="Make const member functions thread-safe" id="HICPP-18_2_2-b" origId="BD-TRS-CMF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_2_3" desc="Do not share volatile data between threads" id="HICPP-18_2_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_2_4" desc="Use std::call_once rather than the Double-Checked Locking pattern" id="HICPP-18_2_4-a" origId="CODSTA-MCPP-55" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-18_3_1" desc="Avoid double locking" id="HICPP-18_3_1-a" origId="BD-TRS-DLOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-18_3_2" desc="Do not acquire locks in different order" id="HICPP-18_3_2-a" origId="BD-TRS-ORDER" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_3_3" desc="Do not use std::recursive_mutex" id="HICPP-18_3_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_3_4" desc="Only use std::unique lock when std::lock guard cannot be used" id="HICPP-18_3_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_3_5" desc="Do not access the members of std::mutex directly" id="HICPP-18_3_5-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_3_6" desc="Do not use relaxed atomics" id="HICPP-18_3_6-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_4_1" desc="Do not use std::condition_variable_any on a std::mutex" id="HICPP-18_4_1-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="HICPP-1_2_1" desc="Avoid conditions that always evaluate to the same value" id="HICPP-1_2_1-i" origId="BD-PB-CC" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="Avoid switch with unreachable branches" id="HICPP-1_2_1-j" origId="BD-PB-SWITCH" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code in &quot;else&quot; block" id="HICPP-1_2_1-a" origId="MISRA2004-14_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="HICPP-1_2_1-b" origId="MISRA2004-14_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="HICPP-1_2_1-c" origId="MISRA2004-14_1_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code in switch statement" id="HICPP-1_2_1-d" origId="MISRA2004-14_1_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code in 'for' loop" id="HICPP-1_2_1-e" origId="MISRA2004-14_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="HICPP-1_2_1-f" origId="MISRA2004-14_1_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="HICPP-1_2_1-g" origId="MISRA2004-14_1_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="Avoid unreachable methods" id="HICPP-1_2_1-h" origId="BD-PB-UCMETH" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_2" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="HICPP-1_2_2-a" origId="MISRA2004-14_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_3_1" desc="Do not use the increment operator (++) on an operand of type 'bool'" id="HICPP-1_3_1-a" origId="CODSTA-MCPP-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_3_2" desc="The 'register' storage class specifier shall not be used" id="HICPP-1_3_2-a" origId="MISRA-028" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_3_3" desc="The C library shall not be used" id="HICPP-1_3_3-a" origId="CODSTA-CPP-59" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_3_4" desc="Do not use deprecated STL library features" id="HICPP-1_3_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_3_5" desc="Do not use throw exception specifications" id="HICPP-1_3_5-a" origId="EXCEPT-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_1_1" desc="Tabs that do not use ASCII spaces shall not be used" id="HICPP-2_1_1-a" origId="FORMAT-01" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_2_1" desc="Do not use the following digraphs: &lt;%, %>, &lt;:, :>, %:, %:%:" id="HICPP-2_2_1-a" origId="CODSTA-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_2_1" desc="Trigraphs shall not be used" id="HICPP-2_2_1-b" origId="MISRA2004-4_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="25;" authUrg="0;" cat="HICPP-2_3_1" desc="Prefer C++ style comment" id="HICPP-2_3_1-a" origId="COMMENT-01" sev="3" total="25" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_3_2" desc="Do not use comments to remove sections of code" id="HICPP-2_3_2-a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_4_1" desc="Different identifiers shall be typographically unambiguous" id="HICPP-2_4_1-a" origId="NAMING-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_5_1" desc="String literals with different encoding prefixes shall not be concatenated" id="HICPP-2_5_1-a" origId="PB-38_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_5_2" desc="Octal constants (other than zero) shall not be used" id="HICPP-2_5_2-a" origId="MISRA2004-7_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_5_3" desc="Prefer 'nullptr' over 'NULL' or '0'(zero)" id="HICPP-2_5_3-a" origId="CODSTA-MCPP-04" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="HICPP-3_1_1-a" origId="MISRA2004-5_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="HICPP-3_1_1-b" origId="MISRA2004-5_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifiers declared in a local scope should not hide identifiers declared in a class scope" id="HICPP-3_1_1-c" origId="CODSTA-CPP-83" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope" id="HICPP-3_1_1-d" origId="CODSTA-CPP-84" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope" id="HICPP-3_1_1-e" origId="CODSTA-CPP-85" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_2_1" desc="Always declare functions at file scope" id="HICPP-3_2_1-a" origId="MISRA2004-8_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="HICPP-3_3_1" desc="Do not use variables with static storage duration" id="HICPP-3_3_1-a" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_1" desc="The address of an object with automatic storage shall not be returned from a function" id="HICPP-3_4_1-a" origId="MISRA2004-17_6_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_2" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="HICPP-3_4_2-a" origId="MISRA2004-17_6_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_3" desc="Prefer smart pointers over raw local pointers" id="HICPP-3_4_3-a" origId="CODSTA-MCPP-20" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_3" desc="Do not call lock() directly on a mutex" id="HICPP-3_4_3-b" origId="CODSTA-MCPP-21" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_3" desc="Use RAII to prevent resource leaks" id="HICPP-3_4_3-c" origId="MRM-52" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-3_5_1" desc="Do not subtract two pointers that do not address elements of the same array" id="HICPP-3_5_1-c" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-3_5_1" desc="Do not compare two unrelated pointers" id="HICPP-3_5_1-d" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_5_1" desc="Unions shall not be used" id="HICPP-3_5_1-a" origId="MISRA2004-18_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="HICPP-3_5_1" desc="typedefs should be used in place of the basic types" id="HICPP-3_5_1-b" origId="MISRA2004-6_3_b" sev="3" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_1_1" desc="An identifier with array type passed as a function argument shall not decay to a pointer" id="HICPP-4_1_1-a" origId="PB-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="HICPP-4_1_1" desc="Do not pass expression with array type to a function with pointer or array type parameter" id="HICPP-4_1_1-b" origId="PB-41_b" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-4_2_1" desc="Apply the U suffix to literals used in a context that requires an unsigned integral expression" id="HICPP-4_2_1-a" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="Avoid incorrect shift operations" id="HICPP-4_2_2-f" origId="BD-PB-BADSHIFT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="HICPP-4_2_2-a" origId="MISRA2004-12_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="HICPP-4_2_2" desc="Avoid explicit type conversions (casts)" id="HICPP-4_2_2-b" origId="CODSTA-31" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="HICPP-4_2_2-c" origId="PB-66_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="Avoid integer overflows" id="HICPP-4_2_2-e" origId="BD-PB-INTOVERF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="HICPP-4_2_2-d" origId="PB-66_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_3_1" desc="Avoid implicit conversions from wider to narrower floating type" id="HICPP-4_3_1-a" origId="MISRA2004-10_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_3_1" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="HICPP-4_3_1-b" origId="MISRA2004-10_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_4_1" desc="Avoid implicit conversions from floating to integral type" id="HICPP-4_4_1-a" origId="MISRA2004-10_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_1" desc="Avoid magic numbers" id="HICPP-5_1_1-a" origId="CODSTA-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Don't write code that depends on the order of evaluation of function arguments" id="HICPP-5_1_2-b" origId="MISRA2004-12_2_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="HICPP-5_1_2-a" origId="MISRA2004-12_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="HICPP-5_1_2-c" origId="MISRA2004-12_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="HICPP-5_1_2-d" origId="MISRA2004-12_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="HICPP-5_1_2-e" origId="MISRA2004-12_2_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Do not use more than one volatile between two adjacent sequence points" id="HICPP-5_1_2-f" origId="MISRA2004-12_2_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Don't write code that depends on the order of evaluation of function calls" id="HICPP-5_1_2-g" origId="MISRA2004-12_2_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-5_1_2" desc="The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" id="HICPP-5_1_2-h" origId="MISRA2004-12_13" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="The comma operator shall not be used" id="HICPP-5_1_2-i" origId="MISRA2004-12_10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="The result of a built-in assignment operator should not be used" id="HICPP-5_1_2-j" origId="CODSTA-138" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_3" desc="Use parentheses unless all operators in the expression are the same" id="HICPP-5_1_3-a" origId="MISRA2004-12_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_3" desc="The operands of a logical &amp;&amp; or || shall be primary-expressions" id="HICPP-5_1_3-b" origId="MISRA2004-12_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_4" desc="Do not capture variables implicitly in a lambda" id="HICPP-5_1_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_5" desc="Include a parameter list in every lambda expression" id="HICPP-5_1_5-a" origId="CODSTA-MCPP-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="HICPP-5_1_6-a" origId="MISRA2004-12_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="HICPP-5_1_6-b" origId="MISRA2004-12_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="HICPP-5_1_6-c" origId="MISRA2004-12_3_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="HICPP-5_1_6-d" origId="MISRA2004-12_4_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The operand of the 'typeid' operator shall not contain any expression that has side effects" id="HICPP-5_1_6-e" origId="CODSTA-CPP-104" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The operand of the 'typeid' operator shall not contain a function call that causes side effects" id="HICPP-5_1_6-f" origId="CODSTA-CPP-104_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="4;" authUrg="0;" cat="HICPP-5_2_1" desc="Avoid null pointer dereferencing" id="HICPP-5_2_1-c" origId="BD-PB-NP" sev="1" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="HICPP-5_2_1" desc="Avoid accessing arrays out of bounds" id="HICPP-5_2_1-a" origId="BD-PB-ARRAY" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-5_2_1" desc="Avoid accessing arrays and pointers out of bounds" id="HICPP-5_2_1-b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_2_2" desc="Functions shall not call themselves, either directly or indirectly" id="HICPP-5_2_2-a" origId="MISRA2004-16_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-5_2_2" desc="Do not use recursion" id="HICPP-5_2_2-b" origId="BD-PB-RECFUN" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_3_1" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="HICPP-5_3_1-a" origId="MISRA2004-12_9" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_3_2" desc="Do not use calloc, malloc, realloc and free functions" id="HICPP-5_3_2-a" origId="MRM-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-5_3_3" desc="Properly deallocate dynamically allocated resources" id="HICPP-5_3_3-c" origId="BD-RES-BADDEALLOC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_3_3" desc="Never provide brackets ([]) for delete when deallocating non-arrays" id="HICPP-5_3_3-a" origId="MRM-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_3_3" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="HICPP-5_3_3-b" origId="MRM-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_4_1" desc="Prefer C++-style casts" id="HICPP-5_4_1-a" origId="CODSTA-CPP-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_4_1" desc="Avoid using reinterpret_cast" id="HICPP-5_4_1-b" origId="CODSTA-CPP-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_4_1" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="HICPP-5_4_1-c" origId="MISRA2004-11_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_4_2" desc="Do not cast an expression to an enumeration type" id="HICPP-5_4_2-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_4_3" desc="Down casting (casting from base to derived class) shall not be allowed" id="HICPP-5_4_3-a" origId="OOP-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-5_5_1" desc="Avoid division by zero" id="HICPP-5_5_1-a" origId="BD-PB-ZERO" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_6_1" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="HICPP-5_6_1-a" origId="CODSTA-63" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_7_1" desc="Floating-point expressions shall not be tested for equality or inequality" id="HICPP-5_7_1-a" origId="MISRA2004-13_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_7_2" desc="A pointer to member virtual function shall only be tested for equality with null-pointer-constant" id="HICPP-5_7_2-a" origId="CODSTA-MCPP-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_8_1" desc="The conditional operator should not be used as a sub-expression" id="HICPP-5_8_1-a" origId="CODSTA-224" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_1" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="HICPP-6_1_1-a" origId="MISRA2004-14_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_1" desc="'if' and 'else' should be followed by a compound statement" id="HICPP-6_1_1-b" origId="MISRA2004-14_9" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_2" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="HICPP-6_1_2-a" origId="MISRA2004-14_10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_2" desc="The final clause of a switch statement shall be the default clause" id="HICPP-6_1_2-b" origId="MISRA2004-15_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_3" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="HICPP-6_1_3-a" origId="CODSTA-64" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_4" desc="Every switch statement will have at least two cases and a potential default" id="HICPP-6_1_4-a" origId="CODSTA-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_4" desc="A switch expression shall not represent a value that is effectively Boolean" id="HICPP-6_1_4-b" origId="MISRA2004-15_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_2_1" desc="A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" id="HICPP-6_2_1-a" origId="CODSTA-MCPP-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_2_2" desc="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" id="HICPP-6_2_2-a" origId="CODSTA-168" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_2_3" desc="Do not modify for loop counter within a body of the loop" id="HICPP-6_2_3-a" origId="MISRA2004-13_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_2_4" desc="The third clause of a 'for' statement shall be well-formed" id="HICPP-6_2_4-a" origId="CODSTA-169_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_3_1" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="HICPP-6_3_1-a" origId="MISRA2004-15_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_3_1" desc="The goto statement shall jump to a label declared later in the same function body" id="HICPP-6_3_1-b" origId="CODSTA-77" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_3_1" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="HICPP-6_3_1-c" origId="CODSTA-78" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_3_2" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="HICPP-6_3_2-a" origId="MISRA2004-16_8_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-6_4_1" desc="Declare variables as locally as possible" id="HICPP-6_4_1-a" origId="OPT-01" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_4_1" desc="Postpone variable definitions as long as possible" id="HICPP-6_4_1-b" origId="OPT-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="HICPP-7_1_1" desc="Multiple variable declarations shall not be allowed on the same line" id="HICPP-7_1_1-a" origId="FORMAT-29" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="HICPP-7_1_1" desc="Each variable should be declared in a separate declaration statement" id="HICPP-7_1_1-b" origId="FORMAT-33" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_10" desc="Use static_assert for assertions involving compile time constants" id="HICPP-7_1_10-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="12;" authUrg="0;" cat="HICPP-7_1_2" desc="Declare parameters or local variable as const whenever possible" id="HICPP-7_1_2-a" origId="CODSTA-CPP-53" sev="3" total="12" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_3" desc="Do not place type specifiers before non-type specifiers in a declaration" id="HICPP-7_1_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-7_1_4" desc="Place CV-qualifiers on the right hand side of the type they apply to" id="HICPP-7_1_4-a" origId="FORMAT-47_a" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_5" desc="Do not inline large functions" id="HICPP-7_1_5-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_6" desc="The plain char type shall be used only for the storage and use of character values" id="HICPP-7_1_6-a" origId="MISRA2004-6_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="HICPP-7_1_6" desc="Use class types or typedefs to abstract scalar quantities and standard integer types" id="HICPP-7_1_6-b" sev="3" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_6" desc="Use class types or typedefs to abstract scalar quantities and standard integer types" id="HICPP-7_1_6-c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_7" desc="Use a trailing return type syntax if the return type is preceded by the 'typename' keyword" id="HICPP-7_1_7-a" origId="TEMPL-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="HICPP-7_1_8" desc="Use auto id = expr when declaring a variable that is the same type as the initializer function call" id="HICPP-7_1_8-a" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_9" desc="Do not explicitly specify the return type of a lambda" id="HICPP-7_1_9-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_2_1" desc="Use an explicit enumeration base and ensure that it is large enough to store all enumerators" id="HICPP-7_2_1-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_2_2" desc="Initialize all, only the first, or none of the enumerators in an enumeration" id="HICPP-7_2_2-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_3_1" desc="using-directives shall not be used" id="HICPP-7_3_1-a" origId="CODSTA-CPP-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_4_1" desc="Do not use static keyword except inside functions and classes" id="HICPP-7_4_1-a" origId="CODSTA-CPP-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="HICPP-7_4_2" desc="An inline function that is used in multiple translation units shall be defined in one and only one file" id="HICPP-7_4_2-a" origId="GLOBAL-ONEDEFINLINE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="HICPP-7_4_2" desc="A function template that is used in multiple translation units shall be defined in one and only one file" id="HICPP-7_4_2-b" origId="GLOBAL-ONEDEFTEMPL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="HICPP-7_4_2" desc="A type that is used in multiple translation units shall be defined in one and only one file" id="HICPP-7_4_2-c" origId="GLOBAL-ONEDEFTYPE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="HICPP-7_4_3" desc="A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="HICPP-7_4_3-a" origId="GLOBAL-ONEFILEDECL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_5_1" desc="Do not use the asm declaration" id="HICPP-7_5_1-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-8_1_1" desc="The declaration should not contain more than one level of pointer indirection" id="HICPP-8_1_1-a" origId="CODSTA-89" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_2_1" desc="The identifiers used in the declaration and definition of a function shall be identical" id="HICPP-8_2_1-a" origId="MISRA2004-16_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_2_2" desc="Avoid functions with more than 5 parameters" id="HICPP-8_2_2-a" origId="METRICS-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_2_3" desc="Pass small objects with a trivial copy constructor by value" id="HICPP-8_2_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_2_3" desc="Pass small objects with a trivial copy constructor by value" id="HICPP-8_2_3-b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_2_4" desc="Do not pass std::unique_ptr by const reference" id="HICPP-8_2_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_3_1" desc="Follow the Cyclomatic Complexity limit of 10" id="HICPP-8_3_1-a" origId="METRICS-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_3_3" desc="Do not use default arguments" id="HICPP-8_3_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_3_4" desc="Define rvalue reference functions that have a const parameter as =delete" id="HICPP-8_3_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-8_4_1" desc="Avoid use before initialization" id="HICPP-8_4_1-a" origId="BD-PB-NOTINIT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-8_4_1" desc="Do not use resources that have been freed" id="HICPP-8_4_1-b" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_4_1" desc="All automatic variables shall have been assigned a value before being used" id="HICPP-8_4_1-c" origId="MISRA-030" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_4_2" desc="The initializer for an aggregate or union shall be enclosed in braces" id="HICPP-8_4_2-a" origId="INIT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_1_1" desc="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="HICPP-9_1_1-a" origId="CODSTA-CPP-78" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_1_2" desc="Do not redefine an inherited virtual function with a different default parameter value" id="HICPP-9_1_2-a" origId="OOP-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_1_3" desc="Const member functions shall not return non-const pointers or references to class-data" id="HICPP-9_1_3-a" origId="CODSTA-CPP-77" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_1_4" desc="Public member functions shall not return non-const handles to private/protected class-data" id="HICPP-9_1_4-a" origId="OOP-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_1_5" desc="Do not introduce virtual functions in a final class" id="HICPP-9_1_5-a" origId="CODSTA-MCPP-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_2_1" desc="Bit-fields shall have explicitly unsigned integral or enumeration types only" id="HICPP-9_2_1-a" origId="CODSTA-96" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not initialize a reference to an object whose address can be changed" id="INIT-05" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="All member variables should be initialized in constructor" id="INIT-06" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Initialize static class members" id="INIT-09" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not use uninitialized nonstatic member variables in base class constructors" id="INIT-13_a" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not use uninitialized nonstatic member variables of nonvirtual base classes in virtual base class constructors" id="INIT-13_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="INIT" desc="Initialize all pointer variables" id="INIT-04" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="An assignment operator shall assign all data members" id="INIT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Objects with external linkage should not be initialized in a header file" id="INIT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not initialize unsigned integer variables with signed constants" id="INIT-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="11;" authUrg="0;" cat="INIT" desc="Initialize all variables" id="INIT-03" sev="3" total="11" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Make class members' initialization explicit by providing user-defined constructor" id="INIT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="User-defined constructor must be provided to ensure the proper initialization of dynamically allocated class objects" id="INIT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="List members in an initialization list in the order in which they are declared" id="INIT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Avoid initialization order problems across translation units by replacing non-local static objects with local static objects" id="INIT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not assume that members are initialized in any special order in constructors" id="INIT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not use possibly uninitialized nonstatic member variables of base classes in base class constructors" id="INIT-13_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="The initializer for an aggregate or union shall be enclosed in braces" id="INIT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="User-defined constructors that initialize data members with the same constant values across all constructors should initialize using NSDMI instead" id="INIT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Consider adding constructor to initialize 'struct' member variables" id="INIT-15" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Prefer initialization to assignment in constructors" id="INIT-14" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All functions shall have a cyclomatic complexity number of 20 or less" id="JSF-003" origId="METRICS-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="Follow the Essential Complexity limit of 1" id="JSF-003_b" origId="METRICS-42" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Capital 'L' shall be used instead of lowercase 'l' to indicate long" id="JSF-014" origId="PORT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="JSF" desc="Ensure that array indices are within the bounds of the array" id="JSF-015" origId="MISRA-004_a" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The error indicator 'errno' shall not be used" id="JSF-017" origId="MISRA2004-20_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The macro 'offsetof', in library &lt;stddef.h>, shall not be used" id="JSF-018" origId="MISRA2004-20_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="'setlocale' function shall not be used" id="JSF-019" origId="MISRA-121_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="&lt;locale.h> shall not be used" id="JSF-019_b" origId="MISRA-121_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The 'setjmp' macro and the 'longjmp' function shall not be used" id="JSF-020" origId="MISRA2004-20_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The standard header file &lt;setjmp.h> shall not be used" id="JSF-020_b" origId="MISRA2004-20_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The standard header file &lt;signal.h> shall not be used" id="JSF-021" origId="MISRA2004-20_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="JSF-021_b" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="1;" cat="JSF" desc="The input/output library &lt;stdio.h> shall not be used" id="JSF-022" origId="PREPROC-18" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="The library functions atof, atoi and atol from library &lt;stdlib.h> shall not be used" id="JSF-023" origId="MISRA2004-20_10" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The library function 'abort' of &lt;stdlib.h> shall not be used" id="JSF-024" origId="PB-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The library function 'exit' of &lt;stdlib.h> shall not be used" id="JSF-024_b" origId="PB-75_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The library function 'getenv' of &lt;stdlib.h> shall not be used" id="JSF-024_c" origId="SECURITY-52" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The library function 'system' of &lt;stdlib.h> shall not be used" id="JSF-024_d" origId="SECURITY-48_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The time handling functions of library &lt;time.h> shall not be used" id="JSF-025" origId="MISRA2004-20_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="JSF" desc="The #ifdef, #else, #elif preprocessor directives should not be used" id="JSF-026" origId="PREPROC-11" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The #if preprocessor directive should not be used" id="JSF-026_b" origId="PREPROC-11_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="#error directive shall not be used" id="JSF-026_c" origId="PREPROC-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The #pragma directive shall not be used" id="JSF-026_d" origId="PREPROC-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="#undef shall not be used" id="JSF-026_e" origId="PREPROC-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The #define pre-processor directive shall not be used to create inline macros" id="JSF-029" origId="MISRA2004-19_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The #define pre-processor directive shall not be used to define constant values" id="JSF-030" origId="CODSTA-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="0;" cat="JSF" desc="The #include directive shall use the &lt;filename.h> notation to include header files" id="JSF-033" origId="PREPROC-09" sev="2" total="13" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="User-specified C++ external identifiers should differ in the first 64 characters" id="JSF-046_a" origId="PORT-34_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="User-specified C++ internal identifiers should differ from external identifiers in the first 64 characters" id="JSF-046_b" origId="PORT-34_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="User-specified C++ internal identifiers declared in the same scope should differ in the first 64 characters" id="JSF-046_c" origId="PORT-34_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers for constant and enumerator values shall be lowercase" id="JSF-052" origId="NAMING-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The following character sequences shall not appear in header file names: ', \, /*, //, or &quot; " id="JSF-053.1" origId="PB-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The statements forming the body of a 'while', 'do...while', 'switch' or 'for' statement shall always be enclosed in braces" id="JSF-059_a" origId="MISRA2004-14_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The statements forming the body of an 'if', 'else if' or 'else' statement shall always be enclosed in braces" id="JSF-059_b" origId="MISRA2004-14_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Declare both private copy constructor and copy assignment operator at the same time" id="JSF-068" origId="MRM-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Freed memory shall not be accessed under any circumstances" id="JSF-070.1" origId="MRM-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Destructor shall not be called manually" id="JSF-070.1_b" origId="MRM-31_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Public and protected methods shall not be invoked by class constructor" id="JSF-071" origId="PB-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A class's virtual functions shall not be invoked from any of its constructors" id="JSF-071.1" origId="OOP-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A class's virtual functions shall not be invoked from its destructor" id="JSF-071.1_b" origId="OOP-16_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All member variables shall be initialized in constructor" id="JSF-071_b" origId="INIT-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A class's virtual functions shall not be invoked from any of its constructors" id="JSF-071_c" origId="OOP-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Uninitialized nonstatic member variables shall not be used in base class constructors" id="JSF-071_d" origId="INIT-13_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Uninitialized nonstatic member variables of nonvirtual base classes shall not be used in virtual base class constructors" id="JSF-071_e" origId="INIT-13_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Possibly uninitialized nonstatic member variables of base classes shall not be used in base class constructors" id="JSF-071_f" origId="INIT-13_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Members of the initialization list shall be listed in the order in which they are declared in the class" id="JSF-075" origId="INIT-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A copy constructor and a copy assignment operator shall be declared for classes that contain pointers to data items or nontrivial destructors" id="JSF-076" origId="MRM-49" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A copy constructor shall copy all data members and bases" id="JSF-077" origId="MRM-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The definition of a constructor shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor" id="JSF-077.1" origId="PB-24" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All base classes with a virtual function shall define a virtual destructor" id="JSF-078" origId="OOP-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Call fclose() on pointer member in destructor if the pointer was used to open a file" id="JSF-079" origId="MRM-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Call delete on pointer members in destructors" id="JSF-079_b" origId="MRM-33" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The assignment operator shall handle self-assignment correctly" id="JSF-081" origId="OOP-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An assignment operator shall return a reference to *this" id="JSF-082" origId="CODSTA-CPP-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An assignment operator shall assign all data members" id="JSF-083_a" origId="INIT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An assignment operator shall assign all data bases" id="JSF-083_b" origId="MRM-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Multiple inheritance shall be limited to at most 1 protected implementation" id="JSF-088" origId="OOP-07_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A stateful virtual base shall be explicitly declared in each derived class that accesses it" id="JSF-088.1" origId="OOP-39_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Multiple inheritance shall not use any public implementations" id="JSF-088_b" origId="OOP-07_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A base class shall not be both virtual and non-virtual in the same hierarchy" id="JSF-089" origId="OOP-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An inherited nonvirtual function shall not be redefined in a derived class" id="JSF-094" origId="OOP-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Member functions declared in derived class shall not hide functions declared in base classes" id="JSF-094_b" origId="OOP-53" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An inherited default parameter shall never be redefined" id="JSF-095" origId="OOP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arrays shall not be treated polymorphically" id="JSF-096" origId="PB-57" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arrays shall not be used in interfaces" id="JSF-097" origId="CODSTA-CPP-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Neither operand of an equality operator (== or !=) shall be a pointer to a virtual member function" id="JSF-097.1" origId="CODSTA-CPP-79" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arrays shall not be used in private or protected methods" id="JSF-097_b" origId="CODSTA-CPP-55_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arrays shall not be used in global functions" id="JSF-097_c" origId="CODSTA-142" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="JSF" desc="Arrays shall not be passed to functions as array/pointer parameters" id="JSF-097_d" origId="PB-41_b" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="Functions which are called with array argument shall not be declared with pointer parameter" id="JSF-097_e" origId="CODSTA-142_b" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions shall always be declared at file scope" id="JSF-107" origId="MISRA2004-8_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions with variable numbers of arguments shall not be used" id="JSF-108" origId="MISRA-069" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A function shall not return a pointer or reference to a non-static local object" id="JSF-111" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A function shall not return a pointer or a reference to a parameter that is passed by const reference" id="JSF-111_a" origId="PB-39_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All exit points of value-returning functions shall be through return statements" id="JSF-114" origId="MISRA2004-16_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions shall not call themselves, either directly or indirectly" id="JSF-119" origId="MISRA2004-16_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="25;" authUrg="0;" cat="JSF" desc="Only valid C++ style comments (//) shall be used" id="JSF-126" origId="COMMENT-01" sev="2" total="25" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Code that is not used (commented out) shall be deleted" id="JSF-127" origId="MISRA2004-2_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="JSF-135_a" origId="MISRA2004-5_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers declared in an inner local scope shall not hide identifiers declared in an outer local scope" id="JSF-135_b" origId="MISRA2004-5_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers declared in a local scope shall not hide identifiers declared in a class scope" id="JSF-135_c" origId="CODSTA-CPP-83" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers declared in a class scope shall not hide identifiers declared in a global or namespace scope" id="JSF-135_d" origId="CODSTA-CPP-84" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers declared in an inner class scope shall not hide identifiers declared in outer class scope" id="JSF-135_e" origId="CODSTA-CPP-85" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers shall not simultaneously have both internal and external linkage in the same translation unit" id="JSF-138_a" origId="MISRA-024" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" id="JSF-138_b" origId="MISRA2004-8_11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The register storage class specifier shall not be used" id="JSF-140" origId="MISRA-028" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All automatic variables shall have been assigned a value before being used" id="JSF-142_a" origId="MISRA-030" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="11;" authUrg="0;" cat="JSF" desc="All variables shall be initialized before use" id="JSF-142_b" origId="INIT-03" sev="2" total="11" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" id="JSF-144" origId="INIT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="In an enumerator list, the '=' construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized" id="JSF-145" origId="MISRA2004-9_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The underlying bit representations of floating point numbers shall not be used in any way by the programmer" id="JSF-147" origId="MISRA-016" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="JSF" desc="Enumeration types shall be used instead of integer types (and constants) to select from a limited series of choices" id="JSF-148" origId="CODSTA-55" sev="2" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Octal constants (other than zero) shall not be used" id="JSF-149" origId="MISRA2004-7_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="26;" authUrg="0;" cat="JSF" desc="A string literal shall not be modified" id="JSF-151.1" origId="PB-27" sev="2" total="26" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="JSF" desc="Multiple variable declarations shall not be allowed on the same line" id="JSF-152" origId="FORMAT-29" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Unions shall not be used" id="JSF-153" origId="MISRA2004-18_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Bit-fields shall have explicitly unsigned integral or enumeration types only" id="JSF-154" origId="CODSTA-96" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All the members of a structure (or class) shall be named" id="JSF-156" origId="MISRA-113" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The right hand operand of a &amp;&amp; or || operator shall not contain side effects" id="JSF-157" origId="MISRA2004-12_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators" id="JSF-158" origId="CODSTA-104" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Operators ||, &amp;&amp; shall not be overloaded" id="JSF-159" origId="CODSTA-CPP-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Operator unary &amp; shall not be overloaded" id="JSF-159_b" origId="CODSTA-CPP-68" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An assignment expression shall be used only as the expression in an expression statement" id="JSF-160" origId="MISRA2004-13_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Signed and unsigned values shall not be mixed in comparison operations" id="JSF-162_a" origId="CODSTA-99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Signed and unsigned values shall not be mixed in second and third operand of conditional operator" id="JSF-162_b" origId="CODSTA-101" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Signed and unsigned values shall not be mixed in arithmetic operations" id="JSF-162_c" origId="CODSTA-100" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="Unsigned arithmetic shall not be used" id="JSF-163" origId="PB-25" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="JSF" desc="The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the left-hand operand" id="JSF-164" origId="BD-PB-BADSHIFT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The left-hand operand of a right-shift operator shall not have a negative value" id="JSF-164.1" origId="PB-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The unary minus operator shall not be applied to an unsigned expression" id="JSF-165" origId="MISRA2004-12_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't assign the dividend of two integers to a floating-point type" id="JSF-167_a" origId="PB-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The comma operator shall not be used" id="JSF-168_b" origId="MISRA2004-12_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="More than 2 levels of pointer indirection shall not be used" id="JSF-170" origId="MISRA2004-17_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="JSF" desc="Relational operators shall not be applied to pointer types except where they point to the same array" id="JSF-171" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The address of an object with automatic storage shall not be assigned to an object which persists after the object has ceased to exist" id="JSF-173" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The null pointer shall not be de-referenced" id="JSF-174_a" origId="MISRA-107_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="The null pointer shall not be de-referenced" id="JSF-174_b" origId="MISRA-107_b" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="NULL identifier shall not be used; use plain 0 instead" id="JSF-175" origId="CODSTA-17" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Down casting (casting from base to derived class) shall not be allowed" id="JSF-178" origId="OOP-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A pointer to a virtual base class shall not be converted to a pointer to a derived class" id="JSF-179" origId="OOP-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="JSF-180_a" origId="MISRA-043" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid implicit conversions from floating to integral type" id="JSF-180_b" origId="MISRA2004-10_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid implicit conversions from wider to narrower floating type" id="JSF-180_c" origId="MISRA2004-10_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid conversions of constant values to a narrower type" id="JSF-180_d" origId="PORT-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="Avoid implicit conversions from signed to unsigned type" id="JSF-180_e" origId="PB-56" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="JSF-180_f" origId="MISRA-043_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="JSF-180_g" origId="MISRA-043_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="Type casting from any type to or from pointers shall not be used" id="JSF-182" origId="CODSTA-135" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Floating point numbers shall not implicitly be converted to integers" id="JSF-184_a" origId="MISRA2004-10_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="JSF-185" origId="CODSTA-CPP-66" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code in 'else' block" id="JSF-186_a" origId="MISRA2004-14_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="JSF-186_b" origId="MISRA2004-14_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code in 'if', 'else', 'while' and 'for' block" id="JSF-186_c" origId="MISRA2004-14_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code in 'switch' statement" id="JSF-186_d" origId="MISRA2004-14_1_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code in 'for' loop" id="JSF-186_e" origId="MISRA2004-14_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="JSF-186_f" origId="MISRA2004-14_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code after 'if' or 'switch' statement inside 'while', 'for' or 'do...while' loop" id="JSF-186_g" origId="MISRA2004-14_1_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Every defined function with internal linkage shall be used" id="JSF-186_h" origId="OPT-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All non-null statements shall potentially have a side-effect" id="JSF-187" origId="MISRA2004-14_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The goto statement shall not be used" id="JSF-189" origId="MISRA2004-14_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The continue statement shall not be used" id="JSF-190" origId="MISRA2004-14_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="The break statement shall not be used (except to terminate the cases of a switch statement)" id="JSF-191" origId="MISRA-058" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="JSF-191_a" origId="CODSTA-79" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Every non-empty case clause in a switch statement shall be terminated with a break statement" id="JSF-193" origId="MISRA2004-15_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All switch statements that do not intend to test for every enumeration value shall contain a final default clause" id="JSF-194" origId="CODSTA-61" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Floating point variables shall not be used as loop counters" id="JSF-197" origId="MISRA-065" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Numeric variables being used within a for loop for iteration counting shall not be modified in the body of the loop" id="JSF-201" origId="MISRA2004-13_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Floating point variables shall not be tested for exact equality or inequality" id="JSF-202" origId="MISRA2004-13_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Evaluation of expressions shall not lead to overflow/underflow" id="JSF-203" origId="PB-73" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="JSF-204.1_a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write code that depends on the order of evaluation of function arguments" id="JSF-204.1_b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="JSF-204.1_c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="JSF-204.1_d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="JSF-204.1_e" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Do not use more than one volatile in one expression" id="JSF-204.1_f" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write code that depends on the order of evaluation of function calls" id="JSF-204.1_g" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="A single operation with side-effect shall only be used in the proper context" id="JSF-204_a" origId="CODSTA-102" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="A call of function with side-effect shall only be used in the proper context" id="JSF-204_b" origId="CODSTA-103" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The second or third operand of a ternary operator '?:' shall not contain side effects" id="JSF-204_d" origId="CODSTA-105" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The volatile keyword shall not be used" id="JSF-205" origId="MISRA-046_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="Dynamic heap memory allocation shall not be used" id="JSF-206" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="C++ exceptions shall not be used" id="JSF-208" origId="EXCEPT-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Typedefs that indicate size and signedness shall be used in place of the basic types" id="JSF-209" origId="MISRA2004-6_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="JSF" desc="Typedefs that indicate size and signedness shall be used in place of the basic types" id="JSF-209_b" origId="MISRA2004-6_3_b" sev="2" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier" id="JSF-210.1" origId="PORT-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Algorithms shall not assume particular memory alignment" id="JSF-211" origId="MISRA2004-11_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used" id="JSF-213_e" origId="CODSTA-97" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Assuming that non-local static objects, in separate translation units, are initialized in a special order shall not be done" id="JSF-214" origId="INIT-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs)" id="JSF-001" origId="METRICS-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Only those characters specified in the C++ basic source character set will be used" id="JSF-009" origId="MISRA-005" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Values of character types will be restricted to a defined and documented subset of ISO 10646-1" id="JSF-010" origId="MISRA-006" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Trigraphs will not be used" id="JSF-011" origId="MISRA2004-4_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The following digraphs will not be used &lt;%, %>, &lt;:, :>, %:, %:%:" id="JSF-012" origId="CODSTA-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Wide string literals (for example L&quot;abc&quot;) will not be used" id="JSF-013" origId="MISRA-008" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="#ifndef, #define and #endif will be used to prevent multiple inclusions of the same header file" id="JSF-027" origId="PFO-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="JSF-028" origId="PREPROC-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" id="JSF-028_b" origId="PREPROC-10_b" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" id="JSF-031" origId="PREPROC-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The #include pre-processor directive will only be used to include header (*.h) files" id="JSF-032" origId="PREPROC-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A header file will contain a mechanism that prevents multiple inclusions of itself" id="JSF-035" origId="PFO-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Header files (*.h) will not contain non-const variable definitions or function definitions" id="JSF-039_a" origId="PFO-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Source lines will be kept to a length of 120 characters or less" id="JSF-041" origId="METRICS-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Each expression-statement will be on a separate line" id="JSF-042" origId="FORMAT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All indentations will be consistent" id="JSF-044" origId="FORMAT-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers will not begin with the underscore character &quot;_&quot;" id="JSF-047" origId="NAMING-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" id="JSF-048" origId="NAMING-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Begin class, struct, union, enum, and typedef names with an uppercase letter" id="JSF-050" origId="NAMING-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All letters contained in function and variable names will be composed entirely of lowercase letters" id="JSF-051" origId="NAMING-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Header files will always have a file name extension of &quot;.h&quot;" id="JSF-053" origId="NAMING-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Implementation files will always have a file name extension of &quot;.cpp&quot;" id="JSF-054" origId="NAMING-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The public section of a class will be declared before the protected section and before the private section" id="JSF-057_a" origId="CODSTA-CPP-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The protected section of a class will be declared before the private section" id="JSF-057_b" origId="CODSTA-CPP-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="When declaring functions with more than 2 parameters, the leading parenthesis and the first argument are to be written on the same line as the function name, each additional argument will be written on a separate line" id="JSF-058" origId="FORMAT-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="JSF" desc="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" id="JSF-060_a" origId="FORMAT-42" sev="3" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="11;" authUrg="0;" cat="JSF" desc="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" id="JSF-060_b" origId="FORMAT-43" sev="3" total="11" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="Braces (&quot;{}&quot;) which enclose a block will not have an empty line after &quot;{&quot; nor before &quot;}&quot;" id="JSF-060_c" origId="FORMAT-44" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="JSF" desc="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" id="JSF-061" origId="FORMAT-42" sev="3" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="The dereference operator '*' and the address-of operator '&amp;' will be directly connected with the type-specifier" id="JSF-062" origId="FORMAT-32" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no white space following '.' or '->' operator" id="JSF-063_a" origId="FORMAT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no white space preceding '.' or '->' operator" id="JSF-063_b" origId="FORMAT-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no space between a unary operator '!' or '~' and its operand" id="JSF-063_c" origId="FORMAT-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="There will be no space between a increment/decrement operator (++/--) and its operand" id="JSF-063_d" origId="FORMAT-22" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no space between a unary operator '&amp;', '*', '+', '-' and its operand" id="JSF-063_e" origId="FORMAT-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There should be no space between an increment/decrement operator (++/--) and its operand in macro definition" id="JSF-063_f" origId="FORMAT-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A member function that does not affect the state of an object will be declared const" id="JSF-069" origId="CODSTA-CPP-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Initialization of nonstatic class members will be performed through the member initialization list rather than through assignment in the body of a constructor" id="JSF-074" origId="INIT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="When two operators are opposites (such as == and !=), both will be defined" id="JSF-085" origId="CODSTA-CPP-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="When one of opposite operators (== and !=) is defined, the other should be defined too and one will be defined in terms of the other" id="JSF-085_a" origId="CODSTA-CPP-86" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Namespaces will not be nested more than two levels deep" id="JSF-099" origId="CODSTA-CPP-57" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All partial and explicit specializations for a template should be declared in the same file as the declaration of their primary template" id="JSF-104" origId="TEMPL-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions with more than 7 arguments will not be used" id="JSF-110" origId="METRICS-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="JSF" desc="Functions will have a single exit point" id="JSF-113" origId="MISRA2004-14_7" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="33;" authUrg="0;" cat="JSF" desc="If a function returns error information, then that error information will be tested" id="JSF-115" origId="MISRA2004-16_10" sev="3" total="33" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="26;" authUrg="0;" cat="JSF" desc="Each variable declaration will be commented" id="JSF-132_a" origId="COMMENT-05" sev="3" total="26" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Each typedef will be commented" id="JSF-132_b" origId="COMMENT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Each enumeration value will be commented" id="JSF-132_c" origId="COMMENT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Each structure member variable will be commented" id="JSF-132_d" origId="COMMENT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="JSF" desc="Every source file will be documented with an introductory comment that provides information on the file" id="JSF-133_a" origId="COMMENT-03" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="JSF" desc="Every source file will contain copyright information" id="JSF-133_b" origId="COMMENT-02" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="External objects will not be declared in more than one file" id="JSF-139" origId="MISRA-027" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="External objects will not be declared in implementation files" id="JSF-139_b" origId="MISRA-027_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A class, structure, or enumeration will not be declared in the definition of its type" id="JSF-141" origId="CODSTA-CPP-56" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Variables will not be introduced until they can be initialized with meaningful values" id="JSF-143" origId="OPT-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="JSF" desc="Avoid unused local variables" id="JSF-143_a" origId="OPT-02" sev="3" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Hexadecimal constants will be represented using all uppercase letters" id="JSF-150" origId="CODSTA-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Numeric values in code will not be used; symbolic values will be used instead" id="JSF-151" origId="CODSTA-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The sizeof operator will not be used on expressions that contain side effects" id="JSF-166" origId="MISRA2004-12_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The sizeof operator will not be used on expressions that contain side effects" id="JSF-166_b" origId="MISRA2004-12_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The sizeof operator will not be used on expressions that contain side effects" id="JSF-166_c" origId="MISRA2004-12_3_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The implementation of integer division shall be documented" id="JSF-167" origId="MISRA-041" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A typedef will be used to simplify program syntax when declaring function pointers" id="JSF-176" origId="CODSTA-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Redundant explicit casts will not be used" id="JSF-181_a" origId="OPT-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid explicit cast from derived to a base class" id="JSF-181_b" origId="OOP-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Labels will not be used, except in switch statements" id="JSF-188" origId="MISRA-055" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All 'if...else if' constructs will contain either a final else clause or a comment indicating why a final else clause is not necessary" id="JSF-192" origId="CODSTA-98" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A switch expression will not represent a Boolean value" id="JSF-195" origId="MISRA2004-15_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Every switch statement will have at least two cases and a potential default" id="JSF-196" origId="CODSTA-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter" id="JSF-198" origId="CODSTA-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop" id="JSF-199" origId="CODSTA-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Null initialize or increment expressions in for loops will not be used; a while loop will be used instead" id="JSF-200" origId="CODSTA-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Unencapsulated global data will be avoided" id="JSF-207" origId="CODSTA-CPP-82" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A file should directly include only headers containing declarations and definitions needed to a compilation" id="JSF-037" origId="OPT-41" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Tabs should be avoided" id="JSF-043" origId="FORMAT-01" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Public data should only be used in structs, not in classes" id="JSF-067_a" origId="OOP-18" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Protected data should only be used in structs, not in classes" id="JSF-067_b" origId="OOP-19" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid using the friend mechanism" id="JSF-070" origId="OOP-11" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Hierarchies should be based on abstract classes" id="JSF-087" origId="OOP-40" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Every nonlocal name, except main(), should be placed in some namespace" id="JSF-098" origId="CODSTA-CPP-36" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write namespace usings in a header file or before an #include" id="JSF-100" origId="CODSTA-CPP-39" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="In a class template with a dependent base, any name that may be found in that dependent base should be referred to using a qualifier" id="JSF-105" origId="TEMPL-12" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A function definition should not be placed in a class specification" id="JSF-109" origId="CODSTA-CPP-32" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Dereferenced local pointer initialized by new in function scope should not be returned" id="JSF-112" origId="MRM-23" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="JSF-115_a" origId="CODSTA-CPP-58" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Built-in-types should be passed by value unless you are modifying them" id="JSF-116" origId="CODSTA-36" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arguments should be passed by reference" id="JSF-117" origId="OPT-14" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An object should be passed as const reference if the function should not change the value of the object" id="JSF-117.1" origId="CODSTA-CPP-43" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid slicing function arguments / return value" id="JSF-117_a" origId="PB-20" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor" id="JSF-117_b" origId="PB-23" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="JSF-118" origId="MISRA2004-16_7" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="JSF-118_b" origId="MISRA2004-16_7_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Only functions with 1 or 2 statements should be considered candidates for inline functions" id="JSF-121" origId="OPT-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Trivial accessor and mutator functions should be inlined" id="JSF-122" origId="OPT-23" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Classes which have only getters/setters (accessors/mutators) are not allowed" id="JSF-123" origId="CODSTA-CPP-81" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Trivial forwarding functions should be inlined" id="JSF-124" origId="OPT-24" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Pass and return by reference when possible" id="JSF-125_a" origId="OPT-14" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="JSF" desc="Document functions in comments that precede function definitions" id="JSF-134" origId="COMMENT-04" sev="4" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Document functions in comments that precede function declarations" id="JSF-134_b" origId="COMMENT-04_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Objects should be defined at block scope if they are only accessed from within a single function" id="JSF-136_a" origId="MISRA2004-8_7" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="Declarations of local variables should be at the smallest feasible scope" id="JSF-136_b" origId="OPT-01" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="JSF" desc="All declarations at file scope should be static where possible" id="JSF-137" origId="MISRA-023" sev="4" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Pointers to pointers should be avoided" id="JSF-169" origId="CODSTA-05" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="User-defined conversion functions should be avoided" id="JSF-177" origId="CODSTA-CPP-05" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Constructors allowing for conversion should be made explicit" id="JSF-177_b" origId="CODSTA-CPP-04" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="JSF" desc="Every possible measure should be taken to avoid type casting" id="JSF-183" origId="CODSTA-31" sev="4" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid using static_cast on pointers" id="JSF-183_a" origId="CODSTA-CPP-34" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid using reinterpret_cast" id="JSF-183_b" origId="CODSTA-CPP-09" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Pointer arithmetic will not be used" id="JSF-215" origId="MISRA-101" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Consider using op= instead of stand-alone op" id="JSF-125_b" origId="OPT-19" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of blocks of code in a function" id="METRICS-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="METRICS" desc="Number of function calls within function" id="METRICS-04" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Class inheritance level" id="METRICS-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of data member(s) per class should not exceed 15" id="METRICS-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of methods per class" id="METRICS-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of parameter(s) per method should not exceed 10" id="METRICS-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of private data member(s) per class" id="METRICS-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of private methods per class" id="METRICS-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of protected data member(s) per class" id="METRICS-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of protected methods per class" id="METRICS-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of public data member(s) per class" id="METRICS-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of public methods per class" id="METRICS-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid functions with more than 5 parameters" id="METRICS-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Macros should not use more than 5 parameters" id="METRICS-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Cyclomatic Complexity limit of 10" id="METRICS-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="14;" authUrg="2;" cat="METRICS" desc="The percentage of comment lines versus the total number of module lines should be between 20 and 60" id="METRICS-19" sev="3" total="14" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid too long functions (declarations and statements)" id="METRICS-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid too long functions (blocks)" id="METRICS-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid functions with over 75 lines of code" id="METRICS-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Nested block depth should not be higher than 5" id="METRICS-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs)" id="METRICS-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Source lines will be kept to a length of 120 characters or less" id="METRICS-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Functions with more than 7 parameters will not be used" id="METRICS-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Cyclomatic Complexity limit of 20" id="METRICS-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="No function should be longer than 60 lines of code" id="METRICS-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="METRICS" desc="The assertion density of the code should average to a minimum of two assertions per function" id="METRICS-31" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="METRICS" desc="All functions with more than 20 lines should contain at least 2 assertions" id="METRICS-32" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="A global function should not be called from more than 5 different functions" id="METRICS-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="A function should not call more than 7 different functions" id="METRICS-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="METRICS" desc="The number of statements within function should be in range 1 - 50" id="METRICS-38" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="The value of VOCF metric for a function should not be higher than 4" id="METRICS-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Statements within function should not be nested deeper than 4 levels" id="METRICS-40" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="METRICS" desc="The number of blocks of comments before and inside function to the number of statements in function should be > 0.2" id="METRICS-41" sev="3" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="METRICS" desc="Report the value of Halstead's delivered bugs (B) for a function" id="METRICS-43" sev="3" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid functions with over 50 lines" id="METRICS-01" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid switch statements with many cases" id="METRICS-02" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid structs, unions, or classes with more than 20 fields" id="METRICS-17" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid source files that are longer than 500 lines" id="METRICS-24" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="METRICS" desc="Report Cyclomatic Complexity" id="METRICS-29" sev="5" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="METRICS" desc="Report Essential Complexity" id="METRICS-33" sev="5" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="METRICS" desc="Follow the Essential Complexity limit of 4" id="METRICS-34" sev="5" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Essential Complexity limit of 10" id="METRICS-35" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="METRICS" desc="Follow the Essential Complexity limit of 1" id="METRICS-42" sev="5" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Only use characters defined in ISO C standard" id="MISRA-005" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Values of character types shall be restricted to a defined and documented subset of ISO 10646-1" id="MISRA-006" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use wide string literals" id="MISRA-008" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="26;" authUrg="0;" cat="MISRA" desc="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" id="MISRA-013" sev="3" total="26" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA" desc="Explicitly declare 'char' type as signed or unsigned" id="MISRA-014" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The underlying bit representations of floating point numbers shall not be used" id="MISRA-016" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All functions shall be declared before use" id="MISRA-020" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Identifiers shall not simultaneously have both internal and external linkage in the same translation unit" id="MISRA-024" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="External object should not be declared in more than one file" id="MISRA-027" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="External objects should not be declared in implementation files" id="MISRA-027_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The use of a tag shall agree with its declaration" id="MISRA-029" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All automatic variables shall have been assigned a value before being used" id="MISRA-030" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="MISRA-038" origId="MISRA2004-12_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The comma operator shall not be used, except in the control expression of a for loop" id="MISRA-042" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="MISRA-043" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid mixing arithmetic of different precisions in the same expression" id="MISRA-043_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="MISRA-043_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="MISRA-043_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Redundant explicit cast to the same type is not allowed" id="MISRA-044" origId="OPT-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use the volatile keyword" id="MISRA-046_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Assignment statements should not be nested within other assignment statements" id="MISRA-046_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid possible integer overflow in expressions in which the result is cast to a wider integer type" id="MISRA-048_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Don't cast the dividend of two integers to a floating-point type" id="MISRA-048_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" id="MISRA-048_c" origId="PB-65" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid unintentionally discarding the remainder of integer division" id="MISRA-048_d" origId="PB-15_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="A null statement shall only occur on a line by itself" id="MISRA-054" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA" desc="Do not use the break statement" id="MISRA-058" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use floating point variables as loop counters" id="MISRA-065" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use functions with variable numbers of arguments" id="MISRA-069" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="12;" authUrg="1;" cat="MISRA" desc="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" id="MISRA-071_a" sev="3" total="12" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="MISRA" desc="Functions shall always have visible prototype at the function call" id="MISRA-071_b" sev="3" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Provide none or all identifiers for function arguments" id="MISRA-073" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Provide expression for return statement of non-void functions" id="MISRA-083" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid expressions in return statements of void functions" id="MISRA-084" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRA-089" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Enclose in parentheses whole definition of a function-like macro" id="MISRA-096" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use only non-ambiguous forms of defined pre-processor operator" id="MISRA-100" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Pointer arithmetic should not be used" id="MISRA-101" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use non-constant pointers to functions" id="MISRA-104" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All the functions pointed to by a single pointer to function shall be identical in the number and type of parameters and the return type" id="MISRA-105" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The NULL pointer shall not be dereferenced" id="MISRA-107_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA" desc="The NULL pointer shall not be dereferenced" id="MISRA-107_b" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All members of structure or union should be fully specified" id="MISRA-108" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Unions shall not be used to access the sub-parts of larger data structure" id="MISRA-110" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All the members of a structure (or class/union) shall be named" id="MISRA-113" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Standard library function names shall not be reused" id="MISRA-115" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use 'setlocale' function" id="MISRA-121_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not include &lt;locale.h> header" id="MISRA-121_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="MISRA" desc="Objects or functions with external linkage shall be declared in a header file" id="MISRA-023" sev="4" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA" desc="Provisions should be made for appropriate run-time checking" id="MISRA-004_a" sev="5" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Provisions should be made for appropriate run-time checking" id="MISRA-004_b" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use type suffix for numeric constants" id="MISRA-018_a" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use type suffix for numeric constants" id="MISRA-018_b" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use type suffix for numeric constants" id="MISRA-018_c" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use type suffix for numeric constants" id="MISRA-018_d" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA" desc="Declare objects at function scope" id="MISRA-022" sev="5" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The 'register' storage class specifier shall not be used" id="MISRA-028" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Document integer division" id="MISRA-041" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="MISRA-051" origId="PB-73" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use labels" id="MISRA-055" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRA2004-12_2_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions between signed and unsigned integer types" id="MISRA2004-10_1_a" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no implicit conversions from integral to floating type" id="MISRA2004-10_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of complex expressions" id="MISRA2004-10_1_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions from wider to narrower types" id="MISRA2004-10_1_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of function return expressions" id="MISRA2004-10_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of complex expressions" id="MISRA2004-10_1_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of function arguments" id="MISRA2004-10_1_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of complex expressions" id="MISRA2004-10_1_i" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions from floating to integral type" id="MISRA2004-10_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions from wider to narrower floating type" id="MISRA2004-10_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions from narrower to wider floating type" id="MISRA2004-10_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="MISRA2004-10_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" id="MISRA2004-10_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The value of a complex expression of floating type should not be cast to a wider floating type" id="MISRA2004-10_4" origId="CODSTA-198" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The value of a complex expression of floating type should not be cast to an integer type" id="MISRA2004-10_4_b" origId="CODSTA-198_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="If the bitwise operators ~ and &lt;&lt; are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" id="MISRA2004-10_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Conversions shall not be performed between a pointer to a function and any type other than an integral type" id="MISRA2004-11_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void" id="MISRA2004-11_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void" id="MISRA2004-11_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void" id="MISRA2004-11_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A cast should not convert a pointer type to an integral type" id="MISRA2004-11_3_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A cast should not convert an integral type to a pointer type" id="MISRA2004-11_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A cast should not be performed between a pointer to object type and a different pointer to object type" id="MISRA2004-11_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="MISRA2004-11_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The comma operator shall not be used" id="MISRA2004-12_10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The underlying bit representations of floating-point values shall not be used" id="MISRA2004-12_12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2004" desc="The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" id="MISRA2004-12_13" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Use parenthesis for the right-hand operand of an assignment operator when it contains an assignment expression" id="MISRA2004-12_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="MISRA2004-12_1_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Use parentheses unless all operators in the expression are the same" id="MISRA2004-12_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2004-12_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRA2004-12_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRA2004-12_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRA2004-12_2_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not use more than one volatile between two adjacent sequence points" id="MISRA2004-12_2_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRA2004-12_2_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="MISRA2004-12_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="MISRA2004-12_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="MISRA2004-12_3_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="MISRA2004-12_4_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The operands of a logical &amp;&amp; or || shall be primary-expressions" id="MISRA2004-12_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The operands of logical operators (&amp;&amp;, || and !) should be effectively Boolean" id="MISRA2004-12_6_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Expressions that are effectively Boolean should not be used as operands to operators other than (&amp;&amp;, ||, !, =, ==, !=, ?:)" id="MISRA2004-12_6_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Bitwise operators shall not be applied to operands whose underlying type is signed" id="MISRA2004-12_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="MISRA2004-12_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="MISRA2004-12_9" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Assignment operators shall not be used in expressions that yield a Boolean value" id="MISRA2004-13_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2004" desc="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" id="MISRA2004-13_2" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Floating-point expressions shall not be tested for equality or inequality" id="MISRA2004-13_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The controlling expression of a for statement shall not contain any objects of floating type" id="MISRA2004-13_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The three expressions of a for statement shall be concerned only with loop control" id="MISRA2004-13_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not modify for loop counter within a body of the loop" id="MISRA2004-13_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_aa" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ab" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ac" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ad" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ae" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_af" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ag" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ah" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ai" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_aj" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ak" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_j" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_k" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_l" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_m" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_n" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_s" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_t" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_u" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_v" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_w" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_x" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_y" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_z" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="MISRA2004-14_10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code in &quot;else&quot; block" id="MISRA2004-14_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="MISRA2004-14_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="MISRA2004-14_1_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code in switch statement" id="MISRA2004-14_1_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code in 'for' loop" id="MISRA2004-14_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="MISRA2004-14_1_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="MISRA2004-14_1_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRA2004-14_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A null statement shall occur on a line by itself or be followed by a comment" id="MISRA2004-14_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The goto statement shall not be used" id="MISRA2004-14_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The continue statement shall not be used" id="MISRA2004-14_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="For any iteration statement there shall be at most one break statement used for loop termination" id="MISRA2004-14_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2004" desc="A function shall have a single point of exit at the end of the function" id="MISRA2004-14_7" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="MISRA2004-14_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="'if' and 'else' should be followed by a compound statement" id="MISRA2004-14_9" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A break statement should be placed only at the end of switch clause" id="MISRA2004-15_0_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="MISRA2004-15_0_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRA2004-15_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRA2004-15_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRA2004-15_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The final clause of a switch statement shall be the default clause" id="MISRA2004-15_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRA2004-15_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRA2004-15_4_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Every switch statement shall have at least one case clause" id="MISRA2004-15_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Functions shall not be defined with a variable number of arguments" id="MISRA2004-16_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="33;" authUrg="0;" cat="MISRA2004" desc="If a function returns error information, then that error information shall be tested" id="MISRA2004-16_10" sev="3" total="33" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Functions shall not call themselves, either directly or indirectly" id="MISRA2004-16_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Identifiers shall be given for all of the parameters in a function prototype declaration" id="MISRA2004-16_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The identifiers used in the declaration and definition of a function shall be identical" id="MISRA2004-16_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="0;" cat="MISRA2004" desc="Functions with no parameters shall be declared with parameter type void" id="MISRA2004-16_5" sev="3" total="10" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The number of arguments passed to a function shall match the number of parameters" id="MISRA2004-16_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2004" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="MISRA2004-16_7" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRA2004-16_7_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRA2004-16_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="MISRA2004-16_8_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" id="MISRA2004-16_9" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not apply arithmetic to pointers that don't address an array or array element" id="MISRA2004-17_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Pointer subtraction shall only be applied to pointers that address elements of the same array" id="MISRA2004-17_2" origId="CODSTA-13_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc=">, >=, &lt;, &lt;= shall not be applied to pointer types except where they point to the same array" id="MISRA2004-17_3" origId="CODSTA-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Array indexing shall be the only allowed form of pointer arithmetic" id="MISRA2004-17_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The declaration of objects should contain no more than 2 levels of pointer indirection" id="MISRA2004-17_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRA2004-17_6_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2004-17_6_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All structure and union types shall be complete at the end of a translation unit" id="MISRA2004-18_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="An object shall not be assigned to an overlapping object" id="MISRA2004-18_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="An object shall not be assigned to an overlapping object" id="MISRA2004-18_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Unions shall not be used" id="MISRA2004-18_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="#include statements in a file should only be preceded by other preprocessor directives or comments" id="MISRA2004-19_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="MISRA2004-19_10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="MISRA2004-19_11_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be at most one occurrence of the # or ## preprocessor operators in a single macro definition" id="MISRA2004-19_12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The # and ## preprocessor operators should not be used" id="MISRA2004-19_13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The defined preprocessor operator shall only be used in one of the two standard forms" id="MISRA2004-19_14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Precautions shall be taken in order to prevent the contents of a header file being included twice" id="MISRA2004-19_15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" id="MISRA2004-19_16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="MISRA2004-19_17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Non-standard characters should not occur in header file names in #include directives" id="MISRA2004-19_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRA2004-19_3" origId="MISRA-089" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid keywords and basic types in macros" id="MISRA2004-19_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Macros shall not be #define'd or #undef'd within a block" id="MISRA2004-19_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="#undef shall not be used" id="MISRA2004-19_6" origId="PREPROC-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A function should be used in preference to a function-like macro" id="MISRA2004-19_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A function-like macro shall not be invoked without all of its arguments" id="MISRA2004-19_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="MISRA2004-19_9" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2004" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="MISRA2004-20_10" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRA2004-20_11" origId="PB-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRA2004-20_11_b" origId="PB-75_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRA2004-20_11_c" origId="SECURITY-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRA2004-20_11_d" origId="SECURITY-48_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The time handling functions of library time.h shall not be used" id="MISRA2004-20_12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not #define or #undef identifiers with names which start with underscore" id="MISRA2004-20_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not redefine reserved words" id="MISRA2004-20_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="MISRA2004-20_1_c" origId="CODSTA-92_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not #define nor #undef identifier 'defined'" id="MISRA2004-20_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The names of standard library macros, objects and functions shall not be reused" id="MISRA2004-20_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The names of standard library macros, objects and functions shall not be reused (C90)" id="MISRA2004-20_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The names of standard library macros, objects and functions shall not be reused (C99)" id="MISRA2004-20_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2004" desc="The validity of values passed to library functions shall be checked" id="MISRA2004-20_3" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2004" desc="Dynamic heap memory allocation shall not be used" id="MISRA2004-20_4" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The error indicator 'errno' shall not be used" id="MISRA2004-20_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The macro offsetof, in library stddef.h, shall not be used" id="MISRA2004-20_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The setjmp macro and the longjmp function shall not be used" id="MISRA2004-20_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The standard header file &lt;setjmp.h> shall not be used" id="MISRA2004-20_7_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The standard header file &lt;signal.h> shall not be used" id="MISRA2004-20_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="MISRA2004-20_8_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="MISRA2004" desc="The input/output library stdio.h shall not be used" id="MISRA2004-20_9" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Assembly language shall be encapsulated and isolated" id="MISRA2004-2_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Source code shall only use /* ... */ style comments" id="MISRA2004-2_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The character sequence /* shall not be used within a C-style comment" id="MISRA2004-2_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All uses of the #pragma directive shall be documented and explained" id="MISRA2004-3_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not mix bit-fields and other data within the same structure" id="MISRA2004-3_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Only those escape sequences that are defined in the ISO C standard shall be used" id="MISRA2004-4_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Trigraphs shall not be used" id="MISRA2004-4_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="User-specified C external identifiers should differ in the first 31 characters" id="MISRA2004-5_1_a" origId="PORT-35_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="User-specified C internal identifiers should differ from external identifiers in the first 31 characters" id="MISRA2004-5_1_b" origId="PORT-35_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="User-specified C internal identifiers declared in the same scope should differ in the first 31 characters" id="MISRA2004-5_1_c" origId="PORT-35_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="MISRA2004-5_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="MISRA2004-5_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not reuse typedef names" id="MISRA2004-5_3_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not reuse typedef names as a typedef name" id="MISRA2004-5_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A tag name shall not be reused for other purpose within the program" id="MISRA2004-5_4_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A tag name shall not be reused to define a different tag" id="MISRA2004-5_4_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The name of typedef should not be the same as the name of type that is typedef'd" id="MISRA2004-5_4_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The plain char type shall be used only for the storage and use of character values" id="MISRA2004-6_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="signed and unsigned char type shall be used only for the storage and use of numeric values" id="MISRA2004-6_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="typedefs to basic types should contain some digits in their name" id="MISRA2004-6_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="MISRA2004" desc="typedefs should be used in place of the basic types" id="MISRA2004-6_3_b" sev="3" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Bit fields shall only be defined to be of type unsigned int or signed int" id="MISRA2004-6_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="MISRA2004-6_5" origId="CODSTA-71" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Unnamed bit-fields with signed integer type shall have a length of more than one bit" id="MISRA2004-6_5_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Octal constants (other than zero) shall not be used" id="MISRA2004-7_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Octal escape sequences shall not be used" id="MISRA2004-7_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" id="MISRA2004-8_11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="When an array is declared with external linkage, its size shall be stated explicitly or defined implicitly by initialisation" id="MISRA2004-8_12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="12;" authUrg="1;" cat="MISRA2004" desc="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" id="MISRA2004-8_1_a" origId="MISRA-071_a" sev="3" total="12" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="MISRA2004" desc="Functions shall always have visible prototype at the function call" id="MISRA2004-8_1_b" origId="MISRA-071_b" sev="3" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Whenever a function is declared or defined, its type shall be explicitly stated" id="MISRA2004-8_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Whenever an object is declared or defined, its type shall be explicitly stated" id="MISRA2004-8_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Use identical types in declaration and definition" id="MISRA2004-8_3_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Use identical types in declaration and definition" id="MISRA2004-8_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRA2004-8_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no definitions of objects or functions in a header file" id="MISRA2004-8_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Always declare functions at file scope" id="MISRA2004-8_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Objects shall be defined at block scope if they are only accessed from within a single function" id="MISRA2004-8_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All automatic variables shall have been assigned a value before being used" id="MISRA2004-9_1" origId="MISRA-030" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The initializer for an aggregate or union shall be enclosed in braces" id="MISRA2004-9_2" origId="INIT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Arrays shall not be partially initialized" id="MISRA2004-9_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The non-zero initialization of structures requires an explicit initializer for each element" id="MISRA2004-9_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="In an enumerator list, the &quot;=&quot; construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised" id="MISRA2004-9_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Sections of code should not be &quot;commented out&quot;" id="MISRA2004-2_4" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No object or function identifier with static storage duration should be reused" id="MISRA2004-5_5_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No object or function identifier with static storage duration should be reused" id="MISRA2004-5_5_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No identifier in one name space should have the same spelling as an identifier in another name space, with the exception of structure and union member names" id="MISRA2004-5_6" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No identifier name should be reused" id="MISRA2004-5_7" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="MISRA2004" desc="Objects or functions with external linkage shall be declared in a header file" id="MISRA2004-8_10" origId="MISRA-023" sev="4" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A 'U' suffix shall be applied to all constants of unsigned type" id="MISRA2004-10_6" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="MISRA2004-12_1_b" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No parentheses are required for the operand of a unary operator" id="MISRA2004-12_1_c" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="MISRA2004-12_1_f" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Every defined function with internal linkage shall be used" id="MISRA2008-0_1_10" origId="OPT-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Every defined function with external linkage shall be used" id="MISRA2008-0_1_10_b" origId="GLOBAL-UNUSEDFUNC" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no unused parameters (named or unnamed) in nonvirtual functions" id="MISRA2008-0_1_11" origId="OPT-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no unused parameters (named or unnamed) in the set of parameters for a virtual function and all the functions that override it" id="MISRA2008-0_1_12" origId="GLOBAL-UNUSEDVIRTPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in 'else' block" id="MISRA2008-0_1_1_a" origId="MISRA2004-14_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="MISRA2008-0_1_1_b" origId="MISRA2004-14_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in 'if/else/while/for' block" id="MISRA2008-0_1_1_c" origId="MISRA2004-14_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in switch statement" id="MISRA2008-0_1_1_d" origId="MISRA2004-14_1_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in 'for' loop" id="MISRA2008-0_1_1_e" origId="MISRA2004-14_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code after 'if' or 'switch' statement outside 'for/while/catch' block" id="MISRA2008-0_1_1_f" origId="MISRA2004-14_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code after 'if' or 'switch' statement inside 'while/for/catch' block" id="MISRA2008-0_1_1_g" origId="MISRA2004-14_1_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_a" origId="MISRA2004-13_7_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_aa" origId="BD-PB-CC" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_b" origId="MISRA2004-13_7_aa" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_c" origId="MISRA2004-13_7_ab" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_d" origId="MISRA2004-13_7_ac" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_e" origId="MISRA2004-13_7_ad" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_f" origId="MISRA2004-13_7_ae" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_g" origId="MISRA2004-13_7_af" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_h" origId="MISRA2004-13_7_ag" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_i" origId="MISRA2004-13_7_ah" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_j" origId="MISRA2004-13_7_ai" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_k" origId="MISRA2004-13_7_aj" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_l" origId="MISRA2004-13_7_ak" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_m" origId="MISRA2004-13_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_n" origId="MISRA2004-13_7_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_o" origId="MISRA2004-13_7_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_p" origId="MISRA2004-13_7_j" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_q" origId="MISRA2004-13_7_k" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_r" origId="MISRA2004-13_7_l" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_rz" origId="MISRA2004-13_7_z" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_s" origId="MISRA2004-13_7_m" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_sz" origId="MISRA2004-13_7_v" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_t" origId="MISRA2004-13_7_n" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_u" origId="MISRA2004-13_7_s" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_v" origId="MISRA2004-13_7_t" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_w" origId="MISRA2004-13_7_u" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_x" origId="MISRA2004-13_7_w" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_y" origId="MISRA2004-13_7_x" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_z" origId="MISRA2004-13_7_y" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unused variables" id="MISRA2008-0_1_3_a" origId="OPT-02" sev="2" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unused variables" id="MISRA2008-0_1_3_b" origId="OPT-06" sev="2" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Eliminate unused private member variables" id="MISRA2008-0_1_3_c" origId="OPT-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain non-volatile POD variables having only one use" id="MISRA2008-0_1_4" origId="GLOBAL-ONEUSEVAR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unused type declarations" id="MISRA2008-0_1_5" origId="GLOBAL-UNUSEDTYPE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="5;" authUrg="0;" cat="MISRA2008" desc="Avoid unused values" id="MISRA2008-0_1_6" origId="BD-PB-VOVR" sev="2" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="MISRA2008-0_1_7" origId="CODSTA-CPP-58" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All functions with void return type shall have external side effect(s)" id="MISRA2008-0_1_8" origId="OPT-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="All functions with void return type shall have external side effect(s)" id="MISRA2008-0_1_8_b" origId="OPT-32_b" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRA2008-0_1_9" origId="MISRA2004-14_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object shall not be assigned to an overlapping object" id="MISRA2008-0_2_1_a" origId="MISRA2004-18_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object shall not be assigned to an overlapping object" id="MISRA2008-0_2_1_b" origId="PB-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="33;" authUrg="0;" cat="MISRA2008" desc="If a function generates error information, then that error information shall be tested" id="MISRA2008-0_3_2" origId="MISRA2004-16_10" sev="2" total="33" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A base class shall only be declared virtual if it is used in a diamond hierarchy" id="MISRA2008-10_1_2" origId="GLOBAL-VIRTBASECLASS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An accessible base class shall not be both virtual and non-virtual in the same hierarchy" id="MISRA2008-10_1_3" origId="OOP-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy" id="MISRA2008-10_3_1" origId="OOP-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each overriding virtual function shall be declared with the virtual keyword" id="MISRA2008-10_3_2" origId="OOP-21" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" id="MISRA2008-10_3_3" origId="OOP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Member data in non-POD class types shall be private" id="MISRA2008-11_0_1" origId="OOP-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not use dynamic type of an object under construction" id="MISRA2008-12_1_1" origId="BD-PB-VCTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All constructors that are callable with a single argument of fundamental type shall be declared explicit" id="MISRA2008-12_1_3" origId="OOP-45" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A copy constructor shall only initialize its base classes and the nonstatic members of the class of which it is a member" id="MISRA2008-12_8_1" origId="OOP-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The copy assignment operator shall be declared protected or private in an abstract class" id="MISRA2008-12_8_2" origId="OOP-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not declare non-member generic functions in associated namespaces" id="MISRA2008-14_5_1" origId="TEMPL-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter" id="MISRA2008-14_5_2" origId="TEMPL-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" id="MISRA2008-14_5_3" origId="TEMPL-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" id="MISRA2008-14_6_1" origId="TEMPL-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The function shall resolve to a function declared previously in the translation unit" id="MISRA2008-14_6_2" origId="TEMPL-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All class templates, function templates, class template member functions and class template static members shall be instantiated at least one." id="MISRA2008-14_7_1" origId="GLOBAL-TEMPLNOINST" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template" id="MISRA2008-14_7_3" origId="TEMPL-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Overloaded function templates shall not be explicitly specialized" id="MISRA2008-14_8_1" origId="TEMPL-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Control shall not be transferred into a try or catch block using a goto or a switch statement" id="MISRA2008-15_0_3" origId="EXCEPT-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The assignment-expression of a throw statement shall not itself cause an exception to be thrown" id="MISRA2008-15_1_1" origId="EXCEPT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="NULL shall not be thrown explicitly" id="MISRA2008-15_1_2" origId="EXCEPT-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An empty throw (throw;) shall only be used in the compound statement of a catch handler" id="MISRA2008-15_1_3" origId="EXCEPT-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Exceptions shall be raised only after start-up and before termination of the program" id="MISRA2008-15_3_1" origId="EXCEPT-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases" id="MISRA2008-15_3_3" origId="EXCEPT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="MISRA2008-15_3_4_a" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="MISRA2008-15_3_4_b" origId="EXCEPT-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A class type exception shall always be caught by reference" id="MISRA2008-15_3_5" origId="EXCEPT-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="MISRA2008-15_3_6" origId="EXCEPT-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last" id="MISRA2008-15_3_7" origId="EXCEPT-24" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" id="MISRA2008-15_4_1" origId="GLOBAL-EXCSPECDECL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A class destructor shall not exit with an exception" id="MISRA2008-15_5_1" origId="EXCEPT-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="MISRA2008-15_5_2" origId="EXCEPT-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid throwing exceptions from functions that are declared not to throw" id="MISRA2008-15_5_2_b" origId="BD-PB-NOEXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="MISRA2008-15_5_3" origId="PB-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="MISRA2008-15_5_3_b" origId="EXCEPT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not throw from within destructor" id="MISRA2008-15_5_3_c" origId="EXCEPT-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="MISRA2008-15_5_3_d" origId="EXCEPT-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An empty throw (throw;) shall only be used in the compound-statement of a catch handler" id="MISRA2008-15_5_3_e" origId="EXCEPT-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Exceptions shall be raised only after start-up and before termination of the program" id="MISRA2008-15_5_3_f" origId="EXCEPT-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="MISRA2008-15_5_3_g" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="MISRA2008-15_5_3_h" origId="EXCEPT-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="MISRA2008-15_5_3_i" origId="EXCEPT-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Always catch exceptions" id="MISRA2008-15_5_3_j" origId="BD-PB-EXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Properly define exit handlers" id="MISRA2008-15_5_3_k" origId="BD-PB-EXITHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid throwing exceptions from functions that are declared not to throw" id="MISRA2008-15_5_3_l" origId="BD-PB-NOEXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#include directives in a file shall only be preceded by other preprocessor directives or comments" id="MISRA2008-16_0_1" origId="MISRA2004-19_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Macros shall only be #define'd or #undef'd in the global namespace" id="MISRA2008-16_0_2" origId="MISRA2004-19_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#undef shall not be used" id="MISRA2008-16_0_3" origId="PREPROC-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Function-like macros shall not be defined" id="MISRA2008-16_0_4" origId="MISRA2004-19_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="MISRA2008-16_0_5" origId="MISRA2004-19_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" id="MISRA2008-16_0_6" origId="MISRA2004-19_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="MISRA2008-16_0_7_b" origId="MISRA2004-19_11_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If the # token appears as the first token on a line, then it shall be immediately followed by a preprocessing token" id="MISRA2008-16_0_8" origId="MISRA2004-19_16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The defined preprocessor operator shall only be used in one of the two standard forms" id="MISRA2008-16_1_1" origId="MISRA2004-19_14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="MISRA2008-16_1_2" origId="MISRA2004-19_17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid using macro definitions" id="MISRA2008-16_2_1_a" origId="PREPROC-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="MISRA2008-16_2_1_b" origId="PREPROC-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2008" desc="The #ifdef, #else, #elif preprocessor directives should not be used" id="MISRA2008-16_2_1_c" origId="PREPROC-11" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" id="MISRA2008-16_2_1_d" origId="PREPROC-10_b" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="MISRA2008-16_2_1_e" origId="PREPROC-10_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#error directive shall not be used" id="MISRA2008-16_2_1_f" origId="PREPROC-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The #pragma directive shall not be used" id="MISRA2008-16_2_1_g" origId="PREPROC-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#undef shall not be used" id="MISRA2008-16_2_1_h" origId="PREPROC-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" id="MISRA2008-16_2_2" origId="PREPROC-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Include guards shall be provided" id="MISRA2008-16_2_3" origId="PFO-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The ', &quot;, /* or // characters shall not occur in a header file name" id="MISRA2008-16_2_4" origId="NAMING-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRA2008-16_2_6" origId="MISRA-089" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be at most one occurrence of the # or ## operators in a single macro definition" id="MISRA2008-16_3_1" origId="MISRA2004-19_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_a" origId="MISRA2004-20_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_b" origId="MISRA2004-20_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_c" origId="CODSTA-92_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_d" origId="CODSTA-92_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_e" origId="MISRA2004-20_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The names of standard library macros and objects shall not be reused" id="MISRA2008-17_0_2" origId="CODSTA-92" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The names of standard library functions shall not be overridden" id="MISRA2008-17_0_3" origId="CODSTA-93" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The setjmp macro and the longjmp function shall not be used" id="MISRA2008-17_0_5" origId="MISRA2004-20_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The standard header file &lt;setjmp.h> shall not be used" id="MISRA2008-17_0_5_b" origId="MISRA2004-20_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The C library shall not be used" id="MISRA2008-18_0_1" origId="CODSTA-CPP-59" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="The library functions atof, atoi and atol from library &lt;cstdlib> shall not be used" id="MISRA2008-18_0_2" origId="MISRA2004-20_10" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'abort' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3" origId="PB-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'exit' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3_b" origId="PB-75_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'getenv' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3_c" origId="SECURITY-52" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'system' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3_d" origId="SECURITY-48_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The time handling functions of library &lt;ctime> shall not be used" id="MISRA2008-18_0_4" origId="MISRA2004-20_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The unbounded functions of library &lt;cstring> shall not be used" id="MISRA2008-18_0_5" origId="PB-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The macro offsetof shall not be used" id="MISRA2008-18_2_1" origId="MISRA2004-20_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="Dynamic heap memory allocation shall not be used" id="MISRA2008-18_4_1" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The standard header file &lt;csignal> shall not be used" id="MISRA2008-18_7_1" origId="MISRA2004-20_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The signal handling facilities of &lt;csignal> shall not be used" id="MISRA2008-18_7_1_b" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The error indicator errno shall not be used" id="MISRA2008-19_3_1" origId="MISRA2004-20_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="MISRA2008" desc="The stream input/output library &lt;cstdio> shall not be used" id="MISRA2008-27_0_1" origId="MISRA2004-20_9" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Different identifiers shall be typographically unambiguous" id="MISRA2008-2_10_1" origId="NAMING-47" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2008-2_10_2_a" origId="MISRA2004-5_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2008-2_10_2_b" origId="MISRA2004-5_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A typedef name (including qualification, if any) shall be a unique identifier" id="MISRA2008-2_10_3" origId="GLOBAL-UNIQUETYPEDEF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A class, union or enum name (including qualification, if any) shall be a unique identifier" id="MISRA2008-2_10_4" origId="GLOBAL-UNIQUETYPE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="MISRA2008-2_10_6_a" origId="CODSTA-CPP-87_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="MISRA2008-2_10_6_b" origId="CODSTA-CPP-87_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="MISRA2008-2_10_6_c" origId="CODSTA-CPP-87_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The name of typedef should not be the same as the name of its basic type" id="MISRA2008-2_10_6_d" origId="CODSTA-CPP-88" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used" id="MISRA2008-2_13_1" origId="CODSTA-CPP-60" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Octal constants (other than zero) shall not be used" id="MISRA2008-2_13_2_a" origId="MISRA2004-7_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Octal escape sequences (other than &quot;\0&quot;) shall not be used" id="MISRA2008-2_13_2_b" origId="MISRA2004-7_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" id="MISRA2008-2_13_3" origId="CODSTA-68" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Literal suffixes shall be upper case" id="MISRA2008-2_13_4" origId="CODSTA-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Narrow and wide string literals shall not be concatenated" id="MISRA2008-2_13_5" origId="PB-38" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Trigraphs shall not be used" id="MISRA2008-2_3_1" origId="MISRA2004-4_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The character sequence /* shall not be used within a C-style comment" id="MISRA2008-2_7_1" origId="MISRA2004-2_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Sections of code shall not be &quot;commented out&quot; using C-style comments" id="MISRA2008-2_7_2" origId="MISRA2004-2_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="It shall be possible to include any header file in multiple translation units without violating the One Definition Rule" id="MISRA2008-3_1_1" origId="PFO-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Functions shall not be declared at block scope" id="MISRA2008-3_1_2" origId="MISRA2004-8_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="When an array is declared, its size shall either be stated explicitly or defined implicitly by initialization" id="MISRA2008-3_1_3" origId="MISRA2004-8_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All declarations of an object or function shall have compatible types" id="MISRA2008-3_2_1" origId="GLOBAL-COMPATDECLS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The One Definition Rule shall not be violated" id="MISRA2008-3_2_2" origId="GLOBAL-ONEDEFRULE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="MISRA2008-3_2_3" origId="GLOBAL-ONEFILEDECL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier with external linkage shall have exactly one external definition" id="MISRA2008-3_2_4" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="MISRA2008" desc="Objects or functions with external linkage shall be declared in a header file" id="MISRA2008-3_3_1" origId="MISRA-023" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If a function has internal linkage then all re-declarations shall include the static storage class specifier" id="MISRA2008-3_3_2" origId="CODSTA-81" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" id="MISRA2008-3_4_1_a" origId="OPT-01" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" id="MISRA2008-3_4_1_b" origId="MISRA2004-8_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" id="MISRA2008-3_9_1" origId="CODSTA-67" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The underlying bit representations of floating-point values shall not be used" id="MISRA2008-3_9_3" origId="MISRA2004-12_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="NULL shall not be used as an integer value" id="MISRA2008-4_10_1" origId="CODSTA-CPP-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="MISRA2008-4_10_2" origId="CODSTA-CPP-63" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &amp;&amp;, ||, !, the equality operators == and !=, the unary &amp; operator, and the conditional operator" id="MISRA2008-4_5_1" origId="MISRA2004-12_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Expressions with type enum shall not be used as operands to built-in operators other than [ ], =, ==, !=, &lt;, &lt;=, >, >=, and the unary &amp; operator" id="MISRA2008-4_5_2" origId="CODSTA-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary &amp; operator" id="MISRA2008-4_5_3" origId="CODSTA-69" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If the bitwise operators ~ and &lt;&lt; are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" id="MISRA2008-5_0_10" origId="MISRA2004-10_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The plain char type shall only be used for the storage and use of character values" id="MISRA2008-5_0_11" origId="MISRA2004-6_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="signed char and unsigned char type shall only be used for the storage and use of numeric values" id="MISRA2008-5_0_12" origId="MISRA2004-6_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The condition of an if-statement and the condition of an iteration-statement shall have type bool" id="MISRA2008-5_0_13" origId="CODSTA-CPP-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The first operand of a conditional-operator shall have type bool" id="MISRA2008-5_0_14" origId="CODSTA-CPP-65" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Array indexing shall be the only form of pointer arithmetic" id="MISRA2008-5_0_15" origId="MISRA2004-17_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Avoid accessing arrays out of bounds" id="MISRA2008-5_0_16_a" origId="BD-PB-ARRAY" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="MISRA2008-5_0_16_b" origId="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Subtraction between pointers shall only be applied to pointers that address elements of the same array" id="MISRA2008-5_0_17" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc=">, >=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array" id="MISRA2008-5_0_18" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The declaration of objects shall contain no more than two levels of pointer indirection" id="MISRA2008-5_0_19" origId="MISRA2004-17_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_e" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_f" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_g" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Non-constant operands to a binary bitwise operator shall have the same underlying type" id="MISRA2008-5_0_20" origId="CODSTA-66" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="MISRA2008-5_0_21" origId="CODSTA-63" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cvalue expression shall not be implicitly converted to a different underlying type" id="MISRA2008-5_0_3_a" origId="MISRA2004-10_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cvalue expression shall not be implicitly converted to a different underlying type" id="MISRA2008-5_0_3_b" origId="MISRA2004-10_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cvalue expression shall not be implicitly converted to a different underlying type" id="MISRA2008-5_0_3_c" origId="MISRA2004-10_1_i" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="MISRA2008" desc="An implicit integral conversion shall not change the signedness of the underlying type" id="MISRA2008-5_0_4_a" origId="MISRA2004-10_1_a" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no implicit floating-integral conversions" id="MISRA2008-5_0_5_a" origId="MISRA2004-10_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no implicit floating-integral conversions" id="MISRA2008-5_0_5_b" origId="MISRA2004-10_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="MISRA2008-5_0_6_a" origId="CODSTA-222" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="MISRA2008-5_0_6_b" origId="MISRA2004-10_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="MISRA2008-5_0_6_c" origId="MISRA2004-10_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no explicit floating-integral conversions of a cvalue expression" id="MISRA2008-5_0_7_a" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no explicit floating-integral conversions of a cvalue expression" id="MISRA2008-5_0_7_b" origId="CODSTA-198_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" id="MISRA2008-5_0_8" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" id="MISRA2008-5_0_8_b" origId="CODSTA-198" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression" id="MISRA2008-5_0_9" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The right hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="MISRA2008-5_14_1" origId="MISRA2004-12_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="MISRA2008-5_17_1" origId="CODSTA-CPP-91" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The comma operator shall not be used" id="MISRA2008-5_18_1" origId="MISRA2004-12_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each operand of a logical &amp;&amp; or || shall be a postfix-expression" id="MISRA2008-5_2_1" origId="CODSTA-90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The &amp;&amp; operator and the || operator shall not be overloaded" id="MISRA2008-5_2_11" origId="CODSTA-CPP-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The comma &quot;,&quot; operator shall not be overloaded" id="MISRA2008-5_2_11_b" origId="CODSTA-CPP-80" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier with array type passed as a function argument shall not decay to a pointer" id="MISRA2008-5_2_12" origId="PB-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" id="MISRA2008-5_2_2" origId="OOP-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="MISRA2008-5_2_4" origId="CODSTA-CPP-66" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cast shall not remove any const or volatile qualification from the type of a pointer or reference" id="MISRA2008-5_2_5" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="MISRA2008-5_2_6" origId="CODSTA-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object with pointer type shall not be converted to an unrelated pointer type, either directly or indirectly" id="MISRA2008-5_2_7" origId="MISRA2004-11_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2008" desc="An object with integer type or pointer to void type shall not be converted to an object with pointer type" id="MISRA2008-5_2_8" origId="CODSTA-65" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" id="MISRA2008-5_3_1" origId="CODSTA-CPP-67" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="MISRA2008-5_3_2" origId="MISRA2004-12_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The unary &amp; operator shall not be overloaded" id="MISRA2008-5_3_3" origId="CODSTA-CPP-68" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Evaluation of the operand to the sizeof operator shall not contain side effects" id="MISRA2008-5_3_4" origId="MISRA2004-12_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Evaluation of the operand to the sizeof operator shall not contain side effects" id="MISRA2008-5_3_4_b" origId="MISRA2004-12_3_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Evaluation of the operand to the sizeof operator shall not contain side effects" id="MISRA2008-5_3_4_c" origId="MISRA2004-12_3_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand" id="MISRA2008-5_8_1" origId="MISRA2004-12_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Assignment operators shall not be used in sub-expressions" id="MISRA2008-6_2_1" origId="MISRA2004-13_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Floating-point expressions shall not be directly or indirectly tested for equality or inequality" id="MISRA2008-6_2_2" origId="MISRA2004-13_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character" id="MISRA2008-6_2_3" origId="MISRA2004-14_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The statement forming the body of a switch, while, do while or for statement shall be a compound statement" id="MISRA2008-6_3_1" origId="MISRA2004-14_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement" id="MISRA2008-6_4_1" origId="MISRA2004-14_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All if ... else if constructs shall be terminated with an else clause" id="MISRA2008-6_4_2" origId="MISRA2004-14_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_a" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_b" origId="CODSTA-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_c" origId="CODSTA-61" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_d" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_e" origId="MISRA2004-15_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRA2008-6_4_4" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="MISRA2008-6_4_5" origId="CODSTA-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The final clause of a switch statement shall be the default-clause" id="MISRA2008-6_4_6" origId="CODSTA-61" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The condition of a switch statement shall not have bool type" id="MISRA2008-6_4_7" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Every switch statement shall have at least one case-clause" id="MISRA2008-6_4_8" origId="MISRA2004-15_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A for loop shall contain a single loop-counter which shall not have floating type" id="MISRA2008-6_5_1" origId="CODSTA-CPP-69" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" id="MISRA2008-6_5_2" origId="CODSTA-CPP-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The loop-counter shall not be modified within condition or statement" id="MISRA2008-6_5_3" origId="MISRA2004-13_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop" id="MISRA2008-6_5_4" origId="CODSTA-CPP-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A loop-control-variable other than the loop-counter shall not be modified within condition or expression" id="MISRA2008-6_5_5" origId="CODSTA-CPP-72" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A loop-control-variable other than the loop-counter which is modified in statement within a body of the loop shall have type bool" id="MISRA2008-6_5_6" origId="CODSTA-CPP-73" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="MISRA2008-6_6_1" origId="CODSTA-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The goto statement shall jump to a label declared later in the same function body" id="MISRA2008-6_6_2" origId="CODSTA-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The continue statement shall only be used within a well-formed for loop" id="MISRA2008-6_6_3" origId="CODSTA-80" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="MISRA2008-6_6_4" origId="CODSTA-79" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2008" desc="A function shall have a single point of exit at the end of the function" id="MISRA2008-6_6_5" origId="MISRA2004-14_7" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="12;" authUrg="0;" cat="MISRA2008" desc="A variable which is not modified shall be const qualified" id="MISRA2008-7_1_1" origId="CODSTA-CPP-53" sev="2" total="12" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" id="MISRA2008-7_1_2_a" origId="MISRA2004-16_7" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A reference parameter in a function shall be declared as reference to const if the corresponding object is not modified" id="MISRA2008-7_1_2_b" origId="CODSTA-CPP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRA2008-7_1_2_c" origId="MISRA2004-16_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="MISRA2008-7_2_1" origId="PB-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" id="MISRA2008-7_3_1" origId="CODSTA-CPP-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifier main shall not be used for a function other than the global function main" id="MISRA2008-7_3_2" origId="CODSTA-76" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no unnamed namespaces in header files" id="MISRA2008-7_3_3" origId="CODSTA-CPP-74" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="using-directives shall not be used" id="MISRA2008-7_3_4" origId="CODSTA-CPP-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier" id="MISRA2008-7_3_5" origId="CODSTA-CPP-76" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" id="MISRA2008-7_3_6" origId="CODSTA-CPP-90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Assembler instructions shall only be introduced using the asm declaration" id="MISRA2008-7_4_2" origId="CODSTA-73" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Assembly language shall be encapsulated and isolated" id="MISRA2008-7_4_3" origId="CODSTA-114" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function" id="MISRA2008-7_5_1" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2008-7_5_2_a" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2008-7_5_2_b" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference" id="MISRA2008-7_5_3" origId="PB-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="MISRA2008" desc="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" id="MISRA2008-8_0_1" origId="FORMAT-33" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments" id="MISRA2008-8_3_1" origId="OOP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Functions shall not be defined using the ellipsis notation" id="MISRA2008-8_4_1" origId="MISRA-069" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration" id="MISRA2008-8_4_2" origId="MISRA2004-16_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRA2008-8_4_3" origId="MISRA2004-16_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A function identifier shall either be used to call the function or it shall be preceded by '&amp;'" id="MISRA2008-8_4_4" origId="MISRA2004-16_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All variables shall have a defined value before they are used" id="MISRA2008-8_5_1" origId="MISRA-030" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" id="MISRA2008-8_5_2" origId="INIT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Arrays shall not be partially initialized" id="MISRA2008-8_5_2_b" origId="MISRA2004-9_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Structures shall not be partially initialized" id="MISRA2008-8_5_2_c" origId="MISRA2004-9_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="In an enumerator list, the = construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized" id="MISRA2008-8_5_3" origId="MISRA2004-9_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="const member functions shall not return non-const pointers or references to class-data" id="MISRA2008-9_3_1" origId="CODSTA-CPP-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Protected member functions shall not return non-const handles to class-data" id="MISRA2008-9_3_2_a" origId="OOP-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Public member functions shall not return non-const handles to class-data" id="MISRA2008-9_3_2_b" origId="OOP-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="MISRA2008-9_3_3" origId="CODSTA-CPP-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Unions shall not be used" id="MISRA2008-9_5_1" origId="MISRA2004-18_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Bit-fields shall be either bool type or an explicitly unsigned or signed integral type" id="MISRA2008-9_6_2" origId="CODSTA-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Bit-fields shall not have enum type" id="MISRA2008-9_6_3" origId="CODSTA-74" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="MISRA2008-9_6_4" origId="CODSTA-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Classes should not be derived from virtual bases" id="MISRA2008-10_1_1" origId="OOP-47" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All accessible entity names within a multiple inheritance hierarchy should be unique" id="MISRA2008-10_2_1" origId="CODSTA-CPP-92" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" id="MISRA2008-12_1_2" origId="PB-43" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The viable function set for a function call should either contain no function specializations, or only contain function specializations" id="MISRA2008-14_8_2" origId="TEMPL-08" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An exception object should not have pointer type" id="MISRA2008-15_0_2" origId="EXCEPT-09" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="MISRA2008-15_3_2" origId="EXCEPT-06" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The \ character should not occur in a header file name" id="MISRA2008-16_2_5" origId="NAMING-48" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The # and ## operators should not be used" id="MISRA2008-16_3_2" origId="MISRA2004-19_13" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifier name of a non-member object or function with static storage duration should not be reused" id="MISRA2008-2_10_5_a" origId="MISRA2004-5_5_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifier name of a non-member object or function with static storage duration should not be reused" id="MISRA2008-2_10_5_b" origId="MISRA2004-5_5_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Digraphs should not be used" id="MISRA2008-2_5_1" origId="CODSTA-48" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Sections of code should not be &quot;commented out&quot; using C++ comments" id="MISRA2008-2_7_3" origId="MISRA2004-2_4" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="26;" authUrg="0;" cat="MISRA2008" desc="typedefs that indicate size and signedness should be used in place of the basic numerical types" id="MISRA2008-3_9_2" origId="MISRA-013" sev="4" total="26" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_a" origId="MISRA2004-12_1_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_b" origId="MISRA2004-12_1_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_c" origId="MISRA2004-12_1_c" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_d" origId="MISRA2004-12_1_d" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_e" origId="MISRA2004-12_1_e" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_f" origId="MISRA2004-12_1_f" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="MISRA2008-5_19_1_a" origId="PB-66_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="MISRA2008-5_19_1_b" origId="PB-66_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" id="MISRA2008-5_2_10" origId="MISRA2004-12_13" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Casts from a base class to a derived class should not be performed on polymorphic types" id="MISRA2008-5_2_3" origId="OOP-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cast should not convert a pointer type to an integral type" id="MISRA2008-5_2_9" origId="MISRA2004-11_3_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Functions should not call themselves, either directly or indirectly" id="MISRA2008-7_5_4" origId="MISRA2004-16_2" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Avoid accessing arrays out of bounds" id="MISRA2008-0_3_1_a" origId="BD-PB-ARRAY" sev="5" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="4;" authUrg="0;" cat="MISRA2008" desc="Avoid null pointer dereferencing" id="MISRA2008-0_3_1_b" origId="BD-PB-NP" sev="5" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid division by zero" id="MISRA2008-0_3_1_c" origId="BD-PB-ZERO" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid buffer overflow due to defining incorrect format limits" id="MISRA2008-0_3_1_d" origId="BD-PB-OVERFFMT" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid overflow due to reading a not zero terminated string" id="MISRA2008-0_3_1_e" origId="BD-PB-OVERFNZT" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="2;" authUrg="0;" cat="MISRA2008" desc="Do not check for null after dereferencing" id="MISRA2008-0_3_1_f" origId="BD-PB-DEREF" sev="5" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid overflow when reading from a buffer" id="MISRA2008-0_3_1_g" origId="BD-PB-OVERFRD" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid overflow when writing to a buffer" id="MISRA2008-0_3_1_h" origId="BD-PB-OVERFWR" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRA2008-0_3_1_i" origId="BD-PB-PTRSUB" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not compare two unrelated pointers" id="MISRA2008-0_3_1_j" origId="BD-PB-PTRCMP" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Use of floating-point arithmetic shall be documented" id="MISRA2008-0_4_2" origId="COMMENT-10" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All uses of the #pragma directive shall be documented" id="MISRA2008-16_6_1" origId="MISRA2004-3_4" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All usage of assembler shall be documented" id="MISRA2008-7_4_1" origId="COMMENT-09" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Precautions shall be taken in order to prevent the contents of a header file being included more than once" id="MISRA2012-DIR-4_10" origId="PFO-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Validate values passed to library functions" id="MISRA2012-DIR-4_11" origId="BD-API-VALPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2012-DIR" desc="Dynamic memory allocation shall not be used" id="MISRA2012-DIR-4_12" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid tainted data in array indexes" id="MISRA2012-DIR-4_14_a" origId="BD-SECURITY-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against integer overflow/underflow from tainted data" id="MISRA2012-DIR-4_14_b" origId="BD-SECURITY-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid buffer read overflow from tainted data" id="MISRA2012-DIR-4_14_c" origId="BD-SECURITY-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid buffer write overflow from tainted data" id="MISRA2012-DIR-4_14_d" origId="BD-SECURITY-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against command injection" id="MISRA2012-DIR-4_14_e" origId="BD-SECURITY-TDCMD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against file name injection" id="MISRA2012-DIR-4_14_f" origId="BD-SECURITY-TDFNAMES" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against SQL injection" id="MISRA2012-DIR-4_14_g" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Prevent buffer overflows from tainted data" id="MISRA2012-DIR-4_14_h" origId="BD-SECURITY-BUFWRITE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="MISRA2012-DIR-4_14_i" origId="BD-SECURITY-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against environment injection" id="MISRA2012-DIR-4_14_j" origId="BD-SECURITY-TDENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid printing tainted data on the output console" id="MISRA2012-DIR-4_14_k" origId="BD-SECURITY-TDCONSOLE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Exclude unsanitized user input from format strings" id="MISRA2012-DIR-4_14_l" origId="BD-SECURITY-TDINPUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid accessing arrays out of bounds" id="MISRA2012-DIR-4_1_a" origId="BD-PB-ARRAY" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="4;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid null pointer dereferencing" id="MISRA2012-DIR-4_1_b" origId="BD-PB-NP" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid division by zero" id="MISRA2012-DIR-4_1_c" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid buffer overflow due to defining incorrect format limits" id="MISRA2012-DIR-4_1_d" origId="BD-PB-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid overflow due to reading a not zero terminated string" id="MISRA2012-DIR-4_1_e" origId="BD-PB-OVERFNZT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="2;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not check for null after dereferencing" id="MISRA2012-DIR-4_1_f" origId="BD-PB-DEREF" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid overflow when reading from a buffer" id="MISRA2012-DIR-4_1_g" origId="BD-PB-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid overflow when writing to a buffer" id="MISRA2012-DIR-4_1_h" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRA2012-DIR-4_1_i" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not compare two unrelated pointers" id="MISRA2012-DIR-4_1_j" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid integer overflows" id="MISRA2012-DIR-4_1_k" origId="BD-PB-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Assembly language shall be encapsulated and isolated" id="MISRA2012-DIR-4_3" origId="MISRA2004-2_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Consistently check the returned value of non-void functions" id="MISRA2012-DIR-4_7_a" origId="BD-PB-CHECKRET" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-DIR" desc="Always check the returned value of non-void function" id="MISRA2012-DIR-4_7_b" origId="BD-PB-CHECKRETGEN" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="All resources obtained dynamically by means of Standard Library functions shall be explicitly released" id="MISRA2012-DIR-4_13_a" origId="BD-RES-LEAKS" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not use resources that have been freed" id="MISRA2012-DIR-4_13_b" origId="BD-RES-FREE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not free resources using invalid pointers" id="MISRA2012-DIR-4_13_c" origId="BD-RES-INVFREE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not abandon unreleased locks" id="MISRA2012-DIR-4_13_d" origId="BD-TRS-LOCK" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid double locking" id="MISRA2012-DIR-4_13_e" origId="BD-TRS-DLOCK" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not release a lock that has not been acquired" id="MISRA2012-DIR-4_13_f" origId="BD-TRS-REVLOCK" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="All usage of assembly language should be documented" id="MISRA2012-DIR-4_2" origId="COMMENT-09" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Sections of code should not be &quot;commented out&quot;" id="MISRA2012-DIR-4_4" origId="MISRA2004-2_4" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Identifiers in the same name space with overlapping visibility should be typographically unambiguous" id="MISRA2012-DIR-4_5" origId="NAMING-50" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="typedefs to basic types should contain some digits in their name" id="MISRA2012-DIR-4_6_a" origId="MISRA2004-6_3" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="MISRA2012-DIR" desc="typedefs should be used in place of the basic types" id="MISRA2012-DIR-4_6_b" origId="MISRA2004-6_3_b" sev="4" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Use typedefs from stdint.h instead of declaring your own in C99 code" id="MISRA2012-DIR-4_6_c" origId="CODSTA-155" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="MISRA2012-DIR-4_8" origId="CODSTA-115" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="A function should be used in preference to a function-like macro where they are interchangeable" id="MISRA2012-DIR-4_9" origId="MISRA2004-19_7" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The 'sizeof' operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" id="MISRA2012-RULE-12_5" origId="CODSTA-182" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="MISRA2012-RULE" desc="A function shall not be declared implicitly" id="MISRA2012-RULE-17_3" origId="MISRA-071_b" sev="1" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRA2012-RULE-17_4" origId="MISRA2004-16_8" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="MISRA2012-RULE-17_4_b" origId="MISRA2004-16_8_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The declaration of an array parameter shall not contain the 'static' keyword between the [ ]" id="MISRA2012-RULE-17_6" origId="CODSTA-160" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An object shall not be assigned or copied to an overlapping object" id="MISRA2012-RULE-19_1_a" origId="MISRA2004-18_2" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An object shall not be assigned or copied to an overlapping object" id="MISRA2012-RULE-19_1_b" origId="MISRA2004-18_2_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An object shall not be assigned or copied to an overlapping object" id="MISRA2012-RULE-19_1_c" origId="BD-PB-OVERLAP" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Any value passed to a function in &lt;ctype.h> shall be representable as an 'unsigned char' or be the value 'EOF'" id="MISRA2012-RULE-21_13" origId="BD-API-CTYPE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid overflow due to reading a not zero terminated string" id="MISRA2012-RULE-21_17_a" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid overflow when writing to a buffer" id="MISRA2012-RULE-21_17_b" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The 'size_t' argument passed to any function in &lt;string.h> shall have an appropriate value" id="MISRA2012-RULE-21_18" origId="BD-API-STRSIZE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="MISRA2012-RULE-21_19_a" origId="CODSTA-185_a" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Strings pointed by members of the structure 'lconv' should not be modified" id="MISRA2012-RULE-21_19_b" origId="CODSTA-185_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="MISRA2012-RULE-21_20" origId="BD-PB-INVRET" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use resources that have been freed" id="MISRA2012-RULE-22_2_a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not free resources using invalid pointers" id="MISRA2012-RULE-22_2_b" origId="BD-RES-INVFREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid writing to a stream which has been opened as read only" id="MISRA2012-RULE-22_4" origId="BD-PB-WRROS" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A pointer to a FILE object shall not be dereferenced" id="MISRA2012-RULE-22_5_a" origId="CODSTA-166_a" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A pointer to a FILE object shall not be dereferenced by a library function" id="MISRA2012-RULE-22_5_b" origId="CODSTA-166_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of a pointer to a FILE shall not be used after the associated stream has been closed" id="MISRA2012-RULE-22_6" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid use before initialization" id="MISRA2012-RULE-9_1" origId="BD-PB-NOTINIT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="MISRA2012-RULE-10_1_a" origId="CODSTA-161_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="MISRA2012-RULE-10_1_b" origId="CODSTA-161_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="MISRA2012-RULE-10_1_c" origId="CODSTA-161_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="MISRA2012-RULE-10_1_d" origId="CODSTA-161_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="MISRA2012-RULE-10_1_e" origId="CODSTA-161_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially signed or enum type should not be used as right hand side operand to the bitwise shifting operator" id="MISRA2012-RULE-10_1_f" origId="CODSTA-161_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="MISRA2012-RULE-10_1_g" origId="CODSTA-161_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" id="MISRA2012-RULE-10_2" origId="CODSTA-162" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="MISRA2012-RULE-10_3_a" origId="CODSTA-163_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="MISRA2012-RULE-10_3_b" origId="CODSTA-163_b" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="MISRA2012-RULE-10_4_a" origId="CODSTA-164_a" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The second and third operands of the ternary operator shall have the same essential type category" id="MISRA2012-RULE-10_4_b" origId="CODSTA-164_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="MISRA2012-RULE-10_6" origId="CODSTA-157" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="MISRA2012-RULE-10_7_a" origId="CODSTA-156_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="MISRA2012-RULE-10_7_b" origId="CODSTA-156_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of a composite expression shall not be cast to a different essential type category or a wider essential type" id="MISRA2012-RULE-10_8" origId="CODSTA-152" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Conversions shall not be performed between a pointer to a function and any other type" id="MISRA2012-RULE-11_1_a" origId="CODSTA-124_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Conversions shall not be performed between a pointer to a function and any other type" id="MISRA2012-RULE-11_1_b" origId="CODSTA-124_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="MISRA2012-RULE-11_2" origId="CODSTA-125" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A cast shall not be performed between a pointer to object type and a pointer to a different object type" id="MISRA2012-RULE-11_3" origId="CODSTA-126" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A cast shall not be performed between pointer to void and an arithmetic type" id="MISRA2012-RULE-11_6" origId="CODSTA-129_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="MISRA2012-RULE-11_7" origId="CODSTA-130" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A cast shall not remove any const or volatile qualification from the type pointed to by a pointer" id="MISRA2012-RULE-11_8" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="The macro NULL shall be the only permitted form of integer null pointer constant" id="MISRA2012-RULE-11_9_a" origId="CODSTA-CPP-63" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="The macro NULL shall be the only permitted form of integer null pointer constant" id="MISRA2012-RULE-11_9_b" origId="CODSTA-131" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The right hand operand of a shift operator shall lie in the range zero to one less than the width in bits of the essential type of the left hand operand" id="MISRA2012-RULE-12_2" origId="MISRA2004-12_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Initializer lists shall not contain persistent side effects" id="MISRA2012-RULE-13_1_a" origId="CODSTA-141_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2012-RULE-13_2_a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRA2012-RULE-13_2_b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRA2012-RULE-13_2_c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRA2012-RULE-13_2_d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRA2012-RULE-13_2_e" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use more than one volatile in one expression" id="MISRA2012-RULE-13_2_f" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRA2012-RULE-13_2_g" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The right hand operand of a logical &amp;&amp; or || operator shall not contain persistent side effects" id="MISRA2012-RULE-13_5" origId="MISRA2004-12_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The operand of the sizeof operator shall not contain any expression which has potential side effects" id="MISRA2012-RULE-13_6_a" origId="MISRA2004-12_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The operand of the sizeof operator shall not contain any expression which has potential side effects" id="MISRA2012-RULE-13_6_b" origId="MISRA2004-12_3_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The operand of the sizeof operator shall not contain any expression which has potential side effects" id="MISRA2012-RULE-13_6_c" origId="CODSTA-137" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A loop counter in a 'for' loop shall not have essentially floating type" id="MISRA2012-RULE-14_1_a" origId="CODSTA-167_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A loop counter in 'while' and 'do-while' loops shall not have essentially floating type" id="MISRA2012-RULE-14_1_b" origId="CODSTA-167_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" id="MISRA2012-RULE-14_2_a" origId="CODSTA-168" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The first clause of a 'for' loop shall be well-formed" id="MISRA2012-RULE-14_2_b" origId="CODSTA-169_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The second clause of a 'for' loop shall be well-formed" id="MISRA2012-RULE-14_2_c" origId="CODSTA-169_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The third clause of a 'for' statement shall be well-formed" id="MISRA2012-RULE-14_2_d" origId="CODSTA-169_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="Controlling expressions shall not be invariant" id="MISRA2012-RULE-14_3_zc" origId="BD-PB-CC" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2012-RULE" desc="The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type" id="MISRA2012-RULE-14_4" origId="MISRA2004-13_2" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The goto statement shall jump to a label declared later in the same function" id="MISRA2012-RULE-15_2" origId="CODSTA-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement" id="MISRA2012-RULE-15_3" origId="CODSTA-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The body of an iteration-statement or a selection-statement shall be a compound-statement" id="MISRA2012-RULE-15_6_a" origId="MISRA2004-14_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The body of an iteration-statement or a selection-statement shall be a compound-statement" id="MISRA2012-RULE-15_6_b" origId="MISRA2004-14_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All 'if ... else if' constructs shall be terminated with an 'else' statement" id="MISRA2012-RULE-15_7" origId="MISRA2004-14_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="MISRA2012-RULE-16_1_a" origId="MISRA2004-15_0_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRA2012-RULE-16_1_b" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRA2012-RULE-16_1_c" origId="MISRA2004-15_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRA2012-RULE-16_1_d" origId="MISRA2004-15_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Always provide a default branch for switch statements" id="MISRA2012-RULE-16_1_e" origId="CODSTA-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRA2012-RULE-16_1_f" origId="CODSTA-119" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="MISRA2012-RULE-16_1_g" origId="CODSTA-116" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Every switch statement shall have at least two switch-clauses" id="MISRA2012-RULE-16_1_h" origId="OPT-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRA2012-RULE-16_2" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An unconditional break statement shall terminate every switch-clause" id="MISRA2012-RULE-16_3_a" origId="MISRA2004-15_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An unconditional break statement shall terminate every switch-clause" id="MISRA2012-RULE-16_3_b" origId="MISRA2004-15_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Every 'switch' statement shall have a 'default' label" id="MISRA2012-RULE-16_4_a" origId="CODSTA-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRA2012-RULE-16_4_b" origId="CODSTA-119" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A default label shall appear as either the first or the last switch label of a switch statement" id="MISRA2012-RULE-16_5" origId="CODSTA-116" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Every switch statement shall have at least two switch-clauses" id="MISRA2012-RULE-16_6" origId="OPT-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch-expression shall not have essentially Boolean type" id="MISRA2012-RULE-16_7_a" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch-expression shall not have essentially Boolean type" id="MISRA2012-RULE-16_7_b" origId="MISRA2004-15_4_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The features of &lt;stdarg.h> shall not be used" id="MISRA2012-RULE-17_1_a" origId="CODSTA-136_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The features of &lt;stdarg.h> shall not be used" id="MISRA2012-RULE-17_1_b" origId="CODSTA-136_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Functions shall not call themselves, either directly or indirectly" id="MISRA2012-RULE-17_2" origId="MISRA2004-16_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" id="MISRA2012-RULE-17_5" origId="CODSTA-134" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="35;" authUrg="0;" cat="MISRA2012-RULE" desc="The value returned by a function having non-void return type shall be used" id="MISRA2012-RULE-17_7_a" origId="CODSTA-122_a" sev="2" total="35" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value returned by a function having non-void return type shall be used" id="MISRA2012-RULE-17_7_b" origId="CODSTA-122_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid accessing arrays out of bounds" id="MISRA2012-RULE-18_1_a" origId="BD-PB-ARRAY" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid accessing arrays and pointers out of bounds" id="MISRA2012-RULE-18_1_b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="MISRA2012-RULE-18_1_c" origId="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Subtraction between pointers shall only be applied to pointers that address elements of the same array" id="MISRA2012-RULE-18_2" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc=">, >=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array" id="MISRA2012-RULE-18_3" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRA2012-RULE-18_6_a" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2012-RULE-18_6_b" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Flexible array members shall not be declared" id="MISRA2012-RULE-18_7" origId="CODSTA-113" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Variable-length array types shall not be used" id="MISRA2012-RULE-18_8" origId="CODSTA-112" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRA2012-RULE-1_1_a_c90" origId="CODSTA-174_a_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRA2012-RULE-1_1_a_c99" origId="CODSTA-174_a_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRA2012-RULE-1_1_b_c90" origId="CODSTA-174_b_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRA2012-RULE-1_1_b_c99" origId="CODSTA-174_b_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid division by zero" id="MISRA2012-RULE-1_3_a" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid use before initialization" id="MISRA2012-RULE-1_3_b" origId="BD-PB-NOTINIT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use resources that have been freed" id="MISRA2012-RULE-1_3_c" origId="BD-RES-FREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid overflow when reading from a buffer" id="MISRA2012-RULE-1_3_d" origId="BD-PB-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid overflow when writing to a buffer" id="MISRA2012-RULE-1_3_e" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2012-RULE-1_3_f" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRA2012-RULE-1_3_g" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRA2012-RULE-1_3_h" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRA2012-RULE-1_3_i" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRA2012-RULE-1_3_j" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use more than one volatile in one expression" id="MISRA2012-RULE-1_3_k" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRA2012-RULE-1_3_l" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function shall not return a pointer or reference to a non-static local object" id="MISRA2012-RULE-1_3_m" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The address of an object with automatic storage shall not be assigned to an object which persists after the object has ceased to exist" id="MISRA2012-RULE-1_3_n" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The left-hand operand of a right-shift operator shall not have a negative value" id="MISRA2012-RULE-1_3_o" origId="PB-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The '_Generic' operator should not be used" id="MISRA2012-RULE-1_4_a" origId="CODSTA-216" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The '_Noreturn' function specifier should not be used" id="MISRA2012-RULE-1_4_b" origId="CODSTA-206" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The &lt;stdnoreturn.h> header file should not be used" id="MISRA2012-RULE-1_4_c" origId="CODSTA-207" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The '_Atomic' type specifier and the '_Atomic' type qualifier should not be used" id="MISRA2012-RULE-1_4_d" origId="CODSTA-214" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The facilities that are specified as being provided by &lt;stdatomic.h> should not be used" id="MISRA2012-RULE-1_4_e" origId="CODSTA-209" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The '_Thread_local' storage class specifier should not be used" id="MISRA2012-RULE-1_4_f" origId="CODSTA-210" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The facilities that are specified as being provided by &lt;threads.h> should not be used" id="MISRA2012-RULE-1_4_g" origId="CODSTA-211" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The '_Alignas' alignment specifier and the '_Alignof' operator should not be used" id="MISRA2012-RULE-1_4_h" origId="CODSTA-213" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The &lt;stdalign.h> header file shall not be used" id="MISRA2012-RULE-1_4_i" origId="CODSTA-208" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0'" id="MISRA2012-RULE-1_4_j" origId="CODSTA-215" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The 'rsize_t' type should not be used" id="MISRA2012-RULE-1_4_k" origId="CODSTA-212" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The 'errno_t' type should not be used" id="MISRA2012-RULE-1_4_l" origId="CODSTA-217" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S" id="MISRA2012-RULE-1_4_m" origId="CODSTA-218" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use the functions defined in Annex K of ISO/IEC 9899:2011 standard" id="MISRA2012-RULE-1_4_n" origId="CODSTA-219" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" id="MISRA2012-RULE-20_11" origId="PREPROC-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" id="MISRA2012-RULE-20_12" origId="PREPROC-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A line whose first token is # shall be a valid preprocessing directive" id="MISRA2012-RULE-20_13" origId="MISRA2004-19_16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related" id="MISRA2012-RULE-20_14" origId="MISRA2004-19_17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The ', &amp; or \ characters and the /* or // character sequences shall not occur in a header file name" id="MISRA2012-RULE-20_2_a" origId="NAMING-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The ', &amp; or \ characters and the /* or // character sequences shall not occur in a header file name" id="MISRA2012-RULE-20_2_b" origId="NAMING-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRA2012-RULE-20_3" origId="MISRA-089" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A macro shall not be defined with the same name as a keyword" id="MISRA2012-RULE-20_4_a" origId="CODSTA-133_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A macro shall not be defined with the same name as a keyword" id="MISRA2012-RULE-20_4_b" origId="CODSTA-133_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Tokens that look like a preprocessing directive shall not occur within a macro argument" id="MISRA2012-RULE-20_6" origId="MISRA2004-19_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" id="MISRA2012-RULE-20_7" origId="MISRA2004-19_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" id="MISRA2012-RULE-20_8" origId="PREPROC-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation" id="MISRA2012-RULE-20_9_b" origId="MISRA2004-19_11_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="0;" cat="MISRA2012-RULE" desc="The Standard Library time and date functions shall not be used" id="MISRA2012-RULE-21_10" origId="SECURITY-01" sev="2" total="10" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;tgmath.h> shall not be used" id="MISRA2012-RULE-21_11" origId="CODSTA-108" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The facilities that are specified as being provided by &lt;tgmath.h> should not be used" id="MISRA2012-RULE-21_11_b" origId="CODSTA-108_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The Standard Library function 'memcmp' shall not be used to compare null-terminated strings" id="MISRA2012-RULE-21_14" origId="BD-PB-MCCSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types" id="MISRA2012-RULE-21_15" origId="CODSTA-183" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" id="MISRA2012-RULE-21_16" origId="CODSTA-184" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not #define or #undef identifiers with names which start with underscore" id="MISRA2012-RULE-21_1_a" origId="MISRA2004-20_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#define and #undef shall not be used on a reserved identifier or reserved macro name (for C90 code)" id="MISRA2012-RULE-21_1_b" origId="CODSTA-92_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#define and #undef shall not be used on a reserved identifier or reserved macro name (for C99 code)" id="MISRA2012-RULE-21_1_c" origId="CODSTA-92_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not #define nor #undef identifier 'defined'" id="MISRA2012-RULE-21_1_d" origId="MISRA2004-20_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library function 'system' of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_21" origId="SECURITY-48_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An identifier with name which starts with underscore shall not be declared" id="MISRA2012-RULE-21_2_a" origId="MISRA2004-20_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A reserved identifier or macro name shall not be declared (for C90 code)" id="MISRA2012-RULE-21_2_b" origId="MISRA2004-20_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A reserved identifier or macro name shall not be declared (for C99 code)" id="MISRA2012-RULE-21_2_c" origId="MISRA2004-20_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2012-RULE" desc="The memory allocation and deallocation functions of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_3" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;setjmp.h> shall not be used" id="MISRA2012-RULE-21_4_a" origId="MISRA2004-20_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;setjmp.h> shall not be used" id="MISRA2012-RULE-21_4_b" origId="MISRA2004-20_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;signal.h> shall not be used" id="MISRA2012-RULE-21_5_a" origId="MISRA2004-20_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;signal.h> shall not be used" id="MISRA2012-RULE-21_5_b" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="1;" cat="MISRA2012-RULE" desc="The Standard Library input/output functions shall not be used" id="MISRA2012-RULE-21_6" origId="CODSTA-110" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="The atof, atoi, atol and atoll functions of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_7" origId="MISRA2004-20_10" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library function 'abort' of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_8" origId="PB-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library function 'exit' of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_8_b" origId="PB-75_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library functions 'quick_exit' and '_Exit' of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_8_c" origId="PB-75_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_9" origId="CODSTA-107" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All resources obtained dynamically by means of Standard Library functions shall be explicitly released" id="MISRA2012-RULE-22_1" origId="BD-RES-LEAKS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of 'errno' shall only be tested when the last function to be called was an errno-setting-function" id="MISRA2012-RULE-22_10" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The same file shall not be opened for read and write access at the same time on different stream" id="MISRA2012-RULE-22_3" origId="BD-PB-WRRDSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The macro 'EOF' should be compared with the unmodified return value from the Standard Library function" id="MISRA2012-RULE-22_7" origId="BD-PB-EOFCOMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of 'errno' shall be set to zero prior to a call to an errno-setting-function" id="MISRA2012-RULE-22_8" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of 'errno' shall be tested against zero after calling an errno-setting-function" id="MISRA2012-RULE-22_9" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code in 'else' block" id="MISRA2012-RULE-2_1_a" origId="MISRA2004-14_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="MISRA2012-RULE-2_1_b" origId="MISRA2004-14_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code in 'if', 'else', 'while', 'for' block" id="MISRA2012-RULE-2_1_c" origId="MISRA2004-14_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code in 'switch' statement" id="MISRA2012-RULE-2_1_d" origId="MISRA2004-14_1_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code in 'for' loop" id="MISRA2012-RULE-2_1_e" origId="MISRA2004-14_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="MISRA2012-RULE-2_1_f" origId="MISRA2004-14_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code after 'if' or 'switch' statement inside 'while'/'for'/'do...while' loop" id="MISRA2012-RULE-2_1_g" origId="MISRA2004-14_1_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRA2012-RULE-2_2_a" origId="MISRA2004-14_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="5;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid unused values" id="MISRA2012-RULE-2_2_b" origId="BD-PB-VOVR" sev="2" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The character sequence /* shall not be used within a C-style comment" id="MISRA2012-RULE-3_1_a" origId="MISRA2004-2_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The character sequence // shall not be used within a C-style comment" id="MISRA2012-RULE-3_1_b" origId="COMMENT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The character sequence /* shall not be used within a C++-style comment" id="MISRA2012-RULE-3_1_c" origId="COMMENT-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Line-splicing shall not be used in // comments" id="MISRA2012-RULE-3_2" origId="COMMENT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Octal and hexadecimal escape sequences shall be terminated" id="MISRA2012-RULE-4_1" origId="CODSTA-117" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="External identifiers shall be distinct" id="MISRA2012-RULE-5_1" origId="CODSTA-178" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c90)" id="MISRA2012-RULE-5_2_a_c90" origId="CODSTA-179_a_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c99)" id="MISRA2012-RULE-5_2_a_c99" origId="CODSTA-179_a_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers declared in the same block scope and name space shall be distinct (c90)" id="MISRA2012-RULE-5_2_b_c90" origId="CODSTA-179_b_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers declared in the same block scope and name space shall be distinct (c99)" id="MISRA2012-RULE-5_2_b_c99" origId="CODSTA-179_b_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2012-RULE-5_3_a" origId="MISRA2004-5_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2012-RULE-5_3_b" origId="MISRA2004-5_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The name of a macro should be distinct from the names of its parameters(c90)" id="MISRA2012-RULE-5_4_a_c90" origId="CODSTA-171_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The name of a macro should be distinct from the names of its parameters(c99)" id="MISRA2012-RULE-5_4_a_c99" origId="CODSTA-171_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c90)" id="MISRA2012-RULE-5_4_b_c90" origId="CODSTA-172_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c99)" id="MISRA2012-RULE-5_4_b_c99" origId="CODSTA-172_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers shall be distinct from macro names (c90)" id="MISRA2012-RULE-5_5_c90" origId="CODSTA-170_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers shall be distinct from macro names (c99)" id="MISRA2012-RULE-5_5_c99" origId="CODSTA-170_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A typedef name shall be a unique identifier" id="MISRA2012-RULE-5_6_a" origId="MISRA2004-5_3_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A typedef name shall be a unique identifier" id="MISRA2012-RULE-5_6_b" origId="MISRA2004-5_3_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A tag name shall not be reused for other purpose within the program" id="MISRA2012-RULE-5_7_a" origId="MISRA2004-5_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A tag name shall not be reused to define a different tag" id="MISRA2012-RULE-5_7_b" origId="MISRA2004-5_4_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers that define objects or functions with external linkage shall be unique" id="MISRA2012-RULE-5_8" origId="CODSTA-180" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Bit-fields shall only be declared with an appropriate type" id="MISRA2012-RULE-6_1" origId="MISRA2004-6_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Single-bit named bit fields shall not be of a signed type" id="MISRA2012-RULE-6_2" origId="CODSTA-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Octal constants shall not be used" id="MISRA2012-RULE-7_1" origId="MISRA2004-7_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A 'u' or 'U' suffix shall be applied to all integer constants that are represented in an unsigned type" id="MISRA2012-RULE-7_2" origId="MISRA2004-10_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The lowercase character 'l' shall not be used in a literal suffix" id="MISRA2012-RULE-7_3" origId="PORT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="26;" authUrg="0;" cat="MISRA2012-RULE" desc="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" id="MISRA2012-RULE-7_4" origId="PB-27" sev="2" total="26" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An inline function shall be declared with the static storage class" id="MISRA2012-RULE-8_10" origId="CODSTA-120" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" id="MISRA2012-RULE-8_12" origId="PB-58" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The restrict type qualifier shall not be used" id="MISRA2012-RULE-8_14" origId="CODSTA-121" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Whenever a function is declared or defined, its type shall be explicitly stated" id="MISRA2012-RULE-8_1_a" origId="MISRA2004-8_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Whenever an object is declared or defined, its type shall be explicitly stated" id="MISRA2012-RULE-8_1_b" origId="MISRA2004-8_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers shall be given for all of the parameters in a function prototype declaration" id="MISRA2012-RULE-8_2_a" origId="MISRA2004-16_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Function types shall have named parameters" id="MISRA2012-RULE-8_2_b" origId="CODSTA-158" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="1;" cat="MISRA2012-RULE" desc="Function types shall be in prototype form" id="MISRA2012-RULE-8_2_c" origId="CODSTA-159" sev="2" total="10" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRA2012-RULE-8_3_a" origId="MISRA2004-8_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The identifiers used in the declaration and definition of a function shall be identical" id="MISRA2012-RULE-8_3_b" origId="MISRA2004-16_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All declarations of an object or function shall have compatible types" id="MISRA2012-RULE-8_3_c" origId="GLOBAL-COMPATDECLS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="1;" cat="MISRA2012-RULE" desc="A compatible declaration shall be visible when an object or function with external linkage is defined" id="MISRA2012-RULE-8_4_a" origId="CODSTA-118" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A compatible declaration shall be visible when an object or function with external linkage is defined" id="MISRA2012-RULE-8_4_b" origId="MISRA2004-8_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An external object or function shall not have more than one non-defining declaration in translation unit" id="MISRA2012-RULE-8_5" origId="CODSTA-154" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An identifier with external linkage shall have exactly one external definition" id="MISRA2012-RULE-8_6" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage" id="MISRA2012-RULE-8_8" origId="MISRA2004-8_11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The initializer for an aggregate or union shall be enclosed in braces" id="MISRA2012-RULE-9_2" origId="INIT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Arrays shall not be partially initialized" id="MISRA2012-RULE-9_3" origId="MISRA2004-9_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An element of an object shall not be initialized more than once" id="MISRA2012-RULE-9_4" origId="PB-69" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" id="MISRA2012-RULE-9_5" origId="CODSTA-186" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The cast operation to essentially enumeration type is not allowed" id="MISRA2012-RULE-10_5_a" origId="CODSTA-165_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not cast from or to essentially Boolean type" id="MISRA2012-RULE-10_5_b" origId="CODSTA-165_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use casts between essentially character types and essentially floating types" id="MISRA2012-RULE-10_5_c" origId="CODSTA-165_c" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A conversion should not be performed between a pointer to object and an integer type" id="MISRA2012-RULE-11_4" origId="CODSTA-127" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="A conversion should not be performed from pointer to void into pointer to object" id="MISRA2012-RULE-11_5" origId="CODSTA-128" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Use parentheses unless all operators in the expression are the same" id="MISRA2012-RULE-12_1_a" origId="MISRA2004-12_1_e" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The operands of a logical &amp;&amp; or || shall be primary-expressions" id="MISRA2012-RULE-12_1_b" origId="MISRA2004-12_5" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Parenthesis shall be used with 'sizeof' statement" id="MISRA2012-RULE-12_1_c" origId="FORMAT-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The comma operator should not be used" id="MISRA2012-RULE-12_3" origId="MISRA2004-12_10" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="MISRA2012-RULE-12_4_a" origId="PB-66_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="MISRA2012-RULE-12_4_b" origId="PB-66_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator" id="MISRA2012-RULE-13_3" origId="CODSTA-123" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The result of an assignment operator should not be used" id="MISRA2012-RULE-13_4" origId="CODSTA-138" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The goto statement should not be used" id="MISRA2012-RULE-15_1" origId="MISRA2004-14_4" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There should be no more than one break or goto statement used to terminate any iteration statement" id="MISRA2012-RULE-15_4" origId="CODSTA-79" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2012-RULE" desc="A function should have a single point of exit at the end" id="MISRA2012-RULE-15_5" origId="MISRA2004-14_7" sev="4" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function parameter should not be modified" id="MISRA2012-RULE-17_8" origId="CODSTA-132" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The +, -, += and -= operators should not be applied to an expression of pointer type" id="MISRA2012-RULE-18_4" origId="CODSTA-181" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Declarations should contain no more than two levels of pointer nesting" id="MISRA2012-RULE-18_5" origId="MISRA2004-17_5" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The union keyword should not be used" id="MISRA2012-RULE-19_2" origId="CODSTA-111" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#include directives should only be preceded by preprocessor directives or comments" id="MISRA2012-RULE-20_1" origId="MISRA2004-19_1" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The # and ## preprocessor operators should not be used" id="MISRA2012-RULE-20_10" origId="MISRA2004-19_13" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#undef should not be used" id="MISRA2012-RULE-20_5" origId="PREPROC-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The exception handling features of &lt;fenv.h> should not be used" id="MISRA2012-RULE-21_12" origId="CODSTA-109" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function should not contain unused type declarations" id="MISRA2012-RULE-2_3_a" origId="CODSTA-175_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A source file should not contain unused type declarations" id="MISRA2012-RULE-2_3_b" origId="CODSTA-175_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function should not contain unused local tag declarations" id="MISRA2012-RULE-2_4_a" origId="CODSTA-176_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A source file should not contain unused tag declarations" id="MISRA2012-RULE-2_4_b" origId="CODSTA-176_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A source file should not contain unused macro definitions" id="MISRA2012-RULE-2_5" origId="CODSTA-177" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function should not contain unused label declarations" id="MISRA2012-RULE-2_6" origId="OPT-37" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="There should be no unused parameters in functions" id="MISRA2012-RULE-2_7" origId="OPT-38" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Trigraphs should not be used" id="MISRA2012-RULE-4_2" origId="MISRA2004-4_2" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers that define objects or functions with internal linkage should be unique" id="MISRA2012-RULE-5_9_a" origId="MISRA2004-5_5_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers that define objects or functions with internal linkage should be unique" id="MISRA2012-RULE-5_9_b" origId="MISRA2004-5_5_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="When an array with external linkage is declared, its size should be explicitly specified" id="MISRA2012-RULE-8_11" origId="MISRA2004-8_12" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="MISRA2012-RULE-8_13_a" origId="MISRA2004-16_7" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRA2012-RULE-8_13_b" origId="MISRA2004-16_7_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="6;" authUrg="0;" cat="MISRA2012-RULE" desc="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" id="MISRA2012-RULE-8_7" origId="GLOBAL-AVOIDEXTERN" sev="4" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An object should be defined at block scope if its identifier only appears in a single function" id="MISRA2012-RULE-8_9" origId="MISRA2004-8_7" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid accessing arrays out of bounds" id="MISRAC2012-DIR_4_1-a" origId="BD-PB-ARRAY" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="4;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid null pointer dereferencing" id="MISRAC2012-DIR_4_1-b" origId="BD-PB-NP" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid division by zero" id="MISRAC2012-DIR_4_1-c" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid buffer overflow due to defining incorrect format limits" id="MISRAC2012-DIR_4_1-d" origId="BD-PB-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid overflow due to reading a not zero terminated string" id="MISRAC2012-DIR_4_1-e" origId="BD-PB-OVERFNZT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="2;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Do not check for null after dereferencing" id="MISRAC2012-DIR_4_1-f" origId="BD-PB-DEREF" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid overflow when reading from a buffer" id="MISRAC2012-DIR_4_1-g" origId="BD-PB-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid overflow when writing to a buffer" id="MISRAC2012-DIR_4_1-h" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRAC2012-DIR_4_1-i" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Do not compare two unrelated pointers" id="MISRAC2012-DIR_4_1-j" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid integer overflows" id="MISRAC2012-DIR_4_1-k" origId="BD-PB-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_10" desc="Use multiple include guards" id="MISRAC2012-DIR_4_10-a" origId="PFO-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_11" desc="Validate values passed to library functions" id="MISRAC2012-DIR_4_11-a" origId="BD-API-VALPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-DIR_4_12" desc="Dynamic heap memory allocation shall not be used" id="MISRAC2012-DIR_4_12-a" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Ensure resources are freed" id="MISRAC2012-DIR_4_13-a" origId="BD-RES-LEAKS" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not use resources that have been freed" id="MISRAC2012-DIR_4_13-b" origId="BD-RES-FREE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not free resources using invalid pointers" id="MISRAC2012-DIR_4_13-c" origId="BD-RES-INVFREE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not abandon unreleased locks" id="MISRAC2012-DIR_4_13-d" origId="BD-TRS-LOCK" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Avoid double locking" id="MISRAC2012-DIR_4_13-e" origId="BD-TRS-DLOCK" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not release a lock that has not been acquired" id="MISRAC2012-DIR_4_13-f" origId="BD-TRS-REVLOCK" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid tainted data in array indexes" id="MISRAC2012-DIR_4_14-a" origId="BD-SECURITY-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against integer overflow/underflow from tainted data" id="MISRAC2012-DIR_4_14-b" origId="BD-SECURITY-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid buffer read overflow from tainted data" id="MISRAC2012-DIR_4_14-c" origId="BD-SECURITY-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid buffer write overflow from tainted data" id="MISRAC2012-DIR_4_14-d" origId="BD-SECURITY-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against command injection" id="MISRAC2012-DIR_4_14-e" origId="BD-SECURITY-TDCMD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against file name injection" id="MISRAC2012-DIR_4_14-f" origId="BD-SECURITY-TDFNAMES" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against SQL injection" id="MISRAC2012-DIR_4_14-g" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Prevent buffer overflows from tainted data" id="MISRAC2012-DIR_4_14-h" origId="BD-SECURITY-BUFWRITE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="MISRAC2012-DIR_4_14-i" origId="BD-SECURITY-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against environment injection" id="MISRAC2012-DIR_4_14-j" origId="BD-SECURITY-TDENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid printing tainted data on the output console" id="MISRAC2012-DIR_4_14-k" origId="BD-SECURITY-TDCONSOLE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Exclude unsanitized user input from format strings" id="MISRAC2012-DIR_4_14-l" origId="BD-SECURITY-TDINPUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_2" desc="All usage of assembler shall be documented" id="MISRAC2012-DIR_4_2-a" origId="COMMENT-09" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_3" desc="Assembly language shall be encapsulated and isolated" id="MISRAC2012-DIR_4_3-a" origId="MISRA2004-2_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_4" desc="Sections of code should not be &quot;commented out&quot;" id="MISRAC2012-DIR_4_4-a" origId="MISRA2004-2_4" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_5" desc="Identifiers in the same name space with overlapping visibility should be typographically unambiguous" id="MISRAC2012-DIR_4_5-a" origId="NAMING-50" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_6" desc="typedefs to basic types should contain some digits in their name" id="MISRAC2012-DIR_4_6-a" origId="MISRA2004-6_3" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="MISRAC2012-DIR_4_6" desc="typedefs should be used in place of the basic types" id="MISRAC2012-DIR_4_6-b" origId="MISRA2004-6_3_b" sev="4" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_6" desc="Use typedefs from stdint.h instead of declaring your own in C99 code" id="MISRAC2012-DIR_4_6-c" origId="CODSTA-155" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_7" desc="Consistently check the returned value of non-void functions" id="MISRAC2012-DIR_4_7-a" origId="BD-PB-CHECKRET" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-DIR_4_7" desc="Always check the returned value of non-void function" id="MISRAC2012-DIR_4_7-b" origId="BD-PB-CHECKRETGEN" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_8" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="MISRAC2012-DIR_4_8-a" origId="CODSTA-115" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_9" desc="A function should be used in preference to a function-like macro" id="MISRAC2012-DIR_4_9-a" origId="MISRA2004-19_7" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="MISRAC2012-RULE_10_1-a" origId="CODSTA-161_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="MISRAC2012-RULE_10_1-b" origId="CODSTA-161_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="MISRAC2012-RULE_10_1-c" origId="CODSTA-161_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="MISRAC2012-RULE_10_1-d" origId="CODSTA-161_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="MISRAC2012-RULE_10_1-e" origId="CODSTA-161_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" id="MISRAC2012-RULE_10_1-f" origId="CODSTA-161_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="MISRAC2012-RULE_10_1-g" origId="CODSTA-161_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_2" desc="Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" id="MISRAC2012-RULE_10_2-a" origId="CODSTA-162" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_3" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="MISRAC2012-RULE_10_3-a" origId="CODSTA-163_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_10_3" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="MISRAC2012-RULE_10_3-b" origId="CODSTA-163_b" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_10_4" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="MISRAC2012-RULE_10_4-a" origId="CODSTA-164_a" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_4" desc="The second and third operands of the ternary operator shall have the same essential type category" id="MISRAC2012-RULE_10_4-b" origId="CODSTA-164_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_5" desc="The cast operation to essentially enumeration type is not allowed" id="MISRAC2012-RULE_10_5-a" origId="CODSTA-165_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_5" desc="Do not cast from or to essentially Boolean type" id="MISRAC2012-RULE_10_5-b" origId="CODSTA-165_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_5" desc="Do not use casts between essentially character types and essentially floating types" id="MISRAC2012-RULE_10_5-c" origId="CODSTA-165_c" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_6" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="MISRAC2012-RULE_10_6-a" origId="CODSTA-157" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_7" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="MISRAC2012-RULE_10_7-a" origId="CODSTA-156_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_7" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="MISRAC2012-RULE_10_7-b" origId="CODSTA-156_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_8" desc="The value of a composite expression shall not be cast to a different essential type category or a wider essential type" id="MISRAC2012-RULE_10_8-a" origId="CODSTA-152" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_1" desc="Conversions shall not be performed between a pointer to a function and any other type than pointer to function" id="MISRAC2012-RULE_11_1-a" origId="CODSTA-124_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_1" desc="Conversions shall not be performed between non compatible pointer to a function types" id="MISRAC2012-RULE_11_1-b" origId="CODSTA-124_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_2" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="MISRAC2012-RULE_11_2-a" origId="CODSTA-125" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_3" desc="A cast shall not be performed between a pointer to object type and a pointer to a different object type" id="MISRAC2012-RULE_11_3-a" origId="CODSTA-126" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_4" desc="A conversion should not be performed between a pointer to object and an integer type" id="MISRAC2012-RULE_11_4-a" origId="CODSTA-127" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_11_5" desc="A conversion should not be performed from pointer to void into pointer to object" id="MISRAC2012-RULE_11_5-a" origId="CODSTA-128" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_6" desc="A cast shall not be performed between pointer to void and an arithmetic type" id="MISRAC2012-RULE_11_6-a" origId="CODSTA-129_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_7" desc="A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="MISRAC2012-RULE_11_7-a" origId="CODSTA-130" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_8" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="MISRAC2012-RULE_11_8-a" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_11_9" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="MISRAC2012-RULE_11_9-a" origId="CODSTA-CPP-63" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_11_9" desc="Use NULL instead of literal zero (0) as the null-pointer-constant" id="MISRAC2012-RULE_11_9-b" origId="CODSTA-131" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_1" desc="Use parentheses unless all operators in the expression are the same" id="MISRAC2012-RULE_12_1-a" origId="MISRA2004-12_1_e" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_1" desc="The operands of a logical &amp;&amp; or || shall be primary-expressions" id="MISRAC2012-RULE_12_1-b" origId="MISRA2004-12_5" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_1" desc="The operand of the 'sizeof' operator should be enclosed in parentheses" id="MISRAC2012-RULE_12_1-c" origId="FORMAT-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_2" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="MISRAC2012-RULE_12_2-a" origId="MISRA2004-12_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_3" desc="The comma operator shall not be used" id="MISRAC2012-RULE_12_3-a" origId="MISRA2004-12_10" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_4" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="MISRAC2012-RULE_12_4-a" origId="PB-66_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_4" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="MISRAC2012-RULE_12_4-b" origId="PB-66_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_5" desc="The 'sizeof' operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" id="MISRAC2012-RULE_12_5-a" origId="CODSTA-182" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_1" desc="Initializer lists shall not contain persistent side effects" id="MISRAC2012-RULE_13_1-a" origId="CODSTA-141_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRAC2012-RULE_13_2-a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRAC2012-RULE_13_2-b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRAC2012-RULE_13_2-c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRAC2012-RULE_13_2-d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRAC2012-RULE_13_2-e" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Do not use more than one volatile between two adjacent sequence points" id="MISRAC2012-RULE_13_2-f" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRAC2012-RULE_13_2-g" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_13_3" desc="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects" id="MISRAC2012-RULE_13_3-a" origId="CODSTA-123" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_4" desc="The result of a built-in assignment operator should not be used" id="MISRAC2012-RULE_13_4-a" origId="CODSTA-138" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_5" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="MISRAC2012-RULE_13_5-a" origId="MISRA2004-12_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_6" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="MISRAC2012-RULE_13_6-a" origId="MISRA2004-12_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_6" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="MISRAC2012-RULE_13_6-b" origId="MISRA2004-12_3_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_6" desc="The function call shall not be the operand of the sizeof operator" id="MISRAC2012-RULE_13_6-c" origId="CODSTA-137" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_1" desc="A loop counter in a 'for' loop shall not have essentially floating type" id="MISRAC2012-RULE_14_1-a" origId="CODSTA-167_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_1" desc="A loop counter in 'while' and 'do-while' loops shall not have essentially floating type" id="MISRAC2012-RULE_14_1-b" origId="CODSTA-167_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" id="MISRAC2012-RULE_14_2-a" origId="CODSTA-168" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="The first clause of a 'for' loop shall be well-formed" id="MISRAC2012-RULE_14_2-b" origId="CODSTA-169_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="The second clause of a 'for' loop shall be well-formed" id="MISRAC2012-RULE_14_2-c" origId="CODSTA-169_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="The third clause of a 'for' statement shall be well-formed" id="MISRAC2012-RULE_14_2-d" origId="CODSTA-169_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_14_3" desc="Avoid conditions that always evaluate to the same value" id="MISRAC2012-RULE_14_3-ac" origId="BD-PB-CC" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-RULE_14_4" desc="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" id="MISRAC2012-RULE_14_4-a" origId="MISRA2004-13_2" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_1" desc="The goto statement shall not be used" id="MISRAC2012-RULE_15_1-a" origId="MISRA2004-14_4" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_2" desc="The goto statement shall jump to a label declared later in the same function body" id="MISRAC2012-RULE_15_2-a" origId="CODSTA-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_3" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="MISRAC2012-RULE_15_3-a" origId="CODSTA-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_4" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="MISRAC2012-RULE_15_4-a" origId="CODSTA-79" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRAC2012-RULE_15_5" desc="A function shall have a single point of exit at the end of the function" id="MISRAC2012-RULE_15_5-a" origId="MISRA2004-14_7" sev="4" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_6" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="MISRAC2012-RULE_15_6-a" origId="MISRA2004-14_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_6" desc="'if' and 'else' should be followed by a compound statement" id="MISRAC2012-RULE_15_6-b" origId="MISRA2004-14_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_7" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="MISRAC2012-RULE_15_7-a" origId="MISRA2004-14_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="MISRAC2012-RULE_16_1-a" origId="MISRA2004-15_0_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRAC2012-RULE_16_1-b" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRAC2012-RULE_16_1-c" origId="MISRA2004-15_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRAC2012-RULE_16_1-d" origId="MISRA2004-15_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="Always provide a default branch for switch statements" id="MISRAC2012-RULE_16_1-e" origId="CODSTA-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRAC2012-RULE_16_1-f" origId="CODSTA-119" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="MISRAC2012-RULE_16_1-g" origId="CODSTA-116" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="Every switch statement shall have at least two switch-clauses" id="MISRAC2012-RULE_16_1-h" origId="OPT-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_2" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRAC2012-RULE_16_2-a" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_3" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRAC2012-RULE_16_3-a" origId="MISRA2004-15_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_3" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRAC2012-RULE_16_3-b" origId="MISRA2004-15_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_4" desc="Always provide a default branch for switch statements" id="MISRAC2012-RULE_16_4-a" origId="CODSTA-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_4" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRAC2012-RULE_16_4-b" origId="CODSTA-119" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_5" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="MISRAC2012-RULE_16_5-a" origId="CODSTA-116" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_6" desc="Every switch statement shall have at least two switch-clauses" id="MISRAC2012-RULE_16_6-a" origId="OPT-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_7" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRAC2012-RULE_16_7-a" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_7" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRAC2012-RULE_16_7-b" origId="MISRA2004-15_4_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_1" desc="The identifiers va_list, va_arg, va_start, va_end, va_copy should not be used" id="MISRAC2012-RULE_17_1-a" origId="CODSTA-136_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_1" desc="The identifiers va_list, va_arg, va_start, va_end should not be used" id="MISRAC2012-RULE_17_1-b" origId="CODSTA-136_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_2" desc="Functions shall not call themselves, either directly or indirectly" id="MISRAC2012-RULE_17_2-a" origId="MISRA2004-16_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="MISRAC2012-RULE_17_3" desc="Functions shall always have visible prototype at the function call" id="MISRAC2012-RULE_17_3-a" origId="MISRA-071_b" sev="1" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_4" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRAC2012-RULE_17_4-a" origId="MISRA2004-16_8" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_4" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="MISRAC2012-RULE_17_4-b" origId="MISRA2004-16_8_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_5" desc="The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" id="MISRAC2012-RULE_17_5-a" origId="CODSTA-134" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_6" desc="The declaration of an array parameter shall not contain the 'static' keyword between the [ ]" id="MISRAC2012-RULE_17_6-a" origId="CODSTA-160" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="35;" authUrg="0;" cat="MISRAC2012-RULE_17_7" desc="The value returned by a function having non-void return type shall be used" id="MISRAC2012-RULE_17_7-a" origId="CODSTA-122_a" sev="2" total="35" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_7" desc="The value returned by a function having non-void return type shall be used" id="MISRAC2012-RULE_17_7-b" origId="CODSTA-122_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_8" desc="A function parameter should not be modified" id="MISRAC2012-RULE_17_8-a" origId="CODSTA-132" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_18_1" desc="Avoid accessing arrays out of bounds" id="MISRAC2012-RULE_18_1-a" origId="BD-PB-ARRAY" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_1" desc="Avoid accessing arrays and pointers out of bounds" id="MISRAC2012-RULE_18_1-b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_1" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="MISRAC2012-RULE_18_1-c" origId="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_2" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRAC2012-RULE_18_2-a" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_3" desc="Do not compare two unrelated pointers" id="MISRAC2012-RULE_18_3-a" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_4" desc="The +, -, += and -= operators should not be applied to an expression of pointer type" id="MISRAC2012-RULE_18_4-a" origId="CODSTA-181" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_5" desc="The declaration of objects should contain no more than 2 levels of pointer indirection" id="MISRAC2012-RULE_18_5-a" origId="MISRA2004-17_5" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_6" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRAC2012-RULE_18_6-a" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_6" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRAC2012-RULE_18_6-b" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_7" desc="Flexible array members shall not be declared" id="MISRAC2012-RULE_18_7-a" origId="CODSTA-113" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_8" desc="Variable-length array types shall not be used" id="MISRAC2012-RULE_18_8-a" origId="CODSTA-112" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_1" desc="An object shall not be assigned to an overlapping object" id="MISRAC2012-RULE_19_1-a" origId="MISRA2004-18_2" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_1" desc="An object shall not be assigned to an overlapping object" id="MISRAC2012-RULE_19_1-b" origId="MISRA2004-18_2_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_1" desc="An object shall not be assigned or copied to an overlapping object" id="MISRAC2012-RULE_19_1-c" origId="BD-PB-OVERLAP" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_2" desc="The union keyword should not be used" id="MISRAC2012-RULE_19_2-a" origId="CODSTA-111" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRAC2012-RULE_1_1-a" origId="CODSTA-174_a_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRAC2012-RULE_1_1-b" origId="CODSTA-174_a_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRAC2012-RULE_1_1-c" origId="CODSTA-174_b_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRAC2012-RULE_1_1-d" origId="CODSTA-174_b_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid division by zero" id="MISRAC2012-RULE_1_3-a" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid use before initialization" id="MISRAC2012-RULE_1_3-b" origId="BD-PB-NOTINIT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Do not use resources that have been freed" id="MISRAC2012-RULE_1_3-c" origId="BD-RES-FREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid overflow when reading from a buffer" id="MISRAC2012-RULE_1_3-d" origId="BD-PB-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid overflow when writing to a buffer" id="MISRAC2012-RULE_1_3-e" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRAC2012-RULE_1_3-f" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRAC2012-RULE_1_3-g" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRAC2012-RULE_1_3-h" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRAC2012-RULE_1_3-i" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRAC2012-RULE_1_3-j" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Do not use more than one volatile between two adjacent sequence points" id="MISRAC2012-RULE_1_3-k" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRAC2012-RULE_1_3-l" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRAC2012-RULE_1_3-m" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRAC2012-RULE_1_3-n" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The left-hand operand of a right-shift operator shall not have a negative value" id="MISRAC2012-RULE_1_3-o" origId="PB-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The '_Generic' operator should not be used" id="MISRAC2012-RULE_1_4-a" origId="CODSTA-216" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The '_Noreturn' function specifier should not be used" id="MISRAC2012-RULE_1_4-b" origId="CODSTA-206" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The &lt;stdnoreturn.h> header file should not be used" id="MISRAC2012-RULE_1_4-c" origId="CODSTA-207" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The '_Atomic' type specifier and the '_Atomic' type qualifier should not be used" id="MISRAC2012-RULE_1_4-d" origId="CODSTA-214" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The facilities that are specified as being provided by &lt;stdatomic.h> should not be used" id="MISRAC2012-RULE_1_4-e" origId="CODSTA-209" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The '_Thread_local' storage class specifier should not be used" id="MISRAC2012-RULE_1_4-f" origId="CODSTA-210" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The facilities that are specified as being provided by &lt;threads.h> should not be used" id="MISRAC2012-RULE_1_4-g" origId="CODSTA-211" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The '_Alignas' alignment specifier and the '_Alignof' operator should not be used" id="MISRAC2012-RULE_1_4-h" origId="CODSTA-213" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The &lt;stdalign.h> header file shall not be used" id="MISRAC2012-RULE_1_4-i" origId="CODSTA-208" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0'" id="MISRAC2012-RULE_1_4-j" origId="CODSTA-215" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The 'rsize_t' type should not be used" id="MISRAC2012-RULE_1_4-k" origId="CODSTA-212" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The 'errno_t' type should not be used" id="MISRAC2012-RULE_1_4-l" origId="CODSTA-217" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S" id="MISRAC2012-RULE_1_4-m" origId="CODSTA-218" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="Do not use the functions defined in Annex K of ISO/IEC 9899:2011 standard" id="MISRAC2012-RULE_1_4-n" origId="CODSTA-219" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_1" desc="#include statements in a file should only be preceded by other preprocessor directives or comments" id="MISRAC2012-RULE_20_1-a" origId="MISRA2004-19_1" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_10" desc="The # and ## preprocessor operators should not be used" id="MISRAC2012-RULE_20_10-a" origId="MISRA2004-19_13" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_11" desc="A macro parameter immediately following a # operator shall not immediately be followed by or preceded by a ## operator" id="MISRAC2012-RULE_20_11-a" origId="PREPROC-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_12" desc="A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" id="MISRAC2012-RULE_20_12-a" origId="PREPROC-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_13" desc="Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" id="MISRAC2012-RULE_20_13-a" origId="MISRA2004-19_16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_14" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="MISRAC2012-RULE_20_14-a" origId="MISRA2004-19_17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_2" desc="The ', &quot;, /* or // characters shall not occur in a header file name" id="MISRAC2012-RULE_20_2-a" origId="NAMING-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_2" desc="The \ character should not occur in a header file name" id="MISRAC2012-RULE_20_2-b" origId="NAMING-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_3" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRAC2012-RULE_20_3-a" origId="MISRA-089" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_4" desc="A macro shall not be defined with the same name as a keyword in C90" id="MISRAC2012-RULE_20_4-a" origId="CODSTA-133_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_4" desc="A macro shall not be defined with the same name as a keyword in C99" id="MISRAC2012-RULE_20_4-b" origId="CODSTA-133_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_5" desc="#undef shall not be used" id="MISRAC2012-RULE_20_5-a" origId="PREPROC-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_6" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="MISRAC2012-RULE_20_6-a" origId="MISRA2004-19_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_7" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="MISRAC2012-RULE_20_7-a" origId="MISRA2004-19_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_8" desc="The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" id="MISRAC2012-RULE_20_8-a" origId="PREPROC-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_9" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="MISRAC2012-RULE_20_9-b" origId="MISRA2004-19_11_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Do not #define or #undef identifiers with names which start with underscore" id="MISRAC2012-RULE_21_1-a" origId="MISRA2004-20_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="MISRAC2012-RULE_21_1-b" origId="CODSTA-92_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)" id="MISRAC2012-RULE_21_1-c" origId="CODSTA-92_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Do not #define nor #undef identifier 'defined'" id="MISRAC2012-RULE_21_1-d" origId="MISRA2004-20_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="0;" cat="MISRAC2012-RULE_21_10" desc="Avoid functions which use time from standard C library" id="MISRAC2012-RULE_21_10-a" origId="SECURITY-01" sev="2" total="10" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_11" desc="The standard header file &lt;tgmath.h> shall not be used" id="MISRAC2012-RULE_21_11-a" origId="CODSTA-108" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_11" desc="The facilities that are specified as being provided by &lt;tgmath.h> should not be used" id="MISRAC2012-RULE_21_11-b" origId="CODSTA-108_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_12" desc="The exception handling features of &lt;fenv.h> should not be used" id="MISRAC2012-RULE_21_12-a" origId="CODSTA-109" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_13" desc="Do not pass incorrect values to ctype.h library functions" id="MISRAC2012-RULE_21_13-a" origId="BD-API-CTYPE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_14" desc="The Standard Library function memcmp shall not be used to compare null terminated strings" id="MISRAC2012-RULE_21_14-a" origId="BD-PB-MCCSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_15" desc="The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types" id="MISRAC2012-RULE_21_15-a" origId="CODSTA-183" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_16" desc="The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" id="MISRAC2012-RULE_21_16-a" origId="CODSTA-184" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_17" desc="Avoid overflow due to reading a not zero terminated string" id="MISRAC2012-RULE_21_17-a" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_17" desc="Avoid overflow when writing to a buffer" id="MISRAC2012-RULE_21_17-b" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_18" desc="The size_t argument passed to any function in string.h shall have an appropriate value" id="MISRAC2012-RULE_21_18-a" origId="BD-API-STRSIZE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_19" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="MISRAC2012-RULE_21_19-a" origId="CODSTA-185_a" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_19" desc="Strings pointed by members of the structure 'lconv' should not be modified" id="MISRAC2012-RULE_21_19-b" origId="CODSTA-185_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_2" desc="The names of standard library macros, objects and functions shall not be reused" id="MISRAC2012-RULE_21_2-a" origId="MISRA2004-20_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_2" desc="The names of standard library macros, objects and functions shall not be reused (C90)" id="MISRAC2012-RULE_21_2-b" origId="MISRA2004-20_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_2" desc="The names of standard library macros, objects and functions shall not be reused (C99)" id="MISRAC2012-RULE_21_2-c" origId="MISRA2004-20_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_20" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="MISRAC2012-RULE_21_20-a" origId="BD-PB-INVRET" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_21" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_21-a" origId="SECURITY-48_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-RULE_21_3" desc="Dynamic heap memory allocation shall not be used" id="MISRAC2012-RULE_21_3-a" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_4" desc="The setjmp macro and the longjmp function shall not be used" id="MISRAC2012-RULE_21_4-a" origId="MISRA2004-20_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_4" desc="The standard header file &lt;setjmp.h> shall not be used" id="MISRAC2012-RULE_21_4-b" origId="MISRA2004-20_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_5" desc="The standard header file &lt;signal.h> shall not be used" id="MISRAC2012-RULE_21_5-a" origId="MISRA2004-20_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_5" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="MISRAC2012-RULE_21_5-b" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="1;" cat="MISRAC2012-RULE_21_6" desc="The Standard Library input/output functions shall not be used" id="MISRAC2012-RULE_21_6-a" origId="CODSTA-110" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_21_7" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="MISRAC2012-RULE_21_7-a" origId="MISRA2004-20_10" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_8" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_8-a" origId="PB-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_8" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_8-b" origId="PB-75_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_8" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_8-c" origId="PB-75_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_9" desc="The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" id="MISRAC2012-RULE_21_9-a" origId="CODSTA-107" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_1" desc="Ensure resources are freed" id="MISRAC2012-RULE_22_1-a" origId="BD-RES-LEAKS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_10" desc="Properly use errno value" id="MISRAC2012-RULE_22_10-a" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_2" desc="Do not use resources that have been freed" id="MISRAC2012-RULE_22_2-a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_2" desc="Do not free resources using invalid pointers" id="MISRAC2012-RULE_22_2-b" origId="BD-RES-INVFREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_3" desc="The same file shall not be opened for read and write access at the same time on different streams" id="MISRAC2012-RULE_22_3-a" origId="BD-PB-WRRDSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_4" desc="Avoid writing to a stream which has been opened as read only" id="MISRAC2012-RULE_22_4-a" origId="BD-PB-WRROS" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_5" desc="A pointer to a FILE object shall not be dereferenced" id="MISRAC2012-RULE_22_5-a" origId="CODSTA-166_a" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_5" desc="A pointer to a FILE object shall not be dereferenced by a library function" id="MISRAC2012-RULE_22_5-b" origId="CODSTA-166_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_6" desc="Do not use resources that have been freed" id="MISRAC2012-RULE_22_6-a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_7" desc="The macro EOF should be compared with the unmodified return value from the Standard Library function" id="MISRAC2012-RULE_22_7-a" origId="BD-PB-EOFCOMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_8" desc="Properly use errno value" id="MISRAC2012-RULE_22_8-a" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_9" desc="Properly use errno value" id="MISRAC2012-RULE_22_9-a" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in &quot;else&quot; block" id="MISRAC2012-RULE_2_1-a" origId="MISRA2004-14_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="MISRAC2012-RULE_2_1-b" origId="MISRA2004-14_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="MISRAC2012-RULE_2_1-c" origId="MISRA2004-14_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in switch statement" id="MISRAC2012-RULE_2_1-d" origId="MISRA2004-14_1_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in 'for' loop" id="MISRAC2012-RULE_2_1-e" origId="MISRA2004-14_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="MISRAC2012-RULE_2_1-f" origId="MISRA2004-14_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="MISRAC2012-RULE_2_1-g" origId="MISRA2004-14_1_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_2" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRAC2012-RULE_2_2-a" origId="MISRA2004-14_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="5;" authUrg="0;" cat="MISRAC2012-RULE_2_2" desc="Avoid unused values" id="MISRAC2012-RULE_2_2-b" origId="BD-PB-VOVR" sev="2" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_3" desc="A function should not contain unused type declarations" id="MISRAC2012-RULE_2_3-a" origId="CODSTA-175_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_3" desc="A source file should not contain unused type declarations" id="MISRAC2012-RULE_2_3-b" origId="CODSTA-175_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_4" desc="A function should not contain unused local tag declarations" id="MISRAC2012-RULE_2_4-a" origId="CODSTA-176_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_4" desc="A source file should not contain unused tag declarations" id="MISRAC2012-RULE_2_4-b" origId="CODSTA-176_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_5" desc="A source file should not contain unused macro definitions" id="MISRAC2012-RULE_2_5-a" origId="CODSTA-177" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_6" desc="A function should not contain unused label declarations" id="MISRAC2012-RULE_2_6-a" origId="OPT-37" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_2_7" desc="There should be no unused parameters in functions" id="MISRAC2012-RULE_2_7-a" origId="OPT-38" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_1" desc="The character sequence /* shall not be used within a C-style comment" id="MISRAC2012-RULE_3_1-a" origId="MISRA2004-2_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_1" desc="The character sequence // shall not be used within a C-style comment" id="MISRAC2012-RULE_3_1-b" origId="COMMENT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_1" desc="The character sequence /* shall not be used within a C++-style comment" id="MISRAC2012-RULE_3_1-c" origId="COMMENT-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_2" desc="Line-splicing shall not be used in // comments" id="MISRAC2012-RULE_3_2-a" origId="COMMENT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_4_1" desc="Octal and hexadecimal escape sequences shall be terminated" id="MISRAC2012-RULE_4_1-a" origId="CODSTA-117" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_4_2" desc="Trigraphs shall not be used" id="MISRAC2012-RULE_4_2-a" origId="MISRA2004-4_2" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_1" desc="External identifiers shall be distinct" id="MISRAC2012-RULE_5_1-a" origId="CODSTA-178" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c90)" id="MISRAC2012-RULE_5_2-a" origId="CODSTA-179_a_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c99)" id="MISRAC2012-RULE_5_2-b" origId="CODSTA-179_a_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the same block scope and name space shall be distinct (c90)" id="MISRAC2012-RULE_5_2-c" origId="CODSTA-179_b_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the same block scope and name space shall be distinct (c99)" id="MISRAC2012-RULE_5_2-d" origId="CODSTA-179_b_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_3" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="MISRAC2012-RULE_5_3-a" origId="MISRA2004-5_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_3" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="MISRAC2012-RULE_5_3-b" origId="MISRA2004-5_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of its parameters(c90)" id="MISRAC2012-RULE_5_4-a" origId="CODSTA-171_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of its parameters(c99)" id="MISRAC2012-RULE_5_4-b" origId="CODSTA-171_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c90)" id="MISRAC2012-RULE_5_4-c" origId="CODSTA-172_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c99)" id="MISRAC2012-RULE_5_4-d" origId="CODSTA-172_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_5" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c90)" id="MISRAC2012-RULE_5_5-a" origId="CODSTA-170_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_5" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c99)" id="MISRAC2012-RULE_5_5-b" origId="CODSTA-170_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_6" desc="Do not reuse typedef names" id="MISRAC2012-RULE_5_6-a" origId="MISRA2004-5_3_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_6" desc="Do not reuse typedef names as a typedef name" id="MISRAC2012-RULE_5_6-b" origId="MISRA2004-5_3_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_7" desc="A tag name shall not be reused for other purpose within the program" id="MISRAC2012-RULE_5_7-a" origId="MISRA2004-5_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_7" desc="A tag name shall not be reused to define a different tag" id="MISRAC2012-RULE_5_7-b" origId="MISRA2004-5_4_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_8" desc="Identifiers that define objects or functions with external linkage shall be unique" id="MISRAC2012-RULE_5_8-a" origId="CODSTA-180" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_9" desc="No object or function identifier with static storage duration should be reused" id="MISRAC2012-RULE_5_9-a" origId="MISRA2004-5_5_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_9" desc="No object or function identifier with static storage duration should be reused" id="MISRAC2012-RULE_5_9-b" origId="MISRA2004-5_5_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_6_1" desc="Bit fields shall only be defined to be of type unsigned int or signed int" id="MISRAC2012-RULE_6_1-a" origId="MISRA2004-6_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_6_2" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="MISRAC2012-RULE_6_2-a" origId="CODSTA-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_1" desc="Octal constants (other than zero) shall not be used" id="MISRAC2012-RULE_7_1-a" origId="MISRA2004-7_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_2" desc="A 'U' suffix shall be applied to all constants of unsigned type" id="MISRAC2012-RULE_7_2-a" origId="MISRA2004-10_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_3" desc="Use capital 'L' instead of lowercase 'l' to indicate long" id="MISRAC2012-RULE_7_3-a" origId="PORT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="26;" authUrg="0;" cat="MISRAC2012-RULE_7_4" desc="A string literal shall not be modified" id="MISRAC2012-RULE_7_4-a" origId="PB-27" sev="2" total="26" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_1" desc="Whenever a function is declared or defined, its type shall be explicitly stated" id="MISRAC2012-RULE_8_1-a" origId="MISRA2004-8_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_1" desc="Whenever an object is declared or defined, its type shall be explicitly stated" id="MISRAC2012-RULE_8_1-b" origId="MISRA2004-8_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_10" desc="An inline function shall be declared with the static storage class" id="MISRAC2012-RULE_8_10-a" origId="CODSTA-120" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_11" desc="When an array is declared with external linkage, its size shall be stated explicitly or defined implicitly by initialisation" id="MISRAC2012-RULE_8_11-a" origId="MISRA2004-8_12" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_12" desc="Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" id="MISRAC2012-RULE_8_12-a" origId="PB-58" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_8_13" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="MISRAC2012-RULE_8_13-a" origId="MISRA2004-16_7" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_13" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRAC2012-RULE_8_13-b" origId="MISRA2004-16_7_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_14" desc="The restrict type qualifier shall not be used" id="MISRAC2012-RULE_8_14-a" origId="CODSTA-121" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_2" desc="Identifiers shall be given for all of the parameters in a function prototype declaration" id="MISRAC2012-RULE_8_2-a" origId="MISRA2004-16_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_2" desc="Function types shall have named parameters" id="MISRAC2012-RULE_8_2-b" origId="CODSTA-158" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="1;" cat="MISRAC2012-RULE_8_2" desc="Function types shall be in prototype form" id="MISRAC2012-RULE_8_2-c" origId="CODSTA-159" sev="2" total="10" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_3" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRAC2012-RULE_8_3-a" origId="MISRA2004-8_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_3" desc="The identifiers used in the declaration and definition of a function shall be identical" id="MISRAC2012-RULE_8_3-b" origId="MISRA2004-16_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_3" desc="All declarations of an object or function shall have compatible types" id="MISRAC2012-RULE_8_3-c" origId="GLOBAL-COMPATDECLS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="1;" cat="MISRAC2012-RULE_8_4" desc="A declaration shall be visible when an object or function with external linkage is defined" id="MISRAC2012-RULE_8_4-a" origId="CODSTA-118" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_4" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRAC2012-RULE_8_4-b" origId="MISRA2004-8_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_5" desc="An external object or function shall not have more than one non-defining declaration in translation unit" id="MISRAC2012-RULE_8_5-a" origId="CODSTA-154" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_6" desc="An identifier with external linkage shall have exactly one external definition" id="MISRAC2012-RULE_8_6-a" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="6;" authUrg="0;" cat="MISRAC2012-RULE_8_7" desc="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" id="MISRAC2012-RULE_8_7-a" origId="GLOBAL-AVOIDEXTERN" sev="4" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_8" desc="The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" id="MISRAC2012-RULE_8_8-a" origId="MISRA2004-8_11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_9" desc="Objects shall be defined at block scope if they are only accessed from within a single function" id="MISRAC2012-RULE_8_9-a" origId="MISRA2004-8_7" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_1" desc="Avoid use before initialization" id="MISRAC2012-RULE_9_1-a" origId="BD-PB-NOTINIT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_2" desc="The initializer for an aggregate or union shall be enclosed in braces" id="MISRAC2012-RULE_9_2-a" origId="INIT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_3" desc="Arrays shall not be partially initialized" id="MISRAC2012-RULE_9_3-a" origId="MISRA2004-9_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_4" desc="An element of an object shall not be initialized more than once" id="MISRAC2012-RULE_9_4-a" origId="PB-69" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_5" desc="Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" id="MISRAC2012-RULE_9_5-a" origId="CODSTA-186" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate resources in function argument list because the order of evaluation of a function's parameters is undefined" id="MRM-01" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use the same form in corresponding calls to new/malloc and delete/free" id="MRM-06" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not invoke malloc/realloc for objects having constructors" id="MRM-08" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Avoid hiding the global new" id="MRM-32" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Declare a copy assignment operator for classes with dynamically allocated memory" id="MRM-37" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Declare a copy constructor for classes with dynamically allocated memory" id="MRM-38" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Never return a dereferenced local pointer initialized by new in this function scope" id="MRM-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Call delete on pointer members in destructors" id="MRM-33" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Provide error handling for file opening errors right next to the call to fopen" id="MRM-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="A copy constructor shall copy all data members and bases" id="MRM-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Call fclose() on pointer member in destructor if the pointer was used to open a file" id="MRM-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="An assignment operator shall assign all data bases" id="MRM-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new'" id="MRM-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate more than one resource in a single statement" id="MRM-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="All classes should contain the assignment operator or appropriate comment" id="MRM-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="All classes should contain the copy constructor or appropriate comment" id="MRM-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Don't memcpy or memcmp non-PODs" id="MRM-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always assign a new value to an expression that points to deallocated memory" id="MRM-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always assign a new value to global or member variable that points to deallocated memory" id="MRM-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always assign a new value to parameter or local variable that points to deallocated memory" id="MRM-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Adhere to convention when writing new and delete" id="MRM-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Adhere to convention when writing new" id="MRM-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator new, it should provide overloads of all three of plain, in-place, and non-throwing operator new" id="MRM-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator new[], it should provide overloads of all three of plain, in-place, and non-throwing operator new[]" id="MRM-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator delete, it should provide overloads of all three of plain, in-place, and non-throwing operator delete" id="MRM-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator delete[], it should provide overloads of all three of plain, in-place, and non-throwing operator delete[]" id="MRM-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate memory and expect that someone else will deallocate it later" id="MRM-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate memory and expect that someone else will deallocate it later" id="MRM-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate memory and expect that someone else will deallocate it later" id="MRM-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use objects to manage resources" id="MRM-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use objects to manage resources" id="MRM-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Store newed objects in smart pointers in standalone statements" id="MRM-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Write operator delete if you write operator new" id="MRM-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Write operator delete[] if you write operator new[]" id="MRM-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always provide new and delete together" id="MRM-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always provide new[] and delete[] together" id="MRM-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use allocation by declaration rather than by new or malloc" id="MRM-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Freed memory shouldn't be accessed under any circumstances" id="MRM-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Destructor should not be called manually" id="MRM-31_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Check the return value of new" id="MRM-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Never provide brackets ([]) for delete when deallocating non-arrays" id="MRM-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="MRM-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Copy and destroy consistently" id="MRM-40" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="A copy assignment operator should be declared when a copy constructor is declared (and vice versa)" id="MRM-40_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Both the copy constructor and copy assignment operator should have the same public/protected/private permission" id="MRM-40_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If you have a non-trivial copy constructor or copy assignment operator, you should also declare a destructor" id="MRM-40_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor" id="MRM-40_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not use sizeof operator on pointer type to specify the size of the memory to be allocated via 'malloc', 'calloc' or 'realloc' function" id="MRM-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not use calloc, malloc, realloc and free functions" id="MRM-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Classes containing at least one non-static member variable should declare the assignment operator or contain appropriate comment" id="MRM-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Classes containing at least one non-static member variable should declare the copy constructor or contain appropriate comment" id="MRM-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="A copy constructor and a copy assignment operator shall be declared for classes that contain pointers to data items or nontrivial destructors" id="MRM-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not use 'delete' on pointers to a void type" id="MRM-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails" id="MRM-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Avoid using the default operator 'new' for over-aligned types" id="MRM-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="An overhead should be used when an array of objects is passed to the placement 'new' allocation function" id="MRM-55_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Copy assignment operators should not have side effects that could affect copying the object" id="MRM-56" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Move assignment operators should not have side effects that could affect moving the object" id="MRM-57" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Declare both private copy constructor and copy assignment operator at the same time" id="MRM-50" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use RAII to prevent resource leaks" id="MRM-52" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Identifiers for constant and enumerator values shall be lowercase" id="NAMING-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="All &quot;#define&quot; constants shall be in uppercase" id="NAMING-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="In an enumerated list, list members (elements) shall be in uppercase and names or tags for the list shall be in lowercase" id="NAMING-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Use lowercase for file names" id="NAMING-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING" desc="Global prefixes should only be used for global variables" id="NAMING-04" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin local variable names with a lowercase letters" id="NAMING-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin global variable names with a lowercase letters" id="NAMING-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin member variable names with a lowercase letters" id="NAMING-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all boolean type variables with 'b'" id="NAMING-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin class, struct, union, enum, and typedef names with an uppercase letter" id="NAMING-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The names of abstract data types, structures, typedefs, and enumerated types are to begin with an uppercase letter" id="NAMING-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The name of enumeration type shall begin with an uppercase letter and contain a suffix '_t' at the end" id="NAMING-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The names of structures shall begin with an uppercase letter and contain a suffix '_t' at the end" id="NAMING-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING" desc="Begin constant variables with 'c'" id="NAMING-13" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin class data member names with 'its'" id="NAMING-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all double type variable with 'd'" id="NAMING-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all float type variables with 'f'" id="NAMING-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="14;" authUrg="0;" cat="NAMING" desc="Begin all function names with uppercase letter" id="NAMING-17" sev="3" total="14" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="NAMING" desc="Begin global variable names with 'the'" id="NAMING-18" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="NAMING" desc="Begin all integer type variable with 'i'" id="NAMING-19" sev="3" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Functions that begin with 'is' should return boolean values" id="NAMING-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all long integer variables with 'li'" id="NAMING-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="NAMING" desc="Prefix a variable type 'pointer' with a 'p' character" id="NAMING-22" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all short integer variables with 'si'" id="NAMING-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all signed character variables with 'c'" id="NAMING-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="NAMING" desc="Begin all terminated characters string variables with 'sz'" id="NAMING-25" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all unsigned character type variables with 'uc'" id="NAMING-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all unsigned integer type variables with 'ui'" id="NAMING-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Use lowercase letters for structure and union member names" id="NAMING-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Append names of non-scalar typedefs with &quot;_t&quot;" id="NAMING-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Implementation files in C always have the file name extension &quot;.c&quot;" id="NAMING-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Do not use typenames that differ only by the use of uppercase and lowercase letters" id="NAMING-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="An include file for a class should have a file name of the form &lt;class name> + extension" id="NAMING-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Do not use identifiers which begin with one or two underscores (`_' or `__')" id="NAMING-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Global function names should start with lowercase" id="NAMING-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Member function names should start with lowercase" id="NAMING-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Names of parameters in declaration and definition should be identical" id="NAMING-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Include files in C++ always have the file name extension '.hh'" id="NAMING-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Implementation files in C++ always have the file name extension &quot;.cc&quot;" id="NAMING-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Inline definition files always have the file name extension &quot;.icc&quot;" id="NAMING-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Only the first word of the name of a class, structure, namespace, enumeration, or typedef will begin with an uppercase letter" id="NAMING-40" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Header files will always have a file name extension of '.h'" id="NAMING-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="File name extension, if present, should be &quot;*.cpp&quot; or &quot;*.h&quot;" id="NAMING-43" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="All letters contained in function and variable names will be composed entirely of lowercase letters" id="NAMING-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" id="NAMING-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The ', &quot;, /* or // characters shall not occur in a header file name" id="NAMING-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Different identifiers shall be typographically unambiguous" id="NAMING-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The \ character should not occur in a header file name" id="NAMING-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" id="NAMING-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Universal character names shall be used only inside character or string literals" id="NAMING-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Header files should have a file extension of: &quot;.h&quot;, &quot;.hpp&quot; or &quot;.hxx&quot;" id="NAMING-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Use visually distinct identifiers" id="NAMING-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Implementation files in C++ will always have a file name extension of &quot;.cpp&quot;" id="NAMING-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Identifiers in the same name space with overlapping visibility should be typographically unambiguous" id="NAMING-50" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for array variables and parameters" id="NAMING-HN-01" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for bool types" id="NAMING-HN-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for bool pointer, array, or reference types" id="NAMING-HN-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for byte types" id="NAMING-HN-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for byte pointer, array, or reference types" id="NAMING-HN-05" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for char types" id="NAMING-HN-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for array of char types" id="NAMING-HN-07" sev="3" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for pointer, array, or reference to array of char types" id="NAMING-HN-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for char pointer, array, or reference types" id="NAMING-HN-09" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for char pointer or reference types" id="NAMING-HN-10" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for constant parameters" id="NAMING-HN-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for double-precision floating point types" id="NAMING-HN-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for double-precision floating point pointer, array, or reference types" id="NAMING-HN-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for dword types" id="NAMING-HN-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for dword pointer, array, or reference types" id="NAMING-HN-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for dynamically allocated array" id="NAMING-HN-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for floating point types" id="NAMING-HN-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for floating point pointer, array, or reference types" id="NAMING-HN-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for class declaration" id="NAMING-HN-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for structs declaration" id="NAMING-HN-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for ifstream type variables and parameters" id="NAMING-HN-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for int types" id="NAMING-HN-22" sev="3" total="10" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for int pointer, array, or reference types" id="NAMING-HN-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for istream type parameters and variables" id="NAMING-HN-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for long int types" id="NAMING-HN-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for long double-precision floating point types" id="NAMING-HN-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for long double-precision floating point pointer, array, or reference types" id="NAMING-HN-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for long int pointer, array, or reference types" id="NAMING-HN-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for member variables" id="NAMING-HN-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for int types" id="NAMING-HN-30" sev="3" total="10" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for int pointer, array, or reference types" id="NAMING-HN-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for ofstream type parameters and variables" id="NAMING-HN-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for ostream type parameters and variables" id="NAMING-HN-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="9;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for pointer" id="NAMING-HN-34" sev="3" total="9" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for reference parameters" id="NAMING-HN-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for short int types" id="NAMING-HN-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for short int pointer, array, or reference types" id="NAMING-HN-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for static variables" id="NAMING-HN-38" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for string types" id="NAMING-HN-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for string pointer, array, or reference types" id="NAMING-HN-40" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for unsigned types" id="NAMING-HN-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for void pointer types" id="NAMING-HN-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for word types" id="NAMING-HN-43" sev="3" total="10" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for word pointer, array, or reference types" id="NAMING-HN-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Class cannot inherit other class more than once unless it is virtual inheritance" id="OOP-03" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Be wary about using multiple inheritance of classes that are not abstract interfaces" id="OOP-07" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not directly access global data from a constructor" id="OOP-08" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid calling virtual functions from constructors" id="OOP-16" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid calling virtual functions from destructors" id="OOP-16_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Define a virtual destructor in classes used as base classes which have virtual functions" id="OOP-22" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Make destructors virtual in base classes" id="OOP-24" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A pointer to an abstract class shall not be converted to a pointer of a class that inherits from that abstract class" id="OOP-29" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Make base class destructors public and virtual, or protected and nonvirtual" id="OOP-31" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="If a class destructor is called and the class has virtual functions it shall have a virtual destructor" id="OOP-38" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Casts from a base class to a derived class should not be performed on polymorphic types" id="OOP-49" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not use multiple inheritance" id="OOP-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Multiple inheritance shall be limited to at most 1 protected implementation" id="OOP-07_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Multiple inheritance shall not use any public implementations" id="OOP-07_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid using global data in member functions" id="OOP-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid &quot;public&quot; data members" id="OOP-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid 'protected' data members" id="OOP-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="If a class has virtual functions it shall have a virtual destructor" id="OOP-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid casts down the inheritance hierarchy" id="OOP-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Down casting (casting from base to derived class) shall not be allowed" id="OOP-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A stateful virtual base shall be explicitly declared in each derived class that accesses it" id="OOP-39_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A base class shall not be both virtual and non-virtual in the same hierarchy" id="OOP-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid public copy constructors and assignment operators in base classes" id="OOP-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid slicing. Consider Clone instead of copying in base classes" id="OOP-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not derive functions with the same name from more than one base class" id="OOP-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="For multiple inheritance use virtual common base class" id="OOP-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid the use of global objects in destructors" id="OOP-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid using the friend mechanism" id="OOP-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Friend declarations shall not be used except declarations of comparison operators" id="OOP-11_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Protected member function shall not return non-const handles to private class-data" id="OOP-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not redefine an inherited virtual function with a different default parameter value" id="OOP-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid explicit cast from derived to a base class" id="OOP-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Use the virtual keyword if a subclass implements a virtual function" id="OOP-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid declaring virtual functions inline" id="OOP-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Never convert pointers to objects of a derived class to pointers to objects of a virtual base class" id="OOP-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Declare copy assignment operator for class with reference or const members" id="OOP-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Declare the copy constructor and copy assignment operator private not in class itself, but in a specifically designed base class" id="OOP-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Never redefine an inherited nonvirtual function" id="OOP-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not redefine an inherited nonvirtual function with template parameter" id="OOP-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Public member functions shall not return non-const handles to private/protected class-data" id="OOP-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="The copy assignment operator shall be declared protected or private in an abstract class" id="OOP-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy" id="OOP-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="All constructors that are callable with a single argument of fundamental type shall be declared explicit" id="OOP-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member" id="OOP-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Classes should not be derived from virtual bases" id="OOP-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Member data in non-POD types shall be private" id="OOP-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" id="OOP-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Member functions declared in derived class should not hide functions declared in base classes" id="OOP-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not increase the accessibility of overridden or hidden methods" id="OOP-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A user-defined assignment operator shall not be virtual" id="OOP-56" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Structs should only contain public data members and should not be a base or inherit" id="OOP-57" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Write a using declaration to redeclare overloaded functions" id="OOP-17" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Check for assignment to self in operator=" id="OOP-34" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A virtual base shall be explicitly declared in each derived class" id="OOP-39" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Hierarchies should be based on abstract classes" id="OOP-40" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" id="OOP-43" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A pointer to a class may not be converted to a pointer of a second class unless the one inherits from the other" id="OOP-52" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A non-POD type should be defined as class" id="OOP-55" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Consider use composition instead of private inheritance" id="OOP-14" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Prefer composition when don't need inheritance" id="OOP-37" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Use namespace instead of class or structure containing only static functions" id="OOP-51" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="OPT" desc="Eliminate unused parameters" id="OPT-03" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Variables will not be introduced until they can be initialized with meaningful values" id="OPT-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="OPT" desc="Declare variables as locally as possible" id="OPT-01" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Prefer canonical form of ++ and --. Prefer calling the prefix forms" id="OPT-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Avoid unused private member variables" id="OPT-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Prefer &quot;a @= b&quot; than &quot;a = a @ b&quot;, where &quot;@&quot; is +, -, *, /, %" id="OPT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Prefer &quot;a @= b&quot; than &quot;a = a @ b&quot;, where &quot;@&quot; is &amp;, |, ^, &lt;&lt;, >>" id="OPT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="OPT" desc="Do not declare variables in &quot;if&quot;, &quot;for&quot;, &quot;while&quot;, and &quot;do while&quot; statement" id="OPT-10" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="If a file-level static variable is used/referenced in one function only then include that variable in the function itself" id="OPT-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="If a file-level static variable is used/referenced in one class only then include that variable in the class itself" id="OPT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Declare member variables in the descending size order" id="OPT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Pass objects by reference instead of by value" id="OPT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Consider overloading to avoid implicit type conversions" id="OPT-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Global function containing recursion, loops or virtual function call should not be inlined" id="OPT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Avoid inline constructors and destructors" id="OPT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Member function containing recursion or loops should not be inlined" id="OPT-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Consider using op= instead of stand-alone op" id="OPT-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Postpone variable definitions as long as possible" id="OPT-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Every switch statement shall have at least one non-empty case clause" id="OPT-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Useless case statement shall not be permitted" id="OPT-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="'strlen' function should not be used to check string against NULL/non-NULL" id="OPT-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Every defined function with internal linkage shall be used at least once" id="OPT-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="There shall be no unused parameters (named or unnamed) in non-virtual functions" id="OPT-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="All non-empty functions with void return type shall have external side effect(s)" id="OPT-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Do not assign a variable to itself" id="OPT-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Do not use a variable inside its own initializer" id="OPT-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Every switch statement shall have at least two switch-clauses" id="OPT-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="There shall be no unused named parameters in virtual functions" id="OPT-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="OPT" desc="Avoid unused local variables" id="OPT-02" sev="4" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="OPT" desc="Avoid unnecessary local variables" id="OPT-06" sev="4" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Trivial accessor and mutator functions should be inlined" id="OPT-23" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Trivial forwarding functions should be inlined" id="OPT-24" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Only functions with 1 or 2 statements should be considered candidates for inline functions" id="OPT-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="The number of accessor and mutator functions should be minimized" id="OPT-27" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Redundant explicit cast to the same type is not allowed" id="OPT-29" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="OPT" desc="Functions with void return type shall not be empty" id="OPT-32_b" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="A function should not contain unused label declarations" id="OPT-37" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="OPT" desc="There should be no unused parameters in functions" id="OPT-38" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="The same code (after preprocessing) in two branches of if-else-if chain" id="OPT-40_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="The same code (after preprocessing) in different clauses of switch statement" id="OPT-40_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="A file should directly include only the headers that contain declarations and definitions required to compile that file" id="OPT-41" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Remove unnecessary '== true'" id="OPT-09" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Consider returning object by reference instead of by value" id="OPT-33" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Protect against command injection" id="OWASP2017-A1-b" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Avoid printing tainted data on the output console" id="OWASP2017-A1-c" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Protect against environment injection" id="OWASP2017-A1-d" origId="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Exclude unsanitized user input from format strings" id="OWASP2017-A1-e" origId="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Protect against SQL injection" id="OWASP2017-A1-f" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Avoid passing unvalidated binary data to log methods" id="OWASP2017-A1-a" origId="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A10" desc="All exceptions should be rethrown or logged with standard logger" id="OWASP2017-A10-a" origId="EXCEPT-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A2" desc="Do not use weak encryption functions" id="OWASP2017-A2-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A3" desc="Properly seed pseudorandom number generators" id="OWASP2017-A3-a" origId="BD-SECURITY-RAND" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A4" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="OWASP2017-A4-a" origId="BD-SECURITY-XXEXRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A5" desc="Protect against file name injection" id="OWASP2017-A5-a" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A5" desc="Observe correct revocation order while relinquishing privileges" id="OWASP2017-A5-b" origId="SECURITY-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A5" desc="Ensure that privilege relinquishment is successful" id="OWASP2017-A5-c" origId="SECURITY-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A6" desc="Properly use errno value" id="OWASP2017-A6-c" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A6" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="OWASP2017-A6-a" origId="EXCEPT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A6" desc="Do not leave 'catch' blocks empty" id="OWASP2017-A6-b" origId="EXCEPT-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API10" desc="All exceptions should be rethrown or logged with standard logger" id="OWASP2019-API10-a" origId="EXCEPT-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API10" desc="Do not use 'syslog' function for logging purposes" id="OWASP2019-API10-b" origId="SECURITY-21" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API2" desc="Do not use weak encryption functions" id="OWASP2019-API2-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid buffer overflow due to defining incorrect format limits" id="OWASP2019-API3-d" origId="BD-PB-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid overflow due to reading a not zero terminated string" id="OWASP2019-API3-e" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid overflow when reading from a buffer" id="OWASP2019-API3-f" origId="BD-PB-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid overflow when writing to a buffer" id="OWASP2019-API3-g" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="OWASP2019-API3-h" origId="BD-SECURITY-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid buffer read overflow from tainted data" id="OWASP2019-API3-i" origId="BD-SECURITY-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid buffer write overflow from tainted data" id="OWASP2019-API3-j" origId="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid race conditions while checking for the existence of a symbolic link" id="OWASP2019-API3-m" origId="BD-TRS-SYMLINK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Do not pass empty container iterators to std algorithms as destinations" id="OWASP2019-API3-a" origId="BD-CO-EMPCON" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid accessing arrays out of bounds" id="OWASP2019-API3-b" origId="BD-PB-ARRAY" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid accessing arrays and pointers out of bounds" id="OWASP2019-API3-c" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Properly seed pseudorandom number generators" id="OWASP2019-API3-k" origId="BD-SECURITY-RAND" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid passing sensitive data to functions that write to log files" id="OWASP2019-API3-l" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="OWASP2019-API3-p" origId="SECURITY-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid functions which use time from MFC library" id="OWASP2019-API3-o" origId="SECURITY-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="A pointer to a structure should not be passed to a function that can copy data to the user space" id="OWASP2019-API3-q" origId="SECURITY-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Usage of system properties (environment variables) should be restricted" id="OWASP2019-API3-n" origId="SECURITY-03" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API4" desc="Ensure resources are freed" id="OWASP2019-API4-b" origId="BD-RES-LEAKS" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API4" desc="Validate potentially tainted data before it is used to determine the size of memory allocation" id="OWASP2019-API4-a" origId="BD-SECURITY-TDALLOC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API7" desc="Properly use errno value" id="OWASP2019-API7-a" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API7" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="OWASP2019-API7-b" origId="EXCEPT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API7" desc="Do not leave 'catch' blocks empty" id="OWASP2019-API7-c" origId="EXCEPT-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Protect against command injection" id="OWASP2019-API8-a" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Avoid printing tainted data on the output console" id="OWASP2019-API8-b" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Protect against environment injection" id="OWASP2019-API8-c" origId="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Protect against file name injection" id="OWASP2019-API8-d" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Exclude unsanitized user input from format strings" id="OWASP2019-API8-e" origId="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Protect against SQL injection" id="OWASP2019-API8-f" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="OWASP2019-API8-g" origId="BD-SECURITY-XXEXRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Use care to ensure that LoadLibrary() will load the correct library" id="OWASP2019-API8-h" origId="SECURITY-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Avoid passing dynamically created strings into exec" id="OWASP2019-API8-i" origId="SECURITY-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Avoid passing user input into methods as parameters" id="OWASP2019-API8-j" origId="SECURITY-20" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="All usage of assembler shall be documented" id="OWASP2019-API9-c" origId="COMMENT-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="Use of floating-point arithmetic shall be documented" id="OWASP2019-API9-d" origId="COMMENT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="All uses of the #pragma directive shall be documented and explained" id="OWASP2019-API9-g" origId="MISRA2004-3_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="OWASP2019-API9" desc="Objects or functions with external linkage shall be declared in a header file" id="OWASP2019-API9-e" origId="MISRA-023" sev="4" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="Assert liberally to document internal assumptions and invariants" id="OWASP2019-API9-a" origId="CODSTA-11" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="When using enum, the values of each member should be explicitly declared" id="OWASP2019-API9-b" origId="CODSTA-21" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="Document integer division" id="OWASP2019-API9-f" origId="MISRA-041" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A1" desc="Protect against file name injection" id="OWASP2021-A1-a" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A1" desc="Observe correct revocation order while relinquishing privileges" id="OWASP2021-A1-b" origId="SECURITY-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A1" desc="Ensure that privilege relinquishment is successful" id="OWASP2021-A1-c" origId="SECURITY-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A2" desc="Properly seed pseudorandom number generators" id="OWASP2021-A2-a" origId="BD-SECURITY-RAND" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Protect against command injection" id="OWASP2021-A3-b" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Avoid printing tainted data on the output console" id="OWASP2021-A3-c" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Protect against environment injection" id="OWASP2021-A3-d" origId="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Exclude unsanitized user input from format strings" id="OWASP2021-A3-e" origId="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Protect against SQL injection" id="OWASP2021-A3-f" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Avoid passing unvalidated binary data to log methods" id="OWASP2021-A3-a" origId="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A4" desc="Avoid passing sensitive data to functions that write to log files" id="OWASP2021-A4-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A5" desc="Properly use errno value" id="OWASP2021-A5-c" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A5" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="OWASP2021-A5-d" origId="BD-SECURITY-XXEXRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A5" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="OWASP2021-A5-a" origId="EXCEPT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A5" desc="Do not leave 'catch' blocks empty" id="OWASP2021-A5-b" origId="EXCEPT-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A7" desc="Do not use weak encryption functions" id="OWASP2021-A7-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A8" desc="Use care to ensure that LoadLibrary() will load the correct library" id="OWASP2021-A8-a" origId="SECURITY-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A9" desc="All exceptions should be rethrown or logged with standard logger" id="OWASP2021-A9-a" origId="EXCEPT-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="4;" cat="PARSER" desc="Parser warning" id="PARSER-WARNING" sev="4" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="11;" authUrg="10;" cat="PARSER" desc="Parser remark" id="PARSER-REMARK" sev="5" total="11" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not call delete on non-pointers" id="PB-13" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Properly terminate character strings" id="PB-21" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor" id="PB-23" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Operators should not return value by reference" id="PB-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The definition of a constructor shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor" id="PB-24" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PB" desc="Unsigned arithmetic shall not be used" id="PB-25" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Public and protected methods should not be invoked by class constructor" id="PB-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="26;" authUrg="0;" cat="PB" desc="A string literal shall not be modified" id="PB-27" sev="2" total="26" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The following character sequences shall not appear in header file names: ', \, /*, //, or &quot;" id="PB-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The left-hand operand of a right-shift operator shall not have a negative value" id="PB-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not cast from or to incomplete class at the point of casting" id="PB-54" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not delete objects with incomplete class at the point of deletion" id="PB-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Boolean condition always evaluates to the same value due to enumeration with only zero or only non-zero constants" id="PB-68" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not dereference pointer type expressions" id="PB-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not use assignments inside a(b), a[b], and cast" id="PB-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Using mixed types in ternary operator is not allowed" id="PB-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Return value of a function must match declared return type" id="PB-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PB" desc="Assignment operator should have operands of compatible types" id="PB-06" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PB" desc="Do not assign function return value to a variable of incompatible type" id="PB-07" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not assign signed constants to unsigned integer variables" id="PB-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Don't treat arrays polymorphically" id="PB-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="PB" desc="Declared types of formal and actual parameters to functions must match" id="PB-11" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not cast a signed char to an unsigned int" id="PB-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Incorrect End-Of-String (EOS) definition" id="PB-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Don't assign the dividend of two integers to a floating-point type" id="PB-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid unintentionally discarding the remainder of integer division" id="PB-15_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid assigning out-of-range value to char type" id="PB-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid assigning out-of-range value to unsigned char type" id="PB-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid overloading class methods on a pointer and a numerical type" id="PB-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not create inline non-member functions that contain local static data" id="PB-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid slicing function arguments / return value" id="PB-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PB" desc="Do not use increment and decrement expressions inside a(b), a[b], and cast" id="PB-22" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="More than one 'enum' type shall not be used as a switch condition or a label in a case statement" id="PB-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not call 'sizeof' on constants" id="PB-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PB" desc="Do not call 'sizeof' on a pointer type" id="PB-32" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid implicit type conversions in assignments involving enum types" id="PB-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid implicit type conversions in comparisons involving enum types" id="PB-33_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Third parameter to 'memcpy'/'strncpy'/'memmove' should not depend on second" id="PB-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Assignment operators shall not be used in conditions without brackets" id="PB-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The unbounded functions of library &lt;cstring> shall not be used" id="PB-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Narrow and wide string literals shall not be concatenated" id="PB-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="String literals with different encoding prefixes shall not be concatenated" id="PB-38_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference" id="PB-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="A function shall not return a pointer or a reference to a parameter that is passed by const reference" id="PB-39_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="An identifier with array type passed as a function argument shall not decay to a pointer" id="PB-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="PB" desc="Do not pass expression with array type to a function with pointer or array type parameter" id="PB-41_b" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="An object shall not be assigned to an overlapping object" id="PB-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" id="PB-43" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="PB-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function" id="PB-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="PB-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function" id="PB-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="PB-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="PB-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" id="PB-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Pointer arithmetic shall not be applied to pointers that address variables of non-array type" id="PB-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid overloading global functions on a pointer and a numerical type" id="PB-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid overloading namespace functions on a pointer and a numerical type" id="PB-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PB" desc="Avoid implicit conversions from signed to unsigned type" id="PB-56" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="A pointer to an array of derived class objects should not be converted to a base class pointer" id="PB-57" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" id="PB-58" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Missing comma in a string array initialization" id="PB-59" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Suspicious argument to malloc" id="PB-60" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Pointer arithmetic performed on freshly allocated memory" id="PB-61" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid function calls with incorrect argument order" id="PB-62" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Function address should not be compared to zero" id="PB-63" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The values returned by string comparison functions should be compared only to zero" id="PB-64" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" id="PB-65" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type" id="PB-65_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="PB-66_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The same code (after preprocessing) in both branches of if-else statement" id="PB-67" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="An element of an object shall not be initialized more than once" id="PB-69" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="PB-70" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not copy instances of structures containing a flexible array member" id="PB-71" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not call va_arg with an argument of the incorrect type" id="PB-72" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="PB-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="PB-75_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="PB-75_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="C-style strings shall not be used" id="PB-76" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Expression statements shall not be explicit calls to constructors of temporary objects only" id="PB-77" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types" id="PB-78" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid function declarations that are syntactically ambiguous" id="PB-79" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="PB-66_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not add or subtract a constant with a value greater than one from an iterator" id="PB-74" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="PB-73" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Don't define entities with linkage in a header file" id="PFO-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Use multiple include guards" id="PFO-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="An include file should not contain more than one class definition" id="PFO-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="File with extension '.c' may not include other files with extension '.c'" id="PFO-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Never include other files in a file with extension '.icc'" id="PFO-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Use multiple include guards with pattern based on the header file name" id="PFO-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Use mechanism that prevents multiple inclusion of the file i.e. include guards or &quot;#pragma once&quot; preprocessor directive" id="PFO-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="&quot;#pragma once&quot; preprocessor directive should not be used in source files" id="PFO-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Do not define more than on class in a header file" id="PFO-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="PFO" desc="Every implementation file should declare a local constant string that describes the file" id="PFO-04" sev="5" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Don't use hard coded value of offset in structures" id="PORT-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Don't use hex constant '0xffffffff' as an error marker" id="PORT-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="A pointer to a long should not be casted to an int pointer" id="PORT-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not cast an int pointer to a long pointer" id="PORT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier" id="PORT-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Assigning result of ints operation to long without casting at least one of the ints is not allowed" id="PORT-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not assign a long int to an int" id="PORT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not pass long casted to an int in function call" id="PORT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Constant assignment to long should not involve int literals" id="PORT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not initialize a long int with int literals" id="PORT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not assign the value from 32 bit multiplication to long type" id="PORT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="20;" authUrg="0;" cat="PORT" desc="The type int shall always be declared as unsigned int or signed int" id="PORT-13" sev="3" total="20" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Avoid conversions from &quot;shorter&quot; type to &quot;longer&quot; type in assignment" id="PORT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not cast from &quot;shorter&quot; type to &quot;longer&quot; type" id="PORT-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Avoid conversions from a &quot;shorter&quot; type to a &quot;longer&quot; type in function calls" id="PORT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Don't use 'i64' or 'L' suffixes directly" id="PORT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Instead of casting a long type operand of an expression to int cast the result of the expression" id="PORT-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not declare variables of long type directly" id="PORT-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not assign a long value to a double" id="PORT-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="The names of identifiers should not be longer than 64 characters" id="PORT-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Avoid implicit conversions to a type of narrower size" id="PORT-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Avoid conversions of constant values to a narrower type" id="PORT-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="A pointer to a structure should not be passed to a function that writes data to a file" id="PORT-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Type long double shall not be used" id="PORT-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Type wchar_t shall not be used" id="PORT-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C++ external identifiers should differ in the first 64 characters" id="PORT-34_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C++ internal identifiers should differ from external identifiers in the first 64 characters" id="PORT-34_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C++ internal identifiers declared in the same scope should differ in the first 64 characters" id="PORT-34_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C external identifiers should differ in the first 31 characters" id="PORT-35_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C internal identifiers should differ from external identifiers in the first 31 characters" id="PORT-35_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C internal identifiers declared in the same scope should differ in the first 31 characters" id="PORT-35_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="The names of identifiers should not be longer than 31 characters" id="PORT-36_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="The names of macro identifiers should not be longer than 31 characters" id="PORT-36_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not throw an exception across execution boundaries" id="PORT-30" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not pass a nonstandard-layout type object across execution boundaries" id="PORT-31" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Use capital 'L' instead of lowercase 'l' to indicate long" id="PORT-01" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Use arrays of int types instead of large arrays of longs" id="PORT-22" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Use arrays of int types instead of dynamic allocated large arrays of longs" id="PORT-23" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Don't use large arrays of pointers to bool, char, short, int and float types" id="PORT-24" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Don't use macros in include statement" id="PREPROC-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="In a macro function, use parentheses before and after multiplication or division" id="PREPROC-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Do not allow absolute or relative path names in #include statements" id="PREPROC-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="0;" cat="PREPROC" desc="The #include directive shall use the &lt;filename.h> notation to include header files" id="PREPROC-09" sev="2" total="13" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Avoid using macro definitions" id="PREPROC-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="The #include pre-processor directive will only be used to include header (*.h) files" id="PREPROC-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="PREPROC-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="PREPROC" desc="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" id="PREPROC-10_b" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="PREPROC-10_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="PREPROC" desc="The #ifdef, #else, #elif preprocessor directives should not be used" id="PREPROC-11" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="The #if preprocessor directive should not be used" id="PREPROC-11_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" id="PREPROC-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Macro should not contain token pasting, variable argument list nor recursive macro calls" id="PREPROC-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="All macros must expand into complete syntactic units" id="PREPROC-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Pointer dereference operations may not be hidden in macro definitions" id="PREPROC-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="A macro parameter immediately following a # operator shall not immediately be followed by or preceded by a ## operator" id="PREPROC-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="1;" cat="PREPROC" desc="The input/output library stdio.h shall not be included" id="PREPROC-18" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" id="PREPROC-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Match the filename in a #include directive to the one on the filesystem" id="PREPROC-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="#error directive shall not be used" id="PREPROC-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="The #pragma directive shall not be used" id="PREPROC-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="All macro identifiers in preprocessor directives shall be defined before use, except in #ifdef and #ifndef preprocessor directives and the defined() operator" id="PREPROC-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="#undef shall not be used" id="PREPROC-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="PREPROC" desc="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" id="PREPROC-26" sev="3" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Don't redefine primitive types" id="PREPROC-03" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Don't define part of statement" id="PREPROC-04" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" id="PREPROC-17" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Incorrect 'NULL' definition" id="PREPROC-07" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Avoid token concatenation that may produce universal character names" id="PREPROC-21" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="The methods inside the SIGNAL and SLOT macros have to exist" id="QT-04" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not force thread termination by calling QThread::terminate()" id="QT-07" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not call new on QMutexLocker" id="QT-09" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not directly set specific Widget attributes that are set by Qt kernel" id="QT-12" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Every QObject subclass should contain a Q_OBJECT macro" id="QT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="QObject must not be inherited more than one time" id="QT-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="It's only possible to connect a signal to a slot or a signal to another signal" id="QT-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Mark signal emissions with the keyword &quot;emit&quot; to distinguish a signal emission from a normal method call" id="QT-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not set Idle or Critical priority to QThreads. Use High/Low/Med only" id="QT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="If using lock on a mutex in a function, release the lock in the same function" id="QT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Declare a copy constructor and operator= for any Qt - inherited objects that have pointers" id="QT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Never mix const and non-const iterators in assignment" id="QT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="If you use Q_DECLARE_FLAGS, you must also use Q_DECLARE_OPERATORS_FOR_FLAGS" id="QT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Q_DECLARE_OPERATORS_FOR_FLAGS must be in the global namespace, Q_DECLARE_FLAGS inside the enum's namespace" id="QT-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="The getters and setters of a Q_PROPERTY must exist and the types must match" id="QT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Properties of enum types must use Q_ENUMS" id="QT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Non-const function should not be called on the Qt object" id="QT-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not use setWindowFlags function on a Widget" id="QT-11" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Never use gets()" id="SECURITY-16" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="0;" cat="SECURITY" desc="Avoid functions which use time from standard C library" id="SECURITY-01" sev="2" total="10" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid functions which use random numbers from standard C library" id="SECURITY-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Use care to ensure that LoadLibrary() will load the correct library" id="SECURITY-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="SECURITY" desc="Avoid calling functions printf/wprintf with only one argument other than string constant" id="SECURITY-05" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using functions fprintf/fwprintf with only two parameters, when second parameter is a variable" id="SECURITY-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using data() function from 'string' class of standard library" id="SECURITY-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using the 'vfork()' function" id="SECURITY-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using unsecured shell functions that may be affected by shell metacharacters" id="SECURITY-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="SECURITY" desc="Avoid using unsafe string functions which may cause buffer overflows" id="SECURITY-12" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using unsafe string functions that do not check bounds" id="SECURITY-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use scanf and fscanf functions without specifying variable size in format string" id="SECURITY-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="SECURITY-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid passing non-const parameters or variables into exec" id="SECURITY-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid passing dynamically created strings into exec" id="SECURITY-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Usage of functions prone to race is not allowed" id="SECURITY-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid passing user input into methods as parameters" id="SECURITY-20" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use 'syslog' function for logging purposes" id="SECURITY-21" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use mbstowcs() function" id="SECURITY-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Beware of functions which may return the current directory or the windows directory" id="SECURITY-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using InitializeCriticalSection" id="SECURITY-24" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="SECURITY" desc="Avoid using thread-unsafe functions" id="SECURITY-25" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use 'setuid' in source code" id="SECURITY-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Don't use chmod(), chown(), chgrp()" id="SECURITY-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Standard random number generators should not be used to generate randomness for security reasons" id="SECURITY-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use obsolete C routine ulimit()" id="SECURITY-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using 'getpw' function in program code" id="SECURITY-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use 'cuserid' function" id="SECURITY-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using obsolete C routine 'usleep'" id="SECURITY-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Usage of functions which do not properly handle non-NULL terminated strings is not allowed" id="SECURITY-33" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using environment variables" id="SECURITY-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Don't trust any value of command line if attacker can set them" id="SECURITY-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="SECURITY" desc="Never use unfiltered data from an untrusted user as the format parameter" id="SECURITY-36" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use weak encryption functions" id="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Untrusted data is used as a loop boundary" id="SECURITY-38" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use the rand() function for generating pseudorandom numbers" id="SECURITY-02_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid functions which use time from MFC library" id="SECURITY-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="SECURITY" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="SECURITY-07" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Use secure temporary file name functions" id="SECURITY-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Specify the access permission bits if a file is created using the 'open' or 'openat' system call" id="SECURITY-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="The function 'pthread_setcanceltype()' should not be called with 'PTHREAD_CANCEL_ASYNCHRONOUS' argument" id="SECURITY-43" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Observe correct revocation order while relinquishing privileges" id="SECURITY-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Ensure that privilege relinquishment is successful" id="SECURITY-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="A pointer to a structure should not be passed to a function that can copy data to the user space" id="SECURITY-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Use correct integer precisions when checking the right hand operand of the shift operator" id="SECURITY-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not call the 'system()' function from the 'stdlib.h' or 'cstdlib' library with an argument other than '0' (null pointer)" id="SECURITY-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="SECURITY-48_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use the 'char' buffer to store input from 'std::cin'" id="SECURITY-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="SECURITY-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Usage of system properties (environment variables) should be restricted" id="SECURITY-03" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Call 'umask' before calling 'mkstemp'" id="SECURITY-40" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Call 'chdir' if you call 'chroot'" id="SECURITY-41" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Use the 'cnd_signal()' function with a unique condition variable" id="SECURITY-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use the 'notify_one()' function when multiple threads are waiting on the same condition variable" id="SECURITY-50" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="To make copying efficient, correct, and immune to the slicing problem create containers of pointers instead of containers of objects" id="STL-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Call empty instead of checking size() against zero" id="STL-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Avoid using iterative calls to insert in an explicit loop" id="STL-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Almost all uses of copy where the destination range is specified using an insert iterator should be replaced with calls to range member functions" id="STL-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Instead of anonymous istream_iterator objects use istream_iterator names when used as function parameters" id="STL-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="When using containers of newed pointers, remember to delete the pointers before the container is destroyed" id="STL-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Never create containers of auto_ptrs" id="STL-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Avoid using remove algorithm with list and standard associative containers" id="STL-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Prefer vector and string to dynamically allocated arrays" id="STL-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Use reserve to avoid unnecessary reallocations" id="STL-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Each vector and string should be checked if it is not empty before it is passed to C function" id="STL-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Avoid using vector&lt;bool>" id="STL-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Specify comparison types for associative containers of pointers" id="STL-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="For associative containers never use comparison function returning true for equal values" id="STL-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="For associative containers never use comparison function returning true for equal values" id="STL-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Prefer iterator to const iterator, reverse_iterator, and const_reverse_iterator" id="STL-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Use distance and advance to convert a container's const_iterators to iterators" id="STL-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Make sure destination ranges are big enough" id="STL-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Follow remove-like algorithms by erase to remove elements from a container" id="STL-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Avoid using remove and similar algorithms (i.e., remove_if and unique) on containers of dynamically allocated pointers" id="STL-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Proper implementation of copy_if should not be based on returning the remove_copy_if with a not1 in front of the predicate" id="STL-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="If accumulate() is used on a container of floating point values, use floating point value as initial one" id="STL-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Design functor classes for pass-by-value" id="STL-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Make predicates const pure functions" id="STL-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Each functor class should has only one operator() function, and it's parameter and return types should be passed to unary_function or binary_function" id="STL-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="You must employ ptr_fun, mem_fun, or mem_fun_ref whenever you pass a function to an STL component" id="STL-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Make sure less&lt;T> means operator&lt;" id="STL-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Prefer algorithm calls to hand-written loops" id="STL-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Prefer member functions to algorithms with the same names" id="STL-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Do not rely on the conversion of count()'s nonzero values to true and zero to false" id="STL-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Do not use an iterator range that isn't really a range" id="STL-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="C-style arrays shall not be used" id="STL-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Use != instead of &lt; to compare iterators" id="STL-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Use traits classes in conjunction with overloading" id="STL-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="When calling swap, employ a using declaration for std::swap, then call swap without namespace qualification" id="STL-40" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Do not declare the non-member to be an overloading of std::swap" id="STL-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Member version of swap should never throw exceptions" id="STL-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Consider using vector&lt;char> instead of string" id="STL-11" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="It is necessary to be careful when using reverse_iterator's base iterator for erasure purposes" id="STL-20" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Consider istreambuf_iterators for character-by-character input" id="STL-21" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="If you pass a sorted range to an algorithm that also takes a comparison function, be sure that the comparison function you pass behaves the same as the one you used to sort the range" id="STL-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Instead of trying to write the container-independent code use class encapsulation" id="STL-01" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Factor parameter-independent code out of templates" id="TEMPL-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Define non-member functions inside templates when type conversions are desired" id="TEMPL-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Do not overload functions within a template class" id="TEMPL-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="In template global functions use 'typename' to identify nested dependent type names" id="TEMPL-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="In template classes use 'typename' to identify nested dependent type names" id="TEMPL-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Don't change default arguments of virtual functions in template classes" id="TEMPL-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter" id="TEMPL-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="The viable function set for a function call should either contain no function specializations, or only contain function specializations" id="TEMPL-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Overloaded function templates shall not be explicitly specialized" id="TEMPL-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template" id="TEMPL-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" id="TEMPL-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" id="TEMPL-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Do not declare non-member generic functions in associated namespaces" id="TEMPL-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="The function shall resolve to a function declared previously in the translation unit" id="TEMPL-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Declare 'extern' an explicitly instantiated template" id="TEMPL-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Template specialization shall be declared in the same file as the primary template or a user-defined type, for which the specialization is declared" id="TEMPL-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Use a trailing return type syntax if the return type is preceded by the 'typename' keyword" id="TEMPL-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations" id="TEMPL-18" sev="3" total="0" />
         </RulesList>
         <SeverityList>
            <Severity authTot="208;" authUrg="0;" id="1" total="208" />
            <Severity authTot="806;" authUrg="10;" id="2" total="806" />
            <Severity authTot="1147;" authUrg="26;" id="3" total="1147" />
            <Severity authTot="149;" authUrg="4;" id="4" total="149" />
            <Severity authTot="118;" authUrg="10;" id="5" total="118" />
         </SeverityList>
      </Rules>

  <Supps />


  <StdViols>
    <StdViol msg="The assertion density is lower than two assertions per function" ln="1" locFile="/build/../../../../../../../../clock.c" locStartln="1" sev="3" auth="username" locRef="1" rule="METRICS-31" lnHash="0" rule.header="The assertion density of the code should average to a minimum of two assertions per function" tool="c++test" lineHash="0" unbViolId="c262d7b7-d1b8-3420-ac9f-42166eda62d3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d858cd4a-4ff2-3aac-86bf-8bce06a29f4d" locEndPos="1" locType="sr" hash="-249486341" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'clock.c' should declare a local constant string that begins from characters &quot;@(#)&quot; " ln="1" locFile="/build/../../../../../../../../clock.c" locStartln="1" sev="5" auth="username" locRef="1" rule="PFO-04" lnHash="0" rule.header="Every implementation file should declare a local constant string that describes the file" tool="c++test" lineHash="0" unbViolId="41dc0be5-6f61-3167-908b-d0ccf0643e28" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47945ff9-133b-39c0-bb55-ec1df960a3cb" locEndPos="1" locType="sr" hash="-249486341" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'clock.c'" ln="1" locFile="/build/../../../../../../../../clock.c" locStartln="1" sev="3" auth="username" locRef="1" rule="COMMENT-02" lnHash="0" rule.header="Provide copyright information" tool="c++test" lineHash="0" unbViolId="f8ac1700-5a79-3a62-ad1e-791581aeb3c1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9ae2a8b-d60b-3744-bb5c-7ca16754aad1" locEndPos="1" locType="sr" hash="-249486341" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'clock.c'" ln="1" locFile="/build/../../../../../../../../clock.c" locStartln="1" sev="3" auth="username" locRef="1" rule="JSF-133_b" lnHash="0" rule.header="Every source file will contain copyright information" tool="c++test" lineHash="0" unbViolId="ca885145-2f6f-36b4-94d4-fb31d6a4818b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e51ac50-5236-3f7d-87ff-68db977dfddd" locEndPos="1" locType="sr" hash="-249486341" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'clock.c'" ln="1" locFile="/build/../../../../../../../../clock.c" locStartln="1" sev="3" auth="username" locRef="1" rule="COMMENT-03" lnHash="0" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="0" unbViolId="50f88e78-44ed-3272-8f43-c64e55a14ae7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5cbeb5c6-4a76-3251-afa5-bc265133f948" locEndPos="1" locType="sr" hash="-249486341" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'clock.c'" ln="1" locFile="/build/../../../../../../../../clock.c" locStartln="1" sev="3" auth="username" locRef="1" rule="JSF-133_a" lnHash="0" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="0" unbViolId="daaf881d-72ed-301f-a826-e3eef1cda767" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5d0ce0b-d772-3fe4-89cb-6e253f07dc72" locEndPos="1" locType="sr" hash="-249486341" locEndLn="1" goals="0," />
    <StdViol msg="Use // comments only" ln="2" locFile="/build/../../../../../../../../clock.c" locStartln="2" sev="3" auth="username" locRef="1" rule="HICPP-2_3_1-a" lnHash="1499" rule.header="Prefer C++ style comment" tool="c++test" lineHash="1499" unbViolId="9a025086-9b86-38e3-bec4-24c1b926543f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f72a7dd-5872-39c0-8c0b-a0ee8d4d2568" locEndPos="1" locType="sr" hash="-249486341" locEndLn="2" goals="0," />
    <StdViol msg="Use // comments only" ln="2" locFile="/build/../../../../../../../../clock.c" locStartln="2" sev="2" auth="username" locRef="1" rule="JSF-126" lnHash="1499" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="1499" unbViolId="c42a6602-36da-3888-9891-518784b16c28" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b1da8d7f-c2d5-390d-96d5-28a92445f173" locEndPos="1" locType="sr" hash="-249486341" locEndLn="2" goals="0," />
    <StdViol msg="Use // comments only" ln="2" locFile="/build/../../../../../../../../clock.c" locStartln="2" sev="3" auth="username" locRef="1" rule="COMMENT-01" lnHash="1499" rule.header="Prefer C++ style comment" tool="c++test" lineHash="1499" unbViolId="7b71101b-c8a8-3d76-97b4-f9d2cc206f1c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e5c1ab7-a575-355e-820b-016a72272cde" locEndPos="1" locType="sr" hash="-249486341" locEndLn="2" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="5" locFile="/build/../../../../../../../../clock.c" locStartln="5" sev="3" auth="username" locRef="1" rule="PREPROC-18" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be included" tool="c++test" lineHash="1233725276" unbViolId="5820bf0a-fec4-3c2e-b578-bd20cc98a136" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5c1bc10f-8d35-3e12-a9b8-df10f42a12ef" locEndPos="1" locType="sr" urgent="true" hash="-249486341" locEndLn="5" goals="1," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="5" locFile="/build/../../../../../../../../clock.c" locStartln="5" sev="2" auth="username" locRef="1" rule="JSF-022" lnHash="1233725276" rule.header="The input/output library &lt;stdio.h> shall not be used" tool="c++test" lineHash="1233725276" unbViolId="dd1c5553-82b4-30ae-8a86-f5d112d4a5f7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f1f1ba4-7f68-3672-ba99-ce150af8405f" locEndPos="1" locType="sr" urgent="true" hash="-249486341" locEndLn="5" goals="1," />
    <StdViol msg="Ensure that C Standard Library is securely used" ln="5" locFile="/build/../../../../../../../../clock.c" locStartln="5" sev="4" auth="username" locRef="1" rule="HICPP-17_2_1-a" lnHash="1233725276" rule.header="Wrap use of the C Standard Library" tool="c++test" lineHash="1233725276" unbViolId="3793eb6a-0543-3ac1-8744-b8dcb1854866" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9fbbdeb-a403-3bd1-9e66-1836ce22f6ab" locEndPos="1" locType="sr" hash="-249486341" locEndLn="5" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="5" locFile="/build/../../../../../../../../clock.c" locStartln="5" sev="2" auth="username" locRef="1" rule="AUTOSAR-M27_0_1-a" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be used" tool="c++test" lineHash="1233725276" unbViolId="3ca8fb93-2c42-3b0b-949b-13857e049089" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ea677e1-e7d2-3d78-a7bc-9188fa94c3f1" locEndPos="1" locType="sr" hash="-249486341" locEndLn="5" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="5" locFile="/build/../../../../../../../../clock.c" locStartln="5" sev="2" auth="username" locRef="1" rule="MISRA2008-27_0_1" lnHash="1233725276" rule.header="The stream input/output library &lt;cstdio> shall not be used" tool="c++test" lineHash="1233725276" unbViolId="fa340720-2145-3d7e-9b76-b0b3d548d36c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="deee6082-2497-30eb-bbac-8e6b9541bde3" locEndPos="1" locType="sr" hash="-249486341" locEndLn="5" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="5" locFile="/build/../../../../../../../../clock.c" locStartln="5" sev="3" auth="username" locRef="1" rule="MISRA2004-20_9" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be used" tool="c++test" lineHash="1233725276" unbViolId="012681bf-fc92-3ae8-94dd-2d5ad8df6015" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3e6fdf1-d056-32e3-90e4-079c4f3b3120" locEndPos="1" locType="sr" hash="-249486341" locEndLn="5" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;clock.h&quot;" ln="6" locFile="/build/../../../../../../../../clock.c" locStartln="6" sev="2" auth="username" locRef="1" rule="PREPROC-09" lnHash="666904961" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="666904961" unbViolId="258ba98c-c6b3-3d77-9446-045cd7b3e91f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="11244774-fdb1-354a-bd80-79e9a3c3189c" locEndPos="1" locType="sr" hash="-249486341" locEndLn="6" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;clock.h&quot;" ln="6" locFile="/build/../../../../../../../../clock.c" locStartln="6" sev="2" auth="username" locRef="1" rule="JSF-033" lnHash="666904961" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="666904961" unbViolId="518cafff-d5cf-3039-af9f-abcfc6bf1d67" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07bc085f-e055-336b-99b9-a3ca448e8d27" locEndPos="1" locType="sr" hash="-249486341" locEndLn="6" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;consts.h&quot;" ln="7" locFile="/build/../../../../../../../../clock.c" locStartln="7" sev="2" auth="username" locRef="1" rule="PREPROC-09" lnHash="-286442511" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="-286442511" unbViolId="3e66710e-fec2-33b8-95bd-6be649d9d45d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a2e80b53-f888-3a3e-b23f-be51ab6abac6" locEndPos="1" locType="sr" hash="-249486341" locEndLn="7" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;consts.h&quot;" ln="7" locFile="/build/../../../../../../../../clock.c" locStartln="7" sev="2" auth="username" locRef="1" rule="JSF-033" lnHash="-286442511" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="-286442511" unbViolId="f6f507e7-abc3-37d4-af75-5eeb2156b43e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cbf37037-a002-3af9-853f-92c7c8f28671" locEndPos="1" locType="sr" hash="-249486341" locEndLn="7" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;inout.h&quot;" ln="8" locFile="/build/../../../../../../../../clock.c" locStartln="8" sev="2" auth="username" locRef="1" rule="PREPROC-09" lnHash="30763942" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="30763942" unbViolId="33b67d1c-3ee2-3ae2-a053-0b5847ce164a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="358ef6ab-1c8e-3c74-97ec-e6fed620f5cb" locEndPos="1" locType="sr" hash="-249486341" locEndLn="8" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;inout.h&quot;" ln="8" locFile="/build/../../../../../../../../clock.c" locStartln="8" sev="2" auth="username" locRef="1" rule="JSF-033" lnHash="30763942" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="30763942" unbViolId="bbe2539b-ee60-3a43-ba67-b6c8a1d344ca" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f3d9b88-e47a-3652-8640-263e4a295356" locEndPos="1" locType="sr" hash="-249486341" locEndLn="8" goals="0," />
    <StdViol msg="Use // comments only" ln="10" locFile="/build/../../../../../../../../clock.c" locStartln="10" sev="3" auth="username" locRef="1" rule="HICPP-2_3_1-a" lnHash="1499" rule.header="Prefer C++ style comment" tool="c++test" lineHash="1499" unbViolId="257c00c5-ff7d-3df6-988a-f5e3efdacd46" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74ecaa14-09fa-3d29-9a2d-889a79514e6b" locEndPos="1" locType="sr" hash="-249486341" locEndLn="10" goals="0," />
    <StdViol msg="Use // comments only" ln="10" locFile="/build/../../../../../../../../clock.c" locStartln="10" sev="2" auth="username" locRef="1" rule="JSF-126" lnHash="1499" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="1499" unbViolId="eaacba4a-53da-3f17-a279-42a254ef7c9f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95ab850b-f83f-36ae-8b2b-8349ab52bcba" locEndPos="1" locType="sr" hash="-249486341" locEndLn="10" goals="0," />
    <StdViol msg="Use // comments only" ln="10" locFile="/build/../../../../../../../../clock.c" locStartln="10" sev="3" auth="username" locRef="1" rule="COMMENT-01" lnHash="1499" rule.header="Prefer C++ style comment" tool="c++test" lineHash="1499" unbViolId="b49208ea-8b19-3192-91be-01aee4ab7460" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e2f5cb6-535d-36ad-b963-c1ad30223b64" locEndPos="1" locType="sr" hash="-249486341" locEndLn="10" goals="0," />
    <StdViol msg="R-3119: use of non-prototype function declarator" ln="13" locFile="/build/../../../../../../../../clock.c" locStartln="13" sev="5" auth="username" locRef="1" rule="PARSER-REMARK" lnHash="-523314505" rule.header="Parser remark" tool="c++test" lineHash="-523314505" unbViolId="d6fe1e51-d512-34c7-ab9d-a746fe7834ec" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8db0f8be-b65a-363a-9328-0df959004cf2" locEndPos="6" locType="sr" urgent="true" hash="-249486341" locEndLn="13" goals="1," />
    <StdViol msg="Prototype of function 'display_time' does not precede function definition" ln="13" locFile="/build/../../../../../../../../clock.c" locStartln="13" sev="3" auth="username" locRef="1" rule="MISRA2004-8_1_a" lnHash="-523314505" rule.header="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" tool="c++test" lineHash="-523314505" unbViolId="e844011a-8510-3681-a064-f88298ff6f6a" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2cbc8779-cf16-3b54-adf1-a794bb4ba3df" locEndPos="6" locType="sr" urgent="true" hash="-249486341" locEndLn="13" goals="1," />
    <StdViol msg="Prototype of function 'display_time' does not precede function definition" ln="13" locFile="/build/../../../../../../../../clock.c" locStartln="13" sev="3" auth="username" locRef="1" rule="MISRA-071_a" lnHash="-523314505" rule.header="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" tool="c++test" lineHash="-523314505" unbViolId="02009d6c-193d-3394-ab1a-fbc6a2620f06" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95fdbb07-b589-309a-b441-7c3058a88a28" locEndPos="6" locType="sr" urgent="true" hash="-249486341" locEndLn="13" goals="1," />
    <StdViol msg="Function 'display_time' is not in prototype form" ln="13" locFile="/build/../../../../../../../../clock.c" locStartln="13" sev="2" auth="username" locRef="1" rule="MISRAC2012-RULE_8_2-c" lnHash="-523314505" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-523314505" unbViolId="d6dd255b-2034-3408-a35b-c3a4e2e4c080" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d7535e7-cc83-34fc-a162-1ebfb3579e07" locEndPos="6" locType="sr" urgent="true" hash="-249486341" locEndLn="13" goals="1," />
    <StdViol msg="Function 'display_time' is not in prototype form" ln="13" locFile="/build/../../../../../../../../clock.c" locStartln="13" sev="3" auth="username" locRef="1" rule="CERT_C-EXP37-c" lnHash="-523314505" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-523314505" unbViolId="d79bdf80-ccec-322a-a210-8c9db6d4d27d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74bd500c-9517-3a6a-9578-96516ede94ab" locEndPos="6" locType="sr" urgent="true" hash="-249486341" locEndLn="13" goals="1," />
    <StdViol msg="Function 'display_time' is not in prototype form" ln="13" locFile="/build/../../../../../../../../clock.c" locStartln="13" sev="2" auth="username" locRef="1" rule="MISRA2012-RULE-8_2_c" lnHash="-523314505" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-523314505" unbViolId="09ef74ba-7c13-328f-b23a-7ad37e8ab870" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="065b6cdc-3120-3ff1-97cf-af743bd50cf5" locEndPos="6" locType="sr" urgent="true" hash="-249486341" locEndLn="13" goals="1," />
    <StdViol msg="Function 'display_time' is not in prototype form" ln="13" locFile="/build/../../../../../../../../clock.c" locStartln="13" sev="3" auth="username" locRef="1" rule="CODSTA-159" lnHash="-523314505" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-523314505" unbViolId="08a964fb-df69-319f-8eae-4e1ef78859cb" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64fbdccb-f25d-39c5-b50e-3d3fd49f0dd6" locEndPos="6" locType="sr" urgent="true" hash="-249486341" locEndLn="13" goals="1," />
    <StdViol msg="The 'display_time' function should be preceded by a comment that contains the '@brief' tag" ln="13" locFile="/build/../../../../../../../../clock.c" locStartln="13" sev="3" auth="username" locRef="1" rule="COMMENT-14" lnHash="-523314505" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-523314505" unbViolId="6a9f08ff-aef3-37f0-8783-84df39a1686f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ffd9de2c-3fd1-3afb-8225-412b84368ce4" locEndPos="6" locType="sr" hash="-249486341" locEndLn="13" goals="0," />
    <StdViol msg="The 'display_time' function should be preceded by a comment that contains the '@brief' tag" ln="13" locFile="/build/../../../../../../../../clock.c" locStartln="13" sev="2" auth="username" locRef="1" rule="AUTOSAR-A2_7_3-a" lnHash="-523314505" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-523314505" unbViolId="6801f258-9c81-3dec-8c20-d58b3b3bf3a4" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99535589-18b8-3c30-8e6c-ff5bc425ce28" locEndPos="6" locType="sr" hash="-249486341" locEndLn="13" goals="0," />
    <StdViol msg="Function 'display_time' has empty parameter list" ln="13" locFile="/build/../../../../../../../../clock.c" locStartln="13" sev="3" auth="username" locRef="1" rule="CODSTA-40" lnHash="-523314505" rule.header="'void' should be used when a function is passed or returns no values" tool="c++test" lineHash="-523314505" unbViolId="01d6ff8e-3639-3996-adc1-901efc493b56" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f29ca06-9d6d-338a-93d6-6e7039e56420" locEndPos="6" locType="sr" hash="-249486341" locEndLn="13" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'display_time'" ln="13" locFile="/build/../../../../../../../../clock.c" locStartln="13" sev="3" auth="username" locRef="1" rule="FORMAT-28" lnHash="-523314505" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-523314505" unbViolId="bf3f345e-1a6f-3830-849f-fccfe3d8c061" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3614b055-9093-33c6-a63e-0eb819be4eee" locEndPos="6" locType="sr" hash="-249486341" locEndLn="13" goals="0," />
    <StdViol msg="Function 'display_time' has Cyclomatic Complexity value: 1" ln="13" locFile="/build/../../../../../../../../clock.c" locStartln="13" sev="5" auth="username" locRef="1" rule="METRICS-29" lnHash="-523314505" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-523314505" unbViolId="58a60ba8-d0e7-3f94-b282-ba0b3b0cb541" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="45499f73-d0d4-3472-847d-b15dfded86cc" locEndPos="6" locType="sr" hash="-249486341" locEndLn="13" goals="0," />
    <StdViol msg="Function 'display_time' has Essential Complexity value: 1" ln="13" locFile="/build/../../../../../../../../clock.c" locStartln="13" sev="5" auth="username" locRef="1" rule="METRICS-33" lnHash="-523314505" rule.header="Report Essential Complexity" tool="c++test" lineHash="-523314505" unbViolId="3cc5c9d7-ebd0-308b-b2cb-78a339cd02f6" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="34f12c21-7f53-3558-b974-a2018249127e" locEndPos="6" locType="sr" hash="-249486341" locEndLn="13" goals="0," />
    <StdViol msg="The value of Halstead's delivered bugs (B) for function 'display_time' is 0.05" ln="13" locFile="/build/../../../../../../../../clock.c" locStartln="13" sev="3" auth="username" locRef="1" rule="METRICS-43" lnHash="-523314505" rule.header="Report the value of Halstead's delivered bugs (B) for a function" tool="c++test" lineHash="-523314505" unbViolId="311b7778-9651-3b7f-92f1-5be25c35c6aa" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="874f5a7f-3f95-3028-ad84-4a93435d02f8" locEndPos="6" locType="sr" hash="-249486341" locEndLn="13" goals="0," />
    <StdViol msg="Declare function 'display_time' with parameter type void" ln="13" locFile="/build/../../../../../../../../clock.c" locStartln="13" sev="3" auth="username" locRef="1" rule="MISRA2004-16_5" lnHash="-523314505" rule.header="Functions with no parameters shall be declared with parameter type void" tool="c++test" lineHash="-523314505" unbViolId="12ed370c-d7e3-38a3-9fdb-7bbce174f577" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8dc1b9f9-a797-35cc-94f6-113089f282e4" locEndPos="6" locType="sr" hash="-249486341" locEndLn="13" goals="0," />
    <StdViol msg="Naming convention not followed: display_time" ln="13" locFile="/build/../../../../../../../../clock.c" locStartln="13" sev="3" auth="username" locRef="1" rule="NAMING-17" lnHash="-523314505" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-523314505" unbViolId="77f8f993-8046-31ad-9e73-e5101c96d4d0" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="812a825f-e1c2-3bcb-a505-d0761d4a9a81" locEndPos="6" locType="sr" hash="-249486341" locEndLn="13" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="14" locFile="/build/../../../../../../../../clock.c" locStartln="14" sev="3" auth="username" locRef="1" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="2dd20d8d-634b-3277-8499-7e0217eb39af" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5e00654-28ae-39f5-9e78-78ffc753c27b" locEndPos="1" locType="sr" urgent="true" hash="-249486341" locEndLn="14" goals="1," />
    <DupViol msg="Duplicated code: 'char buf[BUF_SIZE];'" ln="15" locFile="/build/../../../../../../../../clock.c" locStartln="15" sev="3" auth="username" locRef="1" rule="CDD-DUPC" lnHash="-2004706563" rule.header="Avoid code duplication" tool="c++test" lineHash="-2004706563" unbViolId="8d271182-0b18-3691-ae5a-fc6290ebffa4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="79f4b277-cd3f-39bd-bcc4-ce356af013fa" locEndPos="23" locType="sr" urgent="true" hash="-249486341" locEndLn="15" goals="1,">
      <ElDescList>
        <ElDesc lineHash="-2004706563" locType="sr" srcRnghash="-249486341" locRef="1" srcRngFile="/build/../../../../../../../../clock.c" ln="15" srcRngStartPos="4" srcRngEndPos="23" srcRngStartln="15" srcRngEndLn="15" desc="[Line 15] Duplicated code in file 'clock.c'" rngLn="15" />
        <ElDesc lineHash="-2004706563" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="20" srcRngStartPos="4" srcRngEndPos="23" srcRngStartln="20" srcRngEndLn="20" desc="[Line 20] Duplicated code in file 'stdinout.c'" rngLn="20" />
        <ElDesc lineHash="-2004706563" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="144" srcRngStartPos="4" srcRngEndPos="23" srcRngStartln="144" srcRngEndLn="144" desc="[Line 144] Duplicated code in file 'timer.c'" rngLn="144" />
      </ElDescList>
    </DupViol>
    <StdViol msg="The basic numerical type 'char' should not be used" ln="15" locFile="/build/../../../../../../../../clock.c" locStartln="15" sev="4" auth="username" locRef="1" rule="MISRA2008-3_9_2" lnHash="-2004706563" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-2004706563" unbViolId="aed6d06c-cef0-3a9b-b4f2-fc0b613e7b01" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7159e51-52e7-31d1-b5d7-4ac763a94df7" locEndPos="5" locType="sr" hash="-249486341" locEndLn="15" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="15" locFile="/build/../../../../../../../../clock.c" locStartln="15" sev="3" auth="username" locRef="1" rule="MISRA-013" lnHash="-2004706563" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-2004706563" unbViolId="248a6308-9dc9-3cc1-8a88-8f44e5505bac" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d3f9d25-cae9-3733-9714-b392de863e76" locEndPos="5" locType="sr" hash="-249486341" locEndLn="15" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="15" locFile="/build/../../../../../../../../clock.c" locStartln="15" sev="3" auth="username" locRef="1" rule="CODSTA-223" lnHash="-2004706563" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-2004706563" unbViolId="b65a7a87-aa39-3a2d-bf5c-7b65eb1d8103" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="53015256-530d-3add-abdf-623fde9731b4" locEndPos="5" locType="sr" hash="-249486341" locEndLn="15" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="15" locFile="/build/../../../../../../../../clock.c" locStartln="15" sev="2" auth="username" locRef="1" rule="AUTOSAR-A3_9_1-b" lnHash="-2004706563" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-2004706563" unbViolId="5e5c9543-6294-3366-a962-2a2fd5734e90" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4ee17ca-d823-3086-9c0b-69d189454d1a" locEndPos="5" locType="sr" hash="-249486341" locEndLn="15" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: buf" ln="15" locFile="/build/../../../../../../../../clock.c" locStartln="15" sev="3" auth="username" locRef="1" rule="CODSTA-94" lnHash="-2004706563" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-2004706563" unbViolId="371c910a-860a-3f0f-928a-8645a1a90508" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="45af61e9-4dc4-31c8-9266-36dd6f35056e" locEndPos="10" locType="sr" urgent="true" hash="-249486341" locEndLn="15" goals="1," />
    <StdViol msg="The 'buf' variable should be commented" ln="15" locFile="/build/../../../../../../../../clock.c" locStartln="15" sev="3" auth="username" locRef="1" rule="JSF-132_a" lnHash="-2004706563" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-2004706563" unbViolId="67fea01d-eb30-3285-a93b-d2598c57d0a0" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="58523cbd-54a3-32fc-af75-a1fbae79b639" locEndPos="10" locType="sr" hash="-249486341" locEndLn="15" goals="0," />
    <StdViol msg="The 'buf' variable should be commented" ln="15" locFile="/build/../../../../../../../../clock.c" locStartln="15" sev="3" auth="username" locRef="1" rule="COMMENT-05" lnHash="-2004706563" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-2004706563" unbViolId="9a26f8ef-9a05-3019-85cf-010df01e321b" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ea5a0a6-d62f-3a6c-82d3-4035624d5df2" locEndPos="10" locType="sr" hash="-249486341" locEndLn="15" goals="0," />
    <StdViol msg="Naming convention not followed: buf" ln="15" locFile="/build/../../../../../../../../clock.c" locStartln="15" sev="3" auth="username" locRef="1" rule="NAMING-25" lnHash="-2004706563" rule.header="Begin all terminated characters string variables with 'sz'" tool="c++test" lineHash="-2004706563" unbViolId="d95282a5-4141-3faf-b228-61aad42b31ce" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02f4c27c-d293-3986-9574-1079b8477192" locEndPos="10" locType="sr" hash="-249486341" locEndLn="15" goals="0," />
    <StdViol msg="The 'buf' identifier should have the 'rg' prefix" ln="15" locFile="/build/../../../../../../../../clock.c" locStartln="15" sev="3" auth="username" locRef="1" rule="NAMING-HN-01" lnHash="-2004706563" rule.header="Hungarian notation for array variables and parameters" tool="c++test" lineHash="-2004706563" unbViolId="97775c30-cdb5-315d-8f35-8079a8cf9cda" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65f425de-414a-3451-9e21-2525b159ee4f" locEndPos="10" locType="sr" hash="-249486341" locEndLn="15" goals="0," />
    <StdViol msg="The 'buf' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="15" locFile="/build/../../../../../../../../clock.c" locStartln="15" sev="3" auth="username" locRef="1" rule="NAMING-HN-05" lnHash="-2004706563" rule.header="Hungarian notation for byte pointer, array, or reference types" tool="c++test" lineHash="-2004706563" unbViolId="fd67a01a-03df-3a44-8f1c-1fd263cb37a2" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9951aef-bde4-344d-b556-7e17fec83009" locEndPos="10" locType="sr" hash="-249486341" locEndLn="15" goals="0," />
    <StdViol msg="The 'buf' identifier should have the 'sz' prefix followed by a capital letter or an underscore" ln="15" locFile="/build/../../../../../../../../clock.c" locStartln="15" sev="3" auth="username" locRef="1" rule="NAMING-HN-07" lnHash="-2004706563" rule.header="Hungarian notation for array of char types" tool="c++test" lineHash="-2004706563" unbViolId="bf64f398-c79e-364f-aa28-bf2a97c3c7d2" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12aa9bee-8952-344b-915b-f4595d8ad8a1" locEndPos="10" locType="sr" hash="-249486341" locEndLn="15" goals="0," />
    <StdViol msg="The 'buf' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="15" locFile="/build/../../../../../../../../clock.c" locStartln="15" sev="3" auth="username" locRef="1" rule="NAMING-HN-09" lnHash="-2004706563" rule.header="Hungarian notation for char pointer, array, or reference types" tool="c++test" lineHash="-2004706563" unbViolId="ff5a71ad-6380-36d0-b1e3-66137bcbd48c" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d2ca65c-799b-3771-a774-e5722110ccc7" locEndPos="10" locType="sr" hash="-249486341" locEndLn="15" goals="0," />
    <StdViol msg="Local variable 'the_time' starts with a global prefix " ln="16" locFile="/build/../../../../../../../../clock.c" locStartln="16" sev="3" auth="username" locRef="1" rule="NAMING-04" lnHash="-1564703446" rule.header="Global prefixes should only be used for global variables" tool="c++test" lineHash="-1564703446" unbViolId="c24cc702-269a-3e37-9bc8-9ed5c086328f" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dcbcfca8-3d10-32ea-a7a2-2130ad6c99a7" locEndPos="12" locType="sr" hash="-249486341" locEndLn="16" goals="0," />
    <StdViol msg="The 'the_time' variable should be commented" ln="16" locFile="/build/../../../../../../../../clock.c" locStartln="16" sev="3" auth="username" locRef="1" rule="JSF-132_a" lnHash="-1564703446" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1564703446" unbViolId="80dbd805-f43c-3d8f-aa2e-4b8c4771fe32" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="346a70f1-15c3-3e9f-8e4c-e03b63dcb1e1" locEndPos="12" locType="sr" hash="-249486341" locEndLn="16" goals="0," />
    <StdViol msg="The 'the_time' variable should be commented" ln="16" locFile="/build/../../../../../../../../clock.c" locStartln="16" sev="3" auth="username" locRef="1" rule="COMMENT-05" lnHash="-1564703446" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1564703446" unbViolId="08a0381a-34e5-324b-aa90-6096e5614b70" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3fd6689e-8329-314e-85bb-4e5fc9136c8f" locEndPos="12" locType="sr" hash="-249486341" locEndLn="16" goals="0," />
    <StdViol msg="Variable 'the_time' should be declared using 'auto' specifier" ln="16" locFile="/build/../../../../../../../../clock.c" locStartln="16" sev="3" auth="username" locRef="1" rule="HICPP-7_1_8-a" lnHash="-1564703446" rule.header="Use auto id = expr when declaring a variable that is the same type as the initializer function call" tool="c++test" lineHash="-1564703446" unbViolId="bcba978c-956d-3096-9e11-09e1c8daa05a" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4aa06bc8-d5ad-304f-8370-f626a59b6cdb" locEndPos="12" locType="sr" hash="-249486341" locEndLn="16" goals="0," />
    <StdViol msg="The type 'void*' of function argument number '1' does not match declared type 'long*'" ln="16" locFile="/build/../../../../../../../../clock.c" locStartln="16" sev="3" auth="username" locRef="1" rule="PB-11" lnHash="-1564703446" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-1564703446" unbViolId="1cb69ed0-6ad9-3fd3-a1c0-9e3e46af52b8" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97420844-a55c-3ae1-91d4-a2dd3ebc3cdf" locEndPos="23" locType="sr" hash="-249486341" locEndLn="16" goals="0," />
    <StdViol msg="Function 'time' is being used" ln="16" locFile="/build/../../../../../../../../clock.c" locStartln="16" sev="2" auth="username" locRef="1" rule="MISRA2012-RULE-21_10" lnHash="-1564703446" rule.header="The Standard Library time and date functions shall not be used" tool="c++test" lineHash="-1564703446" unbViolId="e71d05ad-9d02-393c-b51c-d520f1ad27d4" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c3d2d34b-3620-3daf-83fc-a33e742ca8d5" locEndPos="23" locType="sr" hash="-249486341" locEndLn="16" goals="0," />
    <StdViol msg="Function 'time' is being used" ln="16" locFile="/build/../../../../../../../../clock.c" locStartln="16" sev="2" auth="username" locRef="1" rule="SECURITY-01" lnHash="-1564703446" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="-1564703446" unbViolId="988d71fd-1f5f-3eaf-98c5-ade737ecff79" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2497bf65-425b-3aec-aa15-1a85742aa1b4" locEndPos="23" locType="sr" hash="-249486341" locEndLn="16" goals="0," />
    <StdViol msg="Function 'time' is being used" ln="16" locFile="/build/../../../../../../../../clock.c" locStartln="16" sev="2" auth="username" locRef="1" rule="MISRAC2012-RULE_21_10-a" lnHash="-1564703446" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="-1564703446" unbViolId="94af0294-afd5-3be9-ae95-7fb4ca4ccc54" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="756cee13-de8a-302b-849a-2133193be9d6" locEndPos="23" locType="sr" hash="-249486341" locEndLn="16" goals="0," />
    <StdViol msg="Function 'time' is being used" ln="16" locFile="/build/../../../../../../../../clock.c" locStartln="16" sev="1" auth="username" locRef="1" rule="CERT_C-MSC33-a" lnHash="-1564703446" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="-1564703446" unbViolId="d5a59200-fc50-375a-af8d-7cfbaa7fbd0d" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="58d30b27-82b0-3fd6-b4c8-0a17fa7ffc77" locEndPos="23" locType="sr" hash="-249486341" locEndLn="16" goals="0," />
    <StdViol msg="Cast to primitive type should not be used if possible" ln="16" locFile="/build/../../../../../../../../clock.c" locStartln="16" sev="3" auth="username" locRef="1" rule="HICPP-4_2_2-b" lnHash="-1564703446" rule.header="Avoid explicit type conversions (casts)" tool="c++test" lineHash="-1564703446" unbViolId="8beb257b-f77f-3fa4-9c6a-dda59e1a09f5" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f3f1eff-390e-3a28-9178-155abb03cb21" locEndPos="28" locType="sr" hash="-249486341" locEndLn="16" goals="0," />
    <StdViol msg="Cast to primitive type should not be used if possible" ln="16" locFile="/build/../../../../../../../../clock.c" locStartln="16" sev="4" auth="username" locRef="1" rule="JSF-183" lnHash="-1564703446" rule.header="Every possible measure should be taken to avoid type casting" tool="c++test" lineHash="-1564703446" unbViolId="de82baea-7832-3879-bf6a-025915063a11" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fcc6b5fe-5e80-350c-9e28-64696494638c" locEndPos="28" locType="sr" hash="-249486341" locEndLn="16" goals="0," />
    <StdViol msg="Cast to primitive type should not be used if possible" ln="16" locFile="/build/../../../../../../../../clock.c" locStartln="16" sev="3" auth="username" locRef="1" rule="CODSTA-31" lnHash="-1564703446" rule.header="Avoid explicit type conversions (casts)" tool="c++test" lineHash="-1564703446" unbViolId="53cdb6f9-e500-3c1a-9393-008e999011d2" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="39d0b42c-9b66-3d1f-bada-9c7f8209e944" locEndPos="28" locType="sr" hash="-249486341" locEndLn="16" goals="0," />
    <StdViol msg="Do not convert an object with integer type 'int' to an object with pointer type  'void *'" ln="16" locFile="/build/../../../../../../../../clock.c" locStartln="16" sev="2" auth="username" locRef="1" rule="MISRA2008-5_2_8" lnHash="-1564703446" rule.header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" tool="c++test" lineHash="-1564703446" unbViolId="5edde2af-f14e-31ea-b10c-49a4ee990edc" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91994b47-955b-34ce-9607-0da1d2a0fba5" locEndPos="28" locType="sr" hash="-249486341" locEndLn="16" goals="0," />
    <StdViol msg="Do not convert an object with integer type 'int' to an object with pointer type  'void *'" ln="16" locFile="/build/../../../../../../../../clock.c" locStartln="16" sev="3" auth="username" locRef="1" rule="CODSTA-65" lnHash="-1564703446" rule.header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" tool="c++test" lineHash="-1564703446" unbViolId="fff2472b-1d2b-3bbd-ac36-310d2503e112" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0134ed65-7c50-320e-b978-463eacb5d377" locEndPos="28" locType="sr" hash="-249486341" locEndLn="16" goals="0," />
    <StdViol msg="Do not convert an object with integer type 'int' to an object with pointer type  'void *'" ln="16" locFile="/build/../../../../../../../../clock.c" locStartln="16" sev="2" auth="username" locRef="1" rule="AUTOSAR-M5_2_8-a" lnHash="-1564703446" rule.header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" tool="c++test" lineHash="-1564703446" unbViolId="5e484123-821f-34ed-ba50-779fb5e764f9" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="158bcd16-bd0a-34ab-94ab-81951c064081" locEndPos="28" locType="sr" hash="-249486341" locEndLn="16" goals="0," />
    <StdViol msg="Use 0 instead of 'NULL'" ln="16" locFile="/build/../../../../../../../../clock.c" locStartln="16" sev="2" auth="username" locRef="1" rule="JSF-175" lnHash="-1564703446" rule.header="NULL identifier shall not be used; use plain 0 instead" tool="c++test" lineHash="-1564703446" unbViolId="7f17348d-6a47-332e-b0c7-01bb169ff7b7" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8abe9624-1fff-36d4-8d55-b6e63e8137d2" locEndPos="28" locType="sr" hash="-249486341" locEndLn="16" goals="0," />
    <StdViol msg="Use 0 instead of 'NULL'" ln="16" locFile="/build/../../../../../../../../clock.c" locStartln="16" sev="3" auth="username" locRef="1" rule="CODSTA-17" lnHash="-1564703446" rule.header="Do not use NULL identifier; use 0 instead" tool="c++test" lineHash="-1564703446" unbViolId="126e2b80-8b61-3648-bd59-ba12f77cd1f3" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d21700f-8426-3a7e-ab3d-e05c26a0cd30" locEndPos="28" locType="sr" hash="-249486341" locEndLn="16" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="17" locFile="/build/../../../../../../../../clock.c" locStartln="17" sev="4" auth="username" locRef="1" rule="MISRA2008-3_9_2" lnHash="-237631284" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-237631284" unbViolId="c1648aaf-7212-3f9f-874e-238e0433a8ee" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a1c8c10-cd08-399a-9e52-68d07d49d742" locEndPos="5" locType="sr" hash="-249486341" locEndLn="17" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="17" locFile="/build/../../../../../../../../clock.c" locStartln="17" sev="3" auth="username" locRef="1" rule="MISRA-013" lnHash="-237631284" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-237631284" unbViolId="d8598efd-43ba-3b34-a784-d0c4b85c49c2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d097b7f5-82c2-3731-ac15-ebc3a68fa379" locEndPos="5" locType="sr" hash="-249486341" locEndLn="17" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="17" locFile="/build/../../../../../../../../clock.c" locStartln="17" sev="3" auth="username" locRef="1" rule="CODSTA-223" lnHash="-237631284" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-237631284" unbViolId="da670281-bf62-3def-8502-a6d3a788d0b6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74590962-7c37-309d-984e-eed88d4304b8" locEndPos="5" locType="sr" hash="-249486341" locEndLn="17" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="17" locFile="/build/../../../../../../../../clock.c" locStartln="17" sev="2" auth="username" locRef="1" rule="AUTOSAR-A3_9_1-b" lnHash="-237631284" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-237631284" unbViolId="82c49ac1-0e70-3684-a63f-a1879d1f0848" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a54313f-21b1-39bb-a84d-8b3c5583cb34" locEndPos="5" locType="sr" hash="-249486341" locEndLn="17" goals="0," />
    <StdViol msg="The operator '*', used for 't' declaration, should be directly connected with the type" ln="17" locFile="/build/../../../../../../../../clock.c" locStartln="17" sev="3" auth="username" locRef="1" rule="JSF-062" lnHash="-237631284" rule.header="The dereference operator '*' and the address-of operator '&amp;' will be directly connected with the type-specifier" tool="c++test" lineHash="-237631284" unbViolId="781c661f-616c-36af-b3c4-b8e80ffe0823" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff0889e9-1439-3afb-8129-6f0bf4b60566" locEndPos="10" locType="sr" hash="-249486341" locEndLn="17" goals="0," />
    <StdViol msg="The operator '*', used for 't' declaration, should be directly connected with the type" ln="17" locFile="/build/../../../../../../../../clock.c" locStartln="17" sev="4" auth="username" locRef="1" rule="FORMAT-32" lnHash="-237631284" rule.header="The dereference operator '*' and the address-of operator '&amp;' should be directly connected with the type" tool="c++test" lineHash="-237631284" unbViolId="d417851a-11f6-36c6-80be-a15f3eaa85bf" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2c72028-32e6-3870-9480-ae8c33d5c3a7" locEndPos="10" locType="sr" hash="-249486341" locEndLn="17" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: t" ln="17" locFile="/build/../../../../../../../../clock.c" locStartln="17" sev="3" auth="username" locRef="1" rule="CODSTA-94" lnHash="-237631284" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-237631284" unbViolId="17622163-10a1-3cf8-9c35-97dbd11d0e9d" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="08ebe82c-2391-3ac5-9cc5-b8b835f4ec1f" locEndPos="11" locType="sr" urgent="true" hash="-249486341" locEndLn="17" goals="1," />
    <StdViol msg="The variable of pointer type is declared: t" ln="17" locFile="/build/../../../../../../../../clock.c" locStartln="17" sev="3" auth="username" locRef="1" rule="CODSTA-95" lnHash="-237631284" rule.header="Do not declare pointer type" tool="c++test" lineHash="-237631284" unbViolId="ced311a3-fd6c-384b-99ed-456f1f60b872" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47c9875c-7ed0-3c83-adfd-9973f9d315a1" locEndPos="11" locType="sr" hash="-249486341" locEndLn="17" goals="0," />
    <StdViol msg="The 't' variable should be commented" ln="17" locFile="/build/../../../../../../../../clock.c" locStartln="17" sev="3" auth="username" locRef="1" rule="JSF-132_a" lnHash="-237631284" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-237631284" unbViolId="42a35ddd-cdd6-39a8-81c6-409b50994460" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9acf11b0-6c7b-34e2-8b00-a1893ce3b60b" locEndPos="11" locType="sr" hash="-249486341" locEndLn="17" goals="0," />
    <StdViol msg="The 't' variable should be commented" ln="17" locFile="/build/../../../../../../../../clock.c" locStartln="17" sev="3" auth="username" locRef="1" rule="COMMENT-05" lnHash="-237631284" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-237631284" unbViolId="aa146c9d-5fd4-3f5a-a74e-45941be937cd" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ee65617-a0c6-3b37-a296-327b04883621" locEndPos="11" locType="sr" hash="-249486341" locEndLn="17" goals="0," />
    <StdViol msg="Variable 't' should be declared using 'auto' specifier" ln="17" locFile="/build/../../../../../../../../clock.c" locStartln="17" sev="3" auth="username" locRef="1" rule="HICPP-7_1_8-a" lnHash="-237631284" rule.header="Use auto id = expr when declaring a variable that is the same type as the initializer function call" tool="c++test" lineHash="-237631284" unbViolId="ad0ea482-0f18-3881-9617-868139acaeca" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa6c1eb6-1339-3648-ba17-646da045e656" locEndPos="11" locType="sr" hash="-249486341" locEndLn="17" goals="0," />
    <StdViol msg="Naming convention not followed: t" ln="17" locFile="/build/../../../../../../../../clock.c" locStartln="17" sev="3" auth="username" locRef="1" rule="NAMING-22" lnHash="-237631284" rule.header="Prefix a variable type 'pointer' with a 'p' character" tool="c++test" lineHash="-237631284" unbViolId="d16ec7da-38fd-3625-9844-c525d7031b22" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9165f91f-68af-323e-9688-fd9c2098853d" locEndPos="11" locType="sr" hash="-249486341" locEndLn="17" goals="0," />
    <StdViol msg="Naming convention not followed: t" ln="17" locFile="/build/../../../../../../../../clock.c" locStartln="17" sev="3" auth="username" locRef="1" rule="NAMING-25" lnHash="-237631284" rule.header="Begin all terminated characters string variables with 'sz'" tool="c++test" lineHash="-237631284" unbViolId="ed0377a9-fc43-32c0-8dbf-3ffc43529806" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17425d91-718b-34bf-956e-5de421050675" locEndPos="11" locType="sr" hash="-249486341" locEndLn="17" goals="0," />
    <StdViol msg="The 't' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="17" locFile="/build/../../../../../../../../clock.c" locStartln="17" sev="3" auth="username" locRef="1" rule="NAMING-HN-05" lnHash="-237631284" rule.header="Hungarian notation for byte pointer, array, or reference types" tool="c++test" lineHash="-237631284" unbViolId="aeaa661e-7d60-338b-8c1b-38a17cc665f1" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e3b5e32-5e46-3474-807e-a1cba63d7326" locEndPos="11" locType="sr" hash="-249486341" locEndLn="17" goals="0," />
    <StdViol msg="The 't' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="17" locFile="/build/../../../../../../../../clock.c" locStartln="17" sev="3" auth="username" locRef="1" rule="NAMING-HN-09" lnHash="-237631284" rule.header="Hungarian notation for char pointer, array, or reference types" tool="c++test" lineHash="-237631284" unbViolId="22b5c3f7-8c7d-3526-b75f-ba45fa1ae21f" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d4e47cc-d1bf-375a-bce1-0d3b4bffae78" locEndPos="11" locType="sr" hash="-249486341" locEndLn="17" goals="0," />
    <StdViol msg="The 't' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="17" locFile="/build/../../../../../../../../clock.c" locStartln="17" sev="3" auth="username" locRef="1" rule="NAMING-HN-10" lnHash="-237631284" rule.header="Hungarian notation for char pointer or reference types" tool="c++test" lineHash="-237631284" unbViolId="985cddba-3ee3-3f28-9d74-ef054de43c5d" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90b47389-2a0e-3b1d-9e2a-46ef931efa6a" locEndPos="11" locType="sr" hash="-249486341" locEndLn="17" goals="0," />
    <StdViol msg="The 't' identifier should have the 'p' prefix" ln="17" locFile="/build/../../../../../../../../clock.c" locStartln="17" sev="3" auth="username" locRef="1" rule="NAMING-HN-34" lnHash="-237631284" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="-237631284" unbViolId="b74101fe-4834-30dd-bf77-cc32a2cd987e" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d50bf6f4-a5d3-347e-af8e-0a3799567ffa" locEndPos="11" locType="sr" hash="-249486341" locEndLn="17" goals="0," />
    <StdViol msg="Function 'ctime' is being used" ln="17" locFile="/build/../../../../../../../../clock.c" locStartln="17" sev="2" auth="username" locRef="1" rule="MISRA2012-RULE-21_10" lnHash="-237631284" rule.header="The Standard Library time and date functions shall not be used" tool="c++test" lineHash="-237631284" unbViolId="954724a4-3e95-3919-8a74-8acaed065ed8" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43b95aa7-eaf2-34b0-90a5-de418f39c1db" locEndPos="15" locType="sr" hash="-249486341" locEndLn="17" goals="0," />
    <StdViol msg="Function 'ctime' is being used" ln="17" locFile="/build/../../../../../../../../clock.c" locStartln="17" sev="2" auth="username" locRef="1" rule="SECURITY-01" lnHash="-237631284" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="-237631284" unbViolId="0e359409-ec74-32f5-953e-3e05b81e4186" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="564f3c2d-1b30-3ac1-8854-40060c6078b5" locEndPos="15" locType="sr" hash="-249486341" locEndLn="17" goals="0," />
    <StdViol msg="Function 'ctime' is being used" ln="17" locFile="/build/../../../../../../../../clock.c" locStartln="17" sev="2" auth="username" locRef="1" rule="MISRAC2012-RULE_21_10-a" lnHash="-237631284" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="-237631284" unbViolId="dc4024c6-0ad2-3141-9698-7b8dd15432d4" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a1dbd33-1d5b-3ef3-ab1a-8296854dd7f1" locEndPos="15" locType="sr" hash="-249486341" locEndLn="17" goals="0," />
    <StdViol msg="Function 'ctime' is being used" ln="17" locFile="/build/../../../../../../../../clock.c" locStartln="17" sev="1" auth="username" locRef="1" rule="CERT_C-MSC33-a" lnHash="-237631284" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="-237631284" unbViolId="879c4edf-b7dd-3bdd-85a0-fd6a3474c643" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da0a27e3-a775-351f-9ec6-27db271154ca" locEndPos="15" locType="sr" hash="-249486341" locEndLn="17" goals="0," />
    <StdViol msg="The 'ctime' function should not be used in multithreading applications" ln="17" locFile="/build/../../../../../../../../clock.c" locStartln="17" sev="3" auth="username" locRef="1" rule="CERT_C-CON33-a" lnHash="-237631284" rule.header="Avoid using thread-unsafe functions" tool="c++test" lineHash="-237631284" unbViolId="ad3fdd38-50fc-33b7-b4b3-cf59676fbd03" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ad97b2d-e071-3e83-aeb2-b68d51704f22" locEndPos="15" locType="sr" hash="-249486341" locEndLn="17" goals="0," />
    <StdViol msg="The 'ctime' function should not be used in multithreading applications" ln="17" locFile="/build/../../../../../../../../clock.c" locStartln="17" sev="2" auth="username" locRef="1" rule="APSC_DV-002400-d" lnHash="-237631284" rule.header="Avoid using thread-unsafe functions" tool="c++test" lineHash="-237631284" unbViolId="d00e2436-3f96-3964-804e-4c9576543fef" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f4571798-a7d0-3a8b-9ddb-938b625e808b" locEndPos="15" locType="sr" hash="-249486341" locEndLn="17" goals="0," />
    <StdViol msg="The 'ctime' function should not be used in multithreading applications" ln="17" locFile="/build/../../../../../../../../clock.c" locStartln="17" sev="2" auth="username" locRef="1" rule="APSC_DV-001995-f" lnHash="-237631284" rule.header="Avoid using thread-unsafe functions" tool="c++test" lineHash="-237631284" unbViolId="5460e9aa-37a2-39e6-a8ed-1ce0ed44904c" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e25914ff-8103-3042-a353-8db2e37545a5" locEndPos="15" locType="sr" hash="-249486341" locEndLn="17" goals="0," />
    <StdViol msg="The 'ctime' function should not be used in multithreading applications" ln="17" locFile="/build/../../../../../../../../clock.c" locStartln="17" sev="2" auth="username" locRef="1" rule="SECURITY-25" lnHash="-237631284" rule.header="Avoid using thread-unsafe functions" tool="c++test" lineHash="-237631284" unbViolId="a30ec8bd-4657-3342-bc07-c6b2126b1d4f" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ea917b1-9ef1-39de-ad09-6d3a121f230a" locEndPos="15" locType="sr" hash="-249486341" locEndLn="17" goals="0," />
    <StdViol msg="Usage of 'sprintf' function is not allowed" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="2" auth="username" locRef="1" rule="MISRAC2012-RULE_21_6-a" lnHash="369521280" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="369521280" unbViolId="9f62c3e8-c3c8-34a8-879e-905afd10fbca" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5dabc1bd-9275-3a73-b434-5d509eb97421" locEndPos="5" locType="sr" urgent="true" hash="-249486341" locEndLn="19" goals="1," />
    <StdViol msg="Usage of 'sprintf' function is not allowed" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="2" auth="username" locRef="1" rule="MISRA2012-RULE-21_6" lnHash="369521280" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="369521280" unbViolId="b8fee2d0-1b2c-334f-b0cc-d8cce0a4b57f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16b8d28e-c981-3357-8a0d-a4a098b2f7df" locEndPos="5" locType="sr" urgent="true" hash="-249486341" locEndLn="19" goals="1," />
    <StdViol msg="Usage of 'sprintf' function is not allowed" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="3" auth="username" locRef="1" rule="CERT_C-ERR02-a" lnHash="369521280" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="369521280" unbViolId="5018b0bd-7a1d-37f9-afe1-b59788534f30" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="894eba00-e7d1-3976-9812-9c33afc42b6e" locEndPos="5" locType="sr" urgent="true" hash="-249486341" locEndLn="19" goals="1," />
    <StdViol msg="Usage of 'sprintf' function is not allowed" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="3" auth="username" locRef="1" rule="CODSTA-110" lnHash="369521280" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="369521280" unbViolId="3a2ccf35-9eef-3799-8dd9-f25e5b493f0a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e71d61d-addf-3b99-b3fc-d1df400be2dd" locEndPos="5" locType="sr" urgent="true" hash="-249486341" locEndLn="19" goals="1," />
    <StdViol msg="Usage of 'sprintf' function is not allowed" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="2" auth="username" locRef="1" rule="CERT_C-ERR07-b" lnHash="369521280" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="369521280" unbViolId="8c3fa8e6-1345-30be-ba52-08f6ccb0602d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9db0f997-1af3-3a2a-a35d-5624c5aadc6c" locEndPos="5" locType="sr" urgent="true" hash="-249486341" locEndLn="19" goals="1," />
    <StdViol msg="Unused function's &quot;sprintf&quot; return value" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="3" auth="username" locRef="1" rule="CODSTA-122_a" lnHash="369521280" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="369521280" unbViolId="aa56be3b-dae4-3bb8-a7d2-da6d0c38b809" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8dc2878-5032-365e-b537-4cf665551968" locEndPos="5" locType="sr" hash="-249486341" locEndLn="19" goals="0," />
    <StdViol msg="Unused function's &quot;sprintf&quot; return value" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="1" auth="username" locRef="1" rule="CERT_C-ERR33-a" lnHash="369521280" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="369521280" unbViolId="6b82db6c-d81f-36d9-9c1a-2d2d08746d1f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98c03d08-d095-378a-b597-f8ba0688bdad" locEndPos="5" locType="sr" hash="-249486341" locEndLn="19" goals="0," />
    <StdViol msg="Unused function's &quot;sprintf&quot; return value" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="1" auth="username" locRef="1" rule="CERT_C-POS54-a" lnHash="369521280" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="369521280" unbViolId="69bd5848-527c-3f85-ad45-61f6737f0c16" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95252519-915d-34b3-875a-8293204de128" locEndPos="5" locType="sr" hash="-249486341" locEndLn="19" goals="0," />
    <StdViol msg="Unused function's &quot;sprintf&quot; return value" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="2" auth="username" locRef="1" rule="MISRAC2012-RULE_17_7-a" lnHash="369521280" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="369521280" unbViolId="511402d7-2bfe-3318-9493-49034ff0fa38" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac06f4c9-254d-3f41-b600-ea18112f5f30" locEndPos="5" locType="sr" hash="-249486341" locEndLn="19" goals="0," />
    <StdViol msg="Unused function's &quot;sprintf&quot; return value" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="3" auth="username" locRef="1" rule="CERT_C-EXP12-a" lnHash="369521280" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="369521280" unbViolId="1ab27ee4-6954-3b7f-951b-ed7e8adb4fbe" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1dc7936c-d45f-3667-b91a-c6da9c4375a4" locEndPos="5" locType="sr" hash="-249486341" locEndLn="19" goals="0," />
    <StdViol msg="Unused function's &quot;sprintf&quot; return value" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="2" auth="username" locRef="1" rule="MISRA2012-RULE-17_7_a" lnHash="369521280" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="369521280" unbViolId="acb21e9e-a521-3b2a-956e-9536d7027d04" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1b1521e6-3ca3-37aa-9e99-8e7a9c2a201b" locEndPos="5" locType="sr" hash="-249486341" locEndLn="19" goals="0," />
    <StdViol msg="Unused function's &quot;sprintf&quot; return value" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="3" auth="username" locRef="1" rule="MISRA2004-16_10" lnHash="369521280" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="369521280" unbViolId="83bfe543-1eee-32f4-a6ba-a02b80674e1b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7269e645-ff3b-3cac-ad30-bfddfb032bb6" locEndPos="5" locType="sr" hash="-249486341" locEndLn="19" goals="0," />
    <StdViol msg="Unused function's &quot;sprintf&quot; return value" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="2" auth="username" locRef="1" rule="AUTOSAR-M0_3_2-a" lnHash="369521280" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="369521280" unbViolId="6a6ea60c-201e-3fb9-9d4a-2bd22347e3d8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae9467f9-157f-3caf-a146-06fd8e2dc7e2" locEndPos="5" locType="sr" hash="-249486341" locEndLn="19" goals="0," />
    <StdViol msg="Unused function's &quot;sprintf&quot; return value" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="2" auth="username" locRef="1" rule="MISRA2008-0_3_2" lnHash="369521280" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="369521280" unbViolId="2f6ca7a9-b8cf-351a-9d23-9b4c6cd9b007" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b85980fb-a2a9-3fd0-8d12-60c27fe94f8c" locEndPos="5" locType="sr" hash="-249486341" locEndLn="19" goals="0," />
    <StdViol msg="Unused function's &quot;sprintf&quot; return value" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="3" auth="username" locRef="1" rule="JSF-115" lnHash="369521280" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="369521280" unbViolId="7b7b2211-53be-3014-80c8-0656ba329c8c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fdad748e-d61e-3d31-826a-ccb01751bca7" locEndPos="5" locType="sr" hash="-249486341" locEndLn="19" goals="0," />
    <StdViol msg="Unsafe functions 'sprintf' is being used" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="3" auth="username" locRef="1" rule="SECURITY-07" lnHash="369521280" rule.header="Don't use unsafe C functions that do write to range-unchecked buffers" tool="c++test" lineHash="369521280" unbViolId="61071c04-ddb9-3bfb-831c-12e745b7cfe1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="60160b92-ec8a-33e3-8d85-f2200e3110f7" locEndPos="5" locType="sr" hash="-249486341" locEndLn="19" goals="0," />
    <StdViol msg="Unsafe functions 'sprintf' is being used" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="2" auth="username" locRef="1" rule="AUTOSAR-A27_0_4-a" lnHash="369521280" rule.header="Don't use unsafe C functions that do write to range-unchecked buffers" tool="c++test" lineHash="369521280" unbViolId="5197a359-0c4a-3d50-8a8e-d06d2a84e8dd" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="774164a2-4bd1-327d-930d-1d44d5d19691" locEndPos="5" locType="sr" hash="-249486341" locEndLn="19" goals="0," />
    <StdViol msg="Unsafe functions 'sprintf' is being used" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="3" auth="username" locRef="1" rule="CERT_C-MSC24-d" lnHash="369521280" rule.header="Don't use unsafe C functions that do write to range-unchecked buffers" tool="c++test" lineHash="369521280" unbViolId="8fce4937-77fc-376b-ad3a-c97c79e99410" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e585e9cc-0325-3e43-bc3d-f1f7dee9ffb1" locEndPos="5" locType="sr" hash="-249486341" locEndLn="19" goals="0," />
    <StdViol msg="Unsafe functions 'sprintf' is being used" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="1" auth="username" locRef="1" rule="CERT_C-ENV01-a" lnHash="369521280" rule.header="Don't use unsafe C functions that do write to range-unchecked buffers" tool="c++test" lineHash="369521280" unbViolId="7ea260ed-7c66-337a-94b4-ab97e27d56da" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92b51d9b-8bad-3a7b-96a1-f0e9e3126dbb" locEndPos="5" locType="sr" hash="-249486341" locEndLn="19" goals="0," />
    <StdViol msg="Unsafe functions 'sprintf' is being used" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="2" auth="username" locRef="1" rule="CERT_C-API02-b" lnHash="369521280" rule.header="Don't use unsafe C functions that do write to range-unchecked buffers" tool="c++test" lineHash="369521280" unbViolId="ba0a0673-691f-351a-ba59-a20026aaf2b0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9749a268-feba-33ba-8024-0c062b014ea7" locEndPos="5" locType="sr" hash="-249486341" locEndLn="19" goals="0," />
    <StdViol msg="Avoid using unsafe string function 'sprintf' in your program" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="1" auth="username" locRef="1" rule="CERT_C-STR31-e" lnHash="369521280" rule.header="Avoid using unsafe string functions which may cause buffer overflows" tool="c++test" lineHash="369521280" unbViolId="761aa4c4-5a78-3ee8-9df3-384ac72dfc87" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a2bba4c-8266-3bad-ae21-0e0c9c29b76c" locEndPos="5" locType="sr" hash="-249486341" locEndLn="19" goals="0," />
    <StdViol msg="Avoid using unsafe string function 'sprintf' in your program" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="3" auth="username" locRef="1" rule="CERT_C-MSC24-c" lnHash="369521280" rule.header="Avoid using unsafe string functions which may cause buffer overflows" tool="c++test" lineHash="369521280" unbViolId="09a5d7e3-2451-322b-ae1b-b4ca8ad5b776" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74f83781-031d-37e8-9995-94b9d9d698b2" locEndPos="5" locType="sr" hash="-249486341" locEndLn="19" goals="0," />
    <StdViol msg="Avoid using unsafe string function 'sprintf' in your program" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="2" auth="username" locRef="1" rule="SECURITY-12" lnHash="369521280" rule.header="Avoid using unsafe string functions which may cause buffer overflows" tool="c++test" lineHash="369521280" unbViolId="9635ee96-1951-307f-91d4-15ff6fb9567a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5716eb2f-0445-3484-bf22-7c9568c77ef9" locEndPos="5" locType="sr" hash="-249486341" locEndLn="19" goals="0," />
    <StdViol msg="Avoid using unsafe string function 'sprintf' in your program" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="1" auth="username" locRef="1" rule="CERT_C-ENV01-b" lnHash="369521280" rule.header="Avoid using unsafe string functions which may cause buffer overflows" tool="c++test" lineHash="369521280" unbViolId="6c1f49e6-d88b-3455-b3ff-c8071b94ce96" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9d88136-fc75-32bd-83ab-20d8f97892b6" locEndPos="5" locType="sr" hash="-249486341" locEndLn="19" goals="0," />
    <StdViol msg="Avoid using unsafe string function 'sprintf' in your program" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="2" auth="username" locRef="1" rule="CERT_C-API02-a" lnHash="369521280" rule.header="Avoid using unsafe string functions which may cause buffer overflows" tool="c++test" lineHash="369521280" unbViolId="452c9e53-df50-3540-a6e4-5bd1617a76b7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0cf5a07e-83ea-3a7c-9f8a-6aeb9827c62c" locEndPos="5" locType="sr" hash="-249486341" locEndLn="19" goals="0," />
    <StdViol msg="Avoid using unsafe string function 'sprintf' in your program" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="3" auth="username" locRef="1" rule="CERT_C-API01-b" lnHash="369521280" rule.header="Avoid using unsafe string functions which may cause buffer overflows" tool="c++test" lineHash="369521280" unbViolId="41910009-053d-3a4d-8c93-c44da322f11a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe425f36-df27-3513-bafc-f9f988f9f79b" locEndPos="5" locType="sr" hash="-249486341" locEndLn="19" goals="0," />
    <StdViol msg="Expression of array type is passed as argument to function 'sprintf'" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="2" auth="username" locRef="1" rule="JSF-097_d" lnHash="369521280" rule.header="Arrays shall not be passed to functions as array/pointer parameters" tool="c++test" lineHash="369521280" unbViolId="164d1d63-a121-3cdc-a949-5a2a8351a2ad" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d6878189-045c-3d10-b915-e1b1b0f75272" locEndPos="13" locType="sr" hash="-249486341" locEndLn="19" goals="0," />
    <StdViol msg="Expression of array type is passed as argument to function 'sprintf'" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="3" auth="username" locRef="1" rule="HICPP-4_1_1-b" lnHash="369521280" rule.header="Do not pass expression with array type to a function with pointer or array type parameter" tool="c++test" lineHash="369521280" unbViolId="7040936b-ab98-3a1b-8aed-bde96a335b4d" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f391c80-9aa6-3c76-b7ce-d0c8a9a3fd42" locEndPos="13" locType="sr" hash="-249486341" locEndLn="19" goals="0," />
    <StdViol msg="Expression of array type is passed as argument to function 'sprintf'" ln="19" locFile="/build/../../../../../../../../clock.c" locStartln="19" sev="3" auth="username" locRef="1" rule="PB-41_b" lnHash="369521280" rule.header="Do not pass expression with array type to a function with pointer or array type parameter" tool="c++test" lineHash="369521280" unbViolId="1333ec5b-e78e-3874-9714-66ae72ebe55c" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4039843-62b0-3064-9602-b7ad0f779d1b" locEndPos="13" locType="sr" hash="-249486341" locEndLn="19" goals="0," />
    <DupViol msg="Duplicated code: 'print_string(buf);'" ln="20" locFile="/build/../../../../../../../../clock.c" locStartln="20" sev="3" auth="username" locRef="1" rule="CDD-DUPC" lnHash="-1350296736" rule.header="Avoid code duplication" tool="c++test" lineHash="-1350296736" unbViolId="32e63ace-b443-3dc9-94c0-eb6301781774" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="c282f859-74ae-308d-8ac5-2f37ba1c0c40" locEndPos="22" locType="sr" urgent="true" hash="-249486341" locEndLn="20" goals="1,">
      <ElDescList>
        <ElDesc lineHash="-1350296736" locType="sr" srcRnghash="-249486341" locRef="1" srcRngFile="/build/../../../../../../../../clock.c" ln="20" srcRngStartPos="4" srcRngEndPos="22" srcRngStartln="20" srcRngEndLn="20" desc="[Line 20] Duplicated code in file 'clock.c'" rngLn="20" />
        <ElDesc lineHash="924656480" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="151" srcRngStartPos="8" srcRngEndPos="26" srcRngStartln="151" srcRngEndLn="151" desc="[Line 151] Duplicated code in file 'timer.c'" rngLn="151" />
      </ElDescList>
    </DupViol>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="20" locFile="/build/../../../../../../../../clock.c" locStartln="20" sev="3" auth="username" locRef="1" rule="CODSTA-122_a" lnHash="-1350296736" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1350296736" unbViolId="343b6f2d-4e32-3697-8383-d75cf5099e2d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b74db12-e496-39a8-842e-846a6cd3bd66" locEndPos="5" locType="sr" hash="-249486341" locEndLn="20" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="20" locFile="/build/../../../../../../../../clock.c" locStartln="20" sev="1" auth="username" locRef="1" rule="CERT_C-ERR33-a" lnHash="-1350296736" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1350296736" unbViolId="8e5dd69f-4196-32ca-9df4-8aec4705369c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="afdf6648-0915-3cf5-b794-f47ecafe96e1" locEndPos="5" locType="sr" hash="-249486341" locEndLn="20" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="20" locFile="/build/../../../../../../../../clock.c" locStartln="20" sev="1" auth="username" locRef="1" rule="CERT_C-POS54-a" lnHash="-1350296736" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1350296736" unbViolId="74198108-f043-3bee-8454-f64c7ec81e48" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78126bab-dc6a-3b88-a39d-a9c515ba9dab" locEndPos="5" locType="sr" hash="-249486341" locEndLn="20" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="20" locFile="/build/../../../../../../../../clock.c" locStartln="20" sev="2" auth="username" locRef="1" rule="MISRAC2012-RULE_17_7-a" lnHash="-1350296736" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1350296736" unbViolId="0c70a673-f353-3a4e-85b2-145dc3953a6a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="63f74c85-78e2-3a32-af1f-97c3d5a0a8bc" locEndPos="5" locType="sr" hash="-249486341" locEndLn="20" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="20" locFile="/build/../../../../../../../../clock.c" locStartln="20" sev="3" auth="username" locRef="1" rule="CERT_C-EXP12-a" lnHash="-1350296736" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1350296736" unbViolId="adb1e2ea-6732-37ce-92c0-328672a6f451" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="542aafac-a183-3af5-af13-0c12c3df936d" locEndPos="5" locType="sr" hash="-249486341" locEndLn="20" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="20" locFile="/build/../../../../../../../../clock.c" locStartln="20" sev="2" auth="username" locRef="1" rule="MISRA2012-RULE-17_7_a" lnHash="-1350296736" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1350296736" unbViolId="7052b886-e588-3dee-ba01-04ed408bc46c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7a4c78f-5dfe-39a8-ba83-77b8e67a7c39" locEndPos="5" locType="sr" hash="-249486341" locEndLn="20" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="20" locFile="/build/../../../../../../../../clock.c" locStartln="20" sev="3" auth="username" locRef="1" rule="MISRA2004-16_10" lnHash="-1350296736" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1350296736" unbViolId="fd716864-580f-39ec-8416-de696fe1396c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ff1cba0-0aa6-3912-ad31-ca7f849fe79c" locEndPos="5" locType="sr" hash="-249486341" locEndLn="20" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="20" locFile="/build/../../../../../../../../clock.c" locStartln="20" sev="2" auth="username" locRef="1" rule="AUTOSAR-M0_3_2-a" lnHash="-1350296736" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1350296736" unbViolId="69e31a32-1f10-3090-9bdc-8f75637b2c21" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47f014bc-3977-33e8-91fe-6991bf1af8ba" locEndPos="5" locType="sr" hash="-249486341" locEndLn="20" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="20" locFile="/build/../../../../../../../../clock.c" locStartln="20" sev="2" auth="username" locRef="1" rule="MISRA2008-0_3_2" lnHash="-1350296736" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1350296736" unbViolId="a897e524-5978-3831-85a8-e4ad65e0ae56" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a0254e6-7963-36eb-af24-cdb6890a09dd" locEndPos="5" locType="sr" hash="-249486341" locEndLn="20" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="20" locFile="/build/../../../../../../../../clock.c" locStartln="20" sev="3" auth="username" locRef="1" rule="JSF-115" lnHash="-1350296736" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-1350296736" unbViolId="91f9e222-8538-319a-a883-d12f812517b8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="072885d2-11ee-3bc1-a1f6-caacea4e2a0f" locEndPos="5" locType="sr" hash="-249486341" locEndLn="20" goals="0," />
    <StdViol msg="Expression of array type is passed as argument to function 'print_string'" ln="20" locFile="/build/../../../../../../../../clock.c" locStartln="20" sev="2" auth="username" locRef="1" rule="JSF-097_d" lnHash="-1350296736" rule.header="Arrays shall not be passed to functions as array/pointer parameters" tool="c++test" lineHash="-1350296736" unbViolId="26ea7f77-6c4c-3a9c-a291-b2b1980da0c0" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf7d8bf5-5464-385c-af92-6d80d33ae4e1" locEndPos="18" locType="sr" hash="-249486341" locEndLn="20" goals="0," />
    <StdViol msg="Expression of array type is passed as argument to function 'print_string'" ln="20" locFile="/build/../../../../../../../../clock.c" locStartln="20" sev="3" auth="username" locRef="1" rule="HICPP-4_1_1-b" lnHash="-1350296736" rule.header="Do not pass expression with array type to a function with pointer or array type parameter" tool="c++test" lineHash="-1350296736" unbViolId="bcaa72ad-933a-333d-b612-c13f3a9ed70d" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f7dbfbe-918c-37a5-a6fb-d3df87e47281" locEndPos="18" locType="sr" hash="-249486341" locEndLn="20" goals="0," />
    <StdViol msg="Expression of array type is passed as argument to function 'print_string'" ln="20" locFile="/build/../../../../../../../../clock.c" locStartln="20" sev="3" auth="username" locRef="1" rule="PB-41_b" lnHash="-1350296736" rule.header="Do not pass expression with array type to a function with pointer or array type parameter" tool="c++test" lineHash="-1350296736" unbViolId="14b91bb1-73d0-3fb6-8829-8be2619776b1" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="762af8b4-8c74-3859-9bd0-1a1b5a2e5bd3" locEndPos="18" locType="sr" hash="-249486341" locEndLn="20" goals="0," />
    <StdViol msg="Use // comments only" ln="24" locFile="/build/../../../../../../../../clock.c" locStartln="24" sev="3" auth="username" locRef="1" rule="HICPP-2_3_1-a" lnHash="1499" rule.header="Prefer C++ style comment" tool="c++test" lineHash="1499" unbViolId="b4668139-232d-3657-bdfd-8507ecc9c1b2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e947b2a-43df-34a4-a36b-ca709e555bb5" locEndPos="1" locType="sr" hash="-249486341" locEndLn="24" goals="0," />
    <StdViol msg="Use // comments only" ln="24" locFile="/build/../../../../../../../../clock.c" locStartln="24" sev="2" auth="username" locRef="1" rule="JSF-126" lnHash="1499" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="1499" unbViolId="730c6139-3175-3bc4-93be-5dbc8f084e2e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c38cbea4-efc8-3175-bbcc-47980e72d02c" locEndPos="1" locType="sr" hash="-249486341" locEndLn="24" goals="0," />
    <StdViol msg="Use // comments only" ln="24" locFile="/build/../../../../../../../../clock.c" locStartln="24" sev="3" auth="username" locRef="1" rule="COMMENT-01" lnHash="1499" rule.header="Prefer C++ style comment" tool="c++test" lineHash="1499" unbViolId="8a19709c-b993-31d1-9e63-fd72eeae01f5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00939d67-2571-36d3-8e30-3fb4e5c68d49" locEndPos="1" locType="sr" hash="-249486341" locEndLn="24" goals="0," />
    <StdViol msg="The 'set_time' function should be preceded by a comment that contains the '@brief' tag" ln="27" locFile="/build/../../../../../../../../clock.c" locStartln="27" sev="3" auth="username" locRef="1" rule="COMMENT-14" lnHash="-1989025327" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1989025327" unbViolId="b419d750-76e6-3d0c-a1a9-7d37994675ee" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67e9e2e9-bc52-3815-9238-2895280af22b" locEndPos="6" locType="sr" hash="-249486341" locEndLn="27" goals="0," />
    <StdViol msg="The 'set_time' function should be preceded by a comment that contains the '@brief' tag" ln="27" locFile="/build/../../../../../../../../clock.c" locStartln="27" sev="2" auth="username" locRef="1" rule="AUTOSAR-A2_7_3-a" lnHash="-1989025327" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1989025327" unbViolId="6df7e117-3697-36c3-bf75-cbaa0814a836" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4841ad5a-68b6-372e-90ea-f1314823164c" locEndPos="6" locType="sr" hash="-249486341" locEndLn="27" goals="0," />
    <StdViol msg="The 'new_time' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="27" locFile="/build/../../../../../../../../clock.c" locStartln="27" sev="3" auth="username" locRef="1" rule="COMMENT-14_b" lnHash="-1989025327" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1989025327" unbViolId="ed080eeb-b8aa-355a-abf1-6a30a9940071" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d10e356d-eda6-361f-a345-c9741b52b281" locEndPos="6" locType="sr" hash="-249486341" locEndLn="27" goals="0," />
    <StdViol msg="The 'new_time' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="27" locFile="/build/../../../../../../../../clock.c" locStartln="27" sev="2" auth="username" locRef="1" rule="AUTOSAR-A2_7_3-b" lnHash="-1989025327" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1989025327" unbViolId="a3aa6c63-09bf-3390-a1cf-a0220b0a4aac" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cbce43ef-e38c-3413-b8e8-045bd2269556" locEndPos="6" locType="sr" hash="-249486341" locEndLn="27" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'set_time'" ln="27" locFile="/build/../../../../../../../../clock.c" locStartln="27" sev="3" auth="username" locRef="1" rule="FORMAT-28" lnHash="-1989025327" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-1989025327" unbViolId="4cf9b4e2-2961-361a-a3c4-15d3d18fea41" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd60fe69-0ada-30de-ab21-0316fe50f1df" locEndPos="6" locType="sr" hash="-249486341" locEndLn="27" goals="0," />
    <StdViol msg="Function 'set_time' has Cyclomatic Complexity value: 1" ln="27" locFile="/build/../../../../../../../../clock.c" locStartln="27" sev="5" auth="username" locRef="1" rule="METRICS-29" lnHash="-1989025327" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-1989025327" unbViolId="4515723e-64ed-353d-b415-87afa424dfa5" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd873223-1a87-336d-acf7-3a34b38e384c" locEndPos="6" locType="sr" hash="-249486341" locEndLn="27" goals="0," />
    <StdViol msg="Function 'set_time' has Essential Complexity value: 1" ln="27" locFile="/build/../../../../../../../../clock.c" locStartln="27" sev="5" auth="username" locRef="1" rule="METRICS-33" lnHash="-1989025327" rule.header="Report Essential Complexity" tool="c++test" lineHash="-1989025327" unbViolId="b6b6daca-7fb4-3abd-ad06-411c31af596d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2fde92b3-072e-3752-91ed-7cd342f0dc88" locEndPos="6" locType="sr" hash="-249486341" locEndLn="27" goals="0," />
    <StdViol msg="Function 'set_time' does not contain any statements" ln="27" locFile="/build/../../../../../../../../clock.c" locStartln="27" sev="3" auth="username" locRef="1" rule="METRICS-38" lnHash="-1989025327" rule.header="The number of statements within function should be in range 1 - 50" tool="c++test" lineHash="-1989025327" unbViolId="87e116fe-9c65-3e39-8297-4fee365257e3" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92e27c03-734a-3503-86ce-5b5b7d0f9ebe" locEndPos="6" locType="sr" hash="-249486341" locEndLn="27" goals="0," />
    <StdViol msg="The value of Halstead's delivered bugs (B) for function 'set_time' is 0.01" ln="27" locFile="/build/../../../../../../../../clock.c" locStartln="27" sev="3" auth="username" locRef="1" rule="METRICS-43" lnHash="-1989025327" rule.header="Report the value of Halstead's delivered bugs (B) for a function" tool="c++test" lineHash="-1989025327" unbViolId="13544b64-2e8f-3266-a191-71eda0a0fd5f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97a44bbe-33f1-364d-ab4b-c8ca5bc42595" locEndPos="6" locType="sr" hash="-249486341" locEndLn="27" goals="0," />
    <StdViol msg="Naming convention not followed: set_time" ln="27" locFile="/build/../../../../../../../../clock.c" locStartln="27" sev="3" auth="username" locRef="1" rule="NAMING-17" lnHash="-1989025327" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-1989025327" unbViolId="c6ecfc92-3704-3688-8cce-d6ed30b4e8e8" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="39a53757-0583-3614-9b8f-4cb1408d51c7" locEndPos="6" locType="sr" hash="-249486341" locEndLn="27" goals="0," />
    <StdViol msg="Function 'set_time' is empty" ln="27" locFile="/build/../../../../../../../../clock.c" locStartln="27" sev="2" auth="username" locRef="1" rule="MISRA2008-0_1_8_b" lnHash="-1989025327" rule.header="All functions with void return type shall have external side effect(s)" tool="c++test" lineHash="-1989025327" unbViolId="a7f93b00-86c4-307e-b969-dbed354cf81e" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0492a683-60f2-314b-816f-84b3cf2b95fa" locEndPos="6" locType="sr" hash="-249486341" locEndLn="27" goals="0," />
    <StdViol msg="Function 'set_time' is empty" ln="27" locFile="/build/../../../../../../../../clock.c" locStartln="27" sev="4" auth="username" locRef="1" rule="OPT-32_b" lnHash="-1989025327" rule.header="Functions with void return type shall not be empty" tool="c++test" lineHash="-1989025327" unbViolId="322464c7-6446-306d-8112-779636caa2b3" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7309cd8-d8b7-3178-94b5-af29ea9780be" locEndPos="6" locType="sr" hash="-249486341" locEndLn="27" goals="0," />
    <StdViol msg="Function 'set_time' is empty" ln="27" locFile="/build/../../../../../../../../clock.c" locStartln="27" sev="2" auth="username" locRef="1" rule="AUTOSAR-M0_1_8-b" lnHash="-1989025327" rule.header="Functions with void return type shall not be empty" tool="c++test" lineHash="-1989025327" unbViolId="da8108a9-eb5f-3d22-8a7a-55e3e9450944" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7699aef-00cb-34b0-b6ad-bad6b35bdeb0" locEndPos="6" locType="sr" hash="-249486341" locEndLn="27" goals="0," />
    <StdViol msg="The 'set_time' function is not used in the testing scope" ln="27" locFile="/build/../../../../../../../../clock.c" locStartln="27" sev="3" auth="username" locRef="1" rule="GLOBAL-UNUSEDFUNC" lnHash="-1989025327" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-1989025327" unbViolId="9aabce0f-7712-337e-b3ae-7f3e6dbbc5bd" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="5489865e-89b6-376a-b2aa-f03c38660c25" locEndPos="6" locType="sr" hash="-249486341" locEndLn="27" goals="0," />
    <StdViol msg="The 'set_time' function is not used in the testing scope" ln="27" locFile="/build/../../../../../../../../clock.c" locStartln="27" sev="4" auth="username" locRef="1" rule="AUTOSAR-M0_1_10-a" lnHash="-1989025327" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-1989025327" unbViolId="a1f8a666-c4b4-389a-a668-bd8c10c42a64" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="e554811c-ba6f-36a4-9f44-6ca9893b6e78" locEndPos="6" locType="sr" hash="-249486341" locEndLn="27" goals="0," />
    <StdViol msg="The 'set_time' function is not used in the testing scope" ln="27" locFile="/build/../../../../../../../../clock.c" locStartln="27" sev="2" auth="username" locRef="1" rule="MISRA2008-0_1_10_b" lnHash="-1989025327" rule.header="Every defined function with external linkage shall be used" tool="c++test" lineHash="-1989025327" unbViolId="a7a74858-fd28-3630-87cf-09bc9f60474f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="05bbc1d8-1a13-35b6-91b7-ff130b97f5d3" locEndPos="6" locType="sr" hash="-249486341" locEndLn="27" goals="0," />
    <StdViol msg="R-828: parameter &quot;new_time&quot; was never referenced" ln="27" locFile="/build/../../../../../../../../clock.c" locStartln="27" sev="5" auth="username" locRef="1" rule="PARSER-REMARK" lnHash="-1989025327" rule.header="Parser remark" tool="c++test" lineHash="-1989025327" unbViolId="a59f029b-d40f-36ac-bc8d-c42e1f9ff576" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="371cd932-9c22-3dac-81f5-ce210ba77de7" locEndPos="22" locType="sr" urgent="true" hash="-249486341" locEndLn="27" goals="1," />
    <StdViol msg="Parameter 'new_time' is not used" ln="27" locFile="/build/../../../../../../../../clock.c" locStartln="27" sev="2" auth="username" locRef="1" rule="OPT-03" lnHash="-1989025327" rule.header="Eliminate unused parameters" tool="c++test" lineHash="-1989025327" unbViolId="855e1547-e092-3fc6-b14e-b6f7a9d3cf51" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a83756f3-394f-367d-8546-727b3c6b87be" locEndPos="22" locType="sr" urgent="true" hash="-249486341" locEndLn="27" goals="1," />
    <StdViol msg="Parameter 'new_time' is not used" ln="27" locFile="/build/../../../../../../../../clock.c" locStartln="27" sev="2" auth="username" locRef="1" rule="AUTOSAR-A0_1_4-a" lnHash="-1989025327" rule.header="Eliminate unused parameters" tool="c++test" lineHash="-1989025327" unbViolId="3e1d1439-0131-30f6-9e5d-6417083b5dde" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5c9d81e7-59b7-3ef9-a50e-5f2ee6908b27" locEndPos="22" locType="sr" urgent="true" hash="-249486341" locEndLn="27" goals="1," />
    <StdViol msg="Declare parameter 'new_time' as const" ln="27" locFile="/build/../../../../../../../../clock.c" locStartln="27" sev="3" auth="username" locRef="1" rule="CERT_C-DCL00-a" lnHash="-1989025327" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1989025327" unbViolId="0fafda24-9392-3180-8576-86da1342394a" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59d64f76-5869-38b9-91c2-5da7c1ca72f7" locEndPos="22" locType="sr" hash="-249486341" locEndLn="27" goals="0," />
    <StdViol msg="Declare parameter 'new_time' as const" ln="27" locFile="/build/../../../../../../../../clock.c" locStartln="27" sev="2" auth="username" locRef="1" rule="AUTOSAR-A7_1_1-a" lnHash="-1989025327" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1989025327" unbViolId="8a9505af-010f-3a30-a078-67ee8e0a5916" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd93ceb7-c049-3da4-9a15-cc77db00c082" locEndPos="22" locType="sr" hash="-249486341" locEndLn="27" goals="0," />
    <StdViol msg="Declare parameter 'new_time' as const" ln="27" locFile="/build/../../../../../../../../clock.c" locStartln="27" sev="2" auth="username" locRef="1" rule="MISRA2008-7_1_1" lnHash="-1989025327" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="-1989025327" unbViolId="0994ba08-cc0b-3850-89ca-48001cb57600" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f28e18bb-bb19-3f16-befc-de2419363334" locEndPos="22" locType="sr" hash="-249486341" locEndLn="27" goals="0," />
    <StdViol msg="Declare parameter 'new_time' as const" ln="27" locFile="/build/../../../../../../../../clock.c" locStartln="27" sev="3" auth="username" locRef="1" rule="CODSTA-CPP-53" lnHash="-1989025327" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1989025327" unbViolId="0ddc09ff-e9c2-3a58-8595-fabaca65d96f" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eae92fd4-967f-3f28-af29-635a5d66367a" locEndPos="22" locType="sr" hash="-249486341" locEndLn="27" goals="0," />
    <StdViol msg="Declare parameter 'new_time' as const" ln="27" locFile="/build/../../../../../../../../clock.c" locStartln="27" sev="3" auth="username" locRef="1" rule="HICPP-7_1_2-a" lnHash="-1989025327" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1989025327" unbViolId="57dcc402-6e0e-39e8-aa0b-6ac64e63c0e0" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e66188a-7da4-3a86-a928-01e3442eee0d" locEndPos="22" locType="sr" hash="-249486341" locEndLn="27" goals="0," />
    <StdViol msg="Parameter 'new_time' is not used in function 'set_time'" ln="27" locFile="/build/../../../../../../../../clock.c" locStartln="27" sev="4" auth="username" locRef="1" rule="OPT-38" lnHash="-1989025327" rule.header="There should be no unused parameters in functions" tool="c++test" lineHash="-1989025327" unbViolId="de7d6765-c527-31b4-9a8a-0ac74226b9ff" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="365af829-bba9-3071-93b4-5574306704a4" locEndPos="22" locType="sr" hash="-249486341" locEndLn="27" goals="0," />
    <StdViol msg="Parameter 'new_time' is not used in function 'set_time'" ln="27" locFile="/build/../../../../../../../../clock.c" locStartln="27" sev="4" auth="username" locRef="1" rule="MISRAC2012-RULE_2_7-a" lnHash="-1989025327" rule.header="There should be no unused parameters in functions" tool="c++test" lineHash="-1989025327" unbViolId="43eaf75f-5c34-3e3d-897d-48f3811797ea" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9dcfc7a6-3f32-3204-be76-6c4d5d3e55e8" locEndPos="22" locType="sr" hash="-249486341" locEndLn="27" goals="0," />
    <StdViol msg="Parameter 'new_time' is not used in function 'set_time'" ln="27" locFile="/build/../../../../../../../../clock.c" locStartln="27" sev="4" auth="username" locRef="1" rule="MISRA2012-RULE-2_7" lnHash="-1989025327" rule.header="There should be no unused parameters in functions" tool="c++test" lineHash="-1989025327" unbViolId="e25a6f3a-131d-32c9-b4ce-0313e1529d0e" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="011ba0e6-ce27-3ec2-ad67-cb033464f8c8" locEndPos="22" locType="sr" hash="-249486341" locEndLn="27" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="28" locFile="/build/../../../../../../../../clock.c" locStartln="28" sev="3" auth="username" locRef="1" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="005c7ff9-3d1f-357e-87a6-2d24419e69f0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dfae76dd-6857-37fb-8a65-7df7fa83630e" locEndPos="1" locType="sr" urgent="true" hash="-249486341" locEndLn="28" goals="1," />
    <StdViol msg="The assertion density is lower than two assertions per function" ln="1" locFile="/build/../../../../../../../../driver.c" locStartln="1" sev="3" auth="username" locRef="2" rule="METRICS-31" lnHash="0" rule.header="The assertion density of the code should average to a minimum of two assertions per function" tool="c++test" lineHash="0" unbViolId="dc78b6fa-e04f-33cd-a805-171c4a3a6236" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b52e97ab-2c79-30dc-94a0-52c5ade7fe4f" locEndPos="1" locType="sr" hash="65740504" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'driver.c' should declare a local constant string that begins from characters &quot;@(#)&quot; " ln="1" locFile="/build/../../../../../../../../driver.c" locStartln="1" sev="5" auth="username" locRef="2" rule="PFO-04" lnHash="0" rule.header="Every implementation file should declare a local constant string that describes the file" tool="c++test" lineHash="0" unbViolId="038e5d65-fed3-3a09-950f-69627aec545d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="171d6540-b471-3410-b9c1-7235ecff5ccd" locEndPos="1" locType="sr" hash="65740504" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'driver.c'" ln="1" locFile="/build/../../../../../../../../driver.c" locStartln="1" sev="3" auth="username" locRef="2" rule="COMMENT-02" lnHash="0" rule.header="Provide copyright information" tool="c++test" lineHash="0" unbViolId="f36efae4-b270-3a8f-afc5-da76850117ff" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="336bbb4f-2f41-3a94-9b1d-b115d270dc77" locEndPos="1" locType="sr" hash="65740504" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'driver.c'" ln="1" locFile="/build/../../../../../../../../driver.c" locStartln="1" sev="3" auth="username" locRef="2" rule="JSF-133_b" lnHash="0" rule.header="Every source file will contain copyright information" tool="c++test" lineHash="0" unbViolId="57ad740f-3e6c-368c-99b3-ae1e5c257f85" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a51bcc00-8372-306b-bae1-a339c636dff7" locEndPos="1" locType="sr" hash="65740504" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'driver.c'" ln="1" locFile="/build/../../../../../../../../driver.c" locStartln="1" sev="3" auth="username" locRef="2" rule="COMMENT-03" lnHash="0" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="0" unbViolId="879df888-4dee-3c6b-9069-c81b814e1f55" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03c9f22a-7a8c-3528-9974-00cc5e9b5c0b" locEndPos="1" locType="sr" hash="65740504" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'driver.c'" ln="1" locFile="/build/../../../../../../../../driver.c" locStartln="1" sev="3" auth="username" locRef="2" rule="JSF-133_a" lnHash="0" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="0" unbViolId="1701bc6d-9c56-3232-bc9b-be94f6a9275b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bcaeeb2f-ba59-3d82-8e44-8df4cd849a9e" locEndPos="1" locType="sr" hash="65740504" locEndLn="1" goals="0," />
    <StdViol msg="Use // comments only" ln="2" locFile="/build/../../../../../../../../driver.c" locStartln="2" sev="3" auth="username" locRef="2" rule="HICPP-2_3_1-a" lnHash="1499" rule.header="Prefer C++ style comment" tool="c++test" lineHash="1499" unbViolId="0dbdd23f-a665-38bd-821e-151f7f1a35aa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ece3c03-42e5-3560-a285-0616605e53ee" locEndPos="1" locType="sr" hash="65740504" locEndLn="2" goals="0," />
    <StdViol msg="Use // comments only" ln="2" locFile="/build/../../../../../../../../driver.c" locStartln="2" sev="2" auth="username" locRef="2" rule="JSF-126" lnHash="1499" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="1499" unbViolId="c33c9d28-dedf-357e-a22d-31955386dcda" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="58f13419-10ab-31a1-9537-5b15235b0914" locEndPos="1" locType="sr" hash="65740504" locEndLn="2" goals="0," />
    <StdViol msg="Use // comments only" ln="2" locFile="/build/../../../../../../../../driver.c" locStartln="2" sev="3" auth="username" locRef="2" rule="COMMENT-01" lnHash="1499" rule.header="Prefer C++ style comment" tool="c++test" lineHash="1499" unbViolId="51ba58b0-99ad-389c-b437-80b32c1c75de" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd9468da-3529-32ab-a3fb-441eb85a2367" locEndPos="1" locType="sr" hash="65740504" locEndLn="2" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="6" locFile="/build/../../../../../../../../driver.c" locStartln="6" sev="3" auth="username" locRef="2" rule="PREPROC-18" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be included" tool="c++test" lineHash="1233725276" unbViolId="558ac31e-9f59-3347-bfab-f2d00b4a297b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7a53fbc-f46e-3262-b3e3-af1423959fc8" locEndPos="1" locType="sr" hash="65740504" locEndLn="6" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="6" locFile="/build/../../../../../../../../driver.c" locStartln="6" sev="2" auth="username" locRef="2" rule="JSF-022" lnHash="1233725276" rule.header="The input/output library &lt;stdio.h> shall not be used" tool="c++test" lineHash="1233725276" unbViolId="0592bce4-bc37-3c92-9cca-8ff4bf94f0a2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="428bbead-5b51-3357-9cd5-e1aa17c7d472" locEndPos="1" locType="sr" hash="65740504" locEndLn="6" goals="0," />
    <StdViol msg="Ensure that C Standard Library is securely used" ln="6" locFile="/build/../../../../../../../../driver.c" locStartln="6" sev="4" auth="username" locRef="2" rule="HICPP-17_2_1-a" lnHash="1233725276" rule.header="Wrap use of the C Standard Library" tool="c++test" lineHash="1233725276" unbViolId="3d1273c4-998f-361b-97f6-c9fa46e62525" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ecd8224-5d50-3ec5-9b65-29d6a56d9c8d" locEndPos="1" locType="sr" hash="65740504" locEndLn="6" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="6" locFile="/build/../../../../../../../../driver.c" locStartln="6" sev="2" auth="username" locRef="2" rule="AUTOSAR-M27_0_1-a" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be used" tool="c++test" lineHash="1233725276" unbViolId="7a09bf3e-19a3-31fe-a4d6-5e23e165b447" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="375a1117-b8cf-352b-b758-6750559ce97b" locEndPos="1" locType="sr" hash="65740504" locEndLn="6" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="6" locFile="/build/../../../../../../../../driver.c" locStartln="6" sev="2" auth="username" locRef="2" rule="MISRA2008-27_0_1" lnHash="1233725276" rule.header="The stream input/output library &lt;cstdio> shall not be used" tool="c++test" lineHash="1233725276" unbViolId="faab3470-bdd5-3b92-8af1-67b60773835b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0bb62d2e-7ba7-3472-9254-d4c51e534915" locEndPos="1" locType="sr" hash="65740504" locEndLn="6" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="6" locFile="/build/../../../../../../../../driver.c" locStartln="6" sev="3" auth="username" locRef="2" rule="MISRA2004-20_9" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be used" tool="c++test" lineHash="1233725276" unbViolId="204003bf-9010-39d5-a402-03ec63259180" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="587f9da0-7eff-38b3-be49-40c2adaae8e6" locEndPos="1" locType="sr" hash="65740504" locEndLn="6" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;clock.h&quot;" ln="7" locFile="/build/../../../../../../../../driver.c" locStartln="7" sev="2" auth="username" locRef="2" rule="PREPROC-09" lnHash="666904961" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="666904961" unbViolId="be28406e-0cf9-3179-960a-917cec154874" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="298cc41d-b5c1-35f7-bb4e-c67773ff4c29" locEndPos="1" locType="sr" hash="65740504" locEndLn="7" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;clock.h&quot;" ln="7" locFile="/build/../../../../../../../../driver.c" locStartln="7" sev="2" auth="username" locRef="2" rule="JSF-033" lnHash="666904961" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="666904961" unbViolId="68164668-b9ba-36b4-a35a-4a168c75c68e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65e39098-9263-335a-b224-73d7fe4284fb" locEndPos="1" locType="sr" hash="65740504" locEndLn="7" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;consts.h&quot;" ln="8" locFile="/build/../../../../../../../../driver.c" locStartln="8" sev="2" auth="username" locRef="2" rule="PREPROC-09" lnHash="-286442511" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="-286442511" unbViolId="1501847a-57e9-3b48-9838-81f9a7b80b76" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10320a60-5cef-33ce-9f6f-47768e9cf588" locEndPos="1" locType="sr" hash="65740504" locEndLn="8" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;consts.h&quot;" ln="8" locFile="/build/../../../../../../../../driver.c" locStartln="8" sev="2" auth="username" locRef="2" rule="JSF-033" lnHash="-286442511" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="-286442511" unbViolId="e48271cc-4a78-379d-a974-92932fd3dedd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59ccbc27-f792-3d9b-9c1a-760ad9c0eb2a" locEndPos="1" locType="sr" hash="65740504" locEndLn="8" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;inout.h&quot;" ln="9" locFile="/build/../../../../../../../../driver.c" locStartln="9" sev="2" auth="username" locRef="2" rule="PREPROC-09" lnHash="30763942" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="30763942" unbViolId="0d07903b-1cc7-35eb-999c-59c1789262a7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84acfd47-ddef-3432-aa57-f9a2a4726b8b" locEndPos="1" locType="sr" hash="65740504" locEndLn="9" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;inout.h&quot;" ln="9" locFile="/build/../../../../../../../../driver.c" locStartln="9" sev="2" auth="username" locRef="2" rule="JSF-033" lnHash="30763942" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="30763942" unbViolId="3fc584eb-09af-3f05-b884-3333e45098b7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d8f780f-2d99-38ee-b6de-be6ba4f03c1e" locEndPos="1" locType="sr" hash="65740504" locEndLn="9" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;timer.h&quot;" ln="10" locFile="/build/../../../../../../../../driver.c" locStartln="10" sev="2" auth="username" locRef="2" rule="PREPROC-09" lnHash="1807163114" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="1807163114" unbViolId="a7dce72e-5237-388f-9f0d-614ca3be9590" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74403936-ca6e-3eda-99ef-9292b12bc5fc" locEndPos="1" locType="sr" hash="65740504" locEndLn="10" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;timer.h&quot;" ln="10" locFile="/build/../../../../../../../../driver.c" locStartln="10" sev="2" auth="username" locRef="2" rule="JSF-033" lnHash="1807163114" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="1807163114" unbViolId="3c503d42-16a4-3ed0-beef-575df7c51911" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0194a1e2-e1e8-3b6c-a02a-9deb9fbef218" locEndPos="1" locType="sr" hash="65740504" locEndLn="10" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="4" auth="username" locRef="2" rule="MISRA2008-3_9_2" lnHash="-1050535651" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1050535651" unbViolId="816b07e6-c1c8-3cfd-a5e4-b9d082a1eb3a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dac4bb64-8537-329d-9365-5e800084ca31" locEndPos="1" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="3" auth="username" locRef="2" rule="MISRA-013" lnHash="-1050535651" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1050535651" unbViolId="fdbfa4d3-f93a-3127-a589-e172fb9c71d7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c328f6a0-61bb-3a14-8f87-62b0c957ac63" locEndPos="1" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="3" auth="username" locRef="2" rule="CODSTA-223" lnHash="-1050535651" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1050535651" unbViolId="9a800dec-c8bc-3d9a-8f2d-52d2dedba033" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e8577c5-396e-3e26-958e-16637e213e1e" locEndPos="1" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="2" auth="username" locRef="2" rule="AUTOSAR-A3_9_1-b" lnHash="-1050535651" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1050535651" unbViolId="af473d3e-7d87-378f-ac0b-49e411986edd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70cebdad-26ad-39b0-a93a-5cb20176d5b7" locEndPos="1" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="3" auth="username" locRef="2" rule="HICPP-7_1_6-b" lnHash="-1050535651" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-1050535651" unbViolId="f876dce0-692f-3e4d-a8eb-cdefa11dbbba" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb85e0a1-1170-33d5-9e47-ea806332feb7" locEndPos="1" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="4" auth="username" locRef="2" rule="MISRAC2012-DIR_4_6-b" lnHash="-1050535651" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1050535651" unbViolId="f17efd9a-4130-311a-b02f-707afbef991f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c1a51ac-6349-303a-a09c-a432742306e4" locEndPos="1" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="3" auth="username" locRef="2" rule="MISRA2004-6_3_b" lnHash="-1050535651" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1050535651" unbViolId="efd7042c-7eab-3a0a-9c8c-336012e4612b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="183e9b4e-2cf4-3ae5-9f55-842ee2e61c52" locEndPos="1" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="2" auth="username" locRef="2" rule="JSF-209_b" lnHash="-1050535651" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-1050535651" unbViolId="0123e86f-4913-3f89-8e97-179ef203a7f8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a7e1edf-b21d-3012-b88b-9f5b8252b6eb" locEndPos="1" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="4" auth="username" locRef="2" rule="MISRA2012-DIR-4_6_b" lnHash="-1050535651" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1050535651" unbViolId="9bf94c2c-d5a2-32fa-9d03-13300d9e072d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d39adb0-55a6-3753-aae4-608190c25ae0" locEndPos="1" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="3" auth="username" locRef="2" rule="HICPP-3_5_1-b" lnHash="-1050535651" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1050535651" unbViolId="bc246d43-2461-31b0-a0da-9c9876e2763f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8af9d55a-6c69-3e78-95ae-59f5555594e7" locEndPos="1" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="R-3119: use of non-prototype function declarator" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="5" auth="username" locRef="2" rule="PARSER-REMARK" lnHash="-1050535651" rule.header="Parser remark" tool="c++test" lineHash="-1050535651" unbViolId="717cd925-ee2e-37bd-a196-9681f9cb3c59" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dcf2e516-af5d-322e-ac1d-5a9124c6c399" locEndPos="5" locType="sr" urgent="true" hash="65740504" locEndLn="13" goals="1," />
    <StdViol msg="Prototype of function 'print_menu_get_action' does not precede function definition" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_8_4-a" lnHash="-1050535651" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="-1050535651" unbViolId="377058a4-4201-3adb-82ef-91ca82c1ee06" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="728b279a-0f6c-3222-92ee-9b0ebaa12285" locEndPos="5" locType="sr" urgent="true" hash="65740504" locEndLn="13" goals="1," />
    <StdViol msg="Prototype of function 'print_menu_get_action' does not precede function definition" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-8_4_a" lnHash="-1050535651" rule.header="A compatible declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="-1050535651" unbViolId="d28b3419-08a0-3391-9d6f-05f5ce3de5b6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5719cacf-8f0c-3fc0-8568-246bc7820bf6" locEndPos="5" locType="sr" urgent="true" hash="65740504" locEndLn="13" goals="1," />
    <StdViol msg="Prototype of function 'print_menu_get_action' does not precede function definition" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="3" auth="username" locRef="2" rule="CODSTA-118" lnHash="-1050535651" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="-1050535651" unbViolId="5cddc6c0-12d8-3956-9e03-42be6abd87fa" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ff89e69-91a2-3a0b-9bc2-e1ab6140363f" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="The definition of the 'print_menu_get_action' function is not preceded by a comment" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="3" auth="username" locRef="2" rule="COMMENT-04" lnHash="-1050535651" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1050535651" unbViolId="30d05e71-10b3-3501-b4f4-a8d97294e47c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79ee1ae8-2dfa-32b8-b03e-b5ed1a72b769" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="The definition of the 'print_menu_get_action' function is not preceded by a comment" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="4" auth="username" locRef="2" rule="JSF-134" lnHash="-1050535651" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1050535651" unbViolId="b36fc0db-a6e2-3eeb-8226-8a30605f0272" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cfb1b6a5-07df-365d-8291-a40470f7521f" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="Function 'print_menu_get_action' has external linkage and is not declared in the header" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="4" auth="username" locRef="2" rule="OWASP2019-API9-e" lnHash="-1050535651" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1050535651" unbViolId="d78fc79a-46bf-33be-a3c3-5f406109e09a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7925a787-c1f0-3311-b464-eec48aa6ed80" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="Function 'print_menu_get_action' has external linkage and is not declared in the header" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="2" auth="username" locRef="2" rule="AUTOSAR-A3_3_1-a" lnHash="-1050535651" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1050535651" unbViolId="749a8944-6cd6-33a4-9a66-d734d5055f8b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c3903624-ed52-3c75-ba70-4eb766639441" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="Function 'print_menu_get_action' has external linkage and is not declared in the header" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="4" auth="username" locRef="2" rule="JSF-137" lnHash="-1050535651" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-1050535651" unbViolId="c637517c-c8ca-345f-8b77-695d1e253e78" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9b835ca5-6942-3e25-b012-5c03fbfaaded" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="Function 'print_menu_get_action' has external linkage and is not declared in the header" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="4" auth="username" locRef="2" rule="MISRA-023" lnHash="-1050535651" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1050535651" unbViolId="6231a316-d1eb-3100-9bcc-8bf6e316ea94" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6733bdae-4049-3852-930c-b042ffcbb949" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="Function 'print_menu_get_action' has external linkage and is not declared in the header" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="2" auth="username" locRef="2" rule="MISRA2008-3_3_1" lnHash="-1050535651" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1050535651" unbViolId="5d9b287d-8c5a-3339-a11b-79c1d34c9dcb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88d14532-0744-3835-8c1b-245ee13ddd64" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="Function 'print_menu_get_action' has external linkage and is not declared in the header" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="3" auth="username" locRef="2" rule="CERT_C-DCL15-a" lnHash="-1050535651" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1050535651" unbViolId="34129105-0d6b-372c-8b27-144ff80938af" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="870353d8-a1a3-392d-b6fc-c6403f97c118" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="Function 'print_menu_get_action' has external linkage and is not declared in the header" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="4" auth="username" locRef="2" rule="MISRA2004-8_10" lnHash="-1050535651" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1050535651" unbViolId="34885df8-8d44-3a17-8c0d-18673e586f21" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ea2b82f-9aac-3a1f-afe0-02725d2bf165" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="Prototype of function 'print_menu_get_action' does not precede function definition" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="3" auth="username" locRef="2" rule="MISRA2004-8_1_a" lnHash="-1050535651" rule.header="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" tool="c++test" lineHash="-1050535651" unbViolId="34174cda-190a-39c0-a625-976e17f38340" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d6d3a639-6578-33f7-a2c3-d5761b34fa64" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="Prototype of function 'print_menu_get_action' does not precede function definition" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="3" auth="username" locRef="2" rule="MISRA-071_a" lnHash="-1050535651" rule.header="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" tool="c++test" lineHash="-1050535651" unbViolId="0bf50f98-1e78-32ae-8cce-efb84c7093bd" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1e41d41-6726-3866-85da-87ebd9be76e5" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="Function 'print_menu_get_action' is not in prototype form" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_8_2-c" lnHash="-1050535651" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-1050535651" unbViolId="9b77080d-430c-3fb7-a668-2bed96d75b1c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="686349a4-73f9-36ac-8918-18edca2ee234" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="Function 'print_menu_get_action' is not in prototype form" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="3" auth="username" locRef="2" rule="CERT_C-EXP37-c" lnHash="-1050535651" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-1050535651" unbViolId="40cf3359-653a-3963-9f9e-f6e5cd9871f0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5e1c7aa-7e24-3a64-849e-76d24ca2f643" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="Function 'print_menu_get_action' is not in prototype form" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-8_2_c" lnHash="-1050535651" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-1050535651" unbViolId="6e2f1257-0345-3faf-8dc1-2c7feb2995fb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="052d632d-c38f-3c68-b48e-767ae6935d37" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="Function 'print_menu_get_action' is not in prototype form" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="3" auth="username" locRef="2" rule="CODSTA-159" lnHash="-1050535651" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-1050535651" unbViolId="91c5adb5-2653-37b3-a58e-a1e6214a3e41" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7a4503d-995d-326e-a9af-9671bee1b137" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="The 'print_menu_get_action' function should be preceded by a comment that contains the '@brief' tag" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="3" auth="username" locRef="2" rule="COMMENT-14" lnHash="-1050535651" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1050535651" unbViolId="0433611d-25d0-3998-b558-2ca938b0b1b9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="efbd7e7c-200c-3d56-a2f2-b7656bdbea9f" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="The 'print_menu_get_action' function should be preceded by a comment that contains the '@brief' tag" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="2" auth="username" locRef="2" rule="AUTOSAR-A2_7_3-a" lnHash="-1050535651" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1050535651" unbViolId="9c25312b-36a7-3745-82ea-48a0fbef2506" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac017644-8b6f-3cfb-8df7-5773d2163b01" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="The 'print_menu_get_action' function should be preceded by a comment that contains the '@return' tag" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="3" auth="username" locRef="2" rule="COMMENT-14_b" lnHash="-1050535651" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1050535651" unbViolId="3c33273b-3bdc-33c5-8f83-573c2d60ebaf" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb04f6b8-abd3-3729-b1a8-6e71bc4b3c6d" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="The 'print_menu_get_action' function should be preceded by a comment that contains the '@return' tag" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="2" auth="username" locRef="2" rule="AUTOSAR-A2_7_3-b" lnHash="-1050535651" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1050535651" unbViolId="b09ab5f9-9a47-3fa7-9194-22ecb4fb6fe2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cad444fa-36b7-3867-bcd8-bf1128592991" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="'print_menu_get_action' shall be declared as unsigned int or signed int" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="3" auth="username" locRef="2" rule="PORT-13" lnHash="-1050535651" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-1050535651" unbViolId="07ed6764-0fbc-30ac-9c44-04762f88f5f4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f0c4cdb-5067-3a9e-a3da-5a6d1eef7416" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="Function 'print_menu_get_action' has empty parameter list" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="3" auth="username" locRef="2" rule="CODSTA-40" lnHash="-1050535651" rule.header="'void' should be used when a function is passed or returns no values" tool="c++test" lineHash="-1050535651" unbViolId="bbc2203b-5b47-3dcb-a4e9-1343aea82cbb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94978098-0d23-36a7-99a0-8f794a66589a" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'print_menu_get_action'" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="3" auth="username" locRef="2" rule="FORMAT-28" lnHash="-1050535651" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-1050535651" unbViolId="8a57f52b-601a-39f7-ac4f-44d3c667de5a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="278d5f7d-cc60-3b22-b7e9-4880b10a810b" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="Function 'print_menu_get_action' has 14 function calls" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="3" auth="username" locRef="2" rule="METRICS-04" lnHash="-1050535651" rule.header="Number of function calls within function" tool="c++test" lineHash="-1050535651" unbViolId="4a341a91-c7c7-3d9e-8dcb-3bf202211a28" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76b52e5b-13e9-3b62-ba7b-f084c1c0df48" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="Function 'print_menu_get_action' has Cyclomatic Complexity value: 1" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="5" auth="username" locRef="2" rule="METRICS-29" lnHash="-1050535651" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-1050535651" unbViolId="f58bfe5f-9919-3b46-a295-d6a82154a173" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="218513a9-a842-3fc4-91fc-a2851e01cd6d" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="Function 'print_menu_get_action' has Essential Complexity value: 1" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="5" auth="username" locRef="2" rule="METRICS-33" lnHash="-1050535651" rule.header="Report Essential Complexity" tool="c++test" lineHash="-1050535651" unbViolId="917fc195-9600-3be0-9964-515b80417f9d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5f51e2d-413d-3e0e-a121-39274d6609fb" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="Number of blocks of comments per statement in the function 'print_menu_get_action' : 0.0" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="3" auth="username" locRef="2" rule="METRICS-41" lnHash="-1050535651" rule.header="The number of blocks of comments before and inside function to the number of statements in function should be > 0.2" tool="c++test" lineHash="-1050535651" unbViolId="1fe78c55-3f37-30bd-8f36-e7e1f9a50eae" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5bc0db27-19ba-3c8b-8f5b-4a09d30e3f29" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="The value of Halstead's delivered bugs (B) for function 'print_menu_get_action' is 0.09" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="3" auth="username" locRef="2" rule="METRICS-43" lnHash="-1050535651" rule.header="Report the value of Halstead's delivered bugs (B) for a function" tool="c++test" lineHash="-1050535651" unbViolId="7dc2a5d5-2bce-31f1-827b-72c26e803e10" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd4af26a-2e05-35c6-9f0e-622eecd00529" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="Declare function 'print_menu_get_action' with parameter type void" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="3" auth="username" locRef="2" rule="MISRA2004-16_5" lnHash="-1050535651" rule.header="Functions with no parameters shall be declared with parameter type void" tool="c++test" lineHash="-1050535651" unbViolId="4aa9e577-e12e-3a33-95cd-6f8a62007d5e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="748db246-af4c-36ff-a17b-58b1f5780a0b" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="Naming convention not followed: print_menu_get_action" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="3" auth="username" locRef="2" rule="NAMING-17" lnHash="-1050535651" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-1050535651" unbViolId="52ca90c0-cbfe-3983-a2b2-8bcfd350df03" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7555b01a-0627-3729-b1c9-1b484384c7e9" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="The function 'print_menu_get_action' is referenced only in the translation unit where it is defined" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="4" auth="username" locRef="2" rule="MISRA2012-RULE-8_7" lnHash="-1050535651" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="-1050535651" unbViolId="5217c007-7c42-3612-9025-3ee3bc78545e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="33c8c688-c638-3bc6-91ef-148cc13c2372" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="The function 'print_menu_get_action' is referenced only in the translation unit where it is defined" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="4" auth="username" locRef="2" rule="GLOBAL-AVOIDEXTERN" lnHash="-1050535651" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="-1050535651" unbViolId="a7b6629d-6904-33cc-b953-762702e99635" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="4df60ad5-f68e-368d-8ba6-a5ab08226c24" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="The function 'print_menu_get_action' is referenced only in the translation unit where it is defined" ln="13" locFile="/build/../../../../../../../../driver.c" locStartln="13" sev="4" auth="username" locRef="2" rule="MISRAC2012-RULE_8_7-a" lnHash="-1050535651" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="-1050535651" unbViolId="b5d75107-745a-3ad4-bd1f-810f95055cb4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="9d5d7081-3097-3a9e-83a5-3952f602c11b" locEndPos="5" locType="sr" hash="65740504" locEndLn="13" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="14" locFile="/build/../../../../../../../../driver.c" locStartln="14" sev="3" auth="username" locRef="2" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="8e4fadcd-6b9d-35bc-83d5-259aca64a188" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8705fec8-4190-3bf9-bc20-67e9254b944c" locEndPos="1" locType="sr" hash="65740504" locEndLn="14" goals="0," />
    <DupViol msg="Duplicated code: 'print_string(&quot;**********************************************...'" ln="15" locFile="/build/../../../../../../../../driver.c" locStartln="15" sev="3" auth="username" locRef="2" rule="CDD-DUPC" lnHash="923795973" rule.header="Avoid code duplication" tool="c++test" lineHash="923795973" unbViolId="adf97a00-7299-332f-b3b7-051510e39a9b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="9942ce62-18eb-3db2-b844-c2cf5e0d81a0" locEndPos="73" locType="sr" urgent="true" hash="65740504" locEndLn="20" goals="1,">
      <ElDescList>
        <ElDesc lineHash="923795973" locType="sr" srcRnghash="65740504" locRef="2" srcRngFile="/build/../../../../../../../../driver.c" ln="15" srcRngStartPos="4" srcRngEndPos="73" srcRngStartln="15" srcRngEndLn="20" desc="[Line 15] Duplicated code in file 'driver.c'" rngLn="15" />
        <ElDesc lineHash="1075694496" locType="sr" srcRnghash="65740504" locRef="2" srcRngFile="/build/../../../../../../../../driver.c" ln="22" srcRngStartPos="4" srcRngEndPos="64" srcRngStartln="22" srcRngEndLn="28" desc="[Line 22] Duplicated code in file 'driver.c'" rngLn="22" />
      </ElDescList>
    </DupViol>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="15" locFile="/build/../../../../../../../../driver.c" locStartln="15" sev="3" auth="username" locRef="2" rule="CODSTA-122_a" lnHash="923795973" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="923795973" unbViolId="468b5572-82d1-3828-afa7-3a4c50c851e7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59af5a18-603c-3641-bd5c-4217cd6b66b1" locEndPos="5" locType="sr" hash="65740504" locEndLn="15" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="15" locFile="/build/../../../../../../../../driver.c" locStartln="15" sev="1" auth="username" locRef="2" rule="CERT_C-ERR33-a" lnHash="923795973" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="923795973" unbViolId="218cf9e0-ae29-3dd2-b025-71c8261f7a62" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b32d3a62-297a-3b30-809e-ea399dbf036a" locEndPos="5" locType="sr" hash="65740504" locEndLn="15" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="15" locFile="/build/../../../../../../../../driver.c" locStartln="15" sev="1" auth="username" locRef="2" rule="CERT_C-POS54-a" lnHash="923795973" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="923795973" unbViolId="89a47222-2f5f-38c3-94f8-c31e11324e28" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5e7e615-270d-3692-a08b-66b7d27e256c" locEndPos="5" locType="sr" hash="65740504" locEndLn="15" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="15" locFile="/build/../../../../../../../../driver.c" locStartln="15" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="923795973" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="923795973" unbViolId="34cf4215-7e8a-320f-bd7d-820f2371d9ba" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55619363-bda0-3ece-a876-41689d802e84" locEndPos="5" locType="sr" hash="65740504" locEndLn="15" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="15" locFile="/build/../../../../../../../../driver.c" locStartln="15" sev="3" auth="username" locRef="2" rule="CERT_C-EXP12-a" lnHash="923795973" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="923795973" unbViolId="ec65b9fa-df47-3151-ab2a-095bad75203f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc21c75e-efea-30ac-9b9c-8cee9df7133b" locEndPos="5" locType="sr" hash="65740504" locEndLn="15" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="15" locFile="/build/../../../../../../../../driver.c" locStartln="15" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-17_7_a" lnHash="923795973" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="923795973" unbViolId="88c590e5-07ab-3c9f-b201-00a7208edacb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7206def0-cd10-316a-92b2-eb4976d1dbcf" locEndPos="5" locType="sr" hash="65740504" locEndLn="15" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="15" locFile="/build/../../../../../../../../driver.c" locStartln="15" sev="3" auth="username" locRef="2" rule="MISRA2004-16_10" lnHash="923795973" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="923795973" unbViolId="5ca9002b-0a9c-36d3-b795-8a65890d6e71" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be184638-022b-302a-88cf-b0d6c8661e31" locEndPos="5" locType="sr" hash="65740504" locEndLn="15" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="15" locFile="/build/../../../../../../../../driver.c" locStartln="15" sev="2" auth="username" locRef="2" rule="AUTOSAR-M0_3_2-a" lnHash="923795973" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="923795973" unbViolId="f94989b1-dbe2-31eb-ab94-19149beabdfc" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf2439df-fc62-3417-a4f1-f23cd6294b90" locEndPos="5" locType="sr" hash="65740504" locEndLn="15" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="15" locFile="/build/../../../../../../../../driver.c" locStartln="15" sev="2" auth="username" locRef="2" rule="MISRA2008-0_3_2" lnHash="923795973" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="923795973" unbViolId="b88dcbbe-0136-3109-81a5-0393c2868790" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="57cb915c-066d-3521-a694-25efdfe87c45" locEndPos="5" locType="sr" hash="65740504" locEndLn="15" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="15" locFile="/build/../../../../../../../../driver.c" locStartln="15" sev="3" auth="username" locRef="2" rule="JSF-115" lnHash="923795973" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="923795973" unbViolId="ce0fc8ea-8f36-3064-a680-b3dde97b2c39" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bcc9a983-7f3f-3028-a055-aaae64f97d7b" locEndPos="5" locType="sr" hash="65740504" locEndLn="15" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: **************************************************" ln="15" locFile="/build/../../../../../../../../driver.c" locStartln="15" sev="5" auth="username" locRef="2" rule="CWE-798-a" lnHash="923795973" rule.header="Do not hard code string literals" tool="c++test" lineHash="923795973" unbViolId="095d7fe4-04fe-3532-9889-173c35adf131" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="140e8814-1d4d-3a8f-bed7-a303e5257241" locEndPos="18" locType="sr" hash="65740504" locEndLn="15" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: **************************************************" ln="15" locFile="/build/../../../../../../../../driver.c" locStartln="15" sev="5" auth="username" locRef="2" rule="CODSTA-203" lnHash="923795973" rule.header="Do not hard code string literals" tool="c++test" lineHash="923795973" unbViolId="02206fc7-8885-38fe-a43e-fb7a160fe1fe" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b80c87c2-bdfa-3508-ad9c-8c46ad6c63d5" locEndPos="18" locType="sr" hash="65740504" locEndLn="15" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: **************************************************" ln="15" locFile="/build/../../../../../../../../driver.c" locStartln="15" sev="1" auth="username" locRef="2" rule="APSC_DV-003110-a" lnHash="923795973" rule.header="Do not hard code string literals" tool="c++test" lineHash="923795973" unbViolId="4cb82307-92f2-3532-81df-16395204f72c" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4849651d-25d2-302e-a2c1-61d50ac8dda4" locEndPos="18" locType="sr" hash="65740504" locEndLn="15" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: **************************************************" ln="15" locFile="/build/../../../../../../../../driver.c" locStartln="15" sev="1" auth="username" locRef="2" rule="CERT_C-MSC41-a" lnHash="923795973" rule.header="Do not hard code string literals" tool="c++test" lineHash="923795973" unbViolId="b5746334-ecd6-3cf7-9b74-59828b97f12b" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a1633c0-9d9e-3ac1-8b30-07abbf94b059" locEndPos="18" locType="sr" hash="65740504" locEndLn="15" goals="0," />
    <StdViol msg="String literal &quot;**************************************************&quot; is passed to function 'print_string' as pointer to non-const object" ln="15" locFile="/build/../../../../../../../../driver.c" locStartln="15" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="923795973" rule.header="A string literal shall not be modified" tool="c++test" lineHash="923795973" unbViolId="be66a222-36f7-34db-95cf-56eb005e88a6" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f07f5441-ec8b-32ac-b7f0-ccd8f2187c09" locEndPos="18" locType="sr" hash="65740504" locEndLn="15" goals="0," />
    <StdViol msg="String literal &quot;**************************************************&quot; is passed to function 'print_string' as pointer to non-const object" ln="15" locFile="/build/../../../../../../../../driver.c" locStartln="15" sev="2" auth="username" locRef="2" rule="AUTOSAR-A2_13_4-a" lnHash="923795973" rule.header="A string literal shall not be modified" tool="c++test" lineHash="923795973" unbViolId="d4e76b38-9ee0-3bd4-9363-97c5ef3eeac6" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ca291ee-06b1-3547-8cb7-3bf4d90ab0ee" locEndPos="18" locType="sr" hash="65740504" locEndLn="15" goals="0," />
    <StdViol msg="String literal &quot;**************************************************&quot; is passed to function 'print_string' as pointer to non-const object" ln="15" locFile="/build/../../../../../../../../driver.c" locStartln="15" sev="2" auth="username" locRef="2" rule="JSF-151.1" lnHash="923795973" rule.header="A string literal shall not be modified" tool="c++test" lineHash="923795973" unbViolId="fe270ed8-c7fa-3086-a452-2c50b4f5d4a2" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="44f221ea-d18a-3624-8099-8d7de748fb7e" locEndPos="18" locType="sr" hash="65740504" locEndLn="15" goals="0," />
    <StdViol msg="String literal &quot;**************************************************&quot; is passed to function 'print_string' as pointer to non-const object" ln="15" locFile="/build/../../../../../../../../driver.c" locStartln="15" sev="2" auth="username" locRef="2" rule="PB-27" lnHash="923795973" rule.header="A string literal shall not be modified" tool="c++test" lineHash="923795973" unbViolId="15d830b0-b832-37a5-b524-b06aa8fc9798" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5c97237f-a516-3afa-b4c0-4f9b74a47ccf" locEndPos="18" locType="sr" hash="65740504" locEndLn="15" goals="0," />
    <StdViol msg="String literal &quot;**************************************************&quot; is passed to function 'print_string' as pointer to non-const object" ln="15" locFile="/build/../../../../../../../../driver.c" locStartln="15" sev="3" auth="username" locRef="2" rule="CERT_C-STR05-a" lnHash="923795973" rule.header="A string literal shall not be modified" tool="c++test" lineHash="923795973" unbViolId="ef46e5e1-a411-3a34-b7ee-13cb37f69ebc" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7780e648-ffd6-387e-be23-b60ea922b63f" locEndPos="18" locType="sr" hash="65740504" locEndLn="15" goals="0," />
    <StdViol msg="String literal &quot;**************************************************&quot; is passed to function 'print_string' as pointer to non-const object" ln="15" locFile="/build/../../../../../../../../driver.c" locStartln="15" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-7_4" lnHash="923795973" rule.header="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" tool="c++test" lineHash="923795973" unbViolId="fbe35a5e-143f-3526-be9c-6342cc16fe29" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f7436be-b967-330c-a00b-ec4113279814" locEndPos="18" locType="sr" hash="65740504" locEndLn="15" goals="0," />
    <StdViol msg="String literal &quot;**************************************************&quot; is passed to function 'print_string' as pointer to non-const object" ln="15" locFile="/build/../../../../../../../../driver.c" locStartln="15" sev="2" auth="username" locRef="2" rule="CERT_C-STR30-a" lnHash="923795973" rule.header="A string literal shall not be modified" tool="c++test" lineHash="923795973" unbViolId="ea9415c0-d9a4-31e3-a229-324a473baa47" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="853c8afe-35d3-304e-a15e-9b96b9e597a4" locEndPos="18" locType="sr" hash="65740504" locEndLn="15" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="16" locFile="/build/../../../../../../../../driver.c" locStartln="16" sev="3" auth="username" locRef="2" rule="CODSTA-122_a" lnHash="378303775" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="378303775" unbViolId="511a60e5-6a7f-3110-8a12-b15c26b3c1f8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b295dac9-646a-33f6-8b52-345a85a02126" locEndPos="5" locType="sr" hash="65740504" locEndLn="16" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="16" locFile="/build/../../../../../../../../driver.c" locStartln="16" sev="1" auth="username" locRef="2" rule="CERT_C-ERR33-a" lnHash="378303775" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="378303775" unbViolId="1f800ea9-08d4-35c4-8906-39e061bb3d7a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be0dd0f8-9e92-3b99-8cd2-5c3d41d3bb40" locEndPos="5" locType="sr" hash="65740504" locEndLn="16" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="16" locFile="/build/../../../../../../../../driver.c" locStartln="16" sev="1" auth="username" locRef="2" rule="CERT_C-POS54-a" lnHash="378303775" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="378303775" unbViolId="2bea99af-9127-3d76-9e9d-5a4e3ac476a1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4318cfc8-0bcf-3e8f-9ba9-d5c903a7f4f4" locEndPos="5" locType="sr" hash="65740504" locEndLn="16" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="16" locFile="/build/../../../../../../../../driver.c" locStartln="16" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="378303775" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="378303775" unbViolId="49dbcfca-3be8-3c9a-91e8-a1d66cb2000a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd65d50e-6269-3c89-96b8-517a606a2514" locEndPos="5" locType="sr" hash="65740504" locEndLn="16" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="16" locFile="/build/../../../../../../../../driver.c" locStartln="16" sev="3" auth="username" locRef="2" rule="CERT_C-EXP12-a" lnHash="378303775" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="378303775" unbViolId="da63b80e-b1b8-390e-a62f-35ad9213aed3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09a3bad2-0c27-3d02-8d8a-e8b829b02381" locEndPos="5" locType="sr" hash="65740504" locEndLn="16" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="16" locFile="/build/../../../../../../../../driver.c" locStartln="16" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-17_7_a" lnHash="378303775" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="378303775" unbViolId="23663363-c2c0-34fb-9775-00c82adaddc4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d12b2491-2d28-335f-a647-83739a46f204" locEndPos="5" locType="sr" hash="65740504" locEndLn="16" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="16" locFile="/build/../../../../../../../../driver.c" locStartln="16" sev="3" auth="username" locRef="2" rule="MISRA2004-16_10" lnHash="378303775" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="378303775" unbViolId="2b62931b-ef11-3688-82a7-ab3abf0f671d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f90dac59-74dd-3401-b0b4-51f91726e7cf" locEndPos="5" locType="sr" hash="65740504" locEndLn="16" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="16" locFile="/build/../../../../../../../../driver.c" locStartln="16" sev="2" auth="username" locRef="2" rule="AUTOSAR-M0_3_2-a" lnHash="378303775" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="378303775" unbViolId="43ce25af-3d7d-3a1e-aeb3-bb8775124182" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0059d179-ffd0-3648-8014-d91e0e2a91e4" locEndPos="5" locType="sr" hash="65740504" locEndLn="16" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="16" locFile="/build/../../../../../../../../driver.c" locStartln="16" sev="2" auth="username" locRef="2" rule="MISRA2008-0_3_2" lnHash="378303775" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="378303775" unbViolId="98e3d750-22f2-3daa-8f0a-845e16e4688a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5dbb00d-fdea-3007-9861-871561429c5e" locEndPos="5" locType="sr" hash="65740504" locEndLn="16" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="16" locFile="/build/../../../../../../../../driver.c" locStartln="16" sev="3" auth="username" locRef="2" rule="JSF-115" lnHash="378303775" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="378303775" unbViolId="c35616e8-5c3a-37e2-a625-a2a0b646824b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="72c75b2b-5b9b-39ca-8752-ca9086c3bd17" locEndPos="5" locType="sr" hash="65740504" locEndLn="16" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: *                  Timer Menu                    *" ln="16" locFile="/build/../../../../../../../../driver.c" locStartln="16" sev="5" auth="username" locRef="2" rule="CWE-798-a" lnHash="378303775" rule.header="Do not hard code string literals" tool="c++test" lineHash="378303775" unbViolId="204b5bcf-010b-32d4-b585-d2be7d6c4e00" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0aa230a4-a4a8-31c7-95be-9bd30788857a" locEndPos="18" locType="sr" hash="65740504" locEndLn="16" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: *                  Timer Menu                    *" ln="16" locFile="/build/../../../../../../../../driver.c" locStartln="16" sev="5" auth="username" locRef="2" rule="CODSTA-203" lnHash="378303775" rule.header="Do not hard code string literals" tool="c++test" lineHash="378303775" unbViolId="45ab6a26-a51e-3a5a-938c-954339bfd898" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a8c3ecd-5d53-36a9-99d2-7da506162dc3" locEndPos="18" locType="sr" hash="65740504" locEndLn="16" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: *                  Timer Menu                    *" ln="16" locFile="/build/../../../../../../../../driver.c" locStartln="16" sev="1" auth="username" locRef="2" rule="APSC_DV-003110-a" lnHash="378303775" rule.header="Do not hard code string literals" tool="c++test" lineHash="378303775" unbViolId="2d27bd73-7435-3eb5-adfd-94b352e81e89" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da6a514c-f278-3666-93f8-1c7839a9812b" locEndPos="18" locType="sr" hash="65740504" locEndLn="16" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: *                  Timer Menu                    *" ln="16" locFile="/build/../../../../../../../../driver.c" locStartln="16" sev="1" auth="username" locRef="2" rule="CERT_C-MSC41-a" lnHash="378303775" rule.header="Do not hard code string literals" tool="c++test" lineHash="378303775" unbViolId="8fae14d2-c01d-3db1-8551-122e04dfde88" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7cc26eb4-080a-35ac-a4dc-f28bcc4f7759" locEndPos="18" locType="sr" hash="65740504" locEndLn="16" goals="0," />
    <StdViol msg="String literal &quot;*                  Timer Menu                    *&quot; is passed to function 'print_string' as pointer to non-const object" ln="16" locFile="/build/../../../../../../../../driver.c" locStartln="16" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="378303775" rule.header="A string literal shall not be modified" tool="c++test" lineHash="378303775" unbViolId="c09f4e94-0057-3af8-8b6d-3fa24393d782" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37a05c9e-593b-3713-8184-3962e2f7f93f" locEndPos="18" locType="sr" hash="65740504" locEndLn="16" goals="0," />
    <StdViol msg="String literal &quot;*                  Timer Menu                    *&quot; is passed to function 'print_string' as pointer to non-const object" ln="16" locFile="/build/../../../../../../../../driver.c" locStartln="16" sev="2" auth="username" locRef="2" rule="AUTOSAR-A2_13_4-a" lnHash="378303775" rule.header="A string literal shall not be modified" tool="c++test" lineHash="378303775" unbViolId="c9f38657-1b4f-323f-a76f-e369f5ab4666" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="973c242f-e889-35e6-b17a-e7a50c75a8bb" locEndPos="18" locType="sr" hash="65740504" locEndLn="16" goals="0," />
    <StdViol msg="String literal &quot;*                  Timer Menu                    *&quot; is passed to function 'print_string' as pointer to non-const object" ln="16" locFile="/build/../../../../../../../../driver.c" locStartln="16" sev="2" auth="username" locRef="2" rule="JSF-151.1" lnHash="378303775" rule.header="A string literal shall not be modified" tool="c++test" lineHash="378303775" unbViolId="f790109d-bff1-35af-be98-4b97eb72bd55" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8a7477f-a408-38f4-99f9-2f5cf1f27360" locEndPos="18" locType="sr" hash="65740504" locEndLn="16" goals="0," />
    <StdViol msg="String literal &quot;*                  Timer Menu                    *&quot; is passed to function 'print_string' as pointer to non-const object" ln="16" locFile="/build/../../../../../../../../driver.c" locStartln="16" sev="2" auth="username" locRef="2" rule="PB-27" lnHash="378303775" rule.header="A string literal shall not be modified" tool="c++test" lineHash="378303775" unbViolId="83334a88-ec51-33dd-af61-d424a2b7e5ac" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e37ecdcc-10c6-3c1a-bce6-3df247c0426c" locEndPos="18" locType="sr" hash="65740504" locEndLn="16" goals="0," />
    <StdViol msg="String literal &quot;*                  Timer Menu                    *&quot; is passed to function 'print_string' as pointer to non-const object" ln="16" locFile="/build/../../../../../../../../driver.c" locStartln="16" sev="3" auth="username" locRef="2" rule="CERT_C-STR05-a" lnHash="378303775" rule.header="A string literal shall not be modified" tool="c++test" lineHash="378303775" unbViolId="89c177a8-41c8-37e0-975e-d6a3ce24242a" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e85b9c8c-ab84-31e0-b6ed-075fee78b09f" locEndPos="18" locType="sr" hash="65740504" locEndLn="16" goals="0," />
    <StdViol msg="String literal &quot;*                  Timer Menu                    *&quot; is passed to function 'print_string' as pointer to non-const object" ln="16" locFile="/build/../../../../../../../../driver.c" locStartln="16" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-7_4" lnHash="378303775" rule.header="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" tool="c++test" lineHash="378303775" unbViolId="cdcd4d7f-6f38-3849-9388-6176a1bfd81e" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="213ee757-7189-31af-805a-24ea3aaa86ac" locEndPos="18" locType="sr" hash="65740504" locEndLn="16" goals="0," />
    <StdViol msg="String literal &quot;*                  Timer Menu                    *&quot; is passed to function 'print_string' as pointer to non-const object" ln="16" locFile="/build/../../../../../../../../driver.c" locStartln="16" sev="2" auth="username" locRef="2" rule="CERT_C-STR30-a" lnHash="378303775" rule.header="A string literal shall not be modified" tool="c++test" lineHash="378303775" unbViolId="766be921-bba4-34d8-943b-9fab77317b35" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2838953-e9a0-350b-bdd7-56a7f4749f0f" locEndPos="18" locType="sr" hash="65740504" locEndLn="16" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="17" locFile="/build/../../../../../../../../driver.c" locStartln="17" sev="3" auth="username" locRef="2" rule="CODSTA-122_a" lnHash="461595667" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="461595667" unbViolId="dc148275-b927-30e3-baaf-ce20fe5017e2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d15cb9e-ca9a-3e9e-95e7-4d2b7c33af7c" locEndPos="5" locType="sr" hash="65740504" locEndLn="17" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="17" locFile="/build/../../../../../../../../driver.c" locStartln="17" sev="1" auth="username" locRef="2" rule="CERT_C-ERR33-a" lnHash="461595667" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="461595667" unbViolId="cd5d83e5-f27e-3b12-aeb7-431b3d65fe63" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f57f3687-8673-3509-8822-259f70faaaa1" locEndPos="5" locType="sr" hash="65740504" locEndLn="17" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="17" locFile="/build/../../../../../../../../driver.c" locStartln="17" sev="1" auth="username" locRef="2" rule="CERT_C-POS54-a" lnHash="461595667" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="461595667" unbViolId="f29490d1-b602-38b9-b346-9cf1770ef873" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b520723b-d725-3472-9feb-dc00f3eacc8d" locEndPos="5" locType="sr" hash="65740504" locEndLn="17" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="17" locFile="/build/../../../../../../../../driver.c" locStartln="17" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="461595667" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="461595667" unbViolId="4c30964d-8a12-3588-a534-0689bc495914" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54b17331-dfcd-3580-95ad-bfcc44779b12" locEndPos="5" locType="sr" hash="65740504" locEndLn="17" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="17" locFile="/build/../../../../../../../../driver.c" locStartln="17" sev="3" auth="username" locRef="2" rule="CERT_C-EXP12-a" lnHash="461595667" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="461595667" unbViolId="73243a72-6b9a-3787-9d00-f0d4b512a26a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c83be18-6f8d-33ed-997b-16a537ef9d8d" locEndPos="5" locType="sr" hash="65740504" locEndLn="17" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="17" locFile="/build/../../../../../../../../driver.c" locStartln="17" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-17_7_a" lnHash="461595667" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="461595667" unbViolId="60d850a3-5f67-3da5-b4a9-d00ca1ba00b2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e011e5b-48c2-3be4-a1d9-aea71e1ab418" locEndPos="5" locType="sr" hash="65740504" locEndLn="17" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="17" locFile="/build/../../../../../../../../driver.c" locStartln="17" sev="3" auth="username" locRef="2" rule="MISRA2004-16_10" lnHash="461595667" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="461595667" unbViolId="53346c36-e2cf-363c-bc7c-5de778c3e0b7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="656493e3-f892-3fd1-8e28-7650ca01e51f" locEndPos="5" locType="sr" hash="65740504" locEndLn="17" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="17" locFile="/build/../../../../../../../../driver.c" locStartln="17" sev="2" auth="username" locRef="2" rule="AUTOSAR-M0_3_2-a" lnHash="461595667" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="461595667" unbViolId="fce2c265-87b9-3668-9c46-2c2c3ebd6a0d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9cdf8a6-d599-35d1-aee8-2527ea0f4bea" locEndPos="5" locType="sr" hash="65740504" locEndLn="17" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="17" locFile="/build/../../../../../../../../driver.c" locStartln="17" sev="2" auth="username" locRef="2" rule="MISRA2008-0_3_2" lnHash="461595667" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="461595667" unbViolId="a8abf8b4-6c23-3642-b8b5-e30647bf829f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64979d49-01b9-360e-8de3-803b50a62809" locEndPos="5" locType="sr" hash="65740504" locEndLn="17" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="17" locFile="/build/../../../../../../../../driver.c" locStartln="17" sev="3" auth="username" locRef="2" rule="JSF-115" lnHash="461595667" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="461595667" unbViolId="39f69646-8192-3376-b303-fa980c480558" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ddfd6cae-b580-3cd9-a87c-551c8d4854b1" locEndPos="5" locType="sr" hash="65740504" locEndLn="17" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: * -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ *" ln="17" locFile="/build/../../../../../../../../driver.c" locStartln="17" sev="5" auth="username" locRef="2" rule="CWE-798-a" lnHash="461595667" rule.header="Do not hard code string literals" tool="c++test" lineHash="461595667" unbViolId="e9f25372-438d-32e4-9a94-8d2c8654ea4b" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48eed2d0-4c27-363f-b466-c5bef995bb24" locEndPos="18" locType="sr" hash="65740504" locEndLn="17" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: * -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ *" ln="17" locFile="/build/../../../../../../../../driver.c" locStartln="17" sev="5" auth="username" locRef="2" rule="CODSTA-203" lnHash="461595667" rule.header="Do not hard code string literals" tool="c++test" lineHash="461595667" unbViolId="a5548c5b-1601-3ca9-be7d-56b93516e171" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c410ad7-0203-312d-bdc2-c2ae36b991ea" locEndPos="18" locType="sr" hash="65740504" locEndLn="17" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: * -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ *" ln="17" locFile="/build/../../../../../../../../driver.c" locStartln="17" sev="1" auth="username" locRef="2" rule="APSC_DV-003110-a" lnHash="461595667" rule.header="Do not hard code string literals" tool="c++test" lineHash="461595667" unbViolId="6019bb24-7dc8-39dc-addf-3c23adf874c4" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18175f1e-a2a0-3503-bc8a-ef3b678f8726" locEndPos="18" locType="sr" hash="65740504" locEndLn="17" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: * -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ *" ln="17" locFile="/build/../../../../../../../../driver.c" locStartln="17" sev="1" auth="username" locRef="2" rule="CERT_C-MSC41-a" lnHash="461595667" rule.header="Do not hard code string literals" tool="c++test" lineHash="461595667" unbViolId="96c61481-4018-3e66-86e4-9172883442d1" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c277ddf4-6482-31d3-8c0b-419f87539cbd" locEndPos="18" locType="sr" hash="65740504" locEndLn="17" goals="0," />
    <StdViol msg="String literal &quot;* -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ *&quot; is passed to function 'print_string' as pointer to non-const object" ln="17" locFile="/build/../../../../../../../../driver.c" locStartln="17" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="461595667" rule.header="A string literal shall not be modified" tool="c++test" lineHash="461595667" unbViolId="76849c5b-fd97-3da5-a1e3-7126649b31e9" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c4f2ed0-95b2-3648-beae-e80930b5216d" locEndPos="18" locType="sr" hash="65740504" locEndLn="17" goals="0," />
    <StdViol msg="String literal &quot;* -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ *&quot; is passed to function 'print_string' as pointer to non-const object" ln="17" locFile="/build/../../../../../../../../driver.c" locStartln="17" sev="2" auth="username" locRef="2" rule="AUTOSAR-A2_13_4-a" lnHash="461595667" rule.header="A string literal shall not be modified" tool="c++test" lineHash="461595667" unbViolId="f6745afe-dc0a-3c33-91cb-6ba77cb6ac54" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7e1b14f-5c28-3b2c-a91f-9d5e28790b9c" locEndPos="18" locType="sr" hash="65740504" locEndLn="17" goals="0," />
    <StdViol msg="String literal &quot;* -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ *&quot; is passed to function 'print_string' as pointer to non-const object" ln="17" locFile="/build/../../../../../../../../driver.c" locStartln="17" sev="2" auth="username" locRef="2" rule="JSF-151.1" lnHash="461595667" rule.header="A string literal shall not be modified" tool="c++test" lineHash="461595667" unbViolId="1371b5c3-abb4-3bc9-a5c1-b47b49adc3b1" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0317441d-128f-3ea4-a109-7040a51b0fdd" locEndPos="18" locType="sr" hash="65740504" locEndLn="17" goals="0," />
    <StdViol msg="String literal &quot;* -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ *&quot; is passed to function 'print_string' as pointer to non-const object" ln="17" locFile="/build/../../../../../../../../driver.c" locStartln="17" sev="2" auth="username" locRef="2" rule="PB-27" lnHash="461595667" rule.header="A string literal shall not be modified" tool="c++test" lineHash="461595667" unbViolId="c39a7035-1c36-3762-8cc6-f0489e9d149f" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="489bf157-83b1-3b43-a938-0f8c4814147c" locEndPos="18" locType="sr" hash="65740504" locEndLn="17" goals="0," />
    <StdViol msg="String literal &quot;* -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ *&quot; is passed to function 'print_string' as pointer to non-const object" ln="17" locFile="/build/../../../../../../../../driver.c" locStartln="17" sev="3" auth="username" locRef="2" rule="CERT_C-STR05-a" lnHash="461595667" rule.header="A string literal shall not be modified" tool="c++test" lineHash="461595667" unbViolId="4d080bcf-986d-3490-bf57-917dd58b7c65" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc0fc77f-b47e-38b0-af07-4b9e1889896f" locEndPos="18" locType="sr" hash="65740504" locEndLn="17" goals="0," />
    <StdViol msg="String literal &quot;* -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ *&quot; is passed to function 'print_string' as pointer to non-const object" ln="17" locFile="/build/../../../../../../../../driver.c" locStartln="17" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-7_4" lnHash="461595667" rule.header="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" tool="c++test" lineHash="461595667" unbViolId="9c94f81e-524b-3b64-b5f6-ab1ded432124" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c34b3b5-27e0-3405-813f-ad613a45d1b1" locEndPos="18" locType="sr" hash="65740504" locEndLn="17" goals="0," />
    <StdViol msg="String literal &quot;* -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ *&quot; is passed to function 'print_string' as pointer to non-const object" ln="17" locFile="/build/../../../../../../../../driver.c" locStartln="17" sev="2" auth="username" locRef="2" rule="CERT_C-STR30-a" lnHash="461595667" rule.header="A string literal shall not be modified" tool="c++test" lineHash="461595667" unbViolId="414aa309-9ae1-32d7-bdc7-d7171a00ccb1" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69b0aa7e-fe65-3dc6-88e2-3d2df946d23a" locEndPos="18" locType="sr" hash="65740504" locEndLn="17" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="18" locFile="/build/../../../../../../../../driver.c" locStartln="18" sev="3" auth="username" locRef="2" rule="CODSTA-122_a" lnHash="-1874811899" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1874811899" unbViolId="1639d6ce-cb4c-3f66-a943-bf3ce9b04d47" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2408f887-4978-3081-82ef-1d04586834be" locEndPos="5" locType="sr" hash="65740504" locEndLn="18" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="18" locFile="/build/../../../../../../../../driver.c" locStartln="18" sev="1" auth="username" locRef="2" rule="CERT_C-ERR33-a" lnHash="-1874811899" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1874811899" unbViolId="c6cd64b7-93b2-33f5-9c88-6e2cdf095933" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8555ad39-e8e8-3f39-8e80-c05b970c1283" locEndPos="5" locType="sr" hash="65740504" locEndLn="18" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="18" locFile="/build/../../../../../../../../driver.c" locStartln="18" sev="1" auth="username" locRef="2" rule="CERT_C-POS54-a" lnHash="-1874811899" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1874811899" unbViolId="d41ab353-3bde-3d2b-9d5d-73d55052bd64" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="33e613aa-dc1b-3814-b81a-f870baf0ad07" locEndPos="5" locType="sr" hash="65740504" locEndLn="18" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="18" locFile="/build/../../../../../../../../driver.c" locStartln="18" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="-1874811899" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1874811899" unbViolId="35c76463-9e13-3d71-8086-b9cb339ceb09" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c98b80b-dfa5-3246-b74e-2df0922bdd55" locEndPos="5" locType="sr" hash="65740504" locEndLn="18" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="18" locFile="/build/../../../../../../../../driver.c" locStartln="18" sev="3" auth="username" locRef="2" rule="CERT_C-EXP12-a" lnHash="-1874811899" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1874811899" unbViolId="913687a9-d94e-325d-9c94-2f5947fe77c4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a4ae69ba-765b-38af-9325-7a27215b5fe5" locEndPos="5" locType="sr" hash="65740504" locEndLn="18" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="18" locFile="/build/../../../../../../../../driver.c" locStartln="18" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-17_7_a" lnHash="-1874811899" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1874811899" unbViolId="9136c87a-7248-34cb-be40-f2e5415343ea" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6628bb2-1c4c-38e9-b929-e58dd54b8e0e" locEndPos="5" locType="sr" hash="65740504" locEndLn="18" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="18" locFile="/build/../../../../../../../../driver.c" locStartln="18" sev="3" auth="username" locRef="2" rule="MISRA2004-16_10" lnHash="-1874811899" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1874811899" unbViolId="c42a69c9-4526-37f8-9780-1e723280a841" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f6442339-8f37-31b4-9f0e-2a6bd14b5c9e" locEndPos="5" locType="sr" hash="65740504" locEndLn="18" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="18" locFile="/build/../../../../../../../../driver.c" locStartln="18" sev="2" auth="username" locRef="2" rule="AUTOSAR-M0_3_2-a" lnHash="-1874811899" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1874811899" unbViolId="e356690b-2db9-3ebd-9c37-47c71d991a57" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13fb0a89-a8fe-34f7-ba40-ae6558bc4c7f" locEndPos="5" locType="sr" hash="65740504" locEndLn="18" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="18" locFile="/build/../../../../../../../../driver.c" locStartln="18" sev="2" auth="username" locRef="2" rule="MISRA2008-0_3_2" lnHash="-1874811899" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1874811899" unbViolId="3c9ec4fc-3ecc-36f7-bbca-8a7728be6a63" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f58d20e1-3ec8-352f-b11f-f652f9a100b8" locEndPos="5" locType="sr" hash="65740504" locEndLn="18" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="18" locFile="/build/../../../../../../../../driver.c" locStartln="18" sev="3" auth="username" locRef="2" rule="JSF-115" lnHash="-1874811899" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-1874811899" unbViolId="c6b308e5-7d9d-3741-883e-9abb729f6bdb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="983b6530-794c-3bb8-a10f-3cda3cd0f5df" locEndPos="5" locType="sr" hash="65740504" locEndLn="18" goals="0," />
    <DupViol msg="Duplicated string: '&quot;*                                                *\n&quot;'" ln="18" locFile="/build/../../../../../../../../driver.c" locStartln="18" sev="3" auth="username" locRef="2" rule="CDD-DUPS" lnHash="-1874811899" rule.header="Avoid string literal duplication" tool="c++test" lineHash="-1874811899" unbViolId="59d028c8-0252-3206-920b-1a9e416a6257" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="4112fe66-d850-340c-b717-043deb328932" locEndPos="71" locType="sr" urgent="true" hash="65740504" locEndLn="18" goals="1,">
      <ElDescList>
        <ElDesc lineHash="-1874811899" locType="sr" srcRnghash="65740504" locRef="2" srcRngFile="/build/../../../../../../../../driver.c" ln="18" srcRngStartPos="17" srcRngEndPos="71" srcRngStartln="18" srcRngEndLn="18" desc="[Line 18] Duplicated string in file 'driver.c'" rngLn="18" />
        <ElDesc lineHash="-1874811899" locType="sr" srcRnghash="65740504" locRef="2" srcRngFile="/build/../../../../../../../../driver.c" ln="23" srcRngStartPos="17" srcRngEndPos="71" srcRngStartln="23" srcRngEndLn="23" desc="[Line 23] Duplicated string in file 'driver.c'" rngLn="23" />
        <ElDesc lineHash="-1874811899" locType="sr" srcRnghash="65740504" locRef="2" srcRngFile="/build/../../../../../../../../driver.c" ln="25" srcRngStartPos="17" srcRngEndPos="71" srcRngStartln="25" srcRngEndLn="25" desc="[Line 25] Duplicated string in file 'driver.c'" rngLn="25" />
      </ElDescList>
    </DupViol>
    <StdViol msg="The string literal is embedded directly in the code: *                                                *" ln="18" locFile="/build/../../../../../../../../driver.c" locStartln="18" sev="5" auth="username" locRef="2" rule="CWE-798-a" lnHash="-1874811899" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1874811899" unbViolId="d9e1965a-f5b6-370a-9288-a2db35f7264d" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eccd2981-e55b-3f2d-a615-834be2ed41a9" locEndPos="18" locType="sr" hash="65740504" locEndLn="18" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: *                                                *" ln="18" locFile="/build/../../../../../../../../driver.c" locStartln="18" sev="5" auth="username" locRef="2" rule="CODSTA-203" lnHash="-1874811899" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1874811899" unbViolId="ebfd85a2-cec8-3023-bcd4-b09ba6a493e1" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="72f90bb3-fe6e-3c48-8b56-b482bb8e2520" locEndPos="18" locType="sr" hash="65740504" locEndLn="18" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: *                                                *" ln="18" locFile="/build/../../../../../../../../driver.c" locStartln="18" sev="1" auth="username" locRef="2" rule="APSC_DV-003110-a" lnHash="-1874811899" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1874811899" unbViolId="7897850d-0d8b-39a0-8ec1-030b24431a91" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4ae2318-8604-3c9f-a133-0fd6437e525e" locEndPos="18" locType="sr" hash="65740504" locEndLn="18" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: *                                                *" ln="18" locFile="/build/../../../../../../../../driver.c" locStartln="18" sev="1" auth="username" locRef="2" rule="CERT_C-MSC41-a" lnHash="-1874811899" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1874811899" unbViolId="07954c0c-8239-3797-8d64-ba82f945b8d9" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="30100456-e3ed-384e-89b4-de4308c6994d" locEndPos="18" locType="sr" hash="65740504" locEndLn="18" goals="0," />
    <StdViol msg="String literal &quot;*                                                *&quot; is passed to function 'print_string' as pointer to non-const object" ln="18" locFile="/build/../../../../../../../../driver.c" locStartln="18" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="-1874811899" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1874811899" unbViolId="7f762766-7769-3efb-b696-0d0d8edf16d9" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ca9fe3a-5739-34d5-ba32-4f26047e0aa4" locEndPos="18" locType="sr" hash="65740504" locEndLn="18" goals="0," />
    <StdViol msg="String literal &quot;*                                                *&quot; is passed to function 'print_string' as pointer to non-const object" ln="18" locFile="/build/../../../../../../../../driver.c" locStartln="18" sev="2" auth="username" locRef="2" rule="AUTOSAR-A2_13_4-a" lnHash="-1874811899" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1874811899" unbViolId="a109d145-6f15-377d-ad18-0487d966a03b" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54a3d795-4700-3907-9539-f47d8577eddf" locEndPos="18" locType="sr" hash="65740504" locEndLn="18" goals="0," />
    <StdViol msg="String literal &quot;*                                                *&quot; is passed to function 'print_string' as pointer to non-const object" ln="18" locFile="/build/../../../../../../../../driver.c" locStartln="18" sev="2" auth="username" locRef="2" rule="JSF-151.1" lnHash="-1874811899" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1874811899" unbViolId="638f7020-3c93-3200-9474-788e41c56848" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a14defe-d795-3a25-a4c6-f0c384984427" locEndPos="18" locType="sr" hash="65740504" locEndLn="18" goals="0," />
    <StdViol msg="String literal &quot;*                                                *&quot; is passed to function 'print_string' as pointer to non-const object" ln="18" locFile="/build/../../../../../../../../driver.c" locStartln="18" sev="2" auth="username" locRef="2" rule="PB-27" lnHash="-1874811899" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1874811899" unbViolId="5033f773-acfa-3f16-89f1-8389b36e8ee4" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d71bdc5-bfb7-377c-a238-c50cbc7510da" locEndPos="18" locType="sr" hash="65740504" locEndLn="18" goals="0," />
    <StdViol msg="String literal &quot;*                                                *&quot; is passed to function 'print_string' as pointer to non-const object" ln="18" locFile="/build/../../../../../../../../driver.c" locStartln="18" sev="3" auth="username" locRef="2" rule="CERT_C-STR05-a" lnHash="-1874811899" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1874811899" unbViolId="78f3afbf-0b5d-3720-ad0a-7127e9bf60ea" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4d5ab66-e5dd-34cf-a0c6-618cbfee7e44" locEndPos="18" locType="sr" hash="65740504" locEndLn="18" goals="0," />
    <StdViol msg="String literal &quot;*                                                *&quot; is passed to function 'print_string' as pointer to non-const object" ln="18" locFile="/build/../../../../../../../../driver.c" locStartln="18" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-7_4" lnHash="-1874811899" rule.header="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" tool="c++test" lineHash="-1874811899" unbViolId="a454f6ed-c7ab-3721-a8ae-f89fa8b74b27" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="34334154-26c0-3e40-8010-a0f4311a050a" locEndPos="18" locType="sr" hash="65740504" locEndLn="18" goals="0," />
    <StdViol msg="String literal &quot;*                                                *&quot; is passed to function 'print_string' as pointer to non-const object" ln="18" locFile="/build/../../../../../../../../driver.c" locStartln="18" sev="2" auth="username" locRef="2" rule="CERT_C-STR30-a" lnHash="-1874811899" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1874811899" unbViolId="c48e0247-d4bc-34e5-9b8d-60479e131af9" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c34bddc-3e5d-3e81-a867-b09bce8585d7" locEndPos="18" locType="sr" hash="65740504" locEndLn="18" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="19" locFile="/build/../../../../../../../../driver.c" locStartln="19" sev="3" auth="username" locRef="2" rule="CODSTA-122_a" lnHash="1674314502" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1674314502" unbViolId="ef924444-c23b-3f43-a6c4-456747d63529" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b95c911-366d-391f-b3d6-782c2a70b180" locEndPos="5" locType="sr" hash="65740504" locEndLn="19" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="19" locFile="/build/../../../../../../../../driver.c" locStartln="19" sev="1" auth="username" locRef="2" rule="CERT_C-ERR33-a" lnHash="1674314502" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1674314502" unbViolId="cb81fe03-6e64-3972-8f9d-d66748d0f3df" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94ca1600-02d9-33fb-8867-3e6c7e273d7b" locEndPos="5" locType="sr" hash="65740504" locEndLn="19" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="19" locFile="/build/../../../../../../../../driver.c" locStartln="19" sev="1" auth="username" locRef="2" rule="CERT_C-POS54-a" lnHash="1674314502" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1674314502" unbViolId="a5d7771d-1295-33b7-8a9f-9e3d34bc03b0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="80735090-0d42-3477-bb16-dc84926f028f" locEndPos="5" locType="sr" hash="65740504" locEndLn="19" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="19" locFile="/build/../../../../../../../../driver.c" locStartln="19" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="1674314502" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1674314502" unbViolId="7a2a990f-4492-3765-b486-54bc9c84fa25" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd5f6de9-552e-3a1c-84ce-4a9cb0e0e673" locEndPos="5" locType="sr" hash="65740504" locEndLn="19" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="19" locFile="/build/../../../../../../../../driver.c" locStartln="19" sev="3" auth="username" locRef="2" rule="CERT_C-EXP12-a" lnHash="1674314502" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1674314502" unbViolId="aa75d234-e013-3498-8d41-18467236a46c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3accaa8-5bc6-358f-9b98-4c9a0c2840a3" locEndPos="5" locType="sr" hash="65740504" locEndLn="19" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="19" locFile="/build/../../../../../../../../driver.c" locStartln="19" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-17_7_a" lnHash="1674314502" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1674314502" unbViolId="6316b637-7cc0-3350-be99-0c2cef0d7187" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77101a20-5e44-3245-9f3d-580a1d6996e3" locEndPos="5" locType="sr" hash="65740504" locEndLn="19" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="19" locFile="/build/../../../../../../../../driver.c" locStartln="19" sev="3" auth="username" locRef="2" rule="MISRA2004-16_10" lnHash="1674314502" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="1674314502" unbViolId="0e1aae20-4782-3162-b50e-017970fd73cc" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d520dd58-4a72-3bd6-85b6-e99baa1bc496" locEndPos="5" locType="sr" hash="65740504" locEndLn="19" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="19" locFile="/build/../../../../../../../../driver.c" locStartln="19" sev="2" auth="username" locRef="2" rule="AUTOSAR-M0_3_2-a" lnHash="1674314502" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="1674314502" unbViolId="0aa63fb6-a2bf-31f1-a0fb-868dcec5dfcc" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3abcac45-0f81-3963-aef8-a7f964ad5852" locEndPos="5" locType="sr" hash="65740504" locEndLn="19" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="19" locFile="/build/../../../../../../../../driver.c" locStartln="19" sev="2" auth="username" locRef="2" rule="MISRA2008-0_3_2" lnHash="1674314502" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="1674314502" unbViolId="23b72e7a-eac5-3189-9cb3-50de57762b74" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7873f3b9-55c4-3fbe-a7f9-d430111528fe" locEndPos="5" locType="sr" hash="65740504" locEndLn="19" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="19" locFile="/build/../../../../../../../../driver.c" locStartln="19" sev="3" auth="username" locRef="2" rule="JSF-115" lnHash="1674314502" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="1674314502" unbViolId="72c81c52-18f6-3ee0-9157-3a334907bac4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eaaee131-fd0d-3cc5-8a48-0497c40326af" locEndPos="5" locType="sr" hash="65740504" locEndLn="19" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: * 1) Add a timer                                 *" ln="19" locFile="/build/../../../../../../../../driver.c" locStartln="19" sev="5" auth="username" locRef="2" rule="CWE-798-a" lnHash="1674314502" rule.header="Do not hard code string literals" tool="c++test" lineHash="1674314502" unbViolId="79bdc9f8-fea7-33e4-ba5e-bffc410475ad" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ab642e2-17d0-3712-ba4a-5bc9669d0109" locEndPos="18" locType="sr" hash="65740504" locEndLn="19" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: * 1) Add a timer                                 *" ln="19" locFile="/build/../../../../../../../../driver.c" locStartln="19" sev="5" auth="username" locRef="2" rule="CODSTA-203" lnHash="1674314502" rule.header="Do not hard code string literals" tool="c++test" lineHash="1674314502" unbViolId="fe74e181-4d45-30c0-b18c-c1afa16cc10b" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51174017-b4b3-3741-86b7-ee2c46851a52" locEndPos="18" locType="sr" hash="65740504" locEndLn="19" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: * 1) Add a timer                                 *" ln="19" locFile="/build/../../../../../../../../driver.c" locStartln="19" sev="1" auth="username" locRef="2" rule="APSC_DV-003110-a" lnHash="1674314502" rule.header="Do not hard code string literals" tool="c++test" lineHash="1674314502" unbViolId="00363860-ec42-3a63-a16e-e7c59e96ad80" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4edab30b-e36c-343b-ae36-f43a2b4e21af" locEndPos="18" locType="sr" hash="65740504" locEndLn="19" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: * 1) Add a timer                                 *" ln="19" locFile="/build/../../../../../../../../driver.c" locStartln="19" sev="1" auth="username" locRef="2" rule="CERT_C-MSC41-a" lnHash="1674314502" rule.header="Do not hard code string literals" tool="c++test" lineHash="1674314502" unbViolId="c225ecc2-fa49-3388-a3a0-24017d500342" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2ae692c-91ee-377d-9dc4-91835196052e" locEndPos="18" locType="sr" hash="65740504" locEndLn="19" goals="0," />
    <StdViol msg="String literal &quot;* 1) Add a timer                                 *&quot; is passed to function 'print_string' as pointer to non-const object" ln="19" locFile="/build/../../../../../../../../driver.c" locStartln="19" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="1674314502" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1674314502" unbViolId="abf8a5a5-3858-3706-baca-2def57fde6c3" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d6c37a57-8508-33af-8ae8-60fc8195b6c8" locEndPos="18" locType="sr" hash="65740504" locEndLn="19" goals="0," />
    <StdViol msg="String literal &quot;* 1) Add a timer                                 *&quot; is passed to function 'print_string' as pointer to non-const object" ln="19" locFile="/build/../../../../../../../../driver.c" locStartln="19" sev="2" auth="username" locRef="2" rule="AUTOSAR-A2_13_4-a" lnHash="1674314502" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1674314502" unbViolId="5583ad92-9c5a-358f-a234-93dec60cc528" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="240727c3-10fd-3501-a5c0-6714cf2786ae" locEndPos="18" locType="sr" hash="65740504" locEndLn="19" goals="0," />
    <StdViol msg="String literal &quot;* 1) Add a timer                                 *&quot; is passed to function 'print_string' as pointer to non-const object" ln="19" locFile="/build/../../../../../../../../driver.c" locStartln="19" sev="2" auth="username" locRef="2" rule="JSF-151.1" lnHash="1674314502" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1674314502" unbViolId="3a0dd1c6-8797-38f8-9aa1-8b173dc13cab" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4112ab6-4f6c-3f62-8637-b35631567a80" locEndPos="18" locType="sr" hash="65740504" locEndLn="19" goals="0," />
    <StdViol msg="String literal &quot;* 1) Add a timer                                 *&quot; is passed to function 'print_string' as pointer to non-const object" ln="19" locFile="/build/../../../../../../../../driver.c" locStartln="19" sev="2" auth="username" locRef="2" rule="PB-27" lnHash="1674314502" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1674314502" unbViolId="f06c486e-2032-340a-b048-396799f82988" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="45936e6f-2ddb-3af0-81ea-ffebd9ef947c" locEndPos="18" locType="sr" hash="65740504" locEndLn="19" goals="0," />
    <StdViol msg="String literal &quot;* 1) Add a timer                                 *&quot; is passed to function 'print_string' as pointer to non-const object" ln="19" locFile="/build/../../../../../../../../driver.c" locStartln="19" sev="3" auth="username" locRef="2" rule="CERT_C-STR05-a" lnHash="1674314502" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1674314502" unbViolId="77ea6436-87e6-3021-a06e-4bc28dba3bdc" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c1c9e04f-e640-3da4-ac20-ffcb8cf732db" locEndPos="18" locType="sr" hash="65740504" locEndLn="19" goals="0," />
    <StdViol msg="String literal &quot;* 1) Add a timer                                 *&quot; is passed to function 'print_string' as pointer to non-const object" ln="19" locFile="/build/../../../../../../../../driver.c" locStartln="19" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-7_4" lnHash="1674314502" rule.header="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" tool="c++test" lineHash="1674314502" unbViolId="a60c9c94-649c-3d0c-af54-2a824f6deab8" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="89839fdc-aa9c-3e8b-8820-669672532d86" locEndPos="18" locType="sr" hash="65740504" locEndLn="19" goals="0," />
    <StdViol msg="String literal &quot;* 1) Add a timer                                 *&quot; is passed to function 'print_string' as pointer to non-const object" ln="19" locFile="/build/../../../../../../../../driver.c" locStartln="19" sev="2" auth="username" locRef="2" rule="CERT_C-STR30-a" lnHash="1674314502" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1674314502" unbViolId="af2c07e1-ad49-39ab-ab46-60d426142ce9" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d7a7833a-7353-3a4e-9521-66800b654c5d" locEndPos="18" locType="sr" hash="65740504" locEndLn="19" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="20" locFile="/build/../../../../../../../../driver.c" locStartln="20" sev="3" auth="username" locRef="2" rule="CODSTA-122_a" lnHash="-94421320" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-94421320" unbViolId="d2ecd348-1741-3d22-bca6-74574a7e6abb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06aa1722-1628-3a39-9dc5-708e267d6cce" locEndPos="5" locType="sr" hash="65740504" locEndLn="20" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="20" locFile="/build/../../../../../../../../driver.c" locStartln="20" sev="1" auth="username" locRef="2" rule="CERT_C-ERR33-a" lnHash="-94421320" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-94421320" unbViolId="205b950d-47ea-30da-bbc1-138c991b33d5" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4fc77b4a-b12d-3721-b69b-a36365f8c275" locEndPos="5" locType="sr" hash="65740504" locEndLn="20" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="20" locFile="/build/../../../../../../../../driver.c" locStartln="20" sev="1" auth="username" locRef="2" rule="CERT_C-POS54-a" lnHash="-94421320" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-94421320" unbViolId="36bf9bbb-d75e-3703-a842-9dc0a76fccc7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc850720-e916-3bec-a059-07d6e355f198" locEndPos="5" locType="sr" hash="65740504" locEndLn="20" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="20" locFile="/build/../../../../../../../../driver.c" locStartln="20" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="-94421320" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-94421320" unbViolId="71432018-62f5-3f2e-8001-aa7cc347ed3d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d46c2717-57ae-3e4b-803b-79a1f2f9384b" locEndPos="5" locType="sr" hash="65740504" locEndLn="20" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="20" locFile="/build/../../../../../../../../driver.c" locStartln="20" sev="3" auth="username" locRef="2" rule="CERT_C-EXP12-a" lnHash="-94421320" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-94421320" unbViolId="6c6243b4-8b12-30d0-8b54-48a800b755d9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d822bf1d-4382-3846-bef7-6da0d59abacf" locEndPos="5" locType="sr" hash="65740504" locEndLn="20" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="20" locFile="/build/../../../../../../../../driver.c" locStartln="20" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-17_7_a" lnHash="-94421320" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-94421320" unbViolId="7eb9ea4b-6309-30a9-82d7-9b48ec23d92f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5416dfab-8bf0-3e4c-a777-faead1a442d9" locEndPos="5" locType="sr" hash="65740504" locEndLn="20" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="20" locFile="/build/../../../../../../../../driver.c" locStartln="20" sev="3" auth="username" locRef="2" rule="MISRA2004-16_10" lnHash="-94421320" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-94421320" unbViolId="57ae7af5-ce33-3855-84fb-569dadb64bf8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="848be2ee-588d-3b94-8f37-3bf696fc91c5" locEndPos="5" locType="sr" hash="65740504" locEndLn="20" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="20" locFile="/build/../../../../../../../../driver.c" locStartln="20" sev="2" auth="username" locRef="2" rule="AUTOSAR-M0_3_2-a" lnHash="-94421320" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-94421320" unbViolId="a98cf74f-e556-3708-bf72-1cfd9e823213" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="004e7f63-08e0-34e9-bf01-678a39c71327" locEndPos="5" locType="sr" hash="65740504" locEndLn="20" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="20" locFile="/build/../../../../../../../../driver.c" locStartln="20" sev="2" auth="username" locRef="2" rule="MISRA2008-0_3_2" lnHash="-94421320" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-94421320" unbViolId="8bf1b4ca-b51c-31b1-b7f0-849a911b2e4d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c40bc7ec-eb5d-313e-8cf1-05fc1993a439" locEndPos="5" locType="sr" hash="65740504" locEndLn="20" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="20" locFile="/build/../../../../../../../../driver.c" locStartln="20" sev="3" auth="username" locRef="2" rule="JSF-115" lnHash="-94421320" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-94421320" unbViolId="3cff97ba-1fd6-3114-998a-9c16bf99370a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d94711c-496b-3edb-a3fb-1b58446014e4" locEndPos="5" locType="sr" hash="65740504" locEndLn="20" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: * 2) Remove a timer                              *" ln="20" locFile="/build/../../../../../../../../driver.c" locStartln="20" sev="5" auth="username" locRef="2" rule="CWE-798-a" lnHash="-94421320" rule.header="Do not hard code string literals" tool="c++test" lineHash="-94421320" unbViolId="6fa9620a-46f1-31cf-b139-455cbb36738d" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0c06ee65-196a-3dcb-94b6-fa70eaf9cddf" locEndPos="18" locType="sr" hash="65740504" locEndLn="20" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: * 2) Remove a timer                              *" ln="20" locFile="/build/../../../../../../../../driver.c" locStartln="20" sev="5" auth="username" locRef="2" rule="CODSTA-203" lnHash="-94421320" rule.header="Do not hard code string literals" tool="c++test" lineHash="-94421320" unbViolId="5b3ae325-7b17-3f81-acd0-3ca0266ec9e9" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c74e8ffe-949f-3dee-9733-e8df21d0dd8a" locEndPos="18" locType="sr" hash="65740504" locEndLn="20" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: * 2) Remove a timer                              *" ln="20" locFile="/build/../../../../../../../../driver.c" locStartln="20" sev="1" auth="username" locRef="2" rule="APSC_DV-003110-a" lnHash="-94421320" rule.header="Do not hard code string literals" tool="c++test" lineHash="-94421320" unbViolId="24dc4125-a744-36d4-84f4-549a049ee893" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f878d85d-78ff-3f35-8b2d-f38d09152663" locEndPos="18" locType="sr" hash="65740504" locEndLn="20" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: * 2) Remove a timer                              *" ln="20" locFile="/build/../../../../../../../../driver.c" locStartln="20" sev="1" auth="username" locRef="2" rule="CERT_C-MSC41-a" lnHash="-94421320" rule.header="Do not hard code string literals" tool="c++test" lineHash="-94421320" unbViolId="ea7a6853-18ca-34cf-adf1-903c98e8e81c" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68b30c72-f43c-349e-8dac-a6fc7838a052" locEndPos="18" locType="sr" hash="65740504" locEndLn="20" goals="0," />
    <StdViol msg="String literal &quot;* 2) Remove a timer                              *&quot; is passed to function 'print_string' as pointer to non-const object" ln="20" locFile="/build/../../../../../../../../driver.c" locStartln="20" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="-94421320" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-94421320" unbViolId="62fef7ab-924d-3397-b0f1-2702800fa836" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ac4d8aa-b38a-36ae-ac46-cd684f0b2ca5" locEndPos="18" locType="sr" hash="65740504" locEndLn="20" goals="0," />
    <StdViol msg="String literal &quot;* 2) Remove a timer                              *&quot; is passed to function 'print_string' as pointer to non-const object" ln="20" locFile="/build/../../../../../../../../driver.c" locStartln="20" sev="2" auth="username" locRef="2" rule="AUTOSAR-A2_13_4-a" lnHash="-94421320" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-94421320" unbViolId="44c81246-cbb6-3cd7-9304-07341ef6f634" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f294a3d-b7d6-30f0-baac-c6dc33fdfe4f" locEndPos="18" locType="sr" hash="65740504" locEndLn="20" goals="0," />
    <StdViol msg="String literal &quot;* 2) Remove a timer                              *&quot; is passed to function 'print_string' as pointer to non-const object" ln="20" locFile="/build/../../../../../../../../driver.c" locStartln="20" sev="2" auth="username" locRef="2" rule="JSF-151.1" lnHash="-94421320" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-94421320" unbViolId="15455965-ff86-394e-a5d9-c62335713819" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="702bc46d-b0a5-34eb-8502-9e84f19e08ab" locEndPos="18" locType="sr" hash="65740504" locEndLn="20" goals="0," />
    <StdViol msg="String literal &quot;* 2) Remove a timer                              *&quot; is passed to function 'print_string' as pointer to non-const object" ln="20" locFile="/build/../../../../../../../../driver.c" locStartln="20" sev="2" auth="username" locRef="2" rule="PB-27" lnHash="-94421320" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-94421320" unbViolId="6c083a2c-7d79-3d78-bc9f-9f0a1a0ab5d9" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92f652ee-54e4-3a2d-a2a8-3795cce8e680" locEndPos="18" locType="sr" hash="65740504" locEndLn="20" goals="0," />
    <StdViol msg="String literal &quot;* 2) Remove a timer                              *&quot; is passed to function 'print_string' as pointer to non-const object" ln="20" locFile="/build/../../../../../../../../driver.c" locStartln="20" sev="3" auth="username" locRef="2" rule="CERT_C-STR05-a" lnHash="-94421320" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-94421320" unbViolId="bd81825d-387c-3099-bc9a-9eae9153989e" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f706a76-2156-3779-a382-a0c3d18057ca" locEndPos="18" locType="sr" hash="65740504" locEndLn="20" goals="0," />
    <StdViol msg="String literal &quot;* 2) Remove a timer                              *&quot; is passed to function 'print_string' as pointer to non-const object" ln="20" locFile="/build/../../../../../../../../driver.c" locStartln="20" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-7_4" lnHash="-94421320" rule.header="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" tool="c++test" lineHash="-94421320" unbViolId="3b47db15-e4b1-3c6c-930f-4f2d3e00d355" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99891a9b-d09f-3a30-8301-84e01c285112" locEndPos="18" locType="sr" hash="65740504" locEndLn="20" goals="0," />
    <StdViol msg="String literal &quot;* 2) Remove a timer                              *&quot; is passed to function 'print_string' as pointer to non-const object" ln="20" locFile="/build/../../../../../../../../driver.c" locStartln="20" sev="2" auth="username" locRef="2" rule="CERT_C-STR30-a" lnHash="-94421320" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-94421320" unbViolId="04490a76-45a1-376e-a8c9-9c3ce955a796" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e9aff8b-1132-394d-9638-440550636efb" locEndPos="18" locType="sr" hash="65740504" locEndLn="20" goals="0," />
    <DupViol msg="Duplicated code: 'print_string(&quot;* 3) List all timers                          ...'" ln="21" locFile="/build/../../../../../../../../driver.c" locStartln="21" sev="3" auth="username" locRef="2" rule="CDD-DUPC" lnHash="834318816" rule.header="Avoid code duplication" tool="c++test" lineHash="834318816" unbViolId="5a35ab11-0b8c-325b-b7cd-526dc9f5d630" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="f3f60a0d-19b9-3c34-a5a7-0ad9519ef59c" locEndPos="73" locType="sr" urgent="true" hash="65740504" locEndLn="21" goals="1,">
      <ElDescList>
        <ElDesc lineHash="834318816" locType="sr" srcRnghash="65740504" locRef="2" srcRngFile="/build/../../../../../../../../driver.c" ln="21" srcRngStartPos="4" srcRngEndPos="73" srcRngStartln="21" srcRngEndLn="21" desc="[Line 21] Duplicated code in file 'driver.c'" rngLn="21" />
        <ElDesc lineHash="420014112" locType="sr" srcRnghash="65740504" locRef="2" srcRngFile="/build/../../../../../../../../driver.c" ln="42" srcRngStartPos="16" srcRngEndPos="63" srcRngStartln="42" srcRngEndLn="42" desc="[Line 42] Duplicated code in file 'driver.c'" rngLn="42" />
        <ElDesc lineHash="1318983287" locType="sr" srcRnghash="65740504" locRef="2" srcRngFile="/build/../../../../../../../../driver.c" ln="44" srcRngStartPos="16" srcRngEndPos="49" srcRngStartln="44" srcRngEndLn="44" desc="[Line 44] Duplicated code in file 'driver.c'" rngLn="44" />
        <ElDesc lineHash="94038296" locType="sr" srcRnghash="65740504" locRef="2" srcRngFile="/build/../../../../../../../../driver.c" ln="63" srcRngStartPos="12" srcRngEndPos="62" srcRngStartln="63" srcRngEndLn="63" desc="[Line 63] Duplicated code in file 'driver.c'" rngLn="63" />
        <ElDesc lineHash="-397800787" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="68" srcRngStartPos="4" srcRngEndPos="60" srcRngStartln="68" srcRngEndLn="68" desc="[Line 68] Duplicated code in file 'timer.c'" rngLn="68" />
        <ElDesc lineHash="-1597326853" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="100" srcRngStartPos="8" srcRngEndPos="64" srcRngStartln="100" srcRngEndLn="100" desc="[Line 100] Duplicated code in file 'timer.c'" rngLn="100" />
        <ElDesc lineHash="1628413856" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="146" srcRngStartPos="4" srcRngEndPos="43" srcRngStartln="146" srcRngEndLn="146" desc="[Line 146] Duplicated code in file 'timer.c'" rngLn="146" />
        <ElDesc lineHash="1760988551" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="147" srcRngStartPos="4" srcRngEndPos="63" srcRngStartln="147" srcRngEndLn="147" desc="[Line 147] Duplicated code in file 'timer.c'" rngLn="147" />
        <ElDesc lineHash="-332149005" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="153" srcRngStartPos="4" srcRngEndPos="25" srcRngStartln="153" srcRngEndLn="153" desc="[Line 153] Duplicated code in file 'timer.c'" rngLn="153" />
      </ElDescList>
    </DupViol>
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="21" locFile="/build/../../../../../../../../driver.c" locStartln="21" sev="3" auth="username" locRef="2" rule="CODSTA-122_a" lnHash="834318816" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="834318816" unbViolId="dd278f97-4a9c-3759-a76e-a7eaf1097224" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa0abf50-3f15-37c5-ab6a-43fbe3172fd5" locEndPos="5" locType="sr" hash="65740504" locEndLn="21" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="21" locFile="/build/../../../../../../../../driver.c" locStartln="21" sev="1" auth="username" locRef="2" rule="CERT_C-ERR33-a" lnHash="834318816" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="834318816" unbViolId="c964a5a3-da2d-3c70-a440-1af42529711f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="410c0701-088e-38ab-92f0-7022b7b11267" locEndPos="5" locType="sr" hash="65740504" locEndLn="21" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="21" locFile="/build/../../../../../../../../driver.c" locStartln="21" sev="1" auth="username" locRef="2" rule="CERT_C-POS54-a" lnHash="834318816" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="834318816" unbViolId="7942f853-5434-3911-8d05-6fe19a0a4755" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ed8b679-d666-37f3-ab5a-bee349e6929c" locEndPos="5" locType="sr" hash="65740504" locEndLn="21" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="21" locFile="/build/../../../../../../../../driver.c" locStartln="21" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="834318816" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="834318816" unbViolId="3d9d3438-41e7-39c7-b5b3-0a20906e0d49" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bee7fde3-0666-377d-a388-dde61e963a93" locEndPos="5" locType="sr" hash="65740504" locEndLn="21" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="21" locFile="/build/../../../../../../../../driver.c" locStartln="21" sev="3" auth="username" locRef="2" rule="CERT_C-EXP12-a" lnHash="834318816" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="834318816" unbViolId="ba09c6ae-4bdd-3a88-94c8-0dd3ab85d4d3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d7595b73-1777-341c-b113-ee765052737f" locEndPos="5" locType="sr" hash="65740504" locEndLn="21" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="21" locFile="/build/../../../../../../../../driver.c" locStartln="21" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-17_7_a" lnHash="834318816" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="834318816" unbViolId="9c5072cd-c1be-379a-b2ce-db5bc934d4d0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5d87c06-266a-3a3c-a945-a10b18815cf7" locEndPos="5" locType="sr" hash="65740504" locEndLn="21" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="21" locFile="/build/../../../../../../../../driver.c" locStartln="21" sev="3" auth="username" locRef="2" rule="MISRA2004-16_10" lnHash="834318816" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="834318816" unbViolId="5d461da9-cdad-35da-b531-fc7fa3e4426c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="29946eea-1f5d-30ed-98dd-7cbf0ba026c1" locEndPos="5" locType="sr" hash="65740504" locEndLn="21" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="21" locFile="/build/../../../../../../../../driver.c" locStartln="21" sev="2" auth="username" locRef="2" rule="AUTOSAR-M0_3_2-a" lnHash="834318816" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="834318816" unbViolId="4723702d-896a-3edb-8c6a-a66911c4e8ea" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54889004-182c-3d30-b04b-95b144ef4fe0" locEndPos="5" locType="sr" hash="65740504" locEndLn="21" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="21" locFile="/build/../../../../../../../../driver.c" locStartln="21" sev="2" auth="username" locRef="2" rule="MISRA2008-0_3_2" lnHash="834318816" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="834318816" unbViolId="5c488d1f-b4d9-3f4f-9c8a-0571eefc6fd2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3cdbde0c-eb36-381d-ab5e-76568087ebf6" locEndPos="5" locType="sr" hash="65740504" locEndLn="21" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="21" locFile="/build/../../../../../../../../driver.c" locStartln="21" sev="3" auth="username" locRef="2" rule="JSF-115" lnHash="834318816" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="834318816" unbViolId="cfed4702-e647-33c2-8900-fd8ffc7999df" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e000e1ca-5369-3067-8ddd-f0b69662ec42" locEndPos="5" locType="sr" hash="65740504" locEndLn="21" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: * 3) List all timers                             *" ln="21" locFile="/build/../../../../../../../../driver.c" locStartln="21" sev="5" auth="username" locRef="2" rule="CWE-798-a" lnHash="834318816" rule.header="Do not hard code string literals" tool="c++test" lineHash="834318816" unbViolId="f44f0753-1fd2-30f7-9046-dbd6917aed99" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="01a0c1c3-8fb4-337e-bf71-dd5fdd7e5693" locEndPos="18" locType="sr" hash="65740504" locEndLn="21" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: * 3) List all timers                             *" ln="21" locFile="/build/../../../../../../../../driver.c" locStartln="21" sev="5" auth="username" locRef="2" rule="CODSTA-203" lnHash="834318816" rule.header="Do not hard code string literals" tool="c++test" lineHash="834318816" unbViolId="4d3e1f29-6f92-37df-a191-633e9992db84" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc437cfc-0143-357b-aa8d-0ae395359db9" locEndPos="18" locType="sr" hash="65740504" locEndLn="21" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: * 3) List all timers                             *" ln="21" locFile="/build/../../../../../../../../driver.c" locStartln="21" sev="1" auth="username" locRef="2" rule="APSC_DV-003110-a" lnHash="834318816" rule.header="Do not hard code string literals" tool="c++test" lineHash="834318816" unbViolId="405efd33-3e1e-3412-9c21-ed8baf55bad4" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12a485d3-3ce8-3633-99ef-a6123c481e1f" locEndPos="18" locType="sr" hash="65740504" locEndLn="21" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: * 3) List all timers                             *" ln="21" locFile="/build/../../../../../../../../driver.c" locStartln="21" sev="1" auth="username" locRef="2" rule="CERT_C-MSC41-a" lnHash="834318816" rule.header="Do not hard code string literals" tool="c++test" lineHash="834318816" unbViolId="c79ec807-4baa-3a1d-b979-3ad454e3e89a" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90baada9-b407-3684-bf47-b98217a2e5bf" locEndPos="18" locType="sr" hash="65740504" locEndLn="21" goals="0," />
    <StdViol msg="String literal &quot;* 3) List all timers                             *&quot; is passed to function 'print_string' as pointer to non-const object" ln="21" locFile="/build/../../../../../../../../driver.c" locStartln="21" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="834318816" rule.header="A string literal shall not be modified" tool="c++test" lineHash="834318816" unbViolId="cb04f69c-fc87-3e96-a2de-4886f7a43db3" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ee872e3-2d51-3829-95b5-6f0fbbb04a76" locEndPos="18" locType="sr" hash="65740504" locEndLn="21" goals="0," />
    <StdViol msg="String literal &quot;* 3) List all timers                             *&quot; is passed to function 'print_string' as pointer to non-const object" ln="21" locFile="/build/../../../../../../../../driver.c" locStartln="21" sev="2" auth="username" locRef="2" rule="AUTOSAR-A2_13_4-a" lnHash="834318816" rule.header="A string literal shall not be modified" tool="c++test" lineHash="834318816" unbViolId="804530a1-7d99-3b31-a68b-5e57caa3b077" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4c83ef4-2e2e-382f-8f77-fde729866ff4" locEndPos="18" locType="sr" hash="65740504" locEndLn="21" goals="0," />
    <StdViol msg="String literal &quot;* 3) List all timers                             *&quot; is passed to function 'print_string' as pointer to non-const object" ln="21" locFile="/build/../../../../../../../../driver.c" locStartln="21" sev="2" auth="username" locRef="2" rule="JSF-151.1" lnHash="834318816" rule.header="A string literal shall not be modified" tool="c++test" lineHash="834318816" unbViolId="2f050a50-ac74-36df-90b7-694872d2b529" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ffb76c0-45b0-3887-95b6-6123667d2a0d" locEndPos="18" locType="sr" hash="65740504" locEndLn="21" goals="0," />
    <StdViol msg="String literal &quot;* 3) List all timers                             *&quot; is passed to function 'print_string' as pointer to non-const object" ln="21" locFile="/build/../../../../../../../../driver.c" locStartln="21" sev="2" auth="username" locRef="2" rule="PB-27" lnHash="834318816" rule.header="A string literal shall not be modified" tool="c++test" lineHash="834318816" unbViolId="5aab25df-c6bf-30b2-83c3-b5ed6cdd865b" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68ef1e28-5811-3bbd-880c-9c697b6a3067" locEndPos="18" locType="sr" hash="65740504" locEndLn="21" goals="0," />
    <StdViol msg="String literal &quot;* 3) List all timers                             *&quot; is passed to function 'print_string' as pointer to non-const object" ln="21" locFile="/build/../../../../../../../../driver.c" locStartln="21" sev="3" auth="username" locRef="2" rule="CERT_C-STR05-a" lnHash="834318816" rule.header="A string literal shall not be modified" tool="c++test" lineHash="834318816" unbViolId="5993ad65-6f0f-39a9-8ad7-d53df8df5198" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84a6e83c-21d6-34a4-8779-7eeeb22d9181" locEndPos="18" locType="sr" hash="65740504" locEndLn="21" goals="0," />
    <StdViol msg="String literal &quot;* 3) List all timers                             *&quot; is passed to function 'print_string' as pointer to non-const object" ln="21" locFile="/build/../../../../../../../../driver.c" locStartln="21" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-7_4" lnHash="834318816" rule.header="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" tool="c++test" lineHash="834318816" unbViolId="187fafdd-0ff2-35b4-b3aa-1c826cc6b3d7" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d7570e6-deca-3320-8ec2-df00e9a85f53" locEndPos="18" locType="sr" hash="65740504" locEndLn="21" goals="0," />
    <StdViol msg="String literal &quot;* 3) List all timers                             *&quot; is passed to function 'print_string' as pointer to non-const object" ln="21" locFile="/build/../../../../../../../../driver.c" locStartln="21" sev="2" auth="username" locRef="2" rule="CERT_C-STR30-a" lnHash="834318816" rule.header="A string literal shall not be modified" tool="c++test" lineHash="834318816" unbViolId="97306449-f550-34c8-b2ae-a4762a875894" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a97f0721-9a4b-3fb7-aa9d-c9725ce71608" locEndPos="18" locType="sr" hash="65740504" locEndLn="21" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="22" locFile="/build/../../../../../../../../driver.c" locStartln="22" sev="3" auth="username" locRef="2" rule="CODSTA-122_a" lnHash="1075694496" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1075694496" unbViolId="591d2397-f0ac-32a6-8bc0-16e952ff5f08" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="173ae218-f63d-3601-bd3d-c5cf32a6590f" locEndPos="5" locType="sr" hash="65740504" locEndLn="22" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="22" locFile="/build/../../../../../../../../driver.c" locStartln="22" sev="1" auth="username" locRef="2" rule="CERT_C-ERR33-a" lnHash="1075694496" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1075694496" unbViolId="1064e15d-4429-3745-96d0-257714d572c4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3bfe1b72-b5c3-3737-aebf-06dc7af72647" locEndPos="5" locType="sr" hash="65740504" locEndLn="22" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="22" locFile="/build/../../../../../../../../driver.c" locStartln="22" sev="1" auth="username" locRef="2" rule="CERT_C-POS54-a" lnHash="1075694496" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1075694496" unbViolId="4916f27b-689e-3aee-8dde-83ca8dde0f5c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a5967e8-ac20-341a-acf8-bd9e6dfffbfd" locEndPos="5" locType="sr" hash="65740504" locEndLn="22" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="22" locFile="/build/../../../../../../../../driver.c" locStartln="22" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="1075694496" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1075694496" unbViolId="66fe4130-9f67-333a-8905-242315aa8133" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6fee08e9-cbea-308b-a5f0-f92507dab153" locEndPos="5" locType="sr" hash="65740504" locEndLn="22" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="22" locFile="/build/../../../../../../../../driver.c" locStartln="22" sev="3" auth="username" locRef="2" rule="CERT_C-EXP12-a" lnHash="1075694496" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1075694496" unbViolId="d8110858-c83e-3651-b24f-9e01e94986c0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d50c4fd0-f21e-3db8-8380-73c62cb8a21d" locEndPos="5" locType="sr" hash="65740504" locEndLn="22" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="22" locFile="/build/../../../../../../../../driver.c" locStartln="22" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-17_7_a" lnHash="1075694496" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1075694496" unbViolId="3c743efa-34d6-3e75-a368-e1b9a38b0ce7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="30936b85-8a18-31c1-b8e1-d19d404b41ce" locEndPos="5" locType="sr" hash="65740504" locEndLn="22" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="22" locFile="/build/../../../../../../../../driver.c" locStartln="22" sev="3" auth="username" locRef="2" rule="MISRA2004-16_10" lnHash="1075694496" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="1075694496" unbViolId="4cb57ca9-abd6-3357-ac40-44b6e52132be" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d977475f-4a79-38be-bf71-0e2f00c1ae2c" locEndPos="5" locType="sr" hash="65740504" locEndLn="22" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="22" locFile="/build/../../../../../../../../driver.c" locStartln="22" sev="2" auth="username" locRef="2" rule="AUTOSAR-M0_3_2-a" lnHash="1075694496" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="1075694496" unbViolId="812eab5b-95f2-33f9-a51f-48c7e609c132" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3e56c3e-4d79-3ff9-a066-82dfe1e93822" locEndPos="5" locType="sr" hash="65740504" locEndLn="22" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="22" locFile="/build/../../../../../../../../driver.c" locStartln="22" sev="2" auth="username" locRef="2" rule="MISRA2008-0_3_2" lnHash="1075694496" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="1075694496" unbViolId="36a21d56-6615-3c9a-ac96-b94527280406" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b98cd99-32df-330c-b51d-cda64ad14f13" locEndPos="5" locType="sr" hash="65740504" locEndLn="22" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="22" locFile="/build/../../../../../../../../driver.c" locStartln="22" sev="3" auth="username" locRef="2" rule="JSF-115" lnHash="1075694496" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="1075694496" unbViolId="069b7ad8-bace-391a-a3ae-c9ee039087ba" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47d9b85b-86f8-39a3-b188-1cfad16da540" locEndPos="5" locType="sr" hash="65740504" locEndLn="22" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: * 4) Show time                                   *" ln="22" locFile="/build/../../../../../../../../driver.c" locStartln="22" sev="5" auth="username" locRef="2" rule="CWE-798-a" lnHash="1075694496" rule.header="Do not hard code string literals" tool="c++test" lineHash="1075694496" unbViolId="733d82ea-6c39-321c-bf90-b8a0a0bc4276" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4b686b1-4cd2-3219-a518-f6600ed6d678" locEndPos="18" locType="sr" hash="65740504" locEndLn="22" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: * 4) Show time                                   *" ln="22" locFile="/build/../../../../../../../../driver.c" locStartln="22" sev="5" auth="username" locRef="2" rule="CODSTA-203" lnHash="1075694496" rule.header="Do not hard code string literals" tool="c++test" lineHash="1075694496" unbViolId="e90015eb-7c8a-35e1-9a27-ebadff72446e" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18bf009e-64c4-3d3a-8b49-22147fd45c9f" locEndPos="18" locType="sr" hash="65740504" locEndLn="22" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: * 4) Show time                                   *" ln="22" locFile="/build/../../../../../../../../driver.c" locStartln="22" sev="1" auth="username" locRef="2" rule="APSC_DV-003110-a" lnHash="1075694496" rule.header="Do not hard code string literals" tool="c++test" lineHash="1075694496" unbViolId="c2009d6a-56aa-375f-8b5b-b323f0af6a69" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2eebb4eb-de53-3cef-9797-315cc01c68e5" locEndPos="18" locType="sr" hash="65740504" locEndLn="22" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: * 4) Show time                                   *" ln="22" locFile="/build/../../../../../../../../driver.c" locStartln="22" sev="1" auth="username" locRef="2" rule="CERT_C-MSC41-a" lnHash="1075694496" rule.header="Do not hard code string literals" tool="c++test" lineHash="1075694496" unbViolId="183bf18b-01f6-3c28-947b-cb2f71636316" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e59f826c-6f24-3ddb-a4b1-62aa66bf7020" locEndPos="18" locType="sr" hash="65740504" locEndLn="22" goals="0," />
    <StdViol msg="String literal &quot;* 4) Show time                                   *&quot; is passed to function 'print_string' as pointer to non-const object" ln="22" locFile="/build/../../../../../../../../driver.c" locStartln="22" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="1075694496" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1075694496" unbViolId="57918fd1-3460-3a61-89ef-3e20d39d635d" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="957eb9a4-3acc-36ec-8b7f-e10908e9f5ec" locEndPos="18" locType="sr" hash="65740504" locEndLn="22" goals="0," />
    <StdViol msg="String literal &quot;* 4) Show time                                   *&quot; is passed to function 'print_string' as pointer to non-const object" ln="22" locFile="/build/../../../../../../../../driver.c" locStartln="22" sev="2" auth="username" locRef="2" rule="AUTOSAR-A2_13_4-a" lnHash="1075694496" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1075694496" unbViolId="b0ff290c-01fd-305d-a1ee-8d9bef5e2822" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d22905a8-0d0b-3b39-b170-a88c58da97d8" locEndPos="18" locType="sr" hash="65740504" locEndLn="22" goals="0," />
    <StdViol msg="String literal &quot;* 4) Show time                                   *&quot; is passed to function 'print_string' as pointer to non-const object" ln="22" locFile="/build/../../../../../../../../driver.c" locStartln="22" sev="2" auth="username" locRef="2" rule="JSF-151.1" lnHash="1075694496" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1075694496" unbViolId="24ed514d-e4e9-39ca-8dc8-468fa18628f8" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e13ea1c4-4f4e-38d9-a2f0-79ea28be1a23" locEndPos="18" locType="sr" hash="65740504" locEndLn="22" goals="0," />
    <StdViol msg="String literal &quot;* 4) Show time                                   *&quot; is passed to function 'print_string' as pointer to non-const object" ln="22" locFile="/build/../../../../../../../../driver.c" locStartln="22" sev="2" auth="username" locRef="2" rule="PB-27" lnHash="1075694496" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1075694496" unbViolId="0bb9e9b4-fa9f-384e-a10b-54ddeefcead0" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="29d7cc00-7683-3fa6-8ab0-a0a15ec88bf9" locEndPos="18" locType="sr" hash="65740504" locEndLn="22" goals="0," />
    <StdViol msg="String literal &quot;* 4) Show time                                   *&quot; is passed to function 'print_string' as pointer to non-const object" ln="22" locFile="/build/../../../../../../../../driver.c" locStartln="22" sev="3" auth="username" locRef="2" rule="CERT_C-STR05-a" lnHash="1075694496" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1075694496" unbViolId="51555f02-94ed-33e3-84fe-b575fd8c0444" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c60ec193-eae1-3ae9-90ec-931283a168ea" locEndPos="18" locType="sr" hash="65740504" locEndLn="22" goals="0," />
    <StdViol msg="String literal &quot;* 4) Show time                                   *&quot; is passed to function 'print_string' as pointer to non-const object" ln="22" locFile="/build/../../../../../../../../driver.c" locStartln="22" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-7_4" lnHash="1075694496" rule.header="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" tool="c++test" lineHash="1075694496" unbViolId="b7af90a6-4a9e-32c0-be87-25b69de1d858" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f09eca4e-3c66-3466-ab4f-3d5f7a948d47" locEndPos="18" locType="sr" hash="65740504" locEndLn="22" goals="0," />
    <StdViol msg="String literal &quot;* 4) Show time                                   *&quot; is passed to function 'print_string' as pointer to non-const object" ln="22" locFile="/build/../../../../../../../../driver.c" locStartln="22" sev="2" auth="username" locRef="2" rule="CERT_C-STR30-a" lnHash="1075694496" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1075694496" unbViolId="adbfa1d1-6084-384e-b3c5-68ff5688528e" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0692d4b1-cb7c-3bfb-adcc-88fac420beca" locEndPos="18" locType="sr" hash="65740504" locEndLn="22" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="23" locFile="/build/../../../../../../../../driver.c" locStartln="23" sev="3" auth="username" locRef="2" rule="CODSTA-122_a" lnHash="-1874811899" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1874811899" unbViolId="3e8c5fee-e214-3860-9390-9681eb0a3119" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de3e92e2-bf66-3ca2-a1ec-41e51176511a" locEndPos="5" locType="sr" hash="65740504" locEndLn="23" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="23" locFile="/build/../../../../../../../../driver.c" locStartln="23" sev="1" auth="username" locRef="2" rule="CERT_C-ERR33-a" lnHash="-1874811899" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1874811899" unbViolId="a01c2d3d-709a-3372-8c46-75ce6e74700e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71eea2d2-99a5-32b0-ad89-fee283ed204f" locEndPos="5" locType="sr" hash="65740504" locEndLn="23" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="23" locFile="/build/../../../../../../../../driver.c" locStartln="23" sev="1" auth="username" locRef="2" rule="CERT_C-POS54-a" lnHash="-1874811899" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1874811899" unbViolId="c0eaf541-dd18-3886-acf8-0ba420d434ab" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c79591a9-0936-35af-9be8-2e3b39345559" locEndPos="5" locType="sr" hash="65740504" locEndLn="23" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="23" locFile="/build/../../../../../../../../driver.c" locStartln="23" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="-1874811899" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1874811899" unbViolId="c15729aa-4857-3f2b-9ab4-c78988c03289" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c85a9b9-fcf0-386f-8a59-28e2fb0d3ad3" locEndPos="5" locType="sr" hash="65740504" locEndLn="23" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="23" locFile="/build/../../../../../../../../driver.c" locStartln="23" sev="3" auth="username" locRef="2" rule="CERT_C-EXP12-a" lnHash="-1874811899" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1874811899" unbViolId="04327214-2d1a-33e3-bafa-1e9252effbd8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5bf1cfc-ee48-35d2-92f9-becf9c7f023e" locEndPos="5" locType="sr" hash="65740504" locEndLn="23" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="23" locFile="/build/../../../../../../../../driver.c" locStartln="23" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-17_7_a" lnHash="-1874811899" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1874811899" unbViolId="528903d5-e076-3c42-a5a4-c832562d295b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21560101-4d34-3cc7-8ecc-06e8bcd26c69" locEndPos="5" locType="sr" hash="65740504" locEndLn="23" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="23" locFile="/build/../../../../../../../../driver.c" locStartln="23" sev="3" auth="username" locRef="2" rule="MISRA2004-16_10" lnHash="-1874811899" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1874811899" unbViolId="543a8d90-b924-3195-9c8f-21ab87a7b86d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e08ce424-c165-3cf4-beb1-adfa902b5f8a" locEndPos="5" locType="sr" hash="65740504" locEndLn="23" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="23" locFile="/build/../../../../../../../../driver.c" locStartln="23" sev="2" auth="username" locRef="2" rule="AUTOSAR-M0_3_2-a" lnHash="-1874811899" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1874811899" unbViolId="95cf9357-c84d-387d-8f31-dbec375ba918" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5aa6464b-f525-3a1f-adef-cfead5f2fb72" locEndPos="5" locType="sr" hash="65740504" locEndLn="23" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="23" locFile="/build/../../../../../../../../driver.c" locStartln="23" sev="2" auth="username" locRef="2" rule="MISRA2008-0_3_2" lnHash="-1874811899" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1874811899" unbViolId="5e715139-7126-3cca-81df-7a55843fda6a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07c4218e-d3d0-3fce-b123-dbb586249c30" locEndPos="5" locType="sr" hash="65740504" locEndLn="23" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="23" locFile="/build/../../../../../../../../driver.c" locStartln="23" sev="3" auth="username" locRef="2" rule="JSF-115" lnHash="-1874811899" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-1874811899" unbViolId="12319e74-72f7-3701-83b8-8b8b54894b68" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="674cfd19-ece3-312e-9763-2643a23a7513" locEndPos="5" locType="sr" hash="65740504" locEndLn="23" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: *                                                *" ln="23" locFile="/build/../../../../../../../../driver.c" locStartln="23" sev="5" auth="username" locRef="2" rule="CWE-798-a" lnHash="-1874811899" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1874811899" unbViolId="eb926fae-a339-307a-bbe0-203f7ed378c1" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dbea17bc-7b41-3718-8db0-e9599aa979d3" locEndPos="18" locType="sr" hash="65740504" locEndLn="23" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: *                                                *" ln="23" locFile="/build/../../../../../../../../driver.c" locStartln="23" sev="5" auth="username" locRef="2" rule="CODSTA-203" lnHash="-1874811899" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1874811899" unbViolId="c526f334-cd57-3081-b9bd-3479ebb31418" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dcdbb2de-723d-3e36-920b-edba976bb832" locEndPos="18" locType="sr" hash="65740504" locEndLn="23" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: *                                                *" ln="23" locFile="/build/../../../../../../../../driver.c" locStartln="23" sev="1" auth="username" locRef="2" rule="APSC_DV-003110-a" lnHash="-1874811899" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1874811899" unbViolId="fb782f44-4571-3e07-a9dc-b1851b2eecac" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="951b9bae-0bbb-34d3-abfe-9aa0e5429ce5" locEndPos="18" locType="sr" hash="65740504" locEndLn="23" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: *                                                *" ln="23" locFile="/build/../../../../../../../../driver.c" locStartln="23" sev="1" auth="username" locRef="2" rule="CERT_C-MSC41-a" lnHash="-1874811899" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1874811899" unbViolId="c955fd5b-a5f7-3618-aca3-da8fffecc5ad" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef4edcf8-29b1-336a-a52f-c758d29fffb4" locEndPos="18" locType="sr" hash="65740504" locEndLn="23" goals="0," />
    <StdViol msg="String literal &quot;*                                                *&quot; is passed to function 'print_string' as pointer to non-const object" ln="23" locFile="/build/../../../../../../../../driver.c" locStartln="23" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="-1874811899" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1874811899" unbViolId="a52879b3-3400-3a4d-b6bd-e5f2ebb31bc9" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70adc5db-5758-362d-bc5a-8cfa5ea51bef" locEndPos="18" locType="sr" hash="65740504" locEndLn="23" goals="0," />
    <StdViol msg="String literal &quot;*                                                *&quot; is passed to function 'print_string' as pointer to non-const object" ln="23" locFile="/build/../../../../../../../../driver.c" locStartln="23" sev="2" auth="username" locRef="2" rule="AUTOSAR-A2_13_4-a" lnHash="-1874811899" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1874811899" unbViolId="fe93bbc3-9cab-3614-be80-128682dc5147" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43414044-7f38-3d3e-82d4-14de21015987" locEndPos="18" locType="sr" hash="65740504" locEndLn="23" goals="0," />
    <StdViol msg="String literal &quot;*                                                *&quot; is passed to function 'print_string' as pointer to non-const object" ln="23" locFile="/build/../../../../../../../../driver.c" locStartln="23" sev="2" auth="username" locRef="2" rule="JSF-151.1" lnHash="-1874811899" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1874811899" unbViolId="32f43d4b-3e7c-3d92-b155-e32a78cd73dd" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ec5b50fd-abea-3b86-8b02-c69f45f426b7" locEndPos="18" locType="sr" hash="65740504" locEndLn="23" goals="0," />
    <StdViol msg="String literal &quot;*                                                *&quot; is passed to function 'print_string' as pointer to non-const object" ln="23" locFile="/build/../../../../../../../../driver.c" locStartln="23" sev="2" auth="username" locRef="2" rule="PB-27" lnHash="-1874811899" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1874811899" unbViolId="4bdf5d83-1981-3cb1-815e-375d7a5803d1" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4895c5f-1604-3f98-8f2c-d74e22dcddc5" locEndPos="18" locType="sr" hash="65740504" locEndLn="23" goals="0," />
    <StdViol msg="String literal &quot;*                                                *&quot; is passed to function 'print_string' as pointer to non-const object" ln="23" locFile="/build/../../../../../../../../driver.c" locStartln="23" sev="3" auth="username" locRef="2" rule="CERT_C-STR05-a" lnHash="-1874811899" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1874811899" unbViolId="c1c329fe-f849-3cea-b0ca-848a8007089b" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b65b41aa-60a3-35e3-9cd3-890b6f7bee3c" locEndPos="18" locType="sr" hash="65740504" locEndLn="23" goals="0," />
    <StdViol msg="String literal &quot;*                                                *&quot; is passed to function 'print_string' as pointer to non-const object" ln="23" locFile="/build/../../../../../../../../driver.c" locStartln="23" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-7_4" lnHash="-1874811899" rule.header="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" tool="c++test" lineHash="-1874811899" unbViolId="cb77679d-f8e2-3928-8ed1-2dccf726b11e" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cbd7cf4b-deb9-3fe5-8dcf-8f4e0080faa4" locEndPos="18" locType="sr" hash="65740504" locEndLn="23" goals="0," />
    <StdViol msg="String literal &quot;*                                                *&quot; is passed to function 'print_string' as pointer to non-const object" ln="23" locFile="/build/../../../../../../../../driver.c" locStartln="23" sev="2" auth="username" locRef="2" rule="CERT_C-STR30-a" lnHash="-1874811899" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1874811899" unbViolId="0da97cf9-4044-3679-91ef-6ff3c71ba90e" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d55c3b95-ae97-3ac2-85de-07ad22afe495" locEndPos="18" locType="sr" hash="65740504" locEndLn="23" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="24" locFile="/build/../../../../../../../../driver.c" locStartln="24" sev="3" auth="username" locRef="2" rule="CODSTA-122_a" lnHash="-1018687565" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1018687565" unbViolId="8ee25261-48d7-3ae0-a3d1-520cdb2f0858" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a1ee1c2-5365-3186-a2a4-d52cd07fc1a2" locEndPos="5" locType="sr" hash="65740504" locEndLn="24" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="24" locFile="/build/../../../../../../../../driver.c" locStartln="24" sev="1" auth="username" locRef="2" rule="CERT_C-ERR33-a" lnHash="-1018687565" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1018687565" unbViolId="ef5ade96-55b8-3c6a-bb9a-5b9e041b8522" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e46d00c-550d-30ae-9096-64560049e24b" locEndPos="5" locType="sr" hash="65740504" locEndLn="24" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="24" locFile="/build/../../../../../../../../driver.c" locStartln="24" sev="1" auth="username" locRef="2" rule="CERT_C-POS54-a" lnHash="-1018687565" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1018687565" unbViolId="e2cf6c03-f969-3acb-a7fb-330309549b21" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4493076f-e0d5-3483-b437-32fce26ec59f" locEndPos="5" locType="sr" hash="65740504" locEndLn="24" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="24" locFile="/build/../../../../../../../../driver.c" locStartln="24" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="-1018687565" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1018687565" unbViolId="3dcc61b1-705c-3c6b-9b7e-3858ad8e33da" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95cec260-57cf-3672-a52c-8609806f72ed" locEndPos="5" locType="sr" hash="65740504" locEndLn="24" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="24" locFile="/build/../../../../../../../../driver.c" locStartln="24" sev="3" auth="username" locRef="2" rule="CERT_C-EXP12-a" lnHash="-1018687565" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1018687565" unbViolId="bc8c5f99-c8e8-3057-83cc-a3b61eed8507" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a5cb099-536b-3fed-bf53-06634be0b9d5" locEndPos="5" locType="sr" hash="65740504" locEndLn="24" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="24" locFile="/build/../../../../../../../../driver.c" locStartln="24" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-17_7_a" lnHash="-1018687565" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1018687565" unbViolId="d69dac6f-1c17-31fd-b999-5f2028107e71" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52cabb6d-622a-396e-88b3-00d19453866e" locEndPos="5" locType="sr" hash="65740504" locEndLn="24" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="24" locFile="/build/../../../../../../../../driver.c" locStartln="24" sev="3" auth="username" locRef="2" rule="MISRA2004-16_10" lnHash="-1018687565" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1018687565" unbViolId="be30477c-23fc-3c2e-9a08-99e40f99df37" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10cfdfc3-af8d-3ee6-9029-8c48ab33ab60" locEndPos="5" locType="sr" hash="65740504" locEndLn="24" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="24" locFile="/build/../../../../../../../../driver.c" locStartln="24" sev="2" auth="username" locRef="2" rule="AUTOSAR-M0_3_2-a" lnHash="-1018687565" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1018687565" unbViolId="b19bbe71-8ef2-312b-91b2-f7231e5a65aa" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="520dcc3a-f592-35dc-a075-b7cb9e80895d" locEndPos="5" locType="sr" hash="65740504" locEndLn="24" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="24" locFile="/build/../../../../../../../../driver.c" locStartln="24" sev="2" auth="username" locRef="2" rule="MISRA2008-0_3_2" lnHash="-1018687565" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1018687565" unbViolId="3ea84797-65c0-3dd4-9362-f3b848867f1e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="719d4e58-45d8-33dc-9eb9-97980912c256" locEndPos="5" locType="sr" hash="65740504" locEndLn="24" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="24" locFile="/build/../../../../../../../../driver.c" locStartln="24" sev="3" auth="username" locRef="2" rule="JSF-115" lnHash="-1018687565" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-1018687565" unbViolId="40230853-edf8-397d-a5ae-bdd920cb00bf" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b727257d-32a4-3fb3-82a3-e51fa9f5ca03" locEndPos="5" locType="sr" hash="65740504" locEndLn="24" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: * 9) Exit                                        *" ln="24" locFile="/build/../../../../../../../../driver.c" locStartln="24" sev="5" auth="username" locRef="2" rule="CWE-798-a" lnHash="-1018687565" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1018687565" unbViolId="6e1fd306-5fa2-3e52-8d5c-48fbdafb4237" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4acd133-c3ad-3c9c-94ed-760313bfa770" locEndPos="18" locType="sr" hash="65740504" locEndLn="24" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: * 9) Exit                                        *" ln="24" locFile="/build/../../../../../../../../driver.c" locStartln="24" sev="5" auth="username" locRef="2" rule="CODSTA-203" lnHash="-1018687565" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1018687565" unbViolId="3dd49b28-1f19-3d54-b2db-bb9945e8d9ff" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="782c42b0-398e-363c-bbac-7295cfba2835" locEndPos="18" locType="sr" hash="65740504" locEndLn="24" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: * 9) Exit                                        *" ln="24" locFile="/build/../../../../../../../../driver.c" locStartln="24" sev="1" auth="username" locRef="2" rule="APSC_DV-003110-a" lnHash="-1018687565" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1018687565" unbViolId="f86ef7ff-b6ab-3337-8159-855500387d45" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a2a9c276-c037-3035-900b-c6077f677327" locEndPos="18" locType="sr" hash="65740504" locEndLn="24" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: * 9) Exit                                        *" ln="24" locFile="/build/../../../../../../../../driver.c" locStartln="24" sev="1" auth="username" locRef="2" rule="CERT_C-MSC41-a" lnHash="-1018687565" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1018687565" unbViolId="e8fe2e54-ec01-3c8c-bbda-9f4075c0adcc" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c44a2076-38ad-37e7-ab32-60abfe028393" locEndPos="18" locType="sr" hash="65740504" locEndLn="24" goals="0," />
    <StdViol msg="String literal &quot;* 9) Exit                                        *&quot; is passed to function 'print_string' as pointer to non-const object" ln="24" locFile="/build/../../../../../../../../driver.c" locStartln="24" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="-1018687565" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1018687565" unbViolId="3b8a7410-1faf-327b-958f-9b036bca70cb" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da7673a0-984c-3412-a7fe-1ae895425f01" locEndPos="18" locType="sr" hash="65740504" locEndLn="24" goals="0," />
    <StdViol msg="String literal &quot;* 9) Exit                                        *&quot; is passed to function 'print_string' as pointer to non-const object" ln="24" locFile="/build/../../../../../../../../driver.c" locStartln="24" sev="2" auth="username" locRef="2" rule="AUTOSAR-A2_13_4-a" lnHash="-1018687565" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1018687565" unbViolId="e5b941f3-adad-3d3b-9cdb-6474a0332d45" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b91d49bf-ff5f-3731-9293-a6efe84efb89" locEndPos="18" locType="sr" hash="65740504" locEndLn="24" goals="0," />
    <StdViol msg="String literal &quot;* 9) Exit                                        *&quot; is passed to function 'print_string' as pointer to non-const object" ln="24" locFile="/build/../../../../../../../../driver.c" locStartln="24" sev="2" auth="username" locRef="2" rule="JSF-151.1" lnHash="-1018687565" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1018687565" unbViolId="5cd6f267-12bc-34a2-807d-f745148eaac4" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4fc6d96e-16f9-3cf2-b4ab-91c6207d0b41" locEndPos="18" locType="sr" hash="65740504" locEndLn="24" goals="0," />
    <StdViol msg="String literal &quot;* 9) Exit                                        *&quot; is passed to function 'print_string' as pointer to non-const object" ln="24" locFile="/build/../../../../../../../../driver.c" locStartln="24" sev="2" auth="username" locRef="2" rule="PB-27" lnHash="-1018687565" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1018687565" unbViolId="de1bbb27-f364-3393-9a15-5786883b952e" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee387fca-f856-3e58-a7bc-7fb5f95df7d0" locEndPos="18" locType="sr" hash="65740504" locEndLn="24" goals="0," />
    <StdViol msg="String literal &quot;* 9) Exit                                        *&quot; is passed to function 'print_string' as pointer to non-const object" ln="24" locFile="/build/../../../../../../../../driver.c" locStartln="24" sev="3" auth="username" locRef="2" rule="CERT_C-STR05-a" lnHash="-1018687565" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1018687565" unbViolId="7652fc22-6c3c-39df-a70b-5b6cf5a3da0a" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="46bf8e66-4b74-3cd0-8934-a6425d5d6519" locEndPos="18" locType="sr" hash="65740504" locEndLn="24" goals="0," />
    <StdViol msg="String literal &quot;* 9) Exit                                        *&quot; is passed to function 'print_string' as pointer to non-const object" ln="24" locFile="/build/../../../../../../../../driver.c" locStartln="24" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-7_4" lnHash="-1018687565" rule.header="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" tool="c++test" lineHash="-1018687565" unbViolId="c708472f-8d7a-37b8-898a-f56912493a31" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76340f03-16f1-337a-ba9f-50d9ddbb51b4" locEndPos="18" locType="sr" hash="65740504" locEndLn="24" goals="0," />
    <StdViol msg="String literal &quot;* 9) Exit                                        *&quot; is passed to function 'print_string' as pointer to non-const object" ln="24" locFile="/build/../../../../../../../../driver.c" locStartln="24" sev="2" auth="username" locRef="2" rule="CERT_C-STR30-a" lnHash="-1018687565" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1018687565" unbViolId="ebe81092-a483-347b-b9bc-57f3f370dce5" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d04db0c-53ef-3418-bf31-015c7b732387" locEndPos="18" locType="sr" hash="65740504" locEndLn="24" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="25" locFile="/build/../../../../../../../../driver.c" locStartln="25" sev="3" auth="username" locRef="2" rule="CODSTA-122_a" lnHash="-1874811899" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1874811899" unbViolId="d9b7eaf2-0d98-3d76-8239-b96e136cb901" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b15091f3-79e4-3cac-a0df-76bcc9daa047" locEndPos="5" locType="sr" hash="65740504" locEndLn="25" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="25" locFile="/build/../../../../../../../../driver.c" locStartln="25" sev="1" auth="username" locRef="2" rule="CERT_C-ERR33-a" lnHash="-1874811899" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1874811899" unbViolId="82d2556b-590b-3d9f-90c4-ab3644c9aa47" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da7faa9b-b6cd-3215-af58-18bbd03e7b1c" locEndPos="5" locType="sr" hash="65740504" locEndLn="25" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="25" locFile="/build/../../../../../../../../driver.c" locStartln="25" sev="1" auth="username" locRef="2" rule="CERT_C-POS54-a" lnHash="-1874811899" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1874811899" unbViolId="6409558b-0a29-3ff7-949e-64482adb0841" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f012541-ea79-3166-a12f-c928ce118550" locEndPos="5" locType="sr" hash="65740504" locEndLn="25" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="25" locFile="/build/../../../../../../../../driver.c" locStartln="25" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="-1874811899" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1874811899" unbViolId="c9c639bd-0d71-3731-8997-4e51071e8112" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b07fe83-291f-3dc3-b469-cab1b718a100" locEndPos="5" locType="sr" hash="65740504" locEndLn="25" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="25" locFile="/build/../../../../../../../../driver.c" locStartln="25" sev="3" auth="username" locRef="2" rule="CERT_C-EXP12-a" lnHash="-1874811899" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1874811899" unbViolId="25479714-f728-3fae-a60e-cd906489b0bd" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="225ca8a0-a2ea-30e8-b0ba-f1bad44a43a6" locEndPos="5" locType="sr" hash="65740504" locEndLn="25" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="25" locFile="/build/../../../../../../../../driver.c" locStartln="25" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-17_7_a" lnHash="-1874811899" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1874811899" unbViolId="e396a51a-ba37-3317-99b8-007ae8147c0b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a3e7088-21ae-316f-b4b2-dbb9134af8ff" locEndPos="5" locType="sr" hash="65740504" locEndLn="25" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="25" locFile="/build/../../../../../../../../driver.c" locStartln="25" sev="3" auth="username" locRef="2" rule="MISRA2004-16_10" lnHash="-1874811899" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1874811899" unbViolId="eb013fc6-9674-323d-aea0-2c12401580be" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a4e2dc14-a305-31e7-8aee-d1a318fb2288" locEndPos="5" locType="sr" hash="65740504" locEndLn="25" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="25" locFile="/build/../../../../../../../../driver.c" locStartln="25" sev="2" auth="username" locRef="2" rule="AUTOSAR-M0_3_2-a" lnHash="-1874811899" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1874811899" unbViolId="049c91b0-aa2c-3796-983e-f6d49e32a565" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a78e34b1-e661-331c-bd93-d76112342028" locEndPos="5" locType="sr" hash="65740504" locEndLn="25" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="25" locFile="/build/../../../../../../../../driver.c" locStartln="25" sev="2" auth="username" locRef="2" rule="MISRA2008-0_3_2" lnHash="-1874811899" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1874811899" unbViolId="03bb6aa6-87a4-3735-a13b-00b2595332ef" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9dec5bf-963e-3212-bbca-e7c546e4d682" locEndPos="5" locType="sr" hash="65740504" locEndLn="25" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="25" locFile="/build/../../../../../../../../driver.c" locStartln="25" sev="3" auth="username" locRef="2" rule="JSF-115" lnHash="-1874811899" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-1874811899" unbViolId="40e71c18-2b74-31ad-9707-8e9f25827b1a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="753775cf-0c25-3eb7-a142-40d288cb91d5" locEndPos="5" locType="sr" hash="65740504" locEndLn="25" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: *                                                *" ln="25" locFile="/build/../../../../../../../../driver.c" locStartln="25" sev="5" auth="username" locRef="2" rule="CWE-798-a" lnHash="-1874811899" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1874811899" unbViolId="0c226538-3fa7-3431-8964-afdc6c88a5ef" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f72557cb-79d1-376d-a84b-2c040afa240f" locEndPos="18" locType="sr" hash="65740504" locEndLn="25" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: *                                                *" ln="25" locFile="/build/../../../../../../../../driver.c" locStartln="25" sev="5" auth="username" locRef="2" rule="CODSTA-203" lnHash="-1874811899" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1874811899" unbViolId="c6b59caf-fa15-345b-b452-daf5c4704a26" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36039bdf-d3e5-3809-bb6c-f3c4ebd96fb7" locEndPos="18" locType="sr" hash="65740504" locEndLn="25" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: *                                                *" ln="25" locFile="/build/../../../../../../../../driver.c" locStartln="25" sev="1" auth="username" locRef="2" rule="APSC_DV-003110-a" lnHash="-1874811899" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1874811899" unbViolId="5aee3fc3-0d83-382a-b008-9dc03b1b682e" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aed07c56-cfad-3332-99c7-06a8590d9392" locEndPos="18" locType="sr" hash="65740504" locEndLn="25" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: *                                                *" ln="25" locFile="/build/../../../../../../../../driver.c" locStartln="25" sev="1" auth="username" locRef="2" rule="CERT_C-MSC41-a" lnHash="-1874811899" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1874811899" unbViolId="f84f2f91-f9fd-31cb-9f01-ed07030875a8" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f156e53-5d34-3b96-b90d-9103feab6f4c" locEndPos="18" locType="sr" hash="65740504" locEndLn="25" goals="0," />
    <StdViol msg="String literal &quot;*                                                *&quot; is passed to function 'print_string' as pointer to non-const object" ln="25" locFile="/build/../../../../../../../../driver.c" locStartln="25" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="-1874811899" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1874811899" unbViolId="2c2f5548-5216-3190-995c-c4e1e0e52d62" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f1f6f3a6-78af-36f8-96b9-5a64a052b695" locEndPos="18" locType="sr" hash="65740504" locEndLn="25" goals="0," />
    <StdViol msg="String literal &quot;*                                                *&quot; is passed to function 'print_string' as pointer to non-const object" ln="25" locFile="/build/../../../../../../../../driver.c" locStartln="25" sev="2" auth="username" locRef="2" rule="AUTOSAR-A2_13_4-a" lnHash="-1874811899" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1874811899" unbViolId="ff7b9278-8ae8-30d2-99bb-890d99248578" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f505f05-3a18-39af-8446-cb41f04f6f60" locEndPos="18" locType="sr" hash="65740504" locEndLn="25" goals="0," />
    <StdViol msg="String literal &quot;*                                                *&quot; is passed to function 'print_string' as pointer to non-const object" ln="25" locFile="/build/../../../../../../../../driver.c" locStartln="25" sev="2" auth="username" locRef="2" rule="JSF-151.1" lnHash="-1874811899" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1874811899" unbViolId="6165b025-e450-369b-bedd-2a64cef76d56" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5360c0e3-ee01-3c48-a359-cca82acdb41c" locEndPos="18" locType="sr" hash="65740504" locEndLn="25" goals="0," />
    <StdViol msg="String literal &quot;*                                                *&quot; is passed to function 'print_string' as pointer to non-const object" ln="25" locFile="/build/../../../../../../../../driver.c" locStartln="25" sev="2" auth="username" locRef="2" rule="PB-27" lnHash="-1874811899" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1874811899" unbViolId="a1a5ec78-7d8a-33ff-9bb7-95b00d06f6b7" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b17d1bd0-76fa-3cff-b4cb-cdb57e7a4a26" locEndPos="18" locType="sr" hash="65740504" locEndLn="25" goals="0," />
    <StdViol msg="String literal &quot;*                                                *&quot; is passed to function 'print_string' as pointer to non-const object" ln="25" locFile="/build/../../../../../../../../driver.c" locStartln="25" sev="3" auth="username" locRef="2" rule="CERT_C-STR05-a" lnHash="-1874811899" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1874811899" unbViolId="c781c1bf-03cc-3e8d-8c10-8a5e5ec980d7" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd55a6d0-6a4b-3f80-b111-b280f8937f91" locEndPos="18" locType="sr" hash="65740504" locEndLn="25" goals="0," />
    <StdViol msg="String literal &quot;*                                                *&quot; is passed to function 'print_string' as pointer to non-const object" ln="25" locFile="/build/../../../../../../../../driver.c" locStartln="25" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-7_4" lnHash="-1874811899" rule.header="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" tool="c++test" lineHash="-1874811899" unbViolId="3039e7aa-646b-3df1-b506-2b58e6464b7f" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71d514d8-0d22-3ca4-8c4f-b76a749203a1" locEndPos="18" locType="sr" hash="65740504" locEndLn="25" goals="0," />
    <StdViol msg="String literal &quot;*                                                *&quot; is passed to function 'print_string' as pointer to non-const object" ln="25" locFile="/build/../../../../../../../../driver.c" locStartln="25" sev="2" auth="username" locRef="2" rule="CERT_C-STR30-a" lnHash="-1874811899" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1874811899" unbViolId="a292b024-af94-3288-8f9e-6437b1c0639d" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9e32d4b-e0e6-3384-8896-6057af61b614" locEndPos="18" locType="sr" hash="65740504" locEndLn="25" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="26" locFile="/build/../../../../../../../../driver.c" locStartln="26" sev="3" auth="username" locRef="2" rule="CODSTA-122_a" lnHash="-1234703117" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1234703117" unbViolId="5e0e64ea-d206-3e89-957f-e2b8d32bf681" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10314bff-7bd9-3250-8704-25351d155f89" locEndPos="5" locType="sr" hash="65740504" locEndLn="26" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="26" locFile="/build/../../../../../../../../driver.c" locStartln="26" sev="1" auth="username" locRef="2" rule="CERT_C-ERR33-a" lnHash="-1234703117" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1234703117" unbViolId="048fe0bd-8d02-3f3f-8e9d-e2f4d077866e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68434d84-97ca-354f-9414-6831cd2706a3" locEndPos="5" locType="sr" hash="65740504" locEndLn="26" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="26" locFile="/build/../../../../../../../../driver.c" locStartln="26" sev="1" auth="username" locRef="2" rule="CERT_C-POS54-a" lnHash="-1234703117" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1234703117" unbViolId="823c3786-5e0d-37fb-b157-34fe306568be" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da264926-f1e5-305c-8c7b-af3782bc9621" locEndPos="5" locType="sr" hash="65740504" locEndLn="26" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="26" locFile="/build/../../../../../../../../driver.c" locStartln="26" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="-1234703117" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1234703117" unbViolId="71a7397a-5b78-3e70-ab7d-1bad385f6411" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a37b614-b765-382b-a20b-e1aea3386630" locEndPos="5" locType="sr" hash="65740504" locEndLn="26" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="26" locFile="/build/../../../../../../../../driver.c" locStartln="26" sev="3" auth="username" locRef="2" rule="CERT_C-EXP12-a" lnHash="-1234703117" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1234703117" unbViolId="4bac1431-98f9-3033-9404-2db8798b3a52" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31f4680e-daa6-36c4-8f94-f2c54271745f" locEndPos="5" locType="sr" hash="65740504" locEndLn="26" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="26" locFile="/build/../../../../../../../../driver.c" locStartln="26" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-17_7_a" lnHash="-1234703117" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1234703117" unbViolId="6f1d53a4-2fd4-378c-b231-3a988665041a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="82f263db-27a0-35c1-baf7-53d8e82f5e83" locEndPos="5" locType="sr" hash="65740504" locEndLn="26" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="26" locFile="/build/../../../../../../../../driver.c" locStartln="26" sev="3" auth="username" locRef="2" rule="MISRA2004-16_10" lnHash="-1234703117" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1234703117" unbViolId="a517f560-ea95-3f22-a980-c82f3c4704b0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dcdc31e4-6ea7-3c49-bab2-b648d73cd0de" locEndPos="5" locType="sr" hash="65740504" locEndLn="26" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="26" locFile="/build/../../../../../../../../driver.c" locStartln="26" sev="2" auth="username" locRef="2" rule="AUTOSAR-M0_3_2-a" lnHash="-1234703117" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1234703117" unbViolId="3b4fbc9a-4aba-3f90-94f6-a2b59bd41c18" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fcb8c820-1e66-30af-ad79-87f3a28abaa5" locEndPos="5" locType="sr" hash="65740504" locEndLn="26" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="26" locFile="/build/../../../../../../../../driver.c" locStartln="26" sev="2" auth="username" locRef="2" rule="MISRA2008-0_3_2" lnHash="-1234703117" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1234703117" unbViolId="aa5ef15d-e49b-35d1-b819-e14bcf131180" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d48095c-1793-3cf1-933e-acf2bc176041" locEndPos="5" locType="sr" hash="65740504" locEndLn="26" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="26" locFile="/build/../../../../../../../../driver.c" locStartln="26" sev="3" auth="username" locRef="2" rule="JSF-115" lnHash="-1234703117" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-1234703117" unbViolId="08882879-f02a-33a8-aaf8-7929e31d47fd" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0a0e27e-b05a-3bc4-ab6d-5f42df5d372a" locEndPos="5" locType="sr" hash="65740504" locEndLn="26" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: **************************************************" ln="26" locFile="/build/../../../../../../../../driver.c" locStartln="26" sev="5" auth="username" locRef="2" rule="CWE-798-a" lnHash="-1234703117" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1234703117" unbViolId="74abc6d3-4ebd-3293-b3e5-b08ffc1f5a56" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2532c03d-d8ec-34a1-b20c-c95f59197041" locEndPos="18" locType="sr" hash="65740504" locEndLn="26" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: **************************************************" ln="26" locFile="/build/../../../../../../../../driver.c" locStartln="26" sev="5" auth="username" locRef="2" rule="CODSTA-203" lnHash="-1234703117" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1234703117" unbViolId="98451e65-cad9-360a-83f7-f2cec4cacc0d" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f4aa08a-82e8-3374-8fc0-7b669446fef9" locEndPos="18" locType="sr" hash="65740504" locEndLn="26" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: **************************************************" ln="26" locFile="/build/../../../../../../../../driver.c" locStartln="26" sev="1" auth="username" locRef="2" rule="APSC_DV-003110-a" lnHash="-1234703117" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1234703117" unbViolId="904d1135-15e1-3bd2-be35-74bf21fbbd04" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="087b2912-1cd5-3d87-9635-f381d069ed68" locEndPos="18" locType="sr" hash="65740504" locEndLn="26" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: **************************************************" ln="26" locFile="/build/../../../../../../../../driver.c" locStartln="26" sev="1" auth="username" locRef="2" rule="CERT_C-MSC41-a" lnHash="-1234703117" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1234703117" unbViolId="d4e59c03-68a9-37d9-a9c7-5dc273212126" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dbdae3bb-28b2-388b-98e8-8bb1c1a8ee7e" locEndPos="18" locType="sr" hash="65740504" locEndLn="26" goals="0," />
    <StdViol msg="String literal &quot;**************************************************&quot; is passed to function 'print_string' as pointer to non-const object" ln="26" locFile="/build/../../../../../../../../driver.c" locStartln="26" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="-1234703117" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1234703117" unbViolId="15a63d6e-ff35-3093-862e-863da601afea" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06aa3f31-40ea-3c3e-8be6-a8babf3b0bc3" locEndPos="18" locType="sr" hash="65740504" locEndLn="26" goals="0," />
    <StdViol msg="String literal &quot;**************************************************&quot; is passed to function 'print_string' as pointer to non-const object" ln="26" locFile="/build/../../../../../../../../driver.c" locStartln="26" sev="2" auth="username" locRef="2" rule="AUTOSAR-A2_13_4-a" lnHash="-1234703117" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1234703117" unbViolId="1ceb33eb-04a9-3f43-bbfa-c65eee866f20" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f469db2d-3ced-3680-b26b-c1b2df762b4f" locEndPos="18" locType="sr" hash="65740504" locEndLn="26" goals="0," />
    <StdViol msg="String literal &quot;**************************************************&quot; is passed to function 'print_string' as pointer to non-const object" ln="26" locFile="/build/../../../../../../../../driver.c" locStartln="26" sev="2" auth="username" locRef="2" rule="JSF-151.1" lnHash="-1234703117" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1234703117" unbViolId="ecc01ca4-82d8-3ae8-b683-0a09330d3141" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22ed72c1-398d-3a8d-bb1e-ca027bffa57e" locEndPos="18" locType="sr" hash="65740504" locEndLn="26" goals="0," />
    <StdViol msg="String literal &quot;**************************************************&quot; is passed to function 'print_string' as pointer to non-const object" ln="26" locFile="/build/../../../../../../../../driver.c" locStartln="26" sev="2" auth="username" locRef="2" rule="PB-27" lnHash="-1234703117" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1234703117" unbViolId="7d94e62b-a068-3e15-b35c-0bd36ae9374b" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab3eb4c2-e1e8-3b42-ab30-41a0bf73b595" locEndPos="18" locType="sr" hash="65740504" locEndLn="26" goals="0," />
    <StdViol msg="String literal &quot;**************************************************&quot; is passed to function 'print_string' as pointer to non-const object" ln="26" locFile="/build/../../../../../../../../driver.c" locStartln="26" sev="3" auth="username" locRef="2" rule="CERT_C-STR05-a" lnHash="-1234703117" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1234703117" unbViolId="29f25846-91e2-3c22-88a5-95e1ad31b134" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75f1dfb3-dce2-31f1-804b-c9fb866784ca" locEndPos="18" locType="sr" hash="65740504" locEndLn="26" goals="0," />
    <StdViol msg="String literal &quot;**************************************************&quot; is passed to function 'print_string' as pointer to non-const object" ln="26" locFile="/build/../../../../../../../../driver.c" locStartln="26" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-7_4" lnHash="-1234703117" rule.header="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" tool="c++test" lineHash="-1234703117" unbViolId="8a169031-c046-32c7-94d4-41173e346cff" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="277f343f-1583-3d62-842c-37933cb38ea6" locEndPos="18" locType="sr" hash="65740504" locEndLn="26" goals="0," />
    <StdViol msg="String literal &quot;**************************************************&quot; is passed to function 'print_string' as pointer to non-const object" ln="26" locFile="/build/../../../../../../../../driver.c" locStartln="26" sev="2" auth="username" locRef="2" rule="CERT_C-STR30-a" lnHash="-1234703117" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1234703117" unbViolId="12304ec6-4e26-3529-a9dc-62b6da12d507" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18292d98-f5f4-3b1a-a64e-346015084691" locEndPos="18" locType="sr" hash="65740504" locEndLn="26" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="28" locFile="/build/../../../../../../../../driver.c" locStartln="28" sev="3" auth="username" locRef="2" rule="CODSTA-122_a" lnHash="-859906268" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-859906268" unbViolId="1d8b80e8-2bae-3d74-92b3-db9613ccd071" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="398313ec-5ab0-3eeb-9d30-be1c8601ee97" locEndPos="5" locType="sr" hash="65740504" locEndLn="28" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="28" locFile="/build/../../../../../../../../driver.c" locStartln="28" sev="1" auth="username" locRef="2" rule="CERT_C-ERR33-a" lnHash="-859906268" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-859906268" unbViolId="c0ca8b49-a504-3379-9a61-b4b40a8ca6ee" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74f2d48b-0d1a-3d63-b48f-70ebed530937" locEndPos="5" locType="sr" hash="65740504" locEndLn="28" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="28" locFile="/build/../../../../../../../../driver.c" locStartln="28" sev="1" auth="username" locRef="2" rule="CERT_C-POS54-a" lnHash="-859906268" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-859906268" unbViolId="c3888ed0-8b2d-372e-813e-70040b40eda1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bff6858d-2496-3db1-8c09-b7a095b74853" locEndPos="5" locType="sr" hash="65740504" locEndLn="28" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="28" locFile="/build/../../../../../../../../driver.c" locStartln="28" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="-859906268" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-859906268" unbViolId="4a601e1f-9d02-3408-b9c1-04b7ebcfd121" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc5f43be-008f-3571-947c-fe710cb0c598" locEndPos="5" locType="sr" hash="65740504" locEndLn="28" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="28" locFile="/build/../../../../../../../../driver.c" locStartln="28" sev="3" auth="username" locRef="2" rule="CERT_C-EXP12-a" lnHash="-859906268" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-859906268" unbViolId="4b461c4c-8d4f-3d6a-b3b3-293ae235e055" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf233939-a97f-30e2-ab9b-f1a49ec1c857" locEndPos="5" locType="sr" hash="65740504" locEndLn="28" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="28" locFile="/build/../../../../../../../../driver.c" locStartln="28" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-17_7_a" lnHash="-859906268" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-859906268" unbViolId="1e2627f9-f55b-36f1-845b-099266dfae80" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10cab716-bea2-30c7-be4d-25a6684c3de6" locEndPos="5" locType="sr" hash="65740504" locEndLn="28" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="28" locFile="/build/../../../../../../../../driver.c" locStartln="28" sev="3" auth="username" locRef="2" rule="MISRA2004-16_10" lnHash="-859906268" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-859906268" unbViolId="b172c5d1-e72d-33b8-976d-d9b9010045de" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e72036d3-eab8-34fd-a705-604dfc4cfee7" locEndPos="5" locType="sr" hash="65740504" locEndLn="28" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="28" locFile="/build/../../../../../../../../driver.c" locStartln="28" sev="2" auth="username" locRef="2" rule="AUTOSAR-M0_3_2-a" lnHash="-859906268" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-859906268" unbViolId="72e40264-e647-31fa-ad9a-1d170f590fc8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e013878-8f2a-3de7-a67c-56ad0708024f" locEndPos="5" locType="sr" hash="65740504" locEndLn="28" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="28" locFile="/build/../../../../../../../../driver.c" locStartln="28" sev="2" auth="username" locRef="2" rule="MISRA2008-0_3_2" lnHash="-859906268" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-859906268" unbViolId="5aad6625-75dc-3219-9685-2e5b90dd1cce" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d14bd5e-8da3-3452-998a-4d7d3eb58f15" locEndPos="5" locType="sr" hash="65740504" locEndLn="28" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="28" locFile="/build/../../../../../../../../driver.c" locStartln="28" sev="3" auth="username" locRef="2" rule="JSF-115" lnHash="-859906268" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-859906268" unbViolId="920320b7-de87-398d-8f53-a63124b39433" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dffb32b4-a12e-3b97-b3cb-69e14bbe1f4b" locEndPos="5" locType="sr" hash="65740504" locEndLn="28" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Enter selection, when done press &lt;enter> > " ln="28" locFile="/build/../../../../../../../../driver.c" locStartln="28" sev="5" auth="username" locRef="2" rule="CWE-798-a" lnHash="-859906268" rule.header="Do not hard code string literals" tool="c++test" lineHash="-859906268" unbViolId="f4b2df25-6300-3b50-8ca2-642745d4422a" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c0e4287-1f4a-3f8e-bc3f-27844cbe0867" locEndPos="18" locType="sr" hash="65740504" locEndLn="28" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Enter selection, when done press &lt;enter> > " ln="28" locFile="/build/../../../../../../../../driver.c" locStartln="28" sev="5" auth="username" locRef="2" rule="CODSTA-203" lnHash="-859906268" rule.header="Do not hard code string literals" tool="c++test" lineHash="-859906268" unbViolId="71cde840-e7e1-3c9a-926c-491889e85671" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bdb86f92-232c-3680-9ffb-3b6fbbce0d63" locEndPos="18" locType="sr" hash="65740504" locEndLn="28" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Enter selection, when done press &lt;enter> > " ln="28" locFile="/build/../../../../../../../../driver.c" locStartln="28" sev="1" auth="username" locRef="2" rule="APSC_DV-003110-a" lnHash="-859906268" rule.header="Do not hard code string literals" tool="c++test" lineHash="-859906268" unbViolId="29730583-7b21-36d7-bdd2-8ba49f98f4df" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="49e7537e-aaf5-3c21-a1cd-9d547d313cbe" locEndPos="18" locType="sr" hash="65740504" locEndLn="28" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Enter selection, when done press &lt;enter> > " ln="28" locFile="/build/../../../../../../../../driver.c" locStartln="28" sev="1" auth="username" locRef="2" rule="CERT_C-MSC41-a" lnHash="-859906268" rule.header="Do not hard code string literals" tool="c++test" lineHash="-859906268" unbViolId="a8a86be7-820b-3593-8481-208cc16ba043" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="feb11272-11f0-3a86-982f-9b3d820e3ee9" locEndPos="18" locType="sr" hash="65740504" locEndLn="28" goals="0," />
    <StdViol msg="String literal &quot;Enter selection, when done press &lt;enter> > &quot; is passed to function 'print_string' as pointer to non-const object" ln="28" locFile="/build/../../../../../../../../driver.c" locStartln="28" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="-859906268" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-859906268" unbViolId="c3376b5f-14d5-399d-b635-30f98bfc4ece" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a74fa92c-8eaf-3df1-bcee-327ce87fdb7c" locEndPos="18" locType="sr" hash="65740504" locEndLn="28" goals="0," />
    <StdViol msg="String literal &quot;Enter selection, when done press &lt;enter> > &quot; is passed to function 'print_string' as pointer to non-const object" ln="28" locFile="/build/../../../../../../../../driver.c" locStartln="28" sev="2" auth="username" locRef="2" rule="AUTOSAR-A2_13_4-a" lnHash="-859906268" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-859906268" unbViolId="0dec2f3d-33d8-3f2a-be7b-e30ce5959181" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6efb64af-0805-3488-9b33-8bc95dcb91cd" locEndPos="18" locType="sr" hash="65740504" locEndLn="28" goals="0," />
    <StdViol msg="String literal &quot;Enter selection, when done press &lt;enter> > &quot; is passed to function 'print_string' as pointer to non-const object" ln="28" locFile="/build/../../../../../../../../driver.c" locStartln="28" sev="2" auth="username" locRef="2" rule="JSF-151.1" lnHash="-859906268" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-859906268" unbViolId="3a6dbabb-0a51-38d1-aa5a-948c61cf042a" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6bbb240-b36a-31da-8c5a-5af0b6910fb8" locEndPos="18" locType="sr" hash="65740504" locEndLn="28" goals="0," />
    <StdViol msg="String literal &quot;Enter selection, when done press &lt;enter> > &quot; is passed to function 'print_string' as pointer to non-const object" ln="28" locFile="/build/../../../../../../../../driver.c" locStartln="28" sev="2" auth="username" locRef="2" rule="PB-27" lnHash="-859906268" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-859906268" unbViolId="3d35498f-0642-3dba-8ab1-dab33d29784c" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7540028c-eb45-3ed9-a221-c610472e5655" locEndPos="18" locType="sr" hash="65740504" locEndLn="28" goals="0," />
    <StdViol msg="String literal &quot;Enter selection, when done press &lt;enter> > &quot; is passed to function 'print_string' as pointer to non-const object" ln="28" locFile="/build/../../../../../../../../driver.c" locStartln="28" sev="3" auth="username" locRef="2" rule="CERT_C-STR05-a" lnHash="-859906268" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-859906268" unbViolId="db6dc5d3-1ed8-3f06-bc13-0ab84e9a6a67" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba5b3ed4-be30-34d3-afc3-d5adaa39b796" locEndPos="18" locType="sr" hash="65740504" locEndLn="28" goals="0," />
    <StdViol msg="String literal &quot;Enter selection, when done press &lt;enter> > &quot; is passed to function 'print_string' as pointer to non-const object" ln="28" locFile="/build/../../../../../../../../driver.c" locStartln="28" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-7_4" lnHash="-859906268" rule.header="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" tool="c++test" lineHash="-859906268" unbViolId="aa87812c-e35d-3de6-8517-fde309783ee0" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c06c08f-948e-3b07-b9ad-fe9897542555" locEndPos="18" locType="sr" hash="65740504" locEndLn="28" goals="0," />
    <StdViol msg="String literal &quot;Enter selection, when done press &lt;enter> > &quot; is passed to function 'print_string' as pointer to non-const object" ln="28" locFile="/build/../../../../../../../../driver.c" locStartln="28" sev="2" auth="username" locRef="2" rule="CERT_C-STR30-a" lnHash="-859906268" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-859906268" unbViolId="172e75c4-8d48-38f1-aeb6-e6bb5de6f957" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c0a48d9-dad1-3e01-b5df-c3cf840cc6d2" locEndPos="18" locType="sr" hash="65740504" locEndLn="28" goals="0," />
    <StdViol msg="Remove spaces between the 'return' operator and the opening parenthesis" ln="29" locFile="/build/../../../../../../../../driver.c" locStartln="29" sev="3" auth="username" locRef="2" rule="FORMAT-23" lnHash="-495843510" rule.header="There shall be no white spaces between the 'return' statement or the 'sizeof' operator and the following opening parenthesis" tool="c++test" lineHash="-495843510" unbViolId="17e02b92-3244-359a-be0e-33c04bfde15c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="57cf29da-0572-3f42-824b-d82ecd455af8" locEndPos="5" locType="sr" hash="65740504" locEndLn="29" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="29" locFile="/build/../../../../../../../../driver.c" locStartln="29" sev="3" auth="username" locRef="2" rule="CERT_C-EXP37-d" lnHash="-495843510" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-495843510" unbViolId="eae18baf-548e-35db-8446-c5a503171807" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bccd925a-80a3-3e09-9646-bef7cbaa30fb" locEndPos="13" locType="sr" hash="65740504" locEndLn="29" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="29" locFile="/build/../../../../../../../../driver.c" locStartln="29" sev="1" auth="username" locRef="2" rule="MISRA2012-RULE-17_3" lnHash="-495843510" rule.header="A function shall not be declared implicitly" tool="c++test" lineHash="-495843510" unbViolId="7b0f287d-572b-3133-a900-0e9edf83fa15" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a90601f-7356-3bb3-91c2-8a91b638f6e3" locEndPos="13" locType="sr" hash="65740504" locEndLn="29" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="29" locFile="/build/../../../../../../../../driver.c" locStartln="29" sev="3" auth="username" locRef="2" rule="MISRA2004-8_1_b" lnHash="-495843510" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-495843510" unbViolId="ba190204-c104-32e3-9511-5fbd49435e30" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="749e3784-25e9-3ba2-819f-70676d2175f0" locEndPos="13" locType="sr" hash="65740504" locEndLn="29" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="29" locFile="/build/../../../../../../../../driver.c" locStartln="29" sev="3" auth="username" locRef="2" rule="MISRA-071_b" lnHash="-495843510" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-495843510" unbViolId="a89e2387-a558-3a1f-91bf-e2f1b7a664c2" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="19c503b7-4049-335a-87fb-98c6dae3e4cc" locEndPos="13" locType="sr" hash="65740504" locEndLn="29" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="29" locFile="/build/../../../../../../../../driver.c" locStartln="29" sev="1" auth="username" locRef="2" rule="MISRAC2012-RULE_17_3-a" lnHash="-495843510" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-495843510" unbViolId="43c7afa8-452a-361c-aec5-4f883fbb1beb" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22e542f5-6370-3f02-9174-637a4abf1d8d" locEndPos="13" locType="sr" hash="65740504" locEndLn="29" goals="0," />
    <StdViol msg="R-3119: use of non-prototype function declarator" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="5" auth="username" locRef="2" rule="PARSER-REMARK" lnHash="2093791071" rule.header="Parser remark" tool="c++test" lineHash="2093791071" unbViolId="84fa4293-5882-36ad-a0cb-b20fb2d2ee16" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1e272f2-2d54-3a97-a307-0ca68cdaf4de" locEndPos="6" locType="sr" urgent="true" hash="65740504" locEndLn="32" goals="1," />
    <StdViol msg="Prototype of function 'main_loop' does not precede function definition" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_8_4-a" lnHash="2093791071" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="2093791071" unbViolId="3c6f81b2-bc39-34c0-9bb5-b93079dcaccb" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="53682f42-f814-3b68-9ff3-71bbb1269e13" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="Prototype of function 'main_loop' does not precede function definition" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-8_4_a" lnHash="2093791071" rule.header="A compatible declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="2093791071" unbViolId="223a1b64-2498-3c16-8048-43dae9d80ecc" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1504cae-a4d3-3c3d-883e-68158c524d80" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="Prototype of function 'main_loop' does not precede function definition" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="3" auth="username" locRef="2" rule="CODSTA-118" lnHash="2093791071" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="2093791071" unbViolId="e19082a3-a8e8-370a-843a-0ec51a1e554d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="edcb857c-1a51-3fa3-8f01-729ec3571f29" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="The definition of the 'main_loop' function is not preceded by a comment" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="3" auth="username" locRef="2" rule="COMMENT-04" lnHash="2093791071" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="2093791071" unbViolId="6a8b1c23-dc24-3453-8583-e132f162dde3" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a26caaf9-1d71-3b57-b528-9a6817b9b8fd" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="The definition of the 'main_loop' function is not preceded by a comment" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="4" auth="username" locRef="2" rule="JSF-134" lnHash="2093791071" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="2093791071" unbViolId="12106c03-eb3c-3983-a662-9234f288c4b6" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9db74cf6-cffc-36b8-a47a-d64baac42928" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="Function 'main_loop' has external linkage and is not declared in the header" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="4" auth="username" locRef="2" rule="OWASP2019-API9-e" lnHash="2093791071" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2093791071" unbViolId="ebb1312a-be5e-345e-b0ff-7c4b6c88988c" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47b53076-e69a-3d56-b1da-aaae8cb49fba" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="Function 'main_loop' has external linkage and is not declared in the header" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="2" auth="username" locRef="2" rule="AUTOSAR-A3_3_1-a" lnHash="2093791071" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2093791071" unbViolId="56e59484-60e7-3b2d-b542-1eb3708439ce" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac5e4c02-dae7-3b35-8bcf-95615a8402ed" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="Function 'main_loop' has external linkage and is not declared in the header" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="4" auth="username" locRef="2" rule="JSF-137" lnHash="2093791071" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="2093791071" unbViolId="002be367-dd0c-3c05-89c9-00a2722fe885" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a920f12-12d7-3bd6-a380-a9b219dd005c" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="Function 'main_loop' has external linkage and is not declared in the header" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="4" auth="username" locRef="2" rule="MISRA-023" lnHash="2093791071" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2093791071" unbViolId="784eff8c-eb13-362c-8088-1ebecfba03a3" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2103780c-42a9-3509-83ac-71b2cb9246eb" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="Function 'main_loop' has external linkage and is not declared in the header" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="2" auth="username" locRef="2" rule="MISRA2008-3_3_1" lnHash="2093791071" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2093791071" unbViolId="2e6a797d-d9b4-382d-89c9-887c58e43480" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48ce7f0c-f6b3-3765-826b-3f1f4557f3be" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="Function 'main_loop' has external linkage and is not declared in the header" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="3" auth="username" locRef="2" rule="CERT_C-DCL15-a" lnHash="2093791071" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2093791071" unbViolId="e5507b3e-df38-3f4f-8ffe-59146230debe" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c16e626f-bb9b-33ca-97cc-45af34e4c520" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="Function 'main_loop' has external linkage and is not declared in the header" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="4" auth="username" locRef="2" rule="MISRA2004-8_10" lnHash="2093791071" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2093791071" unbViolId="b4435707-fdf0-3555-8279-0213a9d5c9d7" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f1ee846-36ae-3a27-b752-bc666072df8c" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="Prototype of function 'main_loop' does not precede function definition" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="3" auth="username" locRef="2" rule="MISRA2004-8_1_a" lnHash="2093791071" rule.header="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" tool="c++test" lineHash="2093791071" unbViolId="a08a9a41-5f92-367d-a804-953fd37f4030" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6e37483-d26b-30d6-97cc-f3413c70b4bf" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="Prototype of function 'main_loop' does not precede function definition" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="3" auth="username" locRef="2" rule="MISRA-071_a" lnHash="2093791071" rule.header="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" tool="c++test" lineHash="2093791071" unbViolId="95cdfdc0-c2d1-3235-adf1-7666c30d3d73" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1185fd5e-1228-31fa-aecb-a93c1969fa14" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="Function 'main_loop' is not in prototype form" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_8_2-c" lnHash="2093791071" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="2093791071" unbViolId="11c436aa-da9b-3c6e-81a9-46d97445622d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc3d596b-5017-3a32-bb67-c034eadfa6b7" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="Function 'main_loop' is not in prototype form" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="3" auth="username" locRef="2" rule="CERT_C-EXP37-c" lnHash="2093791071" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="2093791071" unbViolId="2e40cf46-f3f6-3cd3-994c-f94b73784d4c" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4dac3b1-4a2c-3044-9250-400d02ab9263" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="Function 'main_loop' is not in prototype form" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-8_2_c" lnHash="2093791071" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="2093791071" unbViolId="67ad004b-2ea5-3f45-adde-6d99121e03b2" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="72e37b79-c39c-35c3-88e2-12d1be1c1ce2" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="Function 'main_loop' is not in prototype form" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="3" auth="username" locRef="2" rule="CODSTA-159" lnHash="2093791071" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="2093791071" unbViolId="6d1b6c87-66ec-3986-a8c5-85a7b5adf1ea" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a7616f8-0332-31aa-aeb5-550cd6e1aa6b" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="The 'main_loop' function should be preceded by a comment that contains the '@brief' tag" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="3" auth="username" locRef="2" rule="COMMENT-14" lnHash="2093791071" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="2093791071" unbViolId="07fc0a02-41d9-3e93-8b8a-b63d6347ea38" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="15ed4cc9-6a08-34d7-8029-b3d156b7f137" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="The 'main_loop' function should be preceded by a comment that contains the '@brief' tag" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="2" auth="username" locRef="2" rule="AUTOSAR-A2_7_3-a" lnHash="2093791071" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="2093791071" unbViolId="7ebf6d72-d0d8-318b-8f83-c4370e3c1678" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cbbf5c7d-af4c-38b6-9bc2-af80688f8cda" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="Function 'main_loop' has empty parameter list" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="3" auth="username" locRef="2" rule="CODSTA-40" lnHash="2093791071" rule.header="'void' should be used when a function is passed or returns no values" tool="c++test" lineHash="2093791071" unbViolId="cc8a3fac-46d7-3506-b66e-3aab87e6489c" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7bdf154c-be07-3cef-a2b2-58a568549d53" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'main_loop'" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="3" auth="username" locRef="2" rule="FORMAT-28" lnHash="2093791071" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="2093791071" unbViolId="6e5e878d-ee83-36ce-9247-4f095ae35bca" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e074d2c8-14fe-35b4-9ff9-7157a5f19e77" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="Function 'main_loop' has 11 function calls" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="3" auth="username" locRef="2" rule="METRICS-04" lnHash="2093791071" rule.header="Number of function calls within function" tool="c++test" lineHash="2093791071" unbViolId="c1ab1ba4-2915-325b-9f4a-3539b7515da6" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71b2f77e-907e-38ad-97e8-48e9529389dd" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="Function 'main_loop' has Cyclomatic Complexity value: 8" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="5" auth="username" locRef="2" rule="METRICS-29" lnHash="2093791071" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="2093791071" unbViolId="60f8d9e6-b569-352e-b8a5-66526497a93e" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a4f14d3-f0fb-347b-8c1c-17a543b5066f" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="Function 'main_loop' has Essential Complexity value: 7" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="5" auth="username" locRef="2" rule="METRICS-33" lnHash="2093791071" rule.header="Report Essential Complexity" tool="c++test" lineHash="2093791071" unbViolId="26001dc6-2482-35ad-90c6-f244232f85b1" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="991428a9-3089-37b4-b69d-030af235e876" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="Function 'main_loop' has high Essential Complexity value: 7" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="5" auth="username" locRef="2" rule="METRICS-34" lnHash="2093791071" rule.header="Follow the Essential Complexity limit of 4" tool="c++test" lineHash="2093791071" unbViolId="92dc64ec-0888-3c90-a497-eb03f7b81379" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8dcb8925-690d-34ba-939f-f5e9aa328cbb" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="Number of blocks of comments per statement in the function 'main_loop' : 0.11" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="3" auth="username" locRef="2" rule="METRICS-41" lnHash="2093791071" rule.header="The number of blocks of comments before and inside function to the number of statements in function should be > 0.2" tool="c++test" lineHash="2093791071" unbViolId="1b5cc4e5-ffa1-3b1d-9f25-eddda3e81a4d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2860240-6ac6-3aa4-bc42-e6f4241ffab9" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="Function 'main_loop' has high Essential Complexity value: 7" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="2" auth="username" locRef="2" rule="JSF-003_b" lnHash="2093791071" rule.header="Follow the Essential Complexity limit of 1" tool="c++test" lineHash="2093791071" unbViolId="43a5c560-f922-3cb7-a765-3b0018db5c91" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a9241b5-1d7d-3bb4-8591-e5b3f905495d" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="Function 'main_loop' has high Essential Complexity value: 7" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="5" auth="username" locRef="2" rule="METRICS-42" lnHash="2093791071" rule.header="Follow the Essential Complexity limit of 1" tool="c++test" lineHash="2093791071" unbViolId="45618437-66db-3ec1-8b6d-f2914b2a552d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="58eeb5ba-9667-3470-a7b5-e98538dda4e7" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="The value of Halstead's delivered bugs (B) for function 'main_loop' is 0.15" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="3" auth="username" locRef="2" rule="METRICS-43" lnHash="2093791071" rule.header="Report the value of Halstead's delivered bugs (B) for a function" tool="c++test" lineHash="2093791071" unbViolId="cf40fc21-b77f-359a-94fb-89ba6d8303b2" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ff4379a-2652-3d94-9eff-caf6334920a0" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="Declare function 'main_loop' with parameter type void" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="3" auth="username" locRef="2" rule="MISRA2004-16_5" lnHash="2093791071" rule.header="Functions with no parameters shall be declared with parameter type void" tool="c++test" lineHash="2093791071" unbViolId="02331fab-262d-31ef-af3e-f1aa342f8320" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca1d6e9b-0a1c-3b7f-8834-f55be11605d9" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="Naming convention not followed: main_loop" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="3" auth="username" locRef="2" rule="NAMING-17" lnHash="2093791071" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="2093791071" unbViolId="ac156981-1068-3fff-8b2a-9d4b8140a813" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c564ba17-99c0-3c7e-b40a-49db96bbe249" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="The function 'main_loop' is referenced only in the translation unit where it is defined" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="4" auth="username" locRef="2" rule="MISRA2012-RULE-8_7" lnHash="2093791071" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="2093791071" unbViolId="8159ea6f-4e21-3db0-becf-0fd70b420800" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="1cf9b8c6-f80b-33d8-ad43-773d673d9a0a" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="The function 'main_loop' is referenced only in the translation unit where it is defined" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="4" auth="username" locRef="2" rule="GLOBAL-AVOIDEXTERN" lnHash="2093791071" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="2093791071" unbViolId="33f6c1e3-62ca-3210-a9bd-76cc6e8645cd" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="6074773b-cde8-3eb6-b65d-5b09d73a5b38" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="The function 'main_loop' is referenced only in the translation unit where it is defined" ln="32" locFile="/build/../../../../../../../../driver.c" locStartln="32" sev="4" auth="username" locRef="2" rule="MISRAC2012-RULE_8_7-a" lnHash="2093791071" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="2093791071" unbViolId="044db50a-7d0e-3083-8c89-1e79dfb317d4" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="287e758b-4379-3b4f-b534-177456c9861c" locEndPos="6" locType="sr" hash="65740504" locEndLn="32" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 5" ln="33" locFile="/build/../../../../../../../../driver.c" locStartln="33" sev="3" auth="username" locRef="2" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="7d532c27-2318-3dbb-ae36-82f23c65e05d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b93df3d7-9daf-3e32-b0d0-7063b7208028" locEndPos="1" locType="sr" hash="65740504" locEndLn="33" goals="0," />
    <StdViol msg="The function 'main_loop' has more than 20 lines and less than 2 assertions" ln="33" locFile="/build/../../../../../../../../driver.c" locStartln="33" sev="3" auth="username" locRef="2" rule="METRICS-32" lnHash="123" rule.header="All functions with more than 20 lines should contain at least 2 assertions" tool="c++test" lineHash="123" unbViolId="d1b873dc-6db8-3598-b086-003020127cde" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a90dedd8-da63-3788-ab88-b7a412c4b9a4" locEndPos="1" locType="sr" hash="65740504" locEndLn="33" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="34" locFile="/build/../../../../../../../../driver.c" locStartln="34" sev="3" auth="username" locRef="2" rule="JSF-061" lnHash="1823244012" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1823244012" unbViolId="5cf10ad0-8db5-3e4f-85bf-9552d0081793" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd3f50f7-f307-3898-aabf-357856fd9bd2" locEndPos="1" locType="sr" hash="65740504" locEndLn="34" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="34" locFile="/build/../../../../../../../../driver.c" locStartln="34" sev="3" auth="username" locRef="2" rule="FORMAT-42" lnHash="1823244012" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1823244012" unbViolId="fd7e3cc4-8bc2-3617-8bc9-d8777b3408e9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="271660fb-c724-3275-b813-24a864ed3bdc" locEndPos="1" locType="sr" hash="65740504" locEndLn="34" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="34" locFile="/build/../../../../../../../../driver.c" locStartln="34" sev="3" auth="username" locRef="2" rule="JSF-060_a" lnHash="1823244012" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1823244012" unbViolId="824564b6-f5f7-37a4-8a7c-1fb79205c26d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f741375-138a-3281-94df-bc741f561387" locEndPos="1" locType="sr" hash="65740504" locEndLn="34" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="34" locFile="/build/../../../../../../../../driver.c" locStartln="34" sev="3" auth="username" locRef="2" rule="FORMAT-43" lnHash="1823244012" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="1823244012" unbViolId="efefc5a3-ab2b-37a3-be0d-e4cd018ec992" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e45360d2-f448-3144-a0e3-9a233e20b036" locEndPos="1" locType="sr" hash="65740504" locEndLn="34" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="34" locFile="/build/../../../../../../../../driver.c" locStartln="34" sev="3" auth="username" locRef="2" rule="JSF-060_b" lnHash="1823244012" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="1823244012" unbViolId="5d1af8d7-cc9b-3e47-b481-6c3a5fd703ff" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c71f589-73a0-3b64-951e-d453ad89f2d1" locEndPos="1" locType="sr" hash="65740504" locEndLn="34" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="34" locFile="/build/../../../../../../../../driver.c" locStartln="34" sev="3" auth="username" locRef="2" rule="FORMAT-02" lnHash="1823244012" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="1823244012" unbViolId="211740ac-8381-3c80-aae7-c24a05474598" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18d60016-796c-3f5f-a6cf-1f3f2cf5f56c" locEndPos="1" locType="sr" hash="65740504" locEndLn="34" goals="0," />
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="34" locFile="/build/../../../../../../../../driver.c" locStartln="34" sev="3" auth="username" locRef="2" rule="FORMAT-34" lnHash="1823244012" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="1823244012" unbViolId="c5245ae5-5e6b-34d7-a08c-8a55500c34b9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b04c28c7-4b98-3e0c-a030-5551c5e87770" locEndPos="1" locType="sr" hash="65740504" locEndLn="34" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="4" auth="username" locRef="2" rule="MISRA2008-3_9_2" lnHash="1236489322" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1236489322" unbViolId="6e3f8863-5b77-3ae0-bb6a-9cdc33b5d4a4" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0727567-a999-314e-8005-750d90cd317a" locEndPos="9" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="MISRA-013" lnHash="1236489322" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1236489322" unbViolId="412aa5b6-7beb-3fa6-82ed-6b9a8e8cde38" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fea73539-2f74-3c78-83ed-b3e4e76b9a60" locEndPos="9" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="CODSTA-223" lnHash="1236489322" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1236489322" unbViolId="9ebd8aac-ccd0-3849-8442-6a7b5831d5b2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bdc35818-b663-3a09-9cd8-e4f92f308794" locEndPos="9" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="2" auth="username" locRef="2" rule="AUTOSAR-A3_9_1-b" lnHash="1236489322" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1236489322" unbViolId="b0b07d38-3abf-3c73-aff5-07f8b7bec50f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3227990-0a8d-3b1f-b36a-a7bd6736829a" locEndPos="9" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="HICPP-7_1_6-b" lnHash="1236489322" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="1236489322" unbViolId="3a879ac0-2fec-39f4-b526-38f40273bf1e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="960677c2-b708-3126-bd47-3f373fb34fe9" locEndPos="9" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="4" auth="username" locRef="2" rule="MISRAC2012-DIR_4_6-b" lnHash="1236489322" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1236489322" unbViolId="c79b9404-b37e-38c5-ae61-f0c715d83a36" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9191f78-e10e-3188-8577-3af63ab419f8" locEndPos="9" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="MISRA2004-6_3_b" lnHash="1236489322" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1236489322" unbViolId="69281a60-40b5-3ff7-97e5-7ad5c95389c5" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="682fb7da-2a24-36d0-88f1-7fdd57136ed1" locEndPos="9" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="2" auth="username" locRef="2" rule="JSF-209_b" lnHash="1236489322" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1236489322" unbViolId="5ec62881-45c3-31a4-90dc-6e84ed093939" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a49f1cd-476d-31db-8560-5788a3267fda" locEndPos="9" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="4" auth="username" locRef="2" rule="MISRA2012-DIR-4_6_b" lnHash="1236489322" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1236489322" unbViolId="f3a38fcb-d7d2-3fdf-bf4a-090b3b87719a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="371bc59e-dc5d-3ca2-aa93-4d7e57537c04" locEndPos="9" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="HICPP-3_5_1-b" lnHash="1236489322" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1236489322" unbViolId="480ff497-e589-3f22-9eac-ee5c218ee7cd" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d67d937b-0439-39d9-bf11-10a7b971bb99" locEndPos="9" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="The variable &quot;res&quot; was not initialized when declared" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="2" auth="username" locRef="2" rule="JSF-142_b" lnHash="1236489322" rule.header="All variables shall be initialized before use" tool="c++test" lineHash="1236489322" unbViolId="b473ae51-d379-32ae-8b6e-8ced0791c811" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="01f1c290-d3ea-3004-a65e-1b7ba5d25f32" locEndPos="13" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="The variable &quot;res&quot; was not initialized when declared" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="INIT-03" lnHash="1236489322" rule.header="Initialize all variables" tool="c++test" lineHash="1236489322" unbViolId="0a7650dc-95a6-3ba5-b0dc-655d40571c26" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f435023d-4701-33cb-84c8-889c2ee8b563" locEndPos="13" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="'res' shall be declared as unsigned int or signed int" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="PORT-13" lnHash="1236489322" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="1236489322" unbViolId="07e56e5c-ac78-3661-a48d-ee6ec1279d23" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e012af2-177a-3fb5-b3de-ac22fbe5bf47" locEndPos="13" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Variable &quot;res&quot; should be declared as locally as possible" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="2" auth="username" locRef="2" rule="MISRA2008-3_4_1_a" lnHash="1236489322" rule.header="An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" tool="c++test" lineHash="1236489322" unbViolId="671562d5-b89b-3168-9c64-cb9fe638c2dc" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="33fbd357-51f1-3bcb-8757-ce3824bce132" locEndPos="13" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Variable &quot;res&quot; should be declared as locally as possible" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="2" auth="username" locRef="2" rule="AUTOSAR-M3_4_1-a" lnHash="1236489322" rule.header="Declare variables as locally as possible" tool="c++test" lineHash="1236489322" unbViolId="3789de81-2d20-3f75-976f-245f86a88be5" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90e2acef-65f4-3df7-9c82-ba6116c3190c" locEndPos="13" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Variable &quot;res&quot; should be declared as locally as possible" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="4" auth="username" locRef="2" rule="JSF-136_b" lnHash="1236489322" rule.header="Declarations of local variables should be at the smallest feasible scope" tool="c++test" lineHash="1236489322" unbViolId="d7d6761a-67f3-39ed-926a-59cd4b103340" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="897ed0e2-c6df-30b0-b747-bb1cf499400a" locEndPos="13" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Variable &quot;res&quot; should be declared as locally as possible" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="OPT-01" lnHash="1236489322" rule.header="Declare variables as locally as possible" tool="c++test" lineHash="1236489322" unbViolId="a533de39-d28d-3151-87c4-c4cc687cf431" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f7f798c-ffb8-349d-a345-a9b8c7926994" locEndPos="13" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Variable &quot;res&quot; should be declared as locally as possible" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="CERT_C-DCL19-a" lnHash="1236489322" rule.header="Declare variables as locally as possible" tool="c++test" lineHash="1236489322" unbViolId="fd8e4ff9-bd79-3c00-89e5-85d7e6725fad" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12a97b5a-9f6f-3d83-acbb-9ae5754dde69" locEndPos="13" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Variable &quot;res&quot; should be declared as locally as possible" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="HICPP-6_4_1-a" lnHash="1236489322" rule.header="Declare variables as locally as possible" tool="c++test" lineHash="1236489322" unbViolId="279ada28-de8a-318d-ad3f-d50ac0f26e35" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7de88141-5d52-303a-a00b-25dc780d4f80" locEndPos="13" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Variable &quot;res&quot; declaration was found in control statement" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="OPT-10" lnHash="1236489322" rule.header="Do not declare variables in &quot;if&quot;, &quot;for&quot;, &quot;while&quot;, and &quot;do while&quot; statement" tool="c++test" lineHash="1236489322" unbViolId="42581238-0743-3ccd-a594-c52f39113ee6" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="20b73dce-fb52-337b-953a-bc6c0030bdf3" locEndPos="13" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="The 'res' variable should be commented" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="JSF-132_a" lnHash="1236489322" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="1236489322" unbViolId="626b23d3-54ba-384d-8edc-d1af08e14632" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d6bc0f97-f47c-3345-b2a2-bd97a0c84270" locEndPos="13" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="The 'res' variable should be commented" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="COMMENT-05" lnHash="1236489322" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="1236489322" unbViolId="99b69b15-63cf-3c6c-a7e5-a47ae47df53e" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="93692daf-747c-33a8-95ee-5af521db76e4" locEndPos="13" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Naming convention not followed: res" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="NAMING-19" lnHash="1236489322" rule.header="Begin all integer type variable with 'i'" tool="c++test" lineHash="1236489322" unbViolId="65d1b733-5cb9-34e0-8423-2b25f1c08685" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="455a1893-5d06-3567-8c7f-aab539a7e967" locEndPos="13" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="The 'res' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="NAMING-HN-22" lnHash="1236489322" rule.header="Hungarian notation for int types" tool="c++test" lineHash="1236489322" unbViolId="3c68ae83-93d3-3b91-8383-7e179beabbc9" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9143c656-b1c6-353a-8dea-3669f6da188d" locEndPos="13" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="The 'res' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="NAMING-HN-30" lnHash="1236489322" rule.header="Hungarian notation for int types" tool="c++test" lineHash="1236489322" unbViolId="0fe19508-6cc1-34f8-8ad9-8d480aa668f6" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="172cdda7-673a-330b-9534-e52e4aba3e69" locEndPos="13" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="The 'res' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="NAMING-HN-43" lnHash="1236489322" rule.header="Hungarian notation for word types" tool="c++test" lineHash="1236489322" unbViolId="6f93f361-e0b1-3700-9763-658c7fd3e31a" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c07f2aa-b062-3684-9594-1b284d197b58" locEndPos="13" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Declare variable 'i' in a separate line" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="2" auth="username" locRef="2" rule="JSF-152" lnHash="1236489322" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="1236489322" unbViolId="a0b38b6a-60e4-3e0f-8537-e419a2947f82" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af3022ab-90ca-3f7f-8b2a-07c67d7806da" locEndPos="18" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Declare variable 'i' in a separate line" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="2" auth="username" locRef="2" rule="AUTOSAR-A7_1_7-b" lnHash="1236489322" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="1236489322" unbViolId="513b3c3f-dbf2-3c08-aed0-53f72db63e82" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe26ce3b-3f14-3462-b92d-e4ef03593787" locEndPos="18" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Declare variable 'i' in a separate line" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="HICPP-7_1_1-a" lnHash="1236489322" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="1236489322" unbViolId="f0d7226a-4469-30a5-ba84-14cb0c1be76e" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="33a390d3-567b-3617-a6c6-626e66e93261" locEndPos="18" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Declare variable 'i' in a separate line" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="FORMAT-29" lnHash="1236489322" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="1236489322" unbViolId="2be8b653-808c-389a-8aa6-ebe3749f4741" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3f91f60-bf15-3bc3-afcd-2bf005858376" locEndPos="18" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Declare variable 'i' in a separate declaration statement" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="2" auth="username" locRef="2" rule="AUTOSAR-A7_1_7-c" lnHash="1236489322" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="1236489322" unbViolId="9c046a98-ebca-3a19-88bf-cb4e6c22c923" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09f902eb-2833-3c07-8422-10b9d21f81f5" locEndPos="18" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Declare variable 'i' in a separate declaration statement" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="FORMAT-33" lnHash="1236489322" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="1236489322" unbViolId="9e0cba06-e361-305f-8e4e-28230048caef" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8519eabb-90ee-3ba0-8096-33a1551ef286" locEndPos="18" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Declare variable 'i' in a separate declaration statement" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="2" auth="username" locRef="2" rule="MISRA2008-8_0_1" lnHash="1236489322" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="1236489322" unbViolId="f687ef8b-eff4-38ae-bcf0-d337c0752987" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0493c7df-b48a-3b50-b866-f6e13b0bb401" locEndPos="18" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Declare variable 'i' in a separate declaration statement" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="HICPP-7_1_1-b" lnHash="1236489322" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="1236489322" unbViolId="7d977d67-10c4-3df8-8b59-8b34e64a8510" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95e6fc25-9d39-31a1-a019-b79cf1d917b5" locEndPos="18" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Declare variable 'i' in a separate declaration statement" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="2" auth="username" locRef="2" rule="AUTOSAR-M8_0_1-a" lnHash="1236489322" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="1236489322" unbViolId="2b56ce2d-4a7d-3509-933f-2768fb83f19d" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="35a55efd-ae5d-37c0-9508-6f0bf1bfd010" locEndPos="18" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Declare variable 'i' in a separate declaration statement" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="CERT_C-DCL04-a" lnHash="1236489322" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="1236489322" unbViolId="f873c9cc-2801-3b9c-a386-96eac0b8888c" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16d996d2-fd59-3902-86a8-a6ec93e00c90" locEndPos="18" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="'i' shall be declared as unsigned int or signed int" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="PORT-13" lnHash="1236489322" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="1236489322" unbViolId="b9f5cf09-b8c6-3d93-ab9b-a55d2a7c4e15" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cdcb666c-f9f9-3604-bd40-edb266617a2d" locEndPos="18" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Declare local variable 'i' as const" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="CERT_C-DCL00-a" lnHash="1236489322" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1236489322" unbViolId="c14d0bdb-a00e-359d-ae77-10a24ded582b" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13042169-594b-31d1-89cd-66840deb1a4a" locEndPos="18" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Declare local variable 'i' as const" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="2" auth="username" locRef="2" rule="AUTOSAR-A7_1_1-a" lnHash="1236489322" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1236489322" unbViolId="97cd7f49-0529-3750-8a91-808006271ff9" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ae42a27-a949-32b7-9807-d921a4bd6346" locEndPos="18" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Declare local variable 'i' as const" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="2" auth="username" locRef="2" rule="MISRA2008-7_1_1" lnHash="1236489322" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="1236489322" unbViolId="9ac3a186-1a6b-3647-b469-f9310634207b" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04cf2308-c575-3435-b79e-8a33f1d9c7c7" locEndPos="18" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Declare local variable 'i' as const" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="CODSTA-CPP-53" lnHash="1236489322" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1236489322" unbViolId="bb89c3b5-94bf-318c-b363-31d4535e123b" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e88745c0-01f8-35a5-8a4c-0d8a6ea231c8" locEndPos="18" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Declare local variable 'i' as const" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="HICPP-7_1_2-a" lnHash="1236489322" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1236489322" unbViolId="4716ec0c-a6e2-3233-87ad-921ea5694e6e" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65e70ade-04b9-3c92-b308-b9846a73353e" locEndPos="18" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Variable &quot;i&quot; declaration was found in control statement" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="OPT-10" lnHash="1236489322" rule.header="Do not declare variables in &quot;if&quot;, &quot;for&quot;, &quot;while&quot;, and &quot;do while&quot; statement" tool="c++test" lineHash="1236489322" unbViolId="85c91fef-ed41-3cc6-be42-d211785857b6" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16d885aa-4f80-350a-8f5b-01ee24103244" locEndPos="18" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="The 'i' variable should be commented" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="JSF-132_a" lnHash="1236489322" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="1236489322" unbViolId="bfab1b33-6a55-3744-8e4a-f953e047e78c" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f2c1915e-d397-359c-8d8f-ed9efe0cefdc" locEndPos="18" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="The 'i' variable should be commented" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="COMMENT-05" lnHash="1236489322" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="1236489322" unbViolId="9b14b627-1357-318e-9ab1-29324c055296" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fcb66a82-d315-32d7-9ef9-895c18e193a0" locEndPos="18" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Variable 'i' should be declared using 'auto' specifier" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="HICPP-7_1_8-a" lnHash="1236489322" rule.header="Use auto id = expr when declaring a variable that is the same type as the initializer function call" tool="c++test" lineHash="1236489322" unbViolId="ac5566e4-e895-3edd-8eec-ad8df8e37dcb" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9380ad7b-524d-32ee-bc8c-3c912aaab8ef" locEndPos="18" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Prototype of function 'print_menu_get_action' does not precede function call" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="MISRA2004-8_1_a" lnHash="1236489322" rule.header="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" tool="c++test" lineHash="1236489322" unbViolId="9b3b60a4-d5e7-3c60-be4d-accc9ed9e2f6" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d09f43c9-3cd6-3d42-a80f-8a99728fe87b" locEndPos="22" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Prototype of function 'print_menu_get_action' does not precede function call" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="MISRA-071_a" lnHash="1236489322" rule.header="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" tool="c++test" lineHash="1236489322" unbViolId="fb084653-68f9-31b1-8c0b-a85a646cff7f" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64de6713-2dde-3d68-8f2b-6e6e288ceaa1" locEndPos="22" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Prototype of function 'print_menu_get_action' does not precede function call" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="CERT_C-EXP37-d" lnHash="1236489322" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="1236489322" unbViolId="d2bf29ab-5d47-383e-a329-5bb7ff5eb615" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="339248fd-3aec-33f0-8f90-c554275a25ec" locEndPos="22" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Prototype of function 'print_menu_get_action' does not precede function call" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="1" auth="username" locRef="2" rule="MISRA2012-RULE-17_3" lnHash="1236489322" rule.header="A function shall not be declared implicitly" tool="c++test" lineHash="1236489322" unbViolId="97a91a29-f2bc-3c6d-994e-b28868f7ff9e" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c98e3b8a-0985-30aa-ac1a-21ac2d87902d" locEndPos="22" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Prototype of function 'print_menu_get_action' does not precede function call" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="MISRA2004-8_1_b" lnHash="1236489322" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="1236489322" unbViolId="7a628d2d-e6c0-35bd-af6c-4340e767a1eb" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="112adbf9-758f-3698-901b-02e8e02f0709" locEndPos="22" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Prototype of function 'print_menu_get_action' does not precede function call" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="3" auth="username" locRef="2" rule="MISRA-071_b" lnHash="1236489322" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="1236489322" unbViolId="b20302bd-893b-3020-a038-853dd8d23e5e" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="572372b6-ad0d-3985-8b3e-6f9c51c692ae" locEndPos="22" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Prototype of function 'print_menu_get_action' does not precede function call" ln="35" locFile="/build/../../../../../../../../driver.c" locStartln="35" sev="1" auth="username" locRef="2" rule="MISRAC2012-RULE_17_3-a" lnHash="1236489322" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="1236489322" unbViolId="487ee635-1f35-3378-bd24-a4fcaab7877f" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7d32841-7330-30ce-b332-a8e1c35c973d" locEndPos="22" locType="sr" hash="65740504" locEndLn="35" goals="0," />
    <StdViol msg="Between conditional statement 'switch' and its opening parenthesis '(' should be exactly one space" ln="37" locFile="/build/../../../../../../../../driver.c" locStartln="37" sev="3" auth="username" locRef="2" rule="FORMAT-12" lnHash="224730964" rule.header="There shall be a single ASCII space character between a conditional statement keyword and its opening parenthesis" tool="c++test" lineHash="224730964" unbViolId="ac655cf6-ca40-3be5-a37e-69826a948a67" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="93ba49bb-7bea-352a-94df-edbe77d49d30" locEndPos="9" locType="sr" hash="65740504" locEndLn="37" goals="0," />
    <StdViol msg="Integer types (constants) should not be used as case labels: 1" ln="39" locFile="/build/../../../../../../../../driver.c" locStartln="39" sev="4" auth="username" locRef="2" rule="AUTOSAR-A7_2_5-a" lnHash="155575577" rule.header="Enumeration types shall be used instead of integer types (and constants) as case labels" tool="c++test" lineHash="155575577" unbViolId="42007c53-0017-3143-bfd7-cde7d25f9d98" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d0dd0b7-4047-3b6c-bf5f-7d40caabe137" locEndPos="14" locType="sr" hash="65740504" locEndLn="39" goals="0," />
    <StdViol msg="Integer types (constants) should not be used as case labels: 1" ln="39" locFile="/build/../../../../../../../../driver.c" locStartln="39" sev="2" auth="username" locRef="2" rule="CODSTA-55" lnHash="155575577" rule.header="Enumeration types shall be used instead of integer types (and constants) as case labels" tool="c++test" lineHash="155575577" unbViolId="2e641674-580a-3b94-a619-312d0be7ac20" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="545f8973-3595-347e-b73d-4261788fae14" locEndPos="14" locType="sr" hash="65740504" locEndLn="39" goals="0," />
    <StdViol msg="Integer types (constants) should not be used as case labels: 1" ln="39" locFile="/build/../../../../../../../../driver.c" locStartln="39" sev="2" auth="username" locRef="2" rule="JSF-148" lnHash="155575577" rule.header="Enumeration types shall be used instead of integer types (and constants) to select from a limited series of choices" tool="c++test" lineHash="155575577" unbViolId="5ac66402-ca8d-33ef-a016-675b9df5cfab" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5e306d8-75ef-3527-8d89-d6f2f30da33b" locEndPos="14" locType="sr" hash="65740504" locEndLn="39" goals="0," />
    <StdViol msg="Prototype of function 'add_timer' does not precede function call" ln="40" locFile="/build/../../../../../../../../driver.c" locStartln="40" sev="3" auth="username" locRef="2" rule="CERT_C-EXP37-d" lnHash="-1326866858" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-1326866858" unbViolId="fdc7d719-0660-31e3-b1d2-779ef222ca80" locStartPos="18" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="afba573f-d252-3556-9f36-1cff95c4d1af" locEndPos="19" locType="sr" hash="65740504" locEndLn="40" goals="0," />
    <StdViol msg="Prototype of function 'add_timer' does not precede function call" ln="40" locFile="/build/../../../../../../../../driver.c" locStartln="40" sev="1" auth="username" locRef="2" rule="MISRA2012-RULE-17_3" lnHash="-1326866858" rule.header="A function shall not be declared implicitly" tool="c++test" lineHash="-1326866858" unbViolId="029cfd75-f43a-33db-8bab-8f0b1d9961ae" locStartPos="18" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f6fbd953-301c-3e98-926a-9d1e5e9d5c1e" locEndPos="19" locType="sr" hash="65740504" locEndLn="40" goals="0," />
    <StdViol msg="Prototype of function 'add_timer' does not precede function call" ln="40" locFile="/build/../../../../../../../../driver.c" locStartln="40" sev="3" auth="username" locRef="2" rule="MISRA2004-8_1_b" lnHash="-1326866858" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-1326866858" unbViolId="8be5ef3f-9bea-3019-8383-2d45917220fe" locStartPos="18" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4db8b18c-6ceb-35a3-b834-e9f0679719df" locEndPos="19" locType="sr" hash="65740504" locEndLn="40" goals="0," />
    <StdViol msg="Prototype of function 'add_timer' does not precede function call" ln="40" locFile="/build/../../../../../../../../driver.c" locStartln="40" sev="3" auth="username" locRef="2" rule="MISRA-071_b" lnHash="-1326866858" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-1326866858" unbViolId="a77b7d3b-2871-380f-887f-c908611c8433" locStartPos="18" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a1d7124-89ba-37fe-b38a-b516990bf108" locEndPos="19" locType="sr" hash="65740504" locEndLn="40" goals="0," />
    <StdViol msg="Prototype of function 'add_timer' does not precede function call" ln="40" locFile="/build/../../../../../../../../driver.c" locStartln="40" sev="1" auth="username" locRef="2" rule="MISRAC2012-RULE_17_3-a" lnHash="-1326866858" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-1326866858" unbViolId="5ee393a2-2879-3d24-92d6-7ee4e9e5ec11" locStartPos="18" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c509b4a5-bb1a-37a4-972b-ac0cce29ee7c" locEndPos="19" locType="sr" hash="65740504" locEndLn="40" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="41" locFile="/build/../../../../../../../../driver.c" locStartln="41" sev="3" auth="username" locRef="2" rule="JSF-061" lnHash="170011725" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="170011725" unbViolId="bb8b327a-99fd-3370-9243-387ad1b60b10" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c40c09eb-24d0-3b06-900c-8f4aa927f56c" locEndPos="1" locType="sr" hash="65740504" locEndLn="41" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="41" locFile="/build/../../../../../../../../driver.c" locStartln="41" sev="3" auth="username" locRef="2" rule="FORMAT-42" lnHash="170011725" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="170011725" unbViolId="7abe8bcb-32e8-3e1d-9181-d5b37933ffb7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f714864-6741-3884-9ca7-ea0ba2140683" locEndPos="1" locType="sr" hash="65740504" locEndLn="41" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="41" locFile="/build/../../../../../../../../driver.c" locStartln="41" sev="3" auth="username" locRef="2" rule="JSF-060_a" lnHash="170011725" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="170011725" unbViolId="4f4a3e9b-d7f1-394a-9d37-dacb0d8ead53" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05692aa1-767b-369e-8859-ca5afd7a9c0a" locEndPos="1" locType="sr" hash="65740504" locEndLn="41" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="41" locFile="/build/../../../../../../../../driver.c" locStartln="41" sev="3" auth="username" locRef="2" rule="FORMAT-43" lnHash="170011725" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="170011725" unbViolId="ac949715-a78d-32a9-ae4c-e0d20a44c34c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b28117e8-a068-3cb2-95af-27c81fdc29e3" locEndPos="1" locType="sr" hash="65740504" locEndLn="41" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="41" locFile="/build/../../../../../../../../driver.c" locStartln="41" sev="3" auth="username" locRef="2" rule="JSF-060_b" lnHash="170011725" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="170011725" unbViolId="2e8ca938-083f-336a-8d9c-14802b8bc85e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4bee4918-b300-3b01-bace-65a3b2e296a6" locEndPos="1" locType="sr" hash="65740504" locEndLn="41" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="41" locFile="/build/../../../../../../../../driver.c" locStartln="41" sev="3" auth="username" locRef="2" rule="FORMAT-02" lnHash="170011725" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="170011725" unbViolId="87bf3cdb-a4b8-310a-8a02-f86936260f97" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2709b3b9-7dda-3430-8b60-711430afe869" locEndPos="1" locType="sr" hash="65740504" locEndLn="41" goals="0," />
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="41" locFile="/build/../../../../../../../../driver.c" locStartln="41" sev="3" auth="username" locRef="2" rule="FORMAT-34" lnHash="170011725" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="170011725" unbViolId="ef200b70-ebd5-31c4-9eea-9c6a38d6106b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a4503df-334b-389a-a5bd-e3b53077b71d" locEndPos="1" locType="sr" hash="65740504" locEndLn="41" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="42" locFile="/build/../../../../../../../../driver.c" locStartln="42" sev="3" auth="username" locRef="2" rule="CODSTA-122_a" lnHash="420014112" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="420014112" unbViolId="b76b3f89-7e7d-3d78-8eb8-5ad150331931" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31dfee6c-07a2-37f5-9906-da3f52855487" locEndPos="17" locType="sr" hash="65740504" locEndLn="42" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="42" locFile="/build/../../../../../../../../driver.c" locStartln="42" sev="1" auth="username" locRef="2" rule="CERT_C-ERR33-a" lnHash="420014112" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="420014112" unbViolId="2d5107ae-6562-3f83-a77d-8c83b2b233b4" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2721ad08-430b-34d6-b519-641e19b12924" locEndPos="17" locType="sr" hash="65740504" locEndLn="42" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="42" locFile="/build/../../../../../../../../driver.c" locStartln="42" sev="1" auth="username" locRef="2" rule="CERT_C-POS54-a" lnHash="420014112" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="420014112" unbViolId="5aae2812-8c17-3217-a828-63205c76a499" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38ed1d8c-4e80-301f-90fa-c6fb49d69f99" locEndPos="17" locType="sr" hash="65740504" locEndLn="42" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="42" locFile="/build/../../../../../../../../driver.c" locStartln="42" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="420014112" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="420014112" unbViolId="30839c60-df9b-3fcf-b32f-b851edc49875" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98d435f1-40b9-37e8-bd12-259d6a046b00" locEndPos="17" locType="sr" hash="65740504" locEndLn="42" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="42" locFile="/build/../../../../../../../../driver.c" locStartln="42" sev="3" auth="username" locRef="2" rule="CERT_C-EXP12-a" lnHash="420014112" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="420014112" unbViolId="09ab029b-db6a-3cea-9eec-019243592156" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f795ea6a-9675-33c7-b628-0633163f8e3c" locEndPos="17" locType="sr" hash="65740504" locEndLn="42" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="42" locFile="/build/../../../../../../../../driver.c" locStartln="42" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-17_7_a" lnHash="420014112" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="420014112" unbViolId="0b36a51c-026f-3402-a7fd-2e75ea977058" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed5e11f2-e0cc-3f2b-afa4-578751158c4b" locEndPos="17" locType="sr" hash="65740504" locEndLn="42" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="42" locFile="/build/../../../../../../../../driver.c" locStartln="42" sev="3" auth="username" locRef="2" rule="MISRA2004-16_10" lnHash="420014112" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="420014112" unbViolId="e720a2ba-3bed-35fc-b8d3-c2f7f06b2b13" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7dc9fd3e-a443-3600-b874-d4b098ccd0ef" locEndPos="17" locType="sr" hash="65740504" locEndLn="42" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="42" locFile="/build/../../../../../../../../driver.c" locStartln="42" sev="2" auth="username" locRef="2" rule="AUTOSAR-M0_3_2-a" lnHash="420014112" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="420014112" unbViolId="0f631604-4ac3-3887-9b42-14e7e657d26d" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e7a8c1ae-36b2-3a96-8ee6-4cfa48f6114d" locEndPos="17" locType="sr" hash="65740504" locEndLn="42" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="42" locFile="/build/../../../../../../../../driver.c" locStartln="42" sev="2" auth="username" locRef="2" rule="MISRA2008-0_3_2" lnHash="420014112" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="420014112" unbViolId="aa8e7758-1f85-36da-a55f-f39058ccf155" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88927fe2-6436-3db8-a93d-a677234f7857" locEndPos="17" locType="sr" hash="65740504" locEndLn="42" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="42" locFile="/build/../../../../../../../../driver.c" locStartln="42" sev="3" auth="username" locRef="2" rule="JSF-115" lnHash="420014112" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="420014112" unbViolId="af9238a6-16d9-3fb8-8c4b-b10c858687b8" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="daf05fee-d198-35ba-b1d9-e94663fa1373" locEndPos="17" locType="sr" hash="65740504" locEndLn="42" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Error ... timer not added!" ln="42" locFile="/build/../../../../../../../../driver.c" locStartln="42" sev="5" auth="username" locRef="2" rule="CWE-798-a" lnHash="420014112" rule.header="Do not hard code string literals" tool="c++test" lineHash="420014112" unbViolId="81617ef2-5376-3976-8432-4d067544f855" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6fea95dc-8dba-367a-8a58-e207ea1acccf" locEndPos="30" locType="sr" hash="65740504" locEndLn="42" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Error ... timer not added!" ln="42" locFile="/build/../../../../../../../../driver.c" locStartln="42" sev="5" auth="username" locRef="2" rule="CODSTA-203" lnHash="420014112" rule.header="Do not hard code string literals" tool="c++test" lineHash="420014112" unbViolId="f54985f0-c8bf-35d0-9db9-c8118cc921da" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0adeaab4-dc88-3f78-8d82-dfd24cd65133" locEndPos="30" locType="sr" hash="65740504" locEndLn="42" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Error ... timer not added!" ln="42" locFile="/build/../../../../../../../../driver.c" locStartln="42" sev="1" auth="username" locRef="2" rule="APSC_DV-003110-a" lnHash="420014112" rule.header="Do not hard code string literals" tool="c++test" lineHash="420014112" unbViolId="a7ef0fd7-c536-3f12-8ce2-a982533edcc6" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ec806380-60a7-3666-a7fc-8bfebf61b968" locEndPos="30" locType="sr" hash="65740504" locEndLn="42" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Error ... timer not added!" ln="42" locFile="/build/../../../../../../../../driver.c" locStartln="42" sev="1" auth="username" locRef="2" rule="CERT_C-MSC41-a" lnHash="420014112" rule.header="Do not hard code string literals" tool="c++test" lineHash="420014112" unbViolId="b28b7994-feb0-359b-ab48-b82ddf8d387b" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12392c68-8fbf-3252-8bc4-7d37fb713081" locEndPos="30" locType="sr" hash="65740504" locEndLn="42" goals="0," />
    <StdViol msg="String literal &quot;Error ... timer not added!&quot; is passed to function 'print_string' as pointer to non-const object" ln="42" locFile="/build/../../../../../../../../driver.c" locStartln="42" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="420014112" rule.header="A string literal shall not be modified" tool="c++test" lineHash="420014112" unbViolId="ded8ad1b-6120-32a4-a333-53e76bf6369e" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6726ac17-2a3c-32da-bcd6-5a19cb2eb2be" locEndPos="30" locType="sr" hash="65740504" locEndLn="42" goals="0," />
    <StdViol msg="String literal &quot;Error ... timer not added!&quot; is passed to function 'print_string' as pointer to non-const object" ln="42" locFile="/build/../../../../../../../../driver.c" locStartln="42" sev="2" auth="username" locRef="2" rule="AUTOSAR-A2_13_4-a" lnHash="420014112" rule.header="A string literal shall not be modified" tool="c++test" lineHash="420014112" unbViolId="ae287bff-5330-3dfe-a22f-dcd65daff633" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="996af735-1a01-3178-8f54-5c83771e88dc" locEndPos="30" locType="sr" hash="65740504" locEndLn="42" goals="0," />
    <StdViol msg="String literal &quot;Error ... timer not added!&quot; is passed to function 'print_string' as pointer to non-const object" ln="42" locFile="/build/../../../../../../../../driver.c" locStartln="42" sev="2" auth="username" locRef="2" rule="JSF-151.1" lnHash="420014112" rule.header="A string literal shall not be modified" tool="c++test" lineHash="420014112" unbViolId="6e3a526d-e211-314c-9809-852dcce25339" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1cced853-34e9-3b72-8d50-cac6d91e1bd2" locEndPos="30" locType="sr" hash="65740504" locEndLn="42" goals="0," />
    <StdViol msg="String literal &quot;Error ... timer not added!&quot; is passed to function 'print_string' as pointer to non-const object" ln="42" locFile="/build/../../../../../../../../driver.c" locStartln="42" sev="2" auth="username" locRef="2" rule="PB-27" lnHash="420014112" rule.header="A string literal shall not be modified" tool="c++test" lineHash="420014112" unbViolId="fc0ba3e0-5d31-36a7-a27b-af3ef7ce30ce" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b99496f3-ff49-311c-8d40-dd6ca3d51fec" locEndPos="30" locType="sr" hash="65740504" locEndLn="42" goals="0," />
    <StdViol msg="String literal &quot;Error ... timer not added!&quot; is passed to function 'print_string' as pointer to non-const object" ln="42" locFile="/build/../../../../../../../../driver.c" locStartln="42" sev="3" auth="username" locRef="2" rule="CERT_C-STR05-a" lnHash="420014112" rule.header="A string literal shall not be modified" tool="c++test" lineHash="420014112" unbViolId="31789b66-6fe1-352e-bfe8-a8f88d43ae70" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d7043666-44a1-3780-9ca4-4f5da4f41386" locEndPos="30" locType="sr" hash="65740504" locEndLn="42" goals="0," />
    <StdViol msg="String literal &quot;Error ... timer not added!&quot; is passed to function 'print_string' as pointer to non-const object" ln="42" locFile="/build/../../../../../../../../driver.c" locStartln="42" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-7_4" lnHash="420014112" rule.header="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" tool="c++test" lineHash="420014112" unbViolId="48055183-6640-31cf-92cb-da150647ffe6" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07fbe8f8-9139-317f-85e0-54d118acf05f" locEndPos="30" locType="sr" hash="65740504" locEndLn="42" goals="0," />
    <StdViol msg="String literal &quot;Error ... timer not added!&quot; is passed to function 'print_string' as pointer to non-const object" ln="42" locFile="/build/../../../../../../../../driver.c" locStartln="42" sev="2" auth="username" locRef="2" rule="CERT_C-STR30-a" lnHash="420014112" rule.header="A string literal shall not be modified" tool="c++test" lineHash="420014112" unbViolId="4754cc2d-07c6-3ce3-92f0-6351d69861c7" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43f47df9-c90c-3741-a53d-9fc90f42a32f" locEndPos="30" locType="sr" hash="65740504" locEndLn="42" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="43" locFile="/build/../../../../../../../../driver.c" locStartln="43" sev="3" auth="username" locRef="2" rule="JSF-061" lnHash="2005176407" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="2005176407" unbViolId="eb1da4ff-b219-36d2-b8ba-c335c10dea37" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e18aed73-f49d-3b7a-8376-ec1a0919eb3e" locEndPos="1" locType="sr" hash="65740504" locEndLn="43" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="43" locFile="/build/../../../../../../../../driver.c" locStartln="43" sev="3" auth="username" locRef="2" rule="FORMAT-42" lnHash="2005176407" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="2005176407" unbViolId="bf1f7c06-1a1c-3256-8b15-1a69b992c0f1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74f2801e-c507-3d42-92b3-1ac9b9ef28ca" locEndPos="1" locType="sr" hash="65740504" locEndLn="43" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="43" locFile="/build/../../../../../../../../driver.c" locStartln="43" sev="3" auth="username" locRef="2" rule="JSF-060_a" lnHash="2005176407" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="2005176407" unbViolId="c0f82fef-bd3d-35b8-b21c-86be875dc8ae" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5d1ae49-25fb-3425-b937-15192a822dba" locEndPos="1" locType="sr" hash="65740504" locEndLn="43" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="43" locFile="/build/../../../../../../../../driver.c" locStartln="43" sev="3" auth="username" locRef="2" rule="FORMAT-43" lnHash="2005176407" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="2005176407" unbViolId="ac99bdfa-dc9b-3167-ba26-a10f73c1f83b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69205520-e4dc-3a30-ab28-9663239681b4" locEndPos="1" locType="sr" hash="65740504" locEndLn="43" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="43" locFile="/build/../../../../../../../../driver.c" locStartln="43" sev="3" auth="username" locRef="2" rule="JSF-060_b" lnHash="2005176407" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="2005176407" unbViolId="43d9105a-62f4-3b4e-8183-30ee5f55bb85" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c0f4874-a583-39da-a7b8-ed08ff52e352" locEndPos="1" locType="sr" hash="65740504" locEndLn="43" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="43" locFile="/build/../../../../../../../../driver.c" locStartln="43" sev="3" auth="username" locRef="2" rule="FORMAT-02" lnHash="2005176407" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="2005176407" unbViolId="c0453dd1-c837-3680-8649-3638cc9254e1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f68edf8-1e71-37b9-979c-6623adb2e5f2" locEndPos="1" locType="sr" hash="65740504" locEndLn="43" goals="0," />
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="43" locFile="/build/../../../../../../../../driver.c" locStartln="43" sev="3" auth="username" locRef="2" rule="FORMAT-34" lnHash="2005176407" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="2005176407" unbViolId="31f8bfc2-6a36-3cdc-a842-754d6463eae4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="773d20cc-d1c7-379f-a0db-17a77048d2f0" locEndPos="1" locType="sr" hash="65740504" locEndLn="43" goals="0," />
    <StdViol msg="Put the closing brace '}' on its own line" ln="43" locFile="/build/../../../../../../../../driver.c" locStartln="43" sev="3" auth="username" locRef="2" rule="JSF-061" lnHash="2005176407" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="2005176407" unbViolId="e590e08d-49b6-3a9b-9a0f-5b8453843d32" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c93f7f14-addc-3ed5-bdaa-90756572221f" locEndPos="13" locType="sr" hash="65740504" locEndLn="43" goals="0," />
    <StdViol msg="Put the closing brace '}' on its own line" ln="43" locFile="/build/../../../../../../../../driver.c" locStartln="43" sev="3" auth="username" locRef="2" rule="FORMAT-42" lnHash="2005176407" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="2005176407" unbViolId="0170114f-23c6-33dd-9c97-992b78c0b34b" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5cc98e00-e996-37e0-a25d-7b1e6e225e64" locEndPos="13" locType="sr" hash="65740504" locEndLn="43" goals="0," />
    <StdViol msg="Put the closing brace '}' on its own line" ln="43" locFile="/build/../../../../../../../../driver.c" locStartln="43" sev="3" auth="username" locRef="2" rule="JSF-060_a" lnHash="2005176407" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="2005176407" unbViolId="b1ca36cb-82e0-3715-ae0f-2d876d8458c9" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0212d35-0314-3729-a895-cc1d8beea723" locEndPos="13" locType="sr" hash="65740504" locEndLn="43" goals="0," />
    <StdViol msg="Put the closing brace '}' on its own line" ln="43" locFile="/build/../../../../../../../../driver.c" locStartln="43" sev="3" auth="username" locRef="2" rule="FORMAT-03" lnHash="2005176407" rule.header="Place a closing brace '}' on its own line" tool="c++test" lineHash="2005176407" unbViolId="f1292b74-0b4c-3c17-9432-2f690edf0347" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0035639a-ba45-30c1-8f21-27634846ba7a" locEndPos="13" locType="sr" hash="65740504" locEndLn="43" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="44" locFile="/build/../../../../../../../../driver.c" locStartln="44" sev="3" auth="username" locRef="2" rule="CODSTA-122_a" lnHash="1318983287" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1318983287" unbViolId="a1e8e0b6-e924-3d0e-8159-7f1bc5e03194" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="527ed3b7-1d99-335d-8962-5fa3dc4b7e31" locEndPos="17" locType="sr" hash="65740504" locEndLn="44" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="44" locFile="/build/../../../../../../../../driver.c" locStartln="44" sev="1" auth="username" locRef="2" rule="CERT_C-ERR33-a" lnHash="1318983287" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1318983287" unbViolId="16cfec9d-280a-3924-9b58-bf154719e06d" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="814f0d7f-00a6-3217-b36c-216bfc1c6fbd" locEndPos="17" locType="sr" hash="65740504" locEndLn="44" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="44" locFile="/build/../../../../../../../../driver.c" locStartln="44" sev="1" auth="username" locRef="2" rule="CERT_C-POS54-a" lnHash="1318983287" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1318983287" unbViolId="84fc6fba-0d26-3253-b842-ada00a674d5c" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21060ded-7880-3273-915f-4136754c208d" locEndPos="17" locType="sr" hash="65740504" locEndLn="44" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="44" locFile="/build/../../../../../../../../driver.c" locStartln="44" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="1318983287" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1318983287" unbViolId="1ce498e4-379c-366d-a037-2ccfb5754ba4" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d6daecef-9868-3e9d-8546-16d9fbd548f3" locEndPos="17" locType="sr" hash="65740504" locEndLn="44" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="44" locFile="/build/../../../../../../../../driver.c" locStartln="44" sev="3" auth="username" locRef="2" rule="CERT_C-EXP12-a" lnHash="1318983287" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1318983287" unbViolId="63f3c78a-be47-3631-8980-5a880d0c5328" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ebcd1ef4-b11d-3e40-aed1-8de9062a525a" locEndPos="17" locType="sr" hash="65740504" locEndLn="44" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="44" locFile="/build/../../../../../../../../driver.c" locStartln="44" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-17_7_a" lnHash="1318983287" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1318983287" unbViolId="1b9d204b-fead-38f0-833e-3f00ee0d3b53" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84e74ae0-1adb-395e-891e-f2ddeb5f669a" locEndPos="17" locType="sr" hash="65740504" locEndLn="44" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="44" locFile="/build/../../../../../../../../driver.c" locStartln="44" sev="3" auth="username" locRef="2" rule="MISRA2004-16_10" lnHash="1318983287" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="1318983287" unbViolId="3e98cc53-41f8-32f1-9ddd-9a7239de31ad" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3018af2f-a3fe-38a5-a86c-304a44e8faa1" locEndPos="17" locType="sr" hash="65740504" locEndLn="44" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="44" locFile="/build/../../../../../../../../driver.c" locStartln="44" sev="2" auth="username" locRef="2" rule="AUTOSAR-M0_3_2-a" lnHash="1318983287" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="1318983287" unbViolId="76023d34-1aa6-3173-a5b0-f81551a5600d" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e17d3261-72fb-30e7-9f63-c11da156d0cd" locEndPos="17" locType="sr" hash="65740504" locEndLn="44" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="44" locFile="/build/../../../../../../../../driver.c" locStartln="44" sev="2" auth="username" locRef="2" rule="MISRA2008-0_3_2" lnHash="1318983287" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="1318983287" unbViolId="15ba4467-b9b9-35d4-be19-628e854959c9" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a8daa23-d9d7-3aea-825a-711f821af1ba" locEndPos="17" locType="sr" hash="65740504" locEndLn="44" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="44" locFile="/build/../../../../../../../../driver.c" locStartln="44" sev="3" auth="username" locRef="2" rule="JSF-115" lnHash="1318983287" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="1318983287" unbViolId="b6dd354f-b1f0-34a1-b51e-6504122520fd" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6fc21a1b-6626-35f1-a291-378e3a0e9650" locEndPos="17" locType="sr" hash="65740504" locEndLn="44" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Timer added!" ln="44" locFile="/build/../../../../../../../../driver.c" locStartln="44" sev="5" auth="username" locRef="2" rule="CWE-798-a" lnHash="1318983287" rule.header="Do not hard code string literals" tool="c++test" lineHash="1318983287" unbViolId="8805dc73-afac-3d9e-a9d0-4df65e441615" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55e26bc7-bc8d-3ef0-8935-834f61a3f6cd" locEndPos="30" locType="sr" hash="65740504" locEndLn="44" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Timer added!" ln="44" locFile="/build/../../../../../../../../driver.c" locStartln="44" sev="5" auth="username" locRef="2" rule="CODSTA-203" lnHash="1318983287" rule.header="Do not hard code string literals" tool="c++test" lineHash="1318983287" unbViolId="9c6998c4-2028-3cdd-bcdc-e267d437e36e" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f13d7be0-562e-39a0-8ee2-01af1bec5381" locEndPos="30" locType="sr" hash="65740504" locEndLn="44" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Timer added!" ln="44" locFile="/build/../../../../../../../../driver.c" locStartln="44" sev="1" auth="username" locRef="2" rule="APSC_DV-003110-a" lnHash="1318983287" rule.header="Do not hard code string literals" tool="c++test" lineHash="1318983287" unbViolId="a5ed9723-c8bc-3d09-91b2-4ade9a1abb3b" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9c2927c-dd56-333e-b856-5b40ec7d9d89" locEndPos="30" locType="sr" hash="65740504" locEndLn="44" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Timer added!" ln="44" locFile="/build/../../../../../../../../driver.c" locStartln="44" sev="1" auth="username" locRef="2" rule="CERT_C-MSC41-a" lnHash="1318983287" rule.header="Do not hard code string literals" tool="c++test" lineHash="1318983287" unbViolId="a5364d08-37b2-3499-99d0-4f187a0b199b" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95ac452d-9f7f-325d-be79-98224349560d" locEndPos="30" locType="sr" hash="65740504" locEndLn="44" goals="0," />
    <StdViol msg="String literal &quot;Timer added!&quot; is passed to function 'print_string' as pointer to non-const object" ln="44" locFile="/build/../../../../../../../../driver.c" locStartln="44" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="1318983287" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1318983287" unbViolId="3c5c930e-8a89-3dfa-92d1-60d87783bc6c" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4756d434-1085-32aa-8a00-f6cf6a5f36cb" locEndPos="30" locType="sr" hash="65740504" locEndLn="44" goals="0," />
    <StdViol msg="String literal &quot;Timer added!&quot; is passed to function 'print_string' as pointer to non-const object" ln="44" locFile="/build/../../../../../../../../driver.c" locStartln="44" sev="2" auth="username" locRef="2" rule="AUTOSAR-A2_13_4-a" lnHash="1318983287" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1318983287" unbViolId="7321ecb1-7805-3ad4-953d-113c51d798aa" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8e12a631-5901-3f4b-bd40-7a6f9a859a12" locEndPos="30" locType="sr" hash="65740504" locEndLn="44" goals="0," />
    <StdViol msg="String literal &quot;Timer added!&quot; is passed to function 'print_string' as pointer to non-const object" ln="44" locFile="/build/../../../../../../../../driver.c" locStartln="44" sev="2" auth="username" locRef="2" rule="JSF-151.1" lnHash="1318983287" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1318983287" unbViolId="a861e953-cc03-32c5-96ad-4afcfd0dacfe" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb886d65-1fae-3248-a7ee-5538f77922a9" locEndPos="30" locType="sr" hash="65740504" locEndLn="44" goals="0," />
    <StdViol msg="String literal &quot;Timer added!&quot; is passed to function 'print_string' as pointer to non-const object" ln="44" locFile="/build/../../../../../../../../driver.c" locStartln="44" sev="2" auth="username" locRef="2" rule="PB-27" lnHash="1318983287" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1318983287" unbViolId="317af0f9-9614-380a-be45-3e49d2d87c01" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="08c2529b-7c86-3f32-ac1c-a86bda01ead5" locEndPos="30" locType="sr" hash="65740504" locEndLn="44" goals="0," />
    <StdViol msg="String literal &quot;Timer added!&quot; is passed to function 'print_string' as pointer to non-const object" ln="44" locFile="/build/../../../../../../../../driver.c" locStartln="44" sev="3" auth="username" locRef="2" rule="CERT_C-STR05-a" lnHash="1318983287" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1318983287" unbViolId="21c87122-e0da-3c9f-b0f2-fc8ad56c35d5" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="167d3dc9-960d-3436-ae9b-573ec8f40309" locEndPos="30" locType="sr" hash="65740504" locEndLn="44" goals="0," />
    <StdViol msg="String literal &quot;Timer added!&quot; is passed to function 'print_string' as pointer to non-const object" ln="44" locFile="/build/../../../../../../../../driver.c" locStartln="44" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-7_4" lnHash="1318983287" rule.header="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" tool="c++test" lineHash="1318983287" unbViolId="92489cbc-45d7-3247-8ad0-9374a6a31693" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7046672c-0f4d-301e-90e5-1d3eb499b2cf" locEndPos="30" locType="sr" hash="65740504" locEndLn="44" goals="0," />
    <StdViol msg="String literal &quot;Timer added!&quot; is passed to function 'print_string' as pointer to non-const object" ln="44" locFile="/build/../../../../../../../../driver.c" locStartln="44" sev="2" auth="username" locRef="2" rule="CERT_C-STR30-a" lnHash="1318983287" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1318983287" unbViolId="1ef21bb9-f536-30d1-a371-b9324ff82d3d" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83bd42b1-7c4c-398b-84bf-11b754399f8c" locEndPos="30" locType="sr" hash="65740504" locEndLn="44" goals="0," />
    <DupViol msg="Duplicated code: 'break;        case 2:            print_string(&quot;Which timer s...'" ln="46" locFile="/build/../../../../../../../../driver.c" locStartln="46" sev="3" auth="username" locRef="2" rule="CDD-DUPC" lnHash="207609628" rule.header="Avoid code duplication" tool="c++test" lineHash="207609628" unbViolId="c3b20ebe-0be9-3ebb-a1c1-31dfc45fed96" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="300b3648-f710-3d9a-bb91-cd994c1c4172" locEndPos="58" locType="sr" urgent="true" hash="65740504" locEndLn="48" goals="1,">
      <ElDescList>
        <ElDesc lineHash="207609628" locType="sr" srcRnghash="65740504" locRef="2" srcRngFile="/build/../../../../../../../../driver.c" ln="46" srcRngStartPos="12" srcRngEndPos="58" srcRngStartln="46" srcRngEndLn="48" desc="[Line 46] Duplicated code in file 'driver.c'" rngLn="46" />
        <ElDesc lineHash="207609628" locType="sr" srcRnghash="65740504" locRef="2" srcRngFile="/build/../../../../../../../../driver.c" ln="56" srcRngStartPos="12" srcRngEndPos="42" srcRngStartln="56" srcRngEndLn="59" desc="[Line 56] Duplicated code in file 'driver.c'" rngLn="56" />
      </ElDescList>
    </DupViol>
    <StdViol msg="Integer types (constants) should not be used as case labels: 2" ln="47" locFile="/build/../../../../../../../../driver.c" locStartln="47" sev="4" auth="username" locRef="2" rule="AUTOSAR-A7_2_5-a" lnHash="155575608" rule.header="Enumeration types shall be used instead of integer types (and constants) as case labels" tool="c++test" lineHash="155575608" unbViolId="3e177369-0711-3344-bf38-7af2ef323363" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d86fffe-5a74-3c98-a524-c9128e24b847" locEndPos="14" locType="sr" hash="65740504" locEndLn="47" goals="0," />
    <StdViol msg="Integer types (constants) should not be used as case labels: 2" ln="47" locFile="/build/../../../../../../../../driver.c" locStartln="47" sev="2" auth="username" locRef="2" rule="CODSTA-55" lnHash="155575608" rule.header="Enumeration types shall be used instead of integer types (and constants) as case labels" tool="c++test" lineHash="155575608" unbViolId="3164e3e3-2823-39d3-b883-fd1a76344f8a" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51adaffc-4f4d-3c27-ab08-550a5ed4b444" locEndPos="14" locType="sr" hash="65740504" locEndLn="47" goals="0," />
    <StdViol msg="Integer types (constants) should not be used as case labels: 2" ln="47" locFile="/build/../../../../../../../../driver.c" locStartln="47" sev="2" auth="username" locRef="2" rule="JSF-148" lnHash="155575608" rule.header="Enumeration types shall be used instead of integer types (and constants) to select from a limited series of choices" tool="c++test" lineHash="155575608" unbViolId="a286efc2-928e-374a-a305-2a8057158605" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f2f26ff-5d62-3e6e-929e-9d027adaa58b" locEndPos="14" locType="sr" hash="65740504" locEndLn="47" goals="0," />
    <StdViol msg="Hard coded value: 2" ln="47" locFile="/build/../../../../../../../../driver.c" locStartln="47" sev="3" auth="username" locRef="2" rule="CODSTA-29" lnHash="155575608" rule.header="&quot;#define&quot; or enum constants should be used instead of hard coded values whenever possible" tool="c++test" lineHash="155575608" unbViolId="3bd55cf0-a8f4-3187-866d-dec9e43568e8" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91c06d28-9088-35ec-8efd-41965ba7b986" locEndPos="14" locType="sr" hash="65740504" locEndLn="47" goals="0," />
    <StdViol msg="Hard coded value: 2" ln="47" locFile="/build/../../../../../../../../driver.c" locStartln="47" sev="3" auth="username" locRef="2" rule="CERT_C-DCL06-a" lnHash="155575608" rule.header="&quot;#define&quot; or enum constants should be used instead of hard coded values whenever possible" tool="c++test" lineHash="155575608" unbViolId="ad922d05-279c-3831-b87c-f7c03756a390" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26f362bc-d3f1-3dcb-a4ef-8855be8c1eb5" locEndPos="14" locType="sr" hash="65740504" locEndLn="47" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="48" locFile="/build/../../../../../../../../driver.c" locStartln="48" sev="3" auth="username" locRef="2" rule="CODSTA-122_a" lnHash="482597223" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="482597223" unbViolId="3c35c593-abc1-3cfe-ac6a-084c79da8201" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="010570a6-615e-396e-8997-eb631a439bc0" locEndPos="13" locType="sr" hash="65740504" locEndLn="48" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="48" locFile="/build/../../../../../../../../driver.c" locStartln="48" sev="1" auth="username" locRef="2" rule="CERT_C-ERR33-a" lnHash="482597223" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="482597223" unbViolId="50652e52-5036-318f-9827-ae37c56d4432" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="afa08be1-ec14-3190-9d4d-2370c15aeaa2" locEndPos="13" locType="sr" hash="65740504" locEndLn="48" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="48" locFile="/build/../../../../../../../../driver.c" locStartln="48" sev="1" auth="username" locRef="2" rule="CERT_C-POS54-a" lnHash="482597223" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="482597223" unbViolId="016db4db-a250-3619-a018-5f5aa750814e" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0184bb96-0d00-3962-a9ec-04950bb17100" locEndPos="13" locType="sr" hash="65740504" locEndLn="48" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="48" locFile="/build/../../../../../../../../driver.c" locStartln="48" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="482597223" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="482597223" unbViolId="882118c4-95e6-380a-aa34-0faa9c061f0b" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6d4301fa-82a8-36ed-8977-fe68d26762ae" locEndPos="13" locType="sr" hash="65740504" locEndLn="48" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="48" locFile="/build/../../../../../../../../driver.c" locStartln="48" sev="3" auth="username" locRef="2" rule="CERT_C-EXP12-a" lnHash="482597223" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="482597223" unbViolId="938c0205-0ea7-3578-887b-1547779ab551" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e828f786-5cf3-36fb-b90d-4961a0124728" locEndPos="13" locType="sr" hash="65740504" locEndLn="48" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="48" locFile="/build/../../../../../../../../driver.c" locStartln="48" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-17_7_a" lnHash="482597223" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="482597223" unbViolId="0f832044-8782-337e-b8c1-739afc482ce3" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9addf0a-d641-36c0-80c5-90d860759d71" locEndPos="13" locType="sr" hash="65740504" locEndLn="48" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="48" locFile="/build/../../../../../../../../driver.c" locStartln="48" sev="3" auth="username" locRef="2" rule="MISRA2004-16_10" lnHash="482597223" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="482597223" unbViolId="1f797d09-97f9-3b70-8540-27adb3fe31c4" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="068c6752-8ef2-3a8d-bec4-e9d2d4a15074" locEndPos="13" locType="sr" hash="65740504" locEndLn="48" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="48" locFile="/build/../../../../../../../../driver.c" locStartln="48" sev="2" auth="username" locRef="2" rule="AUTOSAR-M0_3_2-a" lnHash="482597223" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="482597223" unbViolId="354186c1-774c-3ff9-abae-a94f66d2fbdd" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb0ed850-5024-3a11-af94-249a5f042f96" locEndPos="13" locType="sr" hash="65740504" locEndLn="48" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="48" locFile="/build/../../../../../../../../driver.c" locStartln="48" sev="2" auth="username" locRef="2" rule="MISRA2008-0_3_2" lnHash="482597223" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="482597223" unbViolId="a8ed6c5b-7fc6-3a7b-adb0-3bfd4a23bde6" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eba8d356-d4ce-35d2-8fb9-9e642dba437e" locEndPos="13" locType="sr" hash="65740504" locEndLn="48" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="48" locFile="/build/../../../../../../../../driver.c" locStartln="48" sev="3" auth="username" locRef="2" rule="JSF-115" lnHash="482597223" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="482597223" unbViolId="2a3acd63-52f0-3176-b3bf-38b7f707b5bf" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cbb578c4-1fdb-3daf-aeac-5892d0b07db8" locEndPos="13" locType="sr" hash="65740504" locEndLn="48" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Which timer should I nuke? > " ln="48" locFile="/build/../../../../../../../../driver.c" locStartln="48" sev="5" auth="username" locRef="2" rule="CWE-798-a" lnHash="482597223" rule.header="Do not hard code string literals" tool="c++test" lineHash="482597223" unbViolId="c7aa8cd2-b622-3170-a2d6-c48cf241b86f" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02e49679-1d2c-34bf-9c5f-dcf73a356c11" locEndPos="26" locType="sr" hash="65740504" locEndLn="48" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Which timer should I nuke? > " ln="48" locFile="/build/../../../../../../../../driver.c" locStartln="48" sev="5" auth="username" locRef="2" rule="CODSTA-203" lnHash="482597223" rule.header="Do not hard code string literals" tool="c++test" lineHash="482597223" unbViolId="7e1d6a2c-7ae4-3a98-a7d2-50a3d469a0e4" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0e21733-6f95-3460-abeb-8dee926f9c0d" locEndPos="26" locType="sr" hash="65740504" locEndLn="48" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Which timer should I nuke? > " ln="48" locFile="/build/../../../../../../../../driver.c" locStartln="48" sev="1" auth="username" locRef="2" rule="APSC_DV-003110-a" lnHash="482597223" rule.header="Do not hard code string literals" tool="c++test" lineHash="482597223" unbViolId="368dbd63-3930-3597-95d3-e73fb90f5f34" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e1b8b99-f786-3008-8f88-cbba3856477d" locEndPos="26" locType="sr" hash="65740504" locEndLn="48" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Which timer should I nuke? > " ln="48" locFile="/build/../../../../../../../../driver.c" locStartln="48" sev="1" auth="username" locRef="2" rule="CERT_C-MSC41-a" lnHash="482597223" rule.header="Do not hard code string literals" tool="c++test" lineHash="482597223" unbViolId="e85cbd80-2757-325d-a7c6-9f04d966fb4b" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7fbd0d33-4c48-37b8-9cf1-55a826d3f6ef" locEndPos="26" locType="sr" hash="65740504" locEndLn="48" goals="0," />
    <StdViol msg="String literal &quot;Which timer should I nuke? > &quot; is passed to function 'print_string' as pointer to non-const object" ln="48" locFile="/build/../../../../../../../../driver.c" locStartln="48" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="482597223" rule.header="A string literal shall not be modified" tool="c++test" lineHash="482597223" unbViolId="9b48039c-b18c-30d2-8f34-da3f2d079e5f" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26366035-3658-3c45-91ce-1cf9a558c227" locEndPos="26" locType="sr" hash="65740504" locEndLn="48" goals="0," />
    <StdViol msg="String literal &quot;Which timer should I nuke? > &quot; is passed to function 'print_string' as pointer to non-const object" ln="48" locFile="/build/../../../../../../../../driver.c" locStartln="48" sev="2" auth="username" locRef="2" rule="AUTOSAR-A2_13_4-a" lnHash="482597223" rule.header="A string literal shall not be modified" tool="c++test" lineHash="482597223" unbViolId="b8a35eb3-35e9-3677-8ee0-fd455b2f666b" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9a1f3b7-3269-308c-9561-d48908227923" locEndPos="26" locType="sr" hash="65740504" locEndLn="48" goals="0," />
    <StdViol msg="String literal &quot;Which timer should I nuke? > &quot; is passed to function 'print_string' as pointer to non-const object" ln="48" locFile="/build/../../../../../../../../driver.c" locStartln="48" sev="2" auth="username" locRef="2" rule="JSF-151.1" lnHash="482597223" rule.header="A string literal shall not be modified" tool="c++test" lineHash="482597223" unbViolId="ec7f6ac9-49fd-366c-90b3-91dc686b38fa" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b477914a-2dfa-3edb-b437-b14a68e61d57" locEndPos="26" locType="sr" hash="65740504" locEndLn="48" goals="0," />
    <StdViol msg="String literal &quot;Which timer should I nuke? > &quot; is passed to function 'print_string' as pointer to non-const object" ln="48" locFile="/build/../../../../../../../../driver.c" locStartln="48" sev="2" auth="username" locRef="2" rule="PB-27" lnHash="482597223" rule.header="A string literal shall not be modified" tool="c++test" lineHash="482597223" unbViolId="179bc316-8924-3b84-92db-9aa0daa8bef9" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8b4e0b9-22ba-34cc-b358-ee0f4948ca07" locEndPos="26" locType="sr" hash="65740504" locEndLn="48" goals="0," />
    <StdViol msg="String literal &quot;Which timer should I nuke? > &quot; is passed to function 'print_string' as pointer to non-const object" ln="48" locFile="/build/../../../../../../../../driver.c" locStartln="48" sev="3" auth="username" locRef="2" rule="CERT_C-STR05-a" lnHash="482597223" rule.header="A string literal shall not be modified" tool="c++test" lineHash="482597223" unbViolId="6e20aaee-ebb5-3c3b-a6d1-8d573bf6a4f2" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b1ffd23-27bb-3c7e-865a-f18997dd7f97" locEndPos="26" locType="sr" hash="65740504" locEndLn="48" goals="0," />
    <StdViol msg="String literal &quot;Which timer should I nuke? > &quot; is passed to function 'print_string' as pointer to non-const object" ln="48" locFile="/build/../../../../../../../../driver.c" locStartln="48" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-7_4" lnHash="482597223" rule.header="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" tool="c++test" lineHash="482597223" unbViolId="2bfd4cde-7703-3ea1-bcaf-bcc9416ad052" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b3acc3b-09fa-37a2-820f-3522acddd64d" locEndPos="26" locType="sr" hash="65740504" locEndLn="48" goals="0," />
    <StdViol msg="String literal &quot;Which timer should I nuke? > &quot; is passed to function 'print_string' as pointer to non-const object" ln="48" locFile="/build/../../../../../../../../driver.c" locStartln="48" sev="2" auth="username" locRef="2" rule="CERT_C-STR30-a" lnHash="482597223" rule.header="A string literal shall not be modified" tool="c++test" lineHash="482597223" unbViolId="9c0215d0-fed2-378b-85ed-ff1ba38c1440" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4486aca4-e1b3-36e7-aaf1-c71d10633bd5" locEndPos="26" locType="sr" hash="65740504" locEndLn="48" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="49" locFile="/build/../../../../../../../../driver.c" locStartln="49" sev="3" auth="username" locRef="2" rule="CERT_C-EXP37-d" lnHash="-429052551" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-429052551" unbViolId="1525b6f3-1b87-33aa-b669-89b992237b65" locStartPos="32" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="175245b3-a44d-3e29-9207-964cf7e89a47" locEndPos="33" locType="sr" hash="65740504" locEndLn="49" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="49" locFile="/build/../../../../../../../../driver.c" locStartln="49" sev="1" auth="username" locRef="2" rule="MISRA2012-RULE-17_3" lnHash="-429052551" rule.header="A function shall not be declared implicitly" tool="c++test" lineHash="-429052551" unbViolId="6dd1b9e1-dfa6-3a95-8c3b-eac9999f752d" locStartPos="32" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5bda544-3f19-303a-9572-4a86e5e5d48b" locEndPos="33" locType="sr" hash="65740504" locEndLn="49" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="49" locFile="/build/../../../../../../../../driver.c" locStartln="49" sev="3" auth="username" locRef="2" rule="MISRA2004-8_1_b" lnHash="-429052551" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-429052551" unbViolId="70df577d-6ce7-3bf6-b1c1-5aed725ec286" locStartPos="32" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="997e6c3d-da6f-32d0-8e5d-37678a2de59b" locEndPos="33" locType="sr" hash="65740504" locEndLn="49" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="49" locFile="/build/../../../../../../../../driver.c" locStartln="49" sev="3" auth="username" locRef="2" rule="MISRA-071_b" lnHash="-429052551" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-429052551" unbViolId="c0a345ed-23a1-31bd-9fb3-ac89c38902d9" locStartPos="32" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6d711cf9-fc32-3310-ba59-385a5be65c63" locEndPos="33" locType="sr" hash="65740504" locEndLn="49" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="49" locFile="/build/../../../../../../../../driver.c" locStartln="49" sev="1" auth="username" locRef="2" rule="MISRAC2012-RULE_17_3-a" lnHash="-429052551" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-429052551" unbViolId="53479f52-d4fa-3dbf-bef3-e77d49a64c27" locStartPos="32" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9b0d103-0405-3470-8f9c-5144dcb17db3" locEndPos="33" locType="sr" hash="65740504" locEndLn="49" goals="0," />
    <DupViol msg="Duplicated code: 'break;        case 3:'" ln="50" locFile="/build/../../../../../../../../driver.c" locStartln="50" sev="3" auth="username" locRef="2" rule="CDD-DUPC" lnHash="207609628" rule.header="Avoid code duplication" tool="c++test" lineHash="207609628" unbViolId="a0bb8f30-bb8a-326f-8031-417d2a37ef8b" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="b2f30855-53e5-3ac7-8f93-f550928ba035" locEndPos="15" locType="sr" urgent="true" hash="65740504" locEndLn="51" goals="1,">
      <ElDescList>
        <ElDesc lineHash="207609628" locType="sr" srcRnghash="65740504" locRef="2" srcRngFile="/build/../../../../../../../../driver.c" ln="50" srcRngStartPos="12" srcRngEndPos="15" srcRngStartln="50" srcRngEndLn="51" desc="[Line 50] Duplicated code in file 'driver.c'" rngLn="50" />
        <ElDesc lineHash="207609628" locType="sr" srcRnghash="65740504" locRef="2" srcRngFile="/build/../../../../../../../../driver.c" ln="53" srcRngStartPos="12" srcRngEndPos="15" srcRngStartln="53" srcRngEndLn="54" desc="[Line 53] Duplicated code in file 'driver.c'" rngLn="53" />
      </ElDescList>
    </DupViol>
    <StdViol msg="Integer types (constants) should not be used as case labels: 3" ln="51" locFile="/build/../../../../../../../../driver.c" locStartln="51" sev="4" auth="username" locRef="2" rule="AUTOSAR-A7_2_5-a" lnHash="155575639" rule.header="Enumeration types shall be used instead of integer types (and constants) as case labels" tool="c++test" lineHash="155575639" unbViolId="16b4ac12-e7a0-34c1-87d6-012746292775" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="45f6d2dd-7c6a-319b-9926-1ec3d7584238" locEndPos="14" locType="sr" hash="65740504" locEndLn="51" goals="0," />
    <StdViol msg="Integer types (constants) should not be used as case labels: 3" ln="51" locFile="/build/../../../../../../../../driver.c" locStartln="51" sev="2" auth="username" locRef="2" rule="CODSTA-55" lnHash="155575639" rule.header="Enumeration types shall be used instead of integer types (and constants) as case labels" tool="c++test" lineHash="155575639" unbViolId="c3653e83-9b4b-39fe-bfc6-ea4a666ebbed" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2275ced9-b984-362e-83ad-cabef1b2ca15" locEndPos="14" locType="sr" hash="65740504" locEndLn="51" goals="0," />
    <StdViol msg="Integer types (constants) should not be used as case labels: 3" ln="51" locFile="/build/../../../../../../../../driver.c" locStartln="51" sev="2" auth="username" locRef="2" rule="JSF-148" lnHash="155575639" rule.header="Enumeration types shall be used instead of integer types (and constants) to select from a limited series of choices" tool="c++test" lineHash="155575639" unbViolId="4f286c1b-4315-3673-a983-f1dc4b561f51" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0e9571c-acd0-3c93-842c-8962fa0f984a" locEndPos="14" locType="sr" hash="65740504" locEndLn="51" goals="0," />
    <StdViol msg="Hard coded value: 3" ln="51" locFile="/build/../../../../../../../../driver.c" locStartln="51" sev="3" auth="username" locRef="2" rule="CODSTA-29" lnHash="155575639" rule.header="&quot;#define&quot; or enum constants should be used instead of hard coded values whenever possible" tool="c++test" lineHash="155575639" unbViolId="4a59085e-7142-3ae7-8d79-5513cfe6ad01" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02c75e50-080a-31eb-837f-f16385c6b509" locEndPos="14" locType="sr" hash="65740504" locEndLn="51" goals="0," />
    <StdViol msg="Hard coded value: 3" ln="51" locFile="/build/../../../../../../../../driver.c" locStartln="51" sev="3" auth="username" locRef="2" rule="CERT_C-DCL06-a" lnHash="155575639" rule.header="&quot;#define&quot; or enum constants should be used instead of hard coded values whenever possible" tool="c++test" lineHash="155575639" unbViolId="6982296a-a763-31c9-9b8d-88c7f2681d5a" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="838dd368-7459-3ae9-8b61-899f6297aa5b" locEndPos="14" locType="sr" hash="65740504" locEndLn="51" goals="0," />
    <StdViol msg="Prototype of function 'list_timers' does not precede function call" ln="52" locFile="/build/../../../../../../../../driver.c" locStartln="52" sev="3" auth="username" locRef="2" rule="CERT_C-EXP37-d" lnHash="1582224491" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="1582224491" unbViolId="018b2276-e939-3419-8195-c8fa4821ae11" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51cc2285-8312-36f3-bd68-258702a36cf3" locEndPos="13" locType="sr" hash="65740504" locEndLn="52" goals="0," />
    <StdViol msg="Prototype of function 'list_timers' does not precede function call" ln="52" locFile="/build/../../../../../../../../driver.c" locStartln="52" sev="1" auth="username" locRef="2" rule="MISRA2012-RULE-17_3" lnHash="1582224491" rule.header="A function shall not be declared implicitly" tool="c++test" lineHash="1582224491" unbViolId="341a3dd7-393c-36e2-aac1-9218b431e245" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17c4f23a-72d5-3f6e-a053-f9a089cbb40b" locEndPos="13" locType="sr" hash="65740504" locEndLn="52" goals="0," />
    <StdViol msg="Prototype of function 'list_timers' does not precede function call" ln="52" locFile="/build/../../../../../../../../driver.c" locStartln="52" sev="3" auth="username" locRef="2" rule="MISRA2004-8_1_b" lnHash="1582224491" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="1582224491" unbViolId="59b43db1-1e0c-3f7d-8d90-c6c7a426316a" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c85e243-35a9-37d6-a7e3-c41a3e1dc9c8" locEndPos="13" locType="sr" hash="65740504" locEndLn="52" goals="0," />
    <StdViol msg="Prototype of function 'list_timers' does not precede function call" ln="52" locFile="/build/../../../../../../../../driver.c" locStartln="52" sev="3" auth="username" locRef="2" rule="MISRA-071_b" lnHash="1582224491" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="1582224491" unbViolId="e527126d-648e-3b8a-ba9b-427f2fe55f2b" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="177cd101-2b03-3bd9-8d32-491d7dd14a72" locEndPos="13" locType="sr" hash="65740504" locEndLn="52" goals="0," />
    <StdViol msg="Prototype of function 'list_timers' does not precede function call" ln="52" locFile="/build/../../../../../../../../driver.c" locStartln="52" sev="1" auth="username" locRef="2" rule="MISRAC2012-RULE_17_3-a" lnHash="1582224491" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="1582224491" unbViolId="72de4471-35bc-338d-b80d-c512e29bb7c3" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10ce9462-4997-36af-bb9e-69f4044e40c6" locEndPos="13" locType="sr" hash="65740504" locEndLn="52" goals="0," />
    <StdViol msg="Integer types (constants) should not be used as case labels: 4" ln="54" locFile="/build/../../../../../../../../driver.c" locStartln="54" sev="4" auth="username" locRef="2" rule="AUTOSAR-A7_2_5-a" lnHash="155575670" rule.header="Enumeration types shall be used instead of integer types (and constants) as case labels" tool="c++test" lineHash="155575670" unbViolId="e74c7300-03bd-31ba-adf8-18b2ed15593e" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f9e73b0-f39d-3094-b6b2-0f50acd54f7e" locEndPos="14" locType="sr" hash="65740504" locEndLn="54" goals="0," />
    <StdViol msg="Integer types (constants) should not be used as case labels: 4" ln="54" locFile="/build/../../../../../../../../driver.c" locStartln="54" sev="2" auth="username" locRef="2" rule="CODSTA-55" lnHash="155575670" rule.header="Enumeration types shall be used instead of integer types (and constants) as case labels" tool="c++test" lineHash="155575670" unbViolId="f0e9f28e-cb26-33b0-b8f1-ccef015b6499" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a73ecbfb-d60d-37b4-92cf-a4ea2be9f49d" locEndPos="14" locType="sr" hash="65740504" locEndLn="54" goals="0," />
    <StdViol msg="Integer types (constants) should not be used as case labels: 4" ln="54" locFile="/build/../../../../../../../../driver.c" locStartln="54" sev="2" auth="username" locRef="2" rule="JSF-148" lnHash="155575670" rule.header="Enumeration types shall be used instead of integer types (and constants) to select from a limited series of choices" tool="c++test" lineHash="155575670" unbViolId="06e0890e-5ddd-3df8-b6e1-6f60c6d1178e" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4637110f-173a-3400-ac20-011d2d6c7bde" locEndPos="14" locType="sr" hash="65740504" locEndLn="54" goals="0," />
    <StdViol msg="Hard coded value: 4" ln="54" locFile="/build/../../../../../../../../driver.c" locStartln="54" sev="3" auth="username" locRef="2" rule="CODSTA-29" lnHash="155575670" rule.header="&quot;#define&quot; or enum constants should be used instead of hard coded values whenever possible" tool="c++test" lineHash="155575670" unbViolId="3230f14c-e957-370c-8bab-608737784c7a" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e28ae7d2-1fa2-3740-b6cd-659159a97874" locEndPos="14" locType="sr" hash="65740504" locEndLn="54" goals="0," />
    <StdViol msg="Hard coded value: 4" ln="54" locFile="/build/../../../../../../../../driver.c" locStartln="54" sev="3" auth="username" locRef="2" rule="CERT_C-DCL06-a" lnHash="155575670" rule.header="&quot;#define&quot; or enum constants should be used instead of hard coded values whenever possible" tool="c++test" lineHash="155575670" unbViolId="ea6403fc-efd2-3ba9-92a3-0c7d41892c7e" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ee64f71-28a4-3657-b932-51ede29a91a8" locEndPos="14" locType="sr" hash="65740504" locEndLn="54" goals="0," />
    <StdViol msg="Prototype of function 'display_time' does not precede function call" ln="55" locFile="/build/../../../../../../../../driver.c" locStartln="55" sev="3" auth="username" locRef="2" rule="CERT_C-EXP37-d" lnHash="-1947009296" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-1947009296" unbViolId="e7416329-0996-36c3-8c09-49f8e34013a1" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e08d371a-9a67-3de1-ba89-573569f700c8" locEndPos="13" locType="sr" hash="65740504" locEndLn="55" goals="0," />
    <StdViol msg="Prototype of function 'display_time' does not precede function call" ln="55" locFile="/build/../../../../../../../../driver.c" locStartln="55" sev="1" auth="username" locRef="2" rule="MISRA2012-RULE-17_3" lnHash="-1947009296" rule.header="A function shall not be declared implicitly" tool="c++test" lineHash="-1947009296" unbViolId="142bfccc-c0e8-3201-929e-849ec899f7b5" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cccb3a7e-9996-3200-8d76-42d68269de35" locEndPos="13" locType="sr" hash="65740504" locEndLn="55" goals="0," />
    <StdViol msg="Prototype of function 'display_time' does not precede function call" ln="55" locFile="/build/../../../../../../../../driver.c" locStartln="55" sev="3" auth="username" locRef="2" rule="MISRA2004-8_1_b" lnHash="-1947009296" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-1947009296" unbViolId="c56e22b2-0f68-3438-9486-9f375cf78050" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7338b201-07b9-32f3-a1c8-78cb7fcc5aab" locEndPos="13" locType="sr" hash="65740504" locEndLn="55" goals="0," />
    <StdViol msg="Prototype of function 'display_time' does not precede function call" ln="55" locFile="/build/../../../../../../../../driver.c" locStartln="55" sev="3" auth="username" locRef="2" rule="MISRA-071_b" lnHash="-1947009296" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-1947009296" unbViolId="79a00d27-ed07-3931-8b31-edfed4c8d09d" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c3e5b9f-9f83-378e-a1bd-dae763be890b" locEndPos="13" locType="sr" hash="65740504" locEndLn="55" goals="0," />
    <StdViol msg="Prototype of function 'display_time' does not precede function call" ln="55" locFile="/build/../../../../../../../../driver.c" locStartln="55" sev="1" auth="username" locRef="2" rule="MISRAC2012-RULE_17_3-a" lnHash="-1947009296" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-1947009296" unbViolId="f9603c8b-8686-3ef3-a93a-1e11d6ed6633" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="50f1b55b-ab17-3cb6-8832-51f5832a1e27" locEndPos="13" locType="sr" hash="65740504" locEndLn="55" goals="0," />
    <StdViol msg="Integer types (constants) should not be used as case labels: 9" ln="57" locFile="/build/../../../../../../../../driver.c" locStartln="57" sev="4" auth="username" locRef="2" rule="AUTOSAR-A7_2_5-a" lnHash="155575825" rule.header="Enumeration types shall be used instead of integer types (and constants) as case labels" tool="c++test" lineHash="155575825" unbViolId="8ddd35dd-90b1-3b36-b74b-e8836b577afc" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91f02da1-abd1-3f9d-a451-c3d590827b34" locEndPos="14" locType="sr" hash="65740504" locEndLn="57" goals="0," />
    <StdViol msg="Integer types (constants) should not be used as case labels: 9" ln="57" locFile="/build/../../../../../../../../driver.c" locStartln="57" sev="2" auth="username" locRef="2" rule="CODSTA-55" lnHash="155575825" rule.header="Enumeration types shall be used instead of integer types (and constants) as case labels" tool="c++test" lineHash="155575825" unbViolId="a1a70a79-ed2d-3a19-92de-430b1987505e" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23630238-94e4-3199-869b-9d59da812976" locEndPos="14" locType="sr" hash="65740504" locEndLn="57" goals="0," />
    <StdViol msg="Integer types (constants) should not be used as case labels: 9" ln="57" locFile="/build/../../../../../../../../driver.c" locStartln="57" sev="2" auth="username" locRef="2" rule="JSF-148" lnHash="155575825" rule.header="Enumeration types shall be used instead of integer types (and constants) to select from a limited series of choices" tool="c++test" lineHash="155575825" unbViolId="e6231d86-a570-3576-a607-727abf1001f4" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9a34406-e161-375b-af35-4daed0a21b2e" locEndPos="14" locType="sr" hash="65740504" locEndLn="57" goals="0," />
    <StdViol msg="Hard coded value: 9" ln="57" locFile="/build/../../../../../../../../driver.c" locStartln="57" sev="3" auth="username" locRef="2" rule="CODSTA-29" lnHash="155575825" rule.header="&quot;#define&quot; or enum constants should be used instead of hard coded values whenever possible" tool="c++test" lineHash="155575825" unbViolId="e97cc7ea-9289-3244-a7f4-ca90fffa4680" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3dd1b19-193c-38bf-8e9c-cd6e30a70761" locEndPos="14" locType="sr" hash="65740504" locEndLn="57" goals="0," />
    <StdViol msg="Hard coded value: 9" ln="57" locFile="/build/../../../../../../../../driver.c" locStartln="57" sev="3" auth="username" locRef="2" rule="CERT_C-DCL06-a" lnHash="155575825" rule.header="&quot;#define&quot; or enum constants should be used instead of hard coded values whenever possible" tool="c++test" lineHash="155575825" unbViolId="7d67fbf9-2abf-3ddb-86c6-7e2de21c0800" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62e35836-eb5f-3b24-bd37-8a34eda5e155" locEndPos="14" locType="sr" hash="65740504" locEndLn="57" goals="0," />
    <StdViol msg="Use // comments only" ln="58" locFile="/build/../../../../../../../../driver.c" locStartln="58" sev="3" auth="username" locRef="2" rule="HICPP-2_3_1-a" lnHash="-15790558" rule.header="Prefer C++ style comment" tool="c++test" lineHash="-15790558" unbViolId="2bbb722f-b662-3881-b293-082dd68ddefa" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62430db7-805e-35fc-a229-41d28a677d38" locEndPos="13" locType="sr" hash="65740504" locEndLn="58" goals="0," />
    <StdViol msg="Use // comments only" ln="58" locFile="/build/../../../../../../../../driver.c" locStartln="58" sev="2" auth="username" locRef="2" rule="JSF-126" lnHash="-15790558" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="-15790558" unbViolId="843ce6d0-bb63-34f7-b95d-fcb926423d65" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d617987-978d-35c9-963e-e6ce04c228a4" locEndPos="13" locType="sr" hash="65740504" locEndLn="58" goals="0," />
    <StdViol msg="Use // comments only" ln="58" locFile="/build/../../../../../../../../driver.c" locStartln="58" sev="3" auth="username" locRef="2" rule="COMMENT-01" lnHash="-15790558" rule.header="Prefer C++ style comment" tool="c++test" lineHash="-15790558" unbViolId="fe0c534e-84b6-39c0-a93f-2973f6d9e12b" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a0b0d59-b3b5-3c8f-b2de-bfd7db0738cc" locEndPos="13" locType="sr" hash="65740504" locEndLn="58" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="59" locFile="/build/../../../../../../../../driver.c" locStartln="59" sev="3" auth="username" locRef="2" rule="CODSTA-122_a" lnHash="-1303736882" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1303736882" unbViolId="53bc279e-fcef-3edd-b61a-0da91fc64263" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="151a6b6a-6304-387d-b80b-4b0539cec3ca" locEndPos="13" locType="sr" hash="65740504" locEndLn="59" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="59" locFile="/build/../../../../../../../../driver.c" locStartln="59" sev="1" auth="username" locRef="2" rule="CERT_C-ERR33-a" lnHash="-1303736882" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1303736882" unbViolId="81102d18-405c-34f5-80bd-9cdc7aa35125" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="63d38755-4807-31bc-ab2c-335a6978fa1e" locEndPos="13" locType="sr" hash="65740504" locEndLn="59" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="59" locFile="/build/../../../../../../../../driver.c" locStartln="59" sev="1" auth="username" locRef="2" rule="CERT_C-POS54-a" lnHash="-1303736882" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1303736882" unbViolId="6c77fd89-2239-3a9e-8c93-b4bfffa18487" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3f7463a-f27e-3721-98fb-6265e5eb48d8" locEndPos="13" locType="sr" hash="65740504" locEndLn="59" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="59" locFile="/build/../../../../../../../../driver.c" locStartln="59" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="-1303736882" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1303736882" unbViolId="c820cda6-43e6-3846-998d-fcc356a51b96" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="994012c6-72f2-320b-a959-3f8541498bd7" locEndPos="13" locType="sr" hash="65740504" locEndLn="59" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="59" locFile="/build/../../../../../../../../driver.c" locStartln="59" sev="3" auth="username" locRef="2" rule="CERT_C-EXP12-a" lnHash="-1303736882" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1303736882" unbViolId="d5e1527c-b793-35dd-afe3-2669a9ac66d1" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5292fbc-f010-353f-aab3-3302a7c363cd" locEndPos="13" locType="sr" hash="65740504" locEndLn="59" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="59" locFile="/build/../../../../../../../../driver.c" locStartln="59" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-17_7_a" lnHash="-1303736882" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1303736882" unbViolId="6fc5b0c8-65f6-3ff6-9a3d-851ec845e90f" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e6a742b-89b0-39a6-b710-f76094572c5a" locEndPos="13" locType="sr" hash="65740504" locEndLn="59" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="59" locFile="/build/../../../../../../../../driver.c" locStartln="59" sev="3" auth="username" locRef="2" rule="MISRA2004-16_10" lnHash="-1303736882" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1303736882" unbViolId="6fd8f67c-9df2-3957-b0af-422aab41bc22" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c3d65111-e173-334e-917b-c5db74fd500a" locEndPos="13" locType="sr" hash="65740504" locEndLn="59" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="59" locFile="/build/../../../../../../../../driver.c" locStartln="59" sev="2" auth="username" locRef="2" rule="AUTOSAR-M0_3_2-a" lnHash="-1303736882" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1303736882" unbViolId="32c68f65-81fa-3851-b01c-02535162e135" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd950515-c0fd-3929-90cc-4097e47394ac" locEndPos="13" locType="sr" hash="65740504" locEndLn="59" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="59" locFile="/build/../../../../../../../../driver.c" locStartln="59" sev="2" auth="username" locRef="2" rule="MISRA2008-0_3_2" lnHash="-1303736882" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1303736882" unbViolId="59e8beb1-c3e6-3400-808c-e22c558574c0" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="796bcd7a-2562-327d-ba38-000367cd2597" locEndPos="13" locType="sr" hash="65740504" locEndLn="59" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="59" locFile="/build/../../../../../../../../driver.c" locStartln="59" sev="3" auth="username" locRef="2" rule="JSF-115" lnHash="-1303736882" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-1303736882" unbViolId="e5eb0fc2-6fea-34c2-9961-d07a05354b9b" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9cbb6cb2-9a93-3181-97f1-18364943cc84" locEndPos="13" locType="sr" hash="65740504" locEndLn="59" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Goodbye" ln="59" locFile="/build/../../../../../../../../driver.c" locStartln="59" sev="5" auth="username" locRef="2" rule="CWE-798-a" lnHash="-1303736882" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1303736882" unbViolId="14658598-9f64-3e53-a90a-4730de7ecd5a" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd354e75-818c-3bb4-a0e6-9632c3da917b" locEndPos="26" locType="sr" hash="65740504" locEndLn="59" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Goodbye" ln="59" locFile="/build/../../../../../../../../driver.c" locStartln="59" sev="5" auth="username" locRef="2" rule="CODSTA-203" lnHash="-1303736882" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1303736882" unbViolId="0806b888-879c-3482-a09b-58f609311cc6" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24c6d68f-ae7a-37fc-bb4d-4390560f24a9" locEndPos="26" locType="sr" hash="65740504" locEndLn="59" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Goodbye" ln="59" locFile="/build/../../../../../../../../driver.c" locStartln="59" sev="1" auth="username" locRef="2" rule="APSC_DV-003110-a" lnHash="-1303736882" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1303736882" unbViolId="5bb41d04-8b46-3bc3-8939-0ff4f8b79be1" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78769e14-da72-34d5-9a4f-4acfed1a6a15" locEndPos="26" locType="sr" hash="65740504" locEndLn="59" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Goodbye" ln="59" locFile="/build/../../../../../../../../driver.c" locStartln="59" sev="1" auth="username" locRef="2" rule="CERT_C-MSC41-a" lnHash="-1303736882" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1303736882" unbViolId="d5ef8818-4148-3e94-ad64-531fc3228614" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5280b8ab-c3b4-3910-8fb8-ebb7af789614" locEndPos="26" locType="sr" hash="65740504" locEndLn="59" goals="0," />
    <StdViol msg="String literal &quot;Goodbye&quot; is passed to function 'print_string' as pointer to non-const object" ln="59" locFile="/build/../../../../../../../../driver.c" locStartln="59" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="-1303736882" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1303736882" unbViolId="f8899949-ba62-33c9-aedb-17f4b0c6aa0a" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="01023a6b-8309-32f5-a1aa-620d99aa19ff" locEndPos="26" locType="sr" hash="65740504" locEndLn="59" goals="0," />
    <StdViol msg="String literal &quot;Goodbye&quot; is passed to function 'print_string' as pointer to non-const object" ln="59" locFile="/build/../../../../../../../../driver.c" locStartln="59" sev="2" auth="username" locRef="2" rule="AUTOSAR-A2_13_4-a" lnHash="-1303736882" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1303736882" unbViolId="3a5f8769-9217-313a-9b34-d8df095d19e6" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d61d0528-d3b0-3c6d-8375-cd85d3135fa3" locEndPos="26" locType="sr" hash="65740504" locEndLn="59" goals="0," />
    <StdViol msg="String literal &quot;Goodbye&quot; is passed to function 'print_string' as pointer to non-const object" ln="59" locFile="/build/../../../../../../../../driver.c" locStartln="59" sev="2" auth="username" locRef="2" rule="JSF-151.1" lnHash="-1303736882" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1303736882" unbViolId="3b07934c-c85c-3e0f-8535-0fa3df8ea949" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="659aed48-b320-387e-abc2-1b2538040cd3" locEndPos="26" locType="sr" hash="65740504" locEndLn="59" goals="0," />
    <StdViol msg="String literal &quot;Goodbye&quot; is passed to function 'print_string' as pointer to non-const object" ln="59" locFile="/build/../../../../../../../../driver.c" locStartln="59" sev="2" auth="username" locRef="2" rule="PB-27" lnHash="-1303736882" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1303736882" unbViolId="cdeb55cb-06c7-3155-a000-b8143cbd44be" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5bf81628-8c97-3b31-a17f-fecfb6aa6057" locEndPos="26" locType="sr" hash="65740504" locEndLn="59" goals="0," />
    <StdViol msg="String literal &quot;Goodbye&quot; is passed to function 'print_string' as pointer to non-const object" ln="59" locFile="/build/../../../../../../../../driver.c" locStartln="59" sev="3" auth="username" locRef="2" rule="CERT_C-STR05-a" lnHash="-1303736882" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1303736882" unbViolId="2c39ff54-9fc4-3169-b561-57b4ce52e9e4" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="886cd414-2442-3600-9c02-1ec505c8cfab" locEndPos="26" locType="sr" hash="65740504" locEndLn="59" goals="0," />
    <StdViol msg="String literal &quot;Goodbye&quot; is passed to function 'print_string' as pointer to non-const object" ln="59" locFile="/build/../../../../../../../../driver.c" locStartln="59" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-7_4" lnHash="-1303736882" rule.header="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" tool="c++test" lineHash="-1303736882" unbViolId="5d7c3aa0-838b-36b1-a380-f309a2b65e4d" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f85382ba-69bd-3b3b-8d52-cc883c430e5e" locEndPos="26" locType="sr" hash="65740504" locEndLn="59" goals="0," />
    <StdViol msg="String literal &quot;Goodbye&quot; is passed to function 'print_string' as pointer to non-const object" ln="59" locFile="/build/../../../../../../../../driver.c" locStartln="59" sev="2" auth="username" locRef="2" rule="CERT_C-STR30-a" lnHash="-1303736882" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1303736882" unbViolId="587174a9-f6ba-38b7-951c-fb85cacabc68" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78d844f8-caa8-3ef3-9c25-0beb940a6b00" locEndPos="26" locType="sr" hash="65740504" locEndLn="59" goals="0," />
    <StdViol msg="Infinite loop contains a terminate point" ln="60" locFile="/build/../../../../../../../../driver.c" locStartln="60" sev="3" auth="username" locRef="2" rule="CODSTA-85" lnHash="-1196601077" rule.header="Avoid exit points within infinite loops" tool="c++test" lineHash="-1196601077" unbViolId="1ed66369-b764-38e3-9dfd-7c7a064fe16f" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5def479-f9cd-38ea-9234-90c021f16c17" locEndPos="13" locType="sr" hash="65740504" locEndLn="60" goals="0," />
    <StdViol msg="Provide at most one exit point in 'main_loop' function. The second exit point is at the end of function." ln="60" locFile="/build/../../../../../../../../driver.c" locStartln="60" sev="3" auth="username" locRef="2" rule="CODSTA-91" lnHash="-1196601077" rule.header="A function shall have at most one exit point" tool="c++test" lineHash="-1196601077" unbViolId="187c872e-accf-322d-87e7-2b7913387cf5" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef07433e-c9cd-3e21-8cf2-dc113f505cce" locEndPos="13" locType="sr" hash="65740504" locEndLn="60" goals="0," />
    <StdViol msg="'return' statement should be at the end of the 'main_loop' function" ln="60" locFile="/build/../../../../../../../../driver.c" locStartln="60" sev="3" auth="username" locRef="2" rule="MISRA2004-14_7" lnHash="-1196601077" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-1196601077" unbViolId="b0151c91-f1df-3293-8f96-0bd9265d0e18" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="748d9b4f-4f21-366b-947a-0995a063dc74" locEndPos="13" locType="sr" hash="65740504" locEndLn="60" goals="0," />
    <StdViol msg="'return' statement should be at the end of the 'main_loop' function" ln="60" locFile="/build/../../../../../../../../driver.c" locStartln="60" sev="2" auth="username" locRef="2" rule="MISRA2008-6_6_5" lnHash="-1196601077" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-1196601077" unbViolId="524ff635-2339-3125-a5f8-db2a476ecd68" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="45e97956-7278-3667-967f-10cb0905eefc" locEndPos="13" locType="sr" hash="65740504" locEndLn="60" goals="0," />
    <StdViol msg="'return' statement should be at the end of the 'main_loop' function" ln="60" locFile="/build/../../../../../../../../driver.c" locStartln="60" sev="4" auth="username" locRef="2" rule="MISRAC2012-RULE_15_5-a" lnHash="-1196601077" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-1196601077" unbViolId="c24e1fe9-5572-39bd-9c5b-4fb9dc00c2a9" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4231f5c2-3fac-315f-b2da-e84ef330c4ca" locEndPos="13" locType="sr" hash="65740504" locEndLn="60" goals="0," />
    <StdViol msg="'return' statement should be at the end of the 'main_loop' function" ln="60" locFile="/build/../../../../../../../../driver.c" locStartln="60" sev="4" auth="username" locRef="2" rule="MISRA2012-RULE-15_5" lnHash="-1196601077" rule.header="A function should have a single point of exit at the end" tool="c++test" lineHash="-1196601077" unbViolId="0dd529d5-341e-3b11-ac80-6b1fc1f2d8d2" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8839eef8-ca28-3a6e-80bc-a1428e1b1b2c" locEndPos="13" locType="sr" hash="65740504" locEndLn="60" goals="0," />
    <StdViol msg="'return' statement should be at the end of the 'main_loop' function" ln="60" locFile="/build/../../../../../../../../driver.c" locStartln="60" sev="3" auth="username" locRef="2" rule="JSF-113" lnHash="-1196601077" rule.header="Functions will have a single exit point" tool="c++test" lineHash="-1196601077" unbViolId="7aade734-2f9a-3f36-a0d8-0bb7ea961bd1" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1404107a-ece8-31f2-84af-1a7167a7114c" locEndPos="13" locType="sr" hash="65740504" locEndLn="60" goals="0," />
    <StdViol msg="Use // comments only" ln="62" locFile="/build/../../../../../../../../driver.c" locStartln="62" sev="3" auth="username" locRef="2" rule="HICPP-2_3_1-a" lnHash="486816811" rule.header="Prefer C++ style comment" tool="c++test" lineHash="486816811" unbViolId="2c1ba0b3-cf5b-3738-8646-d1531a9ab994" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10ed840f-3539-3b2b-bec5-e69a7b74e824" locEndPos="13" locType="sr" hash="65740504" locEndLn="62" goals="0," />
    <StdViol msg="Use // comments only" ln="62" locFile="/build/../../../../../../../../driver.c" locStartln="62" sev="2" auth="username" locRef="2" rule="JSF-126" lnHash="486816811" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="486816811" unbViolId="390c319b-0f72-3258-9fcd-74268320be9b" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="771384f7-3fbe-3c5d-b218-498b2b75bcb2" locEndPos="13" locType="sr" hash="65740504" locEndLn="62" goals="0," />
    <StdViol msg="Use // comments only" ln="62" locFile="/build/../../../../../../../../driver.c" locStartln="62" sev="3" auth="username" locRef="2" rule="COMMENT-01" lnHash="486816811" rule.header="Prefer C++ style comment" tool="c++test" lineHash="486816811" unbViolId="ded97d36-400c-301d-bfed-ca029721e2f2" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4eb5dea7-7aea-3ccc-b150-dd4f3d1c206c" locEndPos="13" locType="sr" hash="65740504" locEndLn="62" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="63" locFile="/build/../../../../../../../../driver.c" locStartln="63" sev="3" auth="username" locRef="2" rule="CODSTA-122_a" lnHash="94038296" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="94038296" unbViolId="0e97a1e1-a748-3686-b578-10ee4eab32eb" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7d1bfca-ce90-3000-9009-3ba544895f1c" locEndPos="13" locType="sr" hash="65740504" locEndLn="63" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="63" locFile="/build/../../../../../../../../driver.c" locStartln="63" sev="1" auth="username" locRef="2" rule="CERT_C-ERR33-a" lnHash="94038296" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="94038296" unbViolId="552a2fd5-049f-3686-a2b3-cd679c04f671" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5cdb7ed8-a757-3c8d-960a-b19dee715271" locEndPos="13" locType="sr" hash="65740504" locEndLn="63" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="63" locFile="/build/../../../../../../../../driver.c" locStartln="63" sev="1" auth="username" locRef="2" rule="CERT_C-POS54-a" lnHash="94038296" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="94038296" unbViolId="fbfc8564-44c5-39e9-bd7e-003e16492748" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09a2eeda-6c06-3021-aeb6-90ff2494a0a5" locEndPos="13" locType="sr" hash="65740504" locEndLn="63" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="63" locFile="/build/../../../../../../../../driver.c" locStartln="63" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_17_7-a" lnHash="94038296" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="94038296" unbViolId="f99a2264-31c4-3001-a9f2-7530a8c22cfd" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="841fb41e-6004-3886-a7f6-60ca5bc45465" locEndPos="13" locType="sr" hash="65740504" locEndLn="63" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="63" locFile="/build/../../../../../../../../driver.c" locStartln="63" sev="3" auth="username" locRef="2" rule="CERT_C-EXP12-a" lnHash="94038296" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="94038296" unbViolId="a7272812-5eb3-3f8a-b9ca-7a7f1d72d821" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="882d7f56-253a-369c-ad38-ba9e3fce7114" locEndPos="13" locType="sr" hash="65740504" locEndLn="63" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="63" locFile="/build/../../../../../../../../driver.c" locStartln="63" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-17_7_a" lnHash="94038296" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="94038296" unbViolId="f6fde331-8416-30c2-b541-858f7d232b4e" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e559b5ea-785a-3c6a-9069-09a24148742e" locEndPos="13" locType="sr" hash="65740504" locEndLn="63" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="63" locFile="/build/../../../../../../../../driver.c" locStartln="63" sev="3" auth="username" locRef="2" rule="MISRA2004-16_10" lnHash="94038296" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="94038296" unbViolId="a75dd3b5-1ed3-3b08-8368-5e8a2192c163" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb84cdcd-8f5e-33e9-b9b2-94f5cb7aacd0" locEndPos="13" locType="sr" hash="65740504" locEndLn="63" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="63" locFile="/build/../../../../../../../../driver.c" locStartln="63" sev="2" auth="username" locRef="2" rule="AUTOSAR-M0_3_2-a" lnHash="94038296" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="94038296" unbViolId="9df5b52f-53af-37c3-9416-ccd6ddacc4dc" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9eecd038-28b7-341f-b322-9e544f264687" locEndPos="13" locType="sr" hash="65740504" locEndLn="63" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="63" locFile="/build/../../../../../../../../driver.c" locStartln="63" sev="2" auth="username" locRef="2" rule="MISRA2008-0_3_2" lnHash="94038296" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="94038296" unbViolId="a400093e-3b47-3cca-a697-a1d409597fdf" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e6de764a-9b39-35ed-97ba-be9cc7cd1b57" locEndPos="13" locType="sr" hash="65740504" locEndLn="63" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="63" locFile="/build/../../../../../../../../driver.c" locStartln="63" sev="3" auth="username" locRef="2" rule="JSF-115" lnHash="94038296" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="94038296" unbViolId="7c23a606-06a6-30c1-884e-41f4bbeade58" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5cbb0044-57e7-378d-ba51-511f09edee66" locEndPos="13" locType="sr" hash="65740504" locEndLn="63" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Invalid Action ... try again!" ln="63" locFile="/build/../../../../../../../../driver.c" locStartln="63" sev="5" auth="username" locRef="2" rule="CWE-798-a" lnHash="94038296" rule.header="Do not hard code string literals" tool="c++test" lineHash="94038296" unbViolId="fca7d84f-148a-3d58-84ed-5f39bb87a698" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="340901b8-92ee-3aea-adc2-a3b3a3336ff7" locEndPos="26" locType="sr" hash="65740504" locEndLn="63" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Invalid Action ... try again!" ln="63" locFile="/build/../../../../../../../../driver.c" locStartln="63" sev="5" auth="username" locRef="2" rule="CODSTA-203" lnHash="94038296" rule.header="Do not hard code string literals" tool="c++test" lineHash="94038296" unbViolId="7f65edc8-0749-3571-a8f2-7a4700adbd80" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="25013a1b-c9a5-3fbd-94be-226b138d226f" locEndPos="26" locType="sr" hash="65740504" locEndLn="63" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Invalid Action ... try again!" ln="63" locFile="/build/../../../../../../../../driver.c" locStartln="63" sev="1" auth="username" locRef="2" rule="APSC_DV-003110-a" lnHash="94038296" rule.header="Do not hard code string literals" tool="c++test" lineHash="94038296" unbViolId="4626b025-bed6-310f-937a-04f5058bd2b1" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="844fc0e0-4dca-3888-a8de-00ff3d28770f" locEndPos="26" locType="sr" hash="65740504" locEndLn="63" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Invalid Action ... try again!" ln="63" locFile="/build/../../../../../../../../driver.c" locStartln="63" sev="1" auth="username" locRef="2" rule="CERT_C-MSC41-a" lnHash="94038296" rule.header="Do not hard code string literals" tool="c++test" lineHash="94038296" unbViolId="6ab30e29-10a6-3d01-8956-33476a2b65d3" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2abbc756-2f9f-3d88-b487-d0d6586ae20b" locEndPos="26" locType="sr" hash="65740504" locEndLn="63" goals="0," />
    <StdViol msg="String literal &quot;Invalid Action ... try again!&quot; is passed to function 'print_string' as pointer to non-const object" ln="63" locFile="/build/../../../../../../../../driver.c" locStartln="63" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_7_4-a" lnHash="94038296" rule.header="A string literal shall not be modified" tool="c++test" lineHash="94038296" unbViolId="5701d801-4b39-30f0-81df-7a0edefefde2" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="39dbedb3-1fe6-334b-89c7-def8387acd9c" locEndPos="26" locType="sr" hash="65740504" locEndLn="63" goals="0," />
    <StdViol msg="String literal &quot;Invalid Action ... try again!&quot; is passed to function 'print_string' as pointer to non-const object" ln="63" locFile="/build/../../../../../../../../driver.c" locStartln="63" sev="2" auth="username" locRef="2" rule="AUTOSAR-A2_13_4-a" lnHash="94038296" rule.header="A string literal shall not be modified" tool="c++test" lineHash="94038296" unbViolId="1cde15fd-647c-3645-ab28-bd27966ff8de" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00c0d365-6bc4-37d8-afa3-e01f96a181c4" locEndPos="26" locType="sr" hash="65740504" locEndLn="63" goals="0," />
    <StdViol msg="String literal &quot;Invalid Action ... try again!&quot; is passed to function 'print_string' as pointer to non-const object" ln="63" locFile="/build/../../../../../../../../driver.c" locStartln="63" sev="2" auth="username" locRef="2" rule="JSF-151.1" lnHash="94038296" rule.header="A string literal shall not be modified" tool="c++test" lineHash="94038296" unbViolId="eb42672c-92b9-3a42-a5e6-840f61838006" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="faa49246-ab5a-30d8-b369-b92bcf41191d" locEndPos="26" locType="sr" hash="65740504" locEndLn="63" goals="0," />
    <StdViol msg="String literal &quot;Invalid Action ... try again!&quot; is passed to function 'print_string' as pointer to non-const object" ln="63" locFile="/build/../../../../../../../../driver.c" locStartln="63" sev="2" auth="username" locRef="2" rule="PB-27" lnHash="94038296" rule.header="A string literal shall not be modified" tool="c++test" lineHash="94038296" unbViolId="f5b08f18-7962-300e-a899-d6883c9ef8d3" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="424cc59c-a8c1-3d61-80df-19788124db51" locEndPos="26" locType="sr" hash="65740504" locEndLn="63" goals="0," />
    <StdViol msg="String literal &quot;Invalid Action ... try again!&quot; is passed to function 'print_string' as pointer to non-const object" ln="63" locFile="/build/../../../../../../../../driver.c" locStartln="63" sev="3" auth="username" locRef="2" rule="CERT_C-STR05-a" lnHash="94038296" rule.header="A string literal shall not be modified" tool="c++test" lineHash="94038296" unbViolId="8689225f-31bc-394d-aa3c-3a3f24f81615" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67621bea-ee57-3728-87f7-a3ba44e53e6e" locEndPos="26" locType="sr" hash="65740504" locEndLn="63" goals="0," />
    <StdViol msg="String literal &quot;Invalid Action ... try again!&quot; is passed to function 'print_string' as pointer to non-const object" ln="63" locFile="/build/../../../../../../../../driver.c" locStartln="63" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-7_4" lnHash="94038296" rule.header="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" tool="c++test" lineHash="94038296" unbViolId="d36947e2-6958-31b3-aff6-67a12ec88061" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="972600e2-3222-39fd-aed5-0da61dd87931" locEndPos="26" locType="sr" hash="65740504" locEndLn="63" goals="0," />
    <StdViol msg="String literal &quot;Invalid Action ... try again!&quot; is passed to function 'print_string' as pointer to non-const object" ln="63" locFile="/build/../../../../../../../../driver.c" locStartln="63" sev="2" auth="username" locRef="2" rule="CERT_C-STR30-a" lnHash="94038296" rule.header="A string literal shall not be modified" tool="c++test" lineHash="94038296" unbViolId="3d166305-66b7-3302-8510-8075ba6117f9" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f2fabb56-b173-38f7-a1a3-509aaedf0476" locEndPos="26" locType="sr" hash="65740504" locEndLn="63" goals="0," />
    <DupViol msg="Duplicated code: 'break;'" ln="64" locFile="/build/../../../../../../../../driver.c" locStartln="64" sev="3" auth="username" locRef="2" rule="CDD-DUPC" lnHash="207609628" rule.header="Avoid code duplication" tool="c++test" lineHash="207609628" unbViolId="62963a9d-3406-36a9-aea2-c18b8348ae18" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="daaa6873-4501-3740-94aa-6bab8240e665" locEndPos="18" locType="sr" urgent="true" hash="65740504" locEndLn="64" goals="1,">
      <ElDescList>
        <ElDesc lineHash="207609628" locType="sr" srcRnghash="65740504" locRef="2" srcRngFile="/build/../../../../../../../../driver.c" ln="64" srcRngStartPos="12" srcRngEndPos="18" srcRngStartln="64" srcRngEndLn="64" desc="[Line 64] Duplicated code in file 'driver.c'" rngLn="64" />
        <ElDesc lineHash="207609628" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="117" srcRngStartPos="12" srcRngEndPos="18" srcRngStartln="117" srcRngEndLn="117" desc="[Line 117] Duplicated code in file 'timer.c'" rngLn="117" />
      </ElDescList>
    </DupViol>
    <StdViol msg="R-3119: use of non-prototype function declarator" ln="69" locFile="/build/../../../../../../../../driver.c" locStartln="69" sev="5" auth="username" locRef="2" rule="PARSER-REMARK" lnHash="1440699851" rule.header="Parser remark" tool="c++test" lineHash="1440699851" unbViolId="89878854-57ea-341b-9686-d4d3f3d7d2c7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7691a0d8-178a-36bb-ab88-451666d61f1e" locEndPos="5" locType="sr" urgent="true" hash="65740504" locEndLn="69" goals="1," />
    <StdViol msg="The definition of the 'main' function is not preceded by a comment" ln="69" locFile="/build/../../../../../../../../driver.c" locStartln="69" sev="3" auth="username" locRef="2" rule="COMMENT-04" lnHash="1440699851" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="1440699851" unbViolId="9f653c76-0835-3436-85e8-4c939a8ecc9b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6669fb68-7d31-32e6-929c-6cfc82684f5e" locEndPos="5" locType="sr" hash="65740504" locEndLn="69" goals="0," />
    <StdViol msg="The definition of the 'main' function is not preceded by a comment" ln="69" locFile="/build/../../../../../../../../driver.c" locStartln="69" sev="4" auth="username" locRef="2" rule="JSF-134" lnHash="1440699851" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="1440699851" unbViolId="282051be-80bb-3274-b101-8ee2c7b2b774" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="efc5dfa4-56aa-311f-b01f-66509f64a72f" locEndPos="5" locType="sr" hash="65740504" locEndLn="69" goals="0," />
    <StdViol msg="Function 'main' is not in prototype form" ln="69" locFile="/build/../../../../../../../../driver.c" locStartln="69" sev="2" auth="username" locRef="2" rule="MISRAC2012-RULE_8_2-c" lnHash="1440699851" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1440699851" unbViolId="c0f9de48-4822-32d3-8d44-7730550e7aed" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d5efcbb-ce62-3337-ae08-2b3f9ae78df8" locEndPos="5" locType="sr" hash="65740504" locEndLn="69" goals="0," />
    <StdViol msg="Function 'main' is not in prototype form" ln="69" locFile="/build/../../../../../../../../driver.c" locStartln="69" sev="3" auth="username" locRef="2" rule="CERT_C-EXP37-c" lnHash="1440699851" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1440699851" unbViolId="10b0e0a1-d384-3afd-855b-90b98acfc826" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8867d0c-90e6-329e-8264-65dfc717759e" locEndPos="5" locType="sr" hash="65740504" locEndLn="69" goals="0," />
    <StdViol msg="Function 'main' is not in prototype form" ln="69" locFile="/build/../../../../../../../../driver.c" locStartln="69" sev="2" auth="username" locRef="2" rule="MISRA2012-RULE-8_2_c" lnHash="1440699851" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1440699851" unbViolId="a8ab95a3-7bff-3766-a545-dad8036f12f1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="19f1fbb3-c66e-3d9d-9c0f-3f3ff6e20337" locEndPos="5" locType="sr" hash="65740504" locEndLn="69" goals="0," />
    <StdViol msg="Function 'main' is not in prototype form" ln="69" locFile="/build/../../../../../../../../driver.c" locStartln="69" sev="3" auth="username" locRef="2" rule="CODSTA-159" lnHash="1440699851" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1440699851" unbViolId="c277b2c1-7952-3b7c-9d3c-6e3d6607f643" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d614110c-7e28-3c2c-986f-0ca50b878397" locEndPos="5" locType="sr" hash="65740504" locEndLn="69" goals="0," />
    <StdViol msg="The 'main' function should be preceded by a comment that contains the '@brief' tag" ln="69" locFile="/build/../../../../../../../../driver.c" locStartln="69" sev="3" auth="username" locRef="2" rule="COMMENT-14" lnHash="1440699851" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1440699851" unbViolId="6d9302dc-725e-32a3-b1a5-69a059825465" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67f7c0ec-3589-3ec8-baf2-3a13a199d32b" locEndPos="5" locType="sr" hash="65740504" locEndLn="69" goals="0," />
    <StdViol msg="The 'main' function should be preceded by a comment that contains the '@brief' tag" ln="69" locFile="/build/../../../../../../../../driver.c" locStartln="69" sev="2" auth="username" locRef="2" rule="AUTOSAR-A2_7_3-a" lnHash="1440699851" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1440699851" unbViolId="3d7b80c2-123f-336d-b756-51bbd6c311e3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f12443ca-dcc8-3194-9e2c-0cb26c32353b" locEndPos="5" locType="sr" hash="65740504" locEndLn="69" goals="0," />
    <StdViol msg="The 'main' function should be preceded by a comment that contains the '@return' tag" ln="69" locFile="/build/../../../../../../../../driver.c" locStartln="69" sev="3" auth="username" locRef="2" rule="COMMENT-14_b" lnHash="1440699851" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1440699851" unbViolId="875abc42-b8bb-3f6c-b7ea-b88271312aac" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="adcc99b3-cdb1-3efa-88b5-8a4ca03a1e17" locEndPos="5" locType="sr" hash="65740504" locEndLn="69" goals="0," />
    <StdViol msg="The 'main' function should be preceded by a comment that contains the '@return' tag" ln="69" locFile="/build/../../../../../../../../driver.c" locStartln="69" sev="2" auth="username" locRef="2" rule="AUTOSAR-A2_7_3-b" lnHash="1440699851" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1440699851" unbViolId="b7f762e1-5605-3597-817d-3f96cd36f3f0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09f57b42-be94-32a1-808f-e13073f8fae9" locEndPos="5" locType="sr" hash="65740504" locEndLn="69" goals="0," />
    <StdViol msg="'main' shall be declared as unsigned int or signed int" ln="69" locFile="/build/../../../../../../../../driver.c" locStartln="69" sev="3" auth="username" locRef="2" rule="PORT-13" lnHash="1440699851" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="1440699851" unbViolId="dec7a811-8686-30ad-bc1c-d1c2a1a7c803" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="19012422-5617-3213-b3c1-ebe680f12234" locEndPos="5" locType="sr" hash="65740504" locEndLn="69" goals="0," />
    <StdViol msg="Function 'main' has empty parameter list" ln="69" locFile="/build/../../../../../../../../driver.c" locStartln="69" sev="3" auth="username" locRef="2" rule="CODSTA-40" lnHash="1440699851" rule.header="'void' should be used when a function is passed or returns no values" tool="c++test" lineHash="1440699851" unbViolId="44fdccfa-9951-3e12-94dd-e885d83d03e7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="228a7028-a18c-35f0-8cd7-c05696af2f0a" locEndPos="5" locType="sr" hash="65740504" locEndLn="69" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'main'" ln="69" locFile="/build/../../../../../../../../driver.c" locStartln="69" sev="3" auth="username" locRef="2" rule="FORMAT-28" lnHash="1440699851" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="1440699851" unbViolId="b6fd16d7-6cba-332f-9efd-6453de6a3a20" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94cb0548-2bca-34c7-85ad-729057c1eb2c" locEndPos="5" locType="sr" hash="65740504" locEndLn="69" goals="0," />
    <StdViol msg="Function 'main' has Cyclomatic Complexity value: 1" ln="69" locFile="/build/../../../../../../../../driver.c" locStartln="69" sev="5" auth="username" locRef="2" rule="METRICS-29" lnHash="1440699851" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="1440699851" unbViolId="64167d74-04f4-328c-ac60-bebb89b298c0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e9971a6-2dc8-36cc-b74f-f9e99fff5d9b" locEndPos="5" locType="sr" hash="65740504" locEndLn="69" goals="0," />
    <StdViol msg="Function 'main' has Essential Complexity value: 1" ln="69" locFile="/build/../../../../../../../../driver.c" locStartln="69" sev="5" auth="username" locRef="2" rule="METRICS-33" lnHash="1440699851" rule.header="Report Essential Complexity" tool="c++test" lineHash="1440699851" unbViolId="dc97ca24-b626-3f6e-a403-f5d67c2cca69" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c39032f5-aa40-3b5e-a437-45191354a978" locEndPos="5" locType="sr" hash="65740504" locEndLn="69" goals="0," />
    <StdViol msg="The value of Halstead's delivered bugs (B) for function 'main' is 0.02" ln="69" locFile="/build/../../../../../../../../driver.c" locStartln="69" sev="3" auth="username" locRef="2" rule="METRICS-43" lnHash="1440699851" rule.header="Report the value of Halstead's delivered bugs (B) for a function" tool="c++test" lineHash="1440699851" unbViolId="6a779ba2-f26f-3032-affd-aaef5a3ab34c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f1d840d-7a6e-3a6e-9217-fc30875970e4" locEndPos="5" locType="sr" hash="65740504" locEndLn="69" goals="0," />
    <StdViol msg="Declare function 'main' with parameter type void" ln="69" locFile="/build/../../../../../../../../driver.c" locStartln="69" sev="3" auth="username" locRef="2" rule="MISRA2004-16_5" lnHash="1440699851" rule.header="Functions with no parameters shall be declared with parameter type void" tool="c++test" lineHash="1440699851" unbViolId="bae4151e-97e9-359f-b96c-488c309981ab" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0c41bec-7e01-3999-afe6-a86cae05e2c6" locEndPos="5" locType="sr" hash="65740504" locEndLn="69" goals="0," />
    <StdViol msg="Prototype of function 'init_timer' does not precede function call" ln="71" locFile="/build/../../../../../../../../driver.c" locStartln="71" sev="3" auth="username" locRef="2" rule="CERT_C-EXP37-d" lnHash="932563601" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="932563601" unbViolId="d4d2398b-7062-301d-a581-b40b78750d1a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0a4b013-1dc3-39fb-b97d-be3eea00a627" locEndPos="5" locType="sr" hash="65740504" locEndLn="71" goals="0," />
    <StdViol msg="Prototype of function 'init_timer' does not precede function call" ln="71" locFile="/build/../../../../../../../../driver.c" locStartln="71" sev="1" auth="username" locRef="2" rule="MISRA2012-RULE-17_3" lnHash="932563601" rule.header="A function shall not be declared implicitly" tool="c++test" lineHash="932563601" unbViolId="9c2e5484-4640-31fb-9bf6-e7f3b7c49f18" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="169b5530-63ed-3cd4-9179-d7aaddff1ed7" locEndPos="5" locType="sr" hash="65740504" locEndLn="71" goals="0," />
    <StdViol msg="Prototype of function 'init_timer' does not precede function call" ln="71" locFile="/build/../../../../../../../../driver.c" locStartln="71" sev="3" auth="username" locRef="2" rule="MISRA2004-8_1_b" lnHash="932563601" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="932563601" unbViolId="4fd0bb12-64d6-3c1e-8f0a-dd7d1173fae0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b09ce0a7-5963-36db-825c-09bc84a75e26" locEndPos="5" locType="sr" hash="65740504" locEndLn="71" goals="0," />
    <StdViol msg="Prototype of function 'init_timer' does not precede function call" ln="71" locFile="/build/../../../../../../../../driver.c" locStartln="71" sev="3" auth="username" locRef="2" rule="MISRA-071_b" lnHash="932563601" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="932563601" unbViolId="ee938836-eecb-3456-b210-60f8d4dd664a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98571e77-5c3b-3c10-8b16-bd843353eea1" locEndPos="5" locType="sr" hash="65740504" locEndLn="71" goals="0," />
    <StdViol msg="Prototype of function 'init_timer' does not precede function call" ln="71" locFile="/build/../../../../../../../../driver.c" locStartln="71" sev="1" auth="username" locRef="2" rule="MISRAC2012-RULE_17_3-a" lnHash="932563601" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="932563601" unbViolId="b4f21dbd-fbaa-3e40-8557-6871168e09ca" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cabf3ee8-dec9-3db5-b99c-941b1f5dfd0e" locEndPos="5" locType="sr" hash="65740504" locEndLn="71" goals="0," />
    <StdViol msg="Use // comments only" ln="71" locFile="/build/../../../../../../../../driver.c" locStartln="71" sev="3" auth="username" locRef="2" rule="HICPP-2_3_1-a" lnHash="932563601" rule.header="Prefer C++ style comment" tool="c++test" lineHash="932563601" unbViolId="14794528-f93c-39a6-a4f2-8f1768d89ffa" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b773fb8a-e3f2-3d89-8116-11fb23810a4a" locEndPos="23" locType="sr" hash="65740504" locEndLn="71" goals="0," />
    <StdViol msg="Use // comments only" ln="71" locFile="/build/../../../../../../../../driver.c" locStartln="71" sev="2" auth="username" locRef="2" rule="JSF-126" lnHash="932563601" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="932563601" unbViolId="8da9a9ba-b560-3f21-bef2-83e960dde122" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0ddab5a-0185-33c7-8756-1ce8d93a0e52" locEndPos="23" locType="sr" hash="65740504" locEndLn="71" goals="0," />
    <StdViol msg="Use // comments only" ln="71" locFile="/build/../../../../../../../../driver.c" locStartln="71" sev="3" auth="username" locRef="2" rule="COMMENT-01" lnHash="932563601" rule.header="Prefer C++ style comment" tool="c++test" lineHash="932563601" unbViolId="ee728839-0e9b-341b-88a4-2a5cae52c11e" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e039534-ca74-30c8-9000-febe01345937" locEndPos="23" locType="sr" hash="65740504" locEndLn="71" goals="0," />
    <StdViol msg="Prototype of function 'main_loop' does not precede function call" ln="72" locFile="/build/../../../../../../../../driver.c" locStartln="72" sev="3" auth="username" locRef="2" rule="MISRA2004-8_1_a" lnHash="-660983347" rule.header="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" tool="c++test" lineHash="-660983347" unbViolId="3de42554-8301-3025-a0f6-240c964b304e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a3d77e8-41ea-3f70-b4a0-1a770460939e" locEndPos="5" locType="sr" hash="65740504" locEndLn="72" goals="0," />
    <StdViol msg="Prototype of function 'main_loop' does not precede function call" ln="72" locFile="/build/../../../../../../../../driver.c" locStartln="72" sev="3" auth="username" locRef="2" rule="MISRA-071_a" lnHash="-660983347" rule.header="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" tool="c++test" lineHash="-660983347" unbViolId="c6ad2362-c38d-3002-966b-d9ea2879981b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b96f920e-d2ab-389a-86fd-fe4fbed004f1" locEndPos="5" locType="sr" hash="65740504" locEndLn="72" goals="0," />
    <StdViol msg="Prototype of function 'main_loop' does not precede function call" ln="72" locFile="/build/../../../../../../../../driver.c" locStartln="72" sev="3" auth="username" locRef="2" rule="CERT_C-EXP37-d" lnHash="-660983347" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-660983347" unbViolId="5c1adcb7-3629-3db0-8bd1-f5911ee0b32f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="93e24947-7ea0-30f1-be7f-5c1266ee1e65" locEndPos="5" locType="sr" hash="65740504" locEndLn="72" goals="0," />
    <StdViol msg="Prototype of function 'main_loop' does not precede function call" ln="72" locFile="/build/../../../../../../../../driver.c" locStartln="72" sev="1" auth="username" locRef="2" rule="MISRA2012-RULE-17_3" lnHash="-660983347" rule.header="A function shall not be declared implicitly" tool="c++test" lineHash="-660983347" unbViolId="a44b1d94-594d-32df-9a8c-47baf5a78a93" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13260301-0f6f-3953-a59b-d7f051ae0701" locEndPos="5" locType="sr" hash="65740504" locEndLn="72" goals="0," />
    <StdViol msg="Prototype of function 'main_loop' does not precede function call" ln="72" locFile="/build/../../../../../../../../driver.c" locStartln="72" sev="3" auth="username" locRef="2" rule="MISRA2004-8_1_b" lnHash="-660983347" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-660983347" unbViolId="a1cdbbc1-4667-3a2e-99ad-de03ebdf87e4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5999f2e4-e85d-37b6-8fca-4d9295ecc905" locEndPos="5" locType="sr" hash="65740504" locEndLn="72" goals="0," />
    <StdViol msg="Prototype of function 'main_loop' does not precede function call" ln="72" locFile="/build/../../../../../../../../driver.c" locStartln="72" sev="3" auth="username" locRef="2" rule="MISRA-071_b" lnHash="-660983347" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-660983347" unbViolId="472d0ea2-d41a-3be6-a327-c63a8ce6cac5" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="41c97895-a796-3c21-9887-a11bd010e38d" locEndPos="5" locType="sr" hash="65740504" locEndLn="72" goals="0," />
    <StdViol msg="Prototype of function 'main_loop' does not precede function call" ln="72" locFile="/build/../../../../../../../../driver.c" locStartln="72" sev="1" auth="username" locRef="2" rule="MISRAC2012-RULE_17_3-a" lnHash="-660983347" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-660983347" unbViolId="adc9597d-3e2e-3d4a-8578-c64cb9dd2b7a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e7eb0bc9-b808-3ba6-b801-a90766476c41" locEndPos="5" locType="sr" hash="65740504" locEndLn="72" goals="0," />
    <StdViol msg="Use // comments only" ln="72" locFile="/build/../../../../../../../../driver.c" locStartln="72" sev="3" auth="username" locRef="2" rule="HICPP-2_3_1-a" lnHash="-660983347" rule.header="Prefer C++ style comment" tool="c++test" lineHash="-660983347" unbViolId="36183a00-752d-31c8-a92a-c95209caaae8" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7df5c0c9-05a5-337a-8490-265d5bfb7810" locEndPos="23" locType="sr" hash="65740504" locEndLn="72" goals="0," />
    <StdViol msg="Use // comments only" ln="72" locFile="/build/../../../../../../../../driver.c" locStartln="72" sev="2" auth="username" locRef="2" rule="JSF-126" lnHash="-660983347" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="-660983347" unbViolId="3b2349eb-21b2-3768-a371-f5a9de301f71" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3105a1d-2dfd-3cf1-aad5-6da2e24301ad" locEndPos="23" locType="sr" hash="65740504" locEndLn="72" goals="0," />
    <StdViol msg="Use // comments only" ln="72" locFile="/build/../../../../../../../../driver.c" locStartln="72" sev="3" auth="username" locRef="2" rule="COMMENT-01" lnHash="-660983347" rule.header="Prefer C++ style comment" tool="c++test" lineHash="-660983347" unbViolId="ca4c56f4-a535-35d2-abc4-f22711283234" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="880defb9-ff3f-35d8-be10-f7ad33f9d2ed" locEndPos="23" locType="sr" hash="65740504" locEndLn="72" goals="0," />
    <StdViol msg="Prototype of function 'uninit_timer' does not precede function call" ln="73" locFile="/build/../../../../../../../../driver.c" locStartln="73" sev="3" auth="username" locRef="2" rule="CERT_C-EXP37-d" lnHash="699424085" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="699424085" unbViolId="4b73b9da-10fa-3f37-addf-835a0d625876" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="66c497d9-8af5-33e8-a8f3-20ddbf95a1f6" locEndPos="5" locType="sr" hash="65740504" locEndLn="73" goals="0," />
    <StdViol msg="Prototype of function 'uninit_timer' does not precede function call" ln="73" locFile="/build/../../../../../../../../driver.c" locStartln="73" sev="1" auth="username" locRef="2" rule="MISRA2012-RULE-17_3" lnHash="699424085" rule.header="A function shall not be declared implicitly" tool="c++test" lineHash="699424085" unbViolId="b9d552fe-fdd0-3960-95a9-dd7cb58dd379" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="50a3ebe4-52dd-3a6f-9fa4-991488a72a16" locEndPos="5" locType="sr" hash="65740504" locEndLn="73" goals="0," />
    <StdViol msg="Prototype of function 'uninit_timer' does not precede function call" ln="73" locFile="/build/../../../../../../../../driver.c" locStartln="73" sev="3" auth="username" locRef="2" rule="MISRA2004-8_1_b" lnHash="699424085" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="699424085" unbViolId="fd5dbcf8-735c-3721-8398-b1949eb91e0b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7bc47864-6a2e-36d6-8f71-872185b9d1f7" locEndPos="5" locType="sr" hash="65740504" locEndLn="73" goals="0," />
    <StdViol msg="Prototype of function 'uninit_timer' does not precede function call" ln="73" locFile="/build/../../../../../../../../driver.c" locStartln="73" sev="3" auth="username" locRef="2" rule="MISRA-071_b" lnHash="699424085" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="699424085" unbViolId="98243f8a-21a7-377e-a70f-376114c92ed3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f8324be-fddf-3b41-9b4a-427d516319d0" locEndPos="5" locType="sr" hash="65740504" locEndLn="73" goals="0," />
    <StdViol msg="Prototype of function 'uninit_timer' does not precede function call" ln="73" locFile="/build/../../../../../../../../driver.c" locStartln="73" sev="1" auth="username" locRef="2" rule="MISRAC2012-RULE_17_3-a" lnHash="699424085" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="699424085" unbViolId="6997ce56-b5fe-3ac3-8be8-119e1b8022df" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="49624d0a-48fa-3a4d-aa9b-80aa582593cb" locEndPos="5" locType="sr" hash="65740504" locEndLn="73" goals="0," />
    <StdViol msg="Use // comments only" ln="73" locFile="/build/../../../../../../../../driver.c" locStartln="73" sev="3" auth="username" locRef="2" rule="HICPP-2_3_1-a" lnHash="699424085" rule.header="Prefer C++ style comment" tool="c++test" lineHash="699424085" unbViolId="8e7e082b-3283-3699-8b23-f6d45ef187e0" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4a3ea14-4980-3442-8d4b-6535123c9c5c" locEndPos="23" locType="sr" hash="65740504" locEndLn="73" goals="0," />
    <StdViol msg="Use // comments only" ln="73" locFile="/build/../../../../../../../../driver.c" locStartln="73" sev="2" auth="username" locRef="2" rule="JSF-126" lnHash="699424085" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="699424085" unbViolId="04c69b05-b0da-3a6c-8a41-669c0773d39d" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3733aae-a8a1-3e40-9ed3-72e894e62452" locEndPos="23" locType="sr" hash="65740504" locEndLn="73" goals="0," />
    <StdViol msg="Use // comments only" ln="73" locFile="/build/../../../../../../../../driver.c" locStartln="73" sev="3" auth="username" locRef="2" rule="COMMENT-01" lnHash="699424085" rule.header="Prefer C++ style comment" tool="c++test" lineHash="699424085" unbViolId="daece3f1-5cf6-3061-9bbb-a5114cc7ec51" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa2488de-4f5e-3b39-abb7-43d70a9b2ec6" locEndPos="23" locType="sr" hash="65740504" locEndLn="73" goals="0," />
    <DupViol msg="Duplicated code: 'return 0;'" ln="74" locFile="/build/../../../../../../../../driver.c" locStartln="74" sev="3" auth="username" locRef="2" rule="CDD-DUPC" lnHash="-1256396037" rule.header="Avoid code duplication" tool="c++test" lineHash="-1256396037" unbViolId="e42c0eff-7aa9-355d-a583-07bd751755b9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="819ce6e6-f78b-3ca5-965a-fa15bf06f425" locEndPos="13" locType="sr" urgent="true" hash="65740504" locEndLn="74" goals="1,">
      <ElDescList>
        <ElDesc lineHash="-1256396037" locType="sr" srcRnghash="65740504" locRef="2" srcRngFile="/build/../../../../../../../../driver.c" ln="74" srcRngStartPos="4" srcRngEndPos="13" srcRngStartln="74" srcRngEndLn="74" desc="[Line 74] Duplicated code in file 'driver.c'" rngLn="74" />
        <ElDesc lineHash="-1256396037" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="85" srcRngStartPos="4" srcRngEndPos="13" srcRngStartln="85" srcRngEndLn="85" desc="[Line 85] Duplicated code in file 'timer.c'" rngLn="85" />
      </ElDescList>
    </DupViol>
    <StdViol msg="'return' statement should be used with parenthesis" ln="74" locFile="/build/../../../../../../../../driver.c" locStartln="74" sev="3" auth="username" locRef="2" rule="FORMAT-25_b" lnHash="-1256396037" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="-1256396037" unbViolId="911b26d8-97d8-3991-8a6c-b157a78f76cb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a46593ab-343c-36e9-8465-8affeb88a52d" locEndPos="5" locType="sr" hash="65740504" locEndLn="74" goals="0," />
    <StdViol msg="The assertion density is lower than two assertions per function" ln="1" locFile="/build/../../../../../../../../timer.c" locStartln="1" sev="3" auth="username" locRef="3" rule="METRICS-31" lnHash="0" rule.header="The assertion density of the code should average to a minimum of two assertions per function" tool="c++test" lineHash="0" unbViolId="4eea2c84-3a08-3d0f-b7d8-ef86a46027f6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="93d4f745-4884-3f47-b9f0-48d4113f8134" locEndPos="1" locType="sr" hash="-275311578" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'timer.c' should declare a local constant string that begins from characters &quot;@(#)&quot; " ln="1" locFile="/build/../../../../../../../../timer.c" locStartln="1" sev="5" auth="username" locRef="3" rule="PFO-04" lnHash="0" rule.header="Every implementation file should declare a local constant string that describes the file" tool="c++test" lineHash="0" unbViolId="32b833c1-30dd-3a30-8660-84f319dd7877" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ade373c-46d8-35b3-8d3b-9d4774cc5575" locEndPos="1" locType="sr" hash="-275311578" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'timer.c'" ln="1" locFile="/build/../../../../../../../../timer.c" locStartln="1" sev="3" auth="username" locRef="3" rule="COMMENT-02" lnHash="0" rule.header="Provide copyright information" tool="c++test" lineHash="0" unbViolId="705e2c65-4556-3acb-94ed-b99b43d74105" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a79d2c6-f339-3cae-be74-ac47d6cbba92" locEndPos="1" locType="sr" hash="-275311578" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'timer.c'" ln="1" locFile="/build/../../../../../../../../timer.c" locStartln="1" sev="3" auth="username" locRef="3" rule="JSF-133_b" lnHash="0" rule.header="Every source file will contain copyright information" tool="c++test" lineHash="0" unbViolId="0e23b096-706a-329b-8d11-502ffcb10b97" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d48adfb8-afb7-3d6f-9741-9c448e46953f" locEndPos="1" locType="sr" hash="-275311578" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'timer.c'" ln="1" locFile="/build/../../../../../../../../timer.c" locStartln="1" sev="3" auth="username" locRef="3" rule="COMMENT-03" lnHash="0" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="0" unbViolId="b69f2c50-64e4-37ad-ad1f-fd871ba57577" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="842c9fe8-7736-36da-b565-d8f95e5ba568" locEndPos="1" locType="sr" hash="-275311578" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'timer.c'" ln="1" locFile="/build/../../../../../../../../timer.c" locStartln="1" sev="3" auth="username" locRef="3" rule="JSF-133_a" lnHash="0" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="0" unbViolId="7efa70e5-7929-33fb-aba3-c17a20f3e52f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="81bd440b-4e0f-325f-9cfd-34b3c6867746" locEndPos="1" locType="sr" hash="-275311578" locEndLn="1" goals="0," />
    <StdViol msg="Use // comments only" ln="2" locFile="/build/../../../../../../../../timer.c" locStartln="2" sev="3" auth="username" locRef="3" rule="HICPP-2_3_1-a" lnHash="1499" rule.header="Prefer C++ style comment" tool="c++test" lineHash="1499" unbViolId="79db0d9f-0cd0-3122-aa8d-c97f0a7c931e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c9c7f93-38d3-3aef-ae7d-2ba832ffc71f" locEndPos="1" locType="sr" hash="-275311578" locEndLn="2" goals="0," />
    <StdViol msg="Use // comments only" ln="2" locFile="/build/../../../../../../../../timer.c" locStartln="2" sev="2" auth="username" locRef="3" rule="JSF-126" lnHash="1499" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="1499" unbViolId="329bccc2-6fa0-3d54-9259-6967c885c688" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5216a821-d2b9-39dd-aca5-3ceb856fd3b8" locEndPos="1" locType="sr" hash="-275311578" locEndLn="2" goals="0," />
    <StdViol msg="Use // comments only" ln="2" locFile="/build/../../../../../../../../timer.c" locStartln="2" sev="3" auth="username" locRef="3" rule="COMMENT-01" lnHash="1499" rule.header="Prefer C++ style comment" tool="c++test" lineHash="1499" unbViolId="e0dea307-4248-368f-9b16-3504c9c2cc94" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3033630-08a9-34ed-956c-fd04fbfbe5a1" locEndPos="1" locType="sr" hash="-275311578" locEndLn="2" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="6" locFile="/build/../../../../../../../../timer.c" locStartln="6" sev="3" auth="username" locRef="3" rule="PREPROC-18" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be included" tool="c++test" lineHash="1233725276" unbViolId="08bc0e32-d9a3-3e73-988f-b0e2110a1813" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b73954de-884d-3852-a51b-b156f927de5b" locEndPos="1" locType="sr" hash="-275311578" locEndLn="6" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="6" locFile="/build/../../../../../../../../timer.c" locStartln="6" sev="2" auth="username" locRef="3" rule="JSF-022" lnHash="1233725276" rule.header="The input/output library &lt;stdio.h> shall not be used" tool="c++test" lineHash="1233725276" unbViolId="c0819f13-a971-3dd6-a9ff-0187310883dc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd399d4c-c288-3b56-aaf8-09f74743b4dc" locEndPos="1" locType="sr" hash="-275311578" locEndLn="6" goals="0," />
    <StdViol msg="Ensure that C Standard Library is securely used" ln="6" locFile="/build/../../../../../../../../timer.c" locStartln="6" sev="4" auth="username" locRef="3" rule="HICPP-17_2_1-a" lnHash="1233725276" rule.header="Wrap use of the C Standard Library" tool="c++test" lineHash="1233725276" unbViolId="a80964ef-c364-3ac6-ac58-8d3e83ec8998" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5224f93-1b6b-367e-bb14-6817ddb5f061" locEndPos="1" locType="sr" hash="-275311578" locEndLn="6" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="6" locFile="/build/../../../../../../../../timer.c" locStartln="6" sev="2" auth="username" locRef="3" rule="AUTOSAR-M27_0_1-a" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be used" tool="c++test" lineHash="1233725276" unbViolId="5156c361-095f-3829-ae7d-518ba3ecdf6e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c815d73-bf61-3d4c-984d-fb40b35d697a" locEndPos="1" locType="sr" hash="-275311578" locEndLn="6" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="6" locFile="/build/../../../../../../../../timer.c" locStartln="6" sev="2" auth="username" locRef="3" rule="MISRA2008-27_0_1" lnHash="1233725276" rule.header="The stream input/output library &lt;cstdio> shall not be used" tool="c++test" lineHash="1233725276" unbViolId="6286cf42-4ffb-3f4f-ae7f-5347044d155d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="29410dea-74f8-35d4-b503-080b6ae49a80" locEndPos="1" locType="sr" hash="-275311578" locEndLn="6" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="6" locFile="/build/../../../../../../../../timer.c" locStartln="6" sev="3" auth="username" locRef="3" rule="MISRA2004-20_9" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be used" tool="c++test" lineHash="1233725276" unbViolId="b4dc119f-9462-350a-b039-b8f7789758d0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d987d4a-52dd-3408-bf8b-a15e14e9f452" locEndPos="1" locType="sr" hash="-275311578" locEndLn="6" goals="0," />
    <StdViol msg="Ensure that C Standard Library is securely used" ln="7" locFile="/build/../../../../../../../../timer.c" locStartln="7" sev="4" auth="username" locRef="3" rule="HICPP-17_2_1-a" lnHash="-327381023" rule.header="Wrap use of the C Standard Library" tool="c++test" lineHash="-327381023" unbViolId="74044e33-f78e-3510-ad77-58a3e6eef2d9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4fde9ce2-85f4-3cff-b813-b06019d20542" locEndPos="1" locType="sr" hash="-275311578" locEndLn="7" goals="0," />
    <StdViol msg="Ensure that C Standard Library is securely used" ln="8" locFile="/build/../../../../../../../../timer.c" locStartln="8" sev="4" auth="username" locRef="3" rule="HICPP-17_2_1-a" lnHash="-868352270" rule.header="Wrap use of the C Standard Library" tool="c++test" lineHash="-868352270" unbViolId="fe53e9dc-891b-331a-81f0-b21835f5101c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0f1510d-cb4b-3fb0-94a5-fb4fbf0f8835" locEndPos="1" locType="sr" hash="-275311578" locEndLn="8" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;clock.h&quot;" ln="10" locFile="/build/../../../../../../../../timer.c" locStartln="10" sev="2" auth="username" locRef="3" rule="PREPROC-09" lnHash="666904961" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="666904961" unbViolId="a6b4d69c-25ff-3497-8dd8-ff033197462c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="556b6a59-2c79-398b-bf48-2e16dc9ec6ad" locEndPos="1" locType="sr" hash="-275311578" locEndLn="10" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;clock.h&quot;" ln="10" locFile="/build/../../../../../../../../timer.c" locStartln="10" sev="2" auth="username" locRef="3" rule="JSF-033" lnHash="666904961" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="666904961" unbViolId="62ee91ac-1664-3ff9-a585-4fceb94bfb7c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e84f077-72c7-3492-8c92-4695abf56af8" locEndPos="1" locType="sr" hash="-275311578" locEndLn="10" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;consts.h&quot;" ln="11" locFile="/build/../../../../../../../../timer.c" locStartln="11" sev="2" auth="username" locRef="3" rule="PREPROC-09" lnHash="-286442511" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="-286442511" unbViolId="7f548915-83ec-3bb2-bb1b-e2980a000f2b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e38251f-5b6b-36d0-b9f3-3554fe2d5281" locEndPos="1" locType="sr" hash="-275311578" locEndLn="11" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;consts.h&quot;" ln="11" locFile="/build/../../../../../../../../timer.c" locStartln="11" sev="2" auth="username" locRef="3" rule="JSF-033" lnHash="-286442511" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="-286442511" unbViolId="94559089-332d-347b-9fa4-4504ccf7c375" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a95b0c4c-5154-3cb0-b214-1b9a28efcd91" locEndPos="1" locType="sr" hash="-275311578" locEndLn="11" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;inout.h&quot;" ln="12" locFile="/build/../../../../../../../../timer.c" locStartln="12" sev="2" auth="username" locRef="3" rule="PREPROC-09" lnHash="30763942" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="30763942" unbViolId="0d3adfc6-09ef-3e0d-94e6-98064df6044b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e425cf26-34f9-34b2-a480-cbb95cde4e86" locEndPos="1" locType="sr" hash="-275311578" locEndLn="12" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;inout.h&quot;" ln="12" locFile="/build/../../../../../../../../timer.c" locStartln="12" sev="2" auth="username" locRef="3" rule="JSF-033" lnHash="30763942" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="30763942" unbViolId="1f265796-33fb-31d4-a519-1573bfb1f00a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a94be23-adda-3c71-9ee6-0ee1800272c1" locEndPos="1" locType="sr" hash="-275311578" locEndLn="12" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;timer.h&quot;" ln="13" locFile="/build/../../../../../../../../timer.c" locStartln="13" sev="2" auth="username" locRef="3" rule="PREPROC-09" lnHash="1807163114" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="1807163114" unbViolId="278de8a0-719d-3989-9c3f-104c6d115e23" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ea668c1-a783-3bb1-bdf0-bd8577b118d1" locEndPos="1" locType="sr" hash="-275311578" locEndLn="13" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;timer.h&quot;" ln="13" locFile="/build/../../../../../../../../timer.c" locStartln="13" sev="2" auth="username" locRef="3" rule="JSF-033" lnHash="1807163114" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="1807163114" unbViolId="5bbd0dbd-c717-3281-ba7f-9e873e17d58c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af80ad32-1ce5-3f33-9806-2e1fc7f79d80" locEndPos="1" locType="sr" hash="-275311578" locEndLn="13" goals="0," />
    <StdViol msg="Declaration of variable 'timer_records' contains more than one level of pointer indirection" ln="16" locFile="/build/../../../../../../../../timer.c" locStartln="16" sev="3" auth="username" locRef="3" rule="HICPP-8_1_1-a" lnHash="-1587186824" rule.header="The declaration should not contain more than one level of pointer indirection" tool="c++test" lineHash="-1587186824" unbViolId="b0ee4343-ce42-3d8d-a148-b3343e757bd8" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5808c845-f433-3586-93b1-fd11640da23a" locEndPos="29" locType="sr" hash="-275311578" locEndLn="16" goals="0," />
    <StdViol msg="Declaration of variable 'timer_records' contains more than one level of pointer indirection" ln="16" locFile="/build/../../../../../../../../timer.c" locStartln="16" sev="3" auth="username" locRef="3" rule="CODSTA-89" lnHash="-1587186824" rule.header="The declaration should not contain more than one level of pointer indirection" tool="c++test" lineHash="-1587186824" unbViolId="6b35f208-8821-3004-ab07-098dfb69972e" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0cace6c2-c5ea-3fa2-b9a8-2b01ed36f617" locEndPos="29" locType="sr" hash="-275311578" locEndLn="16" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: timer_records" ln="16" locFile="/build/../../../../../../../../timer.c" locStartln="16" sev="3" auth="username" locRef="3" rule="CODSTA-94" lnHash="-1587186824" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1587186824" unbViolId="15e8dd16-38ff-3ac0-bfd9-393a143cf499" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4719ee29-c472-3006-8a78-a3c1871e8396" locEndPos="29" locType="sr" hash="-275311578" locEndLn="16" goals="0," />
    <StdViol msg="The variable of pointer type is declared: timer_records" ln="16" locFile="/build/../../../../../../../../timer.c" locStartln="16" sev="3" auth="username" locRef="3" rule="CODSTA-95" lnHash="-1587186824" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1587186824" unbViolId="42b52ab1-ccdf-3cbd-8030-1525abf2a1a9" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae7cfb9d-3519-3cb9-8a56-271095946e54" locEndPos="29" locType="sr" hash="-275311578" locEndLn="16" goals="0," />
    <StdViol msg="The 'timer_records' variable should be commented" ln="16" locFile="/build/../../../../../../../../timer.c" locStartln="16" sev="3" auth="username" locRef="3" rule="JSF-132_a" lnHash="-1587186824" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1587186824" unbViolId="b035dd77-f6b5-3d66-8231-34f6c78a1687" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c41c4045-a255-3963-ae58-4135ebc5b99d" locEndPos="29" locType="sr" hash="-275311578" locEndLn="16" goals="0," />
    <StdViol msg="The 'timer_records' variable should be commented" ln="16" locFile="/build/../../../../../../../../timer.c" locStartln="16" sev="3" auth="username" locRef="3" rule="COMMENT-05" lnHash="-1587186824" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1587186824" unbViolId="3e2d72ec-fa6f-3484-9db0-6bf2cef10c92" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5ecf3eb-a390-3d65-a88a-a5ad7bf5cc55" locEndPos="29" locType="sr" hash="-275311578" locEndLn="16" goals="0," />
    <StdViol msg="Use of variable &quot;timer_records&quot; with static storage duration is not allowed" ln="16" locFile="/build/../../../../../../../../timer.c" locStartln="16" sev="3" auth="username" locRef="3" rule="HICPP-3_3_1-a" lnHash="-1587186824" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="-1587186824" unbViolId="d413378c-10c2-3a1f-8fa9-7b9176ee94be" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f45f58e-754c-3200-93d2-f0715e1d7ef0" locEndPos="29" locType="sr" hash="-275311578" locEndLn="16" goals="0," />
    <StdViol msg="Global variable 'timer_records' is declared" ln="16" locFile="/build/../../../../../../../../timer.c" locStartln="16" sev="5" auth="username" locRef="3" rule="MISRA-022" lnHash="-1587186824" rule.header="Declare objects at function scope" tool="c++test" lineHash="-1587186824" unbViolId="3c8f3706-f341-38df-a08d-9784a02ffb5f" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3187bc02-cbed-3338-93a4-7713557140c3" locEndPos="29" locType="sr" hash="-275311578" locEndLn="16" goals="0," />
    <StdViol msg="Naming convention not followed: timer_records" ln="16" locFile="/build/../../../../../../../../timer.c" locStartln="16" sev="3" auth="username" locRef="3" rule="NAMING-18" lnHash="-1587186824" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="-1587186824" unbViolId="4f11fad4-ef5e-3715-bdd6-2c8652e1f1d7" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dae45b52-d54a-3b3a-a176-86db96100890" locEndPos="29" locType="sr" hash="-275311578" locEndLn="16" goals="0," />
    <StdViol msg="The 'timer_records' identifier should have the 'rg' prefix" ln="16" locFile="/build/../../../../../../../../timer.c" locStartln="16" sev="3" auth="username" locRef="3" rule="NAMING-HN-01" lnHash="-1587186824" rule.header="Hungarian notation for array variables and parameters" tool="c++test" lineHash="-1587186824" unbViolId="c37c8c99-0062-3595-84dc-92be0181c6be" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c82b4c1a-6a4b-3ba3-9c3e-e762f89c1de6" locEndPos="29" locType="sr" hash="-275311578" locEndLn="16" goals="0," />
    <StdViol msg="The 'timer_records' identifier should have the 's' prefix" ln="16" locFile="/build/../../../../../../../../timer.c" locStartln="16" sev="3" auth="username" locRef="3" rule="NAMING-HN-38" lnHash="-1587186824" rule.header="Hungarian notation for static variables" tool="c++test" lineHash="-1587186824" unbViolId="8f974ab0-6e5d-3fc5-83eb-d6dc8f5a69f7" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e58e603-d8f4-3cbb-afa6-a6d807313346" locEndPos="29" locType="sr" hash="-275311578" locEndLn="16" goals="0," />
    <StdViol msg="The 'const' qualifier should be placed on the right hand side of the type" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="3" auth="username" locRef="3" rule="FORMAT-47_a" lnHash="1227318948" rule.header="Place CV-qualifiers on the right hand side of the type they apply to" tool="c++test" lineHash="1227318948" unbViolId="788e1afb-09d9-3862-881f-c480b19cc3b2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c9b5e2e-d280-3d29-81a0-62c5ad6b1d88" locEndPos="1" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="The 'const' qualifier should be placed on the right hand side of the type" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="3" auth="username" locRef="3" rule="HICPP-7_1_4-a" lnHash="1227318948" rule.header="Place CV-qualifiers on the right hand side of the type they apply to" tool="c++test" lineHash="1227318948" unbViolId="6f99d6bb-a3f0-35f4-837a-c8063829ecec" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bbff22fc-b515-37b4-b847-c5fdd100ce3e" locEndPos="1" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="4" auth="username" locRef="3" rule="MISRA2008-3_9_2" lnHash="1227318948" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1227318948" unbViolId="b35ceb00-2876-342f-bce6-727829b3d864" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27cde8aa-15ad-3f76-99b5-0fe4265a4a74" locEndPos="7" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="3" auth="username" locRef="3" rule="MISRA-013" lnHash="1227318948" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1227318948" unbViolId="72060ce4-1f84-33ed-9983-e22b720fd9fb" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a08a7eb6-df63-3f72-a797-961f97cc8bea" locEndPos="7" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="3" auth="username" locRef="3" rule="CODSTA-223" lnHash="1227318948" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1227318948" unbViolId="2d2b7c1a-4901-31e2-97c6-11054242847f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5be8f20-d7eb-36f0-9af4-b3a8512b6a40" locEndPos="7" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="2" auth="username" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="1227318948" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1227318948" unbViolId="af74a1e3-4662-381f-8a3d-41ea4e4f6c3f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07c52b41-2b4c-3011-8409-8cb20daf8505" locEndPos="7" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="3" auth="username" locRef="3" rule="HICPP-7_1_6-b" lnHash="1227318948" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="1227318948" unbViolId="0c529e74-57cb-3f9a-b8f0-5a775910b7cd" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03998d31-1b18-3cf4-830e-e9d7104915db" locEndPos="7" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="4" auth="username" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="1227318948" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1227318948" unbViolId="7189b764-6f7d-33c8-85b1-0002214f0524" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a793ec74-be8f-36d1-bd80-c4cf3796c325" locEndPos="7" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="3" auth="username" locRef="3" rule="MISRA2004-6_3_b" lnHash="1227318948" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1227318948" unbViolId="dc33959e-2c8b-3bec-82d7-51b321a063a4" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10ac16db-d3e3-389f-86ef-87fb94e3ad7e" locEndPos="7" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="2" auth="username" locRef="3" rule="JSF-209_b" lnHash="1227318948" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1227318948" unbViolId="4ac38cff-9cbc-320e-96b4-c9e1ec9606d9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba50dad2-6da1-35e5-9658-9e2e8b9643f5" locEndPos="7" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="4" auth="username" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="1227318948" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1227318948" unbViolId="8cc87a99-0f26-3149-806e-bf84df8afe66" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b7f08a0-61e8-3125-af83-3da0d9be1814" locEndPos="7" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="3" auth="username" locRef="3" rule="HICPP-3_5_1-b" lnHash="1227318948" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1227318948" unbViolId="2af5fea4-16ee-397c-b408-15e3325bc54a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fcb3aee2-8971-3a5f-ba1d-8706d9322ddc" locEndPos="7" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="'max_records' shall be declared as unsigned int or signed int" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="3" auth="username" locRef="3" rule="PORT-13" lnHash="1227318948" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="1227318948" unbViolId="0e85c358-3ef6-342b-855d-8b7843d50d46" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad6920e0-fccf-3b43-b799-9d4fa118fe9d" locEndPos="11" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="The 'max_records' variable should be commented" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="3" auth="username" locRef="3" rule="JSF-132_a" lnHash="1227318948" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="1227318948" unbViolId="5e9fb8e7-fd32-3db9-8b84-566a80b213cd" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96c9dc9b-3e68-32ae-88a0-817d08c20587" locEndPos="11" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="The 'max_records' variable should be commented" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="3" auth="username" locRef="3" rule="COMMENT-05" lnHash="1227318948" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="1227318948" unbViolId="5a84219d-7d3d-35d1-8761-b1da162c30b3" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6bccfe10-7835-30aa-a9db-453b229f1328" locEndPos="11" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="Global variable 'max_records' is declared" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="5" auth="username" locRef="3" rule="MISRA-022" lnHash="1227318948" rule.header="Declare objects at function scope" tool="c++test" lineHash="1227318948" unbViolId="af0e0b3d-bd8b-31f3-94fd-00dbfd0b2a5b" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b538c329-9464-313d-a5a8-4d2c4ad57e89" locEndPos="11" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="Naming convention not followed: max_records" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="3" auth="username" locRef="3" rule="NAMING-13" lnHash="1227318948" rule.header="Begin constant variables with 'c'" tool="c++test" lineHash="1227318948" unbViolId="cfdcaf89-1fbf-3f55-a41e-3837a255708f" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="588aa2f7-c578-3248-b375-9f793901b2d7" locEndPos="11" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="Naming convention not followed: max_records" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="3" auth="username" locRef="3" rule="NAMING-18" lnHash="1227318948" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="1227318948" unbViolId="5b5be703-8d62-3eae-aeb5-3321fca740ef" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad71c41b-12e6-37fe-a910-812e081d0a4b" locEndPos="11" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="Naming convention not followed: max_records" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="3" auth="username" locRef="3" rule="NAMING-19" lnHash="1227318948" rule.header="Begin all integer type variable with 'i'" tool="c++test" lineHash="1227318948" unbViolId="67c3b270-c773-3c4e-9a99-0fc72ad9d16c" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5e56d12-85cc-33fb-b0ed-4f478a4af021" locEndPos="11" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="The 'max_records' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="3" auth="username" locRef="3" rule="NAMING-HN-22" lnHash="1227318948" rule.header="Hungarian notation for int types" tool="c++test" lineHash="1227318948" unbViolId="3c94c5c5-0243-31f0-9cf5-12cb0fe437a8" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b9b76ed-11da-3e6b-8d82-557beedf3c22" locEndPos="11" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="The 'max_records' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="3" auth="username" locRef="3" rule="NAMING-HN-30" lnHash="1227318948" rule.header="Hungarian notation for int types" tool="c++test" lineHash="1227318948" unbViolId="bec1408a-6370-3a5d-b976-088316e81cec" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe7c4ff3-0c9f-3d7c-91a4-7cdf8f3189f9" locEndPos="11" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="The 'max_records' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="3" auth="username" locRef="3" rule="NAMING-HN-43" lnHash="1227318948" rule.header="Hungarian notation for word types" tool="c++test" lineHash="1227318948" unbViolId="100f77f2-8cc2-3dd0-afa3-e7e7dc436b24" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6abebdf7-ee45-36a5-90fe-a28657e0784a" locEndPos="11" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="Declaration of object 'max_records' does not precede its definition" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_8_4-a" lnHash="1227318948" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="1227318948" unbViolId="fa833c89-c97a-3e3b-8c3b-6ce785a6848d" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="128c6600-4dcb-3ed8-a593-d1629a11aa63" locEndPos="11" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="Declaration of object 'max_records' does not precede its definition" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-8_4_a" lnHash="1227318948" rule.header="A compatible declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="1227318948" unbViolId="9dfe67d7-3cfa-3e5b-8805-9a00bbba46d2" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0ebac9d-72de-358f-b31a-43848c73979e" locEndPos="11" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="Declaration of object 'max_records' does not precede its definition" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="3" auth="username" locRef="3" rule="CODSTA-118" lnHash="1227318948" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="1227318948" unbViolId="d1a6a132-6cec-3eb3-9ec5-020163c47307" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8ce7971-9309-347e-a482-e794bb621ee5" locEndPos="11" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="Global variable 'max_records' has external linkage and is not declared in the header" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="4" auth="username" locRef="3" rule="OWASP2019-API9-e" lnHash="1227318948" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1227318948" unbViolId="eef27c80-dc98-3edb-a08b-b2e4ac3aa65a" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd1b6f2a-d6e2-3726-bca7-bb3b8459dd59" locEndPos="11" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="Global variable 'max_records' has external linkage and is not declared in the header" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="2" auth="username" locRef="3" rule="AUTOSAR-A3_3_1-a" lnHash="1227318948" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1227318948" unbViolId="aae22475-46df-332e-ae78-c643341ea795" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="deaf3f87-cb9c-33f9-aef1-9ad3e1c7f5bd" locEndPos="11" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="Global variable 'max_records' has external linkage and is not declared in the header" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="4" auth="username" locRef="3" rule="JSF-137" lnHash="1227318948" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="1227318948" unbViolId="d2c20160-2e88-3354-a234-67789fbb353c" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5d6ad9b-25bd-311a-86d5-d91af65c5beb" locEndPos="11" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="Global variable 'max_records' has external linkage and is not declared in the header" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="4" auth="username" locRef="3" rule="MISRA-023" lnHash="1227318948" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1227318948" unbViolId="36e814ca-46b4-3aa0-bdf2-b416407c07cb" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69466936-94db-3ba2-9aa6-7236fbde1437" locEndPos="11" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="Global variable 'max_records' has external linkage and is not declared in the header" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="2" auth="username" locRef="3" rule="MISRA2008-3_3_1" lnHash="1227318948" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1227318948" unbViolId="c9210d18-7032-35a7-89e6-98230b9a9de7" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b95cc927-34bd-369b-bb04-d6fd27553938" locEndPos="11" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="Global variable 'max_records' has external linkage and is not declared in the header" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="3" auth="username" locRef="3" rule="CERT_C-DCL15-a" lnHash="1227318948" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1227318948" unbViolId="7545d312-a4dc-3511-a62f-3c3e76a56f18" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="973fc203-5cf8-3782-9895-8d6a30c2a06b" locEndPos="11" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="Global variable 'max_records' has external linkage and is not declared in the header" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="4" auth="username" locRef="3" rule="MISRA2004-8_10" lnHash="1227318948" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1227318948" unbViolId="bbc2c1ef-bdf5-3407-a9c8-b3e9b42d423e" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0cbdc451-9165-3441-8f18-ae7b455b7034" locEndPos="11" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="The object 'max_records' is referenced only in the translation unit where it is defined" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="4" auth="username" locRef="3" rule="MISRA2012-RULE-8_7" lnHash="1227318948" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="1227318948" unbViolId="37c1c28b-d10b-3013-822b-f65f596bb82d" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="dea9518d-f8ed-3359-baea-397836942a4f" locEndPos="11" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="The object 'max_records' is referenced only in the translation unit where it is defined" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="4" auth="username" locRef="3" rule="GLOBAL-AVOIDEXTERN" lnHash="1227318948" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="1227318948" unbViolId="325caa3b-6291-3863-b236-0858f12a1fd0" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="519ad2d5-ce8e-3ba7-b53a-58c2c92dca18" locEndPos="11" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="The object 'max_records' is referenced only in the translation unit where it is defined" ln="17" locFile="/build/../../../../../../../../timer.c" locStartln="17" sev="4" auth="username" locRef="3" rule="MISRAC2012-RULE_8_7-a" lnHash="1227318948" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="1227318948" unbViolId="57b1a212-81dd-364b-a45e-0bafa797fb15" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="00e444fc-ee42-3dce-8e4f-29893befe655" locEndPos="11" locType="sr" hash="-275311578" locEndLn="17" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="18" locFile="/build/../../../../../../../../timer.c" locStartln="18" sev="4" auth="username" locRef="3" rule="MISRA2008-3_9_2" lnHash="1846901926" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1846901926" unbViolId="e8eae280-85ae-34d7-90bb-b65410d2d263" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da15c915-a8df-34fb-87fc-686b9d4a62cb" locEndPos="8" locType="sr" hash="-275311578" locEndLn="18" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="18" locFile="/build/../../../../../../../../timer.c" locStartln="18" sev="3" auth="username" locRef="3" rule="MISRA-013" lnHash="1846901926" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1846901926" unbViolId="391ecb20-ca19-3f18-8db4-9660849211e1" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2da9684d-8c9a-3cf7-9fc2-736598373b80" locEndPos="8" locType="sr" hash="-275311578" locEndLn="18" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="18" locFile="/build/../../../../../../../../timer.c" locStartln="18" sev="3" auth="username" locRef="3" rule="CODSTA-223" lnHash="1846901926" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1846901926" unbViolId="050a35b8-34c4-34ab-846f-8b437eaa56f9" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a02af15a-96a9-3ff1-9305-00bffa0bc0cc" locEndPos="8" locType="sr" hash="-275311578" locEndLn="18" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="18" locFile="/build/../../../../../../../../timer.c" locStartln="18" sev="2" auth="username" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="1846901926" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1846901926" unbViolId="7027ebf8-d4d1-32b1-aecb-78cc291ac8fe" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d18c8694-6f63-366b-a8e8-f0b268aff428" locEndPos="8" locType="sr" hash="-275311578" locEndLn="18" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="18" locFile="/build/../../../../../../../../timer.c" locStartln="18" sev="3" auth="username" locRef="3" rule="HICPP-7_1_6-b" lnHash="1846901926" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="1846901926" unbViolId="ac163400-9a18-3d2a-9404-f755f311bbef" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2f57aaf-7ccb-38f9-9bd9-28f338f1df48" locEndPos="8" locType="sr" hash="-275311578" locEndLn="18" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="18" locFile="/build/../../../../../../../../timer.c" locStartln="18" sev="4" auth="username" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="1846901926" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1846901926" unbViolId="1a6a4b51-c3d7-3a17-9007-efd339382837" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ed5220b-66ef-3326-b470-794c17de4107" locEndPos="8" locType="sr" hash="-275311578" locEndLn="18" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="18" locFile="/build/../../../../../../../../timer.c" locStartln="18" sev="3" auth="username" locRef="3" rule="MISRA2004-6_3_b" lnHash="1846901926" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1846901926" unbViolId="c3eaa44e-6c37-3a54-b111-0da837d64e8a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7cb78755-57ae-3320-9aa4-fcaf0bef7f5c" locEndPos="8" locType="sr" hash="-275311578" locEndLn="18" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="18" locFile="/build/../../../../../../../../timer.c" locStartln="18" sev="2" auth="username" locRef="3" rule="JSF-209_b" lnHash="1846901926" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1846901926" unbViolId="aa7cdfd9-9107-3ed6-a166-5668e3dc9950" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cab358e0-137f-39cc-a156-c4b128634231" locEndPos="8" locType="sr" hash="-275311578" locEndLn="18" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="18" locFile="/build/../../../../../../../../timer.c" locStartln="18" sev="4" auth="username" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="1846901926" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1846901926" unbViolId="b1a68b4b-afb9-396c-a912-06a8b87b596b" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d9da24b-43e1-3b93-8440-b355a9c2a220" locEndPos="8" locType="sr" hash="-275311578" locEndLn="18" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="18" locFile="/build/../../../../../../../../timer.c" locStartln="18" sev="3" auth="username" locRef="3" rule="HICPP-3_5_1-b" lnHash="1846901926" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1846901926" unbViolId="a1ea7e14-061a-32d2-81bc-979998442855" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd01832a-fdc0-36b7-a8d2-d816fb0ae428" locEndPos="8" locType="sr" hash="-275311578" locEndLn="18" goals="0," />
    <StdViol msg="'curr_index' shall be declared as unsigned int or signed int" ln="18" locFile="/build/../../../../../../../../timer.c" locStartln="18" sev="3" auth="username" locRef="3" rule="PORT-13" lnHash="1846901926" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="1846901926" unbViolId="0fdbd222-8c5f-3b7a-ae0a-2bec61cf33a8" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8e361aeb-d9c3-3e8c-8b98-bcca6b1233fd" locEndPos="12" locType="sr" hash="-275311578" locEndLn="18" goals="0," />
    <StdViol msg="The 'curr_index' variable should be commented" ln="18" locFile="/build/../../../../../../../../timer.c" locStartln="18" sev="3" auth="username" locRef="3" rule="JSF-132_a" lnHash="1846901926" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="1846901926" unbViolId="6511ce8c-258e-3f90-a925-3dfce71f11ec" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07c3b5d2-606e-3ef5-82bd-0e860b6a413a" locEndPos="12" locType="sr" hash="-275311578" locEndLn="18" goals="0," />
    <StdViol msg="The 'curr_index' variable should be commented" ln="18" locFile="/build/../../../../../../../../timer.c" locStartln="18" sev="3" auth="username" locRef="3" rule="COMMENT-05" lnHash="1846901926" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="1846901926" unbViolId="ab346d8c-a74b-3fb6-972f-2a8dcfe104b2" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="819af845-ac09-3bd8-9044-cd5d40c76063" locEndPos="12" locType="sr" hash="-275311578" locEndLn="18" goals="0," />
    <StdViol msg="Use of variable &quot;curr_index&quot; with static storage duration is not allowed" ln="18" locFile="/build/../../../../../../../../timer.c" locStartln="18" sev="3" auth="username" locRef="3" rule="HICPP-3_3_1-a" lnHash="1846901926" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="1846901926" unbViolId="0b2afc2c-ada8-3269-b3f1-776587be59ab" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a88f414-cc24-3098-87f1-6ffa2e93215e" locEndPos="12" locType="sr" hash="-275311578" locEndLn="18" goals="0," />
    <StdViol msg="Global variable 'curr_index' is declared" ln="18" locFile="/build/../../../../../../../../timer.c" locStartln="18" sev="5" auth="username" locRef="3" rule="MISRA-022" lnHash="1846901926" rule.header="Declare objects at function scope" tool="c++test" lineHash="1846901926" unbViolId="7e869625-5bce-3c48-812b-a90cd9a8d12b" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="990bfc00-34c4-350f-939e-3e44025a9c7e" locEndPos="12" locType="sr" hash="-275311578" locEndLn="18" goals="0," />
    <StdViol msg="Naming convention not followed: curr_index" ln="18" locFile="/build/../../../../../../../../timer.c" locStartln="18" sev="3" auth="username" locRef="3" rule="NAMING-18" lnHash="1846901926" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="1846901926" unbViolId="a4181e18-851e-36db-86d9-50170648e165" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6f3d4cb-c507-3a2f-b785-2e21453e7db6" locEndPos="12" locType="sr" hash="-275311578" locEndLn="18" goals="0," />
    <StdViol msg="Naming convention not followed: curr_index" ln="18" locFile="/build/../../../../../../../../timer.c" locStartln="18" sev="3" auth="username" locRef="3" rule="NAMING-19" lnHash="1846901926" rule.header="Begin all integer type variable with 'i'" tool="c++test" lineHash="1846901926" unbViolId="24f0bcc9-23af-3e14-9921-dcf650fc52d8" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7769d3cc-bcdc-3327-bcee-9a9b125ab5ad" locEndPos="12" locType="sr" hash="-275311578" locEndLn="18" goals="0," />
    <StdViol msg="The 'curr_index' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="18" locFile="/build/../../../../../../../../timer.c" locStartln="18" sev="3" auth="username" locRef="3" rule="NAMING-HN-22" lnHash="1846901926" rule.header="Hungarian notation for int types" tool="c++test" lineHash="1846901926" unbViolId="24f3ec2e-0794-394b-823f-e0881c038ee0" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8574aaf-b8e4-3381-b050-eddddf872a90" locEndPos="12" locType="sr" hash="-275311578" locEndLn="18" goals="0," />
    <StdViol msg="The 'curr_index' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="18" locFile="/build/../../../../../../../../timer.c" locStartln="18" sev="3" auth="username" locRef="3" rule="NAMING-HN-30" lnHash="1846901926" rule.header="Hungarian notation for int types" tool="c++test" lineHash="1846901926" unbViolId="8448459f-2f84-3b55-8043-ddc167623fe3" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3eed86c-a6bb-3cc7-b8b3-b26a281db6ed" locEndPos="12" locType="sr" hash="-275311578" locEndLn="18" goals="0," />
    <StdViol msg="The 'curr_index' identifier should have the 's' prefix" ln="18" locFile="/build/../../../../../../../../timer.c" locStartln="18" sev="3" auth="username" locRef="3" rule="NAMING-HN-38" lnHash="1846901926" rule.header="Hungarian notation for static variables" tool="c++test" lineHash="1846901926" unbViolId="3bae6f7a-0798-3088-bb5e-cfc1c5c0cbfe" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8e2d77e-2827-3d8a-91f7-2124a91439f1" locEndPos="12" locType="sr" hash="-275311578" locEndLn="18" goals="0," />
    <StdViol msg="The 'curr_index' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="18" locFile="/build/../../../../../../../../timer.c" locStartln="18" sev="3" auth="username" locRef="3" rule="NAMING-HN-43" lnHash="1846901926" rule.header="Hungarian notation for word types" tool="c++test" lineHash="1846901926" unbViolId="935b279b-5938-311a-b738-74abace7291c" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a5ef410-2f9d-3ddf-b46e-c7e5c9502d07" locEndPos="12" locType="sr" hash="-275311578" locEndLn="18" goals="0," />
    <StdViol msg="Function 'init_timer' is not in prototype form" ln="20" locFile="/build/../../../../../../../../timer.c" locStartln="20" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_8_2-c" lnHash="-1542456861" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-1542456861" unbViolId="081cf0c1-4b27-34f9-9623-44e44d5c4814" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d7d1bb86-8a69-34df-967a-f6f2e6820477" locEndPos="6" locType="sr" hash="-275311578" locEndLn="20" goals="0," />
    <StdViol msg="Function 'init_timer' is not in prototype form" ln="20" locFile="/build/../../../../../../../../timer.c" locStartln="20" sev="3" auth="username" locRef="3" rule="CERT_C-EXP37-c" lnHash="-1542456861" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-1542456861" unbViolId="b5444009-824e-39c7-98bb-2827a630388f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="32bc570e-6389-3b14-bc5b-cfd7383545d8" locEndPos="6" locType="sr" hash="-275311578" locEndLn="20" goals="0," />
    <StdViol msg="Function 'init_timer' is not in prototype form" ln="20" locFile="/build/../../../../../../../../timer.c" locStartln="20" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-8_2_c" lnHash="-1542456861" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-1542456861" unbViolId="e9ca2510-db79-331b-8841-7e206d8de54e" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7d5e383-686a-31c0-8abc-853d11dcfecb" locEndPos="6" locType="sr" hash="-275311578" locEndLn="20" goals="0," />
    <StdViol msg="Function 'init_timer' is not in prototype form" ln="20" locFile="/build/../../../../../../../../timer.c" locStartln="20" sev="3" auth="username" locRef="3" rule="CODSTA-159" lnHash="-1542456861" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-1542456861" unbViolId="3675b5b9-d501-345e-835d-73f0b6ac1f2f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97677953-a306-3b46-ab8e-6860a2220f04" locEndPos="6" locType="sr" hash="-275311578" locEndLn="20" goals="0," />
    <StdViol msg="The 'init_timer' function should be preceded by a comment that contains the '@brief' tag" ln="20" locFile="/build/../../../../../../../../timer.c" locStartln="20" sev="3" auth="username" locRef="3" rule="COMMENT-14" lnHash="-1542456861" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1542456861" unbViolId="e32d17b3-f7d5-3920-b54a-777b2167b321" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e40e43c-7ac6-3253-8679-f3af9690649b" locEndPos="6" locType="sr" hash="-275311578" locEndLn="20" goals="0," />
    <StdViol msg="The 'init_timer' function should be preceded by a comment that contains the '@brief' tag" ln="20" locFile="/build/../../../../../../../../timer.c" locStartln="20" sev="2" auth="username" locRef="3" rule="AUTOSAR-A2_7_3-a" lnHash="-1542456861" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1542456861" unbViolId="46f9b47c-3224-35d7-b2eb-2ee58b86f55a" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1b8ad5a0-961c-3efc-9515-b314589ec82d" locEndPos="6" locType="sr" hash="-275311578" locEndLn="20" goals="0," />
    <StdViol msg="Function 'init_timer' has empty parameter list" ln="20" locFile="/build/../../../../../../../../timer.c" locStartln="20" sev="3" auth="username" locRef="3" rule="CODSTA-40" lnHash="-1542456861" rule.header="'void' should be used when a function is passed or returns no values" tool="c++test" lineHash="-1542456861" unbViolId="696d7db2-1718-32a7-bc18-9e28c85b9f08" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fef6b1bf-7b78-3df7-8a75-9653681e9fc8" locEndPos="6" locType="sr" hash="-275311578" locEndLn="20" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'init_timer'" ln="20" locFile="/build/../../../../../../../../timer.c" locStartln="20" sev="3" auth="username" locRef="3" rule="FORMAT-28" lnHash="-1542456861" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-1542456861" unbViolId="d7326c90-8ab5-30bb-93f4-4a1a69638560" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b5bcf90-54d9-3f91-bd53-1fdf08ca2b2f" locEndPos="6" locType="sr" hash="-275311578" locEndLn="20" goals="0," />
    <StdViol msg="Function 'init_timer' has Cyclomatic Complexity value: 1" ln="20" locFile="/build/../../../../../../../../timer.c" locStartln="20" sev="5" auth="username" locRef="3" rule="METRICS-29" lnHash="-1542456861" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-1542456861" unbViolId="35bab6fb-0322-3947-85ec-7662976100c5" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79a69638-5a4b-33c5-abc6-5763b644fa52" locEndPos="6" locType="sr" hash="-275311578" locEndLn="20" goals="0," />
    <StdViol msg="Function 'init_timer' has Essential Complexity value: 1" ln="20" locFile="/build/../../../../../../../../timer.c" locStartln="20" sev="5" auth="username" locRef="3" rule="METRICS-33" lnHash="-1542456861" rule.header="Report Essential Complexity" tool="c++test" lineHash="-1542456861" unbViolId="73fa65e5-965b-357a-8301-f711da01c874" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d476fb7-45b6-3412-8659-306536c1e2ba" locEndPos="6" locType="sr" hash="-275311578" locEndLn="20" goals="0," />
    <StdViol msg="Number of blocks of comments per statement in the function 'init_timer' : 0.0" ln="20" locFile="/build/../../../../../../../../timer.c" locStartln="20" sev="3" auth="username" locRef="3" rule="METRICS-41" lnHash="-1542456861" rule.header="The number of blocks of comments before and inside function to the number of statements in function should be > 0.2" tool="c++test" lineHash="-1542456861" unbViolId="dd63dcbf-3d27-3c65-ba3d-27851ffff8a5" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e017691b-4cb9-31c4-b62a-e6cb06da5a7e" locEndPos="6" locType="sr" hash="-275311578" locEndLn="20" goals="0," />
    <StdViol msg="The value of Halstead's delivered bugs (B) for function 'init_timer' is 0.02" ln="20" locFile="/build/../../../../../../../../timer.c" locStartln="20" sev="3" auth="username" locRef="3" rule="METRICS-43" lnHash="-1542456861" rule.header="Report the value of Halstead's delivered bugs (B) for a function" tool="c++test" lineHash="-1542456861" unbViolId="a93406d7-c5a1-331e-a7a6-5fb54c06dcdf" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d92319c-31b3-3257-a4d4-97c58184721f" locEndPos="6" locType="sr" hash="-275311578" locEndLn="20" goals="0," />
    <StdViol msg="Declare function 'init_timer' with parameter type void" ln="20" locFile="/build/../../../../../../../../timer.c" locStartln="20" sev="3" auth="username" locRef="3" rule="MISRA2004-16_5" lnHash="-1542456861" rule.header="Functions with no parameters shall be declared with parameter type void" tool="c++test" lineHash="-1542456861" unbViolId="9bfc35b1-de07-3d3a-bf44-02355355273d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12ae6bec-832a-32a4-8437-320399c0e49d" locEndPos="6" locType="sr" hash="-275311578" locEndLn="20" goals="0," />
    <StdViol msg="Naming convention not followed: init_timer" ln="20" locFile="/build/../../../../../../../../timer.c" locStartln="20" sev="3" auth="username" locRef="3" rule="NAMING-17" lnHash="-1542456861" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-1542456861" unbViolId="7b0043ed-63a4-3564-ab71-42d69ff23fcd" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af27e0f0-7694-3fc3-b4f0-4f0e8b882912" locEndPos="6" locType="sr" hash="-275311578" locEndLn="20" goals="0," />
    <StdViol msg="R-3119: use of non-prototype function declarator" ln="20" locFile="/build/../../../../../../../../timer.c" locStartln="20" sev="5" auth="username" locRef="3" rule="PARSER-REMARK" lnHash="-1542456861" rule.header="Parser remark" tool="c++test" lineHash="-1542456861" unbViolId="b3853765-8165-3453-8a70-45d75a98862c" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="60da9a5d-d90a-3f8d-83fe-4eac7c42514b" locEndPos="6" locType="sr" urgent="true" hash="-275311578" locEndLn="20" goals="1," />
    <StdViol msg="Prototype of function 'init_timer' does not precede function definition" ln="20" locFile="/build/../../../../../../../../timer.c" locStartln="20" sev="3" auth="username" locRef="3" rule="MISRA2004-8_1_a" lnHash="-1542456861" rule.header="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" tool="c++test" lineHash="-1542456861" unbViolId="0ef11357-b0fa-3476-933d-a51af5aa0f8d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b62c62c-8445-391c-8749-9666c2ab1a79" locEndPos="6" locType="sr" hash="-275311578" locEndLn="20" goals="0," />
    <StdViol msg="Prototype of function 'init_timer' does not precede function definition" ln="20" locFile="/build/../../../../../../../../timer.c" locStartln="20" sev="3" auth="username" locRef="3" rule="MISRA-071_a" lnHash="-1542456861" rule.header="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" tool="c++test" lineHash="-1542456861" unbViolId="6ba65974-a0ab-3806-ae5e-95f70c63e9b3" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f72181c2-139f-31d9-bcd1-16cdbfc0f4b6" locEndPos="6" locType="sr" hash="-275311578" locEndLn="20" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="21" locFile="/build/../../../../../../../../timer.c" locStartln="21" sev="3" auth="username" locRef="3" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="34a2d8ce-8ded-300c-9b46-d1341437d9bc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d46ba41a-40b4-3012-9bc6-89af1125d74b" locEndPos="1" locType="sr" hash="-275311578" locEndLn="21" goals="0," />
    <StdViol msg="Unused function's &quot;memset&quot; return value" ln="22" locFile="/build/../../../../../../../../timer.c" locStartln="22" sev="3" auth="username" locRef="3" rule="CODSTA-122_a" lnHash="-1074791283" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1074791283" unbViolId="6993e293-c0a8-3f56-bec7-86d16c977277" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a724851-df4d-33e2-a916-5cc4d7b9ac73" locEndPos="5" locType="sr" hash="-275311578" locEndLn="22" goals="0," />
    <StdViol msg="Unused function's &quot;memset&quot; return value" ln="22" locFile="/build/../../../../../../../../timer.c" locStartln="22" sev="1" auth="username" locRef="3" rule="CERT_C-ERR33-a" lnHash="-1074791283" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1074791283" unbViolId="81df0422-7ceb-314d-833e-fdd891334e54" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0dfd99b0-bb2d-36ea-aed7-f0601cb9f361" locEndPos="5" locType="sr" hash="-275311578" locEndLn="22" goals="0," />
    <StdViol msg="Unused function's &quot;memset&quot; return value" ln="22" locFile="/build/../../../../../../../../timer.c" locStartln="22" sev="1" auth="username" locRef="3" rule="CERT_C-POS54-a" lnHash="-1074791283" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1074791283" unbViolId="077117a2-8432-3036-8106-ccc2efffaff1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7cce7164-0d70-3d59-8738-399a5fae50c4" locEndPos="5" locType="sr" hash="-275311578" locEndLn="22" goals="0," />
    <StdViol msg="Unused function's &quot;memset&quot; return value" ln="22" locFile="/build/../../../../../../../../timer.c" locStartln="22" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-1074791283" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1074791283" unbViolId="f5e9d6df-9ad4-3191-8429-71bb880796fa" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd8b9a4c-e5f9-383b-a7c0-a13660eecb12" locEndPos="5" locType="sr" hash="-275311578" locEndLn="22" goals="0," />
    <StdViol msg="Unused function's &quot;memset&quot; return value" ln="22" locFile="/build/../../../../../../../../timer.c" locStartln="22" sev="3" auth="username" locRef="3" rule="CERT_C-EXP12-a" lnHash="-1074791283" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1074791283" unbViolId="49cf19f0-8b5d-3cbc-8128-f8551861d66b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6c84880-9ed9-3249-b05d-6d58027cce32" locEndPos="5" locType="sr" hash="-275311578" locEndLn="22" goals="0," />
    <StdViol msg="Unused function's &quot;memset&quot; return value" ln="22" locFile="/build/../../../../../../../../timer.c" locStartln="22" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="-1074791283" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1074791283" unbViolId="e20028b2-324e-3730-96f1-b01d870b9ca6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9970b863-e1b1-3ef6-9721-4c3b6157ffb5" locEndPos="5" locType="sr" hash="-275311578" locEndLn="22" goals="0," />
    <StdViol msg="Expression of array type is passed as argument to function 'memset'" ln="22" locFile="/build/../../../../../../../../timer.c" locStartln="22" sev="2" auth="username" locRef="3" rule="JSF-097_d" lnHash="-1074791283" rule.header="Arrays shall not be passed to functions as array/pointer parameters" tool="c++test" lineHash="-1074791283" unbViolId="00359f7e-fe9e-3b06-b4ed-ad5b2f010411" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fec1fdf9-dfc4-3b6e-86d0-bf90a8f66be5" locEndPos="12" locType="sr" hash="-275311578" locEndLn="22" goals="0," />
    <StdViol msg="Expression of array type is passed as argument to function 'memset'" ln="22" locFile="/build/../../../../../../../../timer.c" locStartln="22" sev="3" auth="username" locRef="3" rule="HICPP-4_1_1-b" lnHash="-1074791283" rule.header="Do not pass expression with array type to a function with pointer or array type parameter" tool="c++test" lineHash="-1074791283" unbViolId="ef1b6392-e79c-31b4-b727-dbc18344f20d" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="08814cad-a45e-3743-bafe-3079759242fe" locEndPos="12" locType="sr" hash="-275311578" locEndLn="22" goals="0," />
    <StdViol msg="Expression of array type is passed as argument to function 'memset'" ln="22" locFile="/build/../../../../../../../../timer.c" locStartln="22" sev="3" auth="username" locRef="3" rule="PB-41_b" lnHash="-1074791283" rule.header="Do not pass expression with array type to a function with pointer or array type parameter" tool="c++test" lineHash="-1074791283" unbViolId="abb2a404-31d0-30f8-96e0-8f4a5b1c5115" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69e4e4ac-db10-30ba-ab41-6574dd3d8095" locEndPos="12" locType="sr" hash="-275311578" locEndLn="22" goals="0," />
    <StdViol msg="LHS operand of '*' operator is 'unsigned int' type" ln="22" locFile="/build/../../../../../../../../timer.c" locStartln="22" sev="2" auth="username" locRef="3" rule="JSF-163" lnHash="-1074791283" rule.header="Unsigned arithmetic shall not be used" tool="c++test" lineHash="-1074791283" unbViolId="9d421932-06bf-3b0f-86a4-14097975e9c0" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d21e06ab-9919-3222-b95c-08c76e4f0704" locEndPos="30" locType="sr" hash="-275311578" locEndLn="22" goals="0," />
    <StdViol msg="LHS operand of '*' operator is 'unsigned int' type" ln="22" locFile="/build/../../../../../../../../timer.c" locStartln="22" sev="2" auth="username" locRef="3" rule="PB-25" lnHash="-1074791283" rule.header="Unsigned arithmetic shall not be used" tool="c++test" lineHash="-1074791283" unbViolId="c63bba11-1263-38c1-97c8-2c833f4d8699" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="01996aa2-0e36-37f5-9e90-8ff1b901ac0a" locEndPos="30" locType="sr" hash="-275311578" locEndLn="22" goals="0," />
    <StdViol msg="Operands of the '*' operator have different essential types: 'unsigned int' and 'signed char'" ln="22" locFile="/build/../../../../../../../../timer.c" locStartln="22" sev="2" auth="username" locRef="3" rule="CERT_C-INT31-j" lnHash="-1074791283" rule.header="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" tool="c++test" lineHash="-1074791283" unbViolId="615721e3-beb3-3602-9317-4709192a751b" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8dfdd17f-d80c-3107-81a5-66d17c3a6530" locEndPos="30" locType="sr" hash="-275311578" locEndLn="22" goals="0," />
    <StdViol msg="Operands of the '*' operator have different essential types: 'unsigned int' and 'signed char'" ln="22" locFile="/build/../../../../../../../../timer.c" locStartln="22" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_10_4-a" lnHash="-1074791283" rule.header="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" tool="c++test" lineHash="-1074791283" unbViolId="24fc9cbc-797e-3ee8-b159-511c603313c3" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ddc57871-f7d0-3fa2-a6c7-7ff29c8d12c6" locEndPos="30" locType="sr" hash="-275311578" locEndLn="22" goals="0," />
    <StdViol msg="Operands of the '*' operator have different essential types: 'unsigned int' and 'signed char'" ln="22" locFile="/build/../../../../../../../../timer.c" locStartln="22" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-10_4_a" lnHash="-1074791283" rule.header="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" tool="c++test" lineHash="-1074791283" unbViolId="ca18b639-2b95-3fe1-84aa-db1cad7d548f" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88c7e006-6f35-39bd-abe6-18d8f73adc70" locEndPos="30" locType="sr" hash="-275311578" locEndLn="22" goals="0," />
    <StdViol msg="Operands of the '*' operator have different essential types: 'unsigned int' and 'signed char'" ln="22" locFile="/build/../../../../../../../../timer.c" locStartln="22" sev="3" auth="username" locRef="3" rule="CODSTA-164_a" lnHash="-1074791283" rule.header="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" tool="c++test" lineHash="-1074791283" unbViolId="e052f09f-d68e-3ceb-94d1-20e14d7e8fa3" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="86566a24-946f-35e6-bc1c-b939eba964f0" locEndPos="30" locType="sr" hash="-275311578" locEndLn="22" goals="0," />
    <StdViol msg="In function 'init_timer' sizeof used on a pointer type: struct timer_record *" ln="22" locFile="/build/../../../../../../../../timer.c" locStartln="22" sev="1" auth="username" locRef="3" rule="CERT_C-ARR01-a" lnHash="-1074791283" rule.header="Do not call 'sizeof' on a pointer type" tool="c++test" lineHash="-1074791283" unbViolId="505701c2-fe3f-33ea-88df-2128eff0f375" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="783edc07-f377-3fa8-a632-d8122aea4f2c" locEndPos="30" locType="sr" hash="-275311578" locEndLn="22" goals="0," />
    <StdViol msg="In function 'init_timer' sizeof used on a pointer type: struct timer_record *" ln="22" locFile="/build/../../../../../../../../timer.c" locStartln="22" sev="3" auth="username" locRef="3" rule="PB-32" lnHash="-1074791283" rule.header="Do not call 'sizeof' on a pointer type" tool="c++test" lineHash="-1074791283" unbViolId="3f7c296e-a0bc-3e7e-89c5-117ae44e861b" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2b75e1d-9d3f-30d2-9986-c76f3ae11430" locEndPos="30" locType="sr" hash="-275311578" locEndLn="22" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type shall not be used" ln="22" locFile="/build/../../../../../../../../timer.c" locStartln="22" sev="2" auth="username" locRef="3" rule="MISRA2008-5_0_4_a" lnHash="-1074791283" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-1074791283" unbViolId="d90882c3-ce39-318d-88e7-4a20a7dd4ef5" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4420e2fe-e16a-384b-8594-7c47c4113c48" locEndPos="30" locType="sr" hash="-275311578" locEndLn="22" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type shall not be used" ln="22" locFile="/build/../../../../../../../../timer.c" locStartln="22" sev="2" auth="username" locRef="3" rule="AUTOSAR-M5_0_4-a" lnHash="-1074791283" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1074791283" unbViolId="5f95e30f-e022-3aa9-85c3-d47bc788b6a7" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0a320e9-a452-3e10-bdc7-57abef9efbaa" locEndPos="30" locType="sr" hash="-275311578" locEndLn="22" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type shall not be used" ln="22" locFile="/build/../../../../../../../../timer.c" locStartln="22" sev="3" auth="username" locRef="3" rule="MISRA2004-10_1_a" lnHash="-1074791283" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1074791283" unbViolId="5a76a58b-45cd-381a-bb01-83fbf69fa9cb" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f190478c-0857-3f92-9c3f-2715e9e214a8" locEndPos="30" locType="sr" hash="-275311578" locEndLn="22" goals="0," />
    <StdViol msg="R-3119: use of non-prototype function declarator" ln="25" locFile="/build/../../../../../../../../timer.c" locStartln="25" sev="5" auth="username" locRef="3" rule="PARSER-REMARK" lnHash="-301312004" rule.header="Parser remark" tool="c++test" lineHash="-301312004" unbViolId="0db7d90d-dc5e-3698-88c3-baa5969fec20" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e114d64f-0d08-31bc-8475-923b4285b6f7" locEndPos="6" locType="sr" urgent="true" hash="-275311578" locEndLn="25" goals="1," />
    <StdViol msg="Prototype of function 'uninit_timer' does not precede function definition" ln="25" locFile="/build/../../../../../../../../timer.c" locStartln="25" sev="3" auth="username" locRef="3" rule="MISRA2004-8_1_a" lnHash="-301312004" rule.header="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" tool="c++test" lineHash="-301312004" unbViolId="8de5a909-f367-3544-9f73-09953dc1cc03" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d9b689b-7d0b-3d0d-8706-44efe60a5b7b" locEndPos="6" locType="sr" hash="-275311578" locEndLn="25" goals="0," />
    <StdViol msg="Prototype of function 'uninit_timer' does not precede function definition" ln="25" locFile="/build/../../../../../../../../timer.c" locStartln="25" sev="3" auth="username" locRef="3" rule="MISRA-071_a" lnHash="-301312004" rule.header="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" tool="c++test" lineHash="-301312004" unbViolId="3980448c-8b43-3d63-a0ac-9238ff8c2b74" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55497dee-7b6e-37e5-9db4-f53bbf339dd1" locEndPos="6" locType="sr" hash="-275311578" locEndLn="25" goals="0," />
    <StdViol msg="Function 'uninit_timer' is not in prototype form" ln="25" locFile="/build/../../../../../../../../timer.c" locStartln="25" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_8_2-c" lnHash="-301312004" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-301312004" unbViolId="d8f2e339-48ee-31ea-908e-214d4ff9ca05" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2e9f8bd-3c61-3e1a-83d3-ed01679e6b0b" locEndPos="6" locType="sr" hash="-275311578" locEndLn="25" goals="0," />
    <StdViol msg="Function 'uninit_timer' is not in prototype form" ln="25" locFile="/build/../../../../../../../../timer.c" locStartln="25" sev="3" auth="username" locRef="3" rule="CERT_C-EXP37-c" lnHash="-301312004" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-301312004" unbViolId="57436f05-402f-31cf-b370-ad3a635f8243" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d8fe1a2-ed90-3b96-90b2-598de33d92cd" locEndPos="6" locType="sr" hash="-275311578" locEndLn="25" goals="0," />
    <StdViol msg="Function 'uninit_timer' is not in prototype form" ln="25" locFile="/build/../../../../../../../../timer.c" locStartln="25" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-8_2_c" lnHash="-301312004" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-301312004" unbViolId="1cc88abb-593c-3e8c-85dd-e481074984e6" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cbfe8256-ef51-340b-be9d-efef5bf5ce0d" locEndPos="6" locType="sr" hash="-275311578" locEndLn="25" goals="0," />
    <StdViol msg="Function 'uninit_timer' is not in prototype form" ln="25" locFile="/build/../../../../../../../../timer.c" locStartln="25" sev="3" auth="username" locRef="3" rule="CODSTA-159" lnHash="-301312004" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-301312004" unbViolId="a5d217ec-951e-3a3f-a54b-9238e427a72c" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6d5ff66d-f5ac-3d6e-9998-9803cb843cf8" locEndPos="6" locType="sr" hash="-275311578" locEndLn="25" goals="0," />
    <StdViol msg="The 'uninit_timer' function should be preceded by a comment that contains the '@brief' tag" ln="25" locFile="/build/../../../../../../../../timer.c" locStartln="25" sev="3" auth="username" locRef="3" rule="COMMENT-14" lnHash="-301312004" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-301312004" unbViolId="7d267c71-608b-3a51-a3ac-7e5d183bebf7" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="304c1a17-1dde-3f34-acbf-727b7a1d5d2a" locEndPos="6" locType="sr" hash="-275311578" locEndLn="25" goals="0," />
    <StdViol msg="The 'uninit_timer' function should be preceded by a comment that contains the '@brief' tag" ln="25" locFile="/build/../../../../../../../../timer.c" locStartln="25" sev="2" auth="username" locRef="3" rule="AUTOSAR-A2_7_3-a" lnHash="-301312004" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-301312004" unbViolId="ce6809de-8282-37bc-ac95-1b22b8ee1ddb" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f334a50e-66b8-3bf1-aa29-6dc48f5f3136" locEndPos="6" locType="sr" hash="-275311578" locEndLn="25" goals="0," />
    <StdViol msg="Function 'uninit_timer' has empty parameter list" ln="25" locFile="/build/../../../../../../../../timer.c" locStartln="25" sev="3" auth="username" locRef="3" rule="CODSTA-40" lnHash="-301312004" rule.header="'void' should be used when a function is passed or returns no values" tool="c++test" lineHash="-301312004" unbViolId="11a46a62-6bc6-3775-9cea-744d53a0f22f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79b7442f-7a4a-3d61-9f69-7c8a37c4f21f" locEndPos="6" locType="sr" hash="-275311578" locEndLn="25" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'uninit_timer'" ln="25" locFile="/build/../../../../../../../../timer.c" locStartln="25" sev="3" auth="username" locRef="3" rule="FORMAT-28" lnHash="-301312004" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-301312004" unbViolId="7226ed49-777d-34e2-a8da-747cef4b4dfb" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7822d658-fc75-3995-9165-4f0cfb88b4dd" locEndPos="6" locType="sr" hash="-275311578" locEndLn="25" goals="0," />
    <StdViol msg="Function 'uninit_timer' has Cyclomatic Complexity value: 2" ln="25" locFile="/build/../../../../../../../../timer.c" locStartln="25" sev="5" auth="username" locRef="3" rule="METRICS-29" lnHash="-301312004" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-301312004" unbViolId="1d3e9847-eb1e-39a5-b0a7-95006d7ae003" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2fdbc677-053a-332e-89eb-86383586c9d3" locEndPos="6" locType="sr" hash="-275311578" locEndLn="25" goals="0," />
    <StdViol msg="Function 'uninit_timer' has Essential Complexity value: 1" ln="25" locFile="/build/../../../../../../../../timer.c" locStartln="25" sev="5" auth="username" locRef="3" rule="METRICS-33" lnHash="-301312004" rule.header="Report Essential Complexity" tool="c++test" lineHash="-301312004" unbViolId="da20f47a-a032-3350-8d1c-5d6eba70de49" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2919dcf1-acd1-3ef7-bb85-89752bb915e5" locEndPos="6" locType="sr" hash="-275311578" locEndLn="25" goals="0," />
    <StdViol msg="The value of Halstead's delivered bugs (B) for function 'uninit_timer' is 0.03" ln="25" locFile="/build/../../../../../../../../timer.c" locStartln="25" sev="3" auth="username" locRef="3" rule="METRICS-43" lnHash="-301312004" rule.header="Report the value of Halstead's delivered bugs (B) for a function" tool="c++test" lineHash="-301312004" unbViolId="f9f130dd-263f-3e92-b16a-62b7bb6edcc3" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7694c85f-6a50-32d6-87b2-86d16eff3c81" locEndPos="6" locType="sr" hash="-275311578" locEndLn="25" goals="0," />
    <StdViol msg="Declare function 'uninit_timer' with parameter type void" ln="25" locFile="/build/../../../../../../../../timer.c" locStartln="25" sev="3" auth="username" locRef="3" rule="MISRA2004-16_5" lnHash="-301312004" rule.header="Functions with no parameters shall be declared with parameter type void" tool="c++test" lineHash="-301312004" unbViolId="42803802-3c6f-3492-8013-92b0195004be" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71eda22c-8edf-3faf-ab85-97a56cdd878a" locEndPos="6" locType="sr" hash="-275311578" locEndLn="25" goals="0," />
    <StdViol msg="Naming convention not followed: uninit_timer" ln="25" locFile="/build/../../../../../../../../timer.c" locStartln="25" sev="3" auth="username" locRef="3" rule="NAMING-17" lnHash="-301312004" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-301312004" unbViolId="22801888-63f5-3586-9d36-ea27cd521ecf" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f90b94d5-f692-360b-9f97-fc36adf4879a" locEndPos="6" locType="sr" hash="-275311578" locEndLn="25" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 12" ln="26" locFile="/build/../../../../../../../../timer.c" locStartln="26" sev="3" auth="username" locRef="3" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="27c4c235-dedc-3c83-babc-e72aa679bb6c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="055c34a4-4a85-3d08-a090-427e45978d64" locEndPos="1" locType="sr" hash="-275311578" locEndLn="26" goals="0," />
    <StdViol msg="Use // comments only" ln="27" locFile="/build/../../../../../../../../timer.c" locStartln="27" sev="3" auth="username" locRef="3" rule="HICPP-2_3_1-a" lnHash="-1771008652" rule.header="Prefer C++ style comment" tool="c++test" lineHash="-1771008652" unbViolId="82fce78e-1276-39c3-b06d-56b2c16a5674" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="201456a4-7117-3a65-a93f-618466cef36a" locEndPos="5" locType="sr" hash="-275311578" locEndLn="27" goals="0," />
    <StdViol msg="Use // comments only" ln="27" locFile="/build/../../../../../../../../timer.c" locStartln="27" sev="2" auth="username" locRef="3" rule="JSF-126" lnHash="-1771008652" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="-1771008652" unbViolId="5d26c526-0d10-38a3-895e-e573c065edd4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69adbb41-f9c0-3fb4-a477-e0218ee74086" locEndPos="5" locType="sr" hash="-275311578" locEndLn="27" goals="0," />
    <StdViol msg="Use // comments only" ln="27" locFile="/build/../../../../../../../../timer.c" locStartln="27" sev="3" auth="username" locRef="3" rule="COMMENT-01" lnHash="-1771008652" rule.header="Prefer C++ style comment" tool="c++test" lineHash="-1771008652" unbViolId="ab3172b7-b9c1-3d6b-8a10-b64977ab0ac6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="830f5cf0-f740-332e-828c-75efa97b68b1" locEndPos="5" locType="sr" hash="-275311578" locEndLn="27" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="28" locFile="/build/../../../../../../../../timer.c" locStartln="28" sev="4" auth="username" locRef="3" rule="MISRA2008-3_9_2" lnHash="1679375043" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1679375043" unbViolId="a9133850-b856-303d-8cf2-b8b45c842822" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0a19438-79d9-31c9-9452-d9413fa81618" locEndPos="5" locType="sr" hash="-275311578" locEndLn="28" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="28" locFile="/build/../../../../../../../../timer.c" locStartln="28" sev="3" auth="username" locRef="3" rule="MISRA-013" lnHash="1679375043" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1679375043" unbViolId="eede4a42-ce8f-3af6-bf9f-3f122b6a19e1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="874b78ef-9c18-3d97-a4fb-a173961a1725" locEndPos="5" locType="sr" hash="-275311578" locEndLn="28" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="28" locFile="/build/../../../../../../../../timer.c" locStartln="28" sev="3" auth="username" locRef="3" rule="CODSTA-223" lnHash="1679375043" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1679375043" unbViolId="f1b84297-1271-3ea4-932a-8e8bb6b9027d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f5ef629-4cd8-39e5-95f8-76df908e259f" locEndPos="5" locType="sr" hash="-275311578" locEndLn="28" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="28" locFile="/build/../../../../../../../../timer.c" locStartln="28" sev="2" auth="username" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="1679375043" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1679375043" unbViolId="3d372aa3-4d5c-37aa-a7e8-57c433e6c9a0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="318d5240-f5a6-39d5-9e2c-0c164e609921" locEndPos="5" locType="sr" hash="-275311578" locEndLn="28" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="28" locFile="/build/../../../../../../../../timer.c" locStartln="28" sev="3" auth="username" locRef="3" rule="HICPP-7_1_6-b" lnHash="1679375043" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="1679375043" unbViolId="c2818931-38ef-3370-b6de-93c2ec07f217" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="30e46ea5-56c2-369c-a1ec-a076c3353fa1" locEndPos="5" locType="sr" hash="-275311578" locEndLn="28" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="28" locFile="/build/../../../../../../../../timer.c" locStartln="28" sev="4" auth="username" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="1679375043" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1679375043" unbViolId="7dd026c9-74a0-3372-867d-aa99443baa5d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="744302d3-f9fa-3d60-82da-abe2e5b91d3a" locEndPos="5" locType="sr" hash="-275311578" locEndLn="28" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="28" locFile="/build/../../../../../../../../timer.c" locStartln="28" sev="3" auth="username" locRef="3" rule="MISRA2004-6_3_b" lnHash="1679375043" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1679375043" unbViolId="aac93dba-0066-3076-908b-b458f12e58a4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ddfe32a8-2711-36a5-bacf-f012ebb47595" locEndPos="5" locType="sr" hash="-275311578" locEndLn="28" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="28" locFile="/build/../../../../../../../../timer.c" locStartln="28" sev="2" auth="username" locRef="3" rule="JSF-209_b" lnHash="1679375043" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1679375043" unbViolId="3b212369-5b49-3478-875d-3bf9c46aed96" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8667a457-a424-3826-9716-201318eabcad" locEndPos="5" locType="sr" hash="-275311578" locEndLn="28" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="28" locFile="/build/../../../../../../../../timer.c" locStartln="28" sev="4" auth="username" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="1679375043" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1679375043" unbViolId="11012963-1ca9-3cb9-bc55-a86c5984ebb9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="33e72a5b-8d3e-34bb-83c9-bf86c3fe68de" locEndPos="5" locType="sr" hash="-275311578" locEndLn="28" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="28" locFile="/build/../../../../../../../../timer.c" locStartln="28" sev="3" auth="username" locRef="3" rule="HICPP-3_5_1-b" lnHash="1679375043" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1679375043" unbViolId="19955557-78f3-3772-90ae-48923c8c52bc" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cc95eb25-705d-315c-9e75-5b49f7f587db" locEndPos="5" locType="sr" hash="-275311578" locEndLn="28" goals="0," />
    <StdViol msg="'i' shall be declared as unsigned int or signed int" ln="28" locFile="/build/../../../../../../../../timer.c" locStartln="28" sev="3" auth="username" locRef="3" rule="PORT-13" lnHash="1679375043" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="1679375043" unbViolId="ab6b8e04-1eec-34b9-9643-a699d21648a8" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa85d84e-80ba-34c7-a96a-cf8fabfb0067" locEndPos="9" locType="sr" hash="-275311578" locEndLn="28" goals="0," />
    <StdViol msg="The variable &quot;i&quot; was not initialized when declared" ln="28" locFile="/build/../../../../../../../../timer.c" locStartln="28" sev="2" auth="username" locRef="3" rule="JSF-142_b" lnHash="1679375043" rule.header="All variables shall be initialized before use" tool="c++test" lineHash="1679375043" unbViolId="c546796d-e1e1-34b9-a10f-973681083f53" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="41df0840-06fc-3913-bb66-24505dc3fc58" locEndPos="9" locType="sr" hash="-275311578" locEndLn="28" goals="0," />
    <StdViol msg="The variable &quot;i&quot; was not initialized when declared" ln="28" locFile="/build/../../../../../../../../timer.c" locStartln="28" sev="3" auth="username" locRef="3" rule="INIT-03" lnHash="1679375043" rule.header="Initialize all variables" tool="c++test" lineHash="1679375043" unbViolId="e0d229b1-bd9c-323a-b50b-731f7455b895" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ba3830f-189d-32d0-ba74-4be8f93d3f7c" locEndPos="9" locType="sr" hash="-275311578" locEndLn="28" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="30" locFile="/build/../../../../../../../../timer.c" locStartln="30" sev="3" auth="username" locRef="3" rule="JSF-061" lnHash="1743982722" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1743982722" unbViolId="dab70fab-b52d-3999-8611-25d80b13eb84" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c53996aa-2233-3847-afd0-58cd21f26ac7" locEndPos="1" locType="sr" hash="-275311578" locEndLn="30" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="30" locFile="/build/../../../../../../../../timer.c" locStartln="30" sev="3" auth="username" locRef="3" rule="FORMAT-42" lnHash="1743982722" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1743982722" unbViolId="0c79e9a6-1d3d-3542-86e2-3b9a17d0e259" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13d999f3-1391-3540-8ead-6666a837e0f8" locEndPos="1" locType="sr" hash="-275311578" locEndLn="30" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="30" locFile="/build/../../../../../../../../timer.c" locStartln="30" sev="3" auth="username" locRef="3" rule="JSF-060_a" lnHash="1743982722" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1743982722" unbViolId="776563a0-f59f-3f93-94b0-3fc46f1b1211" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4df2a529-4e2c-3068-b641-b49607d05213" locEndPos="1" locType="sr" hash="-275311578" locEndLn="30" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="30" locFile="/build/../../../../../../../../timer.c" locStartln="30" sev="3" auth="username" locRef="3" rule="FORMAT-43" lnHash="1743982722" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="1743982722" unbViolId="69aaa69f-4ed1-3c29-ba55-695aa009bf33" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ada653a0-36fd-3346-8ce2-6542e6883d73" locEndPos="1" locType="sr" hash="-275311578" locEndLn="30" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="30" locFile="/build/../../../../../../../../timer.c" locStartln="30" sev="3" auth="username" locRef="3" rule="JSF-060_b" lnHash="1743982722" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="1743982722" unbViolId="aeb0b37f-b748-3656-b762-6ca197f736c0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="081c80fa-d86d-3263-aca9-20d969367ecd" locEndPos="1" locType="sr" hash="-275311578" locEndLn="30" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="30" locFile="/build/../../../../../../../../timer.c" locStartln="30" sev="3" auth="username" locRef="3" rule="FORMAT-02" lnHash="1743982722" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="1743982722" unbViolId="45ca0552-8f63-3269-8fc7-c6349cfced7f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="304ae044-7550-3128-9cf7-d44d3c27bb45" locEndPos="1" locType="sr" hash="-275311578" locEndLn="30" goals="0," />
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="30" locFile="/build/../../../../../../../../timer.c" locStartln="30" sev="3" auth="username" locRef="3" rule="FORMAT-34" lnHash="1743982722" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="1743982722" unbViolId="95d84d14-221e-34fb-994b-37c9a82ab722" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd29135a-855b-37b5-ae90-fd76fe6ebd95" locEndPos="1" locType="sr" hash="-275311578" locEndLn="30" goals="0," />
    <DupViol msg="Duplicated code: 'for (i = 0;'" ln="30" locFile="/build/../../../../../../../../timer.c" locStartln="30" sev="3" auth="username" locRef="3" rule="CDD-DUPC" lnHash="1743982722" rule.header="Avoid code duplication" tool="c++test" lineHash="1743982722" unbViolId="2f7bb830-fec0-37c0-af03-f48690fbf6ed" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="af71058b-0947-3f8e-8b2d-b6c5a2124617" locEndPos="15" locType="sr" urgent="true" hash="-275311578" locEndLn="30" goals="1,">
      <ElDescList>
        <ElDesc lineHash="1743982722" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="30" srcRngStartPos="4" srcRngEndPos="15" srcRngStartln="30" srcRngEndLn="30" desc="[Line 30] Duplicated code in file 'timer.c'" rngLn="30" />
        <ElDesc lineHash="1531685295" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="148" srcRngStartPos="4" srcRngEndPos="15" srcRngStartln="148" srcRngEndLn="148" desc="[Line 148] Duplicated code in file 'timer.c'" rngLn="148" />
      </ElDescList>
    </DupViol>
    <StdViol msg="Use // comments only" ln="35" locFile="/build/../../../../../../../../timer.c" locStartln="35" sev="3" auth="username" locRef="3" rule="HICPP-2_3_1-a" lnHash="1499" rule.header="Prefer C++ style comment" tool="c++test" lineHash="1499" unbViolId="6b2753be-ffa6-3d9d-8127-1a4fdfe5ef43" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae1eb9f0-e113-3b0f-a054-422d23b0ddd5" locEndPos="1" locType="sr" hash="-275311578" locEndLn="35" goals="0," />
    <StdViol msg="Use // comments only" ln="35" locFile="/build/../../../../../../../../timer.c" locStartln="35" sev="2" auth="username" locRef="3" rule="JSF-126" lnHash="1499" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="1499" unbViolId="626161eb-0841-3065-9eed-154dc46f178f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ebd7e191-4af7-37ef-a46b-7048892a0b6d" locEndPos="1" locType="sr" hash="-275311578" locEndLn="35" goals="0," />
    <StdViol msg="Use // comments only" ln="35" locFile="/build/../../../../../../../../timer.c" locStartln="35" sev="3" auth="username" locRef="3" rule="COMMENT-01" lnHash="1499" rule.header="Prefer C++ style comment" tool="c++test" lineHash="1499" unbViolId="208aea35-c9db-3683-ad76-2dd4798d861c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0e950ee-2e80-3797-b492-ea99e1e125e3" locEndPos="1" locType="sr" hash="-275311578" locEndLn="35" goals="0," />
    <StdViol msg="Function 'query_user' is not in prototype form" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_8_2-c" lnHash="1780718607" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1780718607" unbViolId="141ffbbd-fcf8-31e2-a687-1af1b0d95747" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0631ac9f-a9fd-3334-b9a9-81d8016b2d80" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="Function 'query_user' is not in prototype form" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="3" auth="username" locRef="3" rule="CERT_C-EXP37-c" lnHash="1780718607" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1780718607" unbViolId="3d8174de-61f2-36b3-a755-5a38975b716f" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1bf3e89-6874-3d55-94a9-46372872cfe8" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="Function 'query_user' is not in prototype form" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-8_2_c" lnHash="1780718607" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1780718607" unbViolId="2bd780a8-2f4d-39b5-9931-e6263d4be639" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d74ff8d3-9657-3d99-b000-9d35a76e04ba" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="Function 'query_user' is not in prototype form" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="3" auth="username" locRef="3" rule="CODSTA-159" lnHash="1780718607" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1780718607" unbViolId="9a8be19a-c4cb-30a9-97e4-21a99a27fa6a" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87ed40c9-aa28-3239-a9a7-cac80b97cdf9" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="Function 'query_user' returns a pointer type" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="3" auth="username" locRef="3" rule="CODSTA-94" lnHash="1780718607" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="1780718607" unbViolId="26c5948a-95a2-3fa1-82df-f7bceaaab68b" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4669787-1e12-37d5-8db2-52f66ed56fa9" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="Function 'query_user' returns a pointer type" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="3" auth="username" locRef="3" rule="CODSTA-95" lnHash="1780718607" rule.header="Do not declare pointer type" tool="c++test" lineHash="1780718607" unbViolId="78b32bae-d6c0-3294-a227-7194b9f734bd" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ccd5be6-a4ac-3fb9-a938-97e10ec816fe" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="The 'query_user' function should be preceded by a comment that contains the '@brief' tag" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="3" auth="username" locRef="3" rule="COMMENT-14" lnHash="1780718607" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1780718607" unbViolId="808a8daa-f23e-3a75-adad-046e8ce34fb3" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99281c5c-971c-30e0-8c48-54996a30e4d7" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="The 'query_user' function should be preceded by a comment that contains the '@brief' tag" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="2" auth="username" locRef="3" rule="AUTOSAR-A2_7_3-a" lnHash="1780718607" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1780718607" unbViolId="64d8f035-cf90-3b05-99a9-7084a79fa352" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="121f00cd-313d-3e35-af20-b8973e97bb4a" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="The 'query_user' function should be preceded by a comment that contains the '@return' tag" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="3" auth="username" locRef="3" rule="COMMENT-14_b" lnHash="1780718607" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1780718607" unbViolId="319c64b7-15fa-346d-a13b-8c390250b0dd" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c45fc3ac-778d-33ee-bff9-671a408b2712" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="The 'query_user' function should be preceded by a comment that contains the '@return' tag" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="2" auth="username" locRef="3" rule="AUTOSAR-A2_7_3-b" lnHash="1780718607" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1780718607" unbViolId="d2f3f261-b781-3e63-9471-223ceb8fd667" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96f14aa8-fba0-36ba-8c40-71f838062cdf" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="Function 'query_user' has empty parameter list" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="3" auth="username" locRef="3" rule="CODSTA-40" lnHash="1780718607" rule.header="'void' should be used when a function is passed or returns no values" tool="c++test" lineHash="1780718607" unbViolId="7cc6677b-5a3d-31ad-87cb-d8e9f6002179" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f00f3bd1-fecd-3bd0-ae93-e62717dd90b4" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'query_user'" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="3" auth="username" locRef="3" rule="FORMAT-28" lnHash="1780718607" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="1780718607" unbViolId="6f34209c-2b39-3f59-8833-bab490d60fd1" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4304e152-99b5-34af-aeda-bdea2cdab7f4" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="Function 'query_user' has 16 function calls" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="3" auth="username" locRef="3" rule="METRICS-04" lnHash="1780718607" rule.header="Number of function calls within function" tool="c++test" lineHash="1780718607" unbViolId="10c4437c-ba42-3a08-ae5f-28564e7a4156" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ded52698-097c-322b-a685-9bb9312a202c" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="Function 'query_user' has Cyclomatic Complexity value: 1" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="5" auth="username" locRef="3" rule="METRICS-29" lnHash="1780718607" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="1780718607" unbViolId="c6c35efc-e4ff-38fa-8b0b-370f4a2e170d" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d12967d1-ed12-3463-b10f-cf254724ace1" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="Function 'query_user' has Essential Complexity value: 1" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="5" auth="username" locRef="3" rule="METRICS-33" lnHash="1780718607" rule.header="Report Essential Complexity" tool="c++test" lineHash="1780718607" unbViolId="c07e805e-b695-31f9-9e2e-81265a59e9ec" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c68bdef9-73a5-39bd-a89f-0482e4ecb646" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="The value of Halstead's delivered bugs (B) for function 'query_user' is 0.25" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="3" auth="username" locRef="3" rule="METRICS-43" lnHash="1780718607" rule.header="Report the value of Halstead's delivered bugs (B) for a function" tool="c++test" lineHash="1780718607" unbViolId="284bd921-2835-3a39-8fd3-8044e554770a" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5522e9a-543d-3c96-bb57-adcac248075f" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="Declare function 'query_user' with parameter type void" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="3" auth="username" locRef="3" rule="MISRA2004-16_5" lnHash="1780718607" rule.header="Functions with no parameters shall be declared with parameter type void" tool="c++test" lineHash="1780718607" unbViolId="b6269af6-173b-3609-85af-e5837376332c" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2be543eb-d803-3712-8253-9971d8db25d1" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="Naming convention not followed: query_user" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="3" auth="username" locRef="3" rule="NAMING-17" lnHash="1780718607" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="1780718607" unbViolId="a6c6885c-49a0-3daa-a2b8-161404e9da8a" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d7661e1-b1c2-38c3-9ed1-9beaabfc1aea" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="R-3119: use of non-prototype function declarator" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="5" auth="username" locRef="3" rule="PARSER-REMARK" lnHash="1780718607" rule.header="Parser remark" tool="c++test" lineHash="1780718607" unbViolId="bee923af-c986-31a3-9c38-9ef612096656" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84274580-da32-3f14-9fd0-f968fcd98036" locEndPos="22" locType="sr" urgent="true" hash="-275311578" locEndLn="38" goals="1," />
    <StdViol msg="Prototype of function 'query_user' does not precede function definition" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_8_4-a" lnHash="1780718607" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="1780718607" unbViolId="7e365fc3-332f-37d8-af62-d8f830f86fc9" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc27e82b-244e-3845-a0b1-6786c3ed880a" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="Prototype of function 'query_user' does not precede function definition" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-8_4_a" lnHash="1780718607" rule.header="A compatible declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="1780718607" unbViolId="b663620a-661b-3541-995d-13166fb499d7" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f6c8ba5-c0bd-3c82-8201-958ed09e1429" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="Prototype of function 'query_user' does not precede function definition" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="3" auth="username" locRef="3" rule="CODSTA-118" lnHash="1780718607" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="1780718607" unbViolId="71843584-f61d-39df-96b5-6337692c08b6" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d6562aed-6cc5-35ae-b249-5a1671f67869" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="Function 'query_user' has external linkage and is not declared in the header" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="4" auth="username" locRef="3" rule="OWASP2019-API9-e" lnHash="1780718607" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1780718607" unbViolId="1cd00107-1fdc-33d7-8a94-6d3b2264d4cb" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7990a81-6489-3faa-ba80-9eaf90e9e733" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="Function 'query_user' has external linkage and is not declared in the header" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="2" auth="username" locRef="3" rule="AUTOSAR-A3_3_1-a" lnHash="1780718607" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1780718607" unbViolId="155809a3-1246-3380-8f8f-0f6d8c5376f3" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fafc6c6a-4230-364d-b02d-ed517a8b32b8" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="Function 'query_user' has external linkage and is not declared in the header" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="4" auth="username" locRef="3" rule="JSF-137" lnHash="1780718607" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="1780718607" unbViolId="f63e4350-5f7d-3e72-b35a-4fc448622c2c" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd05b7b9-de86-33e4-8295-a04ff3269853" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="Function 'query_user' has external linkage and is not declared in the header" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="4" auth="username" locRef="3" rule="MISRA-023" lnHash="1780718607" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1780718607" unbViolId="c1970687-8682-345a-a929-db889bfc9d6d" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="082a4e52-918b-3b27-b884-4e7689482ca2" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="Function 'query_user' has external linkage and is not declared in the header" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="2" auth="username" locRef="3" rule="MISRA2008-3_3_1" lnHash="1780718607" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1780718607" unbViolId="23fad3a0-1a13-35f4-b390-f91a3a1e4317" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2b6434f-3b86-3ed8-93a2-ac78d0d0bae4" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="Function 'query_user' has external linkage and is not declared in the header" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="3" auth="username" locRef="3" rule="CERT_C-DCL15-a" lnHash="1780718607" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1780718607" unbViolId="9389525d-a5a8-3aeb-b964-828faa6107a1" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5dff9d1-770e-3819-98bf-1209d57af2ed" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="Function 'query_user' has external linkage and is not declared in the header" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="4" auth="username" locRef="3" rule="MISRA2004-8_10" lnHash="1780718607" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1780718607" unbViolId="939e309b-bd88-3bd1-8514-6f3e2db8c9e5" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="501ae183-a4f6-37d5-aef1-04d4f9649cfa" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="Prototype of function 'query_user' does not precede function definition" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="3" auth="username" locRef="3" rule="MISRA2004-8_1_a" lnHash="1780718607" rule.header="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" tool="c++test" lineHash="1780718607" unbViolId="51393277-ffc3-3d25-bb4d-ca65c9b57a40" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f7153b07-c027-3887-b175-f89e2bb74a4a" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="Prototype of function 'query_user' does not precede function definition" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="3" auth="username" locRef="3" rule="MISRA-071_a" lnHash="1780718607" rule.header="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" tool="c++test" lineHash="1780718607" unbViolId="85c42b3d-55aa-3f62-811f-9ad9c637a1f5" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="205add95-fef6-315a-b330-fb7cab53add0" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="The function 'query_user' is referenced only in the translation unit where it is defined" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="4" auth="username" locRef="3" rule="MISRA2012-RULE-8_7" lnHash="1780718607" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="1780718607" unbViolId="92080998-78e7-319b-91b0-ff83de3b0bce" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="37d899c4-d184-324a-8469-609cd3611d5f" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="The function 'query_user' is referenced only in the translation unit where it is defined" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="4" auth="username" locRef="3" rule="GLOBAL-AVOIDEXTERN" lnHash="1780718607" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="1780718607" unbViolId="cbdf59e5-324d-3c78-bf1a-5b12b28b5c3b" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="aa296bcd-317f-3ffb-be17-c6a1f2dc3b16" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="The function 'query_user' is referenced only in the translation unit where it is defined" ln="38" locFile="/build/../../../../../../../../timer.c" locStartln="38" sev="4" auth="username" locRef="3" rule="MISRAC2012-RULE_8_7-a" lnHash="1780718607" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="1780718607" unbViolId="62ac6996-963d-3523-a3b9-8d1a3f931a6e" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="01c97b75-7a63-319b-a895-6f1e2cdfba7c" locEndPos="22" locType="sr" hash="-275311578" locEndLn="38" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 8" ln="39" locFile="/build/../../../../../../../../timer.c" locStartln="39" sev="3" auth="username" locRef="3" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="c4916a2b-9af8-3ba0-b605-78e315ad57b9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="81eff1e3-a74a-31f4-bff2-cae1f924cdde" locEndPos="1" locType="sr" hash="-275311578" locEndLn="39" goals="0," />
    <StdViol msg="The function 'query_user' has more than 20 lines and less than 2 assertions" ln="39" locFile="/build/../../../../../../../../timer.c" locStartln="39" sev="3" auth="username" locRef="3" rule="METRICS-32" lnHash="123" rule.header="All functions with more than 20 lines should contain at least 2 assertions" tool="c++test" lineHash="123" unbViolId="fb498f6b-a4ec-309d-a34b-e791045cee6d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f90a13c-1036-35d0-a2fa-56306ae7c118" locEndPos="1" locType="sr" hash="-275311578" locEndLn="39" goals="0," />
    <FlowViol msg="Value of &quot;end_m&quot; is never used" ln="40" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="41" rule="AUTOSAR-A0_1_1-a" FirstElSrcRngStartPos="0" lnHash="621530644" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid unused values" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-828209591" lang="cpp" violId="d66c4f72-941a-3cef-bea1-44f5198540bc" locEndPos="0" locEndLn="41" goals="0," locStartln="40" sev="2" locRef="3" tool="c++test" lineHash="621530644" unbViolId="21da9c6a-d6f4-320a-b28f-3b0c568afc37" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="CP" rngLn="40">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;end_m&quot; is never used" ln="40" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="41" rule="BD-PB-VOVR" FirstElSrcRngStartPos="0" lnHash="621530644" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid unused values" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="199623283" lang="cpp" violId="d42beaf7-5832-3d21-828c-d032dd2f5fdc" locEndPos="0" locEndLn="41" goals="0," locStartln="40" sev="3" locRef="3" tool="c++test" lineHash="621530644" unbViolId="2d3a614a-7b75-3d2f-8de7-6ddbe676a5cf" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="CP" rngLn="40">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;end_m&quot; is never used" ln="40" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="41" rule="CERT_C-DCL22-a" FirstElSrcRngStartPos="0" lnHash="621530644" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid unused values" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1657775242" lang="cpp" violId="c9722da5-1676-3df1-92c1-70f7f288c8ec" locEndPos="0" locEndLn="41" goals="0," locStartln="40" sev="3" locRef="3" tool="c++test" lineHash="621530644" unbViolId="6417ee53-5fe2-35a9-b78f-b739f41d58bc" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="CP" rngLn="40">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;end_m&quot; is never used" ln="40" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="41" rule="MISRA2008-0_1_6" FirstElSrcRngStartPos="0" lnHash="621530644" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid unused values" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2030957486" lang="cpp" violId="ba6f3244-1a98-3bfe-8e4b-48b3d484e0ab" locEndPos="0" locEndLn="41" goals="0," locStartln="40" sev="2" locRef="3" tool="c++test" lineHash="621530644" unbViolId="8be056d2-a19f-35cf-a961-4609f690dcc6" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="CP" rngLn="40">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;end_m&quot; is never used" ln="40" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="41" rule="MISRA2012-RULE-2_2_b" FirstElSrcRngStartPos="0" lnHash="621530644" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid unused values" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-683018263" lang="cpp" violId="0a0c7c95-2f0d-3f0f-bb32-453926f3e90b" locEndPos="0" locEndLn="41" goals="0," locStartln="40" sev="2" locRef="3" tool="c++test" lineHash="621530644" unbViolId="64567c16-d57e-389c-a3d4-55bda1ed0eda" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="CP" rngLn="40">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;end_m&quot; is never used" ln="40" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="41" rule="MISRAC2012-RULE_2_2-b" FirstElSrcRngStartPos="0" lnHash="621530644" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid unused values" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-502789250" lang="cpp" violId="78232d8f-6bb7-3bc3-b6d6-ca850fc80456" locEndPos="0" locEndLn="41" goals="0," locStartln="40" sev="2" locRef="3" tool="c++test" lineHash="621530644" unbViolId="4319d474-15ec-3104-95e4-b476e19697dd" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="CP" rngLn="40">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;start_m&quot; is never used" ln="40" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="41" rule="AUTOSAR-A0_1_1-a" FirstElSrcRngStartPos="0" lnHash="621530644" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid unused values" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1814276094" lang="cpp" violId="7340ca49-3fcd-3e02-90d3-d3ea764805cc" locEndPos="0" locEndLn="41" goals="0," locStartln="40" sev="2" locRef="3" tool="c++test" lineHash="621530644" unbViolId="f9905eef-d2a0-3468-a5bc-d5a2128e853f" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="CP" rngLn="40">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;start_m&quot; is never used" ln="40" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="41" rule="BD-PB-VOVR" FirstElSrcRngStartPos="0" lnHash="621530644" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid unused values" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1452858428" lang="cpp" violId="74db32b8-9b62-34fe-b45a-7a21803acdde" locEndPos="0" locEndLn="41" goals="0," locStartln="40" sev="3" locRef="3" tool="c++test" lineHash="621530644" unbViolId="0fc416fa-e22c-3220-809c-e60287f1b555" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="CP" rngLn="40">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;start_m&quot; is never used" ln="40" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="41" rule="CERT_C-DCL22-a" FirstElSrcRngStartPos="0" lnHash="621530644" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid unused values" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1068595907" lang="cpp" violId="e3fc1a23-773e-3e7f-b53f-2994f9459001" locEndPos="0" locEndLn="41" goals="0," locStartln="40" sev="3" locRef="3" tool="c++test" lineHash="621530644" unbViolId="e5b08bb7-140e-3c73-8e05-246cbfc5fed0" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="CP" rngLn="40">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;start_m&quot; is never used" ln="40" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="41" rule="MISRA2008-0_1_6" FirstElSrcRngStartPos="0" lnHash="621530644" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid unused values" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-611528167" lang="cpp" violId="ff86efbe-a67c-31d1-8999-069c3fc6325d" locEndPos="0" locEndLn="41" goals="0," locStartln="40" sev="2" locRef="3" tool="c++test" lineHash="621530644" unbViolId="ef8e1d94-165c-3e58-8296-04d95a0793a3" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="CP" rngLn="40">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;start_m&quot; is never used" ln="40" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="41" rule="MISRA2012-RULE-2_2_b" FirstElSrcRngStartPos="0" lnHash="621530644" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid unused values" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1976096350" lang="cpp" violId="172c63dc-9530-31b4-8584-d6e028e6ad26" locEndPos="0" locEndLn="41" goals="0," locStartln="40" sev="2" locRef="3" tool="c++test" lineHash="621530644" unbViolId="0a0d0cc0-ab0c-3e8c-93e7-e772f8754e96" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="CP" rngLn="40">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;start_m&quot; is never used" ln="40" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="41" rule="MISRAC2012-RULE_2_2-b" FirstElSrcRngStartPos="0" lnHash="621530644" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid unused values" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1082731209" lang="cpp" violId="7f9ba6ba-e436-3bd8-8fcf-06ca015fd8a7" locEndPos="0" locEndLn="41" goals="0," locStartln="40" sev="2" locRef="3" tool="c++test" lineHash="621530644" unbViolId="dd853a16-fdbc-396b-a2e4-2374e87d2e6a" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="CP" rngLn="40">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;end_h&quot; is never used" ln="40" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="41" rule="AUTOSAR-A0_1_1-a" FirstElSrcRngStartPos="0" lnHash="621530644" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid unused values" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1724461354" lang="cpp" violId="4abe35f4-6edb-3db9-8e80-4dc8f631aa23" locEndPos="0" locEndLn="41" goals="0," locStartln="40" sev="2" locRef="3" tool="c++test" lineHash="621530644" unbViolId="9b63e035-7ea7-34d3-b657-9816dca84c7c" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="CP" rngLn="40">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;end_h&quot; is never used" ln="40" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="41" rule="BD-PB-VOVR" FirstElSrcRngStartPos="0" lnHash="621530644" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid unused values" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1550994160" lang="cpp" violId="2696c950-2ff5-30b3-9a28-36a38ae48b73" locEndPos="0" locEndLn="41" goals="0," locStartln="40" sev="3" locRef="3" tool="c++test" lineHash="621530644" unbViolId="1453c2bb-ff80-3848-ab8a-41ee08751aca" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="CP" rngLn="40">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;end_h&quot; is never used" ln="40" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="41" rule="CERT_C-DCL22-a" FirstElSrcRngStartPos="0" lnHash="621530644" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid unused values" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-895216663" lang="cpp" violId="1c80473a-79e6-3707-a51c-5cc3432406c6" locEndPos="0" locEndLn="41" goals="0," locStartln="40" sev="3" locRef="3" tool="c++test" lineHash="621530644" unbViolId="6596f52c-c6c6-33d5-90eb-3de7576785a9" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="CP" rngLn="40">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;end_h&quot; is never used" ln="40" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="41" rule="MISRA2008-0_1_6" FirstElSrcRngStartPos="0" lnHash="621530644" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid unused values" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-781826867" lang="cpp" violId="3904a85a-fff4-3e24-ae26-e4cdfd4be79b" locEndPos="0" locEndLn="41" goals="0," locStartln="40" sev="2" locRef="3" tool="c++test" lineHash="621530644" unbViolId="113e1f2f-8635-373e-ab35-df720fd241c2" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="CP" rngLn="40">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;end_h&quot; is never used" ln="40" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="41" rule="MISRA2012-RULE-2_2_b" FirstElSrcRngStartPos="0" lnHash="621530644" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid unused values" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2132951178" lang="cpp" violId="ba116f44-643b-3910-9503-18c93d1028d2" locEndPos="0" locEndLn="41" goals="0," locStartln="40" sev="2" locRef="3" tool="c++test" lineHash="621530644" unbViolId="b072c691-f1b5-385f-a27d-19c932602ef7" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="CP" rngLn="40">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;end_h&quot; is never used" ln="40" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="41" rule="MISRAC2012-RULE_2_2-b" FirstElSrcRngStartPos="0" lnHash="621530644" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid unused values" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1248050205" lang="cpp" violId="db5157bc-d68d-35fb-a2af-705634704c88" locEndPos="0" locEndLn="41" goals="0," locStartln="40" sev="2" locRef="3" tool="c++test" lineHash="621530644" unbViolId="24b22519-2f0d-31f8-99d2-2b9107f9199a" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="CP" rngLn="40">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;start_h&quot; is never used" ln="40" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="41" rule="AUTOSAR-A0_1_1-a" FirstElSrcRngStartPos="0" lnHash="621530644" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid unused values" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="71979591" lang="cpp" violId="ccdeb209-34a8-3e8c-b515-6dea8ff56679" locEndPos="0" locEndLn="41" goals="0," locStartln="40" sev="2" locRef="3" tool="c++test" lineHash="621530644" unbViolId="ceac2570-04ca-3fcf-a545-289bfae3cefc" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="CP" rngLn="40">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;start_h&quot; is never used" ln="40" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="41" rule="BD-PB-VOVR" FirstElSrcRngStartPos="0" lnHash="621530644" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid unused values" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1055992195" lang="cpp" violId="6f0d3190-ad07-3d2e-8d7f-e3ef1deb6af1" locEndPos="0" locEndLn="41" goals="0," locStartln="40" sev="3" locRef="3" tool="c++test" lineHash="621530644" unbViolId="08ae3e5a-cce2-3070-83ed-ab81467a09fb" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="CP" rngLn="40">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;start_h&quot; is never used" ln="40" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="41" rule="CERT_C-DCL22-a" FirstElSrcRngStartPos="0" lnHash="621530644" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid unused values" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1473810300" lang="cpp" violId="2ed6e09d-d4b0-3aea-b72d-9c8a7cd300c6" locEndPos="0" locEndLn="41" goals="0," locStartln="40" sev="3" locRef="3" tool="c++test" lineHash="621530644" unbViolId="511eb5c8-c303-3b1f-a6a4-a8b6b5480e27" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="CP" rngLn="40">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;start_h&quot; is never used" ln="40" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="41" rule="MISRA2008-0_1_6" FirstElSrcRngStartPos="0" lnHash="621530644" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid unused values" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1276827744" lang="cpp" violId="0a95e6a9-65ac-385e-b057-80fdd0553f96" locEndPos="0" locEndLn="41" goals="0," locStartln="40" sev="2" locRef="3" tool="c++test" lineHash="621530644" unbViolId="9aea0e7c-74cb-3039-adfc-838a92471f07" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="CP" rngLn="40">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;start_h&quot; is never used" ln="40" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="41" rule="MISRA2012-RULE-2_2_b" FirstElSrcRngStartPos="0" lnHash="621530644" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid unused values" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="497099751" lang="cpp" violId="446b2876-203e-3646-ab9e-c5fa5b6ce3d5" locEndPos="0" locEndLn="41" goals="0," locStartln="40" sev="2" locRef="3" tool="c++test" lineHash="621530644" unbViolId="0adbd2ea-33fe-3092-a3c2-ab74b8ee2a33" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="CP" rngLn="40">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;start_h&quot; is never used" ln="40" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="41" rule="MISRAC2012-RULE_2_2-b" FirstElSrcRngStartPos="0" lnHash="621530644" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid unused values" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="685825904" lang="cpp" violId="0be7c488-9328-3793-bc5f-8f46598be63f" locEndPos="0" locEndLn="41" goals="0," locStartln="40" sev="2" locRef="3" tool="c++test" lineHash="621530644" unbViolId="59dd763f-00d4-376d-a3fd-aeb6c37a76b2" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="CP" rngLn="40">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="4" auth="username" locRef="3" rule="MISRA2008-3_9_2" lnHash="621530644" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="621530644" unbViolId="abd43bd4-0f3e-3e89-9632-5f35730c9a65" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9dd17d93-5871-39af-94dc-f36ec37f041b" locEndPos="5" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="MISRA-013" lnHash="621530644" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="621530644" unbViolId="1256fafc-e2a9-3fe7-892c-4b1ed17a7f75" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc99be6b-7196-3272-9bb6-50edc4c2cbe8" locEndPos="5" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="CODSTA-223" lnHash="621530644" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="621530644" unbViolId="e5622640-fad8-3495-8c64-ae5770783a3f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1107ebb9-6a36-3148-b7f8-0e1747345154" locEndPos="5" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="621530644" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="621530644" unbViolId="6f7c6357-96d6-3401-95b1-c212824fe449" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b9cec44-1db5-3fc0-af62-d32f400bc1e0" locEndPos="5" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="HICPP-7_1_6-b" lnHash="621530644" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="621530644" unbViolId="06df3a96-c589-3d51-831d-ac939404949a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10453a1b-9c35-30fd-b633-501dee5527a8" locEndPos="5" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="4" auth="username" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="621530644" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="621530644" unbViolId="2132be87-2e15-31ff-a8cd-4b53c3dc03e4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ac612ea-b986-3bbb-bfce-4dfed107ca5d" locEndPos="5" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="MISRA2004-6_3_b" lnHash="621530644" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="621530644" unbViolId="3dc997b9-a20d-3866-9888-fe8731f4026e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51df6495-423f-38c8-aae4-bc36f5d739ba" locEndPos="5" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="JSF-209_b" lnHash="621530644" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="621530644" unbViolId="06bfd1d0-a32d-3a2e-bcde-de0b2650886e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3104fb4-bd76-3b26-b770-355ba8b4f29b" locEndPos="5" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="4" auth="username" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="621530644" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="621530644" unbViolId="58f342f8-8bf5-3d05-a8eb-d9311337f4dd" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1eb0879d-dbf2-335c-9509-5a6b70a14031" locEndPos="5" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="HICPP-3_5_1-b" lnHash="621530644" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="621530644" unbViolId="fe87b416-e03f-3af6-a282-77b7c0db8cb3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f388b4ff-3a55-3b42-b284-b1df5728d072" locEndPos="5" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="'start_h' shall be declared as unsigned int or signed int" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="PORT-13" lnHash="621530644" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="621530644" unbViolId="14de1db2-3744-35e7-9659-1471057f2e0f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="73a8711c-f36c-3722-bf5c-e2a0ff16b69a" locEndPos="9" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare local variable 'start_h' as const" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="CERT_C-DCL00-a" lnHash="621530644" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="621530644" unbViolId="01bf8c6a-124d-3391-8d76-574a55ce16be" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bbfd5003-bf51-350f-b982-8ae2117339d9" locEndPos="9" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare local variable 'start_h' as const" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="AUTOSAR-A7_1_1-a" lnHash="621530644" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="621530644" unbViolId="121a5e9e-50b3-339e-b531-a5944f758e2c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1d90f02-4187-38f4-a711-b888bb6ee101" locEndPos="9" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare local variable 'start_h' as const" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="MISRA2008-7_1_1" lnHash="621530644" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="621530644" unbViolId="da3a128b-fd82-313e-943e-6aabfa28cc8c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b82a8fe-4d7b-3c60-9420-15c5efccbbb0" locEndPos="9" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare local variable 'start_h' as const" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="CODSTA-CPP-53" lnHash="621530644" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="621530644" unbViolId="aed2c737-cdfb-3fc0-94a1-b330e3decda7" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5cd7c5e-248d-3e65-8039-bffed6dd8816" locEndPos="9" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare local variable 'start_h' as const" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="HICPP-7_1_2-a" lnHash="621530644" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="621530644" unbViolId="83706856-8d7b-395f-9909-ae0a1caebdd3" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9fba9c27-79e9-3c96-a382-7a286dd81a82" locEndPos="9" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'start_h' declared but not used" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="JSF-143_a" lnHash="621530644" rule.header="Avoid unused local variables" tool="c++test" lineHash="621530644" unbViolId="17b4f98b-3dc7-3005-870a-4a9daf9af518" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47c48373-8497-3467-85c6-bb2b3fd5b0c0" locEndPos="9" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'start_h' declared but not used" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="4" auth="username" locRef="3" rule="OPT-02" lnHash="621530644" rule.header="Avoid unused local variables" tool="c++test" lineHash="621530644" unbViolId="bd4ea36f-8d39-3800-a372-a1b93347e07a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a99ebc93-6794-3432-a61c-ece0e41ff738" locEndPos="9" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'start_h' declared but not used" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="AUTOSAR-M0_1_3-a" lnHash="621530644" rule.header="Avoid unused local variables" tool="c++test" lineHash="621530644" unbViolId="499e35b2-397f-30d6-a56b-5a6e19c88792" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3f5da5c-c75d-3400-abd7-e42622a8ec26" locEndPos="9" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'start_h' declared but not used" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="MISRA2008-0_1_3_a" lnHash="621530644" rule.header="A project shall not contain unused variables" tool="c++test" lineHash="621530644" unbViolId="647eff00-3206-3757-bb41-71292cfc3f59" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8187920-d00b-397e-9cef-d52f546ed183" locEndPos="9" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'start_h' declared in function 'query_user' is unnecessary" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="AUTOSAR-M0_1_3-b" lnHash="621530644" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="621530644" unbViolId="6985d588-aa9b-3c84-b0c4-87012b967149" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a700c09-e455-3893-bfdf-25f9d70a34c9" locEndPos="9" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'start_h' declared in function 'query_user' is unnecessary" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="MISRA2008-0_1_3_b" lnHash="621530644" rule.header="A project shall not contain unused variables" tool="c++test" lineHash="621530644" unbViolId="11f22b91-dc47-3a2b-a895-a42fb8ac26b2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b4b7042-8f96-3385-a76b-cd96e6bdd11d" locEndPos="9" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'start_h' declared in function 'query_user' is unnecessary" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="CERT_C-MSC13-a" lnHash="621530644" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="621530644" unbViolId="9311c0f4-e8d0-3192-aa77-bdafb5999b00" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54f86aa8-b9b7-3adc-a31a-a815be6e6bb1" locEndPos="9" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'start_h' declared in function 'query_user' is unnecessary" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="4" auth="username" locRef="3" rule="OPT-06" lnHash="621530644" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="621530644" unbViolId="2c5f877c-709d-3ee0-bbb8-0189c67bc6fb" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d16640f3-3646-3444-840d-6f629c1134dc" locEndPos="9" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The 'start_h' variable should be commented" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="JSF-132_a" lnHash="621530644" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="621530644" unbViolId="77bb1a99-d99e-3d40-b71b-cab8297512f8" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="228fae2d-887c-3ed1-a3bf-1581f6767b12" locEndPos="9" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The 'start_h' variable should be commented" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="COMMENT-05" lnHash="621530644" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="621530644" unbViolId="428566b3-20f2-31c9-a092-8b004c32161c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ec403cb2-1a2b-3570-8ea4-033bb0738824" locEndPos="9" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Naming convention not followed: start_h" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="NAMING-19" lnHash="621530644" rule.header="Begin all integer type variable with 'i'" tool="c++test" lineHash="621530644" unbViolId="27b4182d-53bc-329f-97a7-f851fe1b1237" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a179d59d-d6e7-30c4-b6db-dd76c7b73d48" locEndPos="9" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The 'start_h' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="NAMING-HN-22" lnHash="621530644" rule.header="Hungarian notation for int types" tool="c++test" lineHash="621530644" unbViolId="6aa64c50-5b5c-362a-89a2-e40ead83b83d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4e9a0e7-522a-3734-acd5-3bcab874708f" locEndPos="9" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The 'start_h' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="NAMING-HN-30" lnHash="621530644" rule.header="Hungarian notation for int types" tool="c++test" lineHash="621530644" unbViolId="b8b24870-4035-3407-9738-1e88ed80836a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2b61cad-62fe-3c05-9fca-eddc561b1814" locEndPos="9" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The 'start_h' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="NAMING-HN-43" lnHash="621530644" rule.header="Hungarian notation for word types" tool="c++test" lineHash="621530644" unbViolId="4baadfa4-5c6e-36b4-ad16-0748c53af26f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9bf2fa12-5f2c-3cb7-b681-46e40991ebbf" locEndPos="9" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="W-179: variable &quot;start_h&quot; was declared but never referenced" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="4" auth="username" locRef="3" rule="PARSER-WARNING" lnHash="621530644" rule.header="Parser warning" tool="c++test" lineHash="621530644" unbViolId="8f4aae75-fa03-397c-b5d3-98054d69286d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ef30fd2-6f90-3a89-877c-457181304996" locEndPos="9" locType="sr" urgent="true" hash="-275311578" locEndLn="40" goals="1," />
    <StdViol msg="The variable &quot;start_h&quot; was not initialized when declared" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="JSF-142_b" lnHash="621530644" rule.header="All variables shall be initialized before use" tool="c++test" lineHash="621530644" unbViolId="ffcfa587-b900-3be7-ac29-bd427a073f0c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6aeffd2a-b7e1-344e-b89e-55657a2c99b1" locEndPos="9" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The variable &quot;start_h&quot; was not initialized when declared" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="INIT-03" lnHash="621530644" rule.header="Initialize all variables" tool="c++test" lineHash="621530644" unbViolId="bf9d9589-2647-30c1-84a7-5dd3f5ef6952" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a6f40dc-2649-393e-a612-44eb685654ad" locEndPos="9" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="W-179: variable &quot;start_m&quot; was declared but never referenced" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="4" auth="username" locRef="3" rule="PARSER-WARNING" lnHash="621530644" rule.header="Parser warning" tool="c++test" lineHash="621530644" unbViolId="61d4f3c5-34f5-356b-9528-21f18c93c0c0" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4593659-6f8a-3054-abf3-ce5b51dc1d32" locEndPos="18" locType="sr" urgent="true" hash="-275311578" locEndLn="40" goals="1," />
    <StdViol msg="The variable &quot;start_m&quot; was not initialized when declared" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="JSF-142_b" lnHash="621530644" rule.header="All variables shall be initialized before use" tool="c++test" lineHash="621530644" unbViolId="d1692d61-e1f6-3a14-9782-e12d0806a964" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98731d4c-56bf-3cb2-854c-87b2a66788e1" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The variable &quot;start_m&quot; was not initialized when declared" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="INIT-03" lnHash="621530644" rule.header="Initialize all variables" tool="c++test" lineHash="621530644" unbViolId="e3b29db0-9584-3729-ba9f-fb6eac67e952" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ef378a4-4796-328c-811d-53cedca42ec4" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'start_m' in a separate line" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="JSF-152" lnHash="621530644" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="621530644" unbViolId="a570a0ae-cfb1-3c7f-a6fa-5e70a5b37e10" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dad63d2e-9e47-3e7d-8a9e-711b12b8d861" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'start_m' in a separate line" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="AUTOSAR-A7_1_7-b" lnHash="621530644" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="621530644" unbViolId="5cc1844f-315d-3b04-adf3-61935b7b3d86" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2910b436-0358-3437-a325-8607d91d2f99" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'start_m' in a separate line" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="HICPP-7_1_1-a" lnHash="621530644" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="621530644" unbViolId="f4d5a8a1-5e83-32cd-a514-3da9f2f9db27" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1127403d-7bdf-396c-8b1c-f5f4a6b5895e" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'start_m' in a separate line" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="FORMAT-29" lnHash="621530644" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="621530644" unbViolId="fadd1c01-f47b-36a6-9503-749ec609d9ce" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="015d63ef-9413-3177-9165-410ff08f3fb1" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'start_m' in a separate declaration statement" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="AUTOSAR-A7_1_7-c" lnHash="621530644" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="621530644" unbViolId="0b2b0b88-590c-358d-a3b7-68d592cf93e2" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79ba3e16-e6de-3e78-b1fc-9623ea0b08e3" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'start_m' in a separate declaration statement" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="FORMAT-33" lnHash="621530644" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="621530644" unbViolId="71016163-7658-3071-ba62-e2e5c576a7f1" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="222afd04-36f1-3924-8a10-09c717942971" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'start_m' in a separate declaration statement" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="MISRA2008-8_0_1" lnHash="621530644" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="621530644" unbViolId="668190e3-b96b-36d8-83e8-61d38c27e344" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9d79ce6-0c57-3d4d-b823-142a2adf2580" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'start_m' in a separate declaration statement" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="HICPP-7_1_1-b" lnHash="621530644" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="621530644" unbViolId="d36b28b9-999f-3b5a-910d-c97423bae23f" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="615b02d1-d24b-32d9-bdfe-d019029d8b1e" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'start_m' in a separate declaration statement" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="AUTOSAR-M8_0_1-a" lnHash="621530644" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="621530644" unbViolId="8506370f-27c9-3e01-a580-b5aca2e858e4" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6edf8789-0c18-3293-9679-2a8b913cb094" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'start_m' in a separate declaration statement" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="CERT_C-DCL04-a" lnHash="621530644" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="621530644" unbViolId="fd6e97d2-1780-3ec0-a4ef-d1fb00ff0b50" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0be66b99-7231-374d-9c37-3c15ec20aba4" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="'start_m' shall be declared as unsigned int or signed int" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="PORT-13" lnHash="621530644" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="621530644" unbViolId="698c15b3-5b07-3f02-b071-38f9a432167b" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="edcb445e-1e10-33bb-851d-0d01edc424ce" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare local variable 'start_m' as const" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="CERT_C-DCL00-a" lnHash="621530644" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="621530644" unbViolId="6bae09a1-5b15-395c-95b9-a3495d822bb2" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c92521fc-4cbf-388e-abd1-1539cce624b4" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare local variable 'start_m' as const" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="AUTOSAR-A7_1_1-a" lnHash="621530644" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="621530644" unbViolId="3afe441a-12af-36c1-9244-b983e524f8cf" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ea83a972-8539-359d-a319-2f4f6dcafe2e" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare local variable 'start_m' as const" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="MISRA2008-7_1_1" lnHash="621530644" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="621530644" unbViolId="18ffe866-bc27-3390-a5df-7a8f3250aff1" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f5955c5-acbc-37ba-a06e-ddd6cf24b743" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare local variable 'start_m' as const" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="CODSTA-CPP-53" lnHash="621530644" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="621530644" unbViolId="912361d1-f150-3e96-a47f-4c01382db0c6" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d89562b-0470-3cf4-838c-9c6c2cd78046" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare local variable 'start_m' as const" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="HICPP-7_1_2-a" lnHash="621530644" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="621530644" unbViolId="d1b5e09b-ab5b-3436-962f-db1a59993203" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="683134b3-3353-347c-8e1b-0516585afacd" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'start_m' declared but not used" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="JSF-143_a" lnHash="621530644" rule.header="Avoid unused local variables" tool="c++test" lineHash="621530644" unbViolId="b7b0c69e-bb5b-328d-b7a5-11dd3190044d" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="158405e2-d0af-3101-85f9-777cc2f835f3" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'start_m' declared but not used" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="4" auth="username" locRef="3" rule="OPT-02" lnHash="621530644" rule.header="Avoid unused local variables" tool="c++test" lineHash="621530644" unbViolId="a5779356-0c67-3b9a-bb67-d487da6c55be" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5c701d3a-3405-3a0f-97be-393cbd15b1d2" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'start_m' declared but not used" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="AUTOSAR-M0_1_3-a" lnHash="621530644" rule.header="Avoid unused local variables" tool="c++test" lineHash="621530644" unbViolId="94ea185f-dd1e-3012-aa06-9f90c6f0dd33" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e7f82477-ceac-360e-97f1-7801360a1bf2" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'start_m' declared but not used" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="MISRA2008-0_1_3_a" lnHash="621530644" rule.header="A project shall not contain unused variables" tool="c++test" lineHash="621530644" unbViolId="3aaafa9b-a589-301b-8f72-b792d427f9d5" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0666be4-c96a-3b69-b033-e5e25ea1fd61" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'start_m' declared in function 'query_user' is unnecessary" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="AUTOSAR-M0_1_3-b" lnHash="621530644" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="621530644" unbViolId="917e29e2-794c-3ee1-a94f-9da9a030fb58" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="031c6103-d15d-3fc0-ae4e-8b3e57a2879c" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'start_m' declared in function 'query_user' is unnecessary" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="MISRA2008-0_1_3_b" lnHash="621530644" rule.header="A project shall not contain unused variables" tool="c++test" lineHash="621530644" unbViolId="a23edd0f-02f5-3966-a755-774521fadd66" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="403de265-ce2a-3928-9664-37bd794c7a87" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'start_m' declared in function 'query_user' is unnecessary" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="CERT_C-MSC13-a" lnHash="621530644" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="621530644" unbViolId="36bf5218-0825-34e2-a23e-5aea2cf39fe6" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be7d6e50-3ff5-357d-868f-4b1983ad2e80" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'start_m' declared in function 'query_user' is unnecessary" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="4" auth="username" locRef="3" rule="OPT-06" lnHash="621530644" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="621530644" unbViolId="c212bab9-e630-38cc-abe5-a89357fc3f80" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="efed9eb7-5d47-32ac-9a14-b73b8c1df540" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The 'start_m' variable should be commented" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="JSF-132_a" lnHash="621530644" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="621530644" unbViolId="4e90ea9f-8162-397e-a27b-1e093b0ffdcc" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2af8f4ea-4217-3322-b44b-7352ca15c7be" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The 'start_m' variable should be commented" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="COMMENT-05" lnHash="621530644" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="621530644" unbViolId="958e180f-3c95-3d65-ae7a-604f23a3f7ad" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d7e057e-dae1-39a4-a46c-05e8a2d17a7c" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Naming convention not followed: start_m" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="NAMING-19" lnHash="621530644" rule.header="Begin all integer type variable with 'i'" tool="c++test" lineHash="621530644" unbViolId="5e703a3a-6d9c-3b30-a9ea-a6af73b9dcf9" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5bdf6406-da6b-3f37-bdaa-ee8d5763863c" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The 'start_m' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="NAMING-HN-22" lnHash="621530644" rule.header="Hungarian notation for int types" tool="c++test" lineHash="621530644" unbViolId="fa8710f3-5bee-34b5-ba6d-4857c7dbd0c0" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a01b0c11-daed-3b24-876b-401f2cda0b43" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The 'start_m' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="NAMING-HN-30" lnHash="621530644" rule.header="Hungarian notation for int types" tool="c++test" lineHash="621530644" unbViolId="a20dc15c-1e76-333a-be81-f4b5d4236052" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b44e910f-2885-3839-8806-2c656d366d4f" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The 'start_m' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="NAMING-HN-43" lnHash="621530644" rule.header="Hungarian notation for word types" tool="c++test" lineHash="621530644" unbViolId="549b6045-dd33-3fb0-b13f-6137fe801038" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7be8b069-4095-3ef9-8037-3b93fc678771" locEndPos="18" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'end_h' in a separate line" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="JSF-152" lnHash="621530644" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="621530644" unbViolId="8d62d4ac-b1e5-336a-86d8-bb1b80cacf31" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e84d77dd-5156-3a27-981d-aad020fcb8e8" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'end_h' in a separate line" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="AUTOSAR-A7_1_7-b" lnHash="621530644" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="621530644" unbViolId="8de65a47-c97a-3fb7-88c2-0721cae2c2dc" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f86002c1-e8e6-3142-be12-235dc0fa2a6e" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'end_h' in a separate line" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="HICPP-7_1_1-a" lnHash="621530644" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="621530644" unbViolId="0af2c380-7e44-335b-a496-5726eb8a53af" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6642dee-3ffd-37c8-921a-a18846cec265" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'end_h' in a separate line" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="FORMAT-29" lnHash="621530644" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="621530644" unbViolId="2caba6de-8c49-32f8-a23d-8607ed827666" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79470e00-9dda-36b5-bec2-478f3ab8781c" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'end_h' in a separate declaration statement" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="AUTOSAR-A7_1_7-c" lnHash="621530644" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="621530644" unbViolId="c02c7075-29a2-39bd-8c3c-507ccae0ed53" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3576dc72-7ff8-3a48-9ce5-e748f0d9aec1" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'end_h' in a separate declaration statement" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="FORMAT-33" lnHash="621530644" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="621530644" unbViolId="3c17e06d-374f-3526-b663-8f3163c4eb47" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4484f584-ca6b-3a78-8248-1517c150df61" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'end_h' in a separate declaration statement" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="MISRA2008-8_0_1" lnHash="621530644" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="621530644" unbViolId="aedad943-e924-3531-b7e8-c8c6df37020f" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="465b5003-305b-3abf-9a55-451036e585dd" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'end_h' in a separate declaration statement" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="HICPP-7_1_1-b" lnHash="621530644" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="621530644" unbViolId="d7efcb02-e67c-382f-9707-b4b1e8bf54c6" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cdf5d6b9-e5b2-323b-a158-c4219759ea7a" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'end_h' in a separate declaration statement" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="AUTOSAR-M8_0_1-a" lnHash="621530644" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="621530644" unbViolId="6e512e9e-64f6-3e4e-ac30-7601331d688e" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d71c1d51-d42b-3557-b473-5f4673ad2a9b" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'end_h' in a separate declaration statement" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="CERT_C-DCL04-a" lnHash="621530644" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="621530644" unbViolId="eb215525-276f-3960-9f7c-7d870069f052" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc37a1e1-2921-32f5-a356-043d9feba1ae" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="'end_h' shall be declared as unsigned int or signed int" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="PORT-13" lnHash="621530644" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="621530644" unbViolId="63881a59-e993-3360-9ba2-90e8b2b54b79" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7c6928d-5159-3df0-83f5-e62350b6a1b1" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare local variable 'end_h' as const" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="CERT_C-DCL00-a" lnHash="621530644" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="621530644" unbViolId="2da99e43-b647-39cd-857a-dfcf18064738" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6bd88f24-3164-3cac-8ebf-d8726aab4f55" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare local variable 'end_h' as const" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="AUTOSAR-A7_1_1-a" lnHash="621530644" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="621530644" unbViolId="9b182648-802a-3482-9b04-ba0d257da5ef" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="853d8dea-c176-3d31-b22a-98a312474c84" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare local variable 'end_h' as const" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="MISRA2008-7_1_1" lnHash="621530644" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="621530644" unbViolId="0873a870-79bb-3051-a239-7dc6918efe99" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f4399da-f112-3404-94e6-0566a79e528d" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare local variable 'end_h' as const" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="CODSTA-CPP-53" lnHash="621530644" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="621530644" unbViolId="dab34554-bc99-3d79-ac1e-62c106423fbe" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e19474e-dcf5-3217-8676-b8bc3fd061b9" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare local variable 'end_h' as const" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="HICPP-7_1_2-a" lnHash="621530644" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="621530644" unbViolId="4dc5ff57-4abc-355c-b365-8f4328fd87a6" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="216dc4b5-09fe-3116-a58c-f6d551a86048" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'end_h' declared but not used" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="JSF-143_a" lnHash="621530644" rule.header="Avoid unused local variables" tool="c++test" lineHash="621530644" unbViolId="83593242-08eb-3860-b6d6-003853d40c50" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c044ee8-9f43-300e-b21e-466a97f3ce5f" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'end_h' declared but not used" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="4" auth="username" locRef="3" rule="OPT-02" lnHash="621530644" rule.header="Avoid unused local variables" tool="c++test" lineHash="621530644" unbViolId="d8cf35ae-129b-3435-a895-a48a0b087031" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="721cd634-3c11-3584-a9da-388bfc4ce879" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'end_h' declared but not used" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="AUTOSAR-M0_1_3-a" lnHash="621530644" rule.header="Avoid unused local variables" tool="c++test" lineHash="621530644" unbViolId="b5bc417c-6a3b-3d9d-81a4-8b0859e822e6" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="08de3c4e-d996-3c03-ad24-9d83225adc50" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'end_h' declared but not used" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="MISRA2008-0_1_3_a" lnHash="621530644" rule.header="A project shall not contain unused variables" tool="c++test" lineHash="621530644" unbViolId="7974cda6-a2ee-36ea-8163-39ad242e6891" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="19e34892-a567-3b3f-b485-ce77a3483962" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'end_h' declared in function 'query_user' is unnecessary" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="AUTOSAR-M0_1_3-b" lnHash="621530644" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="621530644" unbViolId="496391f3-813b-37cc-b504-da45db47fdfa" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e68d4fb-77e7-31ac-a087-1d9a143b268d" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'end_h' declared in function 'query_user' is unnecessary" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="MISRA2008-0_1_3_b" lnHash="621530644" rule.header="A project shall not contain unused variables" tool="c++test" lineHash="621530644" unbViolId="2ac243e0-462c-32a7-ab1a-ca49a8feb761" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8c53dcb-6734-3fc7-ac18-396bbe5fd272" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'end_h' declared in function 'query_user' is unnecessary" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="CERT_C-MSC13-a" lnHash="621530644" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="621530644" unbViolId="21f7410f-53b3-3190-b51d-16ad852378db" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d42c24b4-413b-3e99-a195-bbbf3115a9c3" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'end_h' declared in function 'query_user' is unnecessary" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="4" auth="username" locRef="3" rule="OPT-06" lnHash="621530644" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="621530644" unbViolId="bac77f69-40c9-3d95-b369-0c74718d78b0" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="305662d8-315a-38ff-b15a-cf9fc568a5ab" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The 'end_h' variable should be commented" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="JSF-132_a" lnHash="621530644" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="621530644" unbViolId="0038950e-b160-38b5-8f28-92aa411401a3" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ada9c54-a7e2-3bba-af02-2c2b3fdc4ddd" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The 'end_h' variable should be commented" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="COMMENT-05" lnHash="621530644" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="621530644" unbViolId="2efca818-ab05-372f-9127-52f521ce5071" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e467b95-9d86-36c4-a2bf-e174454d96f5" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Naming convention not followed: end_h" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="NAMING-19" lnHash="621530644" rule.header="Begin all integer type variable with 'i'" tool="c++test" lineHash="621530644" unbViolId="13cc47cb-4db1-3838-a138-79d75e9957b1" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b261690d-5f0c-331b-be8c-60aa16459ba2" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The 'end_h' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="NAMING-HN-22" lnHash="621530644" rule.header="Hungarian notation for int types" tool="c++test" lineHash="621530644" unbViolId="a93dcd6a-2732-3835-8b45-8c7bb4326e06" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="50aff06c-4d04-3d5c-a295-587f64b578b1" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The 'end_h' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="NAMING-HN-30" lnHash="621530644" rule.header="Hungarian notation for int types" tool="c++test" lineHash="621530644" unbViolId="9f6493d4-55c5-3509-a053-18aa4e1002c8" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f117ecb4-8108-34d0-be25-13ef706b4495" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The 'end_h' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="NAMING-HN-43" lnHash="621530644" rule.header="Hungarian notation for word types" tool="c++test" lineHash="621530644" unbViolId="f475d2a9-0d87-373f-8886-3fdc906d3df7" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="600fdf15-d7a6-3916-a7b7-a803dac161ee" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="W-179: variable &quot;end_h&quot; was declared but never referenced" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="4" auth="username" locRef="3" rule="PARSER-WARNING" lnHash="621530644" rule.header="Parser warning" tool="c++test" lineHash="621530644" unbViolId="87013eab-22c6-334a-96ea-12cdf211195e" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cc5ca702-8d66-333a-966e-b25055a9045b" locEndPos="27" locType="sr" urgent="true" hash="-275311578" locEndLn="40" goals="1," />
    <StdViol msg="The variable &quot;end_h&quot; was not initialized when declared" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="JSF-142_b" lnHash="621530644" rule.header="All variables shall be initialized before use" tool="c++test" lineHash="621530644" unbViolId="a92c706b-887f-30e0-87d0-8484ebd43d07" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d4343d7-b27a-3bb3-90eb-7fddfe767a19" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The variable &quot;end_h&quot; was not initialized when declared" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="INIT-03" lnHash="621530644" rule.header="Initialize all variables" tool="c++test" lineHash="621530644" unbViolId="2dd42acb-6dfb-35d3-a69a-2350e6afbf70" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="572c0966-bfef-3b75-aa3b-35e321f12dd4" locEndPos="27" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="W-179: variable &quot;end_m&quot; was declared but never referenced" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="4" auth="username" locRef="3" rule="PARSER-WARNING" lnHash="621530644" rule.header="Parser warning" tool="c++test" lineHash="621530644" unbViolId="34e71cac-2787-348e-8f81-e77e138f2bec" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e2e657e-d5ee-3715-be19-aaaf152accd1" locEndPos="34" locType="sr" urgent="true" hash="-275311578" locEndLn="40" goals="1," />
    <StdViol msg="The variable &quot;end_m&quot; was not initialized when declared" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="JSF-142_b" lnHash="621530644" rule.header="All variables shall be initialized before use" tool="c++test" lineHash="621530644" unbViolId="24cad7c6-183d-319b-91e5-6840ff876c1a" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c211c142-709b-3a73-84a4-c6d6654d33b4" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The variable &quot;end_m&quot; was not initialized when declared" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="INIT-03" lnHash="621530644" rule.header="Initialize all variables" tool="c++test" lineHash="621530644" unbViolId="db4cfaaa-1742-30ae-9289-e5f7d9bd351f" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8cfeae63-cfec-32fc-ac4c-1853adccfefb" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'end_m' in a separate line" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="JSF-152" lnHash="621530644" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="621530644" unbViolId="e4bf62d3-9016-3154-962e-11707d4c8feb" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31801d65-3aeb-3159-b448-19e19f316157" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'end_m' in a separate line" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="AUTOSAR-A7_1_7-b" lnHash="621530644" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="621530644" unbViolId="3dda14ed-f867-38cb-bff7-191562d9475c" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5994afde-a3e5-347d-91dd-a23ab80d7c8e" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'end_m' in a separate line" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="HICPP-7_1_1-a" lnHash="621530644" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="621530644" unbViolId="96fb151b-db0f-32ef-8df2-33b4756c21bd" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6f5bdd2-f8f6-3cff-8d7d-2d132b8b2c68" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'end_m' in a separate line" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="FORMAT-29" lnHash="621530644" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="621530644" unbViolId="54574946-d228-3d88-b2b9-5a6c7b550be8" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9498fbd1-4581-3c8a-8abf-a2a4e46ea8cd" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'end_m' in a separate declaration statement" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="AUTOSAR-A7_1_7-c" lnHash="621530644" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="621530644" unbViolId="8bf5a0e2-6301-36f9-a990-62b7e938f5fb" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62ba1df3-ee1e-3b90-b7e4-e721f7097120" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'end_m' in a separate declaration statement" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="FORMAT-33" lnHash="621530644" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="621530644" unbViolId="4babc2d4-b3e6-39dc-bbd6-21db1f20177e" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e86b233e-0e59-3c18-ae0e-74f1a47a0061" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'end_m' in a separate declaration statement" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="MISRA2008-8_0_1" lnHash="621530644" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="621530644" unbViolId="d905ccb6-655d-3b24-bc8b-9abe6bfaf2a0" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eccfbb7b-25eb-3b53-bc27-651dc34ba5f5" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'end_m' in a separate declaration statement" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="HICPP-7_1_1-b" lnHash="621530644" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="621530644" unbViolId="47a8a48f-c9e1-3a33-b3f6-a5cf0eaf94d3" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f493ac73-0c0f-3a65-bddd-6c70555ea980" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'end_m' in a separate declaration statement" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="AUTOSAR-M8_0_1-a" lnHash="621530644" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="621530644" unbViolId="d6f3b14e-4416-392e-9832-8e89d79c0261" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75645318-24e1-3401-97d9-1153f26e7cc0" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare variable 'end_m' in a separate declaration statement" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="CERT_C-DCL04-a" lnHash="621530644" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="621530644" unbViolId="4f8b31e8-5f9a-3bcd-a270-c6834b8cc677" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e1fdcbd-366e-3a96-825e-8a94f09a7036" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="'end_m' shall be declared as unsigned int or signed int" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="PORT-13" lnHash="621530644" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="621530644" unbViolId="dc892c9f-a9b2-32bc-ac69-2b5bcbc9ac4d" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4bbcdee-8921-30b4-a317-eac48f600600" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare local variable 'end_m' as const" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="CERT_C-DCL00-a" lnHash="621530644" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="621530644" unbViolId="a1828aa9-5053-386b-b754-5606869b2bd3" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f7137d20-7ac6-3acf-bb6f-30fa9da0b780" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare local variable 'end_m' as const" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="AUTOSAR-A7_1_1-a" lnHash="621530644" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="621530644" unbViolId="3fec78f4-12bd-3304-96f0-9769dfa08b72" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47215807-4fd1-323d-8d1d-b569bbba21d2" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare local variable 'end_m' as const" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="MISRA2008-7_1_1" lnHash="621530644" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="621530644" unbViolId="fe40da95-6522-3c73-a846-ed6b7179c42c" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="34c9fd99-b957-3ef5-976e-461ccfff462e" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare local variable 'end_m' as const" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="CODSTA-CPP-53" lnHash="621530644" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="621530644" unbViolId="794a27ef-1a8a-347f-b9c7-11897172911f" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96219462-cb83-3084-910e-140e42c595ed" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Declare local variable 'end_m' as const" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="HICPP-7_1_2-a" lnHash="621530644" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="621530644" unbViolId="db738939-2ec5-3b2e-b26a-eb37c4f1b99c" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77d28c6d-4b61-3b57-97d3-af9df9d5434b" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'end_m' declared but not used" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="JSF-143_a" lnHash="621530644" rule.header="Avoid unused local variables" tool="c++test" lineHash="621530644" unbViolId="d9bdb829-7241-306e-b107-586211b2a63e" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d6e6974-fc7f-3c05-91cf-a0369a515d3c" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'end_m' declared but not used" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="4" auth="username" locRef="3" rule="OPT-02" lnHash="621530644" rule.header="Avoid unused local variables" tool="c++test" lineHash="621530644" unbViolId="b49c4234-97f9-3efd-a7dd-5d8bc8134bc7" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb8d5253-bf0f-3c4a-9712-f12af15430b1" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'end_m' declared but not used" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="AUTOSAR-M0_1_3-a" lnHash="621530644" rule.header="Avoid unused local variables" tool="c++test" lineHash="621530644" unbViolId="03c29aab-55c3-33e9-b0ee-3a93482dd1cd" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75dbcedd-bf10-3fea-ace2-479f3d1883c7" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'end_m' declared but not used" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="MISRA2008-0_1_3_a" lnHash="621530644" rule.header="A project shall not contain unused variables" tool="c++test" lineHash="621530644" unbViolId="10ae36be-14b9-3ca5-80d7-3965c92646d2" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cfc99459-f0af-3201-af68-162185898fc5" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'end_m' declared in function 'query_user' is unnecessary" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="AUTOSAR-M0_1_3-b" lnHash="621530644" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="621530644" unbViolId="b7001aaa-2251-31b6-802c-b5cd9830a1b3" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e32e0e6e-29ed-3d61-8493-5a65f901fb71" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'end_m' declared in function 'query_user' is unnecessary" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="2" auth="username" locRef="3" rule="MISRA2008-0_1_3_b" lnHash="621530644" rule.header="A project shall not contain unused variables" tool="c++test" lineHash="621530644" unbViolId="d77fef1f-a74d-3fb9-96e1-f2c0ee084a98" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b10dcc5-8adf-3b95-8507-9deaaab9e7b6" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'end_m' declared in function 'query_user' is unnecessary" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="CERT_C-MSC13-a" lnHash="621530644" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="621530644" unbViolId="5ee43605-997c-3ece-83b0-c15d48cd2f29" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fbd532de-0f3e-315f-a17b-0a8a70b6f494" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Local variable 'end_m' declared in function 'query_user' is unnecessary" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="4" auth="username" locRef="3" rule="OPT-06" lnHash="621530644" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="621530644" unbViolId="09d9f8f9-20ac-34d6-85c8-6b11b39173e7" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c097fbbe-2c40-3bf0-bee2-7934c5d59aa0" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The 'end_m' variable should be commented" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="JSF-132_a" lnHash="621530644" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="621530644" unbViolId="32d7743e-368e-38c5-b4f9-2b1b99493af1" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e2f4b5d-eff7-3563-8f07-2d6821c6c637" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The 'end_m' variable should be commented" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="COMMENT-05" lnHash="621530644" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="621530644" unbViolId="92214511-d479-3bb8-83f7-abc9048d1172" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="46494df9-6bf1-31be-88e6-192837f60f74" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="Naming convention not followed: end_m" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="NAMING-19" lnHash="621530644" rule.header="Begin all integer type variable with 'i'" tool="c++test" lineHash="621530644" unbViolId="d67f204f-199d-33fb-a6fe-f0f7790c1f9b" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b549245-6018-3610-9ca7-e79ece15bc43" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The 'end_m' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="NAMING-HN-22" lnHash="621530644" rule.header="Hungarian notation for int types" tool="c++test" lineHash="621530644" unbViolId="ae19e4e3-c0f8-3cf1-bbe8-8b2a4c63a648" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="faecf3ab-72c7-3c0f-938f-5fbd6475c7e4" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The 'end_m' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="NAMING-HN-30" lnHash="621530644" rule.header="Hungarian notation for int types" tool="c++test" lineHash="621530644" unbViolId="c6d6ebea-8479-38c0-a5bd-6dd4cfeefb9a" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb54205f-4c2b-3aa3-890b-6a2a1142c221" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The 'end_m' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="40" locFile="/build/../../../../../../../../timer.c" locStartln="40" sev="3" auth="username" locRef="3" rule="NAMING-HN-43" lnHash="621530644" rule.header="Hungarian notation for word types" tool="c++test" lineHash="621530644" unbViolId="811d8502-7fd9-3309-a614-5ba8eb5bc6d8" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00614cc3-e516-38b2-a595-d7c614ed8af0" locEndPos="34" locType="sr" hash="-275311578" locEndLn="40" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: the_record" ln="41" locFile="/build/../../../../../../../../timer.c" locStartln="41" sev="3" auth="username" locRef="3" rule="CODSTA-94" lnHash="-456882160" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-456882160" unbViolId="859b8ca5-568b-34ff-ad20-76a6d5cc4f08" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e91deed-c8f2-3b8f-88a2-3f27c8c19525" locEndPos="26" locType="sr" hash="-275311578" locEndLn="41" goals="0," />
    <StdViol msg="The variable of pointer type is declared: the_record" ln="41" locFile="/build/../../../../../../../../timer.c" locStartln="41" sev="3" auth="username" locRef="3" rule="CODSTA-95" lnHash="-456882160" rule.header="Do not declare pointer type" tool="c++test" lineHash="-456882160" unbViolId="a7c13394-3818-3ee4-a544-c1ff7555c84f" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38139038-507f-3f53-9676-ec3f0e8f73f3" locEndPos="26" locType="sr" hash="-275311578" locEndLn="41" goals="0," />
    <StdViol msg="Pointer variable 'the_record' uninitialized when declared" ln="41" locFile="/build/../../../../../../../../timer.c" locStartln="41" sev="2" auth="username" locRef="3" rule="INIT-04" lnHash="-456882160" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-456882160" unbViolId="ed617d51-ffc9-3aa8-8d65-ed61deda6836" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77ba2d6d-65e5-3ebc-a9ef-757fb354f528" locEndPos="26" locType="sr" hash="-275311578" locEndLn="41" goals="0," />
    <StdViol msg="Local variable 'the_record' starts with a global prefix " ln="41" locFile="/build/../../../../../../../../timer.c" locStartln="41" sev="3" auth="username" locRef="3" rule="NAMING-04" lnHash="-456882160" rule.header="Global prefixes should only be used for global variables" tool="c++test" lineHash="-456882160" unbViolId="b378e95b-cfab-35e5-80df-47c882b964a7" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4883d134-5793-3fd9-acdf-65a67b70f9fc" locEndPos="26" locType="sr" hash="-275311578" locEndLn="41" goals="0," />
    <StdViol msg="The 'the_record' variable should be commented" ln="41" locFile="/build/../../../../../../../../timer.c" locStartln="41" sev="3" auth="username" locRef="3" rule="JSF-132_a" lnHash="-456882160" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-456882160" unbViolId="e0d15284-c25d-3a39-9ed7-5ef85c1d8801" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ad50631-64f4-34fb-bc18-c13af2b220a7" locEndPos="26" locType="sr" hash="-275311578" locEndLn="41" goals="0," />
    <StdViol msg="The 'the_record' variable should be commented" ln="41" locFile="/build/../../../../../../../../timer.c" locStartln="41" sev="3" auth="username" locRef="3" rule="COMMENT-05" lnHash="-456882160" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-456882160" unbViolId="662fd61e-4ba2-35d4-9491-bfdf4247d141" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7486ca7a-168d-3d70-95ab-8ca2c830e8b9" locEndPos="26" locType="sr" hash="-275311578" locEndLn="41" goals="0," />
    <StdViol msg="Naming convention not followed: the_record" ln="41" locFile="/build/../../../../../../../../timer.c" locStartln="41" sev="3" auth="username" locRef="3" rule="NAMING-22" lnHash="-456882160" rule.header="Prefix a variable type 'pointer' with a 'p' character" tool="c++test" lineHash="-456882160" unbViolId="c8f8233f-497c-35e7-958c-786d72f6b848" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="376dc7b9-824a-33cb-a09a-014f874bd397" locEndPos="26" locType="sr" hash="-275311578" locEndLn="41" goals="0," />
    <StdViol msg="The 'the_record' identifier should have the 'p' prefix" ln="41" locFile="/build/../../../../../../../../timer.c" locStartln="41" sev="3" auth="username" locRef="3" rule="NAMING-HN-34" lnHash="-456882160" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="-456882160" unbViolId="a46009ab-ce1c-30eb-bfb9-dc073e154b81" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a411211-1e2c-3717-be22-2067b47d2c54" locEndPos="26" locType="sr" hash="-275311578" locEndLn="41" goals="0," />
    <StdViol msg="The 'timer' variable should be commented" ln="42" locFile="/build/../../../../../../../../timer.c" locStartln="42" sev="3" auth="username" locRef="3" rule="JSF-132_a" lnHash="1079331828" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="1079331828" unbViolId="d81131d3-ae95-3334-a476-77010f8ef75f" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca8628ac-2b9a-3e85-8947-42ca590bdf99" locEndPos="12" locType="sr" hash="-275311578" locEndLn="42" goals="0," />
    <StdViol msg="The 'timer' variable should be commented" ln="42" locFile="/build/../../../../../../../../timer.c" locStartln="42" sev="3" auth="username" locRef="3" rule="COMMENT-05" lnHash="1079331828" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="1079331828" unbViolId="96e08135-9bfa-335f-a153-5c77182f3faa" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3238bf46-4a82-3fb8-902d-dde647c906ba" locEndPos="12" locType="sr" hash="-275311578" locEndLn="42" goals="0," />
    <StdViol msg="The variable &quot;timer&quot; was not initialized when declared" ln="42" locFile="/build/../../../../../../../../timer.c" locStartln="42" sev="2" auth="username" locRef="3" rule="JSF-142_b" lnHash="1079331828" rule.header="All variables shall be initialized before use" tool="c++test" lineHash="1079331828" unbViolId="87c32fc1-7aee-3b56-aa9d-2ceba1f1e6eb" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18246804-7a52-3e75-8e84-6b7f8b5a7d19" locEndPos="12" locType="sr" hash="-275311578" locEndLn="42" goals="0," />
    <StdViol msg="The variable &quot;timer&quot; was not initialized when declared" ln="42" locFile="/build/../../../../../../../../timer.c" locStartln="42" sev="3" auth="username" locRef="3" rule="INIT-03" lnHash="1079331828" rule.header="Initialize all variables" tool="c++test" lineHash="1079331828" unbViolId="7d68c383-69a9-3525-a87e-b60cccbdd202" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2bb1877d-d1d8-3311-a6f5-6872c32f991f" locEndPos="12" locType="sr" hash="-275311578" locEndLn="42" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: tm_tmp" ln="43" locFile="/build/../../../../../../../../timer.c" locStartln="43" sev="3" auth="username" locRef="3" rule="CODSTA-94" lnHash="1350390768" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="1350390768" unbViolId="aa389c3a-70e1-3274-9e1a-bf998a333ae8" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba843c33-f0e1-3b79-a1f2-b6e409fb95f0" locEndPos="16" locType="sr" hash="-275311578" locEndLn="43" goals="0," />
    <StdViol msg="The variable of pointer type is declared: tm_tmp" ln="43" locFile="/build/../../../../../../../../timer.c" locStartln="43" sev="3" auth="username" locRef="3" rule="CODSTA-95" lnHash="1350390768" rule.header="Do not declare pointer type" tool="c++test" lineHash="1350390768" unbViolId="2a7ade3a-b355-3912-9b05-21996d3f8a73" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16d41f58-ff60-3717-9f56-b15daf0bd51a" locEndPos="16" locType="sr" hash="-275311578" locEndLn="43" goals="0," />
    <StdViol msg="Pointer variable 'tm_tmp' uninitialized when declared" ln="43" locFile="/build/../../../../../../../../timer.c" locStartln="43" sev="2" auth="username" locRef="3" rule="INIT-04" lnHash="1350390768" rule.header="Initialize all pointer variables" tool="c++test" lineHash="1350390768" unbViolId="e519d215-9fca-3810-ab60-bf5212fd3178" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3dd7126a-e065-33df-8b3b-823dc0f84ef8" locEndPos="16" locType="sr" hash="-275311578" locEndLn="43" goals="0," />
    <StdViol msg="The 'tm_tmp' variable should be commented" ln="43" locFile="/build/../../../../../../../../timer.c" locStartln="43" sev="3" auth="username" locRef="3" rule="JSF-132_a" lnHash="1350390768" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="1350390768" unbViolId="78f9011e-f7a8-3acc-a2f9-19ebfe874c6f" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe2d8edd-b96f-3893-a3b4-164082022993" locEndPos="16" locType="sr" hash="-275311578" locEndLn="43" goals="0," />
    <StdViol msg="The 'tm_tmp' variable should be commented" ln="43" locFile="/build/../../../../../../../../timer.c" locStartln="43" sev="3" auth="username" locRef="3" rule="COMMENT-05" lnHash="1350390768" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="1350390768" unbViolId="3f4216b3-bb57-361f-94e8-fc4d47101262" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c12601fb-6867-34e4-aff2-97ee8dfb026a" locEndPos="16" locType="sr" hash="-275311578" locEndLn="43" goals="0," />
    <StdViol msg="Naming convention not followed: tm_tmp" ln="43" locFile="/build/../../../../../../../../timer.c" locStartln="43" sev="3" auth="username" locRef="3" rule="NAMING-22" lnHash="1350390768" rule.header="Prefix a variable type 'pointer' with a 'p' character" tool="c++test" lineHash="1350390768" unbViolId="1fcae8a1-f890-3f49-98a4-bbc938280c82" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3709ce46-9d7d-3129-94d8-f4b81e9d7260" locEndPos="16" locType="sr" hash="-275311578" locEndLn="43" goals="0," />
    <StdViol msg="The 'tm_tmp' identifier should have the 'p' prefix" ln="43" locFile="/build/../../../../../../../../timer.c" locStartln="43" sev="3" auth="username" locRef="3" rule="NAMING-HN-34" lnHash="1350390768" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="1350390768" unbViolId="6512db6a-c90e-305d-b645-3e126feba45b" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed2a347f-fd4b-3d9e-b187-44ad9bc8f5fe" locEndPos="16" locType="sr" hash="-275311578" locEndLn="43" goals="0," />
    <StdViol msg="The type 'void*' of function argument number '1' does not match declared type 'long*'" ln="45" locFile="/build/../../../../../../../../timer.c" locStartln="45" sev="3" auth="username" locRef="3" rule="PB-11" lnHash="1705568950" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="1705568950" unbViolId="51809463-a8c8-3ece-b332-7ad60c2a9bff" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f631bd8e-67bf-3531-a278-4159b8166ca7" locEndPos="13" locType="sr" hash="-275311578" locEndLn="45" goals="0," />
    <StdViol msg="Function 'time' is being used" ln="45" locFile="/build/../../../../../../../../timer.c" locStartln="45" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-21_10" lnHash="1705568950" rule.header="The Standard Library time and date functions shall not be used" tool="c++test" lineHash="1705568950" unbViolId="229b72a8-aa77-3f4d-a0a9-d838c0504900" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a20cf654-87ef-3d17-9114-e229df03bc03" locEndPos="13" locType="sr" hash="-275311578" locEndLn="45" goals="0," />
    <StdViol msg="Function 'time' is being used" ln="45" locFile="/build/../../../../../../../../timer.c" locStartln="45" sev="2" auth="username" locRef="3" rule="SECURITY-01" lnHash="1705568950" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="1705568950" unbViolId="e6daee7a-3094-32db-8307-a17bc3b9c593" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="122c93c3-833e-39ff-bf84-81e27e392e1b" locEndPos="13" locType="sr" hash="-275311578" locEndLn="45" goals="0," />
    <StdViol msg="Function 'time' is being used" ln="45" locFile="/build/../../../../../../../../timer.c" locStartln="45" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_21_10-a" lnHash="1705568950" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="1705568950" unbViolId="5df769b6-25a7-3796-84c6-c99b91a96290" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f86b125-67d7-3464-acb9-a374aef8410a" locEndPos="13" locType="sr" hash="-275311578" locEndLn="45" goals="0," />
    <StdViol msg="Function 'time' is being used" ln="45" locFile="/build/../../../../../../../../timer.c" locStartln="45" sev="1" auth="username" locRef="3" rule="CERT_C-MSC33-a" lnHash="1705568950" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="1705568950" unbViolId="788beaf1-35db-34f4-8ac3-55bf4aa070fd" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b5b0895-a0ee-3ea2-9d9d-7ec7575c18da" locEndPos="13" locType="sr" hash="-275311578" locEndLn="45" goals="0," />
    <StdViol msg="Cast to primitive type should not be used if possible" ln="45" locFile="/build/../../../../../../../../timer.c" locStartln="45" sev="3" auth="username" locRef="3" rule="HICPP-4_2_2-b" lnHash="1705568950" rule.header="Avoid explicit type conversions (casts)" tool="c++test" lineHash="1705568950" unbViolId="42133873-ccc9-3ae2-a280-af89e50cd69e" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5316071f-b326-321a-8820-ebcbc97b43a8" locEndPos="18" locType="sr" hash="-275311578" locEndLn="45" goals="0," />
    <StdViol msg="Cast to primitive type should not be used if possible" ln="45" locFile="/build/../../../../../../../../timer.c" locStartln="45" sev="4" auth="username" locRef="3" rule="JSF-183" lnHash="1705568950" rule.header="Every possible measure should be taken to avoid type casting" tool="c++test" lineHash="1705568950" unbViolId="91aac772-b4c3-3ddf-9d54-addc2d9242c4" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="563c2322-f8fa-38cf-9319-896b38f163c1" locEndPos="18" locType="sr" hash="-275311578" locEndLn="45" goals="0," />
    <StdViol msg="Cast to primitive type should not be used if possible" ln="45" locFile="/build/../../../../../../../../timer.c" locStartln="45" sev="3" auth="username" locRef="3" rule="CODSTA-31" lnHash="1705568950" rule.header="Avoid explicit type conversions (casts)" tool="c++test" lineHash="1705568950" unbViolId="eae21048-b162-3be9-8ba9-0a22035b660d" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="15439c80-ed60-3e5e-8868-084f5577f664" locEndPos="18" locType="sr" hash="-275311578" locEndLn="45" goals="0," />
    <StdViol msg="Do not convert an object with integer type 'int' to an object with pointer type  'void *'" ln="45" locFile="/build/../../../../../../../../timer.c" locStartln="45" sev="2" auth="username" locRef="3" rule="MISRA2008-5_2_8" lnHash="1705568950" rule.header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" tool="c++test" lineHash="1705568950" unbViolId="49aae2eb-ea0e-317d-b9d8-580a2e196903" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="25122072-fe2e-3a28-8e0a-8a86c3d1be9c" locEndPos="18" locType="sr" hash="-275311578" locEndLn="45" goals="0," />
    <StdViol msg="Do not convert an object with integer type 'int' to an object with pointer type  'void *'" ln="45" locFile="/build/../../../../../../../../timer.c" locStartln="45" sev="3" auth="username" locRef="3" rule="CODSTA-65" lnHash="1705568950" rule.header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" tool="c++test" lineHash="1705568950" unbViolId="d05dba94-dad2-3277-bfc1-d762ad288adf" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a606215-7183-3b42-a6e5-144ff8ffb312" locEndPos="18" locType="sr" hash="-275311578" locEndLn="45" goals="0," />
    <StdViol msg="Do not convert an object with integer type 'int' to an object with pointer type  'void *'" ln="45" locFile="/build/../../../../../../../../timer.c" locStartln="45" sev="2" auth="username" locRef="3" rule="AUTOSAR-M5_2_8-a" lnHash="1705568950" rule.header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" tool="c++test" lineHash="1705568950" unbViolId="ca0bb6f9-9075-3aad-abc0-c33f67783b43" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03556eaf-71e0-3e41-b6d9-30ef56c1f638" locEndPos="18" locType="sr" hash="-275311578" locEndLn="45" goals="0," />
    <StdViol msg="Use 0 instead of 'NULL'" ln="45" locFile="/build/../../../../../../../../timer.c" locStartln="45" sev="2" auth="username" locRef="3" rule="JSF-175" lnHash="1705568950" rule.header="NULL identifier shall not be used; use plain 0 instead" tool="c++test" lineHash="1705568950" unbViolId="e2340945-a19f-3b78-a33c-f87b7060a16a" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="44eb2a1d-cabb-3693-94c9-57587134cb79" locEndPos="18" locType="sr" hash="-275311578" locEndLn="45" goals="0," />
    <StdViol msg="Use 0 instead of 'NULL'" ln="45" locFile="/build/../../../../../../../../timer.c" locStartln="45" sev="3" auth="username" locRef="3" rule="CODSTA-17" lnHash="1705568950" rule.header="Do not use NULL identifier; use 0 instead" tool="c++test" lineHash="1705568950" unbViolId="3044901a-8f72-3892-9662-c365789eb979" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f4fdcfc6-58ed-3444-9db4-42f752ed70fa" locEndPos="18" locType="sr" hash="-275311578" locEndLn="45" goals="0," />
    <StdViol msg="Function 'localtime' is being used" ln="46" locFile="/build/../../../../../../../../timer.c" locStartln="46" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-21_10" lnHash="-1526808077" rule.header="The Standard Library time and date functions shall not be used" tool="c++test" lineHash="-1526808077" unbViolId="fe13cd5b-0f10-3156-91b1-fb16f79439e0" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ebd6f5c-d4aa-3f61-8156-aa7732fb872d" locEndPos="14" locType="sr" hash="-275311578" locEndLn="46" goals="0," />
    <StdViol msg="Function 'localtime' is being used" ln="46" locFile="/build/../../../../../../../../timer.c" locStartln="46" sev="2" auth="username" locRef="3" rule="SECURITY-01" lnHash="-1526808077" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="-1526808077" unbViolId="e7f45ff0-10f8-30e9-8d5f-d0af9144debd" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f1cf4dbe-1891-3dcc-a5ce-93c44404a47b" locEndPos="14" locType="sr" hash="-275311578" locEndLn="46" goals="0," />
    <StdViol msg="Function 'localtime' is being used" ln="46" locFile="/build/../../../../../../../../timer.c" locStartln="46" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_21_10-a" lnHash="-1526808077" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="-1526808077" unbViolId="ff6c782f-4189-3f75-9181-bb8a66b7707c" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c46e8ed-0e90-3fd3-bdd5-9fa2d04b8542" locEndPos="14" locType="sr" hash="-275311578" locEndLn="46" goals="0," />
    <StdViol msg="Function 'localtime' is being used" ln="46" locFile="/build/../../../../../../../../timer.c" locStartln="46" sev="1" auth="username" locRef="3" rule="CERT_C-MSC33-a" lnHash="-1526808077" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="-1526808077" unbViolId="49b6e24d-9114-3626-9dd7-0f6e9a190c1f" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d1bca18-d1a1-367e-a09c-6d4b53d9b158" locEndPos="14" locType="sr" hash="-275311578" locEndLn="46" goals="0," />
    <StdViol msg="The 'localtime' function should not be used in multithreading applications" ln="46" locFile="/build/../../../../../../../../timer.c" locStartln="46" sev="3" auth="username" locRef="3" rule="CERT_C-CON33-a" lnHash="-1526808077" rule.header="Avoid using thread-unsafe functions" tool="c++test" lineHash="-1526808077" unbViolId="bd4cb620-10a3-3269-a973-20affabc2c3c" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10299f7c-e2c5-368f-8fc6-2467b94c702e" locEndPos="14" locType="sr" hash="-275311578" locEndLn="46" goals="0," />
    <StdViol msg="The 'localtime' function should not be used in multithreading applications" ln="46" locFile="/build/../../../../../../../../timer.c" locStartln="46" sev="2" auth="username" locRef="3" rule="APSC_DV-002400-d" lnHash="-1526808077" rule.header="Avoid using thread-unsafe functions" tool="c++test" lineHash="-1526808077" unbViolId="274f1216-9f49-36bf-acff-8969ea0db65e" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="60413144-7cb0-3bef-bd41-d9fef49c9263" locEndPos="14" locType="sr" hash="-275311578" locEndLn="46" goals="0," />
    <StdViol msg="The 'localtime' function should not be used in multithreading applications" ln="46" locFile="/build/../../../../../../../../timer.c" locStartln="46" sev="2" auth="username" locRef="3" rule="APSC_DV-001995-f" lnHash="-1526808077" rule.header="Avoid using thread-unsafe functions" tool="c++test" lineHash="-1526808077" unbViolId="f75b3da1-15ad-37ea-bc9a-8e486ff48712" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="349c50a6-1ce0-32f2-bd0a-9181b6a4c3cb" locEndPos="14" locType="sr" hash="-275311578" locEndLn="46" goals="0," />
    <StdViol msg="The 'localtime' function should not be used in multithreading applications" ln="46" locFile="/build/../../../../../../../../timer.c" locStartln="46" sev="2" auth="username" locRef="3" rule="SECURITY-25" lnHash="-1526808077" rule.header="Avoid using thread-unsafe functions" tool="c++test" lineHash="-1526808077" unbViolId="19535b7f-ab5b-37f3-9410-67002c3ab190" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9782efa9-bee1-378c-a80a-80142b3c8e32" locEndPos="14" locType="sr" hash="-275311578" locEndLn="46" goals="0," />
    <StdViol msg="Pointer to void type should not be converted to pointer to object type 'struct timer_record *'" ln="48" locFile="/build/../../../../../../../../timer.c" locStartln="48" sev="4" auth="username" locRef="3" rule="MISRA2012-RULE-11_5" lnHash="-527707354" rule.header="A conversion should not be performed from pointer to void into pointer to object" tool="c++test" lineHash="-527707354" unbViolId="4fde6061-b2bd-3280-a7cf-bd7c61bb078c" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3b19ef2-3333-3767-afd4-5f1289a2419b" locEndPos="18" locType="sr" hash="-275311578" locEndLn="48" goals="0," />
    <StdViol msg="Pointer to void type should not be converted to pointer to object type 'struct timer_record *'" ln="48" locFile="/build/../../../../../../../../timer.c" locStartln="48" sev="4" auth="username" locRef="3" rule="MISRAC2012-RULE_11_5-a" lnHash="-527707354" rule.header="A conversion should not be performed from pointer to void into pointer to object" tool="c++test" lineHash="-527707354" unbViolId="8d2ac565-3726-3d93-90e8-06728d61bb20" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd58cb6d-683e-316f-abf9-a5f6ae89961b" locEndPos="18" locType="sr" hash="-275311578" locEndLn="48" goals="0," />
    <StdViol msg="Pointer to void type should not be converted to pointer to object type 'struct timer_record *'" ln="48" locFile="/build/../../../../../../../../timer.c" locStartln="48" sev="4" auth="username" locRef="3" rule="CWE-704-f" lnHash="-527707354" rule.header="A conversion should not be performed from pointer to void into pointer to object" tool="c++test" lineHash="-527707354" unbViolId="6f973958-bbcc-370a-829c-15d0a91f8b20" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f2129723-27e0-3c02-80e9-5f600b39b024" locEndPos="18" locType="sr" hash="-275311578" locEndLn="48" goals="0," />
    <StdViol msg="Pointer to void type should not be converted to pointer to object type 'struct timer_record *'" ln="48" locFile="/build/../../../../../../../../timer.c" locStartln="48" sev="4" auth="username" locRef="3" rule="CODSTA-128" lnHash="-527707354" rule.header="A conversion should not be performed from pointer to void into pointer to object" tool="c++test" lineHash="-527707354" unbViolId="661fda2f-b413-3b63-be98-5b9eb253707c" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1c54ec2-a7fa-3851-978b-2627cd1c9ff3" locEndPos="18" locType="sr" hash="-275311578" locEndLn="48" goals="0," />
    <StdViol msg="Cast to pointer type 'struct timer_record *' is not allowed" ln="48" locFile="/build/../../../../../../../../timer.c" locStartln="48" sev="3" auth="username" locRef="3" rule="CODSTA-135" lnHash="-527707354" rule.header="Type casting from any type to or from pointers shall not be used" tool="c++test" lineHash="-527707354" unbViolId="64c65898-6a89-34ba-9e08-de576dbde8a4" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="192bb8ff-e9e6-3d46-9d0f-34567cb0c40d" locEndPos="18" locType="sr" hash="-275311578" locEndLn="48" goals="0," />
    <StdViol msg="Cast to pointer type 'struct timer_record *' is not allowed" ln="48" locFile="/build/../../../../../../../../timer.c" locStartln="48" sev="2" auth="username" locRef="3" rule="JSF-182" lnHash="-527707354" rule.header="Type casting from any type to or from pointers shall not be used" tool="c++test" lineHash="-527707354" unbViolId="f871e589-5b5f-30f8-8804-abb721adc2b4" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67305eed-62ec-3ca3-80bd-399b08cde329" locEndPos="18" locType="sr" hash="-275311578" locEndLn="48" goals="0," />
    <StdViol msg="Cast from pointer type 'void *' is not allowed" ln="48" locFile="/build/../../../../../../../../timer.c" locStartln="48" sev="3" auth="username" locRef="3" rule="CODSTA-135" lnHash="-527707354" rule.header="Type casting from any type to or from pointers shall not be used" tool="c++test" lineHash="-527707354" unbViolId="3b2e1814-180e-3d41-ba32-1d7f9a08e34f" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3667b79d-4cb3-3815-a0df-ae44537fb13b" locEndPos="18" locType="sr" hash="-275311578" locEndLn="48" goals="0," />
    <StdViol msg="Cast from pointer type 'void *' is not allowed" ln="48" locFile="/build/../../../../../../../../timer.c" locStartln="48" sev="2" auth="username" locRef="3" rule="JSF-182" lnHash="-527707354" rule.header="Type casting from any type to or from pointers shall not be used" tool="c++test" lineHash="-527707354" unbViolId="a13103b5-4af4-329b-a230-d6fd27036d07" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3458020-a681-3f6a-8fd5-90783a3d23ea" locEndPos="18" locType="sr" hash="-275311578" locEndLn="48" goals="0," />
    <StdViol msg="Do not convert pointer to void type to an object with pointer type  'struct timer_record *'" ln="48" locFile="/build/../../../../../../../../timer.c" locStartln="48" sev="2" auth="username" locRef="3" rule="MISRA2008-5_2_8" lnHash="-527707354" rule.header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" tool="c++test" lineHash="-527707354" unbViolId="106c42e7-f5cb-31f2-a7c2-2fec86d35023" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64f046ef-c294-36bf-993c-9164f52c3f02" locEndPos="18" locType="sr" hash="-275311578" locEndLn="48" goals="0," />
    <StdViol msg="Do not convert pointer to void type to an object with pointer type  'struct timer_record *'" ln="48" locFile="/build/../../../../../../../../timer.c" locStartln="48" sev="3" auth="username" locRef="3" rule="CODSTA-65" lnHash="-527707354" rule.header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" tool="c++test" lineHash="-527707354" unbViolId="40c97242-c06e-392a-8941-663b86b87368" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="484d502d-1e28-3811-bd2e-7fa154b498a8" locEndPos="18" locType="sr" hash="-275311578" locEndLn="48" goals="0," />
    <StdViol msg="Do not convert pointer to void type to an object with pointer type  'struct timer_record *'" ln="48" locFile="/build/../../../../../../../../timer.c" locStartln="48" sev="2" auth="username" locRef="3" rule="AUTOSAR-M5_2_8-a" lnHash="-527707354" rule.header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" tool="c++test" lineHash="-527707354" unbViolId="95730575-a7d7-327f-9860-518cebb52acf" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5497080-e255-3b74-a7d0-c336b11d73c3" locEndPos="18" locType="sr" hash="-275311578" locEndLn="48" goals="0," />
    <StdViol msg="The called function 'malloc' has side-effect and is used in improper context" ln="48" locFile="/build/../../../../../../../../timer.c" locStartln="48" sev="3" auth="username" locRef="3" rule="CODSTA-103" lnHash="-527707354" rule.header="A call of function with side-effect shall only be used in the proper context" tool="c++test" lineHash="-527707354" unbViolId="d5184d03-1efb-34a2-988a-4da88e805bc4" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9cab648c-c0b6-3cdc-80b2-ab295dabf233" locEndPos="40" locType="sr" urgent="true" hash="-275311578" locEndLn="48" goals="1," />
    <StdViol msg="The called function 'malloc' has side-effect and is used in improper context" ln="48" locFile="/build/../../../../../../../../timer.c" locStartln="48" sev="2" auth="username" locRef="3" rule="JSF-204_b" lnHash="-527707354" rule.header="A call of function with side-effect shall only be used in the proper context" tool="c++test" lineHash="-527707354" unbViolId="7f29e799-6a10-3f04-9c13-dbdd07478d9f" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4aa9e073-9e6a-37d9-8892-43ddf0638a99" locEndPos="40" locType="sr" hash="-275311578" locEndLn="48" goals="0," />
    <StdViol msg="'malloc' function should not be used" ln="48" locFile="/build/../../../../../../../../timer.c" locStartln="48" sev="2" auth="username" locRef="3" rule="MISRA2012-DIR-4_12" lnHash="-527707354" rule.header="Dynamic memory allocation shall not be used" tool="c++test" lineHash="-527707354" unbViolId="fa85dc53-a81a-3d8a-8150-da2fb9682a7c" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fda8465b-9c9a-31a5-b435-e275305b0de1" locEndPos="40" locType="sr" hash="-275311578" locEndLn="48" goals="0," />
    <StdViol msg="'malloc' function should not be used" ln="48" locFile="/build/../../../../../../../../timer.c" locStartln="48" sev="2" auth="username" locRef="3" rule="MISRA2008-18_4_1" lnHash="-527707354" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-527707354" unbViolId="6c06654c-08f2-3dd6-87b7-5785c2962ff3" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3617e17-ed0e-389c-b3ca-ec9752443e01" locEndPos="40" locType="sr" hash="-275311578" locEndLn="48" goals="0," />
    <StdViol msg="'malloc' function should not be used" ln="48" locFile="/build/../../../../../../../../timer.c" locStartln="48" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_21_3-a" lnHash="-527707354" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-527707354" unbViolId="f88bed25-d4bf-303a-9faf-8a4d91915514" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6618574d-4238-398d-819b-6cdb6da25041" locEndPos="40" locType="sr" hash="-275311578" locEndLn="48" goals="0," />
    <StdViol msg="'malloc' function should not be used" ln="48" locFile="/build/../../../../../../../../timer.c" locStartln="48" sev="2" auth="username" locRef="3" rule="AUTOSAR-A18_5_2-a" lnHash="-527707354" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-527707354" unbViolId="a3d9343a-75c8-3515-b950-a608966caae8" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2fd7bae7-35b6-3d97-bfd8-ebba4d8c2467" locEndPos="40" locType="sr" hash="-275311578" locEndLn="48" goals="0," />
    <StdViol msg="'malloc' function should not be used" ln="48" locFile="/build/../../../../../../../../timer.c" locStartln="48" sev="2" auth="username" locRef="3" rule="JSF-206" lnHash="-527707354" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-527707354" unbViolId="75a5649c-3700-3cd5-8ef2-1c3afeb6bae8" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9baf01ef-bd83-35bd-a69b-a99228de604d" locEndPos="40" locType="sr" hash="-275311578" locEndLn="48" goals="0," />
    <StdViol msg="'malloc' function should not be used" ln="48" locFile="/build/../../../../../../../../timer.c" locStartln="48" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-21_3" lnHash="-527707354" rule.header="The memory allocation and deallocation functions of &lt;stdlib.h> shall not be used" tool="c++test" lineHash="-527707354" unbViolId="7dd2ae1b-58f3-3597-ac4e-046e262872c3" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38469371-bfb5-36d9-a681-30f73b93783d" locEndPos="40" locType="sr" hash="-275311578" locEndLn="48" goals="0," />
    <StdViol msg="'malloc' function should not be used" ln="48" locFile="/build/../../../../../../../../timer.c" locStartln="48" sev="3" auth="username" locRef="3" rule="MISRA2004-20_4" lnHash="-527707354" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-527707354" unbViolId="ea14b3c5-671e-3474-aa35-08e427713af9" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f60f792a-3446-3502-b209-e6e0caa45c0f" locEndPos="40" locType="sr" hash="-275311578" locEndLn="48" goals="0," />
    <StdViol msg="'malloc' function should not be used" ln="48" locFile="/build/../../../../../../../../timer.c" locStartln="48" sev="2" auth="username" locRef="3" rule="MISRAC2012-DIR_4_12-a" lnHash="-527707354" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-527707354" unbViolId="0d49ab1b-4c3f-3a3c-800a-38b77c76cea5" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c562e0c6-d387-3852-8094-4170605aa454" locEndPos="40" locType="sr" hash="-275311578" locEndLn="48" goals="0," />
    <FlowViol msg="Value returned from method &quot;malloc&quot; should be checked" ln="49" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point by which returned value should be checked" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="49" rule="BD-PB-CHECKRETGEN" FirstElSrcRngStartPos="0" lnHash="1340052799" ruleSCSCMsg="Method call" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Always check the returned value of non-void function" FirstElSrcRngStartln="48" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-695697530" lang="cpp" violId="1302387a-dec4-3535-a719-a650c2811013" locEndPos="0" locEndLn="50" goals="0," locStartln="49" sev="2" locRef="3" tool="c++test" lineHash="1340052799" unbViolId="11941978-b9f1-3efd-950d-69faa6b3efac" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType="." rngLn="46" />
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="malloc(...)" ElType=".C" rngLn="48">
          <Anns>
            <Ann msg="Method call" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="." rngLn="48" />
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType=".P" rngLn="49">
          <Anns>
            <Ann msg="Point by which returned value should be checked" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value returned from method &quot;malloc&quot; should be checked" ln="49" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point by which returned value should be checked" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="49" rule="CERT_C-ERR33-d" FirstElSrcRngStartPos="0" lnHash="1340052799" ruleSCSCMsg="Method call" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Always check the returned value of non-void function" FirstElSrcRngStartln="48" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1167043350" lang="cpp" violId="20a365b7-a775-390c-b1c2-4fb6a15e21fd" locEndPos="0" locEndLn="50" goals="0," locStartln="49" sev="1" locRef="3" tool="c++test" lineHash="1340052799" unbViolId="7c7d5c8d-6c1b-306c-9250-5a95beed243f" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType="." rngLn="46" />
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="malloc(...)" ElType=".C" rngLn="48">
          <Anns>
            <Ann msg="Method call" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="." rngLn="48" />
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType=".P" rngLn="49">
          <Anns>
            <Ann msg="Point by which returned value should be checked" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value returned from method &quot;malloc&quot; should be checked" ln="49" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point by which returned value should be checked" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="49" rule="MISRA2012-DIR-4_7_b" FirstElSrcRngStartPos="0" lnHash="1340052799" ruleSCSCMsg="Method call" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Always check the returned value of non-void function" FirstElSrcRngStartln="48" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1091872986" lang="cpp" violId="f1835bab-bf3e-3661-acbc-94d6ea6674ed" locEndPos="0" locEndLn="50" goals="0," locStartln="49" sev="2" locRef="3" tool="c++test" lineHash="1340052799" unbViolId="41c078ce-2039-3459-8282-3d8ac5ea3372" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType="." rngLn="46" />
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="malloc(...)" ElType=".C" rngLn="48">
          <Anns>
            <Ann msg="Method call" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="." rngLn="48" />
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType=".P" rngLn="49">
          <Anns>
            <Ann msg="Point by which returned value should be checked" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value returned from method &quot;malloc&quot; should be checked" ln="49" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point by which returned value should be checked" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="49" rule="MISRAC2012-DIR_4_7-b" FirstElSrcRngStartPos="0" lnHash="1340052799" ruleSCSCMsg="Method call" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Always check the returned value of non-void function" FirstElSrcRngStartln="48" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1660867681" lang="cpp" violId="dab0d4da-8e76-3055-8c59-2726e532c431" locEndPos="0" locEndLn="50" goals="0," locStartln="49" sev="2" locRef="3" tool="c++test" lineHash="1340052799" unbViolId="4968674d-7401-3040-bb46-86c23e109375" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType="." rngLn="46" />
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="malloc(...)" ElType=".C" rngLn="48">
          <Anns>
            <Ann msg="Method call" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="." rngLn="48" />
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType=".P" rngLn="49">
          <Anns>
            <Ann msg="Point by which returned value should be checked" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;the_record&quot; may possibly be null" ln="49" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="49" rule="AUTOSAR-A5_3_2-a" FirstElSrcRngStartPos="0" lnHash="1340052799" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="48" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="79304501" lang="cpp" violId="82f0b7d5-3434-3223-a2d3-59ba7aa8376c" locEndPos="0" locEndLn="50" goals="0," locStartln="49" sev="2" locRef="3" tool="c++test" lineHash="1340052799" unbViolId="05f6fb3a-83ed-3ce2-a635-ecda4a70612f" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType="." rngLn="46" />
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="malloc(...)" ElType=".C" rngLn="48">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: malloc(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="!" rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: malloc(...) -> the_record" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType=".P" rngLn="49">
          <Anns>
            <Ann msg="Null value carrier: the_record" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;the_record&quot; may possibly be null" ln="49" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="49" rule="AUTOSAR-M0_3_1-f" FirstElSrcRngStartPos="0" lnHash="1340052799" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="48" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1388905608" lang="cpp" violId="730954dc-a18a-3213-9f22-271d4eb81623" locEndPos="0" locEndLn="50" goals="0," locStartln="49" sev="2" locRef="3" tool="c++test" lineHash="1340052799" unbViolId="c406a2ab-0843-3075-aca4-3860ba8bd308" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType="." rngLn="46" />
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="malloc(...)" ElType=".C" rngLn="48">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: malloc(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="!" rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: malloc(...) -> the_record" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType=".P" rngLn="49">
          <Anns>
            <Ann msg="Null value carrier: the_record" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;the_record&quot; may possibly be null" ln="49" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="49" rule="BD-PB-NP" FirstElSrcRngStartPos="0" lnHash="1340052799" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="48" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1241598880" lang="cpp" violId="ccf58b5b-f3bb-3d8b-b69a-46dd18d88ec9" locEndPos="0" locEndLn="50" goals="0," locStartln="49" sev="1" locRef="3" tool="c++test" lineHash="1340052799" unbViolId="489b44f8-e327-331a-8380-28d3acc5a815" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType="." rngLn="46" />
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="malloc(...)" ElType=".C" rngLn="48">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: malloc(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="!" rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: malloc(...) -> the_record" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType=".P" rngLn="49">
          <Anns>
            <Ann msg="Null value carrier: the_record" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;the_record&quot; may possibly be null" ln="49" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="49" rule="CERT_C-ERR33-c" FirstElSrcRngStartPos="0" lnHash="1340052799" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="48" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="774357636" lang="cpp" violId="7ff1bf7e-5a25-3988-a786-d90aa7ca0ab1" locEndPos="0" locEndLn="50" goals="0," locStartln="49" sev="1" locRef="3" tool="c++test" lineHash="1340052799" unbViolId="31eff245-7abc-38cb-8c3e-8397023b2b10" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType="." rngLn="46" />
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="malloc(...)" ElType=".C" rngLn="48">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: malloc(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="!" rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: malloc(...) -> the_record" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType=".P" rngLn="49">
          <Anns>
            <Ann msg="Null value carrier: the_record" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;the_record&quot; may possibly be null" ln="49" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="49" rule="CERT_C-EXP34-a" FirstElSrcRngStartPos="0" lnHash="1340052799" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="48" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="541125151" lang="cpp" violId="87b20c28-ac15-3c35-95be-c7437480113d" locEndPos="0" locEndLn="50" goals="0," locStartln="49" sev="1" locRef="3" tool="c++test" lineHash="1340052799" unbViolId="b6a7f2e4-8459-30d7-aa4a-03e352fef5ee" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType="." rngLn="46" />
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="malloc(...)" ElType=".C" rngLn="48">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: malloc(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="!" rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: malloc(...) -> the_record" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType=".P" rngLn="49">
          <Anns>
            <Ann msg="Null value carrier: the_record" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;the_record&quot; may possibly be null" ln="49" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="49" rule="CERT_C-MSC19-b" FirstElSrcRngStartPos="0" lnHash="1340052799" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="48" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-2043526297" lang="cpp" violId="2f460a94-b7f2-36cd-a0ac-8de48ddd3154" locEndPos="0" locEndLn="50" goals="0," locStartln="49" sev="3" locRef="3" tool="c++test" lineHash="1340052799" unbViolId="963d63bc-4808-3155-b50c-c2889f6f9c91" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType="." rngLn="46" />
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="malloc(...)" ElType=".C" rngLn="48">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: malloc(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="!" rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: malloc(...) -> the_record" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType=".P" rngLn="49">
          <Anns>
            <Ann msg="Null value carrier: the_record" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;the_record&quot; may possibly be null" ln="49" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="49" rule="CERT_C-POS54-c" FirstElSrcRngStartPos="0" lnHash="1340052799" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="48" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-268646250" lang="cpp" violId="d518f93c-c2e9-3359-9d2d-772eacf0c7c3" locEndPos="0" locEndLn="50" goals="0," locStartln="49" sev="1" locRef="3" tool="c++test" lineHash="1340052799" unbViolId="21ac66bb-b57e-305e-b52b-4a9c2f237c66" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType="." rngLn="46" />
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="malloc(...)" ElType=".C" rngLn="48">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: malloc(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="!" rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: malloc(...) -> the_record" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType=".P" rngLn="49">
          <Anns>
            <Ann msg="Null value carrier: the_record" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;the_record&quot; may possibly be null" ln="49" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="49" rule="CERT_CPP-STR51-a" FirstElSrcRngStartPos="0" lnHash="1340052799" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="48" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="891290254" lang="cpp" violId="56639eb1-144d-32e9-a6f9-4b8b3b9c7e16" locEndPos="0" locEndLn="50" goals="0," locStartln="49" sev="1" locRef="3" tool="c++test" lineHash="1340052799" unbViolId="49df8e00-54ce-3c31-8208-4ab8fae66109" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType="." rngLn="46" />
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="malloc(...)" ElType=".C" rngLn="48">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: malloc(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="!" rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: malloc(...) -> the_record" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType=".P" rngLn="49">
          <Anns>
            <Ann msg="Null value carrier: the_record" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;the_record&quot; may possibly be null" ln="49" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="49" rule="CWE-476-a" FirstElSrcRngStartPos="0" lnHash="1340052799" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="48" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1044785863" lang="cpp" violId="66d3c29d-cc1d-3dfc-96b0-dcccba466e23" locEndPos="0" locEndLn="50" goals="0," locStartln="49" sev="1" locRef="3" tool="c++test" lineHash="1340052799" unbViolId="d6568387-a0e4-3d02-9a3d-4a13aac042ab" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType="." rngLn="46" />
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="malloc(...)" ElType=".C" rngLn="48">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: malloc(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="!" rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: malloc(...) -> the_record" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType=".P" rngLn="49">
          <Anns>
            <Ann msg="Null value carrier: the_record" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;the_record&quot; may possibly be null" ln="49" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="49" rule="HICPP-5_2_1-c" FirstElSrcRngStartPos="0" lnHash="1340052799" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="48" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1451296681" lang="cpp" violId="4b755b21-951b-3ddb-9601-ae4879bbc93d" locEndPos="0" locEndLn="50" goals="0," locStartln="49" sev="1" locRef="3" tool="c++test" lineHash="1340052799" unbViolId="2372ee39-2ab0-32ad-b483-2522e7bbbd8f" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType="." rngLn="46" />
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="malloc(...)" ElType=".C" rngLn="48">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: malloc(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="!" rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: malloc(...) -> the_record" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType=".P" rngLn="49">
          <Anns>
            <Ann msg="Null value carrier: the_record" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;the_record&quot; may possibly be null" ln="49" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="49" rule="MISRA2008-0_3_1_b" FirstElSrcRngStartPos="0" lnHash="1340052799" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="48" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2010065162" lang="cpp" violId="4f70ba08-b44f-3c83-bf07-ac344b41d134" locEndPos="0" locEndLn="50" goals="0," locStartln="49" sev="5" locRef="3" tool="c++test" lineHash="1340052799" unbViolId="4b415fb8-38b3-3039-b757-186605014ec3" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType="." rngLn="46" />
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="malloc(...)" ElType=".C" rngLn="48">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: malloc(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="!" rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: malloc(...) -> the_record" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType=".P" rngLn="49">
          <Anns>
            <Ann msg="Null value carrier: the_record" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;the_record&quot; may possibly be null" ln="49" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="49" rule="MISRA2012-DIR-4_1_b" FirstElSrcRngStartPos="0" lnHash="1340052799" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="48" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-717020877" lang="cpp" violId="959e2801-8c56-3208-9cc3-03c5f4710c75" locEndPos="0" locEndLn="50" goals="0," locStartln="49" sev="2" locRef="3" tool="c++test" lineHash="1340052799" unbViolId="abd2aca0-b9a6-3612-ac0c-42f931e9238e" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType="." rngLn="46" />
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="malloc(...)" ElType=".C" rngLn="48">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: malloc(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="!" rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: malloc(...) -> the_record" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType=".P" rngLn="49">
          <Anns>
            <Ann msg="Null value carrier: the_record" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;the_record&quot; may possibly be null" ln="49" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="49" rule="MISRAC2012-DIR_4_1-b" FirstElSrcRngStartPos="0" lnHash="1340052799" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="48" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-156666742" lang="cpp" violId="56cdc835-3060-36dc-a46b-d0640746bd1e" locEndPos="0" locEndLn="50" goals="0," locStartln="49" sev="2" locRef="3" tool="c++test" lineHash="1340052799" unbViolId="0aeed32f-d544-3e04-9e99-703863580151" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType="." rngLn="46" />
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="malloc(...)" ElType=".C" rngLn="48">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: malloc(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="!" rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: malloc(...) -> the_record" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType=".P" rngLn="49">
          <Anns>
            <Ann msg="Null value carrier: the_record" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Unused function's &quot;memset&quot; return value" ln="49" locFile="/build/../../../../../../../../timer.c" locStartln="49" sev="3" auth="username" locRef="3" rule="CODSTA-122_a" lnHash="1340052799" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1340052799" unbViolId="b130100a-f81f-3733-bee1-8d63da3d9c63" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7005b687-78a9-3f74-9f8f-2daeab26df94" locEndPos="5" locType="sr" hash="-275311578" locEndLn="49" goals="0," />
    <StdViol msg="Unused function's &quot;memset&quot; return value" ln="49" locFile="/build/../../../../../../../../timer.c" locStartln="49" sev="1" auth="username" locRef="3" rule="CERT_C-ERR33-a" lnHash="1340052799" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1340052799" unbViolId="3f504d40-83e0-31e8-be44-36ea0d365014" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40ae8037-b1fd-3d65-9643-f16e392d8e36" locEndPos="5" locType="sr" hash="-275311578" locEndLn="49" goals="0," />
    <StdViol msg="Unused function's &quot;memset&quot; return value" ln="49" locFile="/build/../../../../../../../../timer.c" locStartln="49" sev="1" auth="username" locRef="3" rule="CERT_C-POS54-a" lnHash="1340052799" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1340052799" unbViolId="004185b1-ce63-3dec-b39b-4a3c64d09770" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f214e2c8-9928-3fff-91a9-af9493b18428" locEndPos="5" locType="sr" hash="-275311578" locEndLn="49" goals="0," />
    <StdViol msg="Unused function's &quot;memset&quot; return value" ln="49" locFile="/build/../../../../../../../../timer.c" locStartln="49" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="1340052799" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1340052799" unbViolId="d468004f-ce8f-3c00-bbc3-f5d60af84deb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="437f774a-4960-3e91-8434-a1b02f9868c1" locEndPos="5" locType="sr" hash="-275311578" locEndLn="49" goals="0," />
    <StdViol msg="Unused function's &quot;memset&quot; return value" ln="49" locFile="/build/../../../../../../../../timer.c" locStartln="49" sev="3" auth="username" locRef="3" rule="CERT_C-EXP12-a" lnHash="1340052799" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1340052799" unbViolId="c20d6f2e-c9ba-3a3e-b622-0bba3d138c0f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a49594f-1a62-3334-8835-ec5e7f5a9aa5" locEndPos="5" locType="sr" hash="-275311578" locEndLn="49" goals="0," />
    <StdViol msg="Unused function's &quot;memset&quot; return value" ln="49" locFile="/build/../../../../../../../../timer.c" locStartln="49" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="1340052799" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1340052799" unbViolId="46666e15-4c1d-3012-9143-019301855301" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="106a9400-9a42-3a28-8592-8adf994cb191" locEndPos="5" locType="sr" hash="-275311578" locEndLn="49" goals="0," />
    <StdViol msg="The type 'timer_record*' of function argument number '1' does not match declared type 'void*'" ln="49" locFile="/build/../../../../../../../../timer.c" locStartln="49" sev="3" auth="username" locRef="3" rule="PB-11" lnHash="1340052799" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="1340052799" unbViolId="adea4687-1b0d-32cc-89bd-2124e04d8466" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51688418-420f-310f-a44d-12c6250436dd" locEndPos="5" locType="sr" hash="-275311578" locEndLn="49" goals="0," />
    <StdViol msg="Use // comments only" ln="51" locFile="/build/../../../../../../../../timer.c" locStartln="51" sev="3" auth="username" locRef="3" rule="HICPP-2_3_1-a" lnHash="863920891" rule.header="Prefer C++ style comment" tool="c++test" lineHash="863920891" unbViolId="705dddf5-de58-3808-a5f6-2ef6336d8d3a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e07402bc-2e73-359d-a81d-c3ded64e4850" locEndPos="5" locType="sr" hash="-275311578" locEndLn="51" goals="0," />
    <StdViol msg="Use // comments only" ln="51" locFile="/build/../../../../../../../../timer.c" locStartln="51" sev="2" auth="username" locRef="3" rule="JSF-126" lnHash="863920891" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="863920891" unbViolId="c036353b-ec71-342b-83f1-1fae0e705eb0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="44f294cd-9bc5-342a-9a03-a70b3c7f18d9" locEndPos="5" locType="sr" hash="-275311578" locEndLn="51" goals="0," />
    <StdViol msg="Use // comments only" ln="51" locFile="/build/../../../../../../../../timer.c" locStartln="51" sev="3" auth="username" locRef="3" rule="COMMENT-01" lnHash="863920891" rule.header="Prefer C++ style comment" tool="c++test" lineHash="863920891" unbViolId="df02222c-bcb1-316a-ae3f-6263f48f1613" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c01e8f38-008c-3377-ad27-cc48b097beaf" locEndPos="5" locType="sr" hash="-275311578" locEndLn="51" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="52" locFile="/build/../../../../../../../../timer.c" locStartln="52" sev="3" auth="username" locRef="3" rule="CODSTA-122_a" lnHash="-337297020" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-337297020" unbViolId="a6b8a21c-0f0e-371a-aedf-d35372ed52a2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0e06272-cf57-306a-bd0f-2753a95c0605" locEndPos="5" locType="sr" hash="-275311578" locEndLn="52" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="52" locFile="/build/../../../../../../../../timer.c" locStartln="52" sev="1" auth="username" locRef="3" rule="CERT_C-ERR33-a" lnHash="-337297020" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-337297020" unbViolId="a205b8f0-448c-30d0-a347-9885d6052b75" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef0d9798-8981-3514-8d33-de3ef4fb4d51" locEndPos="5" locType="sr" hash="-275311578" locEndLn="52" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="52" locFile="/build/../../../../../../../../timer.c" locStartln="52" sev="1" auth="username" locRef="3" rule="CERT_C-POS54-a" lnHash="-337297020" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-337297020" unbViolId="3a6d507f-6a0a-31bb-b218-7500a4ca4453" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e935eed0-b031-3bff-963d-3655f89ce248" locEndPos="5" locType="sr" hash="-275311578" locEndLn="52" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="52" locFile="/build/../../../../../../../../timer.c" locStartln="52" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-337297020" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-337297020" unbViolId="5457aaf6-8646-3c18-95f5-08e62f9f3646" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="219cd93d-87d7-3807-9766-441cd9c9f58c" locEndPos="5" locType="sr" hash="-275311578" locEndLn="52" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="52" locFile="/build/../../../../../../../../timer.c" locStartln="52" sev="3" auth="username" locRef="3" rule="CERT_C-EXP12-a" lnHash="-337297020" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-337297020" unbViolId="b2d236a8-34ca-3ecb-a5bc-5be85a7ebac4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d13293af-5b2c-3b72-ac04-ea508617c751" locEndPos="5" locType="sr" hash="-275311578" locEndLn="52" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="52" locFile="/build/../../../../../../../../timer.c" locStartln="52" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="-337297020" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-337297020" unbViolId="6e697fbd-30d3-31b8-b586-de80c87d9280" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94c67755-ea2e-3de0-bcbe-f20b73dd70f8" locEndPos="5" locType="sr" hash="-275311578" locEndLn="52" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="52" locFile="/build/../../../../../../../../timer.c" locStartln="52" sev="3" auth="username" locRef="3" rule="MISRA2004-16_10" lnHash="-337297020" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-337297020" unbViolId="8eb57c66-9666-3771-848a-8d85603d6029" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1815a8d1-6029-3300-a78d-7277749a8d95" locEndPos="5" locType="sr" hash="-275311578" locEndLn="52" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="52" locFile="/build/../../../../../../../../timer.c" locStartln="52" sev="2" auth="username" locRef="3" rule="AUTOSAR-M0_3_2-a" lnHash="-337297020" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-337297020" unbViolId="e1cc87d0-2fda-3db1-834f-7943aa5ec1b2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95df0b4d-2137-3bc6-9d56-483ab545efc8" locEndPos="5" locType="sr" hash="-275311578" locEndLn="52" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="52" locFile="/build/../../../../../../../../timer.c" locStartln="52" sev="2" auth="username" locRef="3" rule="MISRA2008-0_3_2" lnHash="-337297020" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-337297020" unbViolId="8ac8ecc5-35d7-331a-9b5e-a5d63a65f21d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6bfae184-df31-3f94-bd9e-fd64a905b24f" locEndPos="5" locType="sr" hash="-275311578" locEndLn="52" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="52" locFile="/build/../../../../../../../../timer.c" locStartln="52" sev="3" auth="username" locRef="3" rule="JSF-115" lnHash="-337297020" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-337297020" unbViolId="1c2d297f-5942-3a87-a42b-ba5045e482f0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c781c67c-1696-34a7-9f50-53c9e5986c63" locEndPos="5" locType="sr" hash="-275311578" locEndLn="52" goals="0," />
    <DupViol msg="Duplicated code: 'print_string(&quot;Please enter the start hour [0-23] > &quot;);    tm...'" ln="52" locFile="/build/../../../../../../../../timer.c" locStartln="52" sev="3" auth="username" locRef="3" rule="CDD-DUPC" lnHash="-337297020" rule.header="Avoid code duplication" tool="c++test" lineHash="-337297020" unbViolId="7592e36f-7fb0-3aa7-b085-1b351c714520" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="151c683c-0edf-3219-8a4c-1cb8ddda2f1b" locEndPos="39" locType="sr" urgent="true" hash="-275311578" locEndLn="55" goals="1,">
      <ElDescList>
        <ElDesc lineHash="-337297020" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="52" srcRngStartPos="4" srcRngEndPos="39" srcRngStartln="52" srcRngEndLn="55" desc="[Line 52] Duplicated code in file 'timer.c'" rngLn="52" />
        <ElDesc lineHash="17156239" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="60" srcRngStartPos="4" srcRngEndPos="39" srcRngStartln="60" srcRngEndLn="63" desc="[Line 60] Duplicated code in file 'timer.c'" rngLn="60" />
      </ElDescList>
    </DupViol>
    <StdViol msg="The string literal is embedded directly in the code: Please enter the start hour [0-23] > " ln="52" locFile="/build/../../../../../../../../timer.c" locStartln="52" sev="5" auth="username" locRef="3" rule="CWE-798-a" lnHash="-337297020" rule.header="Do not hard code string literals" tool="c++test" lineHash="-337297020" unbViolId="6e338c32-e806-3924-a9d7-7dd66ef8f4e4" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7073ed5b-8a75-3fd6-96e5-9c3a8507f105" locEndPos="18" locType="sr" hash="-275311578" locEndLn="52" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Please enter the start hour [0-23] > " ln="52" locFile="/build/../../../../../../../../timer.c" locStartln="52" sev="5" auth="username" locRef="3" rule="CODSTA-203" lnHash="-337297020" rule.header="Do not hard code string literals" tool="c++test" lineHash="-337297020" unbViolId="0e605d96-a734-3805-9cdb-076c1e598795" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc7cd6ad-ecf5-3e64-87d5-58699fa7dd81" locEndPos="18" locType="sr" hash="-275311578" locEndLn="52" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Please enter the start hour [0-23] > " ln="52" locFile="/build/../../../../../../../../timer.c" locStartln="52" sev="1" auth="username" locRef="3" rule="APSC_DV-003110-a" lnHash="-337297020" rule.header="Do not hard code string literals" tool="c++test" lineHash="-337297020" unbViolId="e8188960-86fc-3044-b790-fb8bd9d2a553" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52a8ae32-0d27-3bc0-942e-04edb5276be2" locEndPos="18" locType="sr" hash="-275311578" locEndLn="52" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Please enter the start hour [0-23] > " ln="52" locFile="/build/../../../../../../../../timer.c" locStartln="52" sev="1" auth="username" locRef="3" rule="CERT_C-MSC41-a" lnHash="-337297020" rule.header="Do not hard code string literals" tool="c++test" lineHash="-337297020" unbViolId="f2c02eb4-7e7b-382c-ba91-f391f1cd23cc" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a89ed38-91f4-3b91-9cbb-363610d0092f" locEndPos="18" locType="sr" hash="-275311578" locEndLn="52" goals="0," />
    <StdViol msg="String literal &quot;Please enter the start hour [0-23] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="52" locFile="/build/../../../../../../../../timer.c" locStartln="52" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_7_4-a" lnHash="-337297020" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-337297020" unbViolId="32bf5b54-47e1-3e92-90f3-10b7055aaa6f" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f6a4d351-276d-3a52-8f9b-5c1c6c03244d" locEndPos="18" locType="sr" hash="-275311578" locEndLn="52" goals="0," />
    <StdViol msg="String literal &quot;Please enter the start hour [0-23] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="52" locFile="/build/../../../../../../../../timer.c" locStartln="52" sev="2" auth="username" locRef="3" rule="AUTOSAR-A2_13_4-a" lnHash="-337297020" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-337297020" unbViolId="40c64eca-460b-37f4-a08d-91c54afa3a09" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1d394f4-a17d-332f-956b-7853b2d2e896" locEndPos="18" locType="sr" hash="-275311578" locEndLn="52" goals="0," />
    <StdViol msg="String literal &quot;Please enter the start hour [0-23] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="52" locFile="/build/../../../../../../../../timer.c" locStartln="52" sev="2" auth="username" locRef="3" rule="JSF-151.1" lnHash="-337297020" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-337297020" unbViolId="281cafe6-3b03-39ff-b026-d4a885c11f10" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e04d188-475a-3896-9677-3e7bfb28b717" locEndPos="18" locType="sr" hash="-275311578" locEndLn="52" goals="0," />
    <StdViol msg="String literal &quot;Please enter the start hour [0-23] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="52" locFile="/build/../../../../../../../../timer.c" locStartln="52" sev="2" auth="username" locRef="3" rule="PB-27" lnHash="-337297020" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-337297020" unbViolId="50a2388e-22fa-36c1-8b18-c7a455b02217" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e50277f5-ef09-394b-9f64-e32a900f4c74" locEndPos="18" locType="sr" hash="-275311578" locEndLn="52" goals="0," />
    <StdViol msg="String literal &quot;Please enter the start hour [0-23] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="52" locFile="/build/../../../../../../../../timer.c" locStartln="52" sev="3" auth="username" locRef="3" rule="CERT_C-STR05-a" lnHash="-337297020" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-337297020" unbViolId="73091ca9-f18f-3e0a-8168-c39d23df2c17" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bad8bbbb-309e-3905-8f0c-1d11608f9cc2" locEndPos="18" locType="sr" hash="-275311578" locEndLn="52" goals="0," />
    <StdViol msg="String literal &quot;Please enter the start hour [0-23] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="52" locFile="/build/../../../../../../../../timer.c" locStartln="52" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-7_4" lnHash="-337297020" rule.header="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" tool="c++test" lineHash="-337297020" unbViolId="578f54fc-2626-3f42-828a-366d227a5035" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91701671-1bfe-3dce-a959-23d24d202320" locEndPos="18" locType="sr" hash="-275311578" locEndLn="52" goals="0," />
    <StdViol msg="String literal &quot;Please enter the start hour [0-23] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="52" locFile="/build/../../../../../../../../timer.c" locStartln="52" sev="2" auth="username" locRef="3" rule="CERT_C-STR30-a" lnHash="-337297020" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-337297020" unbViolId="bb9af53a-50db-3c17-a3de-3ecc386288be" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="311b9686-0a61-3952-950f-26ed40b0490b" locEndPos="18" locType="sr" hash="-275311578" locEndLn="52" goals="0," />
    <StdViol msg="The NULL pointer shall not be dereferenced: 'tm_tmp' may be null" ln="53" locFile="/build/../../../../../../../../timer.c" locStartln="53" sev="2" auth="username" locRef="3" rule="JSF-174_b" lnHash="1051372518" rule.header="The null pointer shall not be de-referenced" tool="c++test" lineHash="1051372518" unbViolId="389c8494-5fa4-392a-87d4-66b6ed3f43dd" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d553c625-b84d-36a1-9786-5e0df7b156a5" locEndPos="5" locType="sr" hash="-275311578" locEndLn="53" goals="0," />
    <StdViol msg="The NULL pointer shall not be dereferenced: 'tm_tmp' may be null" ln="53" locFile="/build/../../../../../../../../timer.c" locStartln="53" sev="3" auth="username" locRef="3" rule="MISRA-107_b" lnHash="1051372518" rule.header="The NULL pointer shall not be dereferenced" tool="c++test" lineHash="1051372518" unbViolId="441f654c-e95f-34a5-b286-9f1572fa4824" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2701659c-ade8-3088-af28-9a1b07d99245" locEndPos="5" locType="sr" hash="-275311578" locEndLn="53" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="53" locFile="/build/../../../../../../../../timer.c" locStartln="53" sev="3" auth="username" locRef="3" rule="CERT_C-EXP37-d" lnHash="1051372518" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="1051372518" unbViolId="c53c3cf1-c922-3536-8d1f-e1b83a436f12" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c071de97-bfb3-39ce-82cd-9577d4108e7d" locEndPos="23" locType="sr" hash="-275311578" locEndLn="53" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="53" locFile="/build/../../../../../../../../timer.c" locStartln="53" sev="1" auth="username" locRef="3" rule="MISRA2012-RULE-17_3" lnHash="1051372518" rule.header="A function shall not be declared implicitly" tool="c++test" lineHash="1051372518" unbViolId="a32119ea-9860-3f3d-976f-325c3c8d9b44" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a630a951-ac8c-3b32-8cb6-9de8a469e957" locEndPos="23" locType="sr" hash="-275311578" locEndLn="53" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="53" locFile="/build/../../../../../../../../timer.c" locStartln="53" sev="3" auth="username" locRef="3" rule="MISRA2004-8_1_b" lnHash="1051372518" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="1051372518" unbViolId="6c89420b-aba9-3af0-80aa-586328a1e11a" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ef5599b-6389-32ba-b5f0-c825a76bc2f3" locEndPos="23" locType="sr" hash="-275311578" locEndLn="53" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="53" locFile="/build/../../../../../../../../timer.c" locStartln="53" sev="3" auth="username" locRef="3" rule="MISRA-071_b" lnHash="1051372518" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="1051372518" unbViolId="d276132f-ca80-3f0a-863b-8af3dee10dbe" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="20fcac17-0324-3aab-bdcb-4ed0d822b566" locEndPos="23" locType="sr" hash="-275311578" locEndLn="53" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="53" locFile="/build/../../../../../../../../timer.c" locStartln="53" sev="1" auth="username" locRef="3" rule="MISRAC2012-RULE_17_3-a" lnHash="1051372518" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="1051372518" unbViolId="3578c416-f311-36f6-b51b-61ae7f397a73" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ceef502-64e0-3e8d-9ad2-86ca8fc0c3ac" locEndPos="23" locType="sr" hash="-275311578" locEndLn="53" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="54" locFile="/build/../../../../../../../../timer.c" locStartln="54" sev="3" auth="username" locRef="3" rule="CODSTA-122_a" lnHash="-1456902895" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1456902895" unbViolId="7791039c-23c9-3d48-84bf-504c208ef00d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f2837ce8-331e-3416-aac3-25c65ea90a5a" locEndPos="5" locType="sr" hash="-275311578" locEndLn="54" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="54" locFile="/build/../../../../../../../../timer.c" locStartln="54" sev="1" auth="username" locRef="3" rule="CERT_C-ERR33-a" lnHash="-1456902895" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1456902895" unbViolId="97b78d04-692b-3b29-a235-615125b137ee" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f31e6baf-4ae3-3727-8ef1-5b7a5e970e95" locEndPos="5" locType="sr" hash="-275311578" locEndLn="54" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="54" locFile="/build/../../../../../../../../timer.c" locStartln="54" sev="1" auth="username" locRef="3" rule="CERT_C-POS54-a" lnHash="-1456902895" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1456902895" unbViolId="c70dbdf0-24fa-3fc6-a996-bdb793a34ff2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="29e7277c-80b5-3240-bc50-054f286a4682" locEndPos="5" locType="sr" hash="-275311578" locEndLn="54" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="54" locFile="/build/../../../../../../../../timer.c" locStartln="54" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-1456902895" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1456902895" unbViolId="053a9e47-43b3-32a5-bbe8-8225833b627a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="551b1254-da3c-3ae1-ae57-e8e2f22071b9" locEndPos="5" locType="sr" hash="-275311578" locEndLn="54" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="54" locFile="/build/../../../../../../../../timer.c" locStartln="54" sev="3" auth="username" locRef="3" rule="CERT_C-EXP12-a" lnHash="-1456902895" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1456902895" unbViolId="af92ab61-d96a-3a7e-955e-8b4f0d682154" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ecf231f8-1187-3396-9439-cc897fe5bf4d" locEndPos="5" locType="sr" hash="-275311578" locEndLn="54" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="54" locFile="/build/../../../../../../../../timer.c" locStartln="54" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="-1456902895" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1456902895" unbViolId="376cdb6e-4965-3830-9ae0-b1568b781087" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b630d725-5f6e-3f0f-9f38-f468154fe677" locEndPos="5" locType="sr" hash="-275311578" locEndLn="54" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="54" locFile="/build/../../../../../../../../timer.c" locStartln="54" sev="3" auth="username" locRef="3" rule="MISRA2004-16_10" lnHash="-1456902895" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1456902895" unbViolId="a3334eae-5315-3f60-bd5c-6d5da06257d1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06144d43-a63d-33f8-8ce4-e9c20b439d07" locEndPos="5" locType="sr" hash="-275311578" locEndLn="54" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="54" locFile="/build/../../../../../../../../timer.c" locStartln="54" sev="2" auth="username" locRef="3" rule="AUTOSAR-M0_3_2-a" lnHash="-1456902895" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1456902895" unbViolId="756045f7-92b3-3a49-87de-ce34a3d48319" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16d5589c-f732-33aa-932c-05fb723c214f" locEndPos="5" locType="sr" hash="-275311578" locEndLn="54" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="54" locFile="/build/../../../../../../../../timer.c" locStartln="54" sev="2" auth="username" locRef="3" rule="MISRA2008-0_3_2" lnHash="-1456902895" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1456902895" unbViolId="f62a5193-cab8-3a43-9850-0b612f5cde3f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f287bcc-0a25-3d8a-b403-a77e4c8c0302" locEndPos="5" locType="sr" hash="-275311578" locEndLn="54" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="54" locFile="/build/../../../../../../../../timer.c" locStartln="54" sev="3" auth="username" locRef="3" rule="JSF-115" lnHash="-1456902895" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-1456902895" unbViolId="e6e9db8f-650a-37b9-a6d8-155e72d23dda" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3d3f1bb-2e24-3e8a-955c-c304fc3ddfb4" locEndPos="5" locType="sr" hash="-275311578" locEndLn="54" goals="0," />
    <StdViol msg="String literal &quot;Please enter the start minute [0-59] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="54" locFile="/build/../../../../../../../../timer.c" locStartln="54" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_7_4-a" lnHash="-1456902895" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1456902895" unbViolId="204d2bc5-a8af-38f0-845c-f8456c9da06f" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cde8aa01-2c27-3195-81b4-af4ec8a7e37e" locEndPos="18" locType="sr" hash="-275311578" locEndLn="54" goals="0," />
    <StdViol msg="String literal &quot;Please enter the start minute [0-59] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="54" locFile="/build/../../../../../../../../timer.c" locStartln="54" sev="2" auth="username" locRef="3" rule="AUTOSAR-A2_13_4-a" lnHash="-1456902895" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1456902895" unbViolId="a181c0e8-6ae4-3ec3-8bc2-f4a648856794" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07e8e788-c4d5-36e5-9606-ecee44563d29" locEndPos="18" locType="sr" hash="-275311578" locEndLn="54" goals="0," />
    <StdViol msg="String literal &quot;Please enter the start minute [0-59] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="54" locFile="/build/../../../../../../../../timer.c" locStartln="54" sev="2" auth="username" locRef="3" rule="JSF-151.1" lnHash="-1456902895" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1456902895" unbViolId="b425d393-8772-3584-8417-07af6b1a8a6e" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff2df40f-7925-3fe3-97cd-275647ea930b" locEndPos="18" locType="sr" hash="-275311578" locEndLn="54" goals="0," />
    <StdViol msg="String literal &quot;Please enter the start minute [0-59] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="54" locFile="/build/../../../../../../../../timer.c" locStartln="54" sev="2" auth="username" locRef="3" rule="PB-27" lnHash="-1456902895" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1456902895" unbViolId="ffbdd433-e2a9-3e8e-9ee6-26f642582c39" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9efd3b99-05d8-398c-bc0b-d1469fec5fa2" locEndPos="18" locType="sr" hash="-275311578" locEndLn="54" goals="0," />
    <StdViol msg="String literal &quot;Please enter the start minute [0-59] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="54" locFile="/build/../../../../../../../../timer.c" locStartln="54" sev="3" auth="username" locRef="3" rule="CERT_C-STR05-a" lnHash="-1456902895" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1456902895" unbViolId="31ab4d9f-e2d1-3f5e-bacb-a1f1b6b2f2c4" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="801c368f-e81c-3a23-868e-1cac888f4ccf" locEndPos="18" locType="sr" hash="-275311578" locEndLn="54" goals="0," />
    <StdViol msg="String literal &quot;Please enter the start minute [0-59] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="54" locFile="/build/../../../../../../../../timer.c" locStartln="54" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-7_4" lnHash="-1456902895" rule.header="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" tool="c++test" lineHash="-1456902895" unbViolId="e896ab3b-e52f-3bcb-8ed9-c7d9ea49684c" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74f121c1-e620-390f-a3d9-92e00eb4ba7b" locEndPos="18" locType="sr" hash="-275311578" locEndLn="54" goals="0," />
    <StdViol msg="String literal &quot;Please enter the start minute [0-59] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="54" locFile="/build/../../../../../../../../timer.c" locStartln="54" sev="2" auth="username" locRef="3" rule="CERT_C-STR30-a" lnHash="-1456902895" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1456902895" unbViolId="0c7c9696-6646-3fed-bbeb-72c306dad55f" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6635573a-0dd1-35a0-afa4-a901111079bf" locEndPos="18" locType="sr" hash="-275311578" locEndLn="54" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Please enter the start minute [0-59] > " ln="54" locFile="/build/../../../../../../../../timer.c" locStartln="54" sev="5" auth="username" locRef="3" rule="CWE-798-a" lnHash="-1456902895" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1456902895" unbViolId="fa9c0a5a-3020-3d73-a934-1ca66bd32c1c" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a84aae2-a3c5-3e59-a558-fa0d25b20f90" locEndPos="18" locType="sr" hash="-275311578" locEndLn="54" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Please enter the start minute [0-59] > " ln="54" locFile="/build/../../../../../../../../timer.c" locStartln="54" sev="5" auth="username" locRef="3" rule="CODSTA-203" lnHash="-1456902895" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1456902895" unbViolId="a648884b-1711-390c-8fa3-b7f856b7fa6f" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f45b0565-e2c5-3974-afca-b46dbb309080" locEndPos="18" locType="sr" hash="-275311578" locEndLn="54" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Please enter the start minute [0-59] > " ln="54" locFile="/build/../../../../../../../../timer.c" locStartln="54" sev="1" auth="username" locRef="3" rule="APSC_DV-003110-a" lnHash="-1456902895" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1456902895" unbViolId="440b8227-6cd5-3629-90a6-adcc11ec16dc" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="412e1dc3-f222-3c57-b412-696d72df699b" locEndPos="18" locType="sr" hash="-275311578" locEndLn="54" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Please enter the start minute [0-59] > " ln="54" locFile="/build/../../../../../../../../timer.c" locStartln="54" sev="1" auth="username" locRef="3" rule="CERT_C-MSC41-a" lnHash="-1456902895" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1456902895" unbViolId="fca941b3-33aa-37df-a298-3ac1152a161a" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8911aafb-e2f6-3602-a682-ea522d837ca4" locEndPos="18" locType="sr" hash="-275311578" locEndLn="54" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="55" locFile="/build/../../../../../../../../timer.c" locStartln="55" sev="3" auth="username" locRef="3" rule="CERT_C-EXP37-d" lnHash="-1585297472" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-1585297472" unbViolId="ac489037-409c-3060-8d71-22e912518f0d" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3708ebbb-7aba-37d5-99e6-8c4cfdc491ad" locEndPos="22" locType="sr" hash="-275311578" locEndLn="55" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="55" locFile="/build/../../../../../../../../timer.c" locStartln="55" sev="1" auth="username" locRef="3" rule="MISRA2012-RULE-17_3" lnHash="-1585297472" rule.header="A function shall not be declared implicitly" tool="c++test" lineHash="-1585297472" unbViolId="147b71c0-b6aa-3a62-902a-02fdc0c92eb0" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b6d6c2e-cef3-328c-8cf0-811118a98da7" locEndPos="22" locType="sr" hash="-275311578" locEndLn="55" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="55" locFile="/build/../../../../../../../../timer.c" locStartln="55" sev="3" auth="username" locRef="3" rule="MISRA2004-8_1_b" lnHash="-1585297472" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-1585297472" unbViolId="d2e47992-de73-37a7-8610-8b626dd32d89" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="117c972f-dcc7-3cdf-920e-c166c8f05d64" locEndPos="22" locType="sr" hash="-275311578" locEndLn="55" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="55" locFile="/build/../../../../../../../../timer.c" locStartln="55" sev="3" auth="username" locRef="3" rule="MISRA-071_b" lnHash="-1585297472" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-1585297472" unbViolId="e34df2a9-1170-31d6-b6dd-553f3b007de7" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90c5d454-ac42-3db5-b901-5e803abb35f2" locEndPos="22" locType="sr" hash="-275311578" locEndLn="55" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="55" locFile="/build/../../../../../../../../timer.c" locStartln="55" sev="1" auth="username" locRef="3" rule="MISRAC2012-RULE_17_3-a" lnHash="-1585297472" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-1585297472" unbViolId="2a832839-134b-3560-aab5-ed82118a376d" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d065e136-038b-3a7f-aeba-fd7925e08462" locEndPos="22" locType="sr" hash="-275311578" locEndLn="55" goals="0," />
    <StdViol msg="The NULL pointer shall not be dereferenced: 'the_record' may be null" ln="57" locFile="/build/../../../../../../../../timer.c" locStartln="57" sev="2" auth="username" locRef="3" rule="JSF-174_b" lnHash="-731975428" rule.header="The null pointer shall not be de-referenced" tool="c++test" lineHash="-731975428" unbViolId="34ce7bb4-8a37-3350-9194-f635b5d81509" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac33b205-fcee-3e7e-b758-71e97e09f225" locEndPos="5" locType="sr" hash="-275311578" locEndLn="57" goals="0," />
    <StdViol msg="The NULL pointer shall not be dereferenced: 'the_record' may be null" ln="57" locFile="/build/../../../../../../../../timer.c" locStartln="57" sev="3" auth="username" locRef="3" rule="MISRA-107_b" lnHash="-731975428" rule.header="The NULL pointer shall not be dereferenced" tool="c++test" lineHash="-731975428" unbViolId="1b3d66e6-82cd-36ae-990e-d4859a761229" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="268841ed-adb1-3527-9288-21d654df76fa" locEndPos="5" locType="sr" hash="-275311578" locEndLn="57" goals="0," />
    <StdViol msg="Values &quot;tm_tmp&quot; passed to library function &quot;mktime&quot; without being checked" ln="57" locFile="/build/../../../../../../../../timer.c" locStartln="57" sev="2" auth="username" locRef="3" rule="CERT_C-MEM07-a" lnHash="-731975428" rule.header="The validity of values passed to library functions shall be checked" tool="c++test" lineHash="-731975428" unbViolId="852af494-a9ab-39c0-83db-37a09d28eb32" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e6b16513-c3db-3d8d-a8a3-98adcf6c5ee9" locEndPos="29" locType="sr" hash="-275311578" locEndLn="57" goals="0," />
    <StdViol msg="Values &quot;tm_tmp&quot; passed to library function &quot;mktime&quot; without being checked" ln="57" locFile="/build/../../../../../../../../timer.c" locStartln="57" sev="2" auth="username" locRef="3" rule="CERT_C-MEM04-a" lnHash="-731975428" rule.header="The validity of values passed to library functions shall be checked" tool="c++test" lineHash="-731975428" unbViolId="12ddb1e9-70e9-33cd-8da9-b034948832e3" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="755ec7af-6728-3cf0-955a-c01416939093" locEndPos="29" locType="sr" hash="-275311578" locEndLn="57" goals="0," />
    <StdViol msg="Values &quot;tm_tmp&quot; passed to library function &quot;mktime&quot; without being checked" ln="57" locFile="/build/../../../../../../../../timer.c" locStartln="57" sev="3" auth="username" locRef="3" rule="MISRA2004-20_3" lnHash="-731975428" rule.header="The validity of values passed to library functions shall be checked" tool="c++test" lineHash="-731975428" unbViolId="a25151a5-4a10-3af5-a4ce-df6520bcb007" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9afe284b-39e7-31c1-9569-6db63f78ab71" locEndPos="29" locType="sr" hash="-275311578" locEndLn="57" goals="0," />
    <StdViol msg="Function 'mktime' is being used" ln="57" locFile="/build/../../../../../../../../timer.c" locStartln="57" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-21_10" lnHash="-731975428" rule.header="The Standard Library time and date functions shall not be used" tool="c++test" lineHash="-731975428" unbViolId="1c95c72c-b7dc-3793-b82d-2850ac13e170" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f73fe48-626e-3294-8884-64ffe713054d" locEndPos="29" locType="sr" hash="-275311578" locEndLn="57" goals="0," />
    <StdViol msg="Function 'mktime' is being used" ln="57" locFile="/build/../../../../../../../../timer.c" locStartln="57" sev="2" auth="username" locRef="3" rule="SECURITY-01" lnHash="-731975428" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="-731975428" unbViolId="456b338e-ca04-3d63-a2b2-815874efcf0a" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d209cf6-fb8f-3ad2-9fc7-aa6e88f8057a" locEndPos="29" locType="sr" hash="-275311578" locEndLn="57" goals="0," />
    <StdViol msg="Function 'mktime' is being used" ln="57" locFile="/build/../../../../../../../../timer.c" locStartln="57" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_21_10-a" lnHash="-731975428" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="-731975428" unbViolId="a0607df3-92b5-319f-a50d-288d2059aa21" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88f32cab-f921-30e1-8849-88729a07b8a9" locEndPos="29" locType="sr" hash="-275311578" locEndLn="57" goals="0," />
    <StdViol msg="Function 'mktime' is being used" ln="57" locFile="/build/../../../../../../../../timer.c" locStartln="57" sev="1" auth="username" locRef="3" rule="CERT_C-MSC33-a" lnHash="-731975428" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="-731975428" unbViolId="0420c1a1-dd75-3ee0-88c8-644f34ff723e" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7698d179-874f-3aa7-94cc-07a3e70d1bd7" locEndPos="29" locType="sr" hash="-275311578" locEndLn="57" goals="0," />
    <StdViol msg="Use // comments only" ln="59" locFile="/build/../../../../../../../../timer.c" locStartln="59" sev="3" auth="username" locRef="3" rule="HICPP-2_3_1-a" lnHash="-999515742" rule.header="Prefer C++ style comment" tool="c++test" lineHash="-999515742" unbViolId="0118e184-86d2-3463-baf4-e18c77efd266" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e7c4ab27-849c-321a-88a9-3bf8a6737d9e" locEndPos="5" locType="sr" hash="-275311578" locEndLn="59" goals="0," />
    <StdViol msg="Use // comments only" ln="59" locFile="/build/../../../../../../../../timer.c" locStartln="59" sev="2" auth="username" locRef="3" rule="JSF-126" lnHash="-999515742" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="-999515742" unbViolId="7d306022-b7fd-30f5-9ad6-f955fe98e1d1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8d08b57-e3bd-3ef3-96a3-a3c2a73eebab" locEndPos="5" locType="sr" hash="-275311578" locEndLn="59" goals="0," />
    <StdViol msg="Use // comments only" ln="59" locFile="/build/../../../../../../../../timer.c" locStartln="59" sev="3" auth="username" locRef="3" rule="COMMENT-01" lnHash="-999515742" rule.header="Prefer C++ style comment" tool="c++test" lineHash="-999515742" unbViolId="f0baeabf-e1e6-3028-9d49-922ec3b88d0a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3149a2f7-36b1-3520-826f-9f7d875b67c1" locEndPos="5" locType="sr" hash="-275311578" locEndLn="59" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="60" locFile="/build/../../../../../../../../timer.c" locStartln="60" sev="3" auth="username" locRef="3" rule="CODSTA-122_a" lnHash="17156239" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="17156239" unbViolId="0d61914a-237a-3ad2-bb00-5fd8fb4d6309" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55adae91-d7a4-3a1a-bf88-55dbd54af958" locEndPos="5" locType="sr" hash="-275311578" locEndLn="60" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="60" locFile="/build/../../../../../../../../timer.c" locStartln="60" sev="1" auth="username" locRef="3" rule="CERT_C-ERR33-a" lnHash="17156239" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="17156239" unbViolId="544ee946-3c32-3616-a9ff-8ec78bd1a161" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5537870e-1317-31a8-8bdb-5f5897ddc8bb" locEndPos="5" locType="sr" hash="-275311578" locEndLn="60" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="60" locFile="/build/../../../../../../../../timer.c" locStartln="60" sev="1" auth="username" locRef="3" rule="CERT_C-POS54-a" lnHash="17156239" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="17156239" unbViolId="9ee17701-1e19-3a3f-99b1-729632e9b2ca" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3943f15a-5343-3370-ab35-25bff0bca8c5" locEndPos="5" locType="sr" hash="-275311578" locEndLn="60" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="60" locFile="/build/../../../../../../../../timer.c" locStartln="60" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="17156239" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="17156239" unbViolId="48719769-a327-3a9a-b80e-e2876470db16" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="498c855d-827c-380d-b3b3-5c80159790ab" locEndPos="5" locType="sr" hash="-275311578" locEndLn="60" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="60" locFile="/build/../../../../../../../../timer.c" locStartln="60" sev="3" auth="username" locRef="3" rule="CERT_C-EXP12-a" lnHash="17156239" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="17156239" unbViolId="1d09ed96-56d0-347d-a141-0cbf3ac80b4b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b092ef0-2152-3b54-87f8-665a7879e456" locEndPos="5" locType="sr" hash="-275311578" locEndLn="60" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="60" locFile="/build/../../../../../../../../timer.c" locStartln="60" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="17156239" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="17156239" unbViolId="3c86f46d-ae05-35cf-9d63-48ed900f837a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="63c8d327-dae2-37df-bca3-3aa7d225a9d3" locEndPos="5" locType="sr" hash="-275311578" locEndLn="60" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="60" locFile="/build/../../../../../../../../timer.c" locStartln="60" sev="3" auth="username" locRef="3" rule="MISRA2004-16_10" lnHash="17156239" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="17156239" unbViolId="410d29fc-8a05-3747-86ba-eeb156343407" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04d9d406-ba1b-3202-a60c-d90f8f098165" locEndPos="5" locType="sr" hash="-275311578" locEndLn="60" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="60" locFile="/build/../../../../../../../../timer.c" locStartln="60" sev="2" auth="username" locRef="3" rule="AUTOSAR-M0_3_2-a" lnHash="17156239" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="17156239" unbViolId="6a372412-3252-33bc-8c6c-428b01d91bc7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8eca74fe-f737-399b-920a-253931add4d4" locEndPos="5" locType="sr" hash="-275311578" locEndLn="60" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="60" locFile="/build/../../../../../../../../timer.c" locStartln="60" sev="2" auth="username" locRef="3" rule="MISRA2008-0_3_2" lnHash="17156239" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="17156239" unbViolId="d4176a8d-1b41-340b-9c4d-d130194a1e17" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02649de7-8489-363b-bbef-acbc7a72f684" locEndPos="5" locType="sr" hash="-275311578" locEndLn="60" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="60" locFile="/build/../../../../../../../../timer.c" locStartln="60" sev="3" auth="username" locRef="3" rule="JSF-115" lnHash="17156239" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="17156239" unbViolId="c7fb7da9-6c53-3a0e-8e63-0b568718cb4a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0cde2398-6a4c-3fd4-b193-4b40980ed0e1" locEndPos="5" locType="sr" hash="-275311578" locEndLn="60" goals="0," />
    <StdViol msg="String literal &quot;Please enter the end hour [0-23] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="60" locFile="/build/../../../../../../../../timer.c" locStartln="60" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_7_4-a" lnHash="17156239" rule.header="A string literal shall not be modified" tool="c++test" lineHash="17156239" unbViolId="9386804d-660e-3e5d-aafa-ca4b8c41ef74" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c92ab134-627f-3366-af22-9a65c566f03e" locEndPos="18" locType="sr" hash="-275311578" locEndLn="60" goals="0," />
    <StdViol msg="String literal &quot;Please enter the end hour [0-23] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="60" locFile="/build/../../../../../../../../timer.c" locStartln="60" sev="2" auth="username" locRef="3" rule="AUTOSAR-A2_13_4-a" lnHash="17156239" rule.header="A string literal shall not be modified" tool="c++test" lineHash="17156239" unbViolId="53440ee4-3e4d-3b93-84b1-aa44f3ef7bac" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2bf115f6-f5b1-3b29-8e27-4e7cef97ffec" locEndPos="18" locType="sr" hash="-275311578" locEndLn="60" goals="0," />
    <StdViol msg="String literal &quot;Please enter the end hour [0-23] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="60" locFile="/build/../../../../../../../../timer.c" locStartln="60" sev="2" auth="username" locRef="3" rule="JSF-151.1" lnHash="17156239" rule.header="A string literal shall not be modified" tool="c++test" lineHash="17156239" unbViolId="17e4d108-041b-3882-a63f-655ce3f999ae" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="865c7295-8dff-3795-bcfb-ec39bbd6efcd" locEndPos="18" locType="sr" hash="-275311578" locEndLn="60" goals="0," />
    <StdViol msg="String literal &quot;Please enter the end hour [0-23] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="60" locFile="/build/../../../../../../../../timer.c" locStartln="60" sev="2" auth="username" locRef="3" rule="PB-27" lnHash="17156239" rule.header="A string literal shall not be modified" tool="c++test" lineHash="17156239" unbViolId="698b0b56-864e-3630-a1d3-4977d2207717" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eeca76c5-b616-334c-9380-c563172c078a" locEndPos="18" locType="sr" hash="-275311578" locEndLn="60" goals="0," />
    <StdViol msg="String literal &quot;Please enter the end hour [0-23] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="60" locFile="/build/../../../../../../../../timer.c" locStartln="60" sev="3" auth="username" locRef="3" rule="CERT_C-STR05-a" lnHash="17156239" rule.header="A string literal shall not be modified" tool="c++test" lineHash="17156239" unbViolId="cf63a046-a2a6-35e5-9627-84057db02e66" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79f35e08-8c37-38a6-ba4b-4eea062c1c17" locEndPos="18" locType="sr" hash="-275311578" locEndLn="60" goals="0," />
    <StdViol msg="String literal &quot;Please enter the end hour [0-23] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="60" locFile="/build/../../../../../../../../timer.c" locStartln="60" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-7_4" lnHash="17156239" rule.header="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" tool="c++test" lineHash="17156239" unbViolId="18555a9e-ded4-390e-949f-207fe6fa2928" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77d8ed07-28d0-3ed3-aaa0-c69862c28ca8" locEndPos="18" locType="sr" hash="-275311578" locEndLn="60" goals="0," />
    <StdViol msg="String literal &quot;Please enter the end hour [0-23] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="60" locFile="/build/../../../../../../../../timer.c" locStartln="60" sev="2" auth="username" locRef="3" rule="CERT_C-STR30-a" lnHash="17156239" rule.header="A string literal shall not be modified" tool="c++test" lineHash="17156239" unbViolId="2e8c7304-0683-3f29-9c5f-66419cafc185" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a928e9fe-f7a6-383d-ac7f-4fa2e701a9fa" locEndPos="18" locType="sr" hash="-275311578" locEndLn="60" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Please enter the end hour [0-23] > " ln="60" locFile="/build/../../../../../../../../timer.c" locStartln="60" sev="5" auth="username" locRef="3" rule="CWE-798-a" lnHash="17156239" rule.header="Do not hard code string literals" tool="c++test" lineHash="17156239" unbViolId="256f3428-a5ea-37d8-a23a-1ad394baf8a3" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67d87406-7dc8-3f67-95fd-b00a033ed855" locEndPos="18" locType="sr" hash="-275311578" locEndLn="60" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Please enter the end hour [0-23] > " ln="60" locFile="/build/../../../../../../../../timer.c" locStartln="60" sev="5" auth="username" locRef="3" rule="CODSTA-203" lnHash="17156239" rule.header="Do not hard code string literals" tool="c++test" lineHash="17156239" unbViolId="0fbf6f0e-82b5-314f-ae37-6749b8d83653" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="196c0a15-4e4b-3006-958f-686bfa1c4b79" locEndPos="18" locType="sr" hash="-275311578" locEndLn="60" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Please enter the end hour [0-23] > " ln="60" locFile="/build/../../../../../../../../timer.c" locStartln="60" sev="1" auth="username" locRef="3" rule="APSC_DV-003110-a" lnHash="17156239" rule.header="Do not hard code string literals" tool="c++test" lineHash="17156239" unbViolId="677d917f-bc90-32ac-814c-ad2cf2c6a90d" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="092b8e19-0d70-31d3-80a8-7d9cc03407f8" locEndPos="18" locType="sr" hash="-275311578" locEndLn="60" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Please enter the end hour [0-23] > " ln="60" locFile="/build/../../../../../../../../timer.c" locStartln="60" sev="1" auth="username" locRef="3" rule="CERT_C-MSC41-a" lnHash="17156239" rule.header="Do not hard code string literals" tool="c++test" lineHash="17156239" unbViolId="b568f50c-c51f-3418-900b-c0075a404e62" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="56f03932-1559-35f9-8fac-a981f2dfdb67" locEndPos="18" locType="sr" hash="-275311578" locEndLn="60" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="61" locFile="/build/../../../../../../../../timer.c" locStartln="61" sev="3" auth="username" locRef="3" rule="CERT_C-EXP37-d" lnHash="1051372518" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="1051372518" unbViolId="d34ed6ec-d755-3d8f-841a-a7334e3c1f73" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f7697253-ee84-352d-a4e9-f76676619b8f" locEndPos="23" locType="sr" hash="-275311578" locEndLn="61" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="61" locFile="/build/../../../../../../../../timer.c" locStartln="61" sev="1" auth="username" locRef="3" rule="MISRA2012-RULE-17_3" lnHash="1051372518" rule.header="A function shall not be declared implicitly" tool="c++test" lineHash="1051372518" unbViolId="f9282a6c-9238-325d-bffe-2919fc4af7a1" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da1a5aae-812a-3b33-b600-8919adb58559" locEndPos="23" locType="sr" hash="-275311578" locEndLn="61" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="61" locFile="/build/../../../../../../../../timer.c" locStartln="61" sev="3" auth="username" locRef="3" rule="MISRA2004-8_1_b" lnHash="1051372518" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="1051372518" unbViolId="c14752f8-8aaa-359c-8ead-3431217ad764" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4ab6083-03e1-394e-98a8-05e79756946a" locEndPos="23" locType="sr" hash="-275311578" locEndLn="61" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="61" locFile="/build/../../../../../../../../timer.c" locStartln="61" sev="3" auth="username" locRef="3" rule="MISRA-071_b" lnHash="1051372518" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="1051372518" unbViolId="7bc3234f-54f2-3436-b7fb-034ac8893b57" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="39d6f068-ac0e-3dab-8fe9-cc3061d174d2" locEndPos="23" locType="sr" hash="-275311578" locEndLn="61" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="61" locFile="/build/../../../../../../../../timer.c" locStartln="61" sev="1" auth="username" locRef="3" rule="MISRAC2012-RULE_17_3-a" lnHash="1051372518" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="1051372518" unbViolId="7ccd62f8-6ec2-331f-ace6-24dc062b9034" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6418683c-d8b6-3cde-8f3f-c21c236e0a27" locEndPos="23" locType="sr" hash="-275311578" locEndLn="61" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="62" locFile="/build/../../../../../../../../timer.c" locStartln="62" sev="3" auth="username" locRef="3" rule="CODSTA-122_a" lnHash="-129737380" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-129737380" unbViolId="3c0f453d-ff9a-32cc-8106-971f0434b609" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ba66459-058c-36e9-ab2f-0243f16b3326" locEndPos="5" locType="sr" hash="-275311578" locEndLn="62" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="62" locFile="/build/../../../../../../../../timer.c" locStartln="62" sev="1" auth="username" locRef="3" rule="CERT_C-ERR33-a" lnHash="-129737380" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-129737380" unbViolId="117d20cb-1c4b-3864-bcbe-9217ab03743c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="257ec7e2-dfd2-3b52-95f4-03c07b640140" locEndPos="5" locType="sr" hash="-275311578" locEndLn="62" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="62" locFile="/build/../../../../../../../../timer.c" locStartln="62" sev="1" auth="username" locRef="3" rule="CERT_C-POS54-a" lnHash="-129737380" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-129737380" unbViolId="31813be9-1d42-3af8-aca6-655216b80587" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0bcca2a4-171b-3b36-9fdd-67c1dc8c8bcd" locEndPos="5" locType="sr" hash="-275311578" locEndLn="62" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="62" locFile="/build/../../../../../../../../timer.c" locStartln="62" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-129737380" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-129737380" unbViolId="b958ec94-874e-392b-b512-51b4746c7364" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69c20d2b-9705-3212-b716-67303fa620b1" locEndPos="5" locType="sr" hash="-275311578" locEndLn="62" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="62" locFile="/build/../../../../../../../../timer.c" locStartln="62" sev="3" auth="username" locRef="3" rule="CERT_C-EXP12-a" lnHash="-129737380" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-129737380" unbViolId="b8a6bb33-6270-30cb-a54f-e4d2a7dd3920" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e9b366e-c84a-3334-b211-b0cc896d5074" locEndPos="5" locType="sr" hash="-275311578" locEndLn="62" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="62" locFile="/build/../../../../../../../../timer.c" locStartln="62" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="-129737380" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-129737380" unbViolId="308b3ea0-9f49-3b91-983c-5b4864918c71" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="238d2e91-535f-3739-a8b2-cfa27b35b9c0" locEndPos="5" locType="sr" hash="-275311578" locEndLn="62" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="62" locFile="/build/../../../../../../../../timer.c" locStartln="62" sev="3" auth="username" locRef="3" rule="MISRA2004-16_10" lnHash="-129737380" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-129737380" unbViolId="3cebd515-509a-322e-96ac-f488a3b2fb7d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6bf548b0-2d46-3628-abdc-2abe10de17e4" locEndPos="5" locType="sr" hash="-275311578" locEndLn="62" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="62" locFile="/build/../../../../../../../../timer.c" locStartln="62" sev="2" auth="username" locRef="3" rule="AUTOSAR-M0_3_2-a" lnHash="-129737380" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-129737380" unbViolId="8139e9ca-678d-3dd3-8752-8cf66063e846" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8346cac8-c027-362b-91c0-b2b49457ccdc" locEndPos="5" locType="sr" hash="-275311578" locEndLn="62" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="62" locFile="/build/../../../../../../../../timer.c" locStartln="62" sev="2" auth="username" locRef="3" rule="MISRA2008-0_3_2" lnHash="-129737380" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-129737380" unbViolId="13f63054-a8ca-36b9-95ab-1865cf4e0afa" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3eeea4f2-00a0-3efc-9dba-e72ed9e157a1" locEndPos="5" locType="sr" hash="-275311578" locEndLn="62" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="62" locFile="/build/../../../../../../../../timer.c" locStartln="62" sev="3" auth="username" locRef="3" rule="JSF-115" lnHash="-129737380" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-129737380" unbViolId="d49b382e-2554-3b39-a586-ae4309085e8b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2471e8cf-e3cb-356b-938a-ecb84ac3b683" locEndPos="5" locType="sr" hash="-275311578" locEndLn="62" goals="0," />
    <StdViol msg="String literal &quot;Please enter the end minute [0-59] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="62" locFile="/build/../../../../../../../../timer.c" locStartln="62" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_7_4-a" lnHash="-129737380" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-129737380" unbViolId="f388a603-0700-36e0-ada0-e538a058e59f" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2e726ed-c180-31e1-bb0a-353bba6f1fa7" locEndPos="18" locType="sr" hash="-275311578" locEndLn="62" goals="0," />
    <StdViol msg="String literal &quot;Please enter the end minute [0-59] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="62" locFile="/build/../../../../../../../../timer.c" locStartln="62" sev="2" auth="username" locRef="3" rule="AUTOSAR-A2_13_4-a" lnHash="-129737380" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-129737380" unbViolId="36b76f8e-33b1-3d2e-863a-fe90cfe67197" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5767fbef-5ff0-3561-84ed-22382f4a1167" locEndPos="18" locType="sr" hash="-275311578" locEndLn="62" goals="0," />
    <StdViol msg="String literal &quot;Please enter the end minute [0-59] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="62" locFile="/build/../../../../../../../../timer.c" locStartln="62" sev="2" auth="username" locRef="3" rule="JSF-151.1" lnHash="-129737380" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-129737380" unbViolId="7118731a-04a1-30ef-a3a0-9e617f65512b" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb97fa30-2c18-34ba-b9cd-2ebf8a4e3dea" locEndPos="18" locType="sr" hash="-275311578" locEndLn="62" goals="0," />
    <StdViol msg="String literal &quot;Please enter the end minute [0-59] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="62" locFile="/build/../../../../../../../../timer.c" locStartln="62" sev="2" auth="username" locRef="3" rule="PB-27" lnHash="-129737380" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-129737380" unbViolId="e49009bd-91a6-3330-b012-9929e110cbdd" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04c3eea3-81eb-35f5-870d-2b716a6078a9" locEndPos="18" locType="sr" hash="-275311578" locEndLn="62" goals="0," />
    <StdViol msg="String literal &quot;Please enter the end minute [0-59] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="62" locFile="/build/../../../../../../../../timer.c" locStartln="62" sev="3" auth="username" locRef="3" rule="CERT_C-STR05-a" lnHash="-129737380" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-129737380" unbViolId="3584e323-13bb-3902-a085-0440f4fa54b8" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="538ea1f6-aa57-3b23-b425-2aa2b5bd1720" locEndPos="18" locType="sr" hash="-275311578" locEndLn="62" goals="0," />
    <StdViol msg="String literal &quot;Please enter the end minute [0-59] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="62" locFile="/build/../../../../../../../../timer.c" locStartln="62" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-7_4" lnHash="-129737380" rule.header="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" tool="c++test" lineHash="-129737380" unbViolId="c76154f0-1010-3af8-9c38-482b002090b7" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cddd9fe1-4556-3313-b58d-af9da97e7b76" locEndPos="18" locType="sr" hash="-275311578" locEndLn="62" goals="0," />
    <StdViol msg="String literal &quot;Please enter the end minute [0-59] > &quot; is passed to function 'print_string' as pointer to non-const object" ln="62" locFile="/build/../../../../../../../../timer.c" locStartln="62" sev="2" auth="username" locRef="3" rule="CERT_C-STR30-a" lnHash="-129737380" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-129737380" unbViolId="8c2f674c-5ae1-36c5-b65c-3c8adfb3cda3" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="50956e28-2b76-35db-aa78-ef7520d01509" locEndPos="18" locType="sr" hash="-275311578" locEndLn="62" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Please enter the end minute [0-59] > " ln="62" locFile="/build/../../../../../../../../timer.c" locStartln="62" sev="5" auth="username" locRef="3" rule="CWE-798-a" lnHash="-129737380" rule.header="Do not hard code string literals" tool="c++test" lineHash="-129737380" unbViolId="ea2ce057-bc55-3ba5-9bb8-9361844d0ff5" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a37e0a2-8712-3a48-9b2c-140533d32ccc" locEndPos="18" locType="sr" hash="-275311578" locEndLn="62" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Please enter the end minute [0-59] > " ln="62" locFile="/build/../../../../../../../../timer.c" locStartln="62" sev="5" auth="username" locRef="3" rule="CODSTA-203" lnHash="-129737380" rule.header="Do not hard code string literals" tool="c++test" lineHash="-129737380" unbViolId="36e51b5e-1b59-3a27-a7a0-c9808fdcb7b9" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eeb8f189-83bb-3636-8969-b48869534643" locEndPos="18" locType="sr" hash="-275311578" locEndLn="62" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Please enter the end minute [0-59] > " ln="62" locFile="/build/../../../../../../../../timer.c" locStartln="62" sev="1" auth="username" locRef="3" rule="APSC_DV-003110-a" lnHash="-129737380" rule.header="Do not hard code string literals" tool="c++test" lineHash="-129737380" unbViolId="9a11fffc-7b6a-399e-a246-222d905d2b77" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a1b0aa9-518b-3258-abf7-d20fb4286551" locEndPos="18" locType="sr" hash="-275311578" locEndLn="62" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Please enter the end minute [0-59] > " ln="62" locFile="/build/../../../../../../../../timer.c" locStartln="62" sev="1" auth="username" locRef="3" rule="CERT_C-MSC41-a" lnHash="-129737380" rule.header="Do not hard code string literals" tool="c++test" lineHash="-129737380" unbViolId="602dea25-d8eb-3d6e-b8d9-b2760f7727cf" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9d33dce-0fbe-332c-b3ad-4da29f5fe588" locEndPos="18" locType="sr" hash="-275311578" locEndLn="62" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="63" locFile="/build/../../../../../../../../timer.c" locStartln="63" sev="3" auth="username" locRef="3" rule="CERT_C-EXP37-d" lnHash="-1585297472" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-1585297472" unbViolId="e0f0691a-1c40-3dc3-9328-46ee25488825" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e4af3c3-7142-3a02-8abe-1efea9fdda8d" locEndPos="22" locType="sr" hash="-275311578" locEndLn="63" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="63" locFile="/build/../../../../../../../../timer.c" locStartln="63" sev="1" auth="username" locRef="3" rule="MISRA2012-RULE-17_3" lnHash="-1585297472" rule.header="A function shall not be declared implicitly" tool="c++test" lineHash="-1585297472" unbViolId="b77e5496-bbed-3e82-9136-78cb10ad74c5" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26d29df8-ad3b-32e2-b50d-6087d111a9d5" locEndPos="22" locType="sr" hash="-275311578" locEndLn="63" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="63" locFile="/build/../../../../../../../../timer.c" locStartln="63" sev="3" auth="username" locRef="3" rule="MISRA2004-8_1_b" lnHash="-1585297472" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-1585297472" unbViolId="7b626f68-0f88-3147-ae45-6b445292d755" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af232e4e-8bf9-3ad0-b9cc-0fdf489626d8" locEndPos="22" locType="sr" hash="-275311578" locEndLn="63" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="63" locFile="/build/../../../../../../../../timer.c" locStartln="63" sev="3" auth="username" locRef="3" rule="MISRA-071_b" lnHash="-1585297472" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-1585297472" unbViolId="dbb8240b-160c-3c30-a1b9-40dcaf9d2d35" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="659dede2-8e4b-31d9-b351-9dc39cc6e7b4" locEndPos="22" locType="sr" hash="-275311578" locEndLn="63" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="63" locFile="/build/../../../../../../../../timer.c" locStartln="63" sev="1" auth="username" locRef="3" rule="MISRAC2012-RULE_17_3-a" lnHash="-1585297472" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-1585297472" unbViolId="e44c964e-bc7f-31b0-aae1-6d5e9049b255" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8278b177-5b53-3b31-90de-286587fdfbcd" locEndPos="22" locType="sr" hash="-275311578" locEndLn="63" goals="0," />
    <StdViol msg="Values &quot;tm_tmp&quot; passed to library function &quot;mktime&quot; without being checked" ln="65" locFile="/build/../../../../../../../../timer.c" locStartln="65" sev="2" auth="username" locRef="3" rule="CERT_C-MEM07-a" lnHash="-1409060683" rule.header="The validity of values passed to library functions shall be checked" tool="c++test" lineHash="-1409060683" unbViolId="5d33c22d-91b6-38ee-af35-baef699e1497" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="784947d4-2fa5-3c4f-87bb-ec57892e609a" locEndPos="27" locType="sr" hash="-275311578" locEndLn="65" goals="0," />
    <StdViol msg="Values &quot;tm_tmp&quot; passed to library function &quot;mktime&quot; without being checked" ln="65" locFile="/build/../../../../../../../../timer.c" locStartln="65" sev="2" auth="username" locRef="3" rule="CERT_C-MEM04-a" lnHash="-1409060683" rule.header="The validity of values passed to library functions shall be checked" tool="c++test" lineHash="-1409060683" unbViolId="778e630d-a679-36a8-98cb-30c1fd5a2eff" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="beb961bd-f72d-3da8-8ee5-2eb5865891ed" locEndPos="27" locType="sr" hash="-275311578" locEndLn="65" goals="0," />
    <StdViol msg="Values &quot;tm_tmp&quot; passed to library function &quot;mktime&quot; without being checked" ln="65" locFile="/build/../../../../../../../../timer.c" locStartln="65" sev="3" auth="username" locRef="3" rule="MISRA2004-20_3" lnHash="-1409060683" rule.header="The validity of values passed to library functions shall be checked" tool="c++test" lineHash="-1409060683" unbViolId="ce81163c-5dd8-36ef-9441-58fd9b64b1e7" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f90d6e8b-f438-3bca-b7a9-199d907d9404" locEndPos="27" locType="sr" hash="-275311578" locEndLn="65" goals="0," />
    <StdViol msg="Function 'mktime' is being used" ln="65" locFile="/build/../../../../../../../../timer.c" locStartln="65" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-21_10" lnHash="-1409060683" rule.header="The Standard Library time and date functions shall not be used" tool="c++test" lineHash="-1409060683" unbViolId="8b17cf65-c5a7-3ea6-8020-f53d4bb6e8bc" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="532c58af-ca6d-3b5b-b1bb-a79dcb3ac553" locEndPos="27" locType="sr" hash="-275311578" locEndLn="65" goals="0," />
    <StdViol msg="Function 'mktime' is being used" ln="65" locFile="/build/../../../../../../../../timer.c" locStartln="65" sev="2" auth="username" locRef="3" rule="SECURITY-01" lnHash="-1409060683" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="-1409060683" unbViolId="ae482928-4635-3315-87c5-c4d9fc1422ce" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2cbbcc3f-5597-3611-b83a-6adb61031455" locEndPos="27" locType="sr" hash="-275311578" locEndLn="65" goals="0," />
    <StdViol msg="Function 'mktime' is being used" ln="65" locFile="/build/../../../../../../../../timer.c" locStartln="65" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_21_10-a" lnHash="-1409060683" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="-1409060683" unbViolId="e7d53397-4d3a-302c-be4b-e4e856de44a9" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7dbe8233-9584-3305-a4f4-2496380c5dce" locEndPos="27" locType="sr" hash="-275311578" locEndLn="65" goals="0," />
    <StdViol msg="Function 'mktime' is being used" ln="65" locFile="/build/../../../../../../../../timer.c" locStartln="65" sev="1" auth="username" locRef="3" rule="CERT_C-MSC33-a" lnHash="-1409060683" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="-1409060683" unbViolId="45365f3c-c850-3467-be80-31496950fd0c" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8624b8d-8e85-3283-9234-ffc272739c83" locEndPos="27" locType="sr" hash="-275311578" locEndLn="65" goals="0," />
    <StdViol msg="Use // comments only" ln="67" locFile="/build/../../../../../../../../timer.c" locStartln="67" sev="3" auth="username" locRef="3" rule="HICPP-2_3_1-a" lnHash="-179248921" rule.header="Prefer C++ style comment" tool="c++test" lineHash="-179248921" unbViolId="5b413d71-ad6e-3a1c-ae24-b072d14cd1be" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f00c348-af9c-383a-82c5-f735fc19131c" locEndPos="5" locType="sr" hash="-275311578" locEndLn="67" goals="0," />
    <StdViol msg="Use // comments only" ln="67" locFile="/build/../../../../../../../../timer.c" locStartln="67" sev="2" auth="username" locRef="3" rule="JSF-126" lnHash="-179248921" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="-179248921" unbViolId="3869493a-895c-30e7-86a0-3e0ae9b1459f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e90844cc-7917-38bb-833e-04e489a3fd1b" locEndPos="5" locType="sr" hash="-275311578" locEndLn="67" goals="0," />
    <StdViol msg="Use // comments only" ln="67" locFile="/build/../../../../../../../../timer.c" locStartln="67" sev="3" auth="username" locRef="3" rule="COMMENT-01" lnHash="-179248921" rule.header="Prefer C++ style comment" tool="c++test" lineHash="-179248921" unbViolId="35849795-f43c-35de-8461-2f85cd8e460e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="266fcafb-0377-300c-a26b-91ac3c3a66e5" locEndPos="5" locType="sr" hash="-275311578" locEndLn="67" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="68" locFile="/build/../../../../../../../../timer.c" locStartln="68" sev="3" auth="username" locRef="3" rule="CODSTA-122_a" lnHash="-397800787" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-397800787" unbViolId="1711277e-ee55-3e05-82ff-60c22cbf93be" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd36c786-d87b-36d1-8d68-299fbceae1d3" locEndPos="5" locType="sr" hash="-275311578" locEndLn="68" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="68" locFile="/build/../../../../../../../../timer.c" locStartln="68" sev="1" auth="username" locRef="3" rule="CERT_C-ERR33-a" lnHash="-397800787" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-397800787" unbViolId="a0f4bbfa-6ef1-3df8-9614-700712328bf6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="15ad47a0-49ea-374d-9825-657af0667213" locEndPos="5" locType="sr" hash="-275311578" locEndLn="68" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="68" locFile="/build/../../../../../../../../timer.c" locStartln="68" sev="1" auth="username" locRef="3" rule="CERT_C-POS54-a" lnHash="-397800787" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-397800787" unbViolId="0464a526-a58a-3b45-aca5-723251e0b146" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e4c475f-6535-3766-bd43-42fe7cb1856c" locEndPos="5" locType="sr" hash="-275311578" locEndLn="68" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="68" locFile="/build/../../../../../../../../timer.c" locStartln="68" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-397800787" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-397800787" unbViolId="6cde82be-6524-3ccd-927c-b91eb378cdbf" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0cd0382-1c00-31cb-920d-4ae01e10d995" locEndPos="5" locType="sr" hash="-275311578" locEndLn="68" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="68" locFile="/build/../../../../../../../../timer.c" locStartln="68" sev="3" auth="username" locRef="3" rule="CERT_C-EXP12-a" lnHash="-397800787" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-397800787" unbViolId="61983cbf-c58f-3370-a551-ebe9e733ba61" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f681043e-f19a-308d-956b-3d733c78dba8" locEndPos="5" locType="sr" hash="-275311578" locEndLn="68" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="68" locFile="/build/../../../../../../../../timer.c" locStartln="68" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="-397800787" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-397800787" unbViolId="a11f48f4-24fd-3f1e-aad3-01a5d0065aa1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0aa5d88-89c0-317c-8ffc-2eab93ca7efb" locEndPos="5" locType="sr" hash="-275311578" locEndLn="68" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="68" locFile="/build/../../../../../../../../timer.c" locStartln="68" sev="3" auth="username" locRef="3" rule="MISRA2004-16_10" lnHash="-397800787" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-397800787" unbViolId="025a6a51-8eeb-39c3-a6bc-b53fc2738cce" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb29931f-6f7a-3228-bb5a-cc77a69eeb50" locEndPos="5" locType="sr" hash="-275311578" locEndLn="68" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="68" locFile="/build/../../../../../../../../timer.c" locStartln="68" sev="2" auth="username" locRef="3" rule="AUTOSAR-M0_3_2-a" lnHash="-397800787" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-397800787" unbViolId="42b48623-ab10-3519-9b9c-cd8a84fc8f48" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10fb006b-07d4-3403-922f-0e982a8d0f35" locEndPos="5" locType="sr" hash="-275311578" locEndLn="68" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="68" locFile="/build/../../../../../../../../timer.c" locStartln="68" sev="2" auth="username" locRef="3" rule="MISRA2008-0_3_2" lnHash="-397800787" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-397800787" unbViolId="cc22c479-e505-3a5b-ab31-9af23db9f0b3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c66a1044-816e-3f68-a729-ea63283fd047" locEndPos="5" locType="sr" hash="-275311578" locEndLn="68" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="68" locFile="/build/../../../../../../../../timer.c" locStartln="68" sev="3" auth="username" locRef="3" rule="JSF-115" lnHash="-397800787" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-397800787" unbViolId="c2bd180a-159c-3aba-a5ca-29ebead50636" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="faca943e-ec63-3aad-b752-11dc5ad757f9" locEndPos="5" locType="sr" hash="-275311578" locEndLn="68" goals="0," />
    <StdViol msg="String literal &quot;Please enter the channel to record > &quot; is passed to function 'print_string' as pointer to non-const object" ln="68" locFile="/build/../../../../../../../../timer.c" locStartln="68" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_7_4-a" lnHash="-397800787" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-397800787" unbViolId="a52322d7-eee3-3ce1-b7b8-15d20068e866" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd7d1c35-f67a-3255-877b-c2295bdd97b4" locEndPos="18" locType="sr" hash="-275311578" locEndLn="68" goals="0," />
    <StdViol msg="String literal &quot;Please enter the channel to record > &quot; is passed to function 'print_string' as pointer to non-const object" ln="68" locFile="/build/../../../../../../../../timer.c" locStartln="68" sev="2" auth="username" locRef="3" rule="AUTOSAR-A2_13_4-a" lnHash="-397800787" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-397800787" unbViolId="924e4bbf-c66a-3f57-9a91-fdd4333f6f4e" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8dfc6a9a-0121-3dee-9f8e-f0791f1c8343" locEndPos="18" locType="sr" hash="-275311578" locEndLn="68" goals="0," />
    <StdViol msg="String literal &quot;Please enter the channel to record > &quot; is passed to function 'print_string' as pointer to non-const object" ln="68" locFile="/build/../../../../../../../../timer.c" locStartln="68" sev="2" auth="username" locRef="3" rule="JSF-151.1" lnHash="-397800787" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-397800787" unbViolId="ebb76c66-5626-3080-869a-20113c04cfdc" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87ae16b3-8e8c-3b7b-ac39-1f1c54282511" locEndPos="18" locType="sr" hash="-275311578" locEndLn="68" goals="0," />
    <StdViol msg="String literal &quot;Please enter the channel to record > &quot; is passed to function 'print_string' as pointer to non-const object" ln="68" locFile="/build/../../../../../../../../timer.c" locStartln="68" sev="2" auth="username" locRef="3" rule="PB-27" lnHash="-397800787" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-397800787" unbViolId="69ef509b-3d25-32a5-8ac7-3fceefdfcb8b" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5993edf-6287-3696-8adf-c3804234c0c2" locEndPos="18" locType="sr" hash="-275311578" locEndLn="68" goals="0," />
    <StdViol msg="String literal &quot;Please enter the channel to record > &quot; is passed to function 'print_string' as pointer to non-const object" ln="68" locFile="/build/../../../../../../../../timer.c" locStartln="68" sev="3" auth="username" locRef="3" rule="CERT_C-STR05-a" lnHash="-397800787" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-397800787" unbViolId="77f404b3-13e5-3dc2-9d66-48581b7aa07f" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a5ab181-bac0-3b33-b2eb-a87baf8478d3" locEndPos="18" locType="sr" hash="-275311578" locEndLn="68" goals="0," />
    <StdViol msg="String literal &quot;Please enter the channel to record > &quot; is passed to function 'print_string' as pointer to non-const object" ln="68" locFile="/build/../../../../../../../../timer.c" locStartln="68" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-7_4" lnHash="-397800787" rule.header="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" tool="c++test" lineHash="-397800787" unbViolId="15f633b7-23ab-3ec7-a54a-51a687bc2f43" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="584dc3c4-96c1-3a8a-8831-5e0d768f8d9e" locEndPos="18" locType="sr" hash="-275311578" locEndLn="68" goals="0," />
    <StdViol msg="String literal &quot;Please enter the channel to record > &quot; is passed to function 'print_string' as pointer to non-const object" ln="68" locFile="/build/../../../../../../../../timer.c" locStartln="68" sev="2" auth="username" locRef="3" rule="CERT_C-STR30-a" lnHash="-397800787" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-397800787" unbViolId="addb8396-1d81-3dbc-b633-7d11ccd4d54c" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="215e93d7-04b3-3e84-bdc9-eb4f8169cd27" locEndPos="18" locType="sr" hash="-275311578" locEndLn="68" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Please enter the channel to record > " ln="68" locFile="/build/../../../../../../../../timer.c" locStartln="68" sev="5" auth="username" locRef="3" rule="CWE-798-a" lnHash="-397800787" rule.header="Do not hard code string literals" tool="c++test" lineHash="-397800787" unbViolId="e2951ba1-d50e-33c8-8a7a-08899b41deca" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="60eb82ca-f35f-399a-aab1-cd44cda2f830" locEndPos="18" locType="sr" hash="-275311578" locEndLn="68" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Please enter the channel to record > " ln="68" locFile="/build/../../../../../../../../timer.c" locStartln="68" sev="5" auth="username" locRef="3" rule="CODSTA-203" lnHash="-397800787" rule.header="Do not hard code string literals" tool="c++test" lineHash="-397800787" unbViolId="aec9c304-4f36-3a21-a5d9-5ea0cb144104" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b93839a-023d-3306-b4fa-0ad0b8039864" locEndPos="18" locType="sr" hash="-275311578" locEndLn="68" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Please enter the channel to record > " ln="68" locFile="/build/../../../../../../../../timer.c" locStartln="68" sev="1" auth="username" locRef="3" rule="APSC_DV-003110-a" lnHash="-397800787" rule.header="Do not hard code string literals" tool="c++test" lineHash="-397800787" unbViolId="4cf0628b-6515-33ba-a831-60eff7cdb4f7" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe6dd8d6-5507-3613-a4c1-aa3a2a3fe05c" locEndPos="18" locType="sr" hash="-275311578" locEndLn="68" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Please enter the channel to record > " ln="68" locFile="/build/../../../../../../../../timer.c" locStartln="68" sev="1" auth="username" locRef="3" rule="CERT_C-MSC41-a" lnHash="-397800787" rule.header="Do not hard code string literals" tool="c++test" lineHash="-397800787" unbViolId="15fe7ab2-413b-3d75-a7f9-80d43bd2f943" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b196700-fc44-344a-92e5-39e8ace80404" locEndPos="18" locType="sr" hash="-275311578" locEndLn="68" goals="0," />
    <StdViol msg="The expression of the 'essentially signed' type is assigned to an object with the 'essentially unsigned' type" ln="69" locFile="/build/../../../../../../../../timer.c" locStartln="69" sev="2" auth="username" locRef="3" rule="CERT_C-INT31-i" lnHash="1021803899" rule.header="The value of an expression shall not be assigned to an object of a different essential type category" tool="c++test" lineHash="1021803899" unbViolId="72af3a5e-9faf-3aab-820d-58bb266a4fe4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85b320bd-08e9-3c4c-810c-095f9a15ddc5" locEndPos="5" locType="sr" hash="-275311578" locEndLn="69" goals="0," />
    <StdViol msg="The expression of the 'essentially signed' type is assigned to an object with the 'essentially unsigned' type" ln="69" locFile="/build/../../../../../../../../timer.c" locStartln="69" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_10_3-b" lnHash="1021803899" rule.header="The value of an expression shall not be assigned to an object of a different essential type category" tool="c++test" lineHash="1021803899" unbViolId="3d0c11a5-60a2-3ec0-a8c6-bcf7252a0e8f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96cf5839-6606-3d92-a152-531d82f1e13d" locEndPos="5" locType="sr" hash="-275311578" locEndLn="69" goals="0," />
    <StdViol msg="The expression of the 'essentially signed' type is assigned to an object with the 'essentially unsigned' type" ln="69" locFile="/build/../../../../../../../../timer.c" locStartln="69" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-10_3_b" lnHash="1021803899" rule.header="The value of an expression shall not be assigned to an object of a different essential type category" tool="c++test" lineHash="1021803899" unbViolId="e6a4463f-352a-3dc0-9745-56bbd99eadf0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5cdecfc-2aa8-3d8a-ba21-226b45456b0e" locEndPos="5" locType="sr" hash="-275311578" locEndLn="69" goals="0," />
    <StdViol msg="The expression of the 'essentially signed' type is assigned to an object with the 'essentially unsigned' type" ln="69" locFile="/build/../../../../../../../../timer.c" locStartln="69" sev="3" auth="username" locRef="3" rule="CODSTA-163_b" lnHash="1021803899" rule.header="The value of an expression shall not be assigned to an object of a different essential type category" tool="c++test" lineHash="1021803899" unbViolId="2f78bf67-019d-3a66-8212-86c2c15461f3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f6330ce-8cfc-3599-98c5-2531c5a0e42a" locEndPos="5" locType="sr" hash="-275311578" locEndLn="69" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type shall not be used" ln="69" locFile="/build/../../../../../../../../timer.c" locStartln="69" sev="2" auth="username" locRef="3" rule="MISRA2008-5_0_4_a" lnHash="1021803899" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="1021803899" unbViolId="52fa900e-b476-364f-8af5-faa4515390ad" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee2eba49-e165-3e73-bef1-78bad67f7dff" locEndPos="5" locType="sr" hash="-275311578" locEndLn="69" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type shall not be used" ln="69" locFile="/build/../../../../../../../../timer.c" locStartln="69" sev="2" auth="username" locRef="3" rule="AUTOSAR-M5_0_4-a" lnHash="1021803899" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="1021803899" unbViolId="49c0ad87-c6d3-317e-8678-a4c520b82984" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c8a077c-b62e-33c9-a49c-aab9f105b124" locEndPos="5" locType="sr" hash="-275311578" locEndLn="69" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type shall not be used" ln="69" locFile="/build/../../../../../../../../timer.c" locStartln="69" sev="3" auth="username" locRef="3" rule="MISRA2004-10_1_a" lnHash="1021803899" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="1021803899" unbViolId="cdc6d198-b79b-3d34-a86f-dc1e1b90bbae" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d66f932-1c05-314d-9384-a0baee7ddc57" locEndPos="5" locType="sr" hash="-275311578" locEndLn="69" goals="0," />
    <StdViol msg="Expression of type 'int' is assigned to expression of type 'unsigned int'" ln="69" locFile="/build/../../../../../../../../timer.c" locStartln="69" sev="3" auth="username" locRef="3" rule="PB-06" lnHash="1021803899" rule.header="Assignment operator should have operands of compatible types" tool="c++test" lineHash="1021803899" unbViolId="05d59a12-8853-371e-874a-499d96ba9b8f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ec37868-bb96-32ba-8e8d-5fc7ac247117" locEndPos="5" locType="sr" hash="-275311578" locEndLn="69" goals="0," />
    <StdViol msg="Expression of type 'int' is assigned to expression of type 'unsigned int'" ln="69" locFile="/build/../../../../../../../../timer.c" locStartln="69" sev="3" auth="username" locRef="3" rule="CERT_C-MEM02-a" lnHash="1021803899" rule.header="Assignment operator should have operands of compatible types" tool="c++test" lineHash="1021803899" unbViolId="65c14a54-6d48-311a-804a-4d8b8b42ac4f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ecbee7c5-4a23-36d5-a66d-20d2dba16386" locEndPos="5" locType="sr" hash="-275311578" locEndLn="69" goals="0," />
    <StdViol msg="Function returning 'int' type is assigned to expression of type 'unsigned int'" ln="69" locFile="/build/../../../../../../../../timer.c" locStartln="69" sev="3" auth="username" locRef="3" rule="PB-07" lnHash="1021803899" rule.header="Do not assign function return value to a variable of incompatible type" tool="c++test" lineHash="1021803899" unbViolId="0395684a-c934-3854-b9d1-b2b178a979c6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3030c6f-2725-3246-96f5-3889c7d958ba" locEndPos="5" locType="sr" hash="-275311578" locEndLn="69" goals="0," />
    <StdViol msg="Function returning 'int' type is assigned to expression of type 'unsigned int'" ln="69" locFile="/build/../../../../../../../../timer.c" locStartln="69" sev="3" auth="username" locRef="3" rule="CERT_C-MEM02-b" lnHash="1021803899" rule.header="Do not assign function return value to a variable of incompatible type" tool="c++test" lineHash="1021803899" unbViolId="9fdb8a96-40f0-363d-96c4-866143f341c9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00a9e5d1-a445-3f87-ac26-81fc3abc4052" locEndPos="5" locType="sr" hash="-275311578" locEndLn="69" goals="0," />
    <StdViol msg="Implicit conversion from signed type to unsigned type in assignment" ln="69" locFile="/build/../../../../../../../../timer.c" locStartln="69" sev="2" auth="username" locRef="3" rule="AUTOSAR-A4_7_1-a" lnHash="1021803899" rule.header="Avoid implicit conversions from signed to unsigned type" tool="c++test" lineHash="1021803899" unbViolId="3267859c-632d-3d77-bd9e-f0c1aa39a66c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e579476c-8cd1-3f4a-a434-61fb611e2972" locEndPos="5" locType="sr" hash="-275311578" locEndLn="69" goals="0," />
    <StdViol msg="Implicit conversion from signed type to unsigned type in assignment" ln="69" locFile="/build/../../../../../../../../timer.c" locStartln="69" sev="3" auth="username" locRef="3" rule="PB-56" lnHash="1021803899" rule.header="Avoid implicit conversions from signed to unsigned type" tool="c++test" lineHash="1021803899" unbViolId="1f3fe300-29da-3825-8492-449a8d91c756" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="437771fd-db7f-3814-8b9c-c138e7ad7bd4" locEndPos="5" locType="sr" hash="-275311578" locEndLn="69" goals="0," />
    <StdViol msg="Implicit conversion from signed type to unsigned type in assignment" ln="69" locFile="/build/../../../../../../../../timer.c" locStartln="69" sev="2" auth="username" locRef="3" rule="JSF-180_e" lnHash="1021803899" rule.header="Avoid implicit conversions from signed to unsigned type" tool="c++test" lineHash="1021803899" unbViolId="026765da-4221-3174-b551-eca93f68c16f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9408b315-2e5b-30e8-9005-0c51810c5cc9" locEndPos="5" locType="sr" hash="-275311578" locEndLn="69" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="69" locFile="/build/../../../../../../../../timer.c" locStartln="69" sev="3" auth="username" locRef="3" rule="CERT_C-EXP37-d" lnHash="1021803899" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="1021803899" unbViolId="c3e0f3e5-d6a9-3506-b023-0a678c4a4b5a" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b249d203-f220-3a26-ad5e-7ad230c147f1" locEndPos="27" locType="sr" hash="-275311578" locEndLn="69" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="69" locFile="/build/../../../../../../../../timer.c" locStartln="69" sev="1" auth="username" locRef="3" rule="MISRA2012-RULE-17_3" lnHash="1021803899" rule.header="A function shall not be declared implicitly" tool="c++test" lineHash="1021803899" unbViolId="c7bd6bf3-8058-302c-b1ad-e41b4d748f8c" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8d27e84-5529-3bd4-af6d-0fe4779f3c07" locEndPos="27" locType="sr" hash="-275311578" locEndLn="69" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="69" locFile="/build/../../../../../../../../timer.c" locStartln="69" sev="3" auth="username" locRef="3" rule="MISRA2004-8_1_b" lnHash="1021803899" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="1021803899" unbViolId="d6a15ce0-f59a-36b4-a97f-933dce44f66b" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f644440-ff74-3071-8847-00164eb30ef1" locEndPos="27" locType="sr" hash="-275311578" locEndLn="69" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="69" locFile="/build/../../../../../../../../timer.c" locStartln="69" sev="3" auth="username" locRef="3" rule="MISRA-071_b" lnHash="1021803899" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="1021803899" unbViolId="84abd3cb-5b0d-3eb1-b8c1-c4c1c0ccdc48" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e98e5006-ac51-3973-9cc4-32b860dff841" locEndPos="27" locType="sr" hash="-275311578" locEndLn="69" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function call" ln="69" locFile="/build/../../../../../../../../timer.c" locStartln="69" sev="1" auth="username" locRef="3" rule="MISRAC2012-RULE_17_3-a" lnHash="1021803899" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="1021803899" unbViolId="1b026624-4ed8-3bcc-9211-7c7a3e1b3a5a" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1bb0927d-17e0-3748-95a1-341f8a5c28d9" locEndPos="27" locType="sr" hash="-275311578" locEndLn="69" goals="0," />
    <StdViol msg="Remove spaces between the 'return' operator and the opening parenthesis" ln="71" locFile="/build/../../../../../../../../timer.c" locStartln="71" sev="3" auth="username" locRef="3" rule="FORMAT-23" lnHash="601074313" rule.header="There shall be no white spaces between the 'return' statement or the 'sizeof' operator and the following opening parenthesis" tool="c++test" lineHash="601074313" unbViolId="69589445-8304-3ce4-83d3-e9a37e722967" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="676d5f9e-f4cf-38c2-b3c7-24119c9f1657" locEndPos="5" locType="sr" hash="-275311578" locEndLn="71" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="4" auth="username" locRef="3" rule="MISRA2008-3_9_2" lnHash="-231664969" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-231664969" unbViolId="8b1e1242-cfce-3faf-ac61-54e7f98ed5b2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="112f1ee9-42a5-3dc8-9254-8dac6c41bef1" locEndPos="1" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="3" auth="username" locRef="3" rule="MISRA-013" lnHash="-231664969" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-231664969" unbViolId="927c9720-da06-3e0d-ae6b-ef1525703b44" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="80614566-3c37-3fd4-bb48-8e7c15211e30" locEndPos="1" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="3" auth="username" locRef="3" rule="CODSTA-223" lnHash="-231664969" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-231664969" unbViolId="827fbc89-646e-3ffd-8936-198adf32025d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da2312f2-6950-35d3-8578-b5108fbfca6c" locEndPos="1" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="2" auth="username" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="-231664969" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-231664969" unbViolId="73e14db7-6919-3446-8024-76973fcfe857" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae79dffd-d16e-3b9e-a043-a07c15b4d32d" locEndPos="1" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="3" auth="username" locRef="3" rule="HICPP-7_1_6-b" lnHash="-231664969" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-231664969" unbViolId="5a044ebd-4ad2-3115-9c92-a341effd87e9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="edef8073-9147-3935-acf9-86af0b508e2a" locEndPos="1" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="4" auth="username" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="-231664969" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-231664969" unbViolId="ecd55e2a-cf0f-3a00-b0c8-95bcb0ee0c56" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24809564-f396-3fe8-8585-0d7fb1e33bae" locEndPos="1" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="3" auth="username" locRef="3" rule="MISRA2004-6_3_b" lnHash="-231664969" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-231664969" unbViolId="ebae8801-5d58-3a4d-94f2-8d9627c99c14" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d58c8542-b7b5-370b-9e8b-62db9d0ce539" locEndPos="1" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="2" auth="username" locRef="3" rule="JSF-209_b" lnHash="-231664969" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-231664969" unbViolId="2a6d03ad-3ba1-3c21-9ef4-824b0eeaef8a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f7748a95-c236-34b3-be25-12888e5ee4dc" locEndPos="1" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="4" auth="username" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="-231664969" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-231664969" unbViolId="5307ad9b-b616-3bfe-a6e9-6a280f92638d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c47d9ec-1520-3f28-8f3a-80e2db056fe9" locEndPos="1" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="3" auth="username" locRef="3" rule="HICPP-3_5_1-b" lnHash="-231664969" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-231664969" unbViolId="491caefa-5535-3f90-98d8-6eebaf2970f5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c82697a-a0ff-36fe-9695-cdb14702f6e1" locEndPos="1" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="Function 'add_timer' is not in prototype form" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_8_2-c" lnHash="-231664969" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-231664969" unbViolId="3c5ef62c-167b-3b48-ad31-b6a326a25e86" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dccee130-d5b2-3bfc-bf32-4e700276fca3" locEndPos="5" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="Function 'add_timer' is not in prototype form" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="3" auth="username" locRef="3" rule="CERT_C-EXP37-c" lnHash="-231664969" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-231664969" unbViolId="17532a5d-bb6b-3bd6-bfb3-5eaa0dbd60b6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62cb8534-6b0b-3ea5-91e3-d4e45420f6d8" locEndPos="5" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="Function 'add_timer' is not in prototype form" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-8_2_c" lnHash="-231664969" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-231664969" unbViolId="816aa262-6453-3f0e-b3d7-66852cc4f548" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e37814f-2280-3f9a-95b2-42543bf32fc3" locEndPos="5" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="Function 'add_timer' is not in prototype form" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="3" auth="username" locRef="3" rule="CODSTA-159" lnHash="-231664969" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="-231664969" unbViolId="a9e4ccc5-c070-3c45-b5bc-99366d3972bb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5dc855b6-d1c8-3384-add2-ea6270f54e1e" locEndPos="5" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="The 'add_timer' function should be preceded by a comment that contains the '@brief' tag" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="3" auth="username" locRef="3" rule="COMMENT-14" lnHash="-231664969" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-231664969" unbViolId="a6946c9e-b9a2-3a07-85e4-d83294abde27" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06e8b444-29fc-301e-8918-5182d61305c8" locEndPos="5" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="The 'add_timer' function should be preceded by a comment that contains the '@brief' tag" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="2" auth="username" locRef="3" rule="AUTOSAR-A2_7_3-a" lnHash="-231664969" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-231664969" unbViolId="e8f68c74-f868-3e75-816a-e844968e1870" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85dff25b-db7b-3d7c-b0df-63222497ac1d" locEndPos="5" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="The 'add_timer' function should be preceded by a comment that contains the '@return' tag" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="3" auth="username" locRef="3" rule="COMMENT-14_b" lnHash="-231664969" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-231664969" unbViolId="9955a221-dedc-3c19-8f68-68b2c230f92a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7533ce2f-b6cc-33cb-87a5-1fc6fd4d7ae9" locEndPos="5" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="The 'add_timer' function should be preceded by a comment that contains the '@return' tag" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="2" auth="username" locRef="3" rule="AUTOSAR-A2_7_3-b" lnHash="-231664969" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-231664969" unbViolId="be86c29d-c150-3d71-9ec0-4c91b33c8698" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="285ca416-a3f5-3b3c-ab96-35c8d0edc245" locEndPos="5" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="'add_timer' shall be declared as unsigned int or signed int" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="3" auth="username" locRef="3" rule="PORT-13" lnHash="-231664969" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-231664969" unbViolId="08d92e9c-35a8-3643-b1e8-d5196b9213ca" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b129b8eb-3db0-3124-96c0-3bdd9b32fc03" locEndPos="5" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="Function 'add_timer' has empty parameter list" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="3" auth="username" locRef="3" rule="CODSTA-40" lnHash="-231664969" rule.header="'void' should be used when a function is passed or returns no values" tool="c++test" lineHash="-231664969" unbViolId="ab79551f-34a1-3aa5-a35b-adc1a4ba4ec6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3fc09293-c710-3eab-8a7f-cefac5ecb42c" locEndPos="5" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'add_timer'" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="3" auth="username" locRef="3" rule="FORMAT-28" lnHash="-231664969" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-231664969" unbViolId="45123105-ca4b-3e11-b5b2-6844c70ee3cb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5dc8ef20-3363-3dab-8dd4-f137011a2005" locEndPos="5" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="Function 'add_timer' has Cyclomatic Complexity value: 2" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="5" auth="username" locRef="3" rule="METRICS-29" lnHash="-231664969" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-231664969" unbViolId="a3468f50-52bb-3195-80b2-7adc3189b87b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b70601f-0d8f-3b79-a512-3105411cba7f" locEndPos="5" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="Function 'add_timer' has Essential Complexity value: 1" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="5" auth="username" locRef="3" rule="METRICS-33" lnHash="-231664969" rule.header="Report Essential Complexity" tool="c++test" lineHash="-231664969" unbViolId="7399d950-16fa-38b0-ba57-896204a18acd" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d0daf96-e775-3ffe-ace4-90108629f456" locEndPos="5" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="Number of blocks of comments per statement in the function 'add_timer' : 0.0" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="3" auth="username" locRef="3" rule="METRICS-41" lnHash="-231664969" rule.header="The number of blocks of comments before and inside function to the number of statements in function should be > 0.2" tool="c++test" lineHash="-231664969" unbViolId="8c2c8e01-6555-3c8d-bd88-353f09cd7881" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74eaf1a8-2d94-306c-bd09-a98253d02299" locEndPos="5" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="The value of Halstead's delivered bugs (B) for function 'add_timer' is 0.04" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="3" auth="username" locRef="3" rule="METRICS-43" lnHash="-231664969" rule.header="Report the value of Halstead's delivered bugs (B) for a function" tool="c++test" lineHash="-231664969" unbViolId="0acf40a8-2714-33a4-ae0e-dbc1e00f1109" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4fd39e9-4685-32e0-961d-98368d2b73ce" locEndPos="5" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="Declare function 'add_timer' with parameter type void" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="3" auth="username" locRef="3" rule="MISRA2004-16_5" lnHash="-231664969" rule.header="Functions with no parameters shall be declared with parameter type void" tool="c++test" lineHash="-231664969" unbViolId="337bbdf0-d9ed-3012-a2b4-4647f3b2b44a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="488fb64d-818e-3431-bdc5-951712712e4c" locEndPos="5" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="Naming convention not followed: add_timer" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="3" auth="username" locRef="3" rule="NAMING-17" lnHash="-231664969" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-231664969" unbViolId="4dfc07f8-5de6-38ac-8cd7-ac8ed6583671" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd9c7dee-7ae4-3fd7-ab11-6afd56649048" locEndPos="5" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="R-3119: use of non-prototype function declarator" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="5" auth="username" locRef="3" rule="PARSER-REMARK" lnHash="-231664969" rule.header="Parser remark" tool="c++test" lineHash="-231664969" unbViolId="2bbd0258-78ce-31d1-be8f-707be6d76547" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e02c76d2-f855-3632-b7d7-1176686179fa" locEndPos="5" locType="sr" urgent="true" hash="-275311578" locEndLn="74" goals="1," />
    <StdViol msg="Prototype of function 'add_timer' does not precede function definition" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="3" auth="username" locRef="3" rule="MISRA2004-8_1_a" lnHash="-231664969" rule.header="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" tool="c++test" lineHash="-231664969" unbViolId="b186f387-4d67-344d-897c-49611842a655" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="099e96ca-2e1a-327c-9b30-e18b2754a1e1" locEndPos="5" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="Prototype of function 'add_timer' does not precede function definition" ln="74" locFile="/build/../../../../../../../../timer.c" locStartln="74" sev="3" auth="username" locRef="3" rule="MISRA-071_a" lnHash="-231664969" rule.header="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" tool="c++test" lineHash="-231664969" unbViolId="5fdad97f-e252-314e-b7ef-2adac16f64fb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4be555c-8d79-3f93-87b7-75bd0d1b6b40" locEndPos="5" locType="sr" hash="-275311578" locEndLn="74" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="75" locFile="/build/../../../../../../../../timer.c" locStartln="75" sev="3" auth="username" locRef="3" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="1ba38ff7-7f35-33a9-9ac1-63042c873ee2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e34e46b8-4944-3f99-bc38-674e3f5a3a27" locEndPos="1" locType="sr" hash="-275311578" locEndLn="75" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: record" ln="76" locFile="/build/../../../../../../../../timer.c" locStartln="76" sev="3" auth="username" locRef="3" rule="CODSTA-94" lnHash="-1646187554" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1646187554" unbViolId="5e79ce59-62c3-33c4-886a-c94659460c27" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="46a80d0d-b3bf-34fc-b156-8b0a0f7685ff" locEndPos="26" locType="sr" hash="-275311578" locEndLn="76" goals="0," />
    <StdViol msg="The variable of pointer type is declared: record" ln="76" locFile="/build/../../../../../../../../timer.c" locStartln="76" sev="3" auth="username" locRef="3" rule="CODSTA-95" lnHash="-1646187554" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1646187554" unbViolId="ccac34d2-99ba-3927-a318-2cbba6c81979" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9635230-b6fb-371a-811c-b540199360b7" locEndPos="26" locType="sr" hash="-275311578" locEndLn="76" goals="0," />
    <StdViol msg="Pointer variable 'record' uninitialized when declared" ln="76" locFile="/build/../../../../../../../../timer.c" locStartln="76" sev="2" auth="username" locRef="3" rule="INIT-04" lnHash="-1646187554" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1646187554" unbViolId="32a4c53c-1d7a-3dff-af34-bcb5c7ada22d" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a4df0e6c-5bf0-3bc0-b5e7-11434721cf44" locEndPos="26" locType="sr" hash="-275311578" locEndLn="76" goals="0," />
    <StdViol msg="The 'record' variable should be commented" ln="76" locFile="/build/../../../../../../../../timer.c" locStartln="76" sev="3" auth="username" locRef="3" rule="JSF-132_a" lnHash="-1646187554" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1646187554" unbViolId="b4fc3d77-fbbb-390f-a499-1c1c8473ea6b" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52f128d9-ad05-3e96-89b3-c730e8f36dd2" locEndPos="26" locType="sr" hash="-275311578" locEndLn="76" goals="0," />
    <StdViol msg="The 'record' variable should be commented" ln="76" locFile="/build/../../../../../../../../timer.c" locStartln="76" sev="3" auth="username" locRef="3" rule="COMMENT-05" lnHash="-1646187554" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1646187554" unbViolId="222aa9d0-948c-33c7-81d4-6e828b4fc03e" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0aef54db-f81f-3960-b1cd-fc889c99c700" locEndPos="26" locType="sr" hash="-275311578" locEndLn="76" goals="0," />
    <StdViol msg="Naming convention not followed: record" ln="76" locFile="/build/../../../../../../../../timer.c" locStartln="76" sev="3" auth="username" locRef="3" rule="NAMING-22" lnHash="-1646187554" rule.header="Prefix a variable type 'pointer' with a 'p' character" tool="c++test" lineHash="-1646187554" unbViolId="1b04f0b8-4660-37b1-9683-7b3477872b31" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8117ee97-454a-3f23-a9c0-919ecf74c813" locEndPos="26" locType="sr" hash="-275311578" locEndLn="76" goals="0," />
    <StdViol msg="The 'record' identifier should have the 'p' prefix" ln="76" locFile="/build/../../../../../../../../timer.c" locStartln="76" sev="3" auth="username" locRef="3" rule="NAMING-HN-34" lnHash="-1646187554" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="-1646187554" unbViolId="cdf33a9b-5831-3b87-84a1-f7d373fbc9f4" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23216167-e909-33ba-ae3a-d472d853f668" locEndPos="26" locType="sr" hash="-275311578" locEndLn="76" goals="0," />
    <StdViol msg="Prototype of function 'query_user' does not precede function call" ln="78" locFile="/build/../../../../../../../../timer.c" locStartln="78" sev="3" auth="username" locRef="3" rule="CERT_C-EXP37-d" lnHash="-174357818" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-174357818" unbViolId="71f54062-2662-3804-9e94-6ce83aeac325" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="93938844-f02e-3a0a-98ff-45a7485f5d97" locEndPos="14" locType="sr" hash="-275311578" locEndLn="78" goals="0," />
    <StdViol msg="Prototype of function 'query_user' does not precede function call" ln="78" locFile="/build/../../../../../../../../timer.c" locStartln="78" sev="1" auth="username" locRef="3" rule="MISRA2012-RULE-17_3" lnHash="-174357818" rule.header="A function shall not be declared implicitly" tool="c++test" lineHash="-174357818" unbViolId="77bef05a-5e62-32eb-a441-4cef19a62a88" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b02b52da-2c32-3da4-826f-3fcadf33395b" locEndPos="14" locType="sr" hash="-275311578" locEndLn="78" goals="0," />
    <StdViol msg="Prototype of function 'query_user' does not precede function call" ln="78" locFile="/build/../../../../../../../../timer.c" locStartln="78" sev="3" auth="username" locRef="3" rule="MISRA2004-8_1_b" lnHash="-174357818" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-174357818" unbViolId="8303fe83-e7d4-3d48-84c5-7dd512f29a27" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb1eba58-5c95-30d2-ad73-8b0778a9339e" locEndPos="14" locType="sr" hash="-275311578" locEndLn="78" goals="0," />
    <StdViol msg="Prototype of function 'query_user' does not precede function call" ln="78" locFile="/build/../../../../../../../../timer.c" locStartln="78" sev="3" auth="username" locRef="3" rule="MISRA-071_b" lnHash="-174357818" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-174357818" unbViolId="14aa3ac9-2f44-3205-8ca4-74385af0e0c3" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="33b1d574-3884-3667-82aa-31adb40aec5c" locEndPos="14" locType="sr" hash="-275311578" locEndLn="78" goals="0," />
    <StdViol msg="Prototype of function 'query_user' does not precede function call" ln="78" locFile="/build/../../../../../../../../timer.c" locStartln="78" sev="1" auth="username" locRef="3" rule="MISRAC2012-RULE_17_3-a" lnHash="-174357818" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-174357818" unbViolId="6a24d30b-8f8a-377e-8d40-63a897ac6642" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0335a7af-bc21-3ed7-ac6c-f43848cb6550" locEndPos="14" locType="sr" hash="-275311578" locEndLn="78" goals="0," />
    <StdViol msg="Prototype of function 'query_user' does not precede function call" ln="78" locFile="/build/../../../../../../../../timer.c" locStartln="78" sev="3" auth="username" locRef="3" rule="MISRA2004-8_1_a" lnHash="-174357818" rule.header="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" tool="c++test" lineHash="-174357818" unbViolId="7cd25d51-a71c-328e-bcb6-3b4d69026f50" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9b489b0c-6fa6-3a74-8c5a-db052437bda1" locEndPos="14" locType="sr" hash="-275311578" locEndLn="78" goals="0," />
    <StdViol msg="Prototype of function 'query_user' does not precede function call" ln="78" locFile="/build/../../../../../../../../timer.c" locStartln="78" sev="3" auth="username" locRef="3" rule="MISRA-071_a" lnHash="-174357818" rule.header="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" tool="c++test" lineHash="-174357818" unbViolId="6a941a30-f6e5-384b-b137-7799aa79da5f" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f020dd3c-d633-32a8-b782-8e3b2971d02a" locEndPos="14" locType="sr" hash="-275311578" locEndLn="78" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="80" locFile="/build/../../../../../../../../timer.c" locStartln="80" sev="3" auth="username" locRef="3" rule="JSF-061" lnHash="-1502932978" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1502932978" unbViolId="a106d910-48ea-30eb-8044-37fa6b6ff7a9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="63ac45a4-dd70-3131-8427-e19dae20af4c" locEndPos="1" locType="sr" hash="-275311578" locEndLn="80" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="80" locFile="/build/../../../../../../../../timer.c" locStartln="80" sev="3" auth="username" locRef="3" rule="FORMAT-42" lnHash="-1502932978" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1502932978" unbViolId="5c1106dc-dab4-32a0-89df-add5ba619499" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8d7f109-be8d-3674-86e1-4d2b7c2c2da6" locEndPos="1" locType="sr" hash="-275311578" locEndLn="80" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="80" locFile="/build/../../../../../../../../timer.c" locStartln="80" sev="3" auth="username" locRef="3" rule="JSF-060_a" lnHash="-1502932978" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1502932978" unbViolId="74927f54-c4d9-30b8-82a6-07db90d1198f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7681b266-6ed3-3abd-84af-6e27f22ed5bb" locEndPos="1" locType="sr" hash="-275311578" locEndLn="80" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="80" locFile="/build/../../../../../../../../timer.c" locStartln="80" sev="3" auth="username" locRef="3" rule="FORMAT-43" lnHash="-1502932978" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1502932978" unbViolId="f06f4b35-712f-3972-91f0-2d6b40351bbb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7057f42a-9330-38ea-b62a-ae9dfa8a6ccc" locEndPos="1" locType="sr" hash="-275311578" locEndLn="80" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="80" locFile="/build/../../../../../../../../timer.c" locStartln="80" sev="3" auth="username" locRef="3" rule="JSF-060_b" lnHash="-1502932978" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1502932978" unbViolId="fdcfd3f4-86d4-3b45-84d4-13d66a86bacb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f347b3c3-cf9c-34c0-a0bd-24c703b4acfe" locEndPos="1" locType="sr" hash="-275311578" locEndLn="80" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="80" locFile="/build/../../../../../../../../timer.c" locStartln="80" sev="3" auth="username" locRef="3" rule="FORMAT-02" lnHash="-1502932978" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-1502932978" unbViolId="c19f911f-f239-3b8b-a4a1-30ac5ad88d9a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02d942c7-a92b-376c-bb83-a27587362d61" locEndPos="1" locType="sr" hash="-275311578" locEndLn="80" goals="0," />
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="80" locFile="/build/../../../../../../../../timer.c" locStartln="80" sev="3" auth="username" locRef="3" rule="FORMAT-34" lnHash="-1502932978" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="-1502932978" unbViolId="9ca183bb-a07e-3543-b743-7097c820b039" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90f020c6-a91a-3b49-920e-6d0ff972d048" locEndPos="1" locType="sr" hash="-275311578" locEndLn="80" goals="0," />
    <FlowViol msg="&quot;record&quot; is checked for null after being dereferenced" ln="80" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point of checking for nullity" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="70" rule="AUTOSAR-M0_3_1-j" FirstElSrcRngStartPos="0" lnHash="-1502932978" ruleSCSCMsg="Point of dereferencing" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Do not check for null after dereferencing" FirstElSrcRngStartln="69" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1210340981" lang="cpp" violId="62674e41-b303-3b38-b607-3040cde17da2" locEndPos="0" locEndLn="81" goals="0," locStartln="80" sev="2" locRef="3" tool="c++test" lineHash="-1502932978" unbViolId="879b0d63-d754-3f2e-9cd6-9542e75dbc73" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Important values" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-174357818" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="78" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="78" srcRngEndLn="79" desc="record = query_user();" ElType="!" rngLn="78">
          <ElDescList>
            <ElDesc lineHash="1021803899" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="69" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="69" srcRngEndLn="70" desc="the_record->channel = get_input_digit();" ElType=".C" rngLn="69">
              <Props>
                <Prop key="Tracked variables" val="the_record != null" />
              </Props>
              <Anns>
                <Ann msg="Point of dereferencing" kind="cause" />
                <Ann msg="Important values: the_record != null" kind="var" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="601074313" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="71" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="71" srcRngEndLn="72" desc="return (the_record);" ElType="!" rngLn="71" />
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1502932978" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="80" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="80" srcRngEndLn="81" desc="if (record) {" ElType=".P" rngLn="80">
          <Props>
            <Prop key="Tracked variables" val="record != null" />
          </Props>
          <Anns>
            <Ann msg="Important values: record != null" kind="var" />
            <Ann msg="Point of checking for nullity" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;record&quot; is checked for null after being dereferenced" ln="80" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point of checking for nullity" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="70" rule="BD-PB-DEREF" FirstElSrcRngStartPos="0" lnHash="-1502932978" ruleSCSCMsg="Point of dereferencing" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Do not check for null after dereferencing" FirstElSrcRngStartln="69" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1232557431" lang="cpp" violId="cce8d5fb-f6c2-37fa-a168-837e95472074" locEndPos="0" locEndLn="81" goals="0," locStartln="80" sev="2" locRef="3" tool="c++test" lineHash="-1502932978" unbViolId="4a9c8e1a-5976-3442-a74c-c3b90edb1a9c" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Important values" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-174357818" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="78" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="78" srcRngEndLn="79" desc="record = query_user();" ElType="!" rngLn="78">
          <ElDescList>
            <ElDesc lineHash="1021803899" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="69" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="69" srcRngEndLn="70" desc="the_record->channel = get_input_digit();" ElType=".C" rngLn="69">
              <Props>
                <Prop key="Tracked variables" val="the_record != null" />
              </Props>
              <Anns>
                <Ann msg="Point of dereferencing" kind="cause" />
                <Ann msg="Important values: the_record != null" kind="var" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="601074313" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="71" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="71" srcRngEndLn="72" desc="return (the_record);" ElType="!" rngLn="71" />
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1502932978" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="80" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="80" srcRngEndLn="81" desc="if (record) {" ElType=".P" rngLn="80">
          <Props>
            <Prop key="Tracked variables" val="record != null" />
          </Props>
          <Anns>
            <Ann msg="Important values: record != null" kind="var" />
            <Ann msg="Point of checking for nullity" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;record&quot; is checked for null after being dereferenced" ln="80" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point of checking for nullity" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="70" rule="CWE-476-b" FirstElSrcRngStartPos="0" lnHash="-1502932978" ruleSCSCMsg="Point of dereferencing" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Do not check for null after dereferencing" FirstElSrcRngStartln="69" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="615217209" lang="cpp" violId="45eeb90d-e574-37cf-b452-a817d8f40515" locEndPos="0" locEndLn="81" goals="0," locStartln="80" sev="2" locRef="3" tool="c++test" lineHash="-1502932978" unbViolId="fe5ab876-1194-3b75-9289-88e38d2428f3" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Important values" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-174357818" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="78" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="78" srcRngEndLn="79" desc="record = query_user();" ElType="!" rngLn="78">
          <ElDescList>
            <ElDesc lineHash="1021803899" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="69" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="69" srcRngEndLn="70" desc="the_record->channel = get_input_digit();" ElType=".C" rngLn="69">
              <Props>
                <Prop key="Tracked variables" val="the_record != null" />
              </Props>
              <Anns>
                <Ann msg="Point of dereferencing" kind="cause" />
                <Ann msg="Important values: the_record != null" kind="var" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="601074313" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="71" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="71" srcRngEndLn="72" desc="return (the_record);" ElType="!" rngLn="71" />
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1502932978" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="80" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="80" srcRngEndLn="81" desc="if (record) {" ElType=".P" rngLn="80">
          <Props>
            <Prop key="Tracked variables" val="record != null" />
          </Props>
          <Anns>
            <Ann msg="Important values: record != null" kind="var" />
            <Ann msg="Point of checking for nullity" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;record&quot; is checked for null after being dereferenced" ln="80" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point of checking for nullity" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="70" rule="MISRA2008-0_3_1_f" FirstElSrcRngStartPos="0" lnHash="-1502932978" ruleSCSCMsg="Point of dereferencing" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Do not check for null after dereferencing" FirstElSrcRngStartln="69" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1830976503" lang="cpp" violId="cd0ab4c3-c3d5-3ca3-95a4-9143e0d5f4de" locEndPos="0" locEndLn="81" goals="0," locStartln="80" sev="5" locRef="3" tool="c++test" lineHash="-1502932978" unbViolId="cb46ce29-059a-3690-8287-46e7b64d5787" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Important values" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-174357818" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="78" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="78" srcRngEndLn="79" desc="record = query_user();" ElType="!" rngLn="78">
          <ElDescList>
            <ElDesc lineHash="1021803899" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="69" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="69" srcRngEndLn="70" desc="the_record->channel = get_input_digit();" ElType=".C" rngLn="69">
              <Props>
                <Prop key="Tracked variables" val="the_record != null" />
              </Props>
              <Anns>
                <Ann msg="Point of dereferencing" kind="cause" />
                <Ann msg="Important values: the_record != null" kind="var" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="601074313" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="71" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="71" srcRngEndLn="72" desc="return (the_record);" ElType="!" rngLn="71" />
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1502932978" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="80" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="80" srcRngEndLn="81" desc="if (record) {" ElType=".P" rngLn="80">
          <Props>
            <Prop key="Tracked variables" val="record != null" />
          </Props>
          <Anns>
            <Ann msg="Important values: record != null" kind="var" />
            <Ann msg="Point of checking for nullity" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;record&quot; is checked for null after being dereferenced" ln="80" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point of checking for nullity" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="70" rule="MISRA2012-DIR-4_1_f" FirstElSrcRngStartPos="0" lnHash="-1502932978" ruleSCSCMsg="Point of dereferencing" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Do not check for null after dereferencing" FirstElSrcRngStartln="69" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="810650672" lang="cpp" violId="294b10f3-601e-3bce-926d-daa1b02c8f09" locEndPos="0" locEndLn="81" goals="0," locStartln="80" sev="2" locRef="3" tool="c++test" lineHash="-1502932978" unbViolId="5e9c1fd9-c470-349a-b2aa-184023c01b77" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Important values" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-174357818" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="78" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="78" srcRngEndLn="79" desc="record = query_user();" ElType="!" rngLn="78">
          <ElDescList>
            <ElDesc lineHash="1021803899" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="69" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="69" srcRngEndLn="70" desc="the_record->channel = get_input_digit();" ElType=".C" rngLn="69">
              <Props>
                <Prop key="Tracked variables" val="the_record != null" />
              </Props>
              <Anns>
                <Ann msg="Point of dereferencing" kind="cause" />
                <Ann msg="Important values: the_record != null" kind="var" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="601074313" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="71" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="71" srcRngEndLn="72" desc="return (the_record);" ElType="!" rngLn="71" />
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1502932978" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="80" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="80" srcRngEndLn="81" desc="if (record) {" ElType=".P" rngLn="80">
          <Props>
            <Prop key="Tracked variables" val="record != null" />
          </Props>
          <Anns>
            <Ann msg="Important values: record != null" kind="var" />
            <Ann msg="Point of checking for nullity" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;record&quot; is checked for null after being dereferenced" ln="80" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point of checking for nullity" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="70" rule="MISRAC2012-DIR_4_1-f" FirstElSrcRngStartPos="0" lnHash="-1502932978" ruleSCSCMsg="Point of dereferencing" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Do not check for null after dereferencing" FirstElSrcRngStartln="69" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="331078025" lang="cpp" violId="8698490a-a171-3f7a-8ade-f19c82b9b9c4" locEndPos="0" locEndLn="81" goals="0," locStartln="80" sev="2" locRef="3" tool="c++test" lineHash="-1502932978" unbViolId="439e0359-112b-327d-88c2-893f0c2a5060" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Important values" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-174357818" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="78" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="78" srcRngEndLn="79" desc="record = query_user();" ElType="!" rngLn="78">
          <ElDescList>
            <ElDesc lineHash="1021803899" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="69" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="69" srcRngEndLn="70" desc="the_record->channel = get_input_digit();" ElType=".C" rngLn="69">
              <Props>
                <Prop key="Tracked variables" val="the_record != null" />
              </Props>
              <Anns>
                <Ann msg="Point of dereferencing" kind="cause" />
                <Ann msg="Important values: the_record != null" kind="var" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="601074313" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="71" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="71" srcRngEndLn="72" desc="return (the_record);" ElType="!" rngLn="71" />
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1502932978" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="80" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="80" srcRngEndLn="81" desc="if (record) {" ElType=".P" rngLn="80">
          <Props>
            <Prop key="Tracked variables" val="record != null" />
          </Props>
          <Anns>
            <Ann msg="Important values: record != null" kind="var" />
            <Ann msg="Point of checking for nullity" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Pointer used as a test in if(record)" ln="80" locFile="/build/../../../../../../../../timer.c" locStartln="80" sev="3" auth="username" locRef="3" rule="CODSTA-32" lnHash="-1502932978" rule.header="Do not write logical expressions of the type if(test) or if(!test)  when test is a pointer" tool="c++test" lineHash="-1502932978" unbViolId="68050691-9cf8-3f7c-a102-4a83b9e2bf49" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c164d3db-3899-3c7a-a537-8e8b5b700eb1" locEndPos="5" locType="sr" hash="-275311578" locEndLn="80" goals="0," />
    <StdViol msg="Test of a value against zero should be made explicit" ln="80" locFile="/build/../../../../../../../../timer.c" locStartln="80" sev="3" auth="username" locRef="3" rule="MISRA2004-13_2" lnHash="-1502932978" rule.header="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" tool="c++test" lineHash="-1502932978" unbViolId="d7ef85bd-e53a-3e25-8ea7-9e7410317b9a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c61bd284-9aaf-36d9-a1ae-c948752ab697" locEndPos="5" locType="sr" hash="-275311578" locEndLn="80" goals="0," />
    <StdViol msg="Test of a value against zero should be made explicit" ln="80" locFile="/build/../../../../../../../../timer.c" locStartln="80" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_14_4-a" lnHash="-1502932978" rule.header="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" tool="c++test" lineHash="-1502932978" unbViolId="0b0950dd-57a5-37b6-8472-49a798c4e2a9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7eba6b8c-0082-3025-8e61-d3fc00fe971b" locEndPos="5" locType="sr" hash="-275311578" locEndLn="80" goals="0," />
    <StdViol msg="Test of a value against zero should be made explicit" ln="80" locFile="/build/../../../../../../../../timer.c" locStartln="80" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-14_4" lnHash="-1502932978" rule.header="The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type" tool="c++test" lineHash="-1502932978" unbViolId="89405a6f-f8cc-357a-b8c5-a507aa1c9f2c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8eb9781-4077-31f1-9f76-d817fef8c37a" locEndPos="5" locType="sr" hash="-275311578" locEndLn="80" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="82" locFile="/build/../../../../../../../../timer.c" locStartln="82" sev="3" auth="username" locRef="3" rule="JSF-061" lnHash="-1396539305" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1396539305" unbViolId="958a495d-712a-3dfd-b656-5f7d783bb85e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d497c88a-e75d-3ba5-8812-8129d3218545" locEndPos="1" locType="sr" hash="-275311578" locEndLn="82" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="82" locFile="/build/../../../../../../../../timer.c" locStartln="82" sev="3" auth="username" locRef="3" rule="FORMAT-42" lnHash="-1396539305" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1396539305" unbViolId="608fd274-ae19-3bd7-adc9-e40f1843e194" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="01d4abb4-18d4-3901-8339-6b9f0d409d35" locEndPos="1" locType="sr" hash="-275311578" locEndLn="82" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="82" locFile="/build/../../../../../../../../timer.c" locStartln="82" sev="3" auth="username" locRef="3" rule="JSF-060_a" lnHash="-1396539305" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1396539305" unbViolId="80f3815c-6bbe-378c-bb48-9bb2032e95af" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43532773-fc6d-33e9-a18c-eaea0139c572" locEndPos="1" locType="sr" hash="-275311578" locEndLn="82" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="82" locFile="/build/../../../../../../../../timer.c" locStartln="82" sev="3" auth="username" locRef="3" rule="FORMAT-43" lnHash="-1396539305" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1396539305" unbViolId="2c4c8d7d-3c5a-36eb-9e24-5171546e9f14" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="80bc4772-028c-3be0-bb80-22cf2b1c7fdb" locEndPos="1" locType="sr" hash="-275311578" locEndLn="82" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="82" locFile="/build/../../../../../../../../timer.c" locStartln="82" sev="3" auth="username" locRef="3" rule="JSF-060_b" lnHash="-1396539305" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1396539305" unbViolId="fcebcf88-d1ad-3c8c-adcb-b3872b8c7ef1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d56fa907-032f-32f5-ab11-8b6ce0dffaf5" locEndPos="1" locType="sr" hash="-275311578" locEndLn="82" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="82" locFile="/build/../../../../../../../../timer.c" locStartln="82" sev="3" auth="username" locRef="3" rule="FORMAT-02" lnHash="-1396539305" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-1396539305" unbViolId="420c1434-3aa4-3903-9480-6b2648e17232" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a2a218b-471b-34a0-b133-af4f0812cc52" locEndPos="1" locType="sr" hash="-275311578" locEndLn="82" goals="0," />
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="82" locFile="/build/../../../../../../../../timer.c" locStartln="82" sev="3" auth="username" locRef="3" rule="FORMAT-34" lnHash="-1396539305" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="-1396539305" unbViolId="3ef2eec6-822b-3e77-87a0-082b5ffa8991" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc9b4299-bc7f-3162-840a-ec27751e59d2" locEndPos="1" locType="sr" hash="-275311578" locEndLn="82" goals="0," />
    <StdViol msg="Put the closing brace '}' on its own line" ln="82" locFile="/build/../../../../../../../../timer.c" locStartln="82" sev="3" auth="username" locRef="3" rule="JSF-061" lnHash="-1396539305" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1396539305" unbViolId="6d1c626a-2ad5-368c-8426-a8ba7f70a9cb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="232cb5b5-d8d5-3be5-95f0-f26b3d0f9b98" locEndPos="5" locType="sr" hash="-275311578" locEndLn="82" goals="0," />
    <StdViol msg="Put the closing brace '}' on its own line" ln="82" locFile="/build/../../../../../../../../timer.c" locStartln="82" sev="3" auth="username" locRef="3" rule="FORMAT-42" lnHash="-1396539305" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1396539305" unbViolId="93f95453-e974-333c-a225-b71f72b42bc2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3fe76384-2ab0-3e0a-a3bd-7d0449c8ee63" locEndPos="5" locType="sr" hash="-275311578" locEndLn="82" goals="0," />
    <StdViol msg="Put the closing brace '}' on its own line" ln="82" locFile="/build/../../../../../../../../timer.c" locStartln="82" sev="3" auth="username" locRef="3" rule="JSF-060_a" lnHash="-1396539305" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1396539305" unbViolId="b36351f2-9725-37d5-8a05-ffb04b480200" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db8a9b2d-5406-370d-87db-cd1fdea081e4" locEndPos="5" locType="sr" hash="-275311578" locEndLn="82" goals="0," />
    <StdViol msg="Put the closing brace '}' on its own line" ln="82" locFile="/build/../../../../../../../../timer.c" locStartln="82" sev="3" auth="username" locRef="3" rule="FORMAT-03" lnHash="-1396539305" rule.header="Place a closing brace '}' on its own line" tool="c++test" lineHash="-1396539305" unbViolId="f3f28f27-d28d-3962-bab9-f7909720f9dd" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26d918ca-9b45-3f0a-a30a-0db26a6b7451" locEndPos="5" locType="sr" hash="-275311578" locEndLn="82" goals="0," />
    <StdViol msg="Provide at most one exit point in 'add_timer' function" ln="83" locFile="/build/../../../../../../../../timer.c" locStartln="83" sev="3" auth="username" locRef="3" rule="CODSTA-91" lnHash="-992348185" rule.header="A function shall have at most one exit point" tool="c++test" lineHash="-992348185" unbViolId="c3937f90-58db-3977-b777-912bff1808b2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8e5f5ab-beb4-3d95-b784-d7a37d1b70a3" locEndPos="9" locType="sr" hash="-275311578" locEndLn="83" goals="0," />
    <StdViol msg="Provide only one exit point in 'add_timer' function" ln="83" locFile="/build/../../../../../../../../timer.c" locStartln="83" sev="3" auth="username" locRef="3" rule="MISRA2004-14_7" lnHash="-992348185" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-992348185" unbViolId="fad3b3ef-7bb1-35ce-8f94-5d49bd4a1965" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3230e918-7d54-309c-86aa-85ee6ff05429" locEndPos="9" locType="sr" hash="-275311578" locEndLn="83" goals="0," />
    <StdViol msg="Provide only one exit point in 'add_timer' function" ln="83" locFile="/build/../../../../../../../../timer.c" locStartln="83" sev="2" auth="username" locRef="3" rule="MISRA2008-6_6_5" lnHash="-992348185" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-992348185" unbViolId="b98901d0-9af5-3206-8745-cf1cd87f1664" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d648986-ce8f-359b-a580-b2880c9d2963" locEndPos="9" locType="sr" hash="-275311578" locEndLn="83" goals="0," />
    <StdViol msg="Provide only one exit point in 'add_timer' function" ln="83" locFile="/build/../../../../../../../../timer.c" locStartln="83" sev="4" auth="username" locRef="3" rule="MISRAC2012-RULE_15_5-a" lnHash="-992348185" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-992348185" unbViolId="485be6fb-0c25-343b-bfe3-fa77e5f871e5" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e765dd27-2468-31ee-9237-65a594daebf4" locEndPos="9" locType="sr" hash="-275311578" locEndLn="83" goals="0," />
    <StdViol msg="Provide only one exit point in 'add_timer' function" ln="83" locFile="/build/../../../../../../../../timer.c" locStartln="83" sev="4" auth="username" locRef="3" rule="MISRA2012-RULE-15_5" lnHash="-992348185" rule.header="A function should have a single point of exit at the end" tool="c++test" lineHash="-992348185" unbViolId="09d45978-a31b-3aa8-891b-f6f65a83bf74" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2523ef0f-d673-314a-9328-82faf3102009" locEndPos="9" locType="sr" hash="-275311578" locEndLn="83" goals="0," />
    <StdViol msg="Provide only one exit point in 'add_timer' function" ln="83" locFile="/build/../../../../../../../../timer.c" locStartln="83" sev="3" auth="username" locRef="3" rule="JSF-113" lnHash="-992348185" rule.header="Functions will have a single exit point" tool="c++test" lineHash="-992348185" unbViolId="1e5ada8d-b083-3fd2-9217-682dcb89655b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3cf97afe-3c13-3fcd-862e-a5117a782e53" locEndPos="9" locType="sr" hash="-275311578" locEndLn="83" goals="0," />
    <StdViol msg="'return' statement should be used with parenthesis" ln="83" locFile="/build/../../../../../../../../timer.c" locStartln="83" sev="3" auth="username" locRef="3" rule="FORMAT-25_b" lnHash="-992348185" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="-992348185" unbViolId="cd8017d0-4470-3365-bf98-6e8e9e2d9e81" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e9ac133-b13a-31cd-b01f-d1bbbb3b45a9" locEndPos="9" locType="sr" hash="-275311578" locEndLn="83" goals="0," />
    <StdViol msg="Provide at most one exit point in 'add_timer' function" ln="85" locFile="/build/../../../../../../../../timer.c" locStartln="85" sev="3" auth="username" locRef="3" rule="CODSTA-91" lnHash="-1256396037" rule.header="A function shall have at most one exit point" tool="c++test" lineHash="-1256396037" unbViolId="420912b3-3444-3a7f-93d0-b26958484295" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a459e71-64df-395e-bb63-cec274541d15" locEndPos="5" locType="sr" hash="-275311578" locEndLn="85" goals="0," />
    <StdViol msg="Provide only one exit point in 'add_timer' function" ln="85" locFile="/build/../../../../../../../../timer.c" locStartln="85" sev="3" auth="username" locRef="3" rule="MISRA2004-14_7" lnHash="-1256396037" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-1256396037" unbViolId="39efa45e-a75a-3282-95d0-17cdc8edbb57" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9124fc43-8f41-3c89-a3ae-89ba7d7a39d2" locEndPos="5" locType="sr" hash="-275311578" locEndLn="85" goals="0," />
    <StdViol msg="Provide only one exit point in 'add_timer' function" ln="85" locFile="/build/../../../../../../../../timer.c" locStartln="85" sev="2" auth="username" locRef="3" rule="MISRA2008-6_6_5" lnHash="-1256396037" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-1256396037" unbViolId="f5599b79-2763-3970-9e2b-05271f0aba13" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a54e7cb-9c0b-34d4-a572-f8ad0daf0ec5" locEndPos="5" locType="sr" hash="-275311578" locEndLn="85" goals="0," />
    <StdViol msg="Provide only one exit point in 'add_timer' function" ln="85" locFile="/build/../../../../../../../../timer.c" locStartln="85" sev="4" auth="username" locRef="3" rule="MISRAC2012-RULE_15_5-a" lnHash="-1256396037" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-1256396037" unbViolId="4f3eba05-24bb-318a-a8cd-45655fc93cca" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1337fef-c4bb-3de7-962e-a5ed0be5d5a8" locEndPos="5" locType="sr" hash="-275311578" locEndLn="85" goals="0," />
    <StdViol msg="Provide only one exit point in 'add_timer' function" ln="85" locFile="/build/../../../../../../../../timer.c" locStartln="85" sev="4" auth="username" locRef="3" rule="MISRA2012-RULE-15_5" lnHash="-1256396037" rule.header="A function should have a single point of exit at the end" tool="c++test" lineHash="-1256396037" unbViolId="efc45096-039b-3ff2-a21b-cc8a8dd2b684" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9f4a467-0355-3d14-aec8-c411f355469f" locEndPos="5" locType="sr" hash="-275311578" locEndLn="85" goals="0," />
    <StdViol msg="Provide only one exit point in 'add_timer' function" ln="85" locFile="/build/../../../../../../../../timer.c" locStartln="85" sev="3" auth="username" locRef="3" rule="JSF-113" lnHash="-1256396037" rule.header="Functions will have a single exit point" tool="c++test" lineHash="-1256396037" unbViolId="39ab6a88-b2a1-38e0-9fce-5fbcd6779041" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6553cf49-e4a4-336b-96e0-86f076645bd7" locEndPos="5" locType="sr" hash="-275311578" locEndLn="85" goals="0," />
    <StdViol msg="'return' statement should be used with parenthesis" ln="85" locFile="/build/../../../../../../../../timer.c" locStartln="85" sev="3" auth="username" locRef="3" rule="FORMAT-25_b" lnHash="-1256396037" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="-1256396037" unbViolId="27730800-3bc0-3797-9ed0-f20b8519fd80" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13b5a8c7-1ed2-3793-9847-f60b1b24ec2d" locEndPos="5" locType="sr" hash="-275311578" locEndLn="85" goals="0," />
    <StdViol msg="The 'add_timer_record' function should be preceded by a comment that contains the '@brief' tag" ln="88" locFile="/build/../../../../../../../../timer.c" locStartln="88" sev="3" auth="username" locRef="3" rule="COMMENT-14" lnHash="2049209490" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="2049209490" unbViolId="9a9d79c8-f7bc-3cf3-876e-15691806f0ae" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1453647c-00b8-3a6c-91a9-73b6c7dff26e" locEndPos="6" locType="sr" hash="-275311578" locEndLn="88" goals="0," />
    <StdViol msg="The 'add_timer_record' function should be preceded by a comment that contains the '@brief' tag" ln="88" locFile="/build/../../../../../../../../timer.c" locStartln="88" sev="2" auth="username" locRef="3" rule="AUTOSAR-A2_7_3-a" lnHash="2049209490" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="2049209490" unbViolId="98f108b6-376e-3383-9762-3536f4c81671" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="895310cd-98ca-3a25-8d78-558b6f89ab03" locEndPos="6" locType="sr" hash="-275311578" locEndLn="88" goals="0," />
    <StdViol msg="The 'tr' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="88" locFile="/build/../../../../../../../../timer.c" locStartln="88" sev="3" auth="username" locRef="3" rule="COMMENT-14_b" lnHash="2049209490" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="2049209490" unbViolId="63371fbd-5574-397d-a307-0f6fea730fc9" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ad8a8af-7c58-3c3e-8027-74ae00b9ad4c" locEndPos="6" locType="sr" hash="-275311578" locEndLn="88" goals="0," />
    <StdViol msg="The 'tr' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="88" locFile="/build/../../../../../../../../timer.c" locStartln="88" sev="2" auth="username" locRef="3" rule="AUTOSAR-A2_7_3-b" lnHash="2049209490" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="2049209490" unbViolId="e34e2e7f-0b6d-37da-955a-35a0bdde140e" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e0f2b5c-56c6-367c-95f6-5bcb327dbdad" locEndPos="6" locType="sr" hash="-275311578" locEndLn="88" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'add_timer_record'" ln="88" locFile="/build/../../../../../../../../timer.c" locStartln="88" sev="3" auth="username" locRef="3" rule="FORMAT-28" lnHash="2049209490" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="2049209490" unbViolId="33d14e2f-aebe-37b1-b6b5-3cbcce5dbe84" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7f27362-d1e3-3f77-b040-c3f2c11cdb5f" locEndPos="6" locType="sr" hash="-275311578" locEndLn="88" goals="0," />
    <StdViol msg="Function 'add_timer_record' has Cyclomatic Complexity value: 2" ln="88" locFile="/build/../../../../../../../../timer.c" locStartln="88" sev="5" auth="username" locRef="3" rule="METRICS-29" lnHash="2049209490" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="2049209490" unbViolId="a653c3c1-9359-3990-b378-6fc6ef3ee48c" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e15fb10-9504-3e5a-81a1-d02add65a4e7" locEndPos="6" locType="sr" hash="-275311578" locEndLn="88" goals="0," />
    <StdViol msg="Function 'add_timer_record' has Essential Complexity value: 1" ln="88" locFile="/build/../../../../../../../../timer.c" locStartln="88" sev="5" auth="username" locRef="3" rule="METRICS-33" lnHash="2049209490" rule.header="Report Essential Complexity" tool="c++test" lineHash="2049209490" unbViolId="da9e2fbe-f0b7-3247-a117-aeee09331f30" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="196e50b0-7f28-3cc4-87eb-a967ad25c4fc" locEndPos="6" locType="sr" hash="-275311578" locEndLn="88" goals="0," />
    <StdViol msg="Number of blocks of comments per statement in the function 'add_timer_record' : 0.0" ln="88" locFile="/build/../../../../../../../../timer.c" locStartln="88" sev="3" auth="username" locRef="3" rule="METRICS-41" lnHash="2049209490" rule.header="The number of blocks of comments before and inside function to the number of statements in function should be > 0.2" tool="c++test" lineHash="2049209490" unbViolId="5483e92d-28de-3e7c-a3f1-fa8e3c516348" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0244758-45e4-3a92-ab86-1e001bcccf6b" locEndPos="6" locType="sr" hash="-275311578" locEndLn="88" goals="0," />
    <StdViol msg="The value of Halstead's delivered bugs (B) for function 'add_timer_record' is 0.07" ln="88" locFile="/build/../../../../../../../../timer.c" locStartln="88" sev="3" auth="username" locRef="3" rule="METRICS-43" lnHash="2049209490" rule.header="Report the value of Halstead's delivered bugs (B) for a function" tool="c++test" lineHash="2049209490" unbViolId="440f12a3-e7ba-361d-8310-1d674a264bc1" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a63f292b-526f-306b-8a7c-c5f2a2ca3fb2" locEndPos="6" locType="sr" hash="-275311578" locEndLn="88" goals="0," />
    <StdViol msg="Naming convention not followed: add_timer_record" ln="88" locFile="/build/../../../../../../../../timer.c" locStartln="88" sev="3" auth="username" locRef="3" rule="NAMING-17" lnHash="2049209490" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="2049209490" unbViolId="97f01f7d-7e5b-3906-8fc0-0323e1d0f8db" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="269a161d-e2d0-31d7-91af-5b26de467939" locEndPos="6" locType="sr" hash="-275311578" locEndLn="88" goals="0," />
    <StdViol msg="The function 'add_timer_record' is referenced only in the translation unit where it is defined" ln="88" locFile="/build/../../../../../../../../timer.c" locStartln="88" sev="4" auth="username" locRef="3" rule="MISRA2012-RULE-8_7" lnHash="2049209490" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="2049209490" unbViolId="15d674b5-a546-3346-a0e4-ea7736416340" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="fc712620-b7e4-3292-b810-39e4a80d1cac" locEndPos="6" locType="sr" hash="-275311578" locEndLn="88" goals="0," />
    <StdViol msg="The function 'add_timer_record' is referenced only in the translation unit where it is defined" ln="88" locFile="/build/../../../../../../../../timer.c" locStartln="88" sev="4" auth="username" locRef="3" rule="GLOBAL-AVOIDEXTERN" lnHash="2049209490" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="2049209490" unbViolId="010ed1cf-d47c-33bb-ab37-f897d87e852b" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="989677d8-39b9-343c-8ca1-2129fc4f0279" locEndPos="6" locType="sr" hash="-275311578" locEndLn="88" goals="0," />
    <StdViol msg="The function 'add_timer_record' is referenced only in the translation unit where it is defined" ln="88" locFile="/build/../../../../../../../../timer.c" locStartln="88" sev="4" auth="username" locRef="3" rule="MISRAC2012-RULE_8_7-a" lnHash="2049209490" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="2049209490" unbViolId="e10691ba-a659-310d-8939-fcc6e9efcf87" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="3fc3932e-0eb2-3e15-b4a4-b6316fc1ffe9" locEndPos="6" locType="sr" hash="-275311578" locEndLn="88" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared: tr" ln="88" locFile="/build/../../../../../../../../timer.c" locStartln="88" sev="3" auth="username" locRef="3" rule="CODSTA-94" lnHash="2049209490" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="2049209490" unbViolId="472a387a-f335-3fab-8576-6642866004c4" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71a3271c-f69a-3dc4-8165-6b1847318a92" locEndPos="44" locType="sr" hash="-275311578" locEndLn="88" goals="0," />
    <StdViol msg="The parameter of pointer type is declared: tr" ln="88" locFile="/build/../../../../../../../../timer.c" locStartln="88" sev="3" auth="username" locRef="3" rule="CODSTA-95" lnHash="2049209490" rule.header="Do not declare pointer type" tool="c++test" lineHash="2049209490" unbViolId="8a6d436c-695b-34d5-97d8-f776eb5b864e" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2fcf578b-669b-3bbd-bd73-2f4aa2eba3e3" locEndPos="44" locType="sr" hash="-275311578" locEndLn="88" goals="0," />
    <StdViol msg="Declare parameter 'tr' as const" ln="88" locFile="/build/../../../../../../../../timer.c" locStartln="88" sev="3" auth="username" locRef="3" rule="CERT_C-DCL00-a" lnHash="2049209490" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="2049209490" unbViolId="8ed8f25e-45bb-3bb1-a5c5-a022a5af1e76" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4147e54-5b92-32a1-8c2f-145c642e2d6d" locEndPos="44" locType="sr" hash="-275311578" locEndLn="88" goals="0," />
    <StdViol msg="Declare parameter 'tr' as const" ln="88" locFile="/build/../../../../../../../../timer.c" locStartln="88" sev="2" auth="username" locRef="3" rule="AUTOSAR-A7_1_1-a" lnHash="2049209490" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="2049209490" unbViolId="8ead2cac-526b-3496-be78-db2f1d84937a" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c82ae40d-ae45-3e4a-ae08-f6240bec45c6" locEndPos="44" locType="sr" hash="-275311578" locEndLn="88" goals="0," />
    <StdViol msg="Declare parameter 'tr' as const" ln="88" locFile="/build/../../../../../../../../timer.c" locStartln="88" sev="2" auth="username" locRef="3" rule="MISRA2008-7_1_1" lnHash="2049209490" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="2049209490" unbViolId="5e8de613-4d52-3b1a-85ae-8ceefde66ced" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ecc3ca9-59bd-3aec-9ca3-14813027d2ab" locEndPos="44" locType="sr" hash="-275311578" locEndLn="88" goals="0," />
    <StdViol msg="Declare parameter 'tr' as const" ln="88" locFile="/build/../../../../../../../../timer.c" locStartln="88" sev="3" auth="username" locRef="3" rule="CODSTA-CPP-53" lnHash="2049209490" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="2049209490" unbViolId="15eae449-8a9f-3eb4-b638-8db0048ba6b4" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="314023c1-74a4-382e-9975-f4269652493e" locEndPos="44" locType="sr" hash="-275311578" locEndLn="88" goals="0," />
    <StdViol msg="Declare parameter 'tr' as const" ln="88" locFile="/build/../../../../../../../../timer.c" locStartln="88" sev="3" auth="username" locRef="3" rule="HICPP-7_1_2-a" lnHash="2049209490" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="2049209490" unbViolId="2bd1b567-30b5-3584-84e5-91caa0907610" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4d2186b-6e28-3fd3-86e1-e13e1f00cff3" locEndPos="44" locType="sr" hash="-275311578" locEndLn="88" goals="0," />
    <StdViol msg="Parameter 'tr' is not validated before use" ln="88" locFile="/build/../../../../../../../../timer.c" locStartln="88" sev="3" auth="username" locRef="3" rule="CERT_C-API00-a" lnHash="2049209490" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="2049209490" unbViolId="212d2dd5-86ea-3107-acf0-9c8a9e9f3dbe" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed956627-86d1-3c19-b743-a9cb2984811f" locEndPos="44" locType="sr" hash="-275311578" locEndLn="88" goals="0," />
    <StdViol msg="Parameter 'tr' is not validated before use" ln="88" locFile="/build/../../../../../../../../timer.c" locStartln="88" sev="3" auth="username" locRef="3" rule="CODSTA-86" lnHash="2049209490" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="2049209490" unbViolId="645e4a5d-2bbe-3fb5-8526-ab60b8efc10b" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b53c6ba-5197-3d6e-a8da-d2887d3efaf3" locEndPos="44" locType="sr" hash="-275311578" locEndLn="88" goals="0," />
    <StdViol msg="The 'tr' identifier should have the 'p' prefix" ln="88" locFile="/build/../../../../../../../../timer.c" locStartln="88" sev="3" auth="username" locRef="3" rule="NAMING-HN-34" lnHash="2049209490" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="2049209490" unbViolId="ec745f5d-94dd-3b07-b05a-4de6222d2ec6" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa2f2cd2-ba43-3d2a-badf-87368273f325" locEndPos="44" locType="sr" hash="-275311578" locEndLn="88" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="89" locFile="/build/../../../../../../../../timer.c" locStartln="89" sev="3" auth="username" locRef="3" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="263b4ee2-d77a-364f-8e18-44bc8c3eb86e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0321510-38da-3f71-83ce-919496095c50" locEndPos="1" locType="sr" hash="-275311578" locEndLn="89" goals="0," />
    <StdViol msg="#ifdef pre-processor directive should not be used" ln="90" locFile="/build/../../../../../../../../timer.c" locStartln="90" sev="3" auth="username" locRef="3" rule="PREPROC-26" lnHash="-1900461572" rule.header="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" tool="c++test" lineHash="-1900461572" unbViolId="81ef5fdf-8d3d-3d45-bdc2-33171d275349" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="25ebeaec-f2db-310a-9a42-3015bf9b6888" locEndPos="1" locType="sr" hash="-275311578" locEndLn="90" goals="0," />
    <StdViol msg="#ifdef pre-processor directive should not be used" ln="90" locFile="/build/../../../../../../../../timer.c" locStartln="90" sev="2" auth="username" locRef="3" rule="AUTOSAR-A16_0_1-a" lnHash="-1900461572" rule.header="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" tool="c++test" lineHash="-1900461572" unbViolId="611be5a8-b84e-3ebe-b104-4ca9bd395e45" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e0b5cde-781b-380b-b000-ee613e0b44b3" locEndPos="1" locType="sr" hash="-275311578" locEndLn="90" goals="0," />
    <StdViol msg="The #ifdef preprocessor directive is used" ln="90" locFile="/build/../../../../../../../../timer.c" locStartln="90" sev="2" auth="username" locRef="3" rule="MISRA2008-16_2_1_c" lnHash="-1900461572" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="-1900461572" unbViolId="f4553de8-d93c-39ed-bd49-a470759073e7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f2a45ae-b805-397c-9901-6eb9bd3b807f" locEndPos="1" locType="sr" hash="-275311578" locEndLn="90" goals="0," />
    <StdViol msg="The #ifdef preprocessor directive is used" ln="90" locFile="/build/../../../../../../../../timer.c" locStartln="90" sev="3" auth="username" locRef="3" rule="HICPP-16_1_1-c" lnHash="-1900461572" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="-1900461572" unbViolId="e3bcfa4f-f31d-3942-abd9-21e776125d46" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b949448-f693-3cae-847f-c8bc0e3aa39d" locEndPos="1" locType="sr" hash="-275311578" locEndLn="90" goals="0," />
    <StdViol msg="The #ifdef preprocessor directive is used" ln="90" locFile="/build/../../../../../../../../timer.c" locStartln="90" sev="2" auth="username" locRef="3" rule="JSF-026" lnHash="-1900461572" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="-1900461572" unbViolId="cb5a2d15-6153-3e6d-8adc-175bdc02330a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71c904c0-10b3-3453-bcde-874c5fc5f462" locEndPos="1" locType="sr" hash="-275311578" locEndLn="90" goals="0," />
    <StdViol msg="The #ifdef preprocessor directive is used" ln="90" locFile="/build/../../../../../../../../timer.c" locStartln="90" sev="3" auth="username" locRef="3" rule="PREPROC-11" lnHash="-1900461572" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="-1900461572" unbViolId="37eb7e12-ba70-3f0e-b1d1-cac41f293ede" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="293ffa08-9c16-380e-adb5-3f6e88762704" locEndPos="1" locType="sr" hash="-275311578" locEndLn="90" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="92" locFile="/build/../../../../../../../../timer.c" locStartln="92" sev="4" auth="username" locRef="3" rule="MISRA2008-3_9_2" lnHash="-546075861" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-546075861" unbViolId="7c5254db-bada-3166-b3fc-5ae6bbba3cdf" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a04032c-dff9-3663-8022-ee887dadeaf0" locEndPos="9" locType="sr" hash="-275311578" locEndLn="92" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="92" locFile="/build/../../../../../../../../timer.c" locStartln="92" sev="3" auth="username" locRef="3" rule="MISRA-013" lnHash="-546075861" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-546075861" unbViolId="a7868ce6-0810-3f9a-87c5-1f83e26ba747" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a28a209b-0cc6-3936-ace8-01b994d181ea" locEndPos="9" locType="sr" hash="-275311578" locEndLn="92" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="92" locFile="/build/../../../../../../../../timer.c" locStartln="92" sev="3" auth="username" locRef="3" rule="CODSTA-223" lnHash="-546075861" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-546075861" unbViolId="f8af8c96-c8af-3993-aa08-12d84d7ad77d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="35bdc457-36c5-3a13-ab41-b2576f007d3a" locEndPos="9" locType="sr" hash="-275311578" locEndLn="92" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="92" locFile="/build/../../../../../../../../timer.c" locStartln="92" sev="2" auth="username" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="-546075861" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-546075861" unbViolId="557d2ac7-b1f6-39c2-8a84-7d6b6e5cc6ee" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7bbd7c21-79e4-38b5-93d5-237e5f26b700" locEndPos="9" locType="sr" hash="-275311578" locEndLn="92" goals="0," />
    <StdViol msg="Hard coded value: 50" ln="92" locFile="/build/../../../../../../../../timer.c" locStartln="92" sev="3" auth="username" locRef="3" rule="CODSTA-29" lnHash="-546075861" rule.header="&quot;#define&quot; or enum constants should be used instead of hard coded values whenever possible" tool="c++test" lineHash="-546075861" unbViolId="f6acb666-5a0a-342a-9b80-8ef33a8800ad" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6cddace-568e-3903-a308-8bf44f98fdda" locEndPos="14" locType="sr" hash="-275311578" locEndLn="92" goals="0," />
    <StdViol msg="Hard coded value: 50" ln="92" locFile="/build/../../../../../../../../timer.c" locStartln="92" sev="3" auth="username" locRef="3" rule="CERT_C-DCL06-a" lnHash="-546075861" rule.header="&quot;#define&quot; or enum constants should be used instead of hard coded values whenever possible" tool="c++test" lineHash="-546075861" unbViolId="a467ba2f-f085-3f77-8d50-f84971f422bf" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a967c83-8e60-32de-9dc5-ef73ee6115d6" locEndPos="14" locType="sr" hash="-275311578" locEndLn="92" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="96" locFile="/build/../../../../../../../../timer.c" locStartln="96" sev="3" auth="username" locRef="3" rule="PREPROC-10_b" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="4d4479be-ce4c-34e3-98ad-d45cc2db8cd0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e248580f-0d93-35f3-b065-d8b84cd28f92" locEndPos="1" locType="sr" hash="-275311578" locEndLn="96" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="96" locFile="/build/../../../../../../../../timer.c" locStartln="96" sev="2" auth="username" locRef="3" rule="MISRA2008-16_2_1_d" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="62d6bd17-61be-3abe-9626-5393764e802c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fafd09e2-fdea-3deb-8aaf-85e9394d13e9" locEndPos="1" locType="sr" hash="-275311578" locEndLn="96" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="96" locFile="/build/../../../../../../../../timer.c" locStartln="96" sev="3" auth="username" locRef="3" rule="JSF-028_b" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="52b148fa-d6ec-3281-a117-5e16f9ea4150" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ec01606-1fca-323a-83bc-03a21b0a687e" locEndPos="1" locType="sr" hash="-275311578" locEndLn="96" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="96" locFile="/build/../../../../../../../../timer.c" locStartln="96" sev="3" auth="username" locRef="3" rule="HICPP-16_1_1-e" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="117b89fb-e1a3-3829-be0b-5ff2f8492293" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a10f6508-2b09-3f98-8d46-667776130ee2" locEndPos="1" locType="sr" hash="-275311578" locEndLn="96" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="96" locFile="/build/../../../../../../../../timer.c" locStartln="96" sev="3" auth="username" locRef="3" rule="PREPROC-26" lnHash="1098672373" rule.header="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" tool="c++test" lineHash="1098672373" unbViolId="e83cccfb-176e-3940-bc38-b9244101acdc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e17d472-8963-37af-bf7f-1a28e793c60c" locEndPos="1" locType="sr" hash="-275311578" locEndLn="96" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="96" locFile="/build/../../../../../../../../timer.c" locStartln="96" sev="2" auth="username" locRef="3" rule="AUTOSAR-A16_0_1-a" lnHash="1098672373" rule.header="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" tool="c++test" lineHash="1098672373" unbViolId="16ae5a82-b236-31b6-81cb-9adbcdbc50dd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eeb341b4-155f-360a-9c0a-c27af00dcac7" locEndPos="1" locType="sr" hash="-275311578" locEndLn="96" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="97" locFile="/build/../../../../../../../../timer.c" locStartln="97" sev="3" auth="username" locRef="3" rule="JSF-061" lnHash="-1600799721" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1600799721" unbViolId="638972b0-13dd-39c1-af39-48dc2841e277" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b40e009f-9c84-37b4-9a33-41cd6af5685e" locEndPos="1" locType="sr" hash="-275311578" locEndLn="97" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="97" locFile="/build/../../../../../../../../timer.c" locStartln="97" sev="3" auth="username" locRef="3" rule="FORMAT-42" lnHash="-1600799721" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1600799721" unbViolId="c97a2a4a-0aff-3392-a0aa-aa6dd321ea6c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4928f9f9-4112-33a8-82c3-4236e58d6d14" locEndPos="1" locType="sr" hash="-275311578" locEndLn="97" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="97" locFile="/build/../../../../../../../../timer.c" locStartln="97" sev="3" auth="username" locRef="3" rule="JSF-060_a" lnHash="-1600799721" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1600799721" unbViolId="70573060-88d8-39d7-bd48-0654d0d7682b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9855a98f-7fd9-3a88-abc6-df4b64dd8c02" locEndPos="1" locType="sr" hash="-275311578" locEndLn="97" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="97" locFile="/build/../../../../../../../../timer.c" locStartln="97" sev="3" auth="username" locRef="3" rule="FORMAT-43" lnHash="-1600799721" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1600799721" unbViolId="da18dcca-67cf-3e39-90f0-3a5228e15bf6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="574c26ba-0de4-3238-8aa9-10d893b8662d" locEndPos="1" locType="sr" hash="-275311578" locEndLn="97" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="97" locFile="/build/../../../../../../../../timer.c" locStartln="97" sev="3" auth="username" locRef="3" rule="JSF-060_b" lnHash="-1600799721" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1600799721" unbViolId="44a7523c-2a61-3e09-ba0f-1ff54c9f7867" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f4918db-7697-3cef-a003-aeb7f4ae0e21" locEndPos="1" locType="sr" hash="-275311578" locEndLn="97" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="97" locFile="/build/../../../../../../../../timer.c" locStartln="97" sev="3" auth="username" locRef="3" rule="FORMAT-02" lnHash="-1600799721" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-1600799721" unbViolId="b5585929-982a-3528-b03b-6e424ba8b0a2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7af6f6b2-b07d-3133-a0bd-ae59127d7d0e" locEndPos="1" locType="sr" hash="-275311578" locEndLn="97" goals="0," />
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="97" locFile="/build/../../../../../../../../timer.c" locStartln="97" sev="3" auth="username" locRef="3" rule="FORMAT-34" lnHash="-1600799721" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="-1600799721" unbViolId="dd0739f2-0cad-30ae-baf2-0089cb6f9192" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9c6fa41-21df-37e8-b6b9-23b6ad24f216" locEndPos="1" locType="sr" hash="-275311578" locEndLn="97" goals="0," />
    <StdViol msg="Global array 'timer_records' is modified in function 'add_timer_record'" ln="98" locFile="/build/../../../../../../../../timer.c" locStartln="98" sev="3" auth="username" locRef="3" rule="CODSTA-27" lnHash="-1933903777" rule.header="Avoid functions that modify global variables" tool="c++test" lineHash="-1933903777" unbViolId="0de3c83c-aefe-3a0b-87ce-3932130c3cef" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d29be2e8-e458-3743-b7ed-4d8c4adb9234" locEndPos="9" locType="sr" hash="-275311578" locEndLn="98" goals="0," />
    <StdViol msg="Increment expression was found in function 'add_timer_record'" ln="98" locFile="/build/../../../../../../../../timer.c" locStartln="98" sev="3" auth="username" locRef="3" rule="PB-22" lnHash="-1933903777" rule.header="Do not use increment and decrement expressions inside a(b), a[b], and cast" tool="c++test" lineHash="-1933903777" unbViolId="db78db41-0e45-3dab-9531-3c6deca0a18b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="850c29a2-7ec0-3bbd-a87e-b84dc03ad666" locEndPos="9" locType="sr" hash="-275311578" locEndLn="98" goals="0," />
    <StdViol msg="A single operation '++' with side-effect is used in improper context" ln="98" locFile="/build/../../../../../../../../timer.c" locStartln="98" sev="3" auth="username" locRef="3" rule="CODSTA-102" lnHash="-1933903777" rule.header="A single operation with side-effect shall only be used in the proper context" tool="c++test" lineHash="-1933903777" unbViolId="0233660e-739b-3448-a4f3-962687f4edd4" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c1d6e02e-5711-3cd7-b0e6-4e7d91725fbe" locEndPos="23" locType="sr" hash="-275311578" locEndLn="98" goals="0," />
    <StdViol msg="A single operation '++' with side-effect is used in improper context" ln="98" locFile="/build/../../../../../../../../timer.c" locStartln="98" sev="2" auth="username" locRef="3" rule="JSF-204_a" lnHash="-1933903777" rule.header="A single operation with side-effect shall only be used in the proper context" tool="c++test" lineHash="-1933903777" unbViolId="e2c142cd-f697-3725-b570-e3627281bb20" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4aaaddd-a38e-376e-a964-1fbb00085ee3" locEndPos="23" locType="sr" hash="-275311578" locEndLn="98" goals="0," />
    <StdViol msg="Global variable 'curr_index' is modified in function 'add_timer_record'" ln="98" locFile="/build/../../../../../../../../timer.c" locStartln="98" sev="3" auth="username" locRef="3" rule="CODSTA-27" lnHash="-1933903777" rule.header="Avoid functions that modify global variables" tool="c++test" lineHash="-1933903777" unbViolId="42daec5f-9369-3091-a67b-4e63c55c174f" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd576faa-0141-3d63-84e6-7a0d3c405630" locEndPos="23" locType="sr" hash="-275311578" locEndLn="98" goals="0," />
    <StdViol msg="The '++' operator should cause the only side effect in an expression" ln="98" locFile="/build/../../../../../../../../timer.c" locStartln="98" sev="4" auth="username" locRef="3" rule="CODSTA-123" lnHash="-1933903777" rule.header="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects" tool="c++test" lineHash="-1933903777" unbViolId="21437b9f-823c-3d8c-9d77-11ccefdec31a" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a89cbdca-5228-3b55-9adb-3b475c1de550" locEndPos="23" locType="sr" hash="-275311578" locEndLn="98" goals="0," />
    <StdViol msg="The '++' operator should cause the only side effect in an expression" ln="98" locFile="/build/../../../../../../../../timer.c" locStartln="98" sev="4" auth="username" locRef="3" rule="MISRA2012-RULE-13_3" lnHash="-1933903777" rule.header="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator" tool="c++test" lineHash="-1933903777" unbViolId="336925c7-20d3-3c2c-ab7a-566925cc3fa1" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ffc34df4-4bf5-3d3a-91b3-91745d0edb2b" locEndPos="23" locType="sr" hash="-275311578" locEndLn="98" goals="0," />
    <StdViol msg="The '++' operator should cause the only side effect in an expression" ln="98" locFile="/build/../../../../../../../../timer.c" locStartln="98" sev="3" auth="username" locRef="3" rule="CERT_C-FIO41-e" lnHash="-1933903777" rule.header="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects" tool="c++test" lineHash="-1933903777" unbViolId="5c20d86c-cd06-3645-86ed-703dfd1675c8" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cfb67700-d2e2-36f7-9830-804577b315dc" locEndPos="23" locType="sr" hash="-275311578" locEndLn="98" goals="0," />
    <StdViol msg="The '++' operator should cause the only side effect in an expression" ln="98" locFile="/build/../../../../../../../../timer.c" locStartln="98" sev="4" auth="username" locRef="3" rule="MISRAC2012-RULE_13_3-a" lnHash="-1933903777" rule.header="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects" tool="c++test" lineHash="-1933903777" unbViolId="08b0aa1d-070f-3e71-942e-e931258da41c" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d267259a-4b96-3edc-a215-b6d67bc65a8b" locEndPos="23" locType="sr" hash="-275311578" locEndLn="98" goals="0," />
    <StdViol msg="Do not use the '++' operator with other operators in the expression" ln="98" locFile="/build/../../../../../../../../timer.c" locStartln="98" sev="3" auth="username" locRef="3" rule="MISRA2004-12_13" lnHash="-1933903777" rule.header="The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" tool="c++test" lineHash="-1933903777" unbViolId="5ed92871-1d86-3e08-829b-ae50518e92b8" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d949dac-8948-3ff9-a65d-0ceaa5a78382" locEndPos="23" locType="sr" hash="-275311578" locEndLn="98" goals="0," />
    <StdViol msg="Do not use the '++' operator with other operators in the expression" ln="98" locFile="/build/../../../../../../../../timer.c" locStartln="98" sev="3" auth="username" locRef="3" rule="HICPP-5_1_2-h" lnHash="-1933903777" rule.header="The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" tool="c++test" lineHash="-1933903777" unbViolId="772387c7-35c1-3629-914d-518fb6d93600" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa86afe9-2303-34e3-96e4-fc44c88d33cb" locEndPos="23" locType="sr" hash="-275311578" locEndLn="98" goals="0," />
    <StdViol msg="Do not use the '++' operator with other operators in the expression" ln="98" locFile="/build/../../../../../../../../timer.c" locStartln="98" sev="2" auth="username" locRef="3" rule="AUTOSAR-M5_2_10-a" lnHash="-1933903777" rule.header="The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" tool="c++test" lineHash="-1933903777" unbViolId="293a4baa-4eff-3c31-8815-5f5e74bbd867" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1278a1c9-da4b-347c-92fc-267250d45595" locEndPos="23" locType="sr" hash="-275311578" locEndLn="98" goals="0," />
    <StdViol msg="Do not use the '++' operator with other operators in the expression" ln="98" locFile="/build/../../../../../../../../timer.c" locStartln="98" sev="4" auth="username" locRef="3" rule="MISRA2008-5_2_10" lnHash="-1933903777" rule.header="The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" tool="c++test" lineHash="-1933903777" unbViolId="a9fa9bc3-ee84-3dee-9511-3d0b1e070d72" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6db81785-b7af-3dd1-8666-47d8d3de192f" locEndPos="23" locType="sr" hash="-275311578" locEndLn="98" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="99" locFile="/build/../../../../../../../../timer.c" locStartln="99" sev="3" auth="username" locRef="3" rule="JSF-061" lnHash="-1396539305" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1396539305" unbViolId="a659b509-5d57-30a2-bb05-80092427bdcf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3e697b4-bda9-34f9-af6c-db020f22e12a" locEndPos="1" locType="sr" hash="-275311578" locEndLn="99" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="99" locFile="/build/../../../../../../../../timer.c" locStartln="99" sev="3" auth="username" locRef="3" rule="FORMAT-42" lnHash="-1396539305" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1396539305" unbViolId="ffcc22d3-6042-307e-8756-3dfd39abc64f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a01c36cf-7695-34df-88a8-c828e769a1b0" locEndPos="1" locType="sr" hash="-275311578" locEndLn="99" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="99" locFile="/build/../../../../../../../../timer.c" locStartln="99" sev="3" auth="username" locRef="3" rule="JSF-060_a" lnHash="-1396539305" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1396539305" unbViolId="3b74472c-fcf6-316b-96fe-bedcd9c69a97" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24e159fc-e280-38fc-abbf-5296ce627513" locEndPos="1" locType="sr" hash="-275311578" locEndLn="99" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="99" locFile="/build/../../../../../../../../timer.c" locStartln="99" sev="3" auth="username" locRef="3" rule="FORMAT-43" lnHash="-1396539305" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1396539305" unbViolId="b9519456-d652-3ba9-bc7a-7039513a3607" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2610bc20-8154-30e1-8d94-71bdcfa82089" locEndPos="1" locType="sr" hash="-275311578" locEndLn="99" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="99" locFile="/build/../../../../../../../../timer.c" locStartln="99" sev="3" auth="username" locRef="3" rule="JSF-060_b" lnHash="-1396539305" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1396539305" unbViolId="0bd1419b-8165-3442-a508-2bcc675aadf9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1be0563e-bffd-3435-ba5d-c29f47799b56" locEndPos="1" locType="sr" hash="-275311578" locEndLn="99" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="99" locFile="/build/../../../../../../../../timer.c" locStartln="99" sev="3" auth="username" locRef="3" rule="FORMAT-02" lnHash="-1396539305" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-1396539305" unbViolId="96cec494-097f-37c9-9911-b9461aa234c6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aec53b3e-b9cb-36f5-90c0-081f3c5bbde2" locEndPos="1" locType="sr" hash="-275311578" locEndLn="99" goals="0," />
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="99" locFile="/build/../../../../../../../../timer.c" locStartln="99" sev="3" auth="username" locRef="3" rule="FORMAT-34" lnHash="-1396539305" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="-1396539305" unbViolId="c6316d04-857b-3a3e-8e22-89330d76c4c0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c27eeb89-a721-38b9-b08d-4db04f77fbae" locEndPos="1" locType="sr" hash="-275311578" locEndLn="99" goals="0," />
    <StdViol msg="Put the closing brace '}' on its own line" ln="99" locFile="/build/../../../../../../../../timer.c" locStartln="99" sev="3" auth="username" locRef="3" rule="JSF-061" lnHash="-1396539305" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1396539305" unbViolId="bf12b97b-bbdb-3165-8b10-97f692cef1a9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8434a322-0524-3853-aaba-608136473185" locEndPos="5" locType="sr" hash="-275311578" locEndLn="99" goals="0," />
    <StdViol msg="Put the closing brace '}' on its own line" ln="99" locFile="/build/../../../../../../../../timer.c" locStartln="99" sev="3" auth="username" locRef="3" rule="FORMAT-42" lnHash="-1396539305" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1396539305" unbViolId="a0118947-9a9a-354b-906d-24ad376955d1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c94b32b8-acc0-3897-9181-34e0ec20bb10" locEndPos="5" locType="sr" hash="-275311578" locEndLn="99" goals="0," />
    <StdViol msg="Put the closing brace '}' on its own line" ln="99" locFile="/build/../../../../../../../../timer.c" locStartln="99" sev="3" auth="username" locRef="3" rule="JSF-060_a" lnHash="-1396539305" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1396539305" unbViolId="3e0031e1-49c5-35e8-be93-d273792d7a6f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="786f4fd7-d844-3d5c-9e14-057cbee279ec" locEndPos="5" locType="sr" hash="-275311578" locEndLn="99" goals="0," />
    <StdViol msg="Put the closing brace '}' on its own line" ln="99" locFile="/build/../../../../../../../../timer.c" locStartln="99" sev="3" auth="username" locRef="3" rule="FORMAT-03" lnHash="-1396539305" rule.header="Place a closing brace '}' on its own line" tool="c++test" lineHash="-1396539305" unbViolId="100bfa47-3c56-3adb-977b-823cfcd9c876" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="86683b41-76c6-3e2c-9ef4-e89342572298" locEndPos="5" locType="sr" hash="-275311578" locEndLn="99" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="100" locFile="/build/../../../../../../../../timer.c" locStartln="100" sev="3" auth="username" locRef="3" rule="CODSTA-122_a" lnHash="-1597326853" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1597326853" unbViolId="cd4b84d0-e1bf-3c7f-8a49-8b66b308d0b4" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d4cfab4-815d-35ac-95d1-326be32ed04a" locEndPos="9" locType="sr" hash="-275311578" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="100" locFile="/build/../../../../../../../../timer.c" locStartln="100" sev="1" auth="username" locRef="3" rule="CERT_C-ERR33-a" lnHash="-1597326853" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1597326853" unbViolId="36d75668-44ac-3416-b9de-1901a8a69e7e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eba2fd7e-49ab-38e6-b95e-450350ace085" locEndPos="9" locType="sr" hash="-275311578" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="100" locFile="/build/../../../../../../../../timer.c" locStartln="100" sev="1" auth="username" locRef="3" rule="CERT_C-POS54-a" lnHash="-1597326853" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1597326853" unbViolId="29c19649-124e-3ee7-9958-f2fb29c1e779" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a6402af-390d-39f6-a9f4-f30b3660ae0c" locEndPos="9" locType="sr" hash="-275311578" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="100" locFile="/build/../../../../../../../../timer.c" locStartln="100" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-1597326853" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1597326853" unbViolId="092d1ca5-e5bf-31b4-82c7-c64678aa6c49" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f1e16cf-ee8f-3627-99a7-254757ddadd3" locEndPos="9" locType="sr" hash="-275311578" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="100" locFile="/build/../../../../../../../../timer.c" locStartln="100" sev="3" auth="username" locRef="3" rule="CERT_C-EXP12-a" lnHash="-1597326853" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1597326853" unbViolId="eee514b9-2322-3df5-a9f7-0c7f06805337" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a261b95b-25fb-39fc-8b34-a55302f77826" locEndPos="9" locType="sr" hash="-275311578" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="100" locFile="/build/../../../../../../../../timer.c" locStartln="100" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="-1597326853" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1597326853" unbViolId="bf4f3340-6c80-3130-8fd1-51d061b62540" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="39bbf2ec-f96c-30ac-9d2e-159a0a72e8cd" locEndPos="9" locType="sr" hash="-275311578" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="100" locFile="/build/../../../../../../../../timer.c" locStartln="100" sev="3" auth="username" locRef="3" rule="MISRA2004-16_10" lnHash="-1597326853" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1597326853" unbViolId="9cb87344-3757-35fb-90d3-14c9cfca533c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9de85a1-3d48-3a33-8943-1faeeb86bb4d" locEndPos="9" locType="sr" hash="-275311578" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="100" locFile="/build/../../../../../../../../timer.c" locStartln="100" sev="2" auth="username" locRef="3" rule="AUTOSAR-M0_3_2-a" lnHash="-1597326853" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1597326853" unbViolId="5d86a0d9-2cc8-3200-8640-153a6bf4b81f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="299cad52-e981-3b99-8e73-c0d75d7a2ca6" locEndPos="9" locType="sr" hash="-275311578" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="100" locFile="/build/../../../../../../../../timer.c" locStartln="100" sev="2" auth="username" locRef="3" rule="MISRA2008-0_3_2" lnHash="-1597326853" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1597326853" unbViolId="5f39ef57-6e60-34cb-bfc2-609da8918d18" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8f5d4f8-19c5-3804-8aac-3830b0ccb95a" locEndPos="9" locType="sr" hash="-275311578" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="100" locFile="/build/../../../../../../../../timer.c" locStartln="100" sev="3" auth="username" locRef="3" rule="JSF-115" lnHash="-1597326853" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-1597326853" unbViolId="c845007c-70fb-3d85-868b-ee440ed123e1" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b2660bf-99ad-3141-be6c-72971600f4fc" locEndPos="9" locType="sr" hash="-275311578" locEndLn="100" goals="0," />
    <StdViol msg="String literal &quot;All timers used ... timer not added&quot; is passed to function 'print_string' as pointer to non-const object" ln="100" locFile="/build/../../../../../../../../timer.c" locStartln="100" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_7_4-a" lnHash="-1597326853" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1597326853" unbViolId="4346617c-f08d-32de-85e1-9d8e9bc296a0" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13dfb2f5-c890-3b14-8ddd-af84c4a18b66" locEndPos="22" locType="sr" hash="-275311578" locEndLn="100" goals="0," />
    <StdViol msg="String literal &quot;All timers used ... timer not added&quot; is passed to function 'print_string' as pointer to non-const object" ln="100" locFile="/build/../../../../../../../../timer.c" locStartln="100" sev="2" auth="username" locRef="3" rule="AUTOSAR-A2_13_4-a" lnHash="-1597326853" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1597326853" unbViolId="239623d6-fed6-3d7d-a839-32dde9209fac" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="728e742f-d83c-3f0f-aac3-0bfc95ffd407" locEndPos="22" locType="sr" hash="-275311578" locEndLn="100" goals="0," />
    <StdViol msg="String literal &quot;All timers used ... timer not added&quot; is passed to function 'print_string' as pointer to non-const object" ln="100" locFile="/build/../../../../../../../../timer.c" locStartln="100" sev="2" auth="username" locRef="3" rule="JSF-151.1" lnHash="-1597326853" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1597326853" unbViolId="23eafdb1-aa96-3c8b-be44-0c0e1fa5e991" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9618cc4-d395-3bb0-9300-441915f90a6d" locEndPos="22" locType="sr" hash="-275311578" locEndLn="100" goals="0," />
    <StdViol msg="String literal &quot;All timers used ... timer not added&quot; is passed to function 'print_string' as pointer to non-const object" ln="100" locFile="/build/../../../../../../../../timer.c" locStartln="100" sev="2" auth="username" locRef="3" rule="PB-27" lnHash="-1597326853" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1597326853" unbViolId="710c9fbe-6ab4-311d-b110-dab016dc1af5" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0377439-2c54-3c9e-8594-214c6d0ae4ac" locEndPos="22" locType="sr" hash="-275311578" locEndLn="100" goals="0," />
    <StdViol msg="String literal &quot;All timers used ... timer not added&quot; is passed to function 'print_string' as pointer to non-const object" ln="100" locFile="/build/../../../../../../../../timer.c" locStartln="100" sev="3" auth="username" locRef="3" rule="CERT_C-STR05-a" lnHash="-1597326853" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1597326853" unbViolId="f282e8fe-7cb5-30b5-802e-25e163ce5f3d" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab873aad-9f65-3f5f-b7f6-922044f62ba2" locEndPos="22" locType="sr" hash="-275311578" locEndLn="100" goals="0," />
    <StdViol msg="String literal &quot;All timers used ... timer not added&quot; is passed to function 'print_string' as pointer to non-const object" ln="100" locFile="/build/../../../../../../../../timer.c" locStartln="100" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-7_4" lnHash="-1597326853" rule.header="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" tool="c++test" lineHash="-1597326853" unbViolId="53f76fc4-d214-3ce0-9cbd-b0221964140b" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a55c82ae-d787-3e9a-88d7-d1b547041119" locEndPos="22" locType="sr" hash="-275311578" locEndLn="100" goals="0," />
    <StdViol msg="String literal &quot;All timers used ... timer not added&quot; is passed to function 'print_string' as pointer to non-const object" ln="100" locFile="/build/../../../../../../../../timer.c" locStartln="100" sev="2" auth="username" locRef="3" rule="CERT_C-STR30-a" lnHash="-1597326853" rule.header="A string literal shall not be modified" tool="c++test" lineHash="-1597326853" unbViolId="08d71477-0756-3062-b5af-76adc42a7029" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51aa361b-1200-3e89-8032-93a09172c192" locEndPos="22" locType="sr" hash="-275311578" locEndLn="100" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: All timers used ... timer not added" ln="100" locFile="/build/../../../../../../../../timer.c" locStartln="100" sev="5" auth="username" locRef="3" rule="CWE-798-a" lnHash="-1597326853" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1597326853" unbViolId="a7a0918c-70f2-32d0-aa2a-77d21810055d" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="495e8c36-5eb2-3941-bfb0-644be8c4e6c7" locEndPos="22" locType="sr" hash="-275311578" locEndLn="100" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: All timers used ... timer not added" ln="100" locFile="/build/../../../../../../../../timer.c" locStartln="100" sev="5" auth="username" locRef="3" rule="CODSTA-203" lnHash="-1597326853" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1597326853" unbViolId="5e23a0fb-0254-350a-ba9c-bb37243fdfe0" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="704e8e5b-489d-30c3-a34f-7a795ad90866" locEndPos="22" locType="sr" hash="-275311578" locEndLn="100" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: All timers used ... timer not added" ln="100" locFile="/build/../../../../../../../../timer.c" locStartln="100" sev="1" auth="username" locRef="3" rule="APSC_DV-003110-a" lnHash="-1597326853" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1597326853" unbViolId="1bda1b1b-6306-3d2c-853a-b5382ce98914" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="203e46ad-3c50-37c6-a8d7-f3d667910d12" locEndPos="22" locType="sr" hash="-275311578" locEndLn="100" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: All timers used ... timer not added" ln="100" locFile="/build/../../../../../../../../timer.c" locStartln="100" sev="1" auth="username" locRef="3" rule="CERT_C-MSC41-a" lnHash="-1597326853" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1597326853" unbViolId="eb460ba9-618a-3cb9-9352-b77cc62940d2" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ea7f151-7f64-3304-96e4-df8daefc8e55" locEndPos="22" locType="sr" hash="-275311578" locEndLn="100" goals="0," />
    <StdViol msg="Use // comments only" ln="104" locFile="/build/../../../../../../../../timer.c" locStartln="104" sev="3" auth="username" locRef="3" rule="HICPP-2_3_1-a" lnHash="1499" rule.header="Prefer C++ style comment" tool="c++test" lineHash="1499" unbViolId="71a09072-c6ae-322d-9e29-fa5c0c41b212" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f163d688-7a71-3b8f-af45-2463d4e58ca2" locEndPos="1" locType="sr" hash="-275311578" locEndLn="104" goals="0," />
    <StdViol msg="Use // comments only" ln="104" locFile="/build/../../../../../../../../timer.c" locStartln="104" sev="2" auth="username" locRef="3" rule="JSF-126" lnHash="1499" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="1499" unbViolId="5234d7fe-6882-33cc-a35c-8aa64678b358" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3523796d-7564-345c-b898-f3188cc0a11b" locEndPos="1" locType="sr" hash="-275311578" locEndLn="104" goals="0," />
    <StdViol msg="Use // comments only" ln="104" locFile="/build/../../../../../../../../timer.c" locStartln="104" sev="3" auth="username" locRef="3" rule="COMMENT-01" lnHash="1499" rule.header="Prefer C++ style comment" tool="c++test" lineHash="1499" unbViolId="f21d957c-fb0c-3f17-8d6a-104c0563736b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae01e55f-9d10-3743-bf60-b58fa31c578c" locEndPos="1" locType="sr" hash="-275311578" locEndLn="104" goals="0," />
    <StdViol msg="The 'delete_timer_record' function should be preceded by a comment that contains the '@brief' tag" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="3" auth="username" locRef="3" rule="COMMENT-14" lnHash="997006354" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="997006354" unbViolId="c7a24ea3-8afb-3be5-83b6-8da7801a1e06" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f10393f8-c0db-33e2-a68a-5bdb6e8b69e0" locEndPos="6" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="The 'delete_timer_record' function should be preceded by a comment that contains the '@brief' tag" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="2" auth="username" locRef="3" rule="AUTOSAR-A2_7_3-a" lnHash="997006354" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="997006354" unbViolId="ef2603ae-affe-3d77-80e9-8d9ab5ac7c14" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="830fba8b-d5ba-35d5-8f71-968761d11b24" locEndPos="6" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="The 'idx' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="3" auth="username" locRef="3" rule="COMMENT-14_b" lnHash="997006354" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="997006354" unbViolId="e8d880cb-153a-3d2a-8ccc-9e58d84e15b7" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55291ed1-7acd-3745-b283-bc0047b37bc1" locEndPos="6" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="The 'idx' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="2" auth="username" locRef="3" rule="AUTOSAR-A2_7_3-b" lnHash="997006354" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="997006354" unbViolId="d7500f4a-4126-3fb3-a5c9-5fc6d9dbdb40" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ecd47903-9fda-3386-bf2b-79b1a7242af3" locEndPos="6" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'delete_timer_record'" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="3" auth="username" locRef="3" rule="FORMAT-28" lnHash="997006354" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="997006354" unbViolId="876f5ea0-f004-3fe9-b031-e51aa2562b11" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b857cfb-a6f4-31a5-a027-32b8f4d42ba4" locEndPos="6" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="Function 'delete_timer_record' has Cyclomatic Complexity value: 3" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="5" auth="username" locRef="3" rule="METRICS-29" lnHash="997006354" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="997006354" unbViolId="58350e01-5f62-3223-9bf6-9cd4b03fa75b" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a012fb14-f2fc-38f8-a04b-d962ab7ee68a" locEndPos="6" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="Function 'delete_timer_record' has Essential Complexity value: 3" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="5" auth="username" locRef="3" rule="METRICS-33" lnHash="997006354" rule.header="Report Essential Complexity" tool="c++test" lineHash="997006354" unbViolId="9fe204e5-0dc5-3bdf-b9c8-7a71eff75a44" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad8e3d07-9b2c-3070-a4b2-925dfa761a69" locEndPos="6" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="Function 'delete_timer_record' has high Essential Complexity value: 3" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="2" auth="username" locRef="3" rule="JSF-003_b" lnHash="997006354" rule.header="Follow the Essential Complexity limit of 1" tool="c++test" lineHash="997006354" unbViolId="26ab7c19-d053-3e11-9388-190ba5e2779c" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f73e5c0a-ef1e-3c10-809e-78d7248a5c18" locEndPos="6" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="Function 'delete_timer_record' has high Essential Complexity value: 3" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="5" auth="username" locRef="3" rule="METRICS-42" lnHash="997006354" rule.header="Follow the Essential Complexity limit of 1" tool="c++test" lineHash="997006354" unbViolId="de1642fd-f53d-3385-b4e0-8b0a48031869" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8055a8a8-2309-362a-929e-5e5248ee52a1" locEndPos="6" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="The value of Halstead's delivered bugs (B) for function 'delete_timer_record' is 0.10" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="3" auth="username" locRef="3" rule="METRICS-43" lnHash="997006354" rule.header="Report the value of Halstead's delivered bugs (B) for a function" tool="c++test" lineHash="997006354" unbViolId="c04c298c-a61a-35db-b87f-07177ad0c478" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7fac435e-da13-3692-abc5-29636ca6c63d" locEndPos="6" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="Naming convention not followed: delete_timer_record" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="3" auth="username" locRef="3" rule="NAMING-17" lnHash="997006354" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="997006354" unbViolId="df99019f-eaac-3af2-937f-22c0e528fc6f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5da50cf-c905-3d71-a112-d20626d92e00" locEndPos="6" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="4" auth="username" locRef="3" rule="MISRA2008-3_9_2" lnHash="997006354" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="997006354" unbViolId="796ffefc-780c-3fea-97cc-7081ebfaa9cb" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02e810e4-709d-3ef1-8259-3cb6fc88c32d" locEndPos="26" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="3" auth="username" locRef="3" rule="MISRA-013" lnHash="997006354" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="997006354" unbViolId="c00590f8-3d78-327d-92cd-f4defdaf3a5a" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59af557d-ab4e-3fc7-92b8-901348bd4a79" locEndPos="26" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="3" auth="username" locRef="3" rule="CODSTA-223" lnHash="997006354" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="997006354" unbViolId="c0cb4da9-84a5-38d7-8342-ac804f59f33f" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3086b4b-05f0-3603-881d-c7a3ff5fdd95" locEndPos="26" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="2" auth="username" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="997006354" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="997006354" unbViolId="40736960-c7e9-34ff-bace-127a61a7e4d8" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="006cc659-cb5e-3f01-885b-f7d7418d5199" locEndPos="26" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="3" auth="username" locRef="3" rule="HICPP-7_1_6-b" lnHash="997006354" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="997006354" unbViolId="36bdfb79-93ae-3500-a6e7-896bc7b05466" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7300a76d-b40f-3a7a-b073-18094afaec66" locEndPos="26" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="4" auth="username" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="997006354" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="997006354" unbViolId="9ab8d6ac-d253-3ee0-b906-abadbf98f6e3" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22235ee7-7d96-31d3-a32e-97f88ac4793b" locEndPos="26" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="3" auth="username" locRef="3" rule="MISRA2004-6_3_b" lnHash="997006354" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="997006354" unbViolId="0995c3c4-1322-38d0-966d-e55e3b1080ae" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c12b3935-21d7-3132-8924-6993e4767284" locEndPos="26" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="2" auth="username" locRef="3" rule="JSF-209_b" lnHash="997006354" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="997006354" unbViolId="8aeacf56-4b95-3242-bb9a-ce1c761dcc83" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c928512c-e305-3278-af36-22a83e34965a" locEndPos="26" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="4" auth="username" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="997006354" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="997006354" unbViolId="85b75b30-b2c3-304e-83e1-85295ff268bd" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1be9bfd1-4bd0-3894-8e21-fb392ec42c54" locEndPos="26" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="3" auth="username" locRef="3" rule="HICPP-3_5_1-b" lnHash="997006354" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="997006354" unbViolId="44a99c95-065e-3801-b2ab-0a5afc671101" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f506d99f-314d-371d-b281-80d9eabd689e" locEndPos="26" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="'idx' shall be declared as unsigned int or signed int" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="3" auth="username" locRef="3" rule="PORT-13" lnHash="997006354" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="997006354" unbViolId="95130a8a-a50f-3508-81bc-a66995ee88e0" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e372b52b-6c98-38c7-b623-d561cfc38f01" locEndPos="30" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="Declare parameter 'idx' as const" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="3" auth="username" locRef="3" rule="CERT_C-DCL00-a" lnHash="997006354" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="997006354" unbViolId="e4d89f46-2eb5-3718-9e2b-cde9f9080de7" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bfde92c1-4f01-3eaf-a603-1d16f05ada09" locEndPos="30" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="Declare parameter 'idx' as const" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="2" auth="username" locRef="3" rule="AUTOSAR-A7_1_1-a" lnHash="997006354" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="997006354" unbViolId="800da825-36cc-353b-8529-b022035bb8ca" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba8781e2-4bfa-3d56-ac1f-288ae367fe8e" locEndPos="30" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="Declare parameter 'idx' as const" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="2" auth="username" locRef="3" rule="MISRA2008-7_1_1" lnHash="997006354" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="997006354" unbViolId="c4be6948-27f2-387b-b04f-e6fb2b0e4546" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eef62344-c4a1-39bf-b9c7-971db9029ab8" locEndPos="30" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="Declare parameter 'idx' as const" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="3" auth="username" locRef="3" rule="CODSTA-CPP-53" lnHash="997006354" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="997006354" unbViolId="5e03b71b-f7da-31e8-9e59-4cc3362a2ea0" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0eef5b0c-d4a7-3131-8804-c6f6686b94a2" locEndPos="30" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="Declare parameter 'idx' as const" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="3" auth="username" locRef="3" rule="HICPP-7_1_2-a" lnHash="997006354" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="997006354" unbViolId="513f2a9e-8ade-3450-a333-c8b225c89eaa" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="41baa237-b0b4-3eb4-9eef-8991dbc49135" locEndPos="30" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="Parameter 'idx' is not validated before use" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="3" auth="username" locRef="3" rule="CERT_C-API00-a" lnHash="997006354" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="997006354" unbViolId="7744ecbc-18f3-38b2-bd56-946f15eb9bd0" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c58f7d27-398d-3576-ab65-7d4cc42286a1" locEndPos="30" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="Parameter 'idx' is not validated before use" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="3" auth="username" locRef="3" rule="CODSTA-86" lnHash="997006354" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="997006354" unbViolId="d51dead3-94dd-371f-ad71-65e4acf383dc" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f39c412c-8b52-3478-997f-b1187ab15828" locEndPos="30" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="The 'idx' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="3" auth="username" locRef="3" rule="NAMING-HN-22" lnHash="997006354" rule.header="Hungarian notation for int types" tool="c++test" lineHash="997006354" unbViolId="d76d56ce-5876-3b8b-bb87-204a18b5a46b" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="86e12912-b127-3a35-b14d-b158fbfeda31" locEndPos="30" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="The 'idx' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="3" auth="username" locRef="3" rule="NAMING-HN-30" lnHash="997006354" rule.header="Hungarian notation for int types" tool="c++test" lineHash="997006354" unbViolId="c18f76f7-e63c-3783-ad02-a1f532df8078" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e759a2cb-c455-3dc8-8f35-e111486871e9" locEndPos="30" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="The 'idx' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="108" locFile="/build/../../../../../../../../timer.c" locStartln="108" sev="3" auth="username" locRef="3" rule="NAMING-HN-43" lnHash="997006354" rule.header="Hungarian notation for word types" tool="c++test" lineHash="997006354" unbViolId="1752a1c5-60af-3215-9893-57b749e0660b" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38a9c742-4cc5-3f28-ba44-e4eae9aa1c49" locEndPos="30" locType="sr" hash="-275311578" locEndLn="108" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 6" ln="109" locFile="/build/../../../../../../../../timer.c" locStartln="109" sev="3" auth="username" locRef="3" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="9869ef30-03eb-37c3-bf1f-b97731f20da1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad70cd49-29d5-3e2a-b79f-ca00b4b78d90" locEndPos="1" locType="sr" hash="-275311578" locEndLn="109" goals="0," />
    <DupViol msg="Duplicated code: 'struct timer_record* tr = timer_records[idx];'" ln="110" locFile="/build/../../../../../../../../timer.c" locStartln="110" sev="3" auth="username" locRef="3" rule="CDD-DUPC" lnHash="-1356760849" rule.header="Avoid code duplication" tool="c++test" lineHash="-1356760849" unbViolId="b0ebc716-3f83-3ece-831a-1aed70ed73f8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="379d1e74-06bd-3c2b-b60a-b3e75b39424e" locEndPos="49" locType="sr" urgent="true" hash="-275311578" locEndLn="110" goals="1,">
      <ElDescList>
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="110" srcRngStartPos="4" srcRngEndPos="49" srcRngStartln="110" srcRngEndLn="110" desc="[Line 110] Duplicated code in file 'timer.c'" rngLn="110" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="4" srcRngEndPos="49" srcRngStartln="131" srcRngEndLn="131" desc="[Line 131] Duplicated code in file 'timer.c'" rngLn="131" />
      </ElDescList>
    </DupViol>
    <StdViol msg="The variable of pointer or array type is declared: tr" ln="110" locFile="/build/../../../../../../../../timer.c" locStartln="110" sev="3" auth="username" locRef="3" rule="CODSTA-94" lnHash="-1356760849" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1356760849" unbViolId="5b58b348-e747-3a25-b1c7-1b79a4cf6285" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78bd4bcf-8117-37ed-90b1-0d6238c77b56" locEndPos="26" locType="sr" hash="-275311578" locEndLn="110" goals="0," />
    <StdViol msg="The variable of pointer type is declared: tr" ln="110" locFile="/build/../../../../../../../../timer.c" locStartln="110" sev="3" auth="username" locRef="3" rule="CODSTA-95" lnHash="-1356760849" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1356760849" unbViolId="5ebf478b-4bd2-3c67-a960-2f7dbe6535d9" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="032635ae-a71b-3683-bb12-4b584cd75957" locEndPos="26" locType="sr" hash="-275311578" locEndLn="110" goals="0," />
    <StdViol msg="Declare local variable 'tr' as const" ln="110" locFile="/build/../../../../../../../../timer.c" locStartln="110" sev="3" auth="username" locRef="3" rule="CERT_C-DCL00-a" lnHash="-1356760849" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1356760849" unbViolId="6a1ce8ec-ae35-3b3b-8dd7-0d5e2221a18a" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="49f856fb-5067-32e1-a994-75f3d0ebb904" locEndPos="26" locType="sr" hash="-275311578" locEndLn="110" goals="0," />
    <StdViol msg="Declare local variable 'tr' as const" ln="110" locFile="/build/../../../../../../../../timer.c" locStartln="110" sev="2" auth="username" locRef="3" rule="AUTOSAR-A7_1_1-a" lnHash="-1356760849" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1356760849" unbViolId="88b21183-2852-31cd-9f79-3b8c85d4e699" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e048847a-1ec3-3e41-9733-e94eca5f81bd" locEndPos="26" locType="sr" hash="-275311578" locEndLn="110" goals="0," />
    <StdViol msg="Declare local variable 'tr' as const" ln="110" locFile="/build/../../../../../../../../timer.c" locStartln="110" sev="2" auth="username" locRef="3" rule="MISRA2008-7_1_1" lnHash="-1356760849" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="-1356760849" unbViolId="89fecdd1-e692-3b75-9f31-238371b4aed2" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3892a696-d841-3b6e-b3e3-3689bd02f4ff" locEndPos="26" locType="sr" hash="-275311578" locEndLn="110" goals="0," />
    <StdViol msg="Declare local variable 'tr' as const" ln="110" locFile="/build/../../../../../../../../timer.c" locStartln="110" sev="3" auth="username" locRef="3" rule="CODSTA-CPP-53" lnHash="-1356760849" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1356760849" unbViolId="9eca59f5-9469-31c6-b049-c5f3d0e6200b" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d038862f-9560-3a4a-a191-2fb9517e5361" locEndPos="26" locType="sr" hash="-275311578" locEndLn="110" goals="0," />
    <StdViol msg="Declare local variable 'tr' as const" ln="110" locFile="/build/../../../../../../../../timer.c" locStartln="110" sev="3" auth="username" locRef="3" rule="HICPP-7_1_2-a" lnHash="-1356760849" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1356760849" unbViolId="cfbf0181-3b50-3498-81c2-4eefef30781a" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8319671-2396-39b3-9c2e-5106100340c3" locEndPos="26" locType="sr" hash="-275311578" locEndLn="110" goals="0," />
    <StdViol msg="The 'tr' variable should be commented" ln="110" locFile="/build/../../../../../../../../timer.c" locStartln="110" sev="3" auth="username" locRef="3" rule="JSF-132_a" lnHash="-1356760849" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1356760849" unbViolId="fd800dd4-2b55-3c9f-88bc-473292dfbf3b" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9ac5188-5fa4-3c6b-8b5f-965975e0e4d7" locEndPos="26" locType="sr" hash="-275311578" locEndLn="110" goals="0," />
    <StdViol msg="The 'tr' variable should be commented" ln="110" locFile="/build/../../../../../../../../timer.c" locStartln="110" sev="3" auth="username" locRef="3" rule="COMMENT-05" lnHash="-1356760849" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1356760849" unbViolId="e89062da-d4dd-37e7-912a-e60bbc6fd5e9" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a14001a-bab1-3dbb-b46f-fd07b1604c9c" locEndPos="26" locType="sr" hash="-275311578" locEndLn="110" goals="0," />
    <StdViol msg="Naming convention not followed: tr" ln="110" locFile="/build/../../../../../../../../timer.c" locStartln="110" sev="3" auth="username" locRef="3" rule="NAMING-22" lnHash="-1356760849" rule.header="Prefix a variable type 'pointer' with a 'p' character" tool="c++test" lineHash="-1356760849" unbViolId="b6a6c034-7ffc-3636-8996-061fe412b0bb" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37e2c905-0b59-3fdc-94fb-7be5395e4cda" locEndPos="26" locType="sr" hash="-275311578" locEndLn="110" goals="0," />
    <StdViol msg="The 'tr' identifier should have the 'p' prefix" ln="110" locFile="/build/../../../../../../../../timer.c" locStartln="110" sev="3" auth="username" locRef="3" rule="NAMING-HN-34" lnHash="-1356760849" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="-1356760849" unbViolId="bc4d3d9e-05fe-3424-acf6-3279fc111fc9" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13f7d15a-6218-39c5-8899-d8f484c4603a" locEndPos="26" locType="sr" hash="-275311578" locEndLn="110" goals="0," />
    <StdViol msg="Array index 'idx' should be checked before indexing array" ln="110" locFile="/build/../../../../../../../../timer.c" locStartln="110" sev="5" auth="username" locRef="3" rule="MISRA-004_a" lnHash="-1356760849" rule.header="Provisions should be made for appropriate run-time checking" tool="c++test" lineHash="-1356760849" unbViolId="93afa125-68cd-3b8f-a12c-4508fa3c9992" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48a7ff9a-c128-37dc-84f5-035efec0b67d" locEndPos="31" locType="sr" hash="-275311578" locEndLn="110" goals="0," />
    <StdViol msg="Array index 'idx' should be checked before indexing array" ln="110" locFile="/build/../../../../../../../../timer.c" locStartln="110" sev="2" auth="username" locRef="3" rule="JSF-015" lnHash="-1356760849" rule.header="Ensure that array indices are within the bounds of the array" tool="c++test" lineHash="-1356760849" unbViolId="d84618eb-5685-3c37-8d60-045776ecc338" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0cffee2f-cdbb-3ed9-9be9-ad5c2b0c7ad3" locEndPos="31" locType="sr" hash="-275311578" locEndLn="110" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="111" locFile="/build/../../../../../../../../timer.c" locStartln="111" sev="4" auth="username" locRef="3" rule="MISRA2008-3_9_2" lnHash="1679375043" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1679375043" unbViolId="b006a79a-e5d3-3d55-80a3-2794386e21c4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f4bba02-e5b7-3ef2-8d4d-0a8ee1cabf52" locEndPos="5" locType="sr" hash="-275311578" locEndLn="111" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="111" locFile="/build/../../../../../../../../timer.c" locStartln="111" sev="3" auth="username" locRef="3" rule="MISRA-013" lnHash="1679375043" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1679375043" unbViolId="c2023216-d924-3882-97f5-cfbd7bd6f370" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6d3d52b1-c1ec-3bae-9d8a-036c150a1f8b" locEndPos="5" locType="sr" hash="-275311578" locEndLn="111" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="111" locFile="/build/../../../../../../../../timer.c" locStartln="111" sev="3" auth="username" locRef="3" rule="CODSTA-223" lnHash="1679375043" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1679375043" unbViolId="8cb1a4ee-7486-31f8-a784-2304283d367c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="049ef03a-240e-34ad-be48-d5463596dfea" locEndPos="5" locType="sr" hash="-275311578" locEndLn="111" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="111" locFile="/build/../../../../../../../../timer.c" locStartln="111" sev="2" auth="username" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="1679375043" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1679375043" unbViolId="66408d39-8c6e-3d4d-b2b5-45a72cc5b74c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fdda0c46-a0d1-3b05-802f-8827b7c3f265" locEndPos="5" locType="sr" hash="-275311578" locEndLn="111" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="111" locFile="/build/../../../../../../../../timer.c" locStartln="111" sev="3" auth="username" locRef="3" rule="HICPP-7_1_6-b" lnHash="1679375043" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="1679375043" unbViolId="f78f84d1-daa5-3fd9-8499-4222ce7caede" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13255d00-cab3-3986-9d4b-46a070967095" locEndPos="5" locType="sr" hash="-275311578" locEndLn="111" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="111" locFile="/build/../../../../../../../../timer.c" locStartln="111" sev="4" auth="username" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="1679375043" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1679375043" unbViolId="3df8f51b-642b-3524-95b6-ab630b52dca1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6299c27c-6849-33ad-9d55-02481270ddcd" locEndPos="5" locType="sr" hash="-275311578" locEndLn="111" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="111" locFile="/build/../../../../../../../../timer.c" locStartln="111" sev="3" auth="username" locRef="3" rule="MISRA2004-6_3_b" lnHash="1679375043" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1679375043" unbViolId="f4b098a7-976f-3374-9ce6-8cc90d287766" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7040608a-d93b-37e1-8115-1824c4a4a3dd" locEndPos="5" locType="sr" hash="-275311578" locEndLn="111" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="111" locFile="/build/../../../../../../../../timer.c" locStartln="111" sev="2" auth="username" locRef="3" rule="JSF-209_b" lnHash="1679375043" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1679375043" unbViolId="8005f0ce-44e0-399e-9b27-8b634c497b4d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf489b98-25b2-36fa-be90-0f5d54ad889e" locEndPos="5" locType="sr" hash="-275311578" locEndLn="111" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="111" locFile="/build/../../../../../../../../timer.c" locStartln="111" sev="4" auth="username" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="1679375043" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1679375043" unbViolId="579e78e7-9029-3fac-bc23-f814496fd148" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4165d03-9349-3b25-a3c2-7c90228cf1dd" locEndPos="5" locType="sr" hash="-275311578" locEndLn="111" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="111" locFile="/build/../../../../../../../../timer.c" locStartln="111" sev="3" auth="username" locRef="3" rule="HICPP-3_5_1-b" lnHash="1679375043" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1679375043" unbViolId="707a22cf-7e27-33bf-8f16-516f46a4228b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e2c13df-9099-3d2f-b10f-22c863db37e5" locEndPos="5" locType="sr" hash="-275311578" locEndLn="111" goals="0," />
    <StdViol msg="'i' shall be declared as unsigned int or signed int" ln="111" locFile="/build/../../../../../../../../timer.c" locStartln="111" sev="3" auth="username" locRef="3" rule="PORT-13" lnHash="1679375043" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="1679375043" unbViolId="a5a2fad0-371c-332f-8d3a-1093a79b99ee" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27d499b2-4b4b-37c5-a3e8-c9106cb5430e" locEndPos="9" locType="sr" hash="-275311578" locEndLn="111" goals="0," />
    <StdViol msg="The 'i' variable should be commented" ln="111" locFile="/build/../../../../../../../../timer.c" locStartln="111" sev="3" auth="username" locRef="3" rule="JSF-132_a" lnHash="1679375043" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="1679375043" unbViolId="f0e99def-2c0b-33a4-a822-721ab9791406" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8ebb4a8-5d6e-3e93-9747-8c130e0d0554" locEndPos="9" locType="sr" hash="-275311578" locEndLn="111" goals="0," />
    <StdViol msg="The 'i' variable should be commented" ln="111" locFile="/build/../../../../../../../../timer.c" locStartln="111" sev="3" auth="username" locRef="3" rule="COMMENT-05" lnHash="1679375043" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="1679375043" unbViolId="eff905c3-e067-31a2-9020-e3f909a5e016" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="340968d2-8fc7-3984-a7bc-fd2fde39ef04" locEndPos="9" locType="sr" hash="-275311578" locEndLn="111" goals="0," />
    <StdViol msg="The variable &quot;i&quot; was not initialized when declared" ln="111" locFile="/build/../../../../../../../../timer.c" locStartln="111" sev="2" auth="username" locRef="3" rule="JSF-142_b" lnHash="1679375043" rule.header="All variables shall be initialized before use" tool="c++test" lineHash="1679375043" unbViolId="cec9946d-b3f9-3de8-a966-c5e3573aacbf" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9786384a-6889-373d-9abe-57da6cae54f5" locEndPos="9" locType="sr" hash="-275311578" locEndLn="111" goals="0," />
    <StdViol msg="The variable &quot;i&quot; was not initialized when declared" ln="111" locFile="/build/../../../../../../../../timer.c" locStartln="111" sev="3" auth="username" locRef="3" rule="INIT-03" lnHash="1679375043" rule.header="Initialize all variables" tool="c++test" lineHash="1679375043" unbViolId="805a663a-2ac3-30a6-b475-bca01e7ddc1b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="899aa8a2-3518-316e-b20a-cd4349055be7" locEndPos="9" locType="sr" hash="-275311578" locEndLn="111" goals="0," />
    <StdViol msg="Use // comments only" ln="113" locFile="/build/../../../../../../../../timer.c" locStartln="113" sev="3" auth="username" locRef="3" rule="HICPP-2_3_1-a" lnHash="-109501628" rule.header="Prefer C++ style comment" tool="c++test" lineHash="-109501628" unbViolId="f20b7176-4098-3b46-9cfa-53c11d402536" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c918b5e-dace-3a92-ace9-7f97f49cc6fd" locEndPos="5" locType="sr" hash="-275311578" locEndLn="113" goals="0," />
    <StdViol msg="Use // comments only" ln="113" locFile="/build/../../../../../../../../timer.c" locStartln="113" sev="2" auth="username" locRef="3" rule="JSF-126" lnHash="-109501628" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="-109501628" unbViolId="619d6165-e24f-344f-97a8-85610cdf3174" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a2489c85-623c-3bd7-a5a3-c258c4f83ec3" locEndPos="5" locType="sr" hash="-275311578" locEndLn="113" goals="0," />
    <StdViol msg="Use // comments only" ln="113" locFile="/build/../../../../../../../../timer.c" locStartln="113" sev="3" auth="username" locRef="3" rule="COMMENT-01" lnHash="-109501628" rule.header="Prefer C++ style comment" tool="c++test" lineHash="-109501628" unbViolId="5e56fe49-7f60-35ae-95ad-54f7e77bbd61" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce27cab2-411c-34a7-ad2e-afaa8bf507eb" locEndPos="5" locType="sr" hash="-275311578" locEndLn="113" goals="0," />
    <StdViol msg="A loop does not have a fixed upper nor lower bound" ln="114" locFile="/build/../../../../../../../../timer.c" locStartln="114" sev="3" auth="username" locRef="3" rule="CODSTA-83" lnHash="-1694282400" rule.header="All loops must have a fixed upper or lower bound" tool="c++test" lineHash="-1694282400" unbViolId="f74a59e1-14c0-3076-ab8c-d4cb4ce4496b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1a36bb0-fb73-3d31-bd3e-c3c29a904b54" locEndPos="5" locType="sr" hash="-275311578" locEndLn="114" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="116" locFile="/build/../../../../../../../../timer.c" locStartln="116" sev="3" auth="username" locRef="3" rule="JSF-061" lnHash="1747357394" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1747357394" unbViolId="0ea7925c-a75f-3ee3-8e7c-e688e5a5a259" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9392030-ed69-38c6-8513-d28aaf762b7e" locEndPos="1" locType="sr" hash="-275311578" locEndLn="116" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="116" locFile="/build/../../../../../../../../timer.c" locStartln="116" sev="3" auth="username" locRef="3" rule="FORMAT-42" lnHash="1747357394" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1747357394" unbViolId="a31e7434-c8a0-3b78-83b3-da87811b7bcd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be096f1b-1d1f-3645-a6a2-53e5af375ddd" locEndPos="1" locType="sr" hash="-275311578" locEndLn="116" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="116" locFile="/build/../../../../../../../../timer.c" locStartln="116" sev="3" auth="username" locRef="3" rule="JSF-060_a" lnHash="1747357394" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1747357394" unbViolId="0c57c6a2-0bc4-3ce3-a2cd-56614f9db22c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="148280ec-1c01-385a-9509-ea238aca73ba" locEndPos="1" locType="sr" hash="-275311578" locEndLn="116" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="116" locFile="/build/../../../../../../../../timer.c" locStartln="116" sev="3" auth="username" locRef="3" rule="FORMAT-43" lnHash="1747357394" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="1747357394" unbViolId="8cfe923e-1fb8-3510-a17f-64a13b569045" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ff936db-606f-382e-a3fb-ce173ca414cf" locEndPos="1" locType="sr" hash="-275311578" locEndLn="116" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="116" locFile="/build/../../../../../../../../timer.c" locStartln="116" sev="3" auth="username" locRef="3" rule="JSF-060_b" lnHash="1747357394" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="1747357394" unbViolId="f71a1028-85be-3c3c-acf9-132b93836e63" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a705941d-288b-388f-bda6-c0502d3ee61a" locEndPos="1" locType="sr" hash="-275311578" locEndLn="116" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="116" locFile="/build/../../../../../../../../timer.c" locStartln="116" sev="3" auth="username" locRef="3" rule="FORMAT-02" lnHash="1747357394" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="1747357394" unbViolId="adb41b60-7490-3695-a30c-a78c46955653" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6d320e5-9586-3302-a0ac-46f2fd839d4a" locEndPos="1" locType="sr" hash="-275311578" locEndLn="116" goals="0," />
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="116" locFile="/build/../../../../../../../../timer.c" locStartln="116" sev="3" auth="username" locRef="3" rule="FORMAT-34" lnHash="1747357394" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="1747357394" unbViolId="a935e94e-99d2-39b8-8a22-ce4d6744ea88" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c04550d0-10e0-3835-8fa2-d6162d110649" locEndPos="1" locType="sr" hash="-275311578" locEndLn="116" goals="0," />
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="26" rule="AUTOSAR-A5_2_5-a" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1971501621" lang="cpp" violId="a11148f6-dc7d-3ab5-9f23-1f1e065710a9" locEndPos="0" locEndLn="117" goals="0," locStartln="116" sev="2" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="dee9152b-d3d1-3716-871d-34d4075831fa" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-301312004" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="25" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="25" srcRngEndLn="26" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="28" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="28" srcRngEndLn="29" desc="int i;" ElType="." rngLn="28" />
        <ElDesc lineHash="1743982722" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="30" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="30" srcRngEndLn="31" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="31" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="31" srcRngEndLn="32" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="110" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="110" srcRngEndLn="111" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="111" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="111" srcRngEndLn="112" desc="int i;" ElType="." rngLn="111" />
            <ElDesc lineHash="-1694282400" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="114" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="114" srcRngEndLn="115" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval" />
                <Ann msg="Entering the loop" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="116" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="116" srcRngEndLn="117" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="26" rule="AUTOSAR-M0_3_1-d" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="603962692" lang="cpp" violId="6eab34ad-00e5-369c-ba96-ca73c2476a7b" locEndPos="0" locEndLn="117" goals="0," locStartln="116" sev="2" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="8a77c26f-9c73-304a-8fa3-9194cad43f4c" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-301312004" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="25" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="25" srcRngEndLn="26" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="28" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="28" srcRngEndLn="29" desc="int i;" ElType="." rngLn="28" />
        <ElDesc lineHash="1743982722" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="30" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="30" srcRngEndLn="31" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="31" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="31" srcRngEndLn="32" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="110" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="110" srcRngEndLn="111" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="111" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="111" srcRngEndLn="112" desc="int i;" ElType="." rngLn="111" />
            <ElDesc lineHash="-1694282400" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="114" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="114" srcRngEndLn="115" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval" />
                <Ann msg="Entering the loop" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="116" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="116" srcRngEndLn="117" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="26" rule="AUTOSAR-M5_0_16-a" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1876103237" lang="cpp" violId="818b7c19-89e2-37da-b4c4-9d3145fa3121" locEndPos="0" locEndLn="117" goals="0," locStartln="116" sev="2" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="c35b1fef-90c2-3e36-8dae-05c68b9bc7ff" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-301312004" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="25" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="25" srcRngEndLn="26" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="28" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="28" srcRngEndLn="29" desc="int i;" ElType="." rngLn="28" />
        <ElDesc lineHash="1743982722" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="30" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="30" srcRngEndLn="31" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="31" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="31" srcRngEndLn="32" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="110" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="110" srcRngEndLn="111" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="111" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="111" srcRngEndLn="112" desc="int i;" ElType="." rngLn="111" />
            <ElDesc lineHash="-1694282400" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="114" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="114" srcRngEndLn="115" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval" />
                <Ann msg="Entering the loop" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="116" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="116" srcRngEndLn="117" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="26" rule="BD-PB-ARRAY" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-586161259" lang="cpp" violId="a9d21d99-4484-391f-9a36-8f2d0e0338db" locEndPos="0" locEndLn="117" goals="0," locStartln="116" sev="2" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="42289da7-3733-395c-b54b-8e124d37b508" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-301312004" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="25" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="25" srcRngEndLn="26" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="28" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="28" srcRngEndLn="29" desc="int i;" ElType="." rngLn="28" />
        <ElDesc lineHash="1743982722" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="30" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="30" srcRngEndLn="31" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="31" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="31" srcRngEndLn="32" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="110" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="110" srcRngEndLn="111" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="111" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="111" srcRngEndLn="112" desc="int i;" ElType="." rngLn="111" />
            <ElDesc lineHash="-1694282400" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="114" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="114" srcRngEndLn="115" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval" />
                <Ann msg="Entering the loop" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="116" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="116" srcRngEndLn="117" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="26" rule="CERT_C-ARR30-a" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1924690577" lang="cpp" violId="1d852d41-4015-3c11-954b-c2e319916e80" locEndPos="0" locEndLn="117" goals="0," locStartln="116" sev="2" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="dac30333-a569-346f-b952-22b3f964cf5c" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-301312004" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="25" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="25" srcRngEndLn="26" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="28" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="28" srcRngEndLn="29" desc="int i;" ElType="." rngLn="28" />
        <ElDesc lineHash="1743982722" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="30" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="30" srcRngEndLn="31" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="31" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="31" srcRngEndLn="32" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="110" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="110" srcRngEndLn="111" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="111" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="111" srcRngEndLn="112" desc="int i;" ElType="." rngLn="111" />
            <ElDesc lineHash="-1694282400" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="114" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="114" srcRngEndLn="115" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval" />
                <Ann msg="Entering the loop" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="116" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="116" srcRngEndLn="117" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="26" rule="CERT_C-ARR39-a" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1924762826" lang="cpp" violId="f2deafe5-af0d-3030-946f-24c58df81974" locEndPos="0" locEndLn="117" goals="0," locStartln="116" sev="2" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="4929f021-080c-3706-b3a8-5becbaca1b44" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-301312004" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="25" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="25" srcRngEndLn="26" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="28" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="28" srcRngEndLn="29" desc="int i;" ElType="." rngLn="28" />
        <ElDesc lineHash="1743982722" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="30" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="30" srcRngEndLn="31" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="31" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="31" srcRngEndLn="32" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="110" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="110" srcRngEndLn="111" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="111" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="111" srcRngEndLn="112" desc="int i;" ElType="." rngLn="111" />
            <ElDesc lineHash="-1694282400" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="114" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="114" srcRngEndLn="115" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval" />
                <Ann msg="Entering the loop" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="116" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="116" srcRngEndLn="117" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="26" rule="CERT_C-EXP08-b" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1366367529" lang="cpp" violId="b666bd8e-9f6a-3237-aab8-7a023c9d8233" locEndPos="0" locEndLn="117" goals="0," locStartln="116" sev="2" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="bce304be-b972-362e-9ef9-3a861c24c383" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-301312004" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="25" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="25" srcRngEndLn="26" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="28" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="28" srcRngEndLn="29" desc="int i;" ElType="." rngLn="28" />
        <ElDesc lineHash="1743982722" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="30" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="30" srcRngEndLn="31" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="31" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="31" srcRngEndLn="32" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="110" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="110" srcRngEndLn="111" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="111" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="111" srcRngEndLn="112" desc="int i;" ElType="." rngLn="111" />
            <ElDesc lineHash="-1694282400" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="114" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="114" srcRngEndLn="115" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval" />
                <Ann msg="Entering the loop" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="116" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="116" srcRngEndLn="117" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="26" rule="CERT_C-FIO37-a" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1974915427" lang="cpp" violId="a08e0379-9423-3d47-8f0b-1e729271886e" locEndPos="0" locEndLn="117" goals="0," locStartln="116" sev="1" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="750061d4-93ba-3d08-857c-6af689d0525b" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-301312004" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="25" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="25" srcRngEndLn="26" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="28" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="28" srcRngEndLn="29" desc="int i;" ElType="." rngLn="28" />
        <ElDesc lineHash="1743982722" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="30" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="30" srcRngEndLn="31" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="31" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="31" srcRngEndLn="32" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="110" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="110" srcRngEndLn="111" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="111" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="111" srcRngEndLn="112" desc="int i;" ElType="." rngLn="111" />
            <ElDesc lineHash="-1694282400" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="114" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="114" srcRngEndLn="115" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval" />
                <Ann msg="Entering the loop" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="116" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="116" srcRngEndLn="117" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="26" rule="CERT_C-INT10-a" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="305541313" lang="cpp" violId="b0f52747-375f-3b55-b829-988452ae5c3a" locEndPos="0" locEndLn="117" goals="0," locStartln="116" sev="3" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="aa8894bc-72ae-3af4-90bb-f65e08cc3888" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-301312004" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="25" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="25" srcRngEndLn="26" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="28" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="28" srcRngEndLn="29" desc="int i;" ElType="." rngLn="28" />
        <ElDesc lineHash="1743982722" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="30" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="30" srcRngEndLn="31" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="31" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="31" srcRngEndLn="32" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="110" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="110" srcRngEndLn="111" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="111" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="111" srcRngEndLn="112" desc="int i;" ElType="." rngLn="111" />
            <ElDesc lineHash="-1694282400" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="114" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="114" srcRngEndLn="115" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval" />
                <Ann msg="Entering the loop" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="116" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="116" srcRngEndLn="117" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="26" rule="CERT_C-MSC19-a" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-150668632" lang="cpp" violId="f2742abc-258f-39ca-9b89-590b70dfec5f" locEndPos="0" locEndLn="117" goals="0," locStartln="116" sev="3" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="e5e27f5f-3cdc-3c5b-90ec-fe843ef82752" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-301312004" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="25" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="25" srcRngEndLn="26" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="28" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="28" srcRngEndLn="29" desc="int i;" ElType="." rngLn="28" />
        <ElDesc lineHash="1743982722" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="30" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="30" srcRngEndLn="31" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="31" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="31" srcRngEndLn="32" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="110" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="110" srcRngEndLn="111" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="111" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="111" srcRngEndLn="112" desc="int i;" ElType="." rngLn="111" />
            <ElDesc lineHash="-1694282400" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="114" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="114" srcRngEndLn="115" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval" />
                <Ann msg="Entering the loop" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="116" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="116" srcRngEndLn="117" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="26" rule="CERT_C-STR31-a" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="924209666" lang="cpp" violId="9ecb92ba-1bd4-39f2-86b8-b9a152a308a4" locEndPos="0" locEndLn="117" goals="0," locStartln="116" sev="1" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="d5c7b221-6cf7-331d-8fae-8ec1d5011906" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-301312004" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="25" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="25" srcRngEndLn="26" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="28" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="28" srcRngEndLn="29" desc="int i;" ElType="." rngLn="28" />
        <ElDesc lineHash="1743982722" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="30" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="30" srcRngEndLn="31" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="31" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="31" srcRngEndLn="32" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="110" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="110" srcRngEndLn="111" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="111" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="111" srcRngEndLn="112" desc="int i;" ElType="." rngLn="111" />
            <ElDesc lineHash="-1694282400" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="114" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="114" srcRngEndLn="115" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval" />
                <Ann msg="Entering the loop" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="116" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="116" srcRngEndLn="117" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="26" rule="CWE-119-a" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1331533971" lang="cpp" violId="3512ca19-1802-37fb-98a2-0ceae02472b4" locEndPos="0" locEndLn="117" goals="0," locStartln="116" sev="2" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="6ee1bb6a-2a83-32cd-a67b-34d8e3b7b220" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-301312004" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="25" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="25" srcRngEndLn="26" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="28" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="28" srcRngEndLn="29" desc="int i;" ElType="." rngLn="28" />
        <ElDesc lineHash="1743982722" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="30" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="30" srcRngEndLn="31" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="31" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="31" srcRngEndLn="32" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="110" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="110" srcRngEndLn="111" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="111" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="111" srcRngEndLn="112" desc="int i;" ElType="." rngLn="111" />
            <ElDesc lineHash="-1694282400" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="114" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="114" srcRngEndLn="115" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval" />
                <Ann msg="Entering the loop" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="116" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="116" srcRngEndLn="117" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="26" rule="CWE-125-a" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1331430192" lang="cpp" violId="437197e4-3fa5-31ad-a595-f16e370a08ca" locEndPos="0" locEndLn="117" goals="0," locStartln="116" sev="2" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="c6665c47-d512-3558-ae50-43f63ed2f810" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-301312004" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="25" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="25" srcRngEndLn="26" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="28" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="28" srcRngEndLn="29" desc="int i;" ElType="." rngLn="28" />
        <ElDesc lineHash="1743982722" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="30" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="30" srcRngEndLn="31" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="31" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="31" srcRngEndLn="32" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="110" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="110" srcRngEndLn="111" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="111" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="111" srcRngEndLn="112" desc="int i;" ElType="." rngLn="111" />
            <ElDesc lineHash="-1694282400" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="114" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="114" srcRngEndLn="115" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval" />
                <Ann msg="Entering the loop" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="116" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="116" srcRngEndLn="117" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="26" rule="CWE-787-a" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1327877358" lang="cpp" violId="7ebbb582-3096-36bb-858e-547338f7d9a1" locEndPos="0" locEndLn="117" goals="0," locStartln="116" sev="2" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="db0660c3-d76f-32f5-8fcd-8127494d6e0d" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-301312004" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="25" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="25" srcRngEndLn="26" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="28" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="28" srcRngEndLn="29" desc="int i;" ElType="." rngLn="28" />
        <ElDesc lineHash="1743982722" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="30" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="30" srcRngEndLn="31" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="31" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="31" srcRngEndLn="32" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="110" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="110" srcRngEndLn="111" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="111" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="111" srcRngEndLn="112" desc="int i;" ElType="." rngLn="111" />
            <ElDesc lineHash="-1694282400" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="114" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="114" srcRngEndLn="115" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval" />
                <Ann msg="Entering the loop" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="116" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="116" srcRngEndLn="117" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="26" rule="HICPP-5_2_1-a" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-666353249" lang="cpp" violId="815bf0f3-635b-36fc-ac88-5a97cbe3ce28" locEndPos="0" locEndLn="117" goals="0," locStartln="116" sev="2" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="40e2bf4f-8dd8-39f2-8286-5611c4466908" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-301312004" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="25" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="25" srcRngEndLn="26" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="28" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="28" srcRngEndLn="29" desc="int i;" ElType="." rngLn="28" />
        <ElDesc lineHash="1743982722" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="30" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="30" srcRngEndLn="31" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="31" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="31" srcRngEndLn="32" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="110" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="110" srcRngEndLn="111" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="111" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="111" srcRngEndLn="112" desc="int i;" ElType="." rngLn="111" />
            <ElDesc lineHash="-1694282400" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="114" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="114" srcRngEndLn="115" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval" />
                <Ann msg="Entering the loop" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="116" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="116" srcRngEndLn="117" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="26" rule="MISRA2008-0_3_1_a" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="117018827" lang="cpp" violId="91d16e99-b129-383b-bc19-ee51a192f5ee" locEndPos="0" locEndLn="117" goals="0," locStartln="116" sev="5" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="ec52c2ad-19e5-39d8-93fc-8cb1bcbfdba4" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-301312004" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="25" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="25" srcRngEndLn="26" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="28" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="28" srcRngEndLn="29" desc="int i;" ElType="." rngLn="28" />
        <ElDesc lineHash="1743982722" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="30" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="30" srcRngEndLn="31" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="31" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="31" srcRngEndLn="32" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="110" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="110" srcRngEndLn="111" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="111" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="111" srcRngEndLn="112" desc="int i;" ElType="." rngLn="111" />
            <ElDesc lineHash="-1694282400" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="114" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="114" srcRngEndLn="115" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval" />
                <Ann msg="Entering the loop" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="116" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="116" srcRngEndLn="117" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="26" rule="MISRA2008-5_0_16_a" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1307565917" lang="cpp" violId="716cc9d8-f909-308a-aef7-a2c8d29e3820" locEndPos="0" locEndLn="117" goals="0," locStartln="116" sev="2" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="8240713a-9162-3341-8ae8-24f7f8dfd4f6" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-301312004" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="25" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="25" srcRngEndLn="26" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="28" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="28" srcRngEndLn="29" desc="int i;" ElType="." rngLn="28" />
        <ElDesc lineHash="1743982722" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="30" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="30" srcRngEndLn="31" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="31" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="31" srcRngEndLn="32" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="110" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="110" srcRngEndLn="111" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="111" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="111" srcRngEndLn="112" desc="int i;" ElType="." rngLn="111" />
            <ElDesc lineHash="-1694282400" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="114" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="114" srcRngEndLn="115" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval" />
                <Ann msg="Entering the loop" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="116" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="116" srcRngEndLn="117" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="26" rule="MISRA2012-DIR-4_1_a" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1535796996" lang="cpp" violId="afbb4cdb-6e7d-3b3d-b7ce-a2dd8427439c" locEndPos="0" locEndLn="117" goals="0," locStartln="116" sev="2" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="d4a6eabb-9e05-3d99-b493-f8522a0da7cf" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-301312004" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="25" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="25" srcRngEndLn="26" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="28" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="28" srcRngEndLn="29" desc="int i;" ElType="." rngLn="28" />
        <ElDesc lineHash="1743982722" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="30" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="30" srcRngEndLn="31" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="31" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="31" srcRngEndLn="32" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="110" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="110" srcRngEndLn="111" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="111" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="111" srcRngEndLn="112" desc="int i;" ElType="." rngLn="111" />
            <ElDesc lineHash="-1694282400" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="114" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="114" srcRngEndLn="115" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval" />
                <Ann msg="Entering the loop" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="116" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="116" srcRngEndLn="117" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="26" rule="MISRA2012-RULE-18_1_a" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1654054968" lang="cpp" violId="7ee165bd-60b1-3a1d-ab6f-1c8479131cd3" locEndPos="0" locEndLn="117" goals="0," locStartln="116" sev="2" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="15891ef3-0c5d-39c2-83f6-a8dce484d7bc" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-301312004" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="25" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="25" srcRngEndLn="26" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="28" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="28" srcRngEndLn="29" desc="int i;" ElType="." rngLn="28" />
        <ElDesc lineHash="1743982722" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="30" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="30" srcRngEndLn="31" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="31" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="31" srcRngEndLn="32" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="110" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="110" srcRngEndLn="111" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="111" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="111" srcRngEndLn="112" desc="int i;" ElType="." rngLn="111" />
            <ElDesc lineHash="-1694282400" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="114" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="114" srcRngEndLn="115" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval" />
                <Ann msg="Entering the loop" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="116" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="116" srcRngEndLn="117" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="26" rule="MISRAC2012-DIR_4_1-a" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-2019570357" lang="cpp" violId="b854191d-b236-3ab2-aad4-eb687259861a" locEndPos="0" locEndLn="117" goals="0," locStartln="116" sev="2" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="02171190-95a8-315a-899c-8ddbe44e3297" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-301312004" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="25" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="25" srcRngEndLn="26" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="28" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="28" srcRngEndLn="29" desc="int i;" ElType="." rngLn="28" />
        <ElDesc lineHash="1743982722" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="30" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="30" srcRngEndLn="31" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="31" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="31" srcRngEndLn="32" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="110" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="110" srcRngEndLn="111" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="111" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="111" srcRngEndLn="112" desc="int i;" ElType="." rngLn="111" />
            <ElDesc lineHash="-1694282400" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="114" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="114" srcRngEndLn="115" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval" />
                <Ann msg="Entering the loop" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="116" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="116" srcRngEndLn="117" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="26" rule="MISRAC2012-RULE_18_1-a" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-141584669" lang="cpp" violId="1cf86856-9dc9-3793-8eb4-951fb3bc9830" locEndPos="0" locEndLn="117" goals="0," locStartln="116" sev="2" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="0625cfc4-f169-36e8-8f9d-fd1cecb24d3d" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-301312004" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="25" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="25" srcRngEndLn="26" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="28" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="28" srcRngEndLn="29" desc="int i;" ElType="." rngLn="28" />
        <ElDesc lineHash="1743982722" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="30" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="30" srcRngEndLn="31" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="31" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="31" srcRngEndLn="32" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="110" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="110" srcRngEndLn="111" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="111" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="111" srcRngEndLn="112" desc="int i;" ElType="." rngLn="111" />
            <ElDesc lineHash="-1694282400" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="114" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="114" srcRngEndLn="115" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval" />
                <Ann msg="Entering the loop" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="116" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="116" srcRngEndLn="117" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Possibly accessing array &quot;timer_records&quot; out of bounds at index -1. Correct index(es): [0...99]" ln="116" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="26" rule="OWASP2019-API3-b" FirstElSrcRngStartPos="0" lnHash="1747357394" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1120812739" lang="cpp" violId="3efacf23-a7ec-369d-a01d-225a1874321f" locEndPos="0" locEndLn="117" goals="0," locStartln="116" sev="2" locRef="3" tool="c++test" lineHash="1747357394" unbViolId="09f8ead6-c3f0-3f65-bf36-f7947ce26d3e" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-301312004" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="25" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="25" srcRngEndLn="26" desc="void uninit_timer()" ElType=".C" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="28" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="28" srcRngEndLn="29" desc="int i;" ElType="." rngLn="28" />
        <ElDesc lineHash="1743982722" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="30" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="30" srcRngEndLn="31" desc="for (i = 0; i &lt; max_records; i++) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; 100) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="26121042" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="31" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="31" srcRngEndLn="32" desc="delete_timer_record(i);" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="110" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="110" srcRngEndLn="111" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="110" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="111" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="111" srcRngEndLn="112" desc="int i;" ElType="." rngLn="111" />
            <ElDesc lineHash="-1694282400" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="114" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="114" srcRngEndLn="115" desc="for (i = idx-1; i &lt; curr_index; i++)" ElType="." rngLn="114">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; curr_index) (assuming true)" kind="condEval" />
                <Ann msg="Entering the loop" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1747357394" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="116" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="116" srcRngEndLn="117" desc="if (0 == timer_records[i]) {" ElType=".P" rngLn="116">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Expression of pointer type is compared with '0'" ln="116" locFile="/build/../../../../../../../../timer.c" locStartln="116" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-11_9_a" lnHash="1747357394" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="1747357394" unbViolId="cf13d781-2a1d-32b9-9730-867903f06b54" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90752771-5490-31e6-908d-2afe56f80c52" locEndPos="13" locType="sr" hash="-275311578" locEndLn="116" goals="0," />
    <StdViol msg="Expression of pointer type is compared with '0'" ln="116" locFile="/build/../../../../../../../../timer.c" locStartln="116" sev="2" auth="username" locRef="3" rule="AUTOSAR-M4_10_2-a" lnHash="1747357394" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="1747357394" unbViolId="f500cd74-62eb-3128-81d1-9f4f91824f70" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="579718f7-972c-302d-8471-d9fd629a9e0b" locEndPos="13" locType="sr" hash="-275311578" locEndLn="116" goals="0," />
    <StdViol msg="Expression of pointer type is compared with '0'" ln="116" locFile="/build/../../../../../../../../timer.c" locStartln="116" sev="2" auth="username" locRef="3" rule="MISRA2008-4_10_2" lnHash="1747357394" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="1747357394" unbViolId="bb044215-e3a7-3ab0-bff3-7e365bcf7c98" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9d52739-0e8d-3b09-a217-997237810f77" locEndPos="13" locType="sr" hash="-275311578" locEndLn="116" goals="0," />
    <StdViol msg="Expression of pointer type is compared with '0'" ln="116" locFile="/build/../../../../../../../../timer.c" locStartln="116" sev="3" auth="username" locRef="3" rule="CODSTA-CPP-63" lnHash="1747357394" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="1747357394" unbViolId="b249caca-7e43-34a6-835d-32b92ec45f8b" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="649fe1b6-ebc4-3ba6-a443-85a52a291adc" locEndPos="13" locType="sr" hash="-275311578" locEndLn="116" goals="0," />
    <StdViol msg="Expression of pointer type is compared with '0'" ln="116" locFile="/build/../../../../../../../../timer.c" locStartln="116" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_11_9-a" lnHash="1747357394" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="1747357394" unbViolId="4e6b37a0-8c10-37a8-a0c3-c4f06c37f7ca" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8a79ea3-77bb-315f-a4ff-b5171d5273a5" locEndPos="13" locType="sr" hash="-275311578" locEndLn="116" goals="0," />
    <StdViol msg="Expression of pointer type is compared with '0'" ln="116" locFile="/build/../../../../../../../../timer.c" locStartln="116" sev="3" auth="username" locRef="3" rule="CODSTA-131" lnHash="1747357394" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="1747357394" unbViolId="1926ea21-29d5-3065-be83-2f18112b2810" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ed53889-abc4-368e-9f27-d570ddabc122" locEndPos="13" locType="sr" hash="-275311578" locEndLn="116" goals="0," />
    <StdViol msg="Expression of pointer type is compared with '0'" ln="116" locFile="/build/../../../../../../../../timer.c" locStartln="116" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-11_9_b" lnHash="1747357394" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="1747357394" unbViolId="123cbd83-7aac-3c3d-9935-2cd2bcf403fd" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8dddbe86-6bb4-3cfc-8ef0-227cd70212a3" locEndPos="13" locType="sr" hash="-275311578" locEndLn="116" goals="0," />
    <StdViol msg="Expression of pointer type is compared with '0'" ln="116" locFile="/build/../../../../../../../../timer.c" locStartln="116" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_11_9-b" lnHash="1747357394" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="1747357394" unbViolId="fe070d0f-98fd-371c-b78d-261700615742" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9463bafd-1bde-380a-8f4b-62e5395157e6" locEndPos="13" locType="sr" hash="-275311578" locEndLn="116" goals="0," />
    <StdViol msg="The 'break' statement interrupts a 'for' loop" ln="117" locFile="/build/../../../../../../../../timer.c" locStartln="117" sev="2" auth="username" locRef="3" rule="CODSTA-08" lnHash="207609628" rule.header="Do not use break in for loops" tool="c++test" lineHash="207609628" unbViolId="dce94501-0521-3102-a493-19f5ca41f5dc" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31e3825e-7c36-37df-8d51-8be570831c99" locEndPos="13" locType="sr" hash="-275311578" locEndLn="117" goals="0," />
    <StdViol msg="The break statement shall not be used" ln="117" locFile="/build/../../../../../../../../timer.c" locStartln="117" sev="2" auth="username" locRef="3" rule="JSF-191" lnHash="207609628" rule.header="The break statement shall not be used (except to terminate the cases of a switch statement)" tool="c++test" lineHash="207609628" unbViolId="92992149-1f95-3815-85ab-5b3721a28d2c" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="519733c3-e4a6-3ea7-8ac6-c583b5bed263" locEndPos="13" locType="sr" hash="-275311578" locEndLn="117" goals="0," />
    <StdViol msg="The break statement shall not be used" ln="117" locFile="/build/../../../../../../../../timer.c" locStartln="117" sev="3" auth="username" locRef="3" rule="MISRA-058" lnHash="207609628" rule.header="Do not use the break statement" tool="c++test" lineHash="207609628" unbViolId="048fe289-c67a-3581-afc3-a5b365ed0a44" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6543e235-b2c5-3bd2-a40f-77e2ea24a371" locEndPos="13" locType="sr" hash="-275311578" locEndLn="117" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="118" locFile="/build/../../../../../../../../timer.c" locStartln="118" sev="3" auth="username" locRef="3" rule="JSF-061" lnHash="646285399" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="646285399" unbViolId="79e4f261-4e8e-38d7-a385-accfecde9e99" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c052b6eb-7e8b-3120-ad81-81ec9d853d92" locEndPos="1" locType="sr" hash="-275311578" locEndLn="118" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="118" locFile="/build/../../../../../../../../timer.c" locStartln="118" sev="3" auth="username" locRef="3" rule="FORMAT-42" lnHash="646285399" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="646285399" unbViolId="222723aa-8030-3404-bd8a-4127061cf194" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2a64897-be35-30f0-9dc2-1513f73ff5f0" locEndPos="1" locType="sr" hash="-275311578" locEndLn="118" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="118" locFile="/build/../../../../../../../../timer.c" locStartln="118" sev="3" auth="username" locRef="3" rule="JSF-060_a" lnHash="646285399" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="646285399" unbViolId="3efcae7f-f5f2-3056-bf93-9fe17a9963ab" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2eb3bee1-376c-3865-9840-f49ea5c872c7" locEndPos="1" locType="sr" hash="-275311578" locEndLn="118" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="118" locFile="/build/../../../../../../../../timer.c" locStartln="118" sev="3" auth="username" locRef="3" rule="FORMAT-43" lnHash="646285399" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="646285399" unbViolId="13a99cb5-3375-3895-9610-331c59283428" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c85f911e-b7a1-3922-b2d8-16dffbf15049" locEndPos="1" locType="sr" hash="-275311578" locEndLn="118" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="118" locFile="/build/../../../../../../../../timer.c" locStartln="118" sev="3" auth="username" locRef="3" rule="JSF-060_b" lnHash="646285399" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="646285399" unbViolId="871c367d-372d-346e-9f32-1ebc50917e42" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e7a5f72-682e-330f-b151-8b02dc8cca59" locEndPos="1" locType="sr" hash="-275311578" locEndLn="118" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="118" locFile="/build/../../../../../../../../timer.c" locStartln="118" sev="3" auth="username" locRef="3" rule="FORMAT-02" lnHash="646285399" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="646285399" unbViolId="d597af10-e816-3e81-8d8f-2aef6530351b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="81bc64a4-b5ca-3377-9db5-ad6e3b4b271a" locEndPos="1" locType="sr" hash="-275311578" locEndLn="118" goals="0," />
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="118" locFile="/build/../../../../../../../../timer.c" locStartln="118" sev="3" auth="username" locRef="3" rule="FORMAT-34" lnHash="646285399" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="646285399" unbViolId="bb402bde-d2f1-36f2-85f1-5d2795458b11" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4b5f4a0-90dc-3550-8941-2c4fc80a0bba" locEndPos="1" locType="sr" hash="-275311578" locEndLn="118" goals="0," />
    <StdViol msg="Put the closing brace '}' on its own line" ln="118" locFile="/build/../../../../../../../../timer.c" locStartln="118" sev="3" auth="username" locRef="3" rule="JSF-061" lnHash="646285399" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="646285399" unbViolId="871196c0-13de-329f-8ab2-7651d9314f37" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aaba2c11-1cdc-3ff0-a57c-72b1318a5961" locEndPos="9" locType="sr" hash="-275311578" locEndLn="118" goals="0," />
    <StdViol msg="Put the closing brace '}' on its own line" ln="118" locFile="/build/../../../../../../../../timer.c" locStartln="118" sev="3" auth="username" locRef="3" rule="FORMAT-42" lnHash="646285399" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="646285399" unbViolId="9114e6cb-e741-3e04-b5d6-9599d79d8315" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3aff6e8d-b952-3ad9-9a19-d6950c12f7ce" locEndPos="9" locType="sr" hash="-275311578" locEndLn="118" goals="0," />
    <StdViol msg="Put the closing brace '}' on its own line" ln="118" locFile="/build/../../../../../../../../timer.c" locStartln="118" sev="3" auth="username" locRef="3" rule="JSF-060_a" lnHash="646285399" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="646285399" unbViolId="a94d5584-9cf7-30ba-a41c-423cc02f385d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0641f2c2-4c3e-37dd-ab06-19c8f7e162b1" locEndPos="9" locType="sr" hash="-275311578" locEndLn="118" goals="0," />
    <StdViol msg="Put the closing brace '}' on its own line" ln="118" locFile="/build/../../../../../../../../timer.c" locStartln="118" sev="3" auth="username" locRef="3" rule="FORMAT-03" lnHash="646285399" rule.header="Place a closing brace '}' on its own line" tool="c++test" lineHash="646285399" unbViolId="fb8af0d1-f991-3878-a594-52fd2b18353d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4bd13e20-f4ff-3ba3-b0af-e713acf43d0f" locEndPos="9" locType="sr" hash="-275311578" locEndLn="118" goals="0," />
    <StdViol msg="Global array 'timer_records' is modified in function 'delete_timer_record'" ln="119" locFile="/build/../../../../../../../../timer.c" locStartln="119" sev="3" auth="username" locRef="3" rule="CODSTA-27" lnHash="-1724712002" rule.header="Avoid functions that modify global variables" tool="c++test" lineHash="-1724712002" unbViolId="edc44f37-e83e-3764-857b-277a6c0f1f51" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8780be6c-e85e-325e-85d3-6298ec1d69c1" locEndPos="13" locType="sr" hash="-275311578" locEndLn="119" goals="0," />
    <StdViol msg="Global variable 'curr_index' is modified in function 'delete_timer_record'" ln="122" locFile="/build/../../../../../../../../timer.c" locStartln="122" sev="3" auth="username" locRef="3" rule="CODSTA-27" lnHash="-1575012362" rule.header="Avoid functions that modify global variables" tool="c++test" lineHash="-1575012362" unbViolId="041b8671-7888-37b2-9e32-8eea822aa191" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6d9dd63d-7e4b-3d12-b286-4b9394a71b41" locEndPos="5" locType="sr" hash="-275311578" locEndLn="122" goals="0," />
    <StdViol msg="Values &quot;tr&quot; passed to library function &quot;free&quot; without being checked" ln="123" locFile="/build/../../../../../../../../timer.c" locStartln="123" sev="2" auth="username" locRef="3" rule="CERT_C-MEM07-a" lnHash="-813884052" rule.header="The validity of values passed to library functions shall be checked" tool="c++test" lineHash="-813884052" unbViolId="2782c1ee-2e35-3a89-9082-71b6ab5adece" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22b89395-36b3-37ce-bf97-a72805913e28" locEndPos="5" locType="sr" hash="-275311578" locEndLn="123" goals="0," />
    <StdViol msg="Values &quot;tr&quot; passed to library function &quot;free&quot; without being checked" ln="123" locFile="/build/../../../../../../../../timer.c" locStartln="123" sev="2" auth="username" locRef="3" rule="CERT_C-MEM04-a" lnHash="-813884052" rule.header="The validity of values passed to library functions shall be checked" tool="c++test" lineHash="-813884052" unbViolId="801d72d7-094f-325c-b9f6-fdcdd3ee1015" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7e5fb7f-b58c-3d6d-a130-fa69681175d3" locEndPos="5" locType="sr" hash="-275311578" locEndLn="123" goals="0," />
    <StdViol msg="Values &quot;tr&quot; passed to library function &quot;free&quot; without being checked" ln="123" locFile="/build/../../../../../../../../timer.c" locStartln="123" sev="3" auth="username" locRef="3" rule="MISRA2004-20_3" lnHash="-813884052" rule.header="The validity of values passed to library functions shall be checked" tool="c++test" lineHash="-813884052" unbViolId="40ffceab-22ed-34d7-8d98-07f8e92299c0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ddac902-7a23-3b6a-89a7-31e25aba0680" locEndPos="5" locType="sr" hash="-275311578" locEndLn="123" goals="0," />
    <StdViol msg="The type 'timer_record*' of function argument number '1' does not match declared type 'void*'" ln="123" locFile="/build/../../../../../../../../timer.c" locStartln="123" sev="3" auth="username" locRef="3" rule="PB-11" lnHash="-813884052" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-813884052" unbViolId="8ac44c79-69dd-32ce-8d9b-7660fd2b293b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc42c04e-3e93-394a-9ac1-22a01687e07f" locEndPos="5" locType="sr" hash="-275311578" locEndLn="123" goals="0," />
    <StdViol msg="'free' function should not be used" ln="123" locFile="/build/../../../../../../../../timer.c" locStartln="123" sev="2" auth="username" locRef="3" rule="MISRA2012-DIR-4_12" lnHash="-813884052" rule.header="Dynamic memory allocation shall not be used" tool="c++test" lineHash="-813884052" unbViolId="5b8864d7-7f3d-3718-b2fb-ee6fd5d25f64" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="08124002-f7f9-3fe5-bc71-eadd5918e3f4" locEndPos="5" locType="sr" hash="-275311578" locEndLn="123" goals="0," />
    <StdViol msg="'free' function should not be used" ln="123" locFile="/build/../../../../../../../../timer.c" locStartln="123" sev="2" auth="username" locRef="3" rule="MISRA2008-18_4_1" lnHash="-813884052" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-813884052" unbViolId="731b3e06-f97c-314d-9334-2933222a22f5" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="491a7c4b-5771-31b7-93fc-8efcb8c93e7b" locEndPos="5" locType="sr" hash="-275311578" locEndLn="123" goals="0," />
    <StdViol msg="'free' function should not be used" ln="123" locFile="/build/../../../../../../../../timer.c" locStartln="123" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_21_3-a" lnHash="-813884052" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-813884052" unbViolId="5aa1818a-3348-3a9c-85ae-3dd6e3a41bc3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d0eca3c-09a0-3100-a726-422f0c11ed27" locEndPos="5" locType="sr" hash="-275311578" locEndLn="123" goals="0," />
    <StdViol msg="'free' function should not be used" ln="123" locFile="/build/../../../../../../../../timer.c" locStartln="123" sev="2" auth="username" locRef="3" rule="AUTOSAR-A18_5_2-a" lnHash="-813884052" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-813884052" unbViolId="1d57a8dd-65e9-3ea4-8fd1-079122dedc48" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17506b88-37c8-3833-8c9c-ef593c4df342" locEndPos="5" locType="sr" hash="-275311578" locEndLn="123" goals="0," />
    <StdViol msg="'free' function should not be used" ln="123" locFile="/build/../../../../../../../../timer.c" locStartln="123" sev="2" auth="username" locRef="3" rule="JSF-206" lnHash="-813884052" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-813884052" unbViolId="06fb64d5-4163-3c25-9ae5-8804f2b775d1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="176b16d8-e474-396d-8953-5e33932b304b" locEndPos="5" locType="sr" hash="-275311578" locEndLn="123" goals="0," />
    <StdViol msg="'free' function should not be used" ln="123" locFile="/build/../../../../../../../../timer.c" locStartln="123" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-21_3" lnHash="-813884052" rule.header="The memory allocation and deallocation functions of &lt;stdlib.h> shall not be used" tool="c++test" lineHash="-813884052" unbViolId="3f35fe7a-1797-3c39-abde-fcae50740d6b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21ca750d-f7ee-3065-b467-9e3a0f3439cd" locEndPos="5" locType="sr" hash="-275311578" locEndLn="123" goals="0," />
    <StdViol msg="'free' function should not be used" ln="123" locFile="/build/../../../../../../../../timer.c" locStartln="123" sev="3" auth="username" locRef="3" rule="MISRA2004-20_4" lnHash="-813884052" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-813884052" unbViolId="95067b8b-fdfe-318e-b62d-478e7f09916c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9b2b8705-9e6a-3d91-9ce1-aff536593c63" locEndPos="5" locType="sr" hash="-275311578" locEndLn="123" goals="0," />
    <StdViol msg="'free' function should not be used" ln="123" locFile="/build/../../../../../../../../timer.c" locStartln="123" sev="2" auth="username" locRef="3" rule="MISRAC2012-DIR_4_12-a" lnHash="-813884052" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-813884052" unbViolId="0a6d8bfa-fa89-3500-b5fe-8c1bc85b368b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="50ae46a3-7084-3891-9f76-63b7d0034d4f" locEndPos="5" locType="sr" hash="-275311578" locEndLn="123" goals="0," />
    <StdViol msg="The 'format_timer_record' function should be preceded by a comment that contains the '@brief' tag" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="COMMENT-14" lnHash="1296456001" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1296456001" unbViolId="2d43c77b-0fed-3e28-9e87-2e378d11ad42" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8b8e097-5d15-319b-a780-7c81976bf55d" locEndPos="6" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The 'format_timer_record' function should be preceded by a comment that contains the '@brief' tag" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="2" auth="username" locRef="3" rule="AUTOSAR-A2_7_3-a" lnHash="1296456001" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1296456001" unbViolId="e6264962-3fec-38ef-bcfb-bf57f4ff9c14" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="745564b7-1fea-3e36-a0d1-0c560d60c480" locEndPos="6" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The 'idx' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="COMMENT-14_b" lnHash="1296456001" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1296456001" unbViolId="f816d723-ba80-344e-9c00-02388328c957" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1044aea5-91e5-3a20-8d60-4f30c04e472b" locEndPos="6" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The 'idx' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="2" auth="username" locRef="3" rule="AUTOSAR-A2_7_3-b" lnHash="1296456001" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1296456001" unbViolId="b2b35777-498e-3299-964e-5455567ff712" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e85245c-50b6-3133-b35d-3f2c7996117e" locEndPos="6" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The 'buf' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="COMMENT-14_b" lnHash="1296456001" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1296456001" unbViolId="04e7affe-0ae1-3a79-a090-e234a0987930" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="56a45b5f-1f8a-346a-8202-cf2d0d3e0803" locEndPos="6" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The 'buf' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="2" auth="username" locRef="3" rule="AUTOSAR-A2_7_3-b" lnHash="1296456001" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1296456001" unbViolId="0c964e09-ae4d-328d-931c-24b8b9b2f68b" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87646525-71af-3e77-b86b-4ebb7af88f48" locEndPos="6" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'format_timer_record'" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="FORMAT-28" lnHash="1296456001" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="1296456001" unbViolId="33a5d976-9484-3cfb-ac8d-b95f29c4584c" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ead46bf-a37d-3080-8134-9acb763d2feb" locEndPos="6" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="Function 'format_timer_record' has Cyclomatic Complexity value: 2" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="5" auth="username" locRef="3" rule="METRICS-29" lnHash="1296456001" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="1296456001" unbViolId="a1ad77c8-0317-3bcd-ac3e-f8754ba312e0" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f93d041-6fa5-334b-a85f-331e0a1b79b0" locEndPos="6" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="Function 'format_timer_record' has Essential Complexity value: 1" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="5" auth="username" locRef="3" rule="METRICS-33" lnHash="1296456001" rule.header="Report Essential Complexity" tool="c++test" lineHash="1296456001" unbViolId="c1a6f18a-7904-3e9d-9a9d-af828270a4fa" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6d3bd32d-9efc-3ff5-bc87-203751304a74" locEndPos="6" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="Number of blocks of comments per statement in the function 'format_timer_record' : 0.0" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="METRICS-41" lnHash="1296456001" rule.header="The number of blocks of comments before and inside function to the number of statements in function should be > 0.2" tool="c++test" lineHash="1296456001" unbViolId="2efbc476-52f9-3ffe-82c7-d5e3772f64f9" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="136cc8b4-df54-3dd5-8da9-951250cdeceb" locEndPos="6" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The value of Halstead's delivered bugs (B) for function 'format_timer_record' is 0.13" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="METRICS-43" lnHash="1296456001" rule.header="Report the value of Halstead's delivered bugs (B) for a function" tool="c++test" lineHash="1296456001" unbViolId="ab149a17-b1aa-324e-9514-b2307f5bdd57" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4dd712a8-23f2-3e72-9d1a-17a7a9991e88" locEndPos="6" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="Naming convention not followed: format_timer_record" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="NAMING-17" lnHash="1296456001" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="1296456001" unbViolId="605edabf-1289-3208-86eb-6f444d6bd414" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e2af38a-185c-3ba3-9b1a-c1320d900fd0" locEndPos="6" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The function 'format_timer_record' is referenced only in the translation unit where it is defined" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="4" auth="username" locRef="3" rule="MISRA2012-RULE-8_7" lnHash="1296456001" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="1296456001" unbViolId="6aec9c97-9fbb-35b2-931e-6fee94ec445f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="50d0b6ff-c32a-30db-bb24-6c52c932152b" locEndPos="6" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The function 'format_timer_record' is referenced only in the translation unit where it is defined" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="4" auth="username" locRef="3" rule="GLOBAL-AVOIDEXTERN" lnHash="1296456001" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="1296456001" unbViolId="be9dcafd-b94a-34fd-af7b-3214bb9b0086" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="fb248c92-9dfe-3a0f-afe0-0734e6994a43" locEndPos="6" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The function 'format_timer_record' is referenced only in the translation unit where it is defined" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="4" auth="username" locRef="3" rule="MISRAC2012-RULE_8_7-a" lnHash="1296456001" rule.header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" tool="c++test" lineHash="1296456001" unbViolId="2c538be6-2bc4-3a07-b59d-8f518b041144" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="1b35b3f5-c41b-3d88-b74a-038c8f80a26c" locEndPos="6" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="4" auth="username" locRef="3" rule="MISRA2008-3_9_2" lnHash="1296456001" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1296456001" unbViolId="d380ec73-de75-3a5f-b9cc-5e41c2f1e9c5" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="25d9a76d-cba7-360a-a463-b989e2c0fb82" locEndPos="26" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="MISRA-013" lnHash="1296456001" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1296456001" unbViolId="31c09f4b-6c0f-3bab-aaf3-1d7ecf3ae26b" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="638ca6ee-1cfa-3c7b-a97f-0419871d4d56" locEndPos="26" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="CODSTA-223" lnHash="1296456001" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1296456001" unbViolId="9b38fac8-9c8d-3c11-8bc5-748ed364893b" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a535d40-77c0-3b2e-b95c-aed87fbb5068" locEndPos="26" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="2" auth="username" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="1296456001" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1296456001" unbViolId="49660a59-936f-3191-a56a-79c101cf21f7" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d073eaa-fcf0-361d-84c8-0b46997e76e1" locEndPos="26" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="HICPP-7_1_6-b" lnHash="1296456001" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="1296456001" unbViolId="79522a00-1d15-3f00-97bf-eb23ecaff78e" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ecf6a19f-3a91-3388-b861-a24e40c372f8" locEndPos="26" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="4" auth="username" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="1296456001" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1296456001" unbViolId="d917b016-4b63-38b2-bae2-ffe93dcd836d" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0cc58f8d-bf2b-3620-80c1-0a038bd751ae" locEndPos="26" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="MISRA2004-6_3_b" lnHash="1296456001" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1296456001" unbViolId="ec4fca4a-3ef7-35d4-b34b-09c935103449" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb5ba5b4-cedd-3ebd-8099-759467cfbbdf" locEndPos="26" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="2" auth="username" locRef="3" rule="JSF-209_b" lnHash="1296456001" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1296456001" unbViolId="0e1266a2-1617-36f6-9241-2c559df51a26" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="926f7cb4-3dd4-3571-be55-1390da79b4b7" locEndPos="26" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="4" auth="username" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="1296456001" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1296456001" unbViolId="8080735d-a1df-3a1b-b09f-da24cd9d82e7" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f37feac5-5cc4-341c-a639-bacf08a4f463" locEndPos="26" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="HICPP-3_5_1-b" lnHash="1296456001" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1296456001" unbViolId="358d94e8-2980-3dd8-b052-1c498d0bf825" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="516b7c19-1964-326b-b24f-5eb0cbe4105d" locEndPos="26" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="'idx' shall be declared as unsigned int or signed int" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="PORT-13" lnHash="1296456001" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="1296456001" unbViolId="2ed7bfe7-c3f5-3205-9c3d-3818298dd42f" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b70eb44b-59d0-38a4-83b0-85a538370084" locEndPos="30" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="Parameter 'idx' is not validated before use" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="CERT_C-API00-a" lnHash="1296456001" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="1296456001" unbViolId="50c67bfc-d386-31dc-b6c0-342a2a932e05" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="672e20eb-2187-3998-ae04-bbfec9030e7b" locEndPos="30" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="Parameter 'idx' is not validated before use" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="CODSTA-86" lnHash="1296456001" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="1296456001" unbViolId="571cb691-c8fc-3186-94b6-b1eea6182f95" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f149200b-ed7a-3be6-acec-3fa852d05ea0" locEndPos="30" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The 'idx' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="NAMING-HN-22" lnHash="1296456001" rule.header="Hungarian notation for int types" tool="c++test" lineHash="1296456001" unbViolId="55ebc73a-5c15-3810-a04f-e05ae8a39b90" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be9e8ba0-adfc-317c-919f-c5fce9a195c8" locEndPos="30" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The 'idx' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="NAMING-HN-30" lnHash="1296456001" rule.header="Hungarian notation for int types" tool="c++test" lineHash="1296456001" unbViolId="5c2a2b34-4fad-31a6-91ef-fcc66ec57fcb" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="082498f4-60c5-3e88-836d-892f18bc928c" locEndPos="30" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The 'idx' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="NAMING-HN-43" lnHash="1296456001" rule.header="Hungarian notation for word types" tool="c++test" lineHash="1296456001" unbViolId="ebce7f85-bdde-3c1a-a066-98164cac6fb9" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52112987-df76-30f1-a902-73def541da22" locEndPos="30" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="4" auth="username" locRef="3" rule="MISRA2008-3_9_2" lnHash="1296456001" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1296456001" unbViolId="a00a825d-932e-3aad-90e6-602664fe42ea" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f344bd6-770a-3ddb-8826-6bfc233fc9ca" locEndPos="35" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="MISRA-013" lnHash="1296456001" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1296456001" unbViolId="82366197-e242-3820-8c87-295e770d25c6" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a64f38f-7e97-377a-8a75-fc5aabf67189" locEndPos="35" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="CODSTA-223" lnHash="1296456001" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1296456001" unbViolId="2bcaecaa-2e8e-3e96-9c1d-d7d3d98785ae" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1bb01c1d-d165-39c5-a1b3-c76c8638195b" locEndPos="35" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="2" auth="username" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="1296456001" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1296456001" unbViolId="d6243f4f-5739-3dc0-89ed-5419ca160089" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d35986f-6c26-3aec-ab16-11d15efa33bd" locEndPos="35" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared: buf" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="CODSTA-94" lnHash="1296456001" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="1296456001" unbViolId="63ef6c64-73bf-3720-aedb-ff61906640eb" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="526578d3-f0ad-3536-9bb4-adca3f623071" locEndPos="41" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The parameter of pointer type is declared: buf" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="CODSTA-95" lnHash="1296456001" rule.header="Do not declare pointer type" tool="c++test" lineHash="1296456001" unbViolId="3c3aab79-35e9-30b7-b4b0-db67226b65bb" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="440909c1-e1c0-307e-81e4-1675119d81f8" locEndPos="41" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="Declare parameter 'buf' as const" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="CERT_C-DCL00-a" lnHash="1296456001" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1296456001" unbViolId="cae6681d-7a1f-39d3-b823-d8c3b7ef357f" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27b50af0-4d1e-3721-8392-2daa73f484d0" locEndPos="41" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="Declare parameter 'buf' as const" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="2" auth="username" locRef="3" rule="AUTOSAR-A7_1_1-a" lnHash="1296456001" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1296456001" unbViolId="c10e5f7f-6662-34b8-bf0e-655babf53394" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a28324f-23ab-3de1-bfd9-846a9ca11fa7" locEndPos="41" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="Declare parameter 'buf' as const" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="2" auth="username" locRef="3" rule="MISRA2008-7_1_1" lnHash="1296456001" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="1296456001" unbViolId="4b1a5ab1-62cd-3fce-ac94-27dceae760d0" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0397f0a9-9bd4-3e88-a711-879aa62eafe6" locEndPos="41" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="Declare parameter 'buf' as const" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="CODSTA-CPP-53" lnHash="1296456001" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1296456001" unbViolId="86510f9c-8f71-3e74-82e9-821e2c11236f" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="73b28cf6-3118-356f-8398-b756d40c676f" locEndPos="41" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="Declare parameter 'buf' as const" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="HICPP-7_1_2-a" lnHash="1296456001" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1296456001" unbViolId="bcd76f7f-4aa4-3381-9d9d-a9bcc103d59c" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f6383be2-4087-3b87-88db-4fcadbafdf6e" locEndPos="41" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="Parameter 'buf' is not validated before use" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="CERT_C-API00-a" lnHash="1296456001" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="1296456001" unbViolId="dd39122e-2811-3e6c-aebe-73347c484df2" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab05e073-0cd2-3724-9406-854d55aff0fc" locEndPos="41" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="Parameter 'buf' is not validated before use" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="CODSTA-86" lnHash="1296456001" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="1296456001" unbViolId="1b66dca5-7cd8-3112-9b39-68d35628d24e" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="828223ce-3730-38d7-b855-a95259dcbf47" locEndPos="41" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The 'buf' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="NAMING-HN-05" lnHash="1296456001" rule.header="Hungarian notation for byte pointer, array, or reference types" tool="c++test" lineHash="1296456001" unbViolId="e4861fef-f659-3f81-8552-8d43c393e1ce" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77cd2949-2b30-319d-b8eb-cead0a91199b" locEndPos="41" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The 'buf' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="NAMING-HN-09" lnHash="1296456001" rule.header="Hungarian notation for char pointer, array, or reference types" tool="c++test" lineHash="1296456001" unbViolId="a2b55cb9-5c99-37a9-8ff3-e76cc1673e7e" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f7e71592-ba49-3f67-8622-56e5bf6d5568" locEndPos="41" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The 'buf' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="NAMING-HN-10" lnHash="1296456001" rule.header="Hungarian notation for char pointer or reference types" tool="c++test" lineHash="1296456001" unbViolId="624ebd00-73fb-33d4-98d5-7a10ab62dd3a" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9604a8fb-4fcb-3ee4-9faa-c3c8446f2509" locEndPos="41" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="The 'buf' identifier should have the 'p' prefix" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="NAMING-HN-34" lnHash="1296456001" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="1296456001" unbViolId="6f0f190b-9cca-3d0d-90bc-3cd5cf4e4dfa" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="078e9bc1-b431-382c-8e6a-d5760f8170dd" locEndPos="41" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="Function 'format_timer_record' has pointer parameter but is called with array argument" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="2" auth="username" locRef="3" rule="JSF-097_e" lnHash="1296456001" rule.header="Functions which are called with array argument shall not be declared with pointer parameter" tool="c++test" lineHash="1296456001" unbViolId="196944e4-cc0e-3e11-bfbb-be1ed7f5755e" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68d0f519-a3fb-3e32-84ed-a05f73d703cf" locEndPos="41" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="Function 'format_timer_record' has pointer parameter but is called with array argument" ln="126" locFile="/build/../../../../../../../../timer.c" locStartln="126" sev="3" auth="username" locRef="3" rule="CODSTA-142_b" lnHash="1296456001" rule.header="Functions which are called with array argument shall not be declared with pointer parameter" tool="c++test" lineHash="1296456001" unbViolId="715e5797-33d0-31ae-903a-22b8146961a6" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9e82f30-46e2-3c80-be10-e1fe4a4342fd" locEndPos="41" locType="sr" hash="-275311578" locEndLn="126" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="127" locFile="/build/../../../../../../../../timer.c" locStartln="127" sev="3" auth="username" locRef="3" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="3675978c-e269-31ad-8b84-8083d1e8991d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16c604fa-7ca2-3370-9d50-68fb5d2ba7a3" locEndPos="1" locType="sr" hash="-275311578" locEndLn="127" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="128" locFile="/build/../../../../../../../../timer.c" locStartln="128" sev="4" auth="username" locRef="3" rule="MISRA2008-3_9_2" lnHash="-1285013714" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1285013714" unbViolId="5becaa4c-0348-3c4b-8d4e-3797947c64f1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a4d64016-2992-3c3e-8755-4c4031e5cac8" locEndPos="5" locType="sr" hash="-275311578" locEndLn="128" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="128" locFile="/build/../../../../../../../../timer.c" locStartln="128" sev="3" auth="username" locRef="3" rule="MISRA-013" lnHash="-1285013714" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1285013714" unbViolId="0de5bac5-d0d0-3794-8607-198004d3f31c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8935ab66-3a26-338d-a72b-d098a9cb67cb" locEndPos="5" locType="sr" hash="-275311578" locEndLn="128" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="128" locFile="/build/../../../../../../../../timer.c" locStartln="128" sev="3" auth="username" locRef="3" rule="CODSTA-223" lnHash="-1285013714" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1285013714" unbViolId="ef752e76-5b61-343d-b1f7-25fc2c87a93c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f8f2fc1-90e0-356a-8411-f1e8f62e9667" locEndPos="5" locType="sr" hash="-275311578" locEndLn="128" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="128" locFile="/build/../../../../../../../../timer.c" locStartln="128" sev="2" auth="username" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="-1285013714" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1285013714" unbViolId="b83131ec-8ba6-3b8b-a070-c1fe5a6f9779" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa83d6c9-0d8c-3ee6-a731-1a1486fae4f5" locEndPos="5" locType="sr" hash="-275311578" locEndLn="128" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: start" ln="128" locFile="/build/../../../../../../../../timer.c" locStartln="128" sev="3" auth="username" locRef="3" rule="CODSTA-94" lnHash="-1285013714" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1285013714" unbViolId="9660f324-5889-3ebd-9636-da76b2919417" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b9dd000-f429-37fb-a56c-89fbf60428be" locEndPos="10" locType="sr" hash="-275311578" locEndLn="128" goals="0," />
    <StdViol msg="The 'start' variable should be commented" ln="128" locFile="/build/../../../../../../../../timer.c" locStartln="128" sev="3" auth="username" locRef="3" rule="JSF-132_a" lnHash="-1285013714" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1285013714" unbViolId="1b97cd39-a721-395a-8fa0-4b564e0aebe5" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ecb65f7-b6f7-33de-b314-23dfa38afee3" locEndPos="10" locType="sr" hash="-275311578" locEndLn="128" goals="0," />
    <StdViol msg="The 'start' variable should be commented" ln="128" locFile="/build/../../../../../../../../timer.c" locStartln="128" sev="3" auth="username" locRef="3" rule="COMMENT-05" lnHash="-1285013714" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1285013714" unbViolId="051415bc-6025-3120-8c89-2b1c913d79ff" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d17fdd09-0f8e-362a-9cbb-565425d14c34" locEndPos="10" locType="sr" hash="-275311578" locEndLn="128" goals="0," />
    <StdViol msg="Naming convention not followed: start" ln="128" locFile="/build/../../../../../../../../timer.c" locStartln="128" sev="3" auth="username" locRef="3" rule="NAMING-25" lnHash="-1285013714" rule.header="Begin all terminated characters string variables with 'sz'" tool="c++test" lineHash="-1285013714" unbViolId="d249579e-7a2a-3049-8b01-e0e8826fb1c4" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f05b902d-f7bd-348a-b459-762c35b527f3" locEndPos="10" locType="sr" hash="-275311578" locEndLn="128" goals="0," />
    <StdViol msg="The 'start' identifier should have the 'rg' prefix" ln="128" locFile="/build/../../../../../../../../timer.c" locStartln="128" sev="3" auth="username" locRef="3" rule="NAMING-HN-01" lnHash="-1285013714" rule.header="Hungarian notation for array variables and parameters" tool="c++test" lineHash="-1285013714" unbViolId="14d6cc70-3e7f-3a22-91b2-605424b8534b" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dbe85230-69e1-3073-9668-0f8df5aa7702" locEndPos="10" locType="sr" hash="-275311578" locEndLn="128" goals="0," />
    <StdViol msg="The 'start' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="128" locFile="/build/../../../../../../../../timer.c" locStartln="128" sev="3" auth="username" locRef="3" rule="NAMING-HN-05" lnHash="-1285013714" rule.header="Hungarian notation for byte pointer, array, or reference types" tool="c++test" lineHash="-1285013714" unbViolId="d9583348-e991-3bae-8939-3e71ce9599dc" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a4508a77-9cc2-3338-a997-6c9e3e42b3ff" locEndPos="10" locType="sr" hash="-275311578" locEndLn="128" goals="0," />
    <StdViol msg="The 'start' identifier should have the 'sz' prefix followed by a capital letter or an underscore" ln="128" locFile="/build/../../../../../../../../timer.c" locStartln="128" sev="3" auth="username" locRef="3" rule="NAMING-HN-07" lnHash="-1285013714" rule.header="Hungarian notation for array of char types" tool="c++test" lineHash="-1285013714" unbViolId="1d8e63a5-0d6f-35a6-8951-bfcbde86fe4a" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61dac67f-b9c0-3a93-b534-21b38f083d62" locEndPos="10" locType="sr" hash="-275311578" locEndLn="128" goals="0," />
    <StdViol msg="The 'start' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="128" locFile="/build/../../../../../../../../timer.c" locStartln="128" sev="3" auth="username" locRef="3" rule="NAMING-HN-09" lnHash="-1285013714" rule.header="Hungarian notation for char pointer, array, or reference types" tool="c++test" lineHash="-1285013714" unbViolId="3c67ba2e-9840-30b8-955e-0cf6cff86167" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe951ae0-63f9-3813-a5de-fef4783b2ffe" locEndPos="10" locType="sr" hash="-275311578" locEndLn="128" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="129" locFile="/build/../../../../../../../../timer.c" locStartln="129" sev="4" auth="username" locRef="3" rule="MISRA2008-3_9_2" lnHash="-1725726827" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1725726827" unbViolId="015071bd-974e-31b1-a73c-8b5638dd6e0d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a7ddac9-634c-3912-812a-7242eab092a2" locEndPos="5" locType="sr" hash="-275311578" locEndLn="129" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="129" locFile="/build/../../../../../../../../timer.c" locStartln="129" sev="3" auth="username" locRef="3" rule="MISRA-013" lnHash="-1725726827" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1725726827" unbViolId="9b2e575f-797d-313d-9ec6-1375c129929d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9fe8646d-76d7-3349-b5c2-2c283cfbded3" locEndPos="5" locType="sr" hash="-275311578" locEndLn="129" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="129" locFile="/build/../../../../../../../../timer.c" locStartln="129" sev="3" auth="username" locRef="3" rule="CODSTA-223" lnHash="-1725726827" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1725726827" unbViolId="2ec74dff-0420-3781-b099-8751f10bfe36" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ff24902-7d91-36d0-b961-3fc0c4ea3184" locEndPos="5" locType="sr" hash="-275311578" locEndLn="129" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="129" locFile="/build/../../../../../../../../timer.c" locStartln="129" sev="2" auth="username" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="-1725726827" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1725726827" unbViolId="cd570c0e-3ed2-39df-b523-5e3983fdc419" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="86d67cf4-9b6d-3472-8a08-427768c786ea" locEndPos="5" locType="sr" hash="-275311578" locEndLn="129" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: end" ln="129" locFile="/build/../../../../../../../../timer.c" locStartln="129" sev="3" auth="username" locRef="3" rule="CODSTA-94" lnHash="-1725726827" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1725726827" unbViolId="9482244c-4916-3c5c-b3b1-b9cbd1daf483" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1994beb7-5768-3db1-bcd4-0dcbe79b477e" locEndPos="10" locType="sr" hash="-275311578" locEndLn="129" goals="0," />
    <StdViol msg="The 'end' variable should be commented" ln="129" locFile="/build/../../../../../../../../timer.c" locStartln="129" sev="3" auth="username" locRef="3" rule="JSF-132_a" lnHash="-1725726827" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1725726827" unbViolId="9c019cbe-de5a-356f-aa53-b7b702fec34c" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a384aa12-5f67-3ccd-8c59-19ede8ac6720" locEndPos="10" locType="sr" hash="-275311578" locEndLn="129" goals="0," />
    <StdViol msg="The 'end' variable should be commented" ln="129" locFile="/build/../../../../../../../../timer.c" locStartln="129" sev="3" auth="username" locRef="3" rule="COMMENT-05" lnHash="-1725726827" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1725726827" unbViolId="6499a963-9bc9-340e-a4ea-b1dc8cfa816f" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ebb4c473-d0ac-3e95-a78d-c363c358abb6" locEndPos="10" locType="sr" hash="-275311578" locEndLn="129" goals="0," />
    <StdViol msg="Naming convention not followed: end" ln="129" locFile="/build/../../../../../../../../timer.c" locStartln="129" sev="3" auth="username" locRef="3" rule="NAMING-25" lnHash="-1725726827" rule.header="Begin all terminated characters string variables with 'sz'" tool="c++test" lineHash="-1725726827" unbViolId="9cdabe27-de9c-376d-9246-6bcf4911498f" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77bd5ed9-473a-3b2a-8b0b-51717d68f497" locEndPos="10" locType="sr" hash="-275311578" locEndLn="129" goals="0," />
    <StdViol msg="The 'end' identifier should have the 'rg' prefix" ln="129" locFile="/build/../../../../../../../../timer.c" locStartln="129" sev="3" auth="username" locRef="3" rule="NAMING-HN-01" lnHash="-1725726827" rule.header="Hungarian notation for array variables and parameters" tool="c++test" lineHash="-1725726827" unbViolId="5192079c-21d1-36d0-be7a-141912d011b9" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e6ddd07-4991-336e-874d-a479ec4d7d47" locEndPos="10" locType="sr" hash="-275311578" locEndLn="129" goals="0," />
    <StdViol msg="The 'end' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="129" locFile="/build/../../../../../../../../timer.c" locStartln="129" sev="3" auth="username" locRef="3" rule="NAMING-HN-05" lnHash="-1725726827" rule.header="Hungarian notation for byte pointer, array, or reference types" tool="c++test" lineHash="-1725726827" unbViolId="f28d2941-1f44-3ee9-bbc0-17c4bb043779" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0636220-e4a1-3275-a771-42b5c8a923c0" locEndPos="10" locType="sr" hash="-275311578" locEndLn="129" goals="0," />
    <StdViol msg="The 'end' identifier should have the 'sz' prefix followed by a capital letter or an underscore" ln="129" locFile="/build/../../../../../../../../timer.c" locStartln="129" sev="3" auth="username" locRef="3" rule="NAMING-HN-07" lnHash="-1725726827" rule.header="Hungarian notation for array of char types" tool="c++test" lineHash="-1725726827" unbViolId="8d5fb180-00c4-39c9-8c46-3478dc0dc43d" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="63b0431a-4501-331b-b237-f95e7ad2c4da" locEndPos="10" locType="sr" hash="-275311578" locEndLn="129" goals="0," />
    <StdViol msg="The 'end' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="129" locFile="/build/../../../../../../../../timer.c" locStartln="129" sev="3" auth="username" locRef="3" rule="NAMING-HN-09" lnHash="-1725726827" rule.header="Hungarian notation for char pointer, array, or reference types" tool="c++test" lineHash="-1725726827" unbViolId="b8770a56-d811-39a9-956b-476838b43829" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="899fd5ea-3c7b-3566-b5af-110b49571d5c" locEndPos="10" locType="sr" hash="-275311578" locEndLn="129" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: tr" ln="131" locFile="/build/../../../../../../../../timer.c" locStartln="131" sev="3" auth="username" locRef="3" rule="CODSTA-94" lnHash="-1356760849" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1356760849" unbViolId="2709a605-2090-36f0-83a4-3b03512d2c05" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ea1337d-7cc2-3daa-b7b8-504077777329" locEndPos="26" locType="sr" hash="-275311578" locEndLn="131" goals="0," />
    <StdViol msg="The variable of pointer type is declared: tr" ln="131" locFile="/build/../../../../../../../../timer.c" locStartln="131" sev="3" auth="username" locRef="3" rule="CODSTA-95" lnHash="-1356760849" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1356760849" unbViolId="74b1246d-827c-38d2-9edd-cfcebc93d96c" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27e1bfd9-2614-3e86-800e-b9e4092e6151" locEndPos="26" locType="sr" hash="-275311578" locEndLn="131" goals="0," />
    <StdViol msg="The 'tr' variable should be commented" ln="131" locFile="/build/../../../../../../../../timer.c" locStartln="131" sev="3" auth="username" locRef="3" rule="JSF-132_a" lnHash="-1356760849" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1356760849" unbViolId="246a3f2f-c20c-3da8-b8c7-70cc3cde8ab4" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ffb35bd1-fd44-3bc1-812b-086185eb4860" locEndPos="26" locType="sr" hash="-275311578" locEndLn="131" goals="0," />
    <StdViol msg="The 'tr' variable should be commented" ln="131" locFile="/build/../../../../../../../../timer.c" locStartln="131" sev="3" auth="username" locRef="3" rule="COMMENT-05" lnHash="-1356760849" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1356760849" unbViolId="7e76dee8-47ec-3c8d-bd0a-15f905579756" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="57998e08-223c-3800-bcc5-33ddb25d594a" locEndPos="26" locType="sr" hash="-275311578" locEndLn="131" goals="0," />
    <StdViol msg="Naming convention not followed: tr" ln="131" locFile="/build/../../../../../../../../timer.c" locStartln="131" sev="3" auth="username" locRef="3" rule="NAMING-22" lnHash="-1356760849" rule.header="Prefix a variable type 'pointer' with a 'p' character" tool="c++test" lineHash="-1356760849" unbViolId="0061e145-73a0-3ae4-88e1-120260ceee92" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="287ff192-8648-3f3b-97a3-f325fb9761bc" locEndPos="26" locType="sr" hash="-275311578" locEndLn="131" goals="0," />
    <StdViol msg="The 'tr' identifier should have the 'p' prefix" ln="131" locFile="/build/../../../../../../../../timer.c" locStartln="131" sev="3" auth="username" locRef="3" rule="NAMING-HN-34" lnHash="-1356760849" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="-1356760849" unbViolId="5aff1b49-87ef-3587-b825-b7a019c89013" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26b85db8-6a0c-3591-8848-ab1283636bcc" locEndPos="26" locType="sr" hash="-275311578" locEndLn="131" goals="0," />
    <StdViol msg="Array index 'idx' should be checked before indexing array" ln="131" locFile="/build/../../../../../../../../timer.c" locStartln="131" sev="5" auth="username" locRef="3" rule="MISRA-004_a" lnHash="-1356760849" rule.header="Provisions should be made for appropriate run-time checking" tool="c++test" lineHash="-1356760849" unbViolId="39870f26-c64f-3818-aa8a-2648f2b155db" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ec770f8-1640-3cef-a93f-c5a228e47d54" locEndPos="31" locType="sr" hash="-275311578" locEndLn="131" goals="0," />
    <StdViol msg="Array index 'idx' should be checked before indexing array" ln="131" locFile="/build/../../../../../../../../timer.c" locStartln="131" sev="2" auth="username" locRef="3" rule="JSF-015" lnHash="-1356760849" rule.header="Ensure that array indices are within the bounds of the array" tool="c++test" lineHash="-1356760849" unbViolId="fa9d1077-7dae-3b84-8873-f2e532b29489" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f2c2f5d-1665-3690-9319-f12c211166fb" locEndPos="31" locType="sr" hash="-275311578" locEndLn="131" goals="0," />
    <FlowViol msg="&quot;localtime(...)&quot; may possibly be null" ln="133" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="134" rule="AUTOSAR-A5_3_2-a" FirstElSrcRngStartPos="0" lnHash="-23883783" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="133" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-2110825990" lang="cpp" violId="18c4637c-b9aa-34ef-a0b6-00eb0aae29db" locEndPos="0" locEndLn="134" goals="0," locStartln="133" sev="2" locRef="3" tool="c++test" lineHash="-23883783" unbViolId="be674050-e2c7-3c57-8a4a-6068c457bea9" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="localtime(...)" ElType=".C" rngLn="133">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType=".P" rngLn="133">
          <Anns>
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;localtime(...)&quot; may possibly be null" ln="133" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="134" rule="AUTOSAR-M0_3_1-f" FirstElSrcRngStartPos="0" lnHash="-23883783" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="133" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-732149177" lang="cpp" violId="b608556a-095a-3a6c-bed0-8fcb1d88ea5b" locEndPos="0" locEndLn="134" goals="0," locStartln="133" sev="2" locRef="3" tool="c++test" lineHash="-23883783" unbViolId="eb4da7d6-0219-364a-81a3-cbcce0cc63a9" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="localtime(...)" ElType=".C" rngLn="133">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType=".P" rngLn="133">
          <Anns>
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;localtime(...)&quot; may possibly be null" ln="133" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="134" rule="BD-PB-NP" FirstElSrcRngStartPos="0" lnHash="-23883783" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="133" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-862714513" lang="cpp" violId="fdbe6e61-b6ac-301d-a02e-d6ab9639fa58" locEndPos="0" locEndLn="134" goals="0," locStartln="133" sev="1" locRef="3" tool="c++test" lineHash="-23883783" unbViolId="94173fa0-1107-3a21-95a7-bfc0b4e81be7" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="localtime(...)" ElType=".C" rngLn="133">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType=".P" rngLn="133">
          <Anns>
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;localtime(...)&quot; may possibly be null" ln="133" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="134" rule="CERT_C-ERR33-c" FirstElSrcRngStartPos="0" lnHash="-23883783" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="133" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1464693685" lang="cpp" violId="c65ce4bc-7587-38a0-bfb3-96f54b74d719" locEndPos="0" locEndLn="134" goals="0," locStartln="133" sev="1" locRef="3" tool="c++test" lineHash="-23883783" unbViolId="3cf63cd2-090c-39e5-86de-3be9f08e18c0" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="localtime(...)" ElType=".C" rngLn="133">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType=".P" rngLn="133">
          <Anns>
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;localtime(...)&quot; may possibly be null" ln="133" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="134" rule="CERT_C-EXP34-a" FirstElSrcRngStartPos="0" lnHash="-23883783" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="133" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1495948080" lang="cpp" violId="d0792563-8c07-3128-8e75-8fd7e52524ba" locEndPos="0" locEndLn="134" goals="0," locStartln="133" sev="1" locRef="3" tool="c++test" lineHash="-23883783" unbViolId="1dc39d8d-3917-3957-8369-d8b65b567090" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="localtime(...)" ElType=".C" rngLn="133">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType=".P" rngLn="133">
          <Anns>
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;localtime(...)&quot; may possibly be null" ln="133" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="134" rule="CERT_C-MSC19-b" FirstElSrcRngStartPos="0" lnHash="-23883783" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="133" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="10948008" lang="cpp" violId="ddff8c9a-50ee-3845-82cd-627a386d9615" locEndPos="0" locEndLn="134" goals="0," locStartln="133" sev="3" locRef="3" tool="c++test" lineHash="-23883783" unbViolId="dae1411a-5e77-3601-810e-a0c7b4d136c9" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="localtime(...)" ElType=".C" rngLn="133">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType=".P" rngLn="133">
          <Anns>
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;localtime(...)&quot; may possibly be null" ln="133" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="134" rule="CERT_C-POS54-c" FirstElSrcRngStartPos="0" lnHash="-23883783" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="133" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1768523353" lang="cpp" violId="81456dd5-eb55-3f28-b5ed-280f175696e1" locEndPos="0" locEndLn="134" goals="0," locStartln="133" sev="1" locRef="3" tool="c++test" lineHash="-23883783" unbViolId="860a9c68-6361-325d-942d-51a0c2e9d0a6" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="localtime(...)" ElType=".C" rngLn="133">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType=".P" rngLn="133">
          <Anns>
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;localtime(...)&quot; may possibly be null" ln="133" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="134" rule="CERT_CPP-STR51-a" FirstElSrcRngStartPos="0" lnHash="-23883783" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="133" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1279964095" lang="cpp" violId="1b772cc2-0686-3125-a1a5-a93598657eb9" locEndPos="0" locEndLn="134" goals="0," locStartln="133" sev="1" locRef="3" tool="c++test" lineHash="-23883783" unbViolId="d7f827e8-a316-3c89-ae33-97644f76a739" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="localtime(...)" ElType=".C" rngLn="133">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType=".P" rngLn="133">
          <Anns>
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;localtime(...)&quot; may possibly be null" ln="133" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="134" rule="CWE-476-a" FirstElSrcRngStartPos="0" lnHash="-23883783" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="133" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1194105846" lang="cpp" violId="be93b2e3-92bd-39ea-ab4d-78067656bb75" locEndPos="0" locEndLn="134" goals="0," locStartln="133" sev="1" locRef="3" tool="c++test" lineHash="-23883783" unbViolId="46226e03-294a-3a45-af2c-2ded3c257eec" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="localtime(...)" ElType=".C" rngLn="133">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType=".P" rngLn="133">
          <Anns>
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;localtime(...)&quot; may possibly be null" ln="133" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="134" rule="HICPP-5_2_1-c" FirstElSrcRngStartPos="0" lnHash="-23883783" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="133" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="803976856" lang="cpp" violId="0959e62a-678e-3963-898e-70c00e654cba" locEndPos="0" locEndLn="134" goals="0," locStartln="133" sev="1" locRef="3" tool="c++test" lineHash="-23883783" unbViolId="0ead1368-f50e-338f-b0c5-084e8237e492" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="localtime(...)" ElType=".C" rngLn="133">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType=".P" rngLn="133">
          <Anns>
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;localtime(...)&quot; may possibly be null" ln="133" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="134" rule="MISRA2008-0_3_1_b" FirstElSrcRngStartPos="0" lnHash="-23883783" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="133" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-245733435" lang="cpp" violId="0e9595a5-4b6c-3e96-b3e2-ee792d79fe1f" locEndPos="0" locEndLn="134" goals="0," locStartln="133" sev="5" locRef="3" tool="c++test" lineHash="-23883783" unbViolId="0558fe17-8bd1-3b38-9dbb-10c4aa3f11ab" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="localtime(...)" ElType=".C" rngLn="133">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType=".P" rngLn="133">
          <Anns>
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;localtime(...)&quot; may possibly be null" ln="133" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="134" rule="MISRA2012-DIR-4_1_b" FirstElSrcRngStartPos="0" lnHash="-23883783" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="133" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1406562300" lang="cpp" violId="58ec6bbe-cc9e-3d11-9326-2415728753a4" locEndPos="0" locEndLn="134" goals="0," locStartln="133" sev="2" locRef="3" tool="c++test" lineHash="-23883783" unbViolId="84edebc5-d755-3171-9811-efd9a05e2427" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="localtime(...)" ElType=".C" rngLn="133">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType=".P" rngLn="133">
          <Anns>
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;localtime(...)&quot; may possibly be null" ln="133" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="134" rule="MISRAC2012-DIR_4_1-b" FirstElSrcRngStartPos="0" lnHash="-23883783" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="133" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1882995269" lang="cpp" violId="03fda5c6-c0da-3f0a-9640-9f29d0014359" locEndPos="0" locEndLn="134" goals="0," locStartln="133" sev="2" locRef="3" tool="c++test" lineHash="-23883783" unbViolId="9df5e27b-5174-3df9-be24-a703e2ccc0b3" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="localtime(...)" ElType=".C" rngLn="133">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType=".P" rngLn="133">
          <Anns>
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Unused function's &quot;strftime&quot; return value" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="3" auth="username" locRef="3" rule="CODSTA-122_a" lnHash="-23883783" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-23883783" unbViolId="9925f37a-e96f-362d-b558-9d03296e6499" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8740e595-c813-3f1d-816d-4c05fa306c97" locEndPos="5" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Unused function's &quot;strftime&quot; return value" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="1" auth="username" locRef="3" rule="CERT_C-ERR33-a" lnHash="-23883783" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-23883783" unbViolId="d7d8c829-e412-3047-827e-c921b7eae71a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="facacb87-c00c-3008-88ff-b80267daeedb" locEndPos="5" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Unused function's &quot;strftime&quot; return value" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="1" auth="username" locRef="3" rule="CERT_C-POS54-a" lnHash="-23883783" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-23883783" unbViolId="88f498df-a1bb-3cef-94b8-d80b2c9f2051" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87af031c-5fd2-3496-9f60-3dc6dec0c094" locEndPos="5" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Unused function's &quot;strftime&quot; return value" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-23883783" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-23883783" unbViolId="68011dbb-a88c-3483-95a8-83056d8e4b87" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04136fbf-e7fa-359e-a0ae-8849822d5f0b" locEndPos="5" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Unused function's &quot;strftime&quot; return value" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="3" auth="username" locRef="3" rule="CERT_C-EXP12-a" lnHash="-23883783" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-23883783" unbViolId="92ec20a8-1051-358d-8e4e-db7084d62316" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c61a405-28b5-35f2-b571-d93c08223177" locEndPos="5" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Unused function's &quot;strftime&quot; return value" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="-23883783" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-23883783" unbViolId="1eec85f6-a3b7-3b90-8641-ae57c02338d7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e1d828d-d4bd-3dcd-b6ce-64cacfa861a1" locEndPos="5" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Unused function's &quot;strftime&quot; return value" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="3" auth="username" locRef="3" rule="MISRA2004-16_10" lnHash="-23883783" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-23883783" unbViolId="41c7e933-7341-371c-821e-46175763fe6f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc6368ef-d735-3f46-b040-a068bff0d4b5" locEndPos="5" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Unused function's &quot;strftime&quot; return value" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="2" auth="username" locRef="3" rule="AUTOSAR-M0_3_2-a" lnHash="-23883783" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-23883783" unbViolId="48debe9a-5f42-3552-8592-9f2d2525eaee" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f349b166-0677-3e4f-8a5d-1c0c67fbad47" locEndPos="5" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Unused function's &quot;strftime&quot; return value" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="2" auth="username" locRef="3" rule="MISRA2008-0_3_2" lnHash="-23883783" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-23883783" unbViolId="dd12a2e7-cfbf-3b34-8d7c-44eba69b4330" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e5db4b6-4820-3178-b231-588bc0def0c8" locEndPos="5" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Unused function's &quot;strftime&quot; return value" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="3" auth="username" locRef="3" rule="JSF-115" lnHash="-23883783" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-23883783" unbViolId="8e3d57f4-5a94-3bb0-9e80-3738195946bc" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5f09429-df0a-36e9-a6c3-886a44d5d66c" locEndPos="5" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Result of &quot;localtime&quot; passed to library function &quot;strftime&quot; without being checked" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="2" auth="username" locRef="3" rule="CERT_C-MEM07-a" lnHash="-23883783" rule.header="The validity of values passed to library functions shall be checked" tool="c++test" lineHash="-23883783" unbViolId="ff3a82cd-3c75-3c8f-8c02-9dfcec9ea1bc" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c6af935-12cc-37c2-8253-90fd21dda8c6" locEndPos="5" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Result of &quot;localtime&quot; passed to library function &quot;strftime&quot; without being checked" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="2" auth="username" locRef="3" rule="CERT_C-MEM04-a" lnHash="-23883783" rule.header="The validity of values passed to library functions shall be checked" tool="c++test" lineHash="-23883783" unbViolId="d1f9be0c-591d-35ae-951b-b7811a1c44b3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79f42526-443b-3ae5-ae8a-adb2383b9aff" locEndPos="5" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Result of &quot;localtime&quot; passed to library function &quot;strftime&quot; without being checked" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="3" auth="username" locRef="3" rule="MISRA2004-20_3" lnHash="-23883783" rule.header="The validity of values passed to library functions shall be checked" tool="c++test" lineHash="-23883783" unbViolId="36de728a-c91e-3fac-9fed-bfd643ef900b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4d07128-25bf-35e6-a69d-6e28aea128cc" locEndPos="5" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Values &quot;start&quot; passed to library function &quot;strftime&quot; without being checked" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="2" auth="username" locRef="3" rule="CERT_C-MEM07-a" lnHash="-23883783" rule.header="The validity of values passed to library functions shall be checked" tool="c++test" lineHash="-23883783" unbViolId="3e244a08-8755-3fd0-89af-ee16a3aea5c1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e453795-f5cf-3150-b664-a6dd2f9e766d" locEndPos="5" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Values &quot;start&quot; passed to library function &quot;strftime&quot; without being checked" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="2" auth="username" locRef="3" rule="CERT_C-MEM04-a" lnHash="-23883783" rule.header="The validity of values passed to library functions shall be checked" tool="c++test" lineHash="-23883783" unbViolId="382aa021-b2ec-3cb7-a560-a26270165284" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e6b17cc-5af8-3c30-975a-4b2ba21e39b6" locEndPos="5" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Values &quot;start&quot; passed to library function &quot;strftime&quot; without being checked" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="3" auth="username" locRef="3" rule="MISRA2004-20_3" lnHash="-23883783" rule.header="The validity of values passed to library functions shall be checked" tool="c++test" lineHash="-23883783" unbViolId="2dbbf2e6-3710-3c7a-b612-c5658570b476" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="72d59554-1d0e-3e78-99ea-04aaea6774af" locEndPos="5" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="The type 'int' of function argument number '2' does not match declared type 'unsigned int'" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="3" auth="username" locRef="3" rule="PB-11" lnHash="-23883783" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-23883783" unbViolId="9f1566d6-76a6-3d2f-be01-4652e8b0fd11" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8339827c-cf32-3b59-8b7b-532031601b1c" locEndPos="5" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Function 'strftime' is being used" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-21_10" lnHash="-23883783" rule.header="The Standard Library time and date functions shall not be used" tool="c++test" lineHash="-23883783" unbViolId="aa761438-407f-329d-b32b-fe08cf50f53f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9380e918-711c-38c2-9597-bbec505bece6" locEndPos="5" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Function 'strftime' is being used" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="2" auth="username" locRef="3" rule="SECURITY-01" lnHash="-23883783" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="-23883783" unbViolId="fc33df09-8dae-36a9-853a-8e00ad2d3a6d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62a24eb7-c8db-3aa0-a534-469b42ef27b8" locEndPos="5" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Function 'strftime' is being used" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_21_10-a" lnHash="-23883783" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="-23883783" unbViolId="fb44b468-15b1-3a50-a1cb-545825603db0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c1fd6875-d8f5-3409-8281-d2862ac7dbbe" locEndPos="5" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Function 'strftime' is being used" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="1" auth="username" locRef="3" rule="CERT_C-MSC33-a" lnHash="-23883783" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="-23883783" unbViolId="2f1f6229-044e-32aa-80d8-11cea52949bd" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f49cd5c-30f4-300b-ae6b-28b098393ef0" locEndPos="5" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Expression of array type is passed as argument to function 'strftime'" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="2" auth="username" locRef="3" rule="JSF-097_d" lnHash="-23883783" rule.header="Arrays shall not be passed to functions as array/pointer parameters" tool="c++test" lineHash="-23883783" unbViolId="4fce0477-2b7a-3d32-bac0-72dab416ced1" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="408985eb-a427-3faa-99f1-81a924557308" locEndPos="14" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Expression of array type is passed as argument to function 'strftime'" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="3" auth="username" locRef="3" rule="HICPP-4_1_1-b" lnHash="-23883783" rule.header="Do not pass expression with array type to a function with pointer or array type parameter" tool="c++test" lineHash="-23883783" unbViolId="fff2a950-3529-37a6-baa1-a8c0e2579e50" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="abe1353c-c0d8-38dc-88d4-4215c64af42f" locEndPos="14" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Expression of array type is passed as argument to function 'strftime'" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="3" auth="username" locRef="3" rule="PB-41_b" lnHash="-23883783" rule.header="Do not pass expression with array type to a function with pointer or array type parameter" tool="c++test" lineHash="-23883783" unbViolId="4c658a96-05e4-38dc-9c02-7f972b0a3519" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="25df00d9-f55f-3ca3-8936-321ee93c9a59" locEndPos="14" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 100" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="3" auth="username" locRef="3" rule="HICPP-4_2_1-a" lnHash="-23883783" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-23883783" unbViolId="b541d852-1d75-395b-8019-b33c37436290" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bfa2e41c-c30e-339c-a3a1-169b007305d4" locEndPos="21" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="2" auth="username" locRef="3" rule="MISRA2008-5_0_4_a" lnHash="-23883783" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-23883783" unbViolId="ca913fd7-6f4c-32d2-aa57-8fa372ea80a9" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ae2afad-1420-31df-aca9-b50241e3af9c" locEndPos="21" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="2" auth="username" locRef="3" rule="AUTOSAR-M5_0_4-a" lnHash="-23883783" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-23883783" unbViolId="754a6930-3fa1-356c-9f86-e3c824710534" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff759a73-d7b9-3a2a-aa58-8c420e7ba96f" locEndPos="21" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="3" auth="username" locRef="3" rule="MISRA2004-10_1_a" lnHash="-23883783" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-23883783" unbViolId="40f8210f-c69a-3edf-8004-30e9d28fa37a" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10ca7638-1d93-30c0-8238-4fc29fb7870d" locEndPos="21" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: %I:%M %p" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="5" auth="username" locRef="3" rule="CWE-798-a" lnHash="-23883783" rule.header="Do not hard code string literals" tool="c++test" lineHash="-23883783" unbViolId="bb16eb11-5d54-3117-84ce-c89e6d78b1f0" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c78b7386-bfb4-30d7-98f8-16b1e2eef7ef" locEndPos="26" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: %I:%M %p" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="5" auth="username" locRef="3" rule="CODSTA-203" lnHash="-23883783" rule.header="Do not hard code string literals" tool="c++test" lineHash="-23883783" unbViolId="2acbe512-d855-3edc-b148-2ed5d567e872" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="039f5290-a4f3-3d62-a22e-89f499c53864" locEndPos="26" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: %I:%M %p" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="1" auth="username" locRef="3" rule="APSC_DV-003110-a" lnHash="-23883783" rule.header="Do not hard code string literals" tool="c++test" lineHash="-23883783" unbViolId="82cf8893-916e-338b-ad6d-cee2868cfd05" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="820af563-386c-3584-9d39-65c403f868f5" locEndPos="26" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: %I:%M %p" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="1" auth="username" locRef="3" rule="CERT_C-MSC41-a" lnHash="-23883783" rule.header="Do not hard code string literals" tool="c++test" lineHash="-23883783" unbViolId="cb6c39c8-db1a-3aae-9b85-7a86b17a5f21" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf184895-2d40-32cc-8061-9bf2052f4b8c" locEndPos="26" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <DupViol msg="Duplicated string: '&quot;%I:%M %p&quot;'" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="3" auth="username" locRef="3" rule="CDD-DUPS" lnHash="-23883783" rule.header="Avoid string literal duplication" tool="c++test" lineHash="-23883783" unbViolId="f0439a98-607c-3f0f-9028-945264a05234" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="4d658baa-ad5f-3e6b-a07f-bc28b704a138" locEndPos="40" locType="sr" urgent="true" hash="-275311578" locEndLn="133" goals="1,">
      <ElDescList>
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="30" srcRngEndPos="40" srcRngStartln="133" srcRngEndLn="133" desc="[Line 133] Duplicated string in file 'timer.c'" rngLn="133" />
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="28" srcRngEndPos="38" srcRngStartln="134" srcRngEndLn="134" desc="[Line 134] Duplicated string in file 'timer.c'" rngLn="134" />
      </ElDescList>
    </DupViol>
    <StdViol msg="Function 'localtime' is being used" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-21_10" lnHash="-23883783" rule.header="The Standard Library time and date functions shall not be used" tool="c++test" lineHash="-23883783" unbViolId="30f4c14e-30ed-318a-94b0-0af924fac30c" locStartPos="37" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b69d2327-ecb2-3002-9185-137910f708ec" locEndPos="38" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Function 'localtime' is being used" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="2" auth="username" locRef="3" rule="SECURITY-01" lnHash="-23883783" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="-23883783" unbViolId="202b0fe0-43f6-3aa9-b61b-c0c9817dda73" locStartPos="37" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a457c8d-9964-3976-8fc0-afd388ade49e" locEndPos="38" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Function 'localtime' is being used" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_21_10-a" lnHash="-23883783" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="-23883783" unbViolId="e47a5c7c-3f5a-3800-b522-6b3dc0b1854f" locStartPos="37" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8821467c-3f7b-3d9a-9130-c06468be8df7" locEndPos="38" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="Function 'localtime' is being used" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="1" auth="username" locRef="3" rule="CERT_C-MSC33-a" lnHash="-23883783" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="-23883783" unbViolId="9ef97850-ddb5-3bc8-952f-dad8c84f2772" locStartPos="37" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="39e517a7-d1ff-36f5-a3c5-7cbe7408af78" locEndPos="38" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="The 'localtime' function should not be used in multithreading applications" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="3" auth="username" locRef="3" rule="CERT_C-CON33-a" lnHash="-23883783" rule.header="Avoid using thread-unsafe functions" tool="c++test" lineHash="-23883783" unbViolId="6229bea7-f8a9-3130-b4f7-48d1661914e9" locStartPos="37" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4ec1c7a-25bb-3f33-897e-35fccac30d7b" locEndPos="38" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="The 'localtime' function should not be used in multithreading applications" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="2" auth="username" locRef="3" rule="APSC_DV-002400-d" lnHash="-23883783" rule.header="Avoid using thread-unsafe functions" tool="c++test" lineHash="-23883783" unbViolId="afda77ff-745b-30c6-827e-5f395a116550" locStartPos="37" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe4bf579-6053-3810-b984-d8500155afc7" locEndPos="38" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="The 'localtime' function should not be used in multithreading applications" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="2" auth="username" locRef="3" rule="APSC_DV-001995-f" lnHash="-23883783" rule.header="Avoid using thread-unsafe functions" tool="c++test" lineHash="-23883783" unbViolId="4e8f4ee0-78de-3cd5-a3c5-1b8d0c44ee0f" locStartPos="37" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="056e08a3-b1db-34ff-9021-d931eaca9329" locEndPos="38" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <StdViol msg="The 'localtime' function should not be used in multithreading applications" ln="133" locFile="/build/../../../../../../../../timer.c" locStartln="133" sev="2" auth="username" locRef="3" rule="SECURITY-25" lnHash="-23883783" rule.header="Avoid using thread-unsafe functions" tool="c++test" lineHash="-23883783" unbViolId="b19bd6d6-9d6f-3696-9c47-011d2e937127" locStartPos="37" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="354a1643-149d-3377-8d26-54ca09073203" locEndPos="38" locType="sr" hash="-275311578" locEndLn="133" goals="0," />
    <FlowViol msg="&quot;localtime(...)&quot; may possibly be null" ln="134" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="135" rule="AUTOSAR-A5_3_2-a" FirstElSrcRngStartPos="0" lnHash="-1644342585" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="134" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1265549270" lang="cpp" violId="280362a1-43e1-3eef-b07e-336f4c2522e4" locEndPos="0" locEndLn="135" goals="0," locStartln="134" sev="2" locRef="3" tool="c++test" lineHash="-1644342585" unbViolId="3a18694d-deee-3c0c-a3ba-ffb28b5a9845" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType="." rngLn="133" />
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="localtime(...)" ElType=".C" rngLn="134">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType=".P" rngLn="134">
          <Anns>
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;localtime(...)&quot; may possibly be null" ln="134" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="135" rule="AUTOSAR-M0_3_1-f" FirstElSrcRngStartPos="0" lnHash="-1644342585" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="134" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-488483945" lang="cpp" violId="c3131fd6-df48-3a64-9d42-a2b89d070378" locEndPos="0" locEndLn="135" goals="0," locStartln="134" sev="2" locRef="3" tool="c++test" lineHash="-1644342585" unbViolId="69170f62-9060-3f94-b2e4-0c77b9a26144" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType="." rngLn="133" />
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="localtime(...)" ElType=".C" rngLn="134">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType=".P" rngLn="134">
          <Anns>
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;localtime(...)&quot; may possibly be null" ln="134" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="135" rule="BD-PB-NP" FirstElSrcRngStartPos="0" lnHash="-1644342585" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="134" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-97903425" lang="cpp" violId="610874db-5ffb-3bcd-90c6-cc22c14e6d33" locEndPos="0" locEndLn="135" goals="0," locStartln="134" sev="1" locRef="3" tool="c++test" lineHash="-1644342585" unbViolId="c8b92dcc-6aa6-3f2a-8bff-64bdd72ba908" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType="." rngLn="133" />
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="localtime(...)" ElType=".C" rngLn="134">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType=".P" rngLn="134">
          <Anns>
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;localtime(...)&quot; may possibly be null" ln="134" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="135" rule="CERT_C-ERR33-c" FirstElSrcRngStartPos="0" lnHash="-1644342585" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="134" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1643342437" lang="cpp" violId="f45766f1-f19b-301d-9d20-0804108cbd75" locEndPos="0" locEndLn="135" goals="0," locStartln="134" sev="1" locRef="3" tool="c++test" lineHash="-1644342585" unbViolId="fee6d91e-8140-3ae0-9297-f9ab1ec0d8bf" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType="." rngLn="133" />
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="localtime(...)" ElType=".C" rngLn="134">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType=".P" rngLn="134">
          <Anns>
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;localtime(...)&quot; may possibly be null" ln="134" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="135" rule="CERT_C-EXP34-a" FirstElSrcRngStartPos="0" lnHash="-1644342585" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="134" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1871987456" lang="cpp" violId="fb246017-ef03-354f-a464-bcb98ea0584e" locEndPos="0" locEndLn="135" goals="0," locStartln="134" sev="1" locRef="3" tool="c++test" lineHash="-1644342585" unbViolId="8b461582-414d-3c2b-9ce1-d28190f5c839" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType="." rngLn="133" />
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="localtime(...)" ElType=".C" rngLn="134">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType=".P" rngLn="134">
          <Anns>
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;localtime(...)&quot; may possibly be null" ln="134" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="135" rule="CERT_C-MSC19-b" FirstElSrcRngStartPos="0" lnHash="-1644342585" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="134" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="907613304" lang="cpp" violId="60daaf76-3013-3da0-926e-d9fe6d8f609a" locEndPos="0" locEndLn="135" goals="0," locStartln="134" sev="3" locRef="3" tool="c++test" lineHash="-1644342585" unbViolId="53cad491-aa95-3b52-8958-30e662824630" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType="." rngLn="133" />
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="localtime(...)" ElType=".C" rngLn="134">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType=".P" rngLn="134">
          <Anns>
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;localtime(...)&quot; may possibly be null" ln="134" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="135" rule="CERT_C-POS54-c" FirstElSrcRngStartPos="0" lnHash="-1644342585" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="134" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1607966601" lang="cpp" violId="0d91bb17-dd40-38ea-805e-3f5c551180f2" locEndPos="0" locEndLn="135" goals="0," locStartln="134" sev="1" locRef="3" tool="c++test" lineHash="-1644342585" unbViolId="236e9783-cff4-3b59-b55c-a1cb61bfbb2b" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType="." rngLn="133" />
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="localtime(...)" ElType=".C" rngLn="134">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType=".P" rngLn="134">
          <Anns>
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;localtime(...)&quot; may possibly be null" ln="134" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="135" rule="CERT_CPP-STR51-a" FirstElSrcRngStartPos="0" lnHash="-1644342585" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="134" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-2062854767" lang="cpp" violId="5d169bf3-1246-315f-a3de-5cc4d87e2461" locEndPos="0" locEndLn="135" goals="0," locStartln="134" sev="1" locRef="3" tool="c++test" lineHash="-1644342585" unbViolId="a8f6fdbd-f7ef-37f3-b29d-1f7bb2b97980" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType="." rngLn="133" />
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="localtime(...)" ElType=".C" rngLn="134">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType=".P" rngLn="134">
          <Anns>
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;localtime(...)&quot; may possibly be null" ln="134" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="135" rule="CWE-476-a" FirstElSrcRngStartPos="0" lnHash="-1644342585" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="134" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1905426982" lang="cpp" violId="c5fccd3c-480f-3efc-be6d-c0e368961d90" locEndPos="0" locEndLn="135" goals="0," locStartln="134" sev="1" locRef="3" tool="c++test" lineHash="-1644342585" unbViolId="a7cd08bb-4536-3e31-973d-b4ddcd700c8a" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType="." rngLn="133" />
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="localtime(...)" ElType=".C" rngLn="134">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType=".P" rngLn="134">
          <Anns>
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;localtime(...)&quot; may possibly be null" ln="134" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="135" rule="HICPP-5_2_1-c" FirstElSrcRngStartPos="0" lnHash="-1644342585" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="134" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="425045832" lang="cpp" violId="69d989fe-2ea8-3f0b-8602-a149b3b9be60" locEndPos="0" locEndLn="135" goals="0," locStartln="134" sev="1" locRef="3" tool="c++test" lineHash="-1644342585" unbViolId="6ea58e56-899a-3462-9a2f-a05089a8b7b1" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType="." rngLn="133" />
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="localtime(...)" ElType=".C" rngLn="134">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType=".P" rngLn="134">
          <Anns>
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;localtime(...)&quot; may possibly be null" ln="134" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="135" rule="MISRA2008-0_3_1_b" FirstElSrcRngStartPos="0" lnHash="-1644342585" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="134" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-941326827" lang="cpp" violId="91b457f0-a0b6-3462-b5fb-8c6dfd8a4cee" locEndPos="0" locEndLn="135" goals="0," locStartln="134" sev="5" locRef="3" tool="c++test" lineHash="-1644342585" unbViolId="1adb106a-0309-3dc4-a44b-d0749130c881" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType="." rngLn="133" />
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="localtime(...)" ElType=".C" rngLn="134">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType=".P" rngLn="134">
          <Anns>
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;localtime(...)&quot; may possibly be null" ln="134" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="135" rule="MISRA2012-DIR-4_1_b" FirstElSrcRngStartPos="0" lnHash="-1644342585" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="134" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1701344812" lang="cpp" violId="621af8ec-f956-3b8b-9d21-f1aa642e084a" locEndPos="0" locEndLn="135" goals="0," locStartln="134" sev="2" locRef="3" tool="c++test" lineHash="-1644342585" unbViolId="3809784d-828f-349b-a7ad-8a42c760a9a8" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType="." rngLn="133" />
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="localtime(...)" ElType=".C" rngLn="134">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType=".P" rngLn="134">
          <Anns>
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;localtime(...)&quot; may possibly be null" ln="134" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="135" rule="MISRAC2012-DIR_4_1-b" FirstElSrcRngStartPos="0" lnHash="-1644342585" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="134" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1182933909" lang="cpp" violId="fbd2d05d-2729-30b9-8a93-06e282117019" locEndPos="0" locEndLn="135" goals="0," locStartln="134" sev="2" locRef="3" tool="c++test" lineHash="-1644342585" unbViolId="291bf0cb-2800-3100-8790-57eb3d954cfc" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="." rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType="." rngLn="133" />
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="localtime(...)" ElType=".C" rngLn="134">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType=".P" rngLn="134">
          <Anns>
            <Ann msg="Null value carrier: localtime(...)" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Unused function's &quot;strftime&quot; return value" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="3" auth="username" locRef="3" rule="CODSTA-122_a" lnHash="-1644342585" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1644342585" unbViolId="a5e22cd9-e079-32f2-b5a0-cf4c15f3757f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d18190f3-8bba-379b-a578-0a2752d69fcd" locEndPos="5" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Unused function's &quot;strftime&quot; return value" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="1" auth="username" locRef="3" rule="CERT_C-ERR33-a" lnHash="-1644342585" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1644342585" unbViolId="7f224863-f5ba-30d2-8fef-6747ba89a973" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c607e8b-3c62-3145-b8fa-154324e1ff08" locEndPos="5" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Unused function's &quot;strftime&quot; return value" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="1" auth="username" locRef="3" rule="CERT_C-POS54-a" lnHash="-1644342585" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1644342585" unbViolId="da04f89d-aac5-3ce3-9b97-3f6d320580eb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af70a9fa-dba1-32ec-bb4e-4d8815bd49a3" locEndPos="5" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Unused function's &quot;strftime&quot; return value" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-1644342585" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1644342585" unbViolId="44e1b892-4da3-38ab-86e9-94815b1c7540" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07f25f9a-910e-31ef-a4a6-a2181c1b85b6" locEndPos="5" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Unused function's &quot;strftime&quot; return value" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="3" auth="username" locRef="3" rule="CERT_C-EXP12-a" lnHash="-1644342585" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1644342585" unbViolId="4153102c-dffb-330e-9d18-9b6111062ccd" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f974bafb-f56a-330d-b626-682216a86498" locEndPos="5" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Unused function's &quot;strftime&quot; return value" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="-1644342585" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1644342585" unbViolId="c8eaf23a-a712-3a97-af09-4246219bf0a4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe5d2649-096a-3441-980d-800963e4c5df" locEndPos="5" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Unused function's &quot;strftime&quot; return value" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="3" auth="username" locRef="3" rule="MISRA2004-16_10" lnHash="-1644342585" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1644342585" unbViolId="3139d996-5181-3067-b7b3-14778b443fb1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="80729d9e-baa7-3bd6-8c0d-a5ed5e240730" locEndPos="5" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Unused function's &quot;strftime&quot; return value" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="2" auth="username" locRef="3" rule="AUTOSAR-M0_3_2-a" lnHash="-1644342585" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1644342585" unbViolId="c1fa1789-2aad-3f02-b693-2ed9a9c21584" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf35e39f-162c-3591-8754-4f543530997d" locEndPos="5" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Unused function's &quot;strftime&quot; return value" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="2" auth="username" locRef="3" rule="MISRA2008-0_3_2" lnHash="-1644342585" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1644342585" unbViolId="81c5efa9-3d66-37ad-a011-b2150f98d6ae" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="edcd8533-6341-3a96-89ad-dd5fc814d8a5" locEndPos="5" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Unused function's &quot;strftime&quot; return value" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="3" auth="username" locRef="3" rule="JSF-115" lnHash="-1644342585" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-1644342585" unbViolId="2968da64-57f1-32eb-8445-d418ac8670bb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf0406cc-45f2-3e0a-a617-4fd3a57da047" locEndPos="5" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Result of &quot;localtime&quot; passed to library function &quot;strftime&quot; without being checked" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="2" auth="username" locRef="3" rule="CERT_C-MEM07-a" lnHash="-1644342585" rule.header="The validity of values passed to library functions shall be checked" tool="c++test" lineHash="-1644342585" unbViolId="ea24e91d-f5ed-3d72-8012-ee0654e90c20" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e70cf21b-339b-3e61-a2e3-510b9d6af4b2" locEndPos="5" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Result of &quot;localtime&quot; passed to library function &quot;strftime&quot; without being checked" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="2" auth="username" locRef="3" rule="CERT_C-MEM04-a" lnHash="-1644342585" rule.header="The validity of values passed to library functions shall be checked" tool="c++test" lineHash="-1644342585" unbViolId="bb49beaf-d4e3-310d-a016-0740b7877a0a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d302b26-2831-352d-b172-f47de4dded00" locEndPos="5" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Result of &quot;localtime&quot; passed to library function &quot;strftime&quot; without being checked" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="3" auth="username" locRef="3" rule="MISRA2004-20_3" lnHash="-1644342585" rule.header="The validity of values passed to library functions shall be checked" tool="c++test" lineHash="-1644342585" unbViolId="5553359e-0881-3601-9cca-2fd59af35415" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12113603-ee3f-393f-8a8a-f514c331fe5d" locEndPos="5" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Values &quot;end&quot; passed to library function &quot;strftime&quot; without being checked" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="2" auth="username" locRef="3" rule="CERT_C-MEM07-a" lnHash="-1644342585" rule.header="The validity of values passed to library functions shall be checked" tool="c++test" lineHash="-1644342585" unbViolId="6c3463b0-a2b0-38ad-8731-a908bc683c1f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5fd182a2-cc29-307b-80d9-b556a5d8f98c" locEndPos="5" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Values &quot;end&quot; passed to library function &quot;strftime&quot; without being checked" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="2" auth="username" locRef="3" rule="CERT_C-MEM04-a" lnHash="-1644342585" rule.header="The validity of values passed to library functions shall be checked" tool="c++test" lineHash="-1644342585" unbViolId="80fb7b4b-7467-3b6b-9ed9-be0de8e685ef" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e435a61-2972-3a26-9ee7-d78d16b47a5d" locEndPos="5" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Values &quot;end&quot; passed to library function &quot;strftime&quot; without being checked" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="3" auth="username" locRef="3" rule="MISRA2004-20_3" lnHash="-1644342585" rule.header="The validity of values passed to library functions shall be checked" tool="c++test" lineHash="-1644342585" unbViolId="cb292eb7-9c0f-3fce-baad-d0f8b3417737" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="317c5456-b368-3ae0-a573-76cc4261be50" locEndPos="5" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="The type 'int' of function argument number '2' does not match declared type 'unsigned int'" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="3" auth="username" locRef="3" rule="PB-11" lnHash="-1644342585" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-1644342585" unbViolId="7a07de4f-645c-3e3f-a26b-61586127b6d9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db915c31-e568-3ac8-a6fd-73fd65dbbbec" locEndPos="5" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Function 'strftime' is being used" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-21_10" lnHash="-1644342585" rule.header="The Standard Library time and date functions shall not be used" tool="c++test" lineHash="-1644342585" unbViolId="d389adcf-5798-3f85-a9df-0cf0ede2052b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e847297-b95d-3ea4-9f20-8e001a72e170" locEndPos="5" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Function 'strftime' is being used" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="2" auth="username" locRef="3" rule="SECURITY-01" lnHash="-1644342585" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="-1644342585" unbViolId="c2a3dad1-c5ba-3b71-896a-4652f8d37ffb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84330a58-828b-3148-9ef8-c5306ed6a065" locEndPos="5" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Function 'strftime' is being used" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_21_10-a" lnHash="-1644342585" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="-1644342585" unbViolId="ef2b3ecb-e79f-3e09-8021-2bfb83c6c8ec" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8611b118-8541-387c-b87b-9e6bc79ab261" locEndPos="5" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Function 'strftime' is being used" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="1" auth="username" locRef="3" rule="CERT_C-MSC33-a" lnHash="-1644342585" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="-1644342585" unbViolId="e594ae40-c85a-3f47-9a30-207e5dab01b5" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b82d089-ac92-32f1-80b6-f938a99883e9" locEndPos="5" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Expression of array type is passed as argument to function 'strftime'" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="2" auth="username" locRef="3" rule="JSF-097_d" lnHash="-1644342585" rule.header="Arrays shall not be passed to functions as array/pointer parameters" tool="c++test" lineHash="-1644342585" unbViolId="9f948c32-89e5-38b5-a19b-b54a41845ff9" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92abeaeb-b243-374b-9dae-f677251d1bc3" locEndPos="14" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Expression of array type is passed as argument to function 'strftime'" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="3" auth="username" locRef="3" rule="HICPP-4_1_1-b" lnHash="-1644342585" rule.header="Do not pass expression with array type to a function with pointer or array type parameter" tool="c++test" lineHash="-1644342585" unbViolId="edb24d0b-4398-35b4-aea9-4841a31a76c2" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd48ec1c-a3a7-38dc-b2d6-be1a2baf9110" locEndPos="14" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Expression of array type is passed as argument to function 'strftime'" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="3" auth="username" locRef="3" rule="PB-41_b" lnHash="-1644342585" rule.header="Do not pass expression with array type to a function with pointer or array type parameter" tool="c++test" lineHash="-1644342585" unbViolId="59a76a61-313a-342d-8485-291755f2ef8b" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b5629ea-5963-3885-ba12-43f1f1765c4f" locEndPos="14" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 100" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="3" auth="username" locRef="3" rule="HICPP-4_2_1-a" lnHash="-1644342585" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-1644342585" unbViolId="19c208ab-a6c9-3813-8859-a6b40e6e2b9b" locStartPos="18" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e292c5ee-0b9e-31e8-893c-95bedcb12546" locEndPos="19" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="2" auth="username" locRef="3" rule="MISRA2008-5_0_4_a" lnHash="-1644342585" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-1644342585" unbViolId="ab50d072-9e47-3591-a6a5-a1fc4140d7d2" locStartPos="18" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f62e1d0f-f5d7-3b3c-8e55-2a18a9583072" locEndPos="19" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="2" auth="username" locRef="3" rule="AUTOSAR-M5_0_4-a" lnHash="-1644342585" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1644342585" unbViolId="9a952ff1-fbcc-3ff4-bc77-9f6d77170ba4" locStartPos="18" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e57dacf-b6ca-39b2-9e29-07d578cd8a87" locEndPos="19" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="3" auth="username" locRef="3" rule="MISRA2004-10_1_a" lnHash="-1644342585" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1644342585" unbViolId="6b61671d-c901-359f-83c1-28911d567439" locStartPos="18" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27b23297-a4de-3989-adb9-e17f2a6bca1d" locEndPos="19" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: %I:%M %p" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="5" auth="username" locRef="3" rule="CWE-798-a" lnHash="-1644342585" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1644342585" unbViolId="7d83521e-75fa-3d81-bfcb-bf826872f6e0" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c7086df-54d7-36a1-abdc-278e5a07757b" locEndPos="24" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: %I:%M %p" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="5" auth="username" locRef="3" rule="CODSTA-203" lnHash="-1644342585" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1644342585" unbViolId="096e0be4-4004-3184-91b4-773b97894c8f" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="81e8409e-58c8-3ec0-a92a-31fede15fb92" locEndPos="24" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: %I:%M %p" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="1" auth="username" locRef="3" rule="APSC_DV-003110-a" lnHash="-1644342585" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1644342585" unbViolId="9314e5e1-7a8c-389b-8886-3d94d1b4c5ea" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="14d3384a-c047-3558-ac63-5a4e22a53ec0" locEndPos="24" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: %I:%M %p" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="1" auth="username" locRef="3" rule="CERT_C-MSC41-a" lnHash="-1644342585" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1644342585" unbViolId="97b99f91-1cdb-3203-8493-1de878327620" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb8c3a4f-6930-3963-a4d3-8fa078afa568" locEndPos="24" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Function 'localtime' is being used" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-21_10" lnHash="-1644342585" rule.header="The Standard Library time and date functions shall not be used" tool="c++test" lineHash="-1644342585" unbViolId="3a52d65e-774f-3d95-b922-54d5848ac3f3" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e46259e8-5201-3146-be39-f9caf0f0ab89" locEndPos="36" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Function 'localtime' is being used" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="2" auth="username" locRef="3" rule="SECURITY-01" lnHash="-1644342585" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="-1644342585" unbViolId="8ac5a5e8-6169-3349-85eb-500054d7ed75" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eaadfc3c-6f3c-3121-b4e0-0730080247de" locEndPos="36" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Function 'localtime' is being used" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_21_10-a" lnHash="-1644342585" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="-1644342585" unbViolId="3c4d452e-720b-39b3-b443-15fc09ac4890" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a765b95d-7ead-370d-b1bc-2aebcb6d6522" locEndPos="36" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Function 'localtime' is being used" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="1" auth="username" locRef="3" rule="CERT_C-MSC33-a" lnHash="-1644342585" rule.header="Avoid functions which use time from standard C library" tool="c++test" lineHash="-1644342585" unbViolId="11981c45-9ee5-3e2a-927b-997f30ffdec2" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="396c3604-3997-3d2b-8f77-2c77aec9c33d" locEndPos="36" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="The 'localtime' function should not be used in multithreading applications" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="3" auth="username" locRef="3" rule="CERT_C-CON33-a" lnHash="-1644342585" rule.header="Avoid using thread-unsafe functions" tool="c++test" lineHash="-1644342585" unbViolId="8827cb00-926b-3f13-be03-7f188a0157e5" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab919d59-767d-3974-a595-28caa6350e3b" locEndPos="36" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="The 'localtime' function should not be used in multithreading applications" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="2" auth="username" locRef="3" rule="APSC_DV-002400-d" lnHash="-1644342585" rule.header="Avoid using thread-unsafe functions" tool="c++test" lineHash="-1644342585" unbViolId="703a5f28-1abe-35bd-8b9a-4659a2d4bd32" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ec98655-5642-3af4-ad90-e083fadeaeca" locEndPos="36" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="The 'localtime' function should not be used in multithreading applications" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="2" auth="username" locRef="3" rule="APSC_DV-001995-f" lnHash="-1644342585" rule.header="Avoid using thread-unsafe functions" tool="c++test" lineHash="-1644342585" unbViolId="fb0098e9-82df-36a2-bdc2-34b1d3ba75df" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e95b8014-cc33-3243-af3d-5c7bea348443" locEndPos="36" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="The 'localtime' function should not be used in multithreading applications" ln="134" locFile="/build/../../../../../../../../timer.c" locStartln="134" sev="2" auth="username" locRef="3" rule="SECURITY-25" lnHash="-1644342585" rule.header="Avoid using thread-unsafe functions" tool="c++test" lineHash="-1644342585" unbViolId="22afd8e9-a3a3-3813-b415-6a4a3d92828d" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="433817af-2042-3e01-b297-f60c76b209bb" locEndPos="36" locType="sr" hash="-275311578" locEndLn="134" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="136" locFile="/build/../../../../../../../../timer.c" locStartln="136" sev="3" auth="username" locRef="3" rule="JSF-061" lnHash="130267201" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="130267201" unbViolId="401814d0-c4b6-3a43-ae38-fd224726d532" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5079a1b5-fe2d-3960-a0cd-ac0288c296b7" locEndPos="1" locType="sr" hash="-275311578" locEndLn="136" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="136" locFile="/build/../../../../../../../../timer.c" locStartln="136" sev="3" auth="username" locRef="3" rule="FORMAT-42" lnHash="130267201" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="130267201" unbViolId="97edf13b-324d-3e52-8dd1-c2b04ee79127" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a769e87-2d16-3fc7-bfec-5fe6ff78a4a2" locEndPos="1" locType="sr" hash="-275311578" locEndLn="136" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="136" locFile="/build/../../../../../../../../timer.c" locStartln="136" sev="3" auth="username" locRef="3" rule="JSF-060_a" lnHash="130267201" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="130267201" unbViolId="0a2abdcb-7551-3f69-847b-412f2005ea5b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c05ccd09-6801-347e-a0b5-66992a2ebfba" locEndPos="1" locType="sr" hash="-275311578" locEndLn="136" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="136" locFile="/build/../../../../../../../../timer.c" locStartln="136" sev="3" auth="username" locRef="3" rule="FORMAT-43" lnHash="130267201" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="130267201" unbViolId="8d0fbd3a-cbd5-3d66-a8ef-8b8bb9e5d3a8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1a9e1c9-089c-3b9f-9236-94c6043c89a7" locEndPos="1" locType="sr" hash="-275311578" locEndLn="136" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="136" locFile="/build/../../../../../../../../timer.c" locStartln="136" sev="3" auth="username" locRef="3" rule="JSF-060_b" lnHash="130267201" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="130267201" unbViolId="caa4eba0-f838-3194-9b68-750ac0aa2c5d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1dd66f8e-fbd4-3331-b522-8b4f9194b966" locEndPos="1" locType="sr" hash="-275311578" locEndLn="136" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="136" locFile="/build/../../../../../../../../timer.c" locStartln="136" sev="3" auth="username" locRef="3" rule="FORMAT-02" lnHash="130267201" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="130267201" unbViolId="d6a18ad1-fcff-3c72-aea8-7d515232a802" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c939858b-8f0f-3d8b-bc6d-bb2456369499" locEndPos="1" locType="sr" hash="-275311578" locEndLn="136" goals="0," />
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="136" locFile="/build/../../../../../../../../timer.c" locStartln="136" sev="3" auth="username" locRef="3" rule="FORMAT-34" lnHash="130267201" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="130267201" unbViolId="a5e4c31b-84f4-3d9f-90f9-13572df988a1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce32ec63-75f8-39ec-b386-299ef570d023" locEndPos="1" locType="sr" hash="-275311578" locEndLn="136" goals="0," />
    <FlowViol msg="Condition &quot;tr&quot; always evaluates to true" ln="136" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where senseless condition is used" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="127" rule="AUTOSAR-M0_1_2-ac" FirstElSrcRngStartPos="0" lnHash="130267201" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid conditions that always evaluate to the same value" FirstElSrcRngStartln="126" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1920371834" lang="cpp" violId="80144bfc-562b-3a26-ab8b-7f19c0c3f1d8" locEndPos="0" locEndLn="137" goals="0," locStartln="136" sev="2" locRef="3" tool="c++test" lineHash="130267201" unbViolId="51565dbe-8a25-372b-9956-ab67e3f0cd57" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1296456001" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="126" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="126" srcRngEndLn="127" desc="void format_timer_record(int idx, char* buf)" ElType=".C" rngLn="126">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="!" rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType="." rngLn="133" />
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType="." rngLn="134" />
        <ElDesc lineHash="130267201" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="136" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="136" srcRngEndLn="137" desc="if (tr) {" ElType=".P" rngLn="136">
          <Anns>
            <Ann msg="Point where senseless condition is used" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Condition &quot;tr&quot; always evaluates to true" ln="136" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where senseless condition is used" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="127" rule="BD-PB-CC" FirstElSrcRngStartPos="0" lnHash="130267201" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid conditions that always evaluate to the same value" FirstElSrcRngStartln="126" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="752999001" lang="cpp" violId="a57bd0e2-875c-39c6-b8d9-aabdf77488f5" locEndPos="0" locEndLn="137" goals="0," locStartln="136" sev="2" locRef="3" tool="c++test" lineHash="130267201" unbViolId="00e59cd1-0c8e-3f1d-b281-19e7e27cc548" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1296456001" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="126" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="126" srcRngEndLn="127" desc="void format_timer_record(int idx, char* buf)" ElType=".C" rngLn="126">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="!" rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType="." rngLn="133" />
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType="." rngLn="134" />
        <ElDesc lineHash="130267201" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="136" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="136" srcRngEndLn="137" desc="if (tr) {" ElType=".P" rngLn="136">
          <Anns>
            <Ann msg="Point where senseless condition is used" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Condition &quot;tr&quot; always evaluates to true" ln="136" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where senseless condition is used" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="127" rule="HICPP-1_2_1-i" FirstElSrcRngStartPos="0" lnHash="130267201" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid conditions that always evaluate to the same value" FirstElSrcRngStartln="126" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-133872050" lang="cpp" violId="85e32989-2d66-3eea-8f5c-6a0bcdb18bd9" locEndPos="0" locEndLn="137" goals="0," locStartln="136" sev="2" locRef="3" tool="c++test" lineHash="130267201" unbViolId="2c0aef9c-db73-3782-a2dd-6a5e7250cc9c" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1296456001" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="126" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="126" srcRngEndLn="127" desc="void format_timer_record(int idx, char* buf)" ElType=".C" rngLn="126">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="!" rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType="." rngLn="133" />
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType="." rngLn="134" />
        <ElDesc lineHash="130267201" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="136" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="136" srcRngEndLn="137" desc="if (tr) {" ElType=".P" rngLn="136">
          <Anns>
            <Ann msg="Point where senseless condition is used" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Condition &quot;tr&quot; always evaluates to true" ln="136" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where senseless condition is used" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="127" rule="MISRA2008-0_1_2_aa" FirstElSrcRngStartPos="0" lnHash="130267201" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="A project shall not contain infeasible paths" FirstElSrcRngStartln="126" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1086979906" lang="cpp" violId="752f6070-29a2-39d1-a76d-b8b34285a7aa" locEndPos="0" locEndLn="137" goals="0," locStartln="136" sev="2" locRef="3" tool="c++test" lineHash="130267201" unbViolId="aeaa424f-5b7a-3c80-81ef-c3df643873ff" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1296456001" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="126" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="126" srcRngEndLn="127" desc="void format_timer_record(int idx, char* buf)" ElType=".C" rngLn="126">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="!" rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType="." rngLn="133" />
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType="." rngLn="134" />
        <ElDesc lineHash="130267201" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="136" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="136" srcRngEndLn="137" desc="if (tr) {" ElType=".P" rngLn="136">
          <Anns>
            <Ann msg="Point where senseless condition is used" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Condition &quot;tr&quot; always evaluates to true" ln="136" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where senseless condition is used" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="127" rule="MISRA2012-RULE-14_3_zc" FirstElSrcRngStartPos="0" lnHash="130267201" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Controlling expressions shall not be invariant" FirstElSrcRngStartln="126" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1425813313" lang="cpp" violId="7c5fcb58-1c77-3f92-ba3a-92f6ce0be3cc" locEndPos="0" locEndLn="137" goals="0," locStartln="136" sev="2" locRef="3" tool="c++test" lineHash="130267201" unbViolId="37945e21-9eb8-35ef-869b-2f9db44dbe68" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1296456001" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="126" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="126" srcRngEndLn="127" desc="void format_timer_record(int idx, char* buf)" ElType=".C" rngLn="126">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="!" rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType="." rngLn="133" />
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType="." rngLn="134" />
        <ElDesc lineHash="130267201" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="136" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="136" srcRngEndLn="137" desc="if (tr) {" ElType=".P" rngLn="136">
          <Anns>
            <Ann msg="Point where senseless condition is used" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Condition &quot;tr&quot; always evaluates to true" ln="136" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point where senseless condition is used" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="127" rule="MISRAC2012-RULE_14_3-ac" FirstElSrcRngStartPos="0" lnHash="130267201" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid conditions that always evaluate to the same value" FirstElSrcRngStartln="126" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1559586127" lang="cpp" violId="52ecf132-2390-35ae-a81d-c9e234bb9451" locEndPos="0" locEndLn="137" goals="0," locStartln="136" sev="2" locRef="3" tool="c++test" lineHash="130267201" unbViolId="8e36c32a-57bf-3fda-9d21-2eaa9dd0654d" locType="sr" hash="-275311578" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1296456001" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="126" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="126" srcRngEndLn="127" desc="void format_timer_record(int idx, char* buf)" ElType=".C" rngLn="126">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1285013714" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="char start[BUF_SIZE];" ElType="." rngLn="128" />
        <ElDesc lineHash="-1725726827" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="129" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="129" srcRngEndLn="130" desc="char end[BUF_SIZE];" ElType="." rngLn="129" />
        <ElDesc lineHash="-1356760849" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="131" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="131" srcRngEndLn="132" desc="struct timer_record* tr = timer_records[idx];" ElType="!" rngLn="131" />
        <ElDesc lineHash="-23883783" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="133" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="133" srcRngEndLn="134" desc="strftime(start, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->starttime));" ElType="." rngLn="133" />
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType="." rngLn="134" />
        <ElDesc lineHash="130267201" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="136" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="136" srcRngEndLn="137" desc="if (tr) {" ElType=".P" rngLn="136">
          <Anns>
            <Ann msg="Point where senseless condition is used" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;tr&quot; is checked for null after being dereferenced" ln="136" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point of checking for nullity" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="135" rule="AUTOSAR-M0_3_1-j" FirstElSrcRngStartPos="0" lnHash="130267201" ruleSCSCMsg="Point of dereferencing" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Do not check for null after dereferencing" FirstElSrcRngStartln="134" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1437067129" lang="cpp" violId="e4ef74a8-fd3a-3fd9-97e7-699e1b35affb" locEndPos="0" locEndLn="137" goals="0," locStartln="136" sev="2" locRef="3" tool="c++test" lineHash="130267201" unbViolId="a9623ce3-2d1e-332d-b45e-412157207712" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Important values" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="localtime(...)" ElType=".C" rngLn="134">
          <Props>
            <Prop key="Tracked variables" val="tr != null" />
          </Props>
          <Anns>
            <Ann msg="Point of dereferencing" kind="cause" />
            <Ann msg="Important values: tr != null" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType="." rngLn="134" />
        <ElDesc lineHash="130267201" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="136" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="136" srcRngEndLn="137" desc="if (tr) {" ElType=".P" rngLn="136">
          <Props>
            <Prop key="Tracked variables" val="tr != null" />
          </Props>
          <Anns>
            <Ann msg="Important values: tr != null" kind="var" />
            <Ann msg="Point of checking for nullity" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;tr&quot; is checked for null after being dereferenced" ln="136" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point of checking for nullity" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="135" rule="BD-PB-DEREF" FirstElSrcRngStartPos="0" lnHash="130267201" ruleSCSCMsg="Point of dereferencing" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Do not check for null after dereferencing" FirstElSrcRngStartln="134" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1425335419" lang="cpp" violId="122033ee-d1af-3bd5-8e40-93b3b490a1db" locEndPos="0" locEndLn="137" goals="0," locStartln="136" sev="2" locRef="3" tool="c++test" lineHash="130267201" unbViolId="6d141e58-6537-3560-804b-35489927d7b6" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Important values" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="localtime(...)" ElType=".C" rngLn="134">
          <Props>
            <Prop key="Tracked variables" val="tr != null" />
          </Props>
          <Anns>
            <Ann msg="Point of dereferencing" kind="cause" />
            <Ann msg="Important values: tr != null" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType="." rngLn="134" />
        <ElDesc lineHash="130267201" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="136" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="136" srcRngEndLn="137" desc="if (tr) {" ElType=".P" rngLn="136">
          <Props>
            <Prop key="Tracked variables" val="tr != null" />
          </Props>
          <Anns>
            <Ann msg="Important values: tr != null" kind="var" />
            <Ann msg="Point of checking for nullity" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;tr&quot; is checked for null after being dereferenced" ln="136" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point of checking for nullity" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="135" rule="CWE-476-b" FirstElSrcRngStartPos="0" lnHash="130267201" ruleSCSCMsg="Point of dereferencing" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Do not check for null after dereferencing" FirstElSrcRngStartln="134" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-958974261" lang="cpp" violId="e2e68b9f-6d0d-33e0-978c-91b17b886aa7" locEndPos="0" locEndLn="137" goals="0," locStartln="136" sev="2" locRef="3" tool="c++test" lineHash="130267201" unbViolId="b151765a-c46d-31c3-8ead-345e65a91053" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Important values" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="localtime(...)" ElType=".C" rngLn="134">
          <Props>
            <Prop key="Tracked variables" val="tr != null" />
          </Props>
          <Anns>
            <Ann msg="Point of dereferencing" kind="cause" />
            <Ann msg="Important values: tr != null" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType="." rngLn="134" />
        <ElDesc lineHash="130267201" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="136" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="136" srcRngEndLn="137" desc="if (tr) {" ElType=".P" rngLn="136">
          <Props>
            <Prop key="Tracked variables" val="tr != null" />
          </Props>
          <Anns>
            <Ann msg="Important values: tr != null" kind="var" />
            <Ann msg="Point of checking for nullity" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;tr&quot; is checked for null after being dereferenced" ln="136" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point of checking for nullity" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="135" rule="MISRA2008-0_3_1_f" FirstElSrcRngStartPos="0" lnHash="130267201" ruleSCSCMsg="Point of dereferencing" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Do not check for null after dereferencing" FirstElSrcRngStartln="134" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1889651451" lang="cpp" violId="ad207e98-82cd-3d45-ac90-2e0741d0ec0b" locEndPos="0" locEndLn="137" goals="0," locStartln="136" sev="5" locRef="3" tool="c++test" lineHash="130267201" unbViolId="aeb0bd20-3212-351c-96b3-5db8e33ab339" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Important values" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="localtime(...)" ElType=".C" rngLn="134">
          <Props>
            <Prop key="Tracked variables" val="tr != null" />
          </Props>
          <Anns>
            <Ann msg="Point of dereferencing" kind="cause" />
            <Ann msg="Important values: tr != null" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType="." rngLn="134" />
        <ElDesc lineHash="130267201" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="136" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="136" srcRngEndLn="137" desc="if (tr) {" ElType=".P" rngLn="136">
          <Props>
            <Prop key="Tracked variables" val="tr != null" />
          </Props>
          <Anns>
            <Ann msg="Important values: tr != null" kind="var" />
            <Ann msg="Point of checking for nullity" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;tr&quot; is checked for null after being dereferenced" ln="136" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point of checking for nullity" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="135" rule="MISRA2012-DIR-4_1_f" FirstElSrcRngStartPos="0" lnHash="130267201" ruleSCSCMsg="Point of dereferencing" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Do not check for null after dereferencing" FirstElSrcRngStartln="134" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-768752958" lang="cpp" violId="49e21f68-904e-3ace-bfa5-9fc1ff23bee6" locEndPos="0" locEndLn="137" goals="0," locStartln="136" sev="2" locRef="3" tool="c++test" lineHash="130267201" unbViolId="64357aff-f957-31d3-87ca-5629b9babb91" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Important values" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="localtime(...)" ElType=".C" rngLn="134">
          <Props>
            <Prop key="Tracked variables" val="tr != null" />
          </Props>
          <Anns>
            <Ann msg="Point of dereferencing" kind="cause" />
            <Ann msg="Important values: tr != null" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType="." rngLn="134" />
        <ElDesc lineHash="130267201" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="136" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="136" srcRngEndLn="137" desc="if (tr) {" ElType=".P" rngLn="136">
          <Props>
            <Prop key="Tracked variables" val="tr != null" />
          </Props>
          <Anns>
            <Ann msg="Important values: tr != null" kind="var" />
            <Ann msg="Point of checking for nullity" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;tr&quot; is checked for null after being dereferenced" ln="136" locFile="/build/../../../../../../../../timer.c" ruleSAFMsg="Point of checking for nullity" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="135" rule="MISRAC2012-DIR_4_1-f" FirstElSrcRngStartPos="0" lnHash="130267201" ruleSCSCMsg="Point of dereferencing" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Do not check for null after dereferencing" FirstElSrcRngStartln="134" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-238577797" lang="cpp" violId="2cfa2b2a-3c9e-309f-8cc9-a9b29c953061" locEndPos="0" locEndLn="137" goals="0," locStartln="136" sev="2" locRef="3" tool="c++test" lineHash="130267201" unbViolId="36e909c5-ecd1-3c62-9cf7-57c8db309d0d" locType="sr" hash="-275311578" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Important values" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="localtime(...)" ElType=".C" rngLn="134">
          <Props>
            <Prop key="Tracked variables" val="tr != null" />
          </Props>
          <Anns>
            <Ann msg="Point of dereferencing" kind="cause" />
            <Ann msg="Important values: tr != null" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1644342585" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="134" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="134" srcRngEndLn="135" desc="strftime(end, BUF_SIZE, &quot;%I:%M %p&quot;, localtime(&amp;tr->endtime));" ElType="." rngLn="134" />
        <ElDesc lineHash="130267201" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="136" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="136" srcRngEndLn="137" desc="if (tr) {" ElType=".P" rngLn="136">
          <Props>
            <Prop key="Tracked variables" val="tr != null" />
          </Props>
          <Anns>
            <Ann msg="Important values: tr != null" kind="var" />
            <Ann msg="Point of checking for nullity" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="The 'if' statement doesn't have an 'else' clause" ln="136" locFile="/build/../../../../../../../../timer.c" locStartln="136" sev="3" auth="username" locRef="3" rule="CODSTA-23" lnHash="130267201" rule.header="All 'if' statements should have an 'else' clause" tool="c++test" lineHash="130267201" unbViolId="9e938946-2348-3d4a-8416-0df7a9f50b2c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b990840-a44a-3e43-902f-6e24d98da3a7" locEndPos="5" locType="sr" hash="-275311578" locEndLn="136" goals="0," />
    <StdViol msg="Pointer used as a test in if(tr)" ln="136" locFile="/build/../../../../../../../../timer.c" locStartln="136" sev="3" auth="username" locRef="3" rule="CODSTA-32" lnHash="130267201" rule.header="Do not write logical expressions of the type if(test) or if(!test)  when test is a pointer" tool="c++test" lineHash="130267201" unbViolId="8dfeffcd-f960-3dba-92c4-3609982156ab" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ddfa531c-7cb6-30a4-a9b7-0b610d0e6538" locEndPos="5" locType="sr" hash="-275311578" locEndLn="136" goals="0," />
    <StdViol msg="Test of a value against zero should be made explicit" ln="136" locFile="/build/../../../../../../../../timer.c" locStartln="136" sev="3" auth="username" locRef="3" rule="MISRA2004-13_2" lnHash="130267201" rule.header="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" tool="c++test" lineHash="130267201" unbViolId="d4cb5503-8655-3ebd-baa7-52144ad1fd81" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4cd23d9-9835-3813-a839-0218faf8fa8c" locEndPos="5" locType="sr" hash="-275311578" locEndLn="136" goals="0," />
    <StdViol msg="Test of a value against zero should be made explicit" ln="136" locFile="/build/../../../../../../../../timer.c" locStartln="136" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_14_4-a" lnHash="130267201" rule.header="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" tool="c++test" lineHash="130267201" unbViolId="21205a88-9cf8-3558-9483-ca430216ebbd" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3df85a2-807f-3ac4-b0a2-03f465d56ef3" locEndPos="5" locType="sr" hash="-275311578" locEndLn="136" goals="0," />
    <StdViol msg="Test of a value against zero should be made explicit" ln="136" locFile="/build/../../../../../../../../timer.c" locStartln="136" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-14_4" lnHash="130267201" rule.header="The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type" tool="c++test" lineHash="130267201" unbViolId="70ee7369-fcf3-3700-99e8-fd5dfa483be6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70e0a008-4309-3b0b-b684-764871c04fd8" locEndPos="5" locType="sr" hash="-275311578" locEndLn="136" goals="0," />
    <StdViol msg="Usage of 'sprintf' function is not allowed" ln="137" locFile="/build/../../../../../../../../timer.c" locStartln="137" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_21_6-a" lnHash="201551585" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="201551585" unbViolId="f5afe8de-0c9a-3721-bf21-3f03afd80a9a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9a737dc-3116-3469-9f23-bc13d94129a6" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0," />
    <StdViol msg="Usage of 'sprintf' function is not allowed" ln="137" locFile="/build/../../../../../../../../timer.c" locStartln="137" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-21_6" lnHash="201551585" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="201551585" unbViolId="477cd35a-24ba-3ce3-963d-fc95dca96bb0" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7675bec5-7ee6-3b16-9cd7-6928c3fba553" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0," />
    <StdViol msg="Usage of 'sprintf' function is not allowed" ln="137" locFile="/build/../../../../../../../../timer.c" locStartln="137" sev="3" auth="username" locRef="3" rule="CERT_C-ERR02-a" lnHash="201551585" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="201551585" unbViolId="d844b685-9862-376d-bbb6-3611ee4fded9" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="adfbbb38-c5ae-324d-9ea5-54f68a7ee7a5" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0," />
    <StdViol msg="Usage of 'sprintf' function is not allowed" ln="137" locFile="/build/../../../../../../../../timer.c" locStartln="137" sev="3" auth="username" locRef="3" rule="CODSTA-110" lnHash="201551585" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="201551585" unbViolId="cff144ac-4dbe-39e4-b800-8646391604b1" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad7239ad-59d9-333e-9f0a-37b578345918" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0," />
    <StdViol msg="Usage of 'sprintf' function is not allowed" ln="137" locFile="/build/../../../../../../../../timer.c" locStartln="137" sev="2" auth="username" locRef="3" rule="CERT_C-ERR07-b" lnHash="201551585" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="201551585" unbViolId="445e24b8-94f1-32d8-b4a5-81f5b065fe12" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f6a72894-a95b-3bfe-afc7-34ecc092a813" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0," />
    <StdViol msg="Unused function's &quot;sprintf&quot; return value" ln="137" locFile="/build/../../../../../../../../timer.c" locStartln="137" sev="3" auth="username" locRef="3" rule="CODSTA-122_a" lnHash="201551585" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="201551585" unbViolId="59d3daa1-4c2f-3e45-a36a-3ddabbd3a73c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="518045f9-f1d2-358f-ba7e-7a4462b17bb1" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0," />
    <StdViol msg="Unused function's &quot;sprintf&quot; return value" ln="137" locFile="/build/../../../../../../../../timer.c" locStartln="137" sev="1" auth="username" locRef="3" rule="CERT_C-ERR33-a" lnHash="201551585" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="201551585" unbViolId="3ecf2820-3bbf-35aa-a75c-9bd52b3bb85a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac8c9f3e-0aed-3cd5-a857-2d91fa8dbf1d" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0," />
    <StdViol msg="Unused function's &quot;sprintf&quot; return value" ln="137" locFile="/build/../../../../../../../../timer.c" locStartln="137" sev="1" auth="username" locRef="3" rule="CERT_C-POS54-a" lnHash="201551585" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="201551585" unbViolId="204f1da6-a4da-3d0a-b6b0-03641480679b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ecc86f37-d561-33ff-8546-48ad80c19d10" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0," />
    <StdViol msg="Unused function's &quot;sprintf&quot; return value" ln="137" locFile="/build/../../../../../../../../timer.c" locStartln="137" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="201551585" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="201551585" unbViolId="678e257f-413a-3842-883d-277a1702b9e1" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a88d377c-1416-3501-90af-c8f89d908d40" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0," />
    <StdViol msg="Unused function's &quot;sprintf&quot; return value" ln="137" locFile="/build/../../../../../../../../timer.c" locStartln="137" sev="3" auth="username" locRef="3" rule="CERT_C-EXP12-a" lnHash="201551585" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="201551585" unbViolId="e5bd46a5-de7a-3054-b6f5-7fa62aefd886" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f11d44d-a121-375d-8901-58ad529d1d3e" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0," />
    <StdViol msg="Unused function's &quot;sprintf&quot; return value" ln="137" locFile="/build/../../../../../../../../timer.c" locStartln="137" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="201551585" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="201551585" unbViolId="a958ba9e-e90b-3421-b614-de8f506906cc" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="df80ee10-26c1-3b06-b162-e61280a00666" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0," />
    <StdViol msg="Unused function's &quot;sprintf&quot; return value" ln="137" locFile="/build/../../../../../../../../timer.c" locStartln="137" sev="3" auth="username" locRef="3" rule="MISRA2004-16_10" lnHash="201551585" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="201551585" unbViolId="b4209feb-57d5-3ca2-b33b-cb751caa39a6" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3f20af4-ae1c-3668-aed9-af09e740a507" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0," />
    <StdViol msg="Unused function's &quot;sprintf&quot; return value" ln="137" locFile="/build/../../../../../../../../timer.c" locStartln="137" sev="2" auth="username" locRef="3" rule="AUTOSAR-M0_3_2-a" lnHash="201551585" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="201551585" unbViolId="48f7e139-5879-3ae5-8e7e-93399e119414" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae2582f0-2549-3f36-88f8-a2e70a665892" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0," />
    <StdViol msg="Unused function's &quot;sprintf&quot; return value" ln="137" locFile="/build/../../../../../../../../timer.c" locStartln="137" sev="2" auth="username" locRef="3" rule="MISRA2008-0_3_2" lnHash="201551585" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="201551585" unbViolId="e76780a1-7a6d-379a-9dda-7630c8f5148c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="455a952f-43c6-3dc2-85e2-70da76b6ead7" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0," />
    <StdViol msg="Unused function's &quot;sprintf&quot; return value" ln="137" locFile="/build/../../../../../../../../timer.c" locStartln="137" sev="3" auth="username" locRef="3" rule="JSF-115" lnHash="201551585" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="201551585" unbViolId="9cbb20d6-7a10-38ad-9a4e-36f7da09186a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f4283ab-0421-35bc-826d-6c535781450d" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0," />
    <StdViol msg="Unsafe functions 'sprintf' is being used" ln="137" locFile="/build/../../../../../../../../timer.c" locStartln="137" sev="3" auth="username" locRef="3" rule="SECURITY-07" lnHash="201551585" rule.header="Don't use unsafe C functions that do write to range-unchecked buffers" tool="c++test" lineHash="201551585" unbViolId="6844b699-8f41-32e0-b43c-b707cc90aaa6" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="475434f4-7b11-31a9-9720-324b3f204d8a" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0," />
    <StdViol msg="Unsafe functions 'sprintf' is being used" ln="137" locFile="/build/../../../../../../../../timer.c" locStartln="137" sev="2" auth="username" locRef="3" rule="AUTOSAR-A27_0_4-a" lnHash="201551585" rule.header="Don't use unsafe C functions that do write to range-unchecked buffers" tool="c++test" lineHash="201551585" unbViolId="aff4986b-cbcc-3970-b5c9-ab0ebde8a588" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09187b1c-26cd-30ab-a5e5-f583ed7acb76" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0," />
    <StdViol msg="Unsafe functions 'sprintf' is being used" ln="137" locFile="/build/../../../../../../../../timer.c" locStartln="137" sev="3" auth="username" locRef="3" rule="CERT_C-MSC24-d" lnHash="201551585" rule.header="Don't use unsafe C functions that do write to range-unchecked buffers" tool="c++test" lineHash="201551585" unbViolId="d1ae893a-98ce-3f9f-8250-0d94eafb4416" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a9b2f48-90ca-3dc0-a9d2-22808398acce" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0," />
    <StdViol msg="Unsafe functions 'sprintf' is being used" ln="137" locFile="/build/../../../../../../../../timer.c" locStartln="137" sev="1" auth="username" locRef="3" rule="CERT_C-ENV01-a" lnHash="201551585" rule.header="Don't use unsafe C functions that do write to range-unchecked buffers" tool="c++test" lineHash="201551585" unbViolId="e77605e4-ec0c-3a30-b008-92d62286af80" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb0da828-28d3-33cb-bddf-b154d110f45f" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0," />
    <StdViol msg="Unsafe functions 'sprintf' is being used" ln="137" locFile="/build/../../../../../../../../timer.c" locStartln="137" sev="2" auth="username" locRef="3" rule="CERT_C-API02-b" lnHash="201551585" rule.header="Don't use unsafe C functions that do write to range-unchecked buffers" tool="c++test" lineHash="201551585" unbViolId="ee254ea4-5e46-3a14-b460-9416c2229986" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c87213d-1431-3458-b3cd-a4ed30ba207c" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0," />
    <StdViol msg="Avoid using unsafe string function 'sprintf' in your program" ln="137" locFile="/build/../../../../../../../../timer.c" locStartln="137" sev="1" auth="username" locRef="3" rule="CERT_C-STR31-e" lnHash="201551585" rule.header="Avoid using unsafe string functions which may cause buffer overflows" tool="c++test" lineHash="201551585" unbViolId="2639b98e-364f-3b26-8c5f-d168defad3bc" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c0b7a4f-83dc-3bb8-85f1-adc5756bc7f5" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0," />
    <StdViol msg="Avoid using unsafe string function 'sprintf' in your program" ln="137" locFile="/build/../../../../../../../../timer.c" locStartln="137" sev="3" auth="username" locRef="3" rule="CERT_C-MSC24-c" lnHash="201551585" rule.header="Avoid using unsafe string functions which may cause buffer overflows" tool="c++test" lineHash="201551585" unbViolId="2adaa951-3c4d-37cc-8dc5-83fae3065646" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0552fd04-520b-3023-afed-25b6e7417a10" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0," />
    <StdViol msg="Avoid using unsafe string function 'sprintf' in your program" ln="137" locFile="/build/../../../../../../../../timer.c" locStartln="137" sev="2" auth="username" locRef="3" rule="SECURITY-12" lnHash="201551585" rule.header="Avoid using unsafe string functions which may cause buffer overflows" tool="c++test" lineHash="201551585" unbViolId="3c8d9347-646b-3577-b1eb-abfb59db253e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59f975c6-1135-375d-aaf7-7087a61623fe" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0," />
    <StdViol msg="Avoid using unsafe string function 'sprintf' in your program" ln="137" locFile="/build/../../../../../../../../timer.c" locStartln="137" sev="1" auth="username" locRef="3" rule="CERT_C-ENV01-b" lnHash="201551585" rule.header="Avoid using unsafe string functions which may cause buffer overflows" tool="c++test" lineHash="201551585" unbViolId="dd368e2a-82de-32e6-b385-57c9838a7ea9" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a68329ae-f784-3e63-a8dd-620cfe2608f6" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0," />
    <StdViol msg="Avoid using unsafe string function 'sprintf' in your program" ln="137" locFile="/build/../../../../../../../../timer.c" locStartln="137" sev="2" auth="username" locRef="3" rule="CERT_C-API02-a" lnHash="201551585" rule.header="Avoid using unsafe string functions which may cause buffer overflows" tool="c++test" lineHash="201551585" unbViolId="0aa9d970-168d-3716-8f38-5d75a6b5c8d7" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6caa4951-44d1-3410-8271-a4c4ec9f4c79" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0," />
    <StdViol msg="Avoid using unsafe string function 'sprintf' in your program" ln="137" locFile="/build/../../../../../../../../timer.c" locStartln="137" sev="3" auth="username" locRef="3" rule="CERT_C-API01-b" lnHash="201551585" rule.header="Avoid using unsafe string functions which may cause buffer overflows" tool="c++test" lineHash="201551585" unbViolId="f7cdc282-2a12-3c7e-b19e-189b4f5483a2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9ef77af-edf0-393d-8d67-92e242bc2227" locEndPos="9" locType="sr" hash="-275311578" locEndLn="137" goals="0," />
    <StdViol msg="The line before the closing brace '}' is empty" ln="140" locFile="/build/../../../../../../../../timer.c" locStartln="140" sev="3" auth="username" locRef="3" rule="FORMAT-44" lnHash="125" rule.header="Braces (&quot;{}&quot;) which enclose a block will not have an empty line after &quot;{&quot; nor before &quot;}&quot;" tool="c++test" lineHash="125" unbViolId="24ec0679-5d6f-3e34-8dde-54dc28764b59" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dce774f4-4b18-30be-8fa4-47ab590f1709" locEndPos="1" locType="sr" hash="-275311578" locEndLn="140" goals="0," />
    <StdViol msg="The line before the closing brace '}' is empty" ln="140" locFile="/build/../../../../../../../../timer.c" locStartln="140" sev="3" auth="username" locRef="3" rule="JSF-060_c" lnHash="125" rule.header="Braces (&quot;{}&quot;) which enclose a block will not have an empty line after &quot;{&quot; nor before &quot;}&quot;" tool="c++test" lineHash="125" unbViolId="3c5ec542-2194-33f7-9cdd-e36d07c0dc40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="000aa5d0-934f-3a26-a5f9-f7847fbd4c5f" locEndPos="1" locType="sr" hash="-275311578" locEndLn="140" goals="0," />
    <StdViol msg="Function 'list_timers' is not in prototype form" ln="142" locFile="/build/../../../../../../../../timer.c" locStartln="142" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_8_2-c" lnHash="1408249924" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1408249924" unbViolId="0eee5305-8569-39f9-8dae-52e24ff714d4" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2eff6d81-6da4-3816-aef9-d403749dd4df" locEndPos="6" locType="sr" hash="-275311578" locEndLn="142" goals="0," />
    <StdViol msg="Function 'list_timers' is not in prototype form" ln="142" locFile="/build/../../../../../../../../timer.c" locStartln="142" sev="3" auth="username" locRef="3" rule="CERT_C-EXP37-c" lnHash="1408249924" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1408249924" unbViolId="c620a4f1-26e2-3d80-8e14-f3dc8ae6ed8b" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2138096a-47c8-3d62-a1e7-315edeb3b35e" locEndPos="6" locType="sr" hash="-275311578" locEndLn="142" goals="0," />
    <StdViol msg="Function 'list_timers' is not in prototype form" ln="142" locFile="/build/../../../../../../../../timer.c" locStartln="142" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-8_2_c" lnHash="1408249924" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1408249924" unbViolId="2151df51-8fe5-37e6-ba55-a6c0a5011216" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bacc9728-d254-3be8-9b9f-85a737f5d544" locEndPos="6" locType="sr" hash="-275311578" locEndLn="142" goals="0," />
    <StdViol msg="Function 'list_timers' is not in prototype form" ln="142" locFile="/build/../../../../../../../../timer.c" locStartln="142" sev="3" auth="username" locRef="3" rule="CODSTA-159" lnHash="1408249924" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="1408249924" unbViolId="e630fd41-3181-3f2a-9e91-db0ef1454541" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cbd82b30-b36b-3676-8a15-f5978dc05d75" locEndPos="6" locType="sr" hash="-275311578" locEndLn="142" goals="0," />
    <StdViol msg="The 'list_timers' function should be preceded by a comment that contains the '@brief' tag" ln="142" locFile="/build/../../../../../../../../timer.c" locStartln="142" sev="3" auth="username" locRef="3" rule="COMMENT-14" lnHash="1408249924" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1408249924" unbViolId="eeae548a-f68d-34a6-a297-60d5bb0eb087" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4bb4a30f-156f-3362-b2dd-ddc55f9dcbc6" locEndPos="6" locType="sr" hash="-275311578" locEndLn="142" goals="0," />
    <StdViol msg="The 'list_timers' function should be preceded by a comment that contains the '@brief' tag" ln="142" locFile="/build/../../../../../../../../timer.c" locStartln="142" sev="2" auth="username" locRef="3" rule="AUTOSAR-A2_7_3-a" lnHash="1408249924" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1408249924" unbViolId="926422b8-275c-33ba-b66b-cf596634994b" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7bc5952-5bfd-3eb7-80c9-fb93847a0702" locEndPos="6" locType="sr" hash="-275311578" locEndLn="142" goals="0," />
    <StdViol msg="Function 'list_timers' has empty parameter list" ln="142" locFile="/build/../../../../../../../../timer.c" locStartln="142" sev="3" auth="username" locRef="3" rule="CODSTA-40" lnHash="1408249924" rule.header="'void' should be used when a function is passed or returns no values" tool="c++test" lineHash="1408249924" unbViolId="1a0fe062-6a83-3462-be51-1f2750ca7b0f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5dc7698-3458-3a63-8902-045dbb003f55" locEndPos="6" locType="sr" hash="-275311578" locEndLn="142" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'list_timers'" ln="142" locFile="/build/../../../../../../../../timer.c" locStartln="142" sev="3" auth="username" locRef="3" rule="FORMAT-28" lnHash="1408249924" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="1408249924" unbViolId="fa095df3-ef7e-3052-ab79-cd528c3e46d9" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e1bc534-1abe-38fb-8ffb-357cc61ba0f2" locEndPos="6" locType="sr" hash="-275311578" locEndLn="142" goals="0," />
    <StdViol msg="Function 'list_timers' has Cyclomatic Complexity value: 2" ln="142" locFile="/build/../../../../../../../../timer.c" locStartln="142" sev="5" auth="username" locRef="3" rule="METRICS-29" lnHash="1408249924" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="1408249924" unbViolId="18bd5ad4-ccd7-39b1-897e-95f4eba5229f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="220d8b3c-27f1-3856-b0e8-24e72d0728b5" locEndPos="6" locType="sr" hash="-275311578" locEndLn="142" goals="0," />
    <StdViol msg="Function 'list_timers' has Essential Complexity value: 1" ln="142" locFile="/build/../../../../../../../../timer.c" locStartln="142" sev="5" auth="username" locRef="3" rule="METRICS-33" lnHash="1408249924" rule.header="Report Essential Complexity" tool="c++test" lineHash="1408249924" unbViolId="4a24075a-5b5a-3742-bf33-0ed2344de077" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9a667f8-84bb-3577-acc7-e49a26349d8c" locEndPos="6" locType="sr" hash="-275311578" locEndLn="142" goals="0," />
    <StdViol msg="Number of blocks of comments per statement in the function 'list_timers' : 0.0" ln="142" locFile="/build/../../../../../../../../timer.c" locStartln="142" sev="3" auth="username" locRef="3" rule="METRICS-41" lnHash="1408249924" rule.header="The number of blocks of comments before and inside function to the number of statements in function should be > 0.2" tool="c++test" lineHash="1408249924" unbViolId="5d34c2a3-8108-3249-b657-abdd24f18d54" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c29faeb4-c3f2-340d-a084-6e6297860b03" locEndPos="6" locType="sr" hash="-275311578" locEndLn="142" goals="0," />
    <StdViol msg="The value of Halstead's delivered bugs (B) for function 'list_timers' is 0.07" ln="142" locFile="/build/../../../../../../../../timer.c" locStartln="142" sev="3" auth="username" locRef="3" rule="METRICS-43" lnHash="1408249924" rule.header="Report the value of Halstead's delivered bugs (B) for a function" tool="c++test" lineHash="1408249924" unbViolId="9db2782e-55e3-370c-b301-ce42c7208c05" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4edbe8ea-69da-3dc0-b8d3-40ccfd34ebd9" locEndPos="6" locType="sr" hash="-275311578" locEndLn="142" goals="0," />
    <StdViol msg="Declare function 'list_timers' with parameter type void" ln="142" locFile="/build/../../../../../../../../timer.c" locStartln="142" sev="3" auth="username" locRef="3" rule="MISRA2004-16_5" lnHash="1408249924" rule.header="Functions with no parameters shall be declared with parameter type void" tool="c++test" lineHash="1408249924" unbViolId="4a4e241a-a3a0-3a3c-b916-f4be93f05eeb" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95888615-39ef-35bd-bbdd-46a69e6795da" locEndPos="6" locType="sr" hash="-275311578" locEndLn="142" goals="0," />
    <StdViol msg="Naming convention not followed: list_timers" ln="142" locFile="/build/../../../../../../../../timer.c" locStartln="142" sev="3" auth="username" locRef="3" rule="NAMING-17" lnHash="1408249924" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="1408249924" unbViolId="ba1222b4-fcce-3f47-a5cc-d1f7e3b3518a" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee5d9547-c089-354c-9c6c-414f061fa7ec" locEndPos="6" locType="sr" hash="-275311578" locEndLn="142" goals="0," />
    <StdViol msg="R-3119: use of non-prototype function declarator" ln="142" locFile="/build/../../../../../../../../timer.c" locStartln="142" sev="5" auth="username" locRef="3" rule="PARSER-REMARK" lnHash="1408249924" rule.header="Parser remark" tool="c++test" lineHash="1408249924" unbViolId="0053e9b9-954c-3b73-ab0d-f48ba98997e4" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c85e8fd-64ce-3ae6-9a83-940208ea8318" locEndPos="6" locType="sr" urgent="true" hash="-275311578" locEndLn="142" goals="1," />
    <StdViol msg="Prototype of function 'list_timers' does not precede function definition" ln="142" locFile="/build/../../../../../../../../timer.c" locStartln="142" sev="3" auth="username" locRef="3" rule="MISRA2004-8_1_a" lnHash="1408249924" rule.header="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" tool="c++test" lineHash="1408249924" unbViolId="cdc6bd57-7d77-319c-8cfb-38eaa696ee17" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6b1a332-5166-33c9-a7cb-ff9781aade3f" locEndPos="6" locType="sr" hash="-275311578" locEndLn="142" goals="0," />
    <StdViol msg="Prototype of function 'list_timers' does not precede function definition" ln="142" locFile="/build/../../../../../../../../timer.c" locStartln="142" sev="3" auth="username" locRef="3" rule="MISRA-071_a" lnHash="1408249924" rule.header="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" tool="c++test" lineHash="1408249924" unbViolId="9ae9e2a6-5780-33be-9297-88be69509416" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5faacbf4-2f87-392e-80a7-b86db81dd564" locEndPos="6" locType="sr" hash="-275311578" locEndLn="142" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="143" locFile="/build/../../../../../../../../timer.c" locStartln="143" sev="3" auth="username" locRef="3" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="26a18177-b0f0-3af6-ab67-0011e8c55567" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8fb0ade8-7866-3334-a42c-a6d8e7c7e5bb" locEndPos="1" locType="sr" hash="-275311578" locEndLn="143" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="144" locFile="/build/../../../../../../../../timer.c" locStartln="144" sev="4" auth="username" locRef="3" rule="MISRA2008-3_9_2" lnHash="-2004706563" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-2004706563" unbViolId="9bd1433d-bb2f-3f22-973e-26453d0dfdca" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="073898b8-aeaf-3347-b44d-292636483662" locEndPos="5" locType="sr" hash="-275311578" locEndLn="144" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="144" locFile="/build/../../../../../../../../timer.c" locStartln="144" sev="3" auth="username" locRef="3" rule="MISRA-013" lnHash="-2004706563" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-2004706563" unbViolId="196f84ee-c8cb-3959-a004-5b22811da705" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b33a629-a4ad-3ee0-a5b5-9c283f725a2f" locEndPos="5" locType="sr" hash="-275311578" locEndLn="144" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="144" locFile="/build/../../../../../../../../timer.c" locStartln="144" sev="3" auth="username" locRef="3" rule="CODSTA-223" lnHash="-2004706563" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-2004706563" unbViolId="812a8243-e25f-3996-8a76-d8024ad187bd" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2ba560d-3c0d-3822-993c-d4c908793e9c" locEndPos="5" locType="sr" hash="-275311578" locEndLn="144" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="144" locFile="/build/../../../../../../../../timer.c" locStartln="144" sev="2" auth="username" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="-2004706563" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-2004706563" unbViolId="ef9eb6c5-ed66-3732-9c0a-ef99416fe513" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de3967b9-ee7a-3c38-996e-c43c777aa68b" locEndPos="5" locType="sr" hash="-275311578" locEndLn="144" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: buf" ln="144" locFile="/build/../../../../../../../../timer.c" locStartln="144" sev="3" auth="username" locRef="3" rule="CODSTA-94" lnHash="-2004706563" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-2004706563" unbViolId="e18681cd-ab24-335c-9c1a-350f08aea6b0" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74ac7864-d636-3097-97f4-591122bcc59e" locEndPos="10" locType="sr" hash="-275311578" locEndLn="144" goals="0," />
    <StdViol msg="The 'buf' variable should be commented" ln="144" locFile="/build/../../../../../../../../timer.c" locStartln="144" sev="3" auth="username" locRef="3" rule="JSF-132_a" lnHash="-2004706563" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-2004706563" unbViolId="f7572328-2cf9-35c1-a4e3-c0cb15b54fc4" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38ab63a8-924f-3606-a31d-3288c9aafbed" locEndPos="10" locType="sr" hash="-275311578" locEndLn="144" goals="0," />
    <StdViol msg="The 'buf' variable should be commented" ln="144" locFile="/build/../../../../../../../../timer.c" locStartln="144" sev="3" auth="username" locRef="3" rule="COMMENT-05" lnHash="-2004706563" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-2004706563" unbViolId="97d6273c-1322-3be7-9d48-39738578dc7c" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d84d939a-b3b9-32b6-9fa6-6a1a50f435eb" locEndPos="10" locType="sr" hash="-275311578" locEndLn="144" goals="0," />
    <StdViol msg="Naming convention not followed: buf" ln="144" locFile="/build/../../../../../../../../timer.c" locStartln="144" sev="3" auth="username" locRef="3" rule="NAMING-25" lnHash="-2004706563" rule.header="Begin all terminated characters string variables with 'sz'" tool="c++test" lineHash="-2004706563" unbViolId="33621ec6-a319-3a78-ba4e-7eadc45c8e0a" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0437b968-297b-37a9-9a22-9991b424cb19" locEndPos="10" locType="sr" hash="-275311578" locEndLn="144" goals="0," />
    <StdViol msg="The 'buf' identifier should have the 'rg' prefix" ln="144" locFile="/build/../../../../../../../../timer.c" locStartln="144" sev="3" auth="username" locRef="3" rule="NAMING-HN-01" lnHash="-2004706563" rule.header="Hungarian notation for array variables and parameters" tool="c++test" lineHash="-2004706563" unbViolId="8daec325-e569-33ee-8678-82c663830b2c" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37b0a3b1-e138-30e4-8bfa-65abf528cf54" locEndPos="10" locType="sr" hash="-275311578" locEndLn="144" goals="0," />
    <StdViol msg="The 'buf' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="144" locFile="/build/../../../../../../../../timer.c" locStartln="144" sev="3" auth="username" locRef="3" rule="NAMING-HN-05" lnHash="-2004706563" rule.header="Hungarian notation for byte pointer, array, or reference types" tool="c++test" lineHash="-2004706563" unbViolId="455c092f-fc6b-3751-9dcf-793a1142182f" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1ea9029-dcf6-3f8b-80c4-c770b5b45096" locEndPos="10" locType="sr" hash="-275311578" locEndLn="144" goals="0," />
    <StdViol msg="The 'buf' identifier should have the 'sz' prefix followed by a capital letter or an underscore" ln="144" locFile="/build/../../../../../../../../timer.c" locStartln="144" sev="3" auth="username" locRef="3" rule="NAMING-HN-07" lnHash="-2004706563" rule.header="Hungarian notation for array of char types" tool="c++test" lineHash="-2004706563" unbViolId="6062ee20-2aaf-3972-8a11-474c0e79e5f3" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="164ab87c-dbbd-3300-9f47-4359fe006bad" locEndPos="10" locType="sr" hash="-275311578" locEndLn="144" goals="0," />
    <StdViol msg="The 'buf' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="144" locFile="/build/../../../../../../../../timer.c" locStartln="144" sev="3" auth="username" locRef="3" rule="NAMING-HN-09" lnHash="-2004706563" rule.header="Hungarian notation for char pointer, array, or reference types" tool="c++test" lineHash="-2004706563" unbViolId="ec10e7e7-c7b5-3a58-92ee-30016879fc3f" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="81882812-0ca2-3b9c-ab51-59ce81a8dcb9" locEndPos="10" locType="sr" hash="-275311578" locEndLn="144" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="145" locFile="/build/../../../../../../../../timer.c" locStartln="145" sev="4" auth="username" locRef="3" rule="MISRA2008-3_9_2" lnHash="1679375043" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1679375043" unbViolId="cc52c3fe-4ff0-3c07-ae90-aa2152120f70" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="717707d9-0004-3784-88aa-90af356e70a2" locEndPos="5" locType="sr" hash="-275311578" locEndLn="145" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="145" locFile="/build/../../../../../../../../timer.c" locStartln="145" sev="3" auth="username" locRef="3" rule="MISRA-013" lnHash="1679375043" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1679375043" unbViolId="571e091a-c608-3b06-abfd-e3e7d54934a4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f70da53-b19d-3564-a85b-dbec2126d65c" locEndPos="5" locType="sr" hash="-275311578" locEndLn="145" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="145" locFile="/build/../../../../../../../../timer.c" locStartln="145" sev="3" auth="username" locRef="3" rule="CODSTA-223" lnHash="1679375043" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1679375043" unbViolId="2fe3d547-f31c-36b1-8b3b-1eb8dac4222f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a1970b6-d936-307a-aee0-ca263abe2562" locEndPos="5" locType="sr" hash="-275311578" locEndLn="145" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="145" locFile="/build/../../../../../../../../timer.c" locStartln="145" sev="2" auth="username" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="1679375043" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1679375043" unbViolId="e4362d94-f72c-39f6-af61-5b7b9665a107" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d74f62e1-5115-3663-a941-09e3a4113570" locEndPos="5" locType="sr" hash="-275311578" locEndLn="145" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="145" locFile="/build/../../../../../../../../timer.c" locStartln="145" sev="3" auth="username" locRef="3" rule="HICPP-7_1_6-b" lnHash="1679375043" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="1679375043" unbViolId="8604af6d-7705-3d77-b832-c4ae32a6fa98" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7088b7f7-28c6-3eaf-a3e8-619ff227baa3" locEndPos="5" locType="sr" hash="-275311578" locEndLn="145" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="145" locFile="/build/../../../../../../../../timer.c" locStartln="145" sev="4" auth="username" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="1679375043" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1679375043" unbViolId="1020125c-6a20-3d68-9be2-b3e6ee91fbac" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="29213503-bc2a-3e69-8965-22775bbba166" locEndPos="5" locType="sr" hash="-275311578" locEndLn="145" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="145" locFile="/build/../../../../../../../../timer.c" locStartln="145" sev="3" auth="username" locRef="3" rule="MISRA2004-6_3_b" lnHash="1679375043" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1679375043" unbViolId="7f7199b7-4556-39bb-b774-34047ab0bf19" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d53a9b91-ec2b-3eef-b033-7c4db86e46eb" locEndPos="5" locType="sr" hash="-275311578" locEndLn="145" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="145" locFile="/build/../../../../../../../../timer.c" locStartln="145" sev="2" auth="username" locRef="3" rule="JSF-209_b" lnHash="1679375043" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1679375043" unbViolId="e882f650-1761-3cca-8371-fd763cfe474a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="666d70da-5b3d-3c21-990c-5f7a6148e82e" locEndPos="5" locType="sr" hash="-275311578" locEndLn="145" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="145" locFile="/build/../../../../../../../../timer.c" locStartln="145" sev="4" auth="username" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="1679375043" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1679375043" unbViolId="cfb522b7-3cd2-3d68-9056-a5ec0a261e17" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85e57b28-f375-3816-9bea-a3ae042fcedc" locEndPos="5" locType="sr" hash="-275311578" locEndLn="145" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="145" locFile="/build/../../../../../../../../timer.c" locStartln="145" sev="3" auth="username" locRef="3" rule="HICPP-3_5_1-b" lnHash="1679375043" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1679375043" unbViolId="2e508681-6e54-3da7-acae-dd28ce2c4171" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="168ca356-80c4-3b81-9c72-8d87fc8815ed" locEndPos="5" locType="sr" hash="-275311578" locEndLn="145" goals="0," />
    <StdViol msg="'i' shall be declared as unsigned int or signed int" ln="145" locFile="/build/../../../../../../../../timer.c" locStartln="145" sev="3" auth="username" locRef="3" rule="PORT-13" lnHash="1679375043" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="1679375043" unbViolId="0f17bb20-73b1-325d-b4e3-0994e412ab72" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5873b9af-6ddd-3147-9b98-0c5bd2761deb" locEndPos="9" locType="sr" hash="-275311578" locEndLn="145" goals="0," />
    <StdViol msg="The 'i' variable should be commented" ln="145" locFile="/build/../../../../../../../../timer.c" locStartln="145" sev="3" auth="username" locRef="3" rule="JSF-132_a" lnHash="1679375043" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="1679375043" unbViolId="bf3f7748-18aa-346c-af92-27086a81bc79" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2e9b781-5b5a-3d95-aee6-2960e232cd9e" locEndPos="9" locType="sr" hash="-275311578" locEndLn="145" goals="0," />
    <StdViol msg="The 'i' variable should be commented" ln="145" locFile="/build/../../../../../../../../timer.c" locStartln="145" sev="3" auth="username" locRef="3" rule="COMMENT-05" lnHash="1679375043" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="1679375043" unbViolId="92d7b0c1-47f5-3bea-9b20-8f2e409f8041" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f03be32-0ccc-3eb9-9434-5f41c351e724" locEndPos="9" locType="sr" hash="-275311578" locEndLn="145" goals="0," />
    <StdViol msg="The variable &quot;i&quot; was not initialized when declared" ln="145" locFile="/build/../../../../../../../../timer.c" locStartln="145" sev="2" auth="username" locRef="3" rule="JSF-142_b" lnHash="1679375043" rule.header="All variables shall be initialized before use" tool="c++test" lineHash="1679375043" unbViolId="9bae1526-f558-3a73-9d16-36c495ffd596" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd0360a0-428f-350c-9871-d1ce821f49a1" locEndPos="9" locType="sr" hash="-275311578" locEndLn="145" goals="0," />
    <StdViol msg="The variable &quot;i&quot; was not initialized when declared" ln="145" locFile="/build/../../../../../../../../timer.c" locStartln="145" sev="3" auth="username" locRef="3" rule="INIT-03" lnHash="1679375043" rule.header="Initialize all variables" tool="c++test" lineHash="1679375043" unbViolId="ed71e475-0649-3ee4-8e0a-dbe3d9bdfdc9" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d6e454ff-4f30-3f0c-83b0-064a2530d3e3" locEndPos="9" locType="sr" hash="-275311578" locEndLn="145" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="146" locFile="/build/../../../../../../../../timer.c" locStartln="146" sev="3" auth="username" locRef="3" rule="CODSTA-122_a" lnHash="1628413856" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1628413856" unbViolId="b7e406dd-25e9-3f61-94ab-78dbe5a074e6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d627b77a-4c97-381f-a216-506bc96da751" locEndPos="5" locType="sr" hash="-275311578" locEndLn="146" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="146" locFile="/build/../../../../../../../../timer.c" locStartln="146" sev="1" auth="username" locRef="3" rule="CERT_C-ERR33-a" lnHash="1628413856" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1628413856" unbViolId="2b644b1f-72ed-3ff9-88ca-c597286c8313" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1b1aa808-d0e4-304c-bf4c-7cd068d31587" locEndPos="5" locType="sr" hash="-275311578" locEndLn="146" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="146" locFile="/build/../../../../../../../../timer.c" locStartln="146" sev="1" auth="username" locRef="3" rule="CERT_C-POS54-a" lnHash="1628413856" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1628413856" unbViolId="1315083e-62cb-3b1e-8264-026986e787e6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d62856bc-d679-34b0-a67f-515706264a10" locEndPos="5" locType="sr" hash="-275311578" locEndLn="146" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="146" locFile="/build/../../../../../../../../timer.c" locStartln="146" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="1628413856" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1628413856" unbViolId="06a473cf-5a3c-3e01-94be-7fa13fb407ba" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed4f8c56-020c-3b28-bd76-29ad4ec59f80" locEndPos="5" locType="sr" hash="-275311578" locEndLn="146" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="146" locFile="/build/../../../../../../../../timer.c" locStartln="146" sev="3" auth="username" locRef="3" rule="CERT_C-EXP12-a" lnHash="1628413856" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1628413856" unbViolId="b42ece10-ba9d-3fa8-92ec-a8d4db1fab9b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba8d9a85-5476-3684-adc1-607cec98f5d9" locEndPos="5" locType="sr" hash="-275311578" locEndLn="146" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="146" locFile="/build/../../../../../../../../timer.c" locStartln="146" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="1628413856" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1628413856" unbViolId="e783b8a7-58c4-38b1-b511-050ecab79e88" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb2044f6-a96e-3254-966a-f0fc8139227a" locEndPos="5" locType="sr" hash="-275311578" locEndLn="146" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="146" locFile="/build/../../../../../../../../timer.c" locStartln="146" sev="3" auth="username" locRef="3" rule="MISRA2004-16_10" lnHash="1628413856" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="1628413856" unbViolId="5c28aac3-f13e-38f9-8e31-5234b0e28b5f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c191f6cd-3ba4-3506-9f26-f842cba63ab0" locEndPos="5" locType="sr" hash="-275311578" locEndLn="146" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="146" locFile="/build/../../../../../../../../timer.c" locStartln="146" sev="2" auth="username" locRef="3" rule="AUTOSAR-M0_3_2-a" lnHash="1628413856" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="1628413856" unbViolId="f33e5c47-7599-383a-b5eb-f42e4c7f65c6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22e16d03-e5b8-3851-97b9-30430b715619" locEndPos="5" locType="sr" hash="-275311578" locEndLn="146" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="146" locFile="/build/../../../../../../../../timer.c" locStartln="146" sev="2" auth="username" locRef="3" rule="MISRA2008-0_3_2" lnHash="1628413856" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="1628413856" unbViolId="ae266698-bf91-313d-bdef-10891a5eaf49" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ada8fcdf-e089-31ce-a380-ddbb7f68b546" locEndPos="5" locType="sr" hash="-275311578" locEndLn="146" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="146" locFile="/build/../../../../../../../../timer.c" locStartln="146" sev="3" auth="username" locRef="3" rule="JSF-115" lnHash="1628413856" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="1628413856" unbViolId="c845aaa4-afa8-3c1b-82b2-a6e8405ec118" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd664290-3e73-30f2-8b12-0f3485df1b2a" locEndPos="5" locType="sr" hash="-275311578" locEndLn="146" goals="0," />
    <StdViol msg="String literal &quot;Current Set Timers&quot; is passed to function 'print_string' as pointer to non-const object" ln="146" locFile="/build/../../../../../../../../timer.c" locStartln="146" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_7_4-a" lnHash="1628413856" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1628413856" unbViolId="113e8261-a0cc-3935-9473-e6ac37e6b8e5" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cae6d15d-c255-34c8-8148-1222cabf7989" locEndPos="18" locType="sr" hash="-275311578" locEndLn="146" goals="0," />
    <StdViol msg="String literal &quot;Current Set Timers&quot; is passed to function 'print_string' as pointer to non-const object" ln="146" locFile="/build/../../../../../../../../timer.c" locStartln="146" sev="2" auth="username" locRef="3" rule="AUTOSAR-A2_13_4-a" lnHash="1628413856" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1628413856" unbViolId="47790f53-263d-3d0d-9a8b-b34c5b79f35b" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ff2ce90-9c04-3e49-8abd-80a450ae46e2" locEndPos="18" locType="sr" hash="-275311578" locEndLn="146" goals="0," />
    <StdViol msg="String literal &quot;Current Set Timers&quot; is passed to function 'print_string' as pointer to non-const object" ln="146" locFile="/build/../../../../../../../../timer.c" locStartln="146" sev="2" auth="username" locRef="3" rule="JSF-151.1" lnHash="1628413856" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1628413856" unbViolId="19cf0b7d-089f-3e69-badb-aa01f3f55d79" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95be0301-17d1-338a-b973-af496f9b22df" locEndPos="18" locType="sr" hash="-275311578" locEndLn="146" goals="0," />
    <StdViol msg="String literal &quot;Current Set Timers&quot; is passed to function 'print_string' as pointer to non-const object" ln="146" locFile="/build/../../../../../../../../timer.c" locStartln="146" sev="2" auth="username" locRef="3" rule="PB-27" lnHash="1628413856" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1628413856" unbViolId="4c1c3182-c60e-3bb2-80dd-e5e8149885cb" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="305f9c2d-f0af-3eca-b5d2-72a52f714de0" locEndPos="18" locType="sr" hash="-275311578" locEndLn="146" goals="0," />
    <StdViol msg="String literal &quot;Current Set Timers&quot; is passed to function 'print_string' as pointer to non-const object" ln="146" locFile="/build/../../../../../../../../timer.c" locStartln="146" sev="3" auth="username" locRef="3" rule="CERT_C-STR05-a" lnHash="1628413856" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1628413856" unbViolId="c75ffb53-3386-38aa-95d3-e89913601353" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bbd02148-bfad-34e0-86cd-9fff10e8358c" locEndPos="18" locType="sr" hash="-275311578" locEndLn="146" goals="0," />
    <StdViol msg="String literal &quot;Current Set Timers&quot; is passed to function 'print_string' as pointer to non-const object" ln="146" locFile="/build/../../../../../../../../timer.c" locStartln="146" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-7_4" lnHash="1628413856" rule.header="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" tool="c++test" lineHash="1628413856" unbViolId="f225c1de-8e1c-3a9e-8d9b-333a8ce0b4c5" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f3637fb-bfab-3a48-bfd3-6beae37f2ab2" locEndPos="18" locType="sr" hash="-275311578" locEndLn="146" goals="0," />
    <StdViol msg="String literal &quot;Current Set Timers&quot; is passed to function 'print_string' as pointer to non-const object" ln="146" locFile="/build/../../../../../../../../timer.c" locStartln="146" sev="2" auth="username" locRef="3" rule="CERT_C-STR30-a" lnHash="1628413856" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1628413856" unbViolId="1e329687-bcae-32b5-80a0-c8dfa98b06d3" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f893fd6e-a2ab-3786-aa7c-5b5b32ee5ca9" locEndPos="18" locType="sr" hash="-275311578" locEndLn="146" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Current Set Timers" ln="146" locFile="/build/../../../../../../../../timer.c" locStartln="146" sev="5" auth="username" locRef="3" rule="CWE-798-a" lnHash="1628413856" rule.header="Do not hard code string literals" tool="c++test" lineHash="1628413856" unbViolId="f521b28c-bcff-39dc-bea0-6810881faf9e" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ce9b036-4254-3969-ad12-7f40d28fc685" locEndPos="18" locType="sr" hash="-275311578" locEndLn="146" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Current Set Timers" ln="146" locFile="/build/../../../../../../../../timer.c" locStartln="146" sev="5" auth="username" locRef="3" rule="CODSTA-203" lnHash="1628413856" rule.header="Do not hard code string literals" tool="c++test" lineHash="1628413856" unbViolId="9b5587b5-95ed-3bef-9fbd-72bf45b86755" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="726cdeef-e44d-325f-b887-59a90bb62368" locEndPos="18" locType="sr" hash="-275311578" locEndLn="146" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Current Set Timers" ln="146" locFile="/build/../../../../../../../../timer.c" locStartln="146" sev="1" auth="username" locRef="3" rule="APSC_DV-003110-a" lnHash="1628413856" rule.header="Do not hard code string literals" tool="c++test" lineHash="1628413856" unbViolId="14a73ba7-86d0-3e4f-bb46-c2b1f3c733fc" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="653c52c0-1284-3242-a308-fadb4a66ca21" locEndPos="18" locType="sr" hash="-275311578" locEndLn="146" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Current Set Timers" ln="146" locFile="/build/../../../../../../../../timer.c" locStartln="146" sev="1" auth="username" locRef="3" rule="CERT_C-MSC41-a" lnHash="1628413856" rule.header="Do not hard code string literals" tool="c++test" lineHash="1628413856" unbViolId="11a5116f-69c4-3ade-8550-2e54a973a2f5" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38d423fe-2a69-3700-be27-3befbdf19229" locEndPos="18" locType="sr" hash="-275311578" locEndLn="146" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="147" locFile="/build/../../../../../../../../timer.c" locStartln="147" sev="3" auth="username" locRef="3" rule="CODSTA-122_a" lnHash="1760988551" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1760988551" unbViolId="a73c5110-2d87-36a4-b772-610569d84eef" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac8bfd8e-9b82-3abd-bae7-48b7f2230f93" locEndPos="5" locType="sr" hash="-275311578" locEndLn="147" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="147" locFile="/build/../../../../../../../../timer.c" locStartln="147" sev="1" auth="username" locRef="3" rule="CERT_C-ERR33-a" lnHash="1760988551" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1760988551" unbViolId="f56215bf-b9d7-3a8a-b22b-48baf33c2005" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3ef4824-391e-3e0a-b6a0-fb60487a737a" locEndPos="5" locType="sr" hash="-275311578" locEndLn="147" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="147" locFile="/build/../../../../../../../../timer.c" locStartln="147" sev="1" auth="username" locRef="3" rule="CERT_C-POS54-a" lnHash="1760988551" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1760988551" unbViolId="9a8fb64c-c3e4-3c6f-9bc5-ef823c8792c6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="adefa745-fc3d-3f14-8ee8-a7f1fbfa67a9" locEndPos="5" locType="sr" hash="-275311578" locEndLn="147" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="147" locFile="/build/../../../../../../../../timer.c" locStartln="147" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="1760988551" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1760988551" unbViolId="9612785f-77ca-31d0-8a1e-4f3bd046bb02" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd148f8e-f326-353e-b057-946d276642ab" locEndPos="5" locType="sr" hash="-275311578" locEndLn="147" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="147" locFile="/build/../../../../../../../../timer.c" locStartln="147" sev="3" auth="username" locRef="3" rule="CERT_C-EXP12-a" lnHash="1760988551" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1760988551" unbViolId="5d494d58-35d2-321f-b64b-bffdfa6fcaad" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3e79199-6ddf-3e5f-8f3e-33971ff918fb" locEndPos="5" locType="sr" hash="-275311578" locEndLn="147" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="147" locFile="/build/../../../../../../../../timer.c" locStartln="147" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="1760988551" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1760988551" unbViolId="f877f37b-5327-38de-8b90-fc5772283298" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96d99062-3a09-34af-be05-39bfc25d6b57" locEndPos="5" locType="sr" hash="-275311578" locEndLn="147" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="147" locFile="/build/../../../../../../../../timer.c" locStartln="147" sev="3" auth="username" locRef="3" rule="MISRA2004-16_10" lnHash="1760988551" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="1760988551" unbViolId="9d6025ea-ef7a-33ce-85f7-b47c6da842da" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa0524ab-0670-3d9b-8953-8162d67625db" locEndPos="5" locType="sr" hash="-275311578" locEndLn="147" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="147" locFile="/build/../../../../../../../../timer.c" locStartln="147" sev="2" auth="username" locRef="3" rule="AUTOSAR-M0_3_2-a" lnHash="1760988551" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="1760988551" unbViolId="facbd245-e09e-357b-b8c4-6775901471d4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eee92f59-6f37-3cb1-981d-a9208c19b644" locEndPos="5" locType="sr" hash="-275311578" locEndLn="147" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="147" locFile="/build/../../../../../../../../timer.c" locStartln="147" sev="2" auth="username" locRef="3" rule="MISRA2008-0_3_2" lnHash="1760988551" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="1760988551" unbViolId="bd9dfbc4-6958-3991-b82a-75668c762a60" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3a226fe-69e5-358f-ae30-a7d34786d940" locEndPos="5" locType="sr" hash="-275311578" locEndLn="147" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="147" locFile="/build/../../../../../../../../timer.c" locStartln="147" sev="3" auth="username" locRef="3" rule="JSF-115" lnHash="1760988551" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="1760988551" unbViolId="e0e16207-5959-3dd8-8c53-b9abce4707e2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e52d03b-229f-33c5-9797-da71c064fde2" locEndPos="5" locType="sr" hash="-275311578" locEndLn="147" goals="0," />
    <StdViol msg="String literal &quot;Record#&#x9;Start Time&#x9;End Time&#x9;Channel&quot; is passed to function 'print_string' as pointer to non-const object" ln="147" locFile="/build/../../../../../../../../timer.c" locStartln="147" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_7_4-a" lnHash="1760988551" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1760988551" unbViolId="bf723086-5617-3471-9737-95066fe8a7f7" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1496767d-ec6c-3113-972a-a5793a07756c" locEndPos="18" locType="sr" hash="-275311578" locEndLn="147" goals="0," />
    <StdViol msg="String literal &quot;Record#&#x9;Start Time&#x9;End Time&#x9;Channel&quot; is passed to function 'print_string' as pointer to non-const object" ln="147" locFile="/build/../../../../../../../../timer.c" locStartln="147" sev="2" auth="username" locRef="3" rule="AUTOSAR-A2_13_4-a" lnHash="1760988551" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1760988551" unbViolId="725539b2-394d-3d4e-99d6-827606d899f2" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a6ce488-8415-358f-9851-cf698cb8b04a" locEndPos="18" locType="sr" hash="-275311578" locEndLn="147" goals="0," />
    <StdViol msg="String literal &quot;Record#&#x9;Start Time&#x9;End Time&#x9;Channel&quot; is passed to function 'print_string' as pointer to non-const object" ln="147" locFile="/build/../../../../../../../../timer.c" locStartln="147" sev="2" auth="username" locRef="3" rule="JSF-151.1" lnHash="1760988551" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1760988551" unbViolId="fc03dcc4-bcee-3e9a-b817-313c406dcaae" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1825bc08-3ebc-3fa5-9a1d-dc83973e65ab" locEndPos="18" locType="sr" hash="-275311578" locEndLn="147" goals="0," />
    <StdViol msg="String literal &quot;Record#&#x9;Start Time&#x9;End Time&#x9;Channel&quot; is passed to function 'print_string' as pointer to non-const object" ln="147" locFile="/build/../../../../../../../../timer.c" locStartln="147" sev="2" auth="username" locRef="3" rule="PB-27" lnHash="1760988551" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1760988551" unbViolId="a3916810-49da-396d-8b84-b100f088c2a8" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5646d6b-cf92-32a8-b4b8-2c3a3680b158" locEndPos="18" locType="sr" hash="-275311578" locEndLn="147" goals="0," />
    <StdViol msg="String literal &quot;Record#&#x9;Start Time&#x9;End Time&#x9;Channel&quot; is passed to function 'print_string' as pointer to non-const object" ln="147" locFile="/build/../../../../../../../../timer.c" locStartln="147" sev="3" auth="username" locRef="3" rule="CERT_C-STR05-a" lnHash="1760988551" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1760988551" unbViolId="0740ee18-b145-3f30-a6f7-bee334960509" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="830faef2-9851-3a43-8a72-5c64491dc578" locEndPos="18" locType="sr" hash="-275311578" locEndLn="147" goals="0," />
    <StdViol msg="String literal &quot;Record#&#x9;Start Time&#x9;End Time&#x9;Channel&quot; is passed to function 'print_string' as pointer to non-const object" ln="147" locFile="/build/../../../../../../../../timer.c" locStartln="147" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-7_4" lnHash="1760988551" rule.header="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" tool="c++test" lineHash="1760988551" unbViolId="c66853e6-497e-380a-b73a-0a100db75736" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe819502-6df4-33eb-beda-9ec5ef6a64db" locEndPos="18" locType="sr" hash="-275311578" locEndLn="147" goals="0," />
    <StdViol msg="String literal &quot;Record#&#x9;Start Time&#x9;End Time&#x9;Channel&quot; is passed to function 'print_string' as pointer to non-const object" ln="147" locFile="/build/../../../../../../../../timer.c" locStartln="147" sev="2" auth="username" locRef="3" rule="CERT_C-STR30-a" lnHash="1760988551" rule.header="A string literal shall not be modified" tool="c++test" lineHash="1760988551" unbViolId="fe4e3c93-e824-3ac9-bc21-ac7fcd94199e" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd8e7c84-f4bb-3611-a142-aaf4152c8ed3" locEndPos="18" locType="sr" hash="-275311578" locEndLn="147" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Record#&#x9;Start Time&#x9;End Time&#x9;Channel" ln="147" locFile="/build/../../../../../../../../timer.c" locStartln="147" sev="5" auth="username" locRef="3" rule="CWE-798-a" lnHash="1760988551" rule.header="Do not hard code string literals" tool="c++test" lineHash="1760988551" unbViolId="b6334b24-d3f1-38e8-9fd6-6db4cf8f8deb" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1847d9d7-6043-3923-b8a9-874796df7ce0" locEndPos="18" locType="sr" hash="-275311578" locEndLn="147" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Record#&#x9;Start Time&#x9;End Time&#x9;Channel" ln="147" locFile="/build/../../../../../../../../timer.c" locStartln="147" sev="5" auth="username" locRef="3" rule="CODSTA-203" lnHash="1760988551" rule.header="Do not hard code string literals" tool="c++test" lineHash="1760988551" unbViolId="9e4d6c26-999d-3e12-b068-189d8553efce" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c9d31d9-3679-3367-bf54-119d55d8bf74" locEndPos="18" locType="sr" hash="-275311578" locEndLn="147" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Record#&#x9;Start Time&#x9;End Time&#x9;Channel" ln="147" locFile="/build/../../../../../../../../timer.c" locStartln="147" sev="1" auth="username" locRef="3" rule="APSC_DV-003110-a" lnHash="1760988551" rule.header="Do not hard code string literals" tool="c++test" lineHash="1760988551" unbViolId="bf8e584d-4988-3560-8a5e-44fb221810b0" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17aaf83d-a2c2-37cd-9933-2d12e6bc3e4a" locEndPos="18" locType="sr" hash="-275311578" locEndLn="147" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Record#&#x9;Start Time&#x9;End Time&#x9;Channel" ln="147" locFile="/build/../../../../../../../../timer.c" locStartln="147" sev="1" auth="username" locRef="3" rule="CERT_C-MSC41-a" lnHash="1760988551" rule.header="Do not hard code string literals" tool="c++test" lineHash="1760988551" unbViolId="deb4963f-596c-3206-a725-c40958ee25d5" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24064df0-f9dc-3366-9692-43aaefb766fa" locEndPos="18" locType="sr" hash="-275311578" locEndLn="147" goals="0," />
    <StdViol msg="A loop does not have a fixed upper nor lower bound" ln="148" locFile="/build/../../../../../../../../timer.c" locStartln="148" sev="3" auth="username" locRef="3" rule="CODSTA-83" lnHash="1531685295" rule.header="All loops must have a fixed upper or lower bound" tool="c++test" lineHash="1531685295" unbViolId="52b860c8-f18a-3972-ac3c-83d49accd899" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7345d82b-1132-3a6b-b026-d9af63471856" locEndPos="5" locType="sr" hash="-275311578" locEndLn="148" goals="0," />
    <StdViol msg="Expression of array type is passed as argument to function 'format_timer_record'" ln="150" locFile="/build/../../../../../../../../timer.c" locStartln="150" sev="2" auth="username" locRef="3" rule="JSF-097_d" lnHash="-1846563555" rule.header="Arrays shall not be passed to functions as array/pointer parameters" tool="c++test" lineHash="-1846563555" unbViolId="eab52612-9426-39ce-bd92-a985c083b9e3" locStartPos="31" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f0238ff-5441-3923-804f-b4c8e2fad2ff" locEndPos="32" locType="sr" hash="-275311578" locEndLn="150" goals="0," />
    <StdViol msg="Expression of array type is passed as argument to function 'format_timer_record'" ln="150" locFile="/build/../../../../../../../../timer.c" locStartln="150" sev="3" auth="username" locRef="3" rule="HICPP-4_1_1-b" lnHash="-1846563555" rule.header="Do not pass expression with array type to a function with pointer or array type parameter" tool="c++test" lineHash="-1846563555" unbViolId="00216223-c6b5-3e8c-bb88-683e37eef200" locStartPos="31" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c60a468-b5de-34b7-9221-39753eb0c681" locEndPos="32" locType="sr" hash="-275311578" locEndLn="150" goals="0," />
    <StdViol msg="Expression of array type is passed as argument to function 'format_timer_record'" ln="150" locFile="/build/../../../../../../../../timer.c" locStartln="150" sev="3" auth="username" locRef="3" rule="PB-41_b" lnHash="-1846563555" rule.header="Do not pass expression with array type to a function with pointer or array type parameter" tool="c++test" lineHash="-1846563555" unbViolId="b527cfaf-8962-32a9-bf06-4c01ff2e0e60" locStartPos="31" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a475b602-3c9d-3206-a147-8e45a5ec9c40" locEndPos="32" locType="sr" hash="-275311578" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="151" locFile="/build/../../../../../../../../timer.c" locStartln="151" sev="3" auth="username" locRef="3" rule="CODSTA-122_a" lnHash="924656480" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="924656480" unbViolId="9e8c4819-7027-33ed-8471-75272b7143e8" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="82cf232e-2f67-3148-8aa7-8f552cd40de1" locEndPos="9" locType="sr" hash="-275311578" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="151" locFile="/build/../../../../../../../../timer.c" locStartln="151" sev="1" auth="username" locRef="3" rule="CERT_C-ERR33-a" lnHash="924656480" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="924656480" unbViolId="14ea9000-6f3f-3c97-9ec3-2dcf55f3e38e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f048807-3ced-37e3-8182-2ec83f81f68e" locEndPos="9" locType="sr" hash="-275311578" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="151" locFile="/build/../../../../../../../../timer.c" locStartln="151" sev="1" auth="username" locRef="3" rule="CERT_C-POS54-a" lnHash="924656480" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="924656480" unbViolId="a5f2ce1f-c25b-3767-915f-bac9c91dd9a1" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fae92e85-de1a-398b-9511-760b21c1720a" locEndPos="9" locType="sr" hash="-275311578" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="151" locFile="/build/../../../../../../../../timer.c" locStartln="151" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="924656480" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="924656480" unbViolId="ee5087d4-fe2d-3f08-8650-a25020832079" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64e0b8db-6c96-3202-a3bb-17e52fa8f939" locEndPos="9" locType="sr" hash="-275311578" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="151" locFile="/build/../../../../../../../../timer.c" locStartln="151" sev="3" auth="username" locRef="3" rule="CERT_C-EXP12-a" lnHash="924656480" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="924656480" unbViolId="f7c4c83a-e583-35ee-a2a1-dc857f201e5c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c578e182-ac29-3771-be65-47e6657c9fed" locEndPos="9" locType="sr" hash="-275311578" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="151" locFile="/build/../../../../../../../../timer.c" locStartln="151" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="924656480" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="924656480" unbViolId="3e00f5a0-2671-323c-9153-0aa377e48dd6" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b867a30-394d-3e8b-8ebf-fd4a3730bfd5" locEndPos="9" locType="sr" hash="-275311578" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="151" locFile="/build/../../../../../../../../timer.c" locStartln="151" sev="3" auth="username" locRef="3" rule="MISRA2004-16_10" lnHash="924656480" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="924656480" unbViolId="037f1853-9783-3dd0-a578-9bb156b4ece8" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17042e65-a232-3d6b-92fe-dbae2db97f38" locEndPos="9" locType="sr" hash="-275311578" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="151" locFile="/build/../../../../../../../../timer.c" locStartln="151" sev="2" auth="username" locRef="3" rule="AUTOSAR-M0_3_2-a" lnHash="924656480" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="924656480" unbViolId="b51bd315-0bce-3149-821a-3f8a8f102e05" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="882a1eb8-74c2-351e-bd20-838556c1acb3" locEndPos="9" locType="sr" hash="-275311578" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="151" locFile="/build/../../../../../../../../timer.c" locStartln="151" sev="2" auth="username" locRef="3" rule="MISRA2008-0_3_2" lnHash="924656480" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="924656480" unbViolId="eb8df399-a843-3271-9e9b-f40a06d6f58d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92bf148c-3996-308b-ac11-22d0cf74b4c5" locEndPos="9" locType="sr" hash="-275311578" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="151" locFile="/build/../../../../../../../../timer.c" locStartln="151" sev="3" auth="username" locRef="3" rule="JSF-115" lnHash="924656480" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="924656480" unbViolId="1d424f7f-9b66-319a-8026-baf581eb5d63" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de3ee79d-78f3-3689-ad5a-6dee63637223" locEndPos="9" locType="sr" hash="-275311578" locEndLn="151" goals="0," />
    <StdViol msg="Expression of array type is passed as argument to function 'print_string'" ln="151" locFile="/build/../../../../../../../../timer.c" locStartln="151" sev="2" auth="username" locRef="3" rule="JSF-097_d" lnHash="924656480" rule.header="Arrays shall not be passed to functions as array/pointer parameters" tool="c++test" lineHash="924656480" unbViolId="000aa21a-5769-3e76-8a72-50f35b319515" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="696b4092-6349-3fd7-9769-ffb88cf751ed" locEndPos="22" locType="sr" hash="-275311578" locEndLn="151" goals="0," />
    <StdViol msg="Expression of array type is passed as argument to function 'print_string'" ln="151" locFile="/build/../../../../../../../../timer.c" locStartln="151" sev="3" auth="username" locRef="3" rule="HICPP-4_1_1-b" lnHash="924656480" rule.header="Do not pass expression with array type to a function with pointer or array type parameter" tool="c++test" lineHash="924656480" unbViolId="908f98dc-b3a7-3eca-ab8b-94c0f0fe755a" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5649304-6262-3f79-82ce-3c286638f9f7" locEndPos="22" locType="sr" hash="-275311578" locEndLn="151" goals="0," />
    <StdViol msg="Expression of array type is passed as argument to function 'print_string'" ln="151" locFile="/build/../../../../../../../../timer.c" locStartln="151" sev="3" auth="username" locRef="3" rule="PB-41_b" lnHash="924656480" rule.header="Do not pass expression with array type to a function with pointer or array type parameter" tool="c++test" lineHash="924656480" unbViolId="e6f55acb-3e00-3a3e-8b7a-b47978c1e2d3" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="63040638-c91c-338e-9555-854cc403d245" locEndPos="22" locType="sr" hash="-275311578" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="153" locFile="/build/../../../../../../../../timer.c" locStartln="153" sev="3" auth="username" locRef="3" rule="CODSTA-122_a" lnHash="-332149005" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-332149005" unbViolId="0d4f0966-1bb6-3769-b993-91530a18b75d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="050d1395-8f69-3f06-b7c3-16ff2caeb47b" locEndPos="5" locType="sr" hash="-275311578" locEndLn="153" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="153" locFile="/build/../../../../../../../../timer.c" locStartln="153" sev="1" auth="username" locRef="3" rule="CERT_C-ERR33-a" lnHash="-332149005" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-332149005" unbViolId="3f5eab53-e596-3fb0-9e7c-6f74c4398024" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="45eea586-2543-3c80-add2-f67c8dde5903" locEndPos="5" locType="sr" hash="-275311578" locEndLn="153" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="153" locFile="/build/../../../../../../../../timer.c" locStartln="153" sev="1" auth="username" locRef="3" rule="CERT_C-POS54-a" lnHash="-332149005" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-332149005" unbViolId="c758bbf7-6e7f-34d2-979f-5ac20905ca29" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d151f35-54e6-302b-b596-aaf7e71c2572" locEndPos="5" locType="sr" hash="-275311578" locEndLn="153" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="153" locFile="/build/../../../../../../../../timer.c" locStartln="153" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-332149005" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-332149005" unbViolId="b7646564-d30b-3e4e-9906-70c59fb12739" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4b9733e-6ab5-38c7-88ec-7ffdc6b9b0b2" locEndPos="5" locType="sr" hash="-275311578" locEndLn="153" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="153" locFile="/build/../../../../../../../../timer.c" locStartln="153" sev="3" auth="username" locRef="3" rule="CERT_C-EXP12-a" lnHash="-332149005" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-332149005" unbViolId="497ec3c7-2a2d-3f34-a5a2-3c6a430ee751" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="331cfab9-5390-3e48-9f18-c76159fd62d8" locEndPos="5" locType="sr" hash="-275311578" locEndLn="153" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="153" locFile="/build/../../../../../../../../timer.c" locStartln="153" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="-332149005" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-332149005" unbViolId="1d363273-d4ae-322a-ab94-4f70b2593d02" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="56831abc-4486-3858-804f-0667cc8143e5" locEndPos="5" locType="sr" hash="-275311578" locEndLn="153" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="153" locFile="/build/../../../../../../../../timer.c" locStartln="153" sev="3" auth="username" locRef="3" rule="MISRA2004-16_10" lnHash="-332149005" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-332149005" unbViolId="8a21fccc-32b4-340c-81f7-09174443fb48" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ae9d72c-13a9-3f8f-b48d-425f0e496447" locEndPos="5" locType="sr" hash="-275311578" locEndLn="153" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="153" locFile="/build/../../../../../../../../timer.c" locStartln="153" sev="2" auth="username" locRef="3" rule="AUTOSAR-M0_3_2-a" lnHash="-332149005" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-332149005" unbViolId="2d013740-93fc-3d61-b938-ad81dfb3e6db" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ac111a1-33ed-31b3-9f99-7f9debf16605" locEndPos="5" locType="sr" hash="-275311578" locEndLn="153" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="153" locFile="/build/../../../../../../../../timer.c" locStartln="153" sev="2" auth="username" locRef="3" rule="MISRA2008-0_3_2" lnHash="-332149005" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-332149005" unbViolId="ed687bc7-d905-3fd2-885b-3e0b7fb2c2cf" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f163a69-f1a5-387e-b808-549e33ec65b6" locEndPos="5" locType="sr" hash="-275311578" locEndLn="153" goals="0," />
    <StdViol msg="Unused function's &quot;print_string&quot; return value" ln="153" locFile="/build/../../../../../../../../timer.c" locStartln="153" sev="3" auth="username" locRef="3" rule="JSF-115" lnHash="-332149005" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-332149005" unbViolId="7eadafc4-3a90-3f38-9d53-0db0fd152c52" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5c6591c-2929-31cf-8978-cb376a6f8bbd" locEndPos="5" locType="sr" hash="-275311578" locEndLn="153" goals="0," /><StdViol msg="The assertion density is lower than two assertions per function" ln="1" locFile="/build/../../../../../../../../stdinout.c" locStartln="1" sev="3" auth="username" locRef="4" rule="METRICS-31" lnHash="0" rule.header="The assertion density of the code should average to a minimum of two assertions per function" tool="c++test" lineHash="0" unbViolId="0edb893f-7543-39c8-9f0b-d03e907093de" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="853df65e-53a2-321f-a501-abd653fe57e7" locEndPos="1" locType="sr" hash="844867668" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'stdinout.c' should declare a local constant string that begins from characters &quot;@(#)&quot; " ln="1" locFile="/build/../../../../../../../../stdinout.c" locStartln="1" sev="5" auth="username" locRef="4" rule="PFO-04" lnHash="0" rule.header="Every implementation file should declare a local constant string that describes the file" tool="c++test" lineHash="0" unbViolId="88af9531-006e-3017-9df6-56cf18153922" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0096f5dc-da5a-32dd-965b-827256b05173" locEndPos="1" locType="sr" hash="844867668" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'stdinout.c'" ln="1" locFile="/build/../../../../../../../../stdinout.c" locStartln="1" sev="3" auth="username" locRef="4" rule="COMMENT-02" lnHash="0" rule.header="Provide copyright information" tool="c++test" lineHash="0" unbViolId="2a0dcd39-da92-35c7-843a-27d7a7861d36" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4941e333-25c8-320e-b8ab-c87f74cf219a" locEndPos="1" locType="sr" hash="844867668" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'stdinout.c'" ln="1" locFile="/build/../../../../../../../../stdinout.c" locStartln="1" sev="3" auth="username" locRef="4" rule="JSF-133_b" lnHash="0" rule.header="Every source file will contain copyright information" tool="c++test" lineHash="0" unbViolId="a2fe71e3-e40a-361f-849c-4aad3611823b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48827d56-c89f-3dee-a177-64a452920c22" locEndPos="1" locType="sr" hash="844867668" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'stdinout.c'" ln="1" locFile="/build/../../../../../../../../stdinout.c" locStartln="1" sev="3" auth="username" locRef="4" rule="COMMENT-03" lnHash="0" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="0" unbViolId="bfe1ad33-48bb-3772-915b-8c58bf2557b6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21d539e2-a62d-3f9f-af81-b5c60d601c3e" locEndPos="1" locType="sr" hash="844867668" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'stdinout.c'" ln="1" locFile="/build/../../../../../../../../stdinout.c" locStartln="1" sev="3" auth="username" locRef="4" rule="JSF-133_a" lnHash="0" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="0" unbViolId="4d3e79de-da34-37fe-a7ec-cfa6da422e08" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a013cb1-f07f-339e-b640-4188d8c84f0f" locEndPos="1" locType="sr" hash="844867668" locEndLn="1" goals="0," />
    <StdViol msg="Use // comments only" ln="2" locFile="/build/../../../../../../../../stdinout.c" locStartln="2" sev="3" auth="username" locRef="4" rule="HICPP-2_3_1-a" lnHash="1499" rule.header="Prefer C++ style comment" tool="c++test" lineHash="1499" unbViolId="aa1e5b7d-1397-3d57-a7b4-472943b007a1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6fae2bc1-6bb1-3a14-b9bc-bfd848400b49" locEndPos="1" locType="sr" hash="844867668" locEndLn="2" goals="0," />
    <StdViol msg="Use // comments only" ln="2" locFile="/build/../../../../../../../../stdinout.c" locStartln="2" sev="2" auth="username" locRef="4" rule="JSF-126" lnHash="1499" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="1499" unbViolId="4f1deb7f-4d4a-3e06-a9f0-06e4e140cac3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22ef160e-4bf7-3917-a9c5-c016924e7b2a" locEndPos="1" locType="sr" hash="844867668" locEndLn="2" goals="0," />
    <StdViol msg="Use // comments only" ln="2" locFile="/build/../../../../../../../../stdinout.c" locStartln="2" sev="3" auth="username" locRef="4" rule="COMMENT-01" lnHash="1499" rule.header="Prefer C++ style comment" tool="c++test" lineHash="1499" unbViolId="2828b714-3957-3767-9b5b-14a470d4a62a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="63334fa5-4c25-33fb-a1d5-c5ba7e8a3205" locEndPos="1" locType="sr" hash="844867668" locEndLn="2" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;inout.h&quot;" ln="6" locFile="/build/../../../../../../../../stdinout.c" locStartln="6" sev="2" auth="username" locRef="4" rule="PREPROC-09" lnHash="30763942" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="30763942" unbViolId="296b56ba-619e-3530-8b6f-6cbce8c1094f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1c7aa55-3abd-3655-b793-6b75d700dc7d" locEndPos="1" locType="sr" hash="844867668" locEndLn="6" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;inout.h&quot;" ln="6" locFile="/build/../../../../../../../../stdinout.c" locStartln="6" sev="2" auth="username" locRef="4" rule="JSF-033" lnHash="30763942" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="30763942" unbViolId="22efcdc1-3ad6-3402-9eb8-020209227b40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84997266-8edd-3f32-ab2b-b825c0b8c253" locEndPos="1" locType="sr" hash="844867668" locEndLn="6" goals="0," />
    <StdViol msg="Include &quot;consts.h&quot; should be placed before &quot;inout.h&quot;" ln="7" locFile="/build/../../../../../../../../stdinout.c" locStartln="7" sev="4" auth="username" locRef="4" rule="FORMAT-39" lnHash="-286442511" rule.header="Sort #include directives in alphabetical order" tool="c++test" lineHash="-286442511" unbViolId="768f2acc-1268-313e-9034-cc5b7c9d4bc2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2177537f-eb0a-3f64-b5ff-c64f5422114a" locEndPos="1" locType="sr" hash="844867668" locEndLn="7" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;consts.h&quot;" ln="7" locFile="/build/../../../../../../../../stdinout.c" locStartln="7" sev="2" auth="username" locRef="4" rule="PREPROC-09" lnHash="-286442511" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="-286442511" unbViolId="7dca70c1-f4a6-3c09-a7f3-0101419d9ced" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55d53f62-781f-341c-a0e7-5fe184ddec00" locEndPos="1" locType="sr" hash="844867668" locEndLn="7" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;consts.h&quot;" ln="7" locFile="/build/../../../../../../../../stdinout.c" locStartln="7" sev="2" auth="username" locRef="4" rule="JSF-033" lnHash="-286442511" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="-286442511" unbViolId="6eb401a0-4e7d-3ddf-a184-e645e3182750" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55502242-b695-3a31-ad3f-ce28f1a5ecf2" locEndPos="1" locType="sr" hash="844867668" locEndLn="7" goals="0," />
    <StdViol msg="Ensure that C Standard Library is securely used" ln="9" locFile="/build/../../../../../../../../stdinout.c" locStartln="9" sev="4" auth="username" locRef="4" rule="HICPP-17_2_1-a" lnHash="-274057400" rule.header="Wrap use of the C Standard Library" tool="c++test" lineHash="-274057400" unbViolId="91fff2fc-5ff0-3130-8d81-44f79a271fea" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad2541c4-5b90-3898-bc87-8a9bf15e9b84" locEndPos="1" locType="sr" hash="844867668" locEndLn="9" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="10" locFile="/build/../../../../../../../../stdinout.c" locStartln="10" sev="3" auth="username" locRef="4" rule="PREPROC-18" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be included" tool="c++test" lineHash="1233725276" unbViolId="46349c8d-6520-3e11-881d-46a943745cd4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8fd2057-cd36-3ba2-81d8-0026547e838b" locEndPos="1" locType="sr" hash="844867668" locEndLn="10" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="10" locFile="/build/../../../../../../../../stdinout.c" locStartln="10" sev="2" auth="username" locRef="4" rule="JSF-022" lnHash="1233725276" rule.header="The input/output library &lt;stdio.h> shall not be used" tool="c++test" lineHash="1233725276" unbViolId="002fae07-1938-3b62-8b42-cad9c72322f0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ce072d2-6d2f-3098-866f-a0f894952db9" locEndPos="1" locType="sr" hash="844867668" locEndLn="10" goals="0," />
    <StdViol msg="Ensure that C Standard Library is securely used" ln="10" locFile="/build/../../../../../../../../stdinout.c" locStartln="10" sev="4" auth="username" locRef="4" rule="HICPP-17_2_1-a" lnHash="1233725276" rule.header="Wrap use of the C Standard Library" tool="c++test" lineHash="1233725276" unbViolId="35f5e907-98f7-3c61-a3a3-4daa518ff0bc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="882ca4fa-3179-300d-a139-903675698ded" locEndPos="1" locType="sr" hash="844867668" locEndLn="10" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="10" locFile="/build/../../../../../../../../stdinout.c" locStartln="10" sev="2" auth="username" locRef="4" rule="AUTOSAR-M27_0_1-a" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be used" tool="c++test" lineHash="1233725276" unbViolId="6e6b8380-372c-34ac-8ce6-4c52511d34f2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ecb761fe-092c-3e58-81e4-22bf1ff645d9" locEndPos="1" locType="sr" hash="844867668" locEndLn="10" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="10" locFile="/build/../../../../../../../../stdinout.c" locStartln="10" sev="2" auth="username" locRef="4" rule="MISRA2008-27_0_1" lnHash="1233725276" rule.header="The stream input/output library &lt;cstdio> shall not be used" tool="c++test" lineHash="1233725276" unbViolId="75187242-3638-380b-afd8-90c8c090b1ec" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9404a6c2-2bff-3fc5-85fc-890375585853" locEndPos="1" locType="sr" hash="844867668" locEndLn="10" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="10" locFile="/build/../../../../../../../../stdinout.c" locStartln="10" sev="3" auth="username" locRef="4" rule="MISRA2004-20_9" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be used" tool="c++test" lineHash="1233725276" unbViolId="9e60141b-689c-3570-b68a-f99b5ef13497" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7482e6bd-52eb-31de-83fd-bdffcd45b18d" locEndPos="1" locType="sr" hash="844867668" locEndLn="10" goals="0," />
    <StdViol msg="Ensure that C Standard Library is securely used" ln="11" locFile="/build/../../../../../../../../stdinout.c" locStartln="11" sev="4" auth="username" locRef="4" rule="HICPP-17_2_1-a" lnHash="-327381023" rule.header="Wrap use of the C Standard Library" tool="c++test" lineHash="-327381023" unbViolId="a6cc8a52-6911-3580-bc4a-ead601377219" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="33876947-2274-3347-a9c5-0edc46ebe186" locEndPos="1" locType="sr" hash="844867668" locEndLn="11" goals="0," />
    <StdViol msg="Use // comments only" ln="13" locFile="/build/../../../../../../../../stdinout.c" locStartln="13" sev="3" auth="username" locRef="4" rule="HICPP-2_3_1-a" lnHash="1499" rule.header="Prefer C++ style comment" tool="c++test" lineHash="1499" unbViolId="ebdc10ef-8864-3d8c-b380-454afc4cc922" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="35cf09cc-2b82-3c34-a09e-d6fb01c7471a" locEndPos="1" locType="sr" hash="844867668" locEndLn="13" goals="0," />
    <StdViol msg="Use // comments only" ln="13" locFile="/build/../../../../../../../../stdinout.c" locStartln="13" sev="2" auth="username" locRef="4" rule="JSF-126" lnHash="1499" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="1499" unbViolId="03548f14-5e47-38cb-a670-50eda8372460" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d79af3b-f65a-3dee-bae4-5f651f42bf99" locEndPos="1" locType="sr" hash="844867668" locEndLn="13" goals="0," />
    <StdViol msg="Use // comments only" ln="13" locFile="/build/../../../../../../../../stdinout.c" locStartln="13" sev="3" auth="username" locRef="4" rule="COMMENT-01" lnHash="1499" rule.header="Prefer C++ style comment" tool="c++test" lineHash="1499" unbViolId="3399a865-d370-304a-b75d-f64b8e58b99d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="01511b4e-9fd6-3f32-8de9-948a823dde97" locEndPos="1" locType="sr" hash="844867668" locEndLn="13" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="4" auth="username" locRef="4" rule="MISRA2008-3_9_2" lnHash="2073209951" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="2073209951" unbViolId="d87c1db0-a473-305d-a1ed-8a911d2a63a2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff995666-7600-39f5-b3fd-850296bd423a" locEndPos="1" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="3" auth="username" locRef="4" rule="MISRA-013" lnHash="2073209951" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="2073209951" unbViolId="4846dda9-63ce-3675-8efa-282dc6105577" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9293fdc2-5e00-32c6-884f-42a8a848335f" locEndPos="1" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="3" auth="username" locRef="4" rule="CODSTA-223" lnHash="2073209951" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="2073209951" unbViolId="893196bb-393f-39fd-a5fc-c2e4ae43a544" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="14778ec4-f705-315e-99db-a6e854b8e1d3" locEndPos="1" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="2073209951" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="2073209951" unbViolId="bdd13b8d-8651-3944-8809-4bdcb8e8f47e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f71b454-1d04-3c19-af56-68fd9a895f2b" locEndPos="1" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="3" auth="username" locRef="4" rule="HICPP-7_1_6-b" lnHash="2073209951" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="2073209951" unbViolId="931119d5-e30c-34a6-9a69-c7d0c1a8b04a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="543103ce-a5bb-3537-a027-b4ed786418f6" locEndPos="1" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="4" auth="username" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="2073209951" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="2073209951" unbViolId="7afe4e4b-1d41-3262-ac1b-f5357b627937" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1e25777-9633-3f77-9142-045bb595e4fb" locEndPos="1" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="3" auth="username" locRef="4" rule="MISRA2004-6_3_b" lnHash="2073209951" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="2073209951" unbViolId="5186d1d7-541f-376e-b7b6-a4d21c7b10b3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2fc972df-b2cb-3b0c-8537-cdd3da50e8c5" locEndPos="1" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="2" auth="username" locRef="4" rule="JSF-209_b" lnHash="2073209951" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="2073209951" unbViolId="e0ec0278-bb94-3963-a59c-bd143d3ee758" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae86e558-b813-30af-9380-5fa5521f1893" locEndPos="1" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="4" auth="username" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="2073209951" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="2073209951" unbViolId="5993aa18-778d-3fe8-84d2-d3d0f99a3f08" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a816e74c-64b6-3b5b-b546-95293a94d682" locEndPos="1" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="3" auth="username" locRef="4" rule="HICPP-3_5_1-b" lnHash="2073209951" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="2073209951" unbViolId="80c2ee02-b48d-3497-bc88-3cedb99e1bd2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4596ce62-3b14-36d3-a5b3-8b33d3465e33" locEndPos="1" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="R-3119: use of non-prototype function declarator" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="5" auth="username" locRef="4" rule="PARSER-REMARK" lnHash="2073209951" rule.header="Parser remark" tool="c++test" lineHash="2073209951" unbViolId="17777760-fb86-3b41-9cf4-045f7f4034ed" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f6a498d-8992-3aff-b4d2-4b5922983a3b" locEndPos="5" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function definition" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="3" auth="username" locRef="4" rule="MISRA2004-8_1_a" lnHash="2073209951" rule.header="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" tool="c++test" lineHash="2073209951" unbViolId="b72ba1c0-8365-35d5-9a5a-f60c1c807ff5" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0da43c0b-a9ab-3570-8bcf-dbc45f0d5952" locEndPos="5" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="Prototype of function 'get_input_digit' does not precede function definition" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="3" auth="username" locRef="4" rule="MISRA-071_a" lnHash="2073209951" rule.header="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" tool="c++test" lineHash="2073209951" unbViolId="e3ef4a4a-ab06-32c3-92d7-ae2d03e72399" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26fa3d03-32c7-3800-8b01-624dde2352ef" locEndPos="5" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="Function 'get_input_digit' is not in prototype form" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_8_2-c" lnHash="2073209951" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="2073209951" unbViolId="633b7462-6276-33a6-9245-6590dbea91c1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b69d0142-72e6-3ff1-a88c-525d576876a5" locEndPos="5" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="Function 'get_input_digit' is not in prototype form" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="3" auth="username" locRef="4" rule="CERT_C-EXP37-c" lnHash="2073209951" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="2073209951" unbViolId="6a4312f5-560a-3753-9662-7d78fa19db8d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c74f49b3-3618-3fb4-a558-dad5577b18a4" locEndPos="5" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="Function 'get_input_digit' is not in prototype form" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-8_2_c" lnHash="2073209951" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="2073209951" unbViolId="c1dd37a2-7310-36d4-9910-f10c40170350" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="056073ba-57db-3a6d-a409-ea164c5d1b5b" locEndPos="5" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="Function 'get_input_digit' is not in prototype form" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="3" auth="username" locRef="4" rule="CODSTA-159" lnHash="2073209951" rule.header="Function types shall be in prototype form" tool="c++test" lineHash="2073209951" unbViolId="e428e188-8e12-38a0-8133-a06498dabace" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a808dd6-7e92-37d3-a555-77fabf08f47f" locEndPos="5" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="The 'get_input_digit' function should be preceded by a comment that contains the '@brief' tag" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="3" auth="username" locRef="4" rule="COMMENT-14" lnHash="2073209951" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="2073209951" unbViolId="c83dff7c-c27d-32f4-85ff-3d9f404f14b5" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="82ed3ac2-dcda-358b-a7da-622eef99da36" locEndPos="5" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="The 'get_input_digit' function should be preceded by a comment that contains the '@brief' tag" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="2" auth="username" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="2073209951" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="2073209951" unbViolId="814d8f25-fd6f-35cf-9be3-69ea6a5145d3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eace3ad3-7c52-3fe4-8733-688a283db2b3" locEndPos="5" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="The 'get_input_digit' function should be preceded by a comment that contains the '@return' tag" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="3" auth="username" locRef="4" rule="COMMENT-14_b" lnHash="2073209951" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="2073209951" unbViolId="d8291c7e-2e69-30e5-a97c-9c83e92ff29d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c1ce062-5b6a-3f78-84a0-0ff25a4d0185" locEndPos="5" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="The 'get_input_digit' function should be preceded by a comment that contains the '@return' tag" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="2" auth="username" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="2073209951" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="2073209951" unbViolId="9ac7c478-20c0-32d7-97e6-b0e50f24b36f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a21329e-24ba-33df-84b4-4bd18af2f47a" locEndPos="5" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="'get_input_digit' shall be declared as unsigned int or signed int" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="3" auth="username" locRef="4" rule="PORT-13" lnHash="2073209951" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="2073209951" unbViolId="612bb989-5ee1-30b7-80ee-0307b26542d1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="975d85e5-003e-312c-b2bf-84b91d16e425" locEndPos="5" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="Function 'get_input_digit' has empty parameter list" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="3" auth="username" locRef="4" rule="CODSTA-40" lnHash="2073209951" rule.header="'void' should be used when a function is passed or returns no values" tool="c++test" lineHash="2073209951" unbViolId="5b860411-f384-3d30-8466-601ea0c585c8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="062d0494-c6dd-305a-be62-b5e830a62354" locEndPos="5" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'get_input_digit'" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="3" auth="username" locRef="4" rule="FORMAT-28" lnHash="2073209951" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="2073209951" unbViolId="3bda3e4c-1c1c-31fb-888e-497886668817" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="087be401-2efc-3c35-8cb6-af75deee8ec6" locEndPos="5" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="Function 'get_input_digit' has Cyclomatic Complexity value: 1" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="5" auth="username" locRef="4" rule="METRICS-29" lnHash="2073209951" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="2073209951" unbViolId="7500638e-3be8-3689-9cf2-cb0da7c28e49" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="526e39a4-35f1-3915-847c-c10f944cde2f" locEndPos="5" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="Function 'get_input_digit' has Essential Complexity value: 1" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="5" auth="username" locRef="4" rule="METRICS-33" lnHash="2073209951" rule.header="Report Essential Complexity" tool="c++test" lineHash="2073209951" unbViolId="afab91bf-acb7-3c5e-9861-c62d10903da3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f4983610-ff44-3367-b644-bb1dabacada2" locEndPos="5" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="The value of Halstead's delivered bugs (B) for function 'get_input_digit' is 0.16" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="3" auth="username" locRef="4" rule="METRICS-43" lnHash="2073209951" rule.header="Report the value of Halstead's delivered bugs (B) for a function" tool="c++test" lineHash="2073209951" unbViolId="de9fa93a-dbab-3ce5-a590-280beb78a0a5" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="683cb821-6f5f-3899-991f-83cc63a738e1" locEndPos="5" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="Declare function 'get_input_digit' with parameter type void" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="3" auth="username" locRef="4" rule="MISRA2004-16_5" lnHash="2073209951" rule.header="Functions with no parameters shall be declared with parameter type void" tool="c++test" lineHash="2073209951" unbViolId="3e62e027-bb27-3d25-a828-812df6d2fd4f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4422897-e020-3130-b850-bee5c79cb8fb" locEndPos="5" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="Naming convention not followed: get_input_digit" ln="16" locFile="/build/../../../../../../../../stdinout.c" locStartln="16" sev="3" auth="username" locRef="4" rule="NAMING-17" lnHash="2073209951" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="2073209951" unbViolId="36d845f6-dc43-3a77-9384-b852052e228b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2586fb1-be82-3e58-8315-44ee4d12a726" locEndPos="5" locType="sr" hash="844867668" locEndLn="16" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 16" ln="17" locFile="/build/../../../../../../../../stdinout.c" locStartln="17" sev="3" auth="username" locRef="4" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="fcae0736-e367-3ee2-b559-f2e8fc15bd83" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4717f66-55e8-3ab7-a214-6fd138a15868" locEndPos="1" locType="sr" hash="844867668" locEndLn="17" goals="0," />
    <StdViol msg="The function 'get_input_digit' has more than 20 lines and less than 2 assertions" ln="17" locFile="/build/../../../../../../../../stdinout.c" locStartln="17" sev="3" auth="username" locRef="4" rule="METRICS-32" lnHash="123" rule.header="All functions with more than 20 lines should contain at least 2 assertions" tool="c++test" lineHash="123" unbViolId="f845b204-9126-30a4-89ce-9a338d41245d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c71a02ac-e7d2-32ab-8b31-7ace2e2af985" locEndPos="1" locType="sr" hash="844867668" locEndLn="17" goals="0," />
    <FlowViol msg="Value of &quot;c&quot; is never used" ln="18" locFile="/build/../../../../../../../../stdinout.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="19" rule="AUTOSAR-A0_1_1-a" FirstElSrcRngStartPos="0" lnHash="-695983806" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../stdinout.c" rule.header="Avoid unused values" FirstElSrcRngStartln="18" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-2055826385" lang="cpp" violId="f65d692d-259f-3436-92cb-041ac5f44c45" locEndPos="0" locEndLn="19" goals="0," locStartln="18" sev="2" locRef="4" tool="c++test" lineHash="-695983806" unbViolId="591c28c5-fd91-3a95-8391-0e6d5e9b4610" locType="sr" hash="844867668" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-695983806" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="18" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="18" srcRngEndLn="19" desc="char c;" ElType="CP" rngLn="18">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;c&quot; is never used" ln="18" locFile="/build/../../../../../../../../stdinout.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="19" rule="BD-PB-VOVR" FirstElSrcRngStartPos="0" lnHash="-695983806" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../stdinout.c" rule.header="Avoid unused values" FirstElSrcRngStartln="18" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1077022741" lang="cpp" violId="4996111e-7351-3f27-bbed-98b520037e57" locEndPos="0" locEndLn="19" goals="0," locStartln="18" sev="3" locRef="4" tool="c++test" lineHash="-695983806" unbViolId="87d12861-25cf-3ef8-9f03-07a182b14b36" locType="sr" hash="844867668" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-695983806" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="18" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="18" srcRngEndLn="19" desc="char c;" ElType="CP" rngLn="18">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;c&quot; is never used" ln="18" locFile="/build/../../../../../../../../stdinout.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="19" rule="CERT_C-DCL22-a" FirstElSrcRngStartPos="0" lnHash="-695983806" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../stdinout.c" rule.header="Avoid unused values" FirstElSrcRngStartln="18" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="689682156" lang="cpp" violId="05a5e3a4-0f14-331a-9994-dc3170b43f57" locEndPos="0" locEndLn="19" goals="0," locStartln="18" sev="3" locRef="4" tool="c++test" lineHash="-695983806" unbViolId="a34770dd-0101-3666-aabf-d29db12cce06" locType="sr" hash="844867668" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-695983806" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="18" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="18" srcRngEndLn="19" desc="char c;" ElType="CP" rngLn="18">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;c&quot; is never used" ln="18" locFile="/build/../../../../../../../../stdinout.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="19" rule="MISRA2008-0_1_6" FirstElSrcRngStartPos="0" lnHash="-695983806" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../stdinout.c" rule.header="Avoid unused values" FirstElSrcRngStartln="18" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="853139912" lang="cpp" violId="9ce8d682-756a-38cd-881e-c1ee74cae3e1" locEndPos="0" locEndLn="19" goals="0," locStartln="18" sev="2" locRef="4" tool="c++test" lineHash="-695983806" unbViolId="edb4e5ac-7e78-3f4a-b1a9-f7c021d9b4cc" locType="sr" hash="844867668" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-695983806" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="18" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="18" srcRngEndLn="19" desc="char c;" ElType="CP" rngLn="18">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;c&quot; is never used" ln="18" locFile="/build/../../../../../../../../stdinout.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="19" rule="MISRA2012-RULE-2_2_b" FirstElSrcRngStartPos="0" lnHash="-695983806" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../stdinout.c" rule.header="Avoid unused values" FirstElSrcRngStartln="18" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1667373681" lang="cpp" violId="caa97784-c3d7-3bcc-a8c8-1382212b5299" locEndPos="0" locEndLn="19" goals="0," locStartln="18" sev="2" locRef="4" tool="c++test" lineHash="-695983806" unbViolId="b484c89b-dab7-3fca-a609-208d2646ec08" locType="sr" hash="844867668" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-695983806" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="18" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="18" srcRngEndLn="19" desc="char c;" ElType="CP" rngLn="18">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;c&quot; is never used" ln="18" locFile="/build/../../../../../../../../stdinout.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="19" rule="MISRAC2012-RULE_2_2-b" FirstElSrcRngStartPos="0" lnHash="-695983806" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/build/../../../../../../../../stdinout.c" rule.header="Avoid unused values" FirstElSrcRngStartln="18" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1445193448" lang="cpp" violId="aff9a6de-05e8-3f9e-939b-f6a60d1fd7e3" locEndPos="0" locEndLn="19" goals="0," locStartln="18" sev="2" locRef="4" tool="c++test" lineHash="-695983806" unbViolId="89a01d59-b16e-3678-bd20-cc9d46c83d0e" locType="sr" hash="844867668" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-695983806" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="18" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="18" srcRngEndLn="19" desc="char c;" ElType="CP" rngLn="18">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="The basic numerical type 'char' should not be used" ln="18" locFile="/build/../../../../../../../../stdinout.c" locStartln="18" sev="4" auth="username" locRef="4" rule="MISRA2008-3_9_2" lnHash="-695983806" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-695983806" unbViolId="205c4d8d-59b4-3c38-8639-365da6c43746" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0fcf017c-e0cf-3108-9ada-d63bcdb62777" locEndPos="5" locType="sr" hash="844867668" locEndLn="18" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="18" locFile="/build/../../../../../../../../stdinout.c" locStartln="18" sev="3" auth="username" locRef="4" rule="MISRA-013" lnHash="-695983806" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-695983806" unbViolId="3f8f6819-3272-380f-9717-3f49b8da7509" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f343fd33-ab11-3bde-8441-41124e9de74d" locEndPos="5" locType="sr" hash="844867668" locEndLn="18" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="18" locFile="/build/../../../../../../../../stdinout.c" locStartln="18" sev="3" auth="username" locRef="4" rule="CODSTA-223" lnHash="-695983806" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-695983806" unbViolId="e9f72dcb-bde3-31f6-857a-2b4e6b4cb9b7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b307badf-ffee-3223-8a6b-1c0492a3a85b" locEndPos="5" locType="sr" hash="844867668" locEndLn="18" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="18" locFile="/build/../../../../../../../../stdinout.c" locStartln="18" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="-695983806" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-695983806" unbViolId="56bdf678-9536-3c2d-b0b8-1596f81fbce3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1341afc7-1254-3782-9b86-c69fee7635b7" locEndPos="5" locType="sr" hash="844867668" locEndLn="18" goals="0," />
    <StdViol msg="W-179: variable &quot;c&quot; was declared but never referenced" ln="18" locFile="/build/../../../../../../../../stdinout.c" locStartln="18" sev="4" auth="username" locRef="4" rule="PARSER-WARNING" lnHash="-695983806" rule.header="Parser warning" tool="c++test" lineHash="-695983806" unbViolId="c16dc51e-bfea-3962-a0a1-2d9236b9f08a" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9ec2095-4db8-3385-a736-91664c67383b" locEndPos="10" locType="sr" hash="844867668" locEndLn="18" goals="0," />
    <StdViol msg="The variable &quot;c&quot; was not initialized when declared" ln="18" locFile="/build/../../../../../../../../stdinout.c" locStartln="18" sev="2" auth="username" locRef="4" rule="JSF-142_b" lnHash="-695983806" rule.header="All variables shall be initialized before use" tool="c++test" lineHash="-695983806" unbViolId="720e3009-a741-379b-801e-dd4479823a5c" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8747dca5-d7a6-378d-b9f8-e9a5f4d0b4ea" locEndPos="10" locType="sr" hash="844867668" locEndLn="18" goals="0," />
    <StdViol msg="The variable &quot;c&quot; was not initialized when declared" ln="18" locFile="/build/../../../../../../../../stdinout.c" locStartln="18" sev="3" auth="username" locRef="4" rule="INIT-03" lnHash="-695983806" rule.header="Initialize all variables" tool="c++test" lineHash="-695983806" unbViolId="8f5fb86e-30b5-3fa4-a3e1-22276487a95e" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a89a6b5-2f3c-3913-813b-be532dd4aed8" locEndPos="10" locType="sr" hash="844867668" locEndLn="18" goals="0," />
    <StdViol msg="The variable 'c' shall be declared as 'unsigned char' or 'signed char'" ln="18" locFile="/build/../../../../../../../../stdinout.c" locStartln="18" sev="3" auth="username" locRef="4" rule="MISRA-014" lnHash="-695983806" rule.header="Explicitly declare 'char' type as signed or unsigned" tool="c++test" lineHash="-695983806" unbViolId="033bbe4d-50bc-3808-abbc-d023a17bfcb8" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e266a19f-fede-36b6-af1c-fee898eb8b5d" locEndPos="10" locType="sr" hash="844867668" locEndLn="18" goals="0," />
    <StdViol msg="Declare local variable 'c' as const" ln="18" locFile="/build/../../../../../../../../stdinout.c" locStartln="18" sev="3" auth="username" locRef="4" rule="CERT_C-DCL00-a" lnHash="-695983806" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-695983806" unbViolId="f5764bdb-b764-3ab3-ba30-8fcd7a4b1d55" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55d910f1-1691-3464-af22-3e70643aa489" locEndPos="10" locType="sr" hash="844867668" locEndLn="18" goals="0," />
    <StdViol msg="Declare local variable 'c' as const" ln="18" locFile="/build/../../../../../../../../stdinout.c" locStartln="18" sev="2" auth="username" locRef="4" rule="AUTOSAR-A7_1_1-a" lnHash="-695983806" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-695983806" unbViolId="af659102-acfc-38fd-8320-11a5e8f8695a" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="682100dd-d451-3b69-965b-d80674761839" locEndPos="10" locType="sr" hash="844867668" locEndLn="18" goals="0," />
    <StdViol msg="Declare local variable 'c' as const" ln="18" locFile="/build/../../../../../../../../stdinout.c" locStartln="18" sev="2" auth="username" locRef="4" rule="MISRA2008-7_1_1" lnHash="-695983806" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="-695983806" unbViolId="671e5e40-4f4e-3511-9b6c-56f7d24ee183" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ef55a03-5074-3a12-bd4e-7abb986f5f7e" locEndPos="10" locType="sr" hash="844867668" locEndLn="18" goals="0," />
    <StdViol msg="Declare local variable 'c' as const" ln="18" locFile="/build/../../../../../../../../stdinout.c" locStartln="18" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-53" lnHash="-695983806" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-695983806" unbViolId="bd9ca694-ad14-31ef-966e-265e8d8db207" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26b3fb12-b542-3ddc-94f6-1417e8250e00" locEndPos="10" locType="sr" hash="844867668" locEndLn="18" goals="0," />
    <StdViol msg="Declare local variable 'c' as const" ln="18" locFile="/build/../../../../../../../../stdinout.c" locStartln="18" sev="3" auth="username" locRef="4" rule="HICPP-7_1_2-a" lnHash="-695983806" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-695983806" unbViolId="2461be68-40f2-3b33-b645-0c777751cdd2" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee2a441b-99de-37ea-b278-5821ca92cba8" locEndPos="10" locType="sr" hash="844867668" locEndLn="18" goals="0," />
    <StdViol msg="Local variable 'c' declared but not used" ln="18" locFile="/build/../../../../../../../../stdinout.c" locStartln="18" sev="3" auth="username" locRef="4" rule="JSF-143_a" lnHash="-695983806" rule.header="Avoid unused local variables" tool="c++test" lineHash="-695983806" unbViolId="54901396-0dc2-3543-9cd9-9092c4ebe8f8" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04a113d7-13f9-3af9-b206-43fb326ef81a" locEndPos="10" locType="sr" hash="844867668" locEndLn="18" goals="0," />
    <StdViol msg="Local variable 'c' declared but not used" ln="18" locFile="/build/../../../../../../../../stdinout.c" locStartln="18" sev="4" auth="username" locRef="4" rule="OPT-02" lnHash="-695983806" rule.header="Avoid unused local variables" tool="c++test" lineHash="-695983806" unbViolId="dabb9e47-b6ac-345b-9a8f-5dac22dd2d8d" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af1c9366-9b42-3e08-accb-8956fcc59767" locEndPos="10" locType="sr" hash="844867668" locEndLn="18" goals="0," />
    <StdViol msg="Local variable 'c' declared but not used" ln="18" locFile="/build/../../../../../../../../stdinout.c" locStartln="18" sev="2" auth="username" locRef="4" rule="AUTOSAR-M0_1_3-a" lnHash="-695983806" rule.header="Avoid unused local variables" tool="c++test" lineHash="-695983806" unbViolId="0f86ee60-48e9-3668-b9b6-d58616eac8be" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="15e6bc39-34f9-37e9-8773-e6c892ba5d33" locEndPos="10" locType="sr" hash="844867668" locEndLn="18" goals="0," />
    <StdViol msg="Local variable 'c' declared but not used" ln="18" locFile="/build/../../../../../../../../stdinout.c" locStartln="18" sev="2" auth="username" locRef="4" rule="MISRA2008-0_1_3_a" lnHash="-695983806" rule.header="A project shall not contain unused variables" tool="c++test" lineHash="-695983806" unbViolId="a74cc9ff-23f4-344e-98d2-6b304a0ca0cc" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c453e7bd-162a-30bb-a85e-ba5811933bca" locEndPos="10" locType="sr" hash="844867668" locEndLn="18" goals="0," />
    <StdViol msg="Local variable 'c' declared in function 'get_input_digit' is unnecessary" ln="18" locFile="/build/../../../../../../../../stdinout.c" locStartln="18" sev="2" auth="username" locRef="4" rule="AUTOSAR-M0_1_3-b" lnHash="-695983806" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-695983806" unbViolId="5d1fccc1-bfad-3d37-b689-0baf21c97868" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8810594e-da8b-3ca4-952d-546142698228" locEndPos="10" locType="sr" hash="844867668" locEndLn="18" goals="0," />
    <StdViol msg="Local variable 'c' declared in function 'get_input_digit' is unnecessary" ln="18" locFile="/build/../../../../../../../../stdinout.c" locStartln="18" sev="2" auth="username" locRef="4" rule="MISRA2008-0_1_3_b" lnHash="-695983806" rule.header="A project shall not contain unused variables" tool="c++test" lineHash="-695983806" unbViolId="6b87b17b-827a-37c1-8e7b-4e25f4e943bf" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e68e112b-3ada-3831-b288-df4af25752f4" locEndPos="10" locType="sr" hash="844867668" locEndLn="18" goals="0," />
    <StdViol msg="Local variable 'c' declared in function 'get_input_digit' is unnecessary" ln="18" locFile="/build/../../../../../../../../stdinout.c" locStartln="18" sev="3" auth="username" locRef="4" rule="CERT_C-MSC13-a" lnHash="-695983806" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-695983806" unbViolId="5e5fad98-6fd1-3206-8f96-245e99b30efd" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17708ceb-7d1a-3615-9896-227de48ad0ab" locEndPos="10" locType="sr" hash="844867668" locEndLn="18" goals="0," />
    <StdViol msg="Local variable 'c' declared in function 'get_input_digit' is unnecessary" ln="18" locFile="/build/../../../../../../../../stdinout.c" locStartln="18" sev="4" auth="username" locRef="4" rule="OPT-06" lnHash="-695983806" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-695983806" unbViolId="5a28c217-1530-3e23-899c-6d78b0d0a703" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7423b67-b31e-3b13-ba35-4cbe9f3db2d0" locEndPos="10" locType="sr" hash="844867668" locEndLn="18" goals="0," />
    <StdViol msg="The 'c' variable should be commented" ln="18" locFile="/build/../../../../../../../../stdinout.c" locStartln="18" sev="3" auth="username" locRef="4" rule="JSF-132_a" lnHash="-695983806" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-695983806" unbViolId="30d8f98c-1ab6-323d-9a4f-e5080b956611" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5478d5df-129a-397b-a504-994973400769" locEndPos="10" locType="sr" hash="844867668" locEndLn="18" goals="0," />
    <StdViol msg="The 'c' variable should be commented" ln="18" locFile="/build/../../../../../../../../stdinout.c" locStartln="18" sev="3" auth="username" locRef="4" rule="COMMENT-05" lnHash="-695983806" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-695983806" unbViolId="5d8e3096-06ac-3ceb-ba89-4c8cd137f443" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b43d067-ce76-35cf-8abf-0632fe65615d" locEndPos="10" locType="sr" hash="844867668" locEndLn="18" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="19" locFile="/build/../../../../../../../../stdinout.c" locStartln="19" sev="4" auth="username" locRef="4" rule="MISRA2008-3_9_2" lnHash="1679375043" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1679375043" unbViolId="bf282eb9-de17-3e2e-9f8a-71f299f6de3e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="424a119d-35f0-3415-bb28-5a8077a3bb14" locEndPos="5" locType="sr" hash="844867668" locEndLn="19" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="19" locFile="/build/../../../../../../../../stdinout.c" locStartln="19" sev="3" auth="username" locRef="4" rule="MISRA-013" lnHash="1679375043" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1679375043" unbViolId="c4f1e7eb-8ff7-30c1-979a-f19252748c18" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48e67065-006b-35d2-abdd-e9b2040d9d24" locEndPos="5" locType="sr" hash="844867668" locEndLn="19" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="19" locFile="/build/../../../../../../../../stdinout.c" locStartln="19" sev="3" auth="username" locRef="4" rule="CODSTA-223" lnHash="1679375043" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1679375043" unbViolId="1ecae6e3-6e05-3106-9702-bee7b4b2cf99" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1cbeb6c2-6c65-35ee-92e3-43184c8bd028" locEndPos="5" locType="sr" hash="844867668" locEndLn="19" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="19" locFile="/build/../../../../../../../../stdinout.c" locStartln="19" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="1679375043" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1679375043" unbViolId="25b37f3a-d3e4-3e83-a02c-6ffb97d39c26" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7fa77c78-2959-3ab1-afdc-3e12c28cf59f" locEndPos="5" locType="sr" hash="844867668" locEndLn="19" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="19" locFile="/build/../../../../../../../../stdinout.c" locStartln="19" sev="3" auth="username" locRef="4" rule="HICPP-7_1_6-b" lnHash="1679375043" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="1679375043" unbViolId="3a2543e3-43bf-310a-b015-f831fba8bd68" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4690496-bb80-3a56-8a3d-50a139806b4c" locEndPos="5" locType="sr" hash="844867668" locEndLn="19" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="19" locFile="/build/../../../../../../../../stdinout.c" locStartln="19" sev="4" auth="username" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="1679375043" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1679375043" unbViolId="37813d28-d496-33d3-b32e-6b6777d8e687" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5281f799-cdf2-375b-bed4-7e4895441cf9" locEndPos="5" locType="sr" hash="844867668" locEndLn="19" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="19" locFile="/build/../../../../../../../../stdinout.c" locStartln="19" sev="3" auth="username" locRef="4" rule="MISRA2004-6_3_b" lnHash="1679375043" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1679375043" unbViolId="0ed93459-f868-3aee-bb3e-ecadabe5198c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0de89d14-14c9-3f2f-8d57-16b607a80276" locEndPos="5" locType="sr" hash="844867668" locEndLn="19" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="19" locFile="/build/../../../../../../../../stdinout.c" locStartln="19" sev="2" auth="username" locRef="4" rule="JSF-209_b" lnHash="1679375043" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1679375043" unbViolId="1402825d-6e40-316e-aa77-f010f173921e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8dea2d94-1344-3bf6-a768-6941fc57ab12" locEndPos="5" locType="sr" hash="844867668" locEndLn="19" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="19" locFile="/build/../../../../../../../../stdinout.c" locStartln="19" sev="4" auth="username" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="1679375043" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1679375043" unbViolId="200bf80d-e8f8-3e9b-9e19-ec32ef9fedee" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dbfecc7a-57d4-3615-a5d1-5d8cba98e8df" locEndPos="5" locType="sr" hash="844867668" locEndLn="19" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="19" locFile="/build/../../../../../../../../stdinout.c" locStartln="19" sev="3" auth="username" locRef="4" rule="HICPP-3_5_1-b" lnHash="1679375043" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1679375043" unbViolId="c8531fb6-e937-32b6-9219-b28a35750b9d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="53db34be-6bf1-3941-a4aa-ef66afb6dfcd" locEndPos="5" locType="sr" hash="844867668" locEndLn="19" goals="0," />
    <DupViol msg="Duplicated code: 'int i;'" ln="19" locFile="/build/../../../../../../../../stdinout.c" locStartln="19" sev="3" auth="username" locRef="4" rule="CDD-DUPC" lnHash="1679375043" rule.header="Avoid code duplication" tool="c++test" lineHash="1679375043" unbViolId="52d7575c-e323-3c40-ad73-9b56c407a2b7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="222d3167-446e-3960-b520-840530eff238" locEndPos="10" locType="sr" urgent="true" hash="844867668" locEndLn="19" goals="1,">
      <ElDescList>
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="19" srcRngStartPos="4" srcRngEndPos="10" srcRngStartln="19" srcRngEndLn="19" desc="[Line 19] Duplicated code in file 'stdinout.c'" rngLn="19" />
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="28" srcRngStartPos="4" srcRngEndPos="10" srcRngStartln="28" srcRngEndLn="28" desc="[Line 28] Duplicated code in file 'timer.c'" rngLn="28" />
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="111" srcRngStartPos="4" srcRngEndPos="10" srcRngStartln="111" srcRngEndLn="111" desc="[Line 111] Duplicated code in file 'timer.c'" rngLn="111" />
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="145" srcRngStartPos="4" srcRngEndPos="10" srcRngStartln="145" srcRngEndLn="145" desc="[Line 145] Duplicated code in file 'timer.c'" rngLn="145" />
      </ElDescList>
    </DupViol><StdViol msg="The variable &quot;i&quot; was not initialized when declared" ln="19" locFile="/build/../../../../../../../../stdinout.c" locStartln="19" sev="2" auth="username" locRef="4" rule="JSF-142_b" lnHash="1679375043" rule.header="All variables shall be initialized before use" tool="c++test" lineHash="1679375043" unbViolId="fc6e876d-65f6-3a6b-a8f1-ca21dbd0cef9" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f08edecd-10b6-35d4-a8c0-c50eef5e73f6" locEndPos="9" locType="sr" hash="844867668" locEndLn="19" goals="0," />
    <StdViol msg="The variable &quot;i&quot; was not initialized when declared" ln="19" locFile="/build/../../../../../../../../stdinout.c" locStartln="19" sev="3" auth="username" locRef="4" rule="INIT-03" lnHash="1679375043" rule.header="Initialize all variables" tool="c++test" lineHash="1679375043" unbViolId="c17876f7-d6b3-3357-9301-3e9179940235" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="537ca7b5-3cb9-3101-baa6-14b5bc5847c2" locEndPos="9" locType="sr" hash="844867668" locEndLn="19" goals="0," />
    <StdViol msg="'i' shall be declared as unsigned int or signed int" ln="19" locFile="/build/../../../../../../../../stdinout.c" locStartln="19" sev="3" auth="username" locRef="4" rule="PORT-13" lnHash="1679375043" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="1679375043" unbViolId="c9eefb4b-1451-398a-86d8-e376fceeda89" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba1cf98d-41a4-3939-8e10-18c2aab24f49" locEndPos="9" locType="sr" hash="844867668" locEndLn="19" goals="0," />
    <StdViol msg="The 'i' variable should be commented" ln="19" locFile="/build/../../../../../../../../stdinout.c" locStartln="19" sev="3" auth="username" locRef="4" rule="JSF-132_a" lnHash="1679375043" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="1679375043" unbViolId="e255e5c4-43f0-39c1-85bd-3760ae33ac59" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e298642-02d1-34bf-8e8a-00f3a09ef3fa" locEndPos="9" locType="sr" hash="844867668" locEndLn="19" goals="0," />
    <StdViol msg="The 'i' variable should be commented" ln="19" locFile="/build/../../../../../../../../stdinout.c" locStartln="19" sev="3" auth="username" locRef="4" rule="COMMENT-05" lnHash="1679375043" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="1679375043" unbViolId="6d0c9422-9e3c-35d9-8f98-992f094638d4" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70f2f549-10b7-3604-aa90-318cac8a2aa0" locEndPos="9" locType="sr" hash="844867668" locEndLn="19" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="20" locFile="/build/../../../../../../../../stdinout.c" locStartln="20" sev="4" auth="username" locRef="4" rule="MISRA2008-3_9_2" lnHash="-2004706563" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-2004706563" unbViolId="7bfcadf4-fcc4-3f0e-99d7-cbfc6f0d1869" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="154e860e-f12c-3a0c-ac2c-af097414def2" locEndPos="5" locType="sr" hash="844867668" locEndLn="20" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="20" locFile="/build/../../../../../../../../stdinout.c" locStartln="20" sev="3" auth="username" locRef="4" rule="MISRA-013" lnHash="-2004706563" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-2004706563" unbViolId="1ee65200-771b-37a1-9f90-2dbed84951dc" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64f11a0f-ca96-343b-ba85-e15e56faf019" locEndPos="5" locType="sr" hash="844867668" locEndLn="20" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="20" locFile="/build/../../../../../../../../stdinout.c" locStartln="20" sev="3" auth="username" locRef="4" rule="CODSTA-223" lnHash="-2004706563" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-2004706563" unbViolId="970d9fac-b249-3358-af3b-c7f52cc22bba" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aaa41c3c-ca21-39e0-93e1-d9222c2567b7" locEndPos="5" locType="sr" hash="844867668" locEndLn="20" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="20" locFile="/build/../../../../../../../../stdinout.c" locStartln="20" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="-2004706563" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-2004706563" unbViolId="6724dd6e-a71d-3c81-bc7a-d5231c4babb6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d37707f8-21dd-3aa9-a3b5-7356389f971a" locEndPos="5" locType="sr" hash="844867668" locEndLn="20" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: buf" ln="20" locFile="/build/../../../../../../../../stdinout.c" locStartln="20" sev="3" auth="username" locRef="4" rule="CODSTA-94" lnHash="-2004706563" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-2004706563" unbViolId="78275752-c5c7-3eaf-8fa7-f7240659fae1" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62886bd0-f5ad-3185-9b1a-77e8fef935bc" locEndPos="10" locType="sr" hash="844867668" locEndLn="20" goals="0," />
    <StdViol msg="The 'buf' variable should be commented" ln="20" locFile="/build/../../../../../../../../stdinout.c" locStartln="20" sev="3" auth="username" locRef="4" rule="JSF-132_a" lnHash="-2004706563" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-2004706563" unbViolId="d68cd55f-af50-370d-9ae0-05ec83f19c85" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1bb1124d-197e-3cce-ad03-cedcada53730" locEndPos="10" locType="sr" hash="844867668" locEndLn="20" goals="0," />
    <StdViol msg="The 'buf' variable should be commented" ln="20" locFile="/build/../../../../../../../../stdinout.c" locStartln="20" sev="3" auth="username" locRef="4" rule="COMMENT-05" lnHash="-2004706563" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-2004706563" unbViolId="721a4345-f39f-3986-8ac1-18fa8a3040d1" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d260b3de-ea10-350b-99b3-d310b7f6d666" locEndPos="10" locType="sr" hash="844867668" locEndLn="20" goals="0," />
    <StdViol msg="Naming convention not followed: buf" ln="20" locFile="/build/../../../../../../../../stdinout.c" locStartln="20" sev="3" auth="username" locRef="4" rule="NAMING-25" lnHash="-2004706563" rule.header="Begin all terminated characters string variables with 'sz'" tool="c++test" lineHash="-2004706563" unbViolId="426eb3c4-6235-389a-880e-f69cb84b6361" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8e7b29f2-3d80-39a3-bc37-379e4f69a823" locEndPos="10" locType="sr" hash="844867668" locEndLn="20" goals="0," />
    <StdViol msg="The 'buf' identifier should have the 'rg' prefix" ln="20" locFile="/build/../../../../../../../../stdinout.c" locStartln="20" sev="3" auth="username" locRef="4" rule="NAMING-HN-01" lnHash="-2004706563" rule.header="Hungarian notation for array variables and parameters" tool="c++test" lineHash="-2004706563" unbViolId="a546157d-2599-3705-9ab0-5ecba5886b68" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f0f93aa-56f6-36a5-8346-0de4d6e11ee8" locEndPos="10" locType="sr" hash="844867668" locEndLn="20" goals="0," />
    <StdViol msg="The 'buf' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="20" locFile="/build/../../../../../../../../stdinout.c" locStartln="20" sev="3" auth="username" locRef="4" rule="NAMING-HN-05" lnHash="-2004706563" rule.header="Hungarian notation for byte pointer, array, or reference types" tool="c++test" lineHash="-2004706563" unbViolId="81eef608-e3ce-3c69-a220-a613646245f0" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09e54d8c-dfc1-3b32-8687-8fa3c5049150" locEndPos="10" locType="sr" hash="844867668" locEndLn="20" goals="0," />
    <StdViol msg="The 'buf' identifier should have the 'sz' prefix followed by a capital letter or an underscore" ln="20" locFile="/build/../../../../../../../../stdinout.c" locStartln="20" sev="3" auth="username" locRef="4" rule="NAMING-HN-07" lnHash="-2004706563" rule.header="Hungarian notation for array of char types" tool="c++test" lineHash="-2004706563" unbViolId="87bd4bdf-ac7f-39e4-8d19-cc006afc2a6e" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17239049-cb4a-32b3-bd91-461a28770949" locEndPos="10" locType="sr" hash="844867668" locEndLn="20" goals="0," />
    <StdViol msg="The 'buf' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="20" locFile="/build/../../../../../../../../stdinout.c" locStartln="20" sev="3" auth="username" locRef="4" rule="NAMING-HN-09" lnHash="-2004706563" rule.header="Hungarian notation for char pointer, array, or reference types" tool="c++test" lineHash="-2004706563" unbViolId="a22e2c6d-6c9b-3feb-810b-7a083c0b90ec" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8484939-65de-3f06-a45f-92ef29513e8d" locEndPos="10" locType="sr" hash="844867668" locEndLn="20" goals="0," />
    <StdViol msg="#ifdef pre-processor directive should not be used" ln="22" locFile="/build/../../../../../../../../stdinout.c" locStartln="22" sev="3" auth="username" locRef="4" rule="PREPROC-26" lnHash="341559746" rule.header="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" tool="c++test" lineHash="341559746" unbViolId="a4b90cb0-5e5a-3a45-96c4-3547f852ebd0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d2ac65c-aba9-3fb1-8b27-bd84225b2126" locEndPos="1" locType="sr" hash="844867668" locEndLn="22" goals="0," />
    <StdViol msg="#ifdef pre-processor directive should not be used" ln="22" locFile="/build/../../../../../../../../stdinout.c" locStartln="22" sev="2" auth="username" locRef="4" rule="AUTOSAR-A16_0_1-a" lnHash="341559746" rule.header="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" tool="c++test" lineHash="341559746" unbViolId="4f1ad16c-a479-3d89-996b-46a7fcb8b19b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b1003007-7e74-3e8a-b7a5-1b5990062f5b" locEndPos="1" locType="sr" hash="844867668" locEndLn="22" goals="0," />
    <StdViol msg="The #ifdef preprocessor directive is used" ln="22" locFile="/build/../../../../../../../../stdinout.c" locStartln="22" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_1_c" lnHash="341559746" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="341559746" unbViolId="5bcb263d-71df-3ecf-b7ea-b457d7f5101b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a4ed1c8-f765-37b0-ad52-a951cb04e7e9" locEndPos="1" locType="sr" hash="844867668" locEndLn="22" goals="0," />
    <StdViol msg="The #ifdef preprocessor directive is used" ln="22" locFile="/build/../../../../../../../../stdinout.c" locStartln="22" sev="3" auth="username" locRef="4" rule="HICPP-16_1_1-c" lnHash="341559746" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="341559746" unbViolId="306c1660-de95-3620-8723-61687229d2b6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bcee24db-95fa-3ffd-9867-02f54e78a2e3" locEndPos="1" locType="sr" hash="844867668" locEndLn="22" goals="0," />
    <StdViol msg="The #ifdef preprocessor directive is used" ln="22" locFile="/build/../../../../../../../../stdinout.c" locStartln="22" sev="2" auth="username" locRef="4" rule="JSF-026" lnHash="341559746" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="341559746" unbViolId="92b33332-8e34-3d21-a611-d146851f654d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3df73c5-4419-38bd-aa89-1af628010d4b" locEndPos="1" locType="sr" hash="844867668" locEndLn="22" goals="0," />
    <StdViol msg="The #ifdef preprocessor directive is used" ln="22" locFile="/build/../../../../../../../../stdinout.c" locStartln="22" sev="3" auth="username" locRef="4" rule="PREPROC-11" lnHash="341559746" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="341559746" unbViolId="e2cafe60-0e3a-33ae-a479-177e61e1ee7b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf6cba00-7bbc-3a2d-862a-986a318271a8" locEndPos="1" locType="sr" hash="844867668" locEndLn="22" goals="0," />
    <StdViol msg="Use // comments only" ln="23" locFile="/build/../../../../../../../../stdinout.c" locStartln="23" sev="3" auth="username" locRef="4" rule="HICPP-2_3_1-a" lnHash="-619691995" rule.header="Prefer C++ style comment" tool="c++test" lineHash="-619691995" unbViolId="9405eba7-890f-3814-957c-2b0f3ed57e09" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b0247bc-fc6a-3da7-a1bf-0a337cfcd758" locEndPos="5" locType="sr" hash="844867668" locEndLn="23" goals="0," />
    <StdViol msg="Use // comments only" ln="23" locFile="/build/../../../../../../../../stdinout.c" locStartln="23" sev="2" auth="username" locRef="4" rule="JSF-126" lnHash="-619691995" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="-619691995" unbViolId="e63c7880-a4a7-38f9-a76f-74acf8323896" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5bad055b-1e64-3355-bc90-e1e5a4bcaff5" locEndPos="5" locType="sr" hash="844867668" locEndLn="23" goals="0," />
    <StdViol msg="Use // comments only" ln="23" locFile="/build/../../../../../../../../stdinout.c" locStartln="23" sev="3" auth="username" locRef="4" rule="COMMENT-01" lnHash="-619691995" rule.header="Prefer C++ style comment" tool="c++test" lineHash="-619691995" unbViolId="74922641-abdd-3380-ba15-1b8620a1af38" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06463b4f-0005-3f8b-8f28-faee2bd8a749" locEndPos="5" locType="sr" hash="844867668" locEndLn="23" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="24" locFile="/build/../../../../../../../../stdinout.c" locStartln="24" sev="3" auth="username" locRef="4" rule="FORMAT-02" lnHash="-1741667982" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-1741667982" unbViolId="80f20ea8-2794-37e7-933c-17781e1d25ad" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f4e5693b-5b43-37f6-b9f8-b4df0e038055" locEndPos="1" locType="sr" hash="844867668" locEndLn="24" goals="0," />
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="24" locFile="/build/../../../../../../../../stdinout.c" locStartln="24" sev="3" auth="username" locRef="4" rule="FORMAT-34" lnHash="-1741667982" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="-1741667982" unbViolId="1de6928d-b048-30ea-9a00-2e7d4a8525b2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db14f22c-e79f-3282-ac1d-136cabcdd459" locEndPos="1" locType="sr" hash="844867668" locEndLn="24" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="26" locFile="/build/../../../../../../../../stdinout.c" locStartln="26" sev="3" auth="username" locRef="4" rule="FORMAT-02" lnHash="1248680991" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="1248680991" unbViolId="0923d085-5b7e-3d78-a653-ec4da346e56f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf8bc18b-9b56-3437-9ee5-c05a9c28a9d2" locEndPos="1" locType="sr" hash="844867668" locEndLn="26" goals="0," />
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="26" locFile="/build/../../../../../../../../stdinout.c" locStartln="26" sev="3" auth="username" locRef="4" rule="FORMAT-34" lnHash="1248680991" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="1248680991" unbViolId="09ceefb7-ddfd-3a50-be7e-f4eed737be5f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27903210-a6cf-38a3-963a-cadb4b5e1ee5" locEndPos="1" locType="sr" hash="844867668" locEndLn="26" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="28" locFile="/build/../../../../../../../../stdinout.c" locStartln="28" sev="3" auth="username" locRef="4" rule="FORMAT-02" lnHash="124835664" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="124835664" unbViolId="aba42756-46db-3065-8958-245bc3e4935f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0466888c-89fe-3695-9874-24d92d5532d4" locEndPos="1" locType="sr" hash="844867668" locEndLn="28" goals="0," />
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="28" locFile="/build/../../../../../../../../stdinout.c" locStartln="28" sev="3" auth="username" locRef="4" rule="FORMAT-34" lnHash="124835664" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="124835664" unbViolId="fa7ea8e6-d1f4-305d-8094-83c47d5d8dee" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dce64aaf-fb01-35fc-89a3-0f8a12bb383b" locEndPos="1" locType="sr" hash="844867668" locEndLn="28" goals="0," />
    <StdViol msg="Put the closing brace '}' on its own line" ln="28" locFile="/build/../../../../../../../../stdinout.c" locStartln="28" sev="3" auth="username" locRef="4" rule="FORMAT-03" lnHash="124835664" rule.header="Place a closing brace '}' on its own line" tool="c++test" lineHash="124835664" unbViolId="ccd56568-2581-3bea-897c-4e50e8c571c9" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c965975-0706-394a-bf67-b143951f129d" locEndPos="9" locType="sr" hash="844867668" locEndLn="28" goals="0," />
    <StdViol msg="#else pre-processor directive should not be used" ln="32" locFile="/build/../../../../../../../../stdinout.c" locStartln="32" sev="3" auth="username" locRef="4" rule="PREPROC-26" lnHash="-575068547" rule.header="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" tool="c++test" lineHash="-575068547" unbViolId="6f621a45-6e5b-3d79-b2ff-04746a688f99" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8957e780-006c-3a5d-a832-097259ce3442" locEndPos="1" locType="sr" hash="844867668" locEndLn="32" goals="0," />
    <StdViol msg="#else pre-processor directive should not be used" ln="32" locFile="/build/../../../../../../../../stdinout.c" locStartln="32" sev="2" auth="username" locRef="4" rule="AUTOSAR-A16_0_1-a" lnHash="-575068547" rule.header="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" tool="c++test" lineHash="-575068547" unbViolId="55c6a5ae-a579-3fe6-8c6d-2bc6b24c6cbf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67c6342b-0778-37fa-b295-78b50d214006" locEndPos="1" locType="sr" hash="844867668" locEndLn="32" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="32" locFile="/build/../../../../../../../../stdinout.c" locStartln="32" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_1_c" lnHash="-575068547" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="-575068547" unbViolId="6e4b0c34-0f84-3f15-a54f-ae49b79d93d7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0d41ff4-a412-3a18-a770-031a3ae9abdc" locEndPos="1" locType="sr" hash="844867668" locEndLn="32" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="32" locFile="/build/../../../../../../../../stdinout.c" locStartln="32" sev="3" auth="username" locRef="4" rule="HICPP-16_1_1-c" lnHash="-575068547" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="-575068547" unbViolId="0328520c-e2c6-300f-8df5-ec2e1933257a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9dda23d-4add-376f-9781-aa55e746debf" locEndPos="1" locType="sr" hash="844867668" locEndLn="32" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="32" locFile="/build/../../../../../../../../stdinout.c" locStartln="32" sev="2" auth="username" locRef="4" rule="JSF-026" lnHash="-575068547" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="-575068547" unbViolId="02a2d94a-5043-390b-83ee-d509d555c323" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7bc0eb41-ddc1-3a6c-9557-f2a532859ecb" locEndPos="1" locType="sr" hash="844867668" locEndLn="32" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="32" locFile="/build/../../../../../../../../stdinout.c" locStartln="32" sev="3" auth="username" locRef="4" rule="PREPROC-11" lnHash="-575068547" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="-575068547" unbViolId="134a07e3-0d59-3656-af9c-0251eb037f43" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba918ddb-ee22-39e6-938b-256d4a33254b" locEndPos="1" locType="sr" hash="844867668" locEndLn="32" goals="0," />
    <StdViol msg="Use // comments only" ln="32" locFile="/build/../../../../../../../../stdinout.c" locStartln="32" sev="3" auth="username" locRef="4" rule="HICPP-2_3_1-a" lnHash="-575068547" rule.header="Prefer C++ style comment" tool="c++test" lineHash="-575068547" unbViolId="9f83e3e9-2278-3a04-a4fc-153fa2da57ce" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12d1edbb-285e-3abb-9869-331ef4b299d7" locEndPos="7" locType="sr" hash="844867668" locEndLn="32" goals="0," />
    <StdViol msg="Use // comments only" ln="32" locFile="/build/../../../../../../../../stdinout.c" locStartln="32" sev="2" auth="username" locRef="4" rule="JSF-126" lnHash="-575068547" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="-575068547" unbViolId="d983631d-6e58-375b-8d6b-162daf06c5bb" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51c27994-200f-3d7e-a53c-05f369e9e147" locEndPos="7" locType="sr" hash="844867668" locEndLn="32" goals="0," />
    <StdViol msg="Use // comments only" ln="32" locFile="/build/../../../../../../../../stdinout.c" locStartln="32" sev="3" auth="username" locRef="4" rule="COMMENT-01" lnHash="-575068547" rule.header="Prefer C++ style comment" tool="c++test" lineHash="-575068547" unbViolId="35e10636-f7e6-3659-97b3-dd3610c0cc35" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b97f335e-7752-3464-b751-c66dc9f5403d" locEndPos="7" locType="sr" hash="844867668" locEndLn="32" goals="0," />
    <StdViol msg="Use // comments only" ln="34" locFile="/build/../../../../../../../../stdinout.c" locStartln="34" sev="3" auth="username" locRef="4" rule="HICPP-2_3_1-a" lnHash="-477662294" rule.header="Prefer C++ style comment" tool="c++test" lineHash="-477662294" unbViolId="d7c1ef12-b604-333f-b37c-de892e38ae1a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e40cb3e-3e26-3514-9216-bbd9ac50dc43" locEndPos="5" locType="sr" hash="844867668" locEndLn="34" goals="0," />
    <StdViol msg="Use // comments only" ln="34" locFile="/build/../../../../../../../../stdinout.c" locStartln="34" sev="2" auth="username" locRef="4" rule="JSF-126" lnHash="-477662294" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="-477662294" unbViolId="e72d9dd3-38ad-36f9-9673-f83ca52f5922" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a83dd8e-158f-3529-9bcc-50afc8e3387b" locEndPos="5" locType="sr" hash="844867668" locEndLn="34" goals="0," />
    <StdViol msg="Use // comments only" ln="34" locFile="/build/../../../../../../../../stdinout.c" locStartln="34" sev="3" auth="username" locRef="4" rule="COMMENT-01" lnHash="-477662294" rule.header="Prefer C++ style comment" tool="c++test" lineHash="-477662294" unbViolId="adb0d61f-8b3c-353b-ad02-c3a531d1f93c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6ab747f-6ff7-370d-b13e-76fabf3bc607" locEndPos="5" locType="sr" hash="844867668" locEndLn="34" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/build/../../../../../../../../stdinout.c" locStartln="35" sev="4" auth="username" locRef="4" rule="MISRA2008-3_9_2" lnHash="-1448247265" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1448247265" unbViolId="6385a726-c273-3ecd-81b4-5d75cdcda0d5" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e7e4121a-2fe6-32c1-aa77-7df997ee98b3" locEndPos="12" locType="sr" hash="844867668" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/build/../../../../../../../../stdinout.c" locStartln="35" sev="3" auth="username" locRef="4" rule="MISRA-013" lnHash="-1448247265" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1448247265" unbViolId="dee97e30-1514-385a-bd9c-7b336a1f3644" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5935dc5c-8340-3cf6-8629-500fec640129" locEndPos="12" locType="sr" hash="844867668" locEndLn="35" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="35" locFile="/build/../../../../../../../../stdinout.c" locStartln="35" sev="3" auth="username" locRef="4" rule="CODSTA-223" lnHash="-1448247265" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1448247265" unbViolId="68ba36b7-e048-3e10-86d5-27f093ae552b" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a2169e92-00e4-38ea-bed6-e28fd4189d9a" locEndPos="12" locType="sr" hash="844867668" locEndLn="35" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="35" locFile="/build/../../../../../../../../stdinout.c" locStartln="35" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="-1448247265" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1448247265" unbViolId="7487e187-96a1-3d5d-b9e3-ca6f4a5d0268" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9bbadf3-118c-3a22-98ee-e08e4e4edbac" locEndPos="12" locType="sr" hash="844867668" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/build/../../../../../../../../stdinout.c" locStartln="35" sev="3" auth="username" locRef="4" rule="HICPP-7_1_6-b" lnHash="-1448247265" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-1448247265" unbViolId="4138b5c1-153d-3604-aa4c-2fab572276ce" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a5b4bc4-0c4a-38fe-9c87-72f69a2da8be" locEndPos="12" locType="sr" hash="844867668" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/build/../../../../../../../../stdinout.c" locStartln="35" sev="4" auth="username" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="-1448247265" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1448247265" unbViolId="17458a07-38dd-332e-849c-3b05de0961be" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90ff03cd-d33c-38a7-8bcc-15ceeebefc80" locEndPos="12" locType="sr" hash="844867668" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/build/../../../../../../../../stdinout.c" locStartln="35" sev="3" auth="username" locRef="4" rule="MISRA2004-6_3_b" lnHash="-1448247265" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1448247265" unbViolId="3507467f-5565-385b-b946-03ec1bad8b62" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="35acb1f8-a216-3524-b656-9d14b5b2c650" locEndPos="12" locType="sr" hash="844867668" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/build/../../../../../../../../stdinout.c" locStartln="35" sev="2" auth="username" locRef="4" rule="JSF-209_b" lnHash="-1448247265" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-1448247265" unbViolId="91256454-e42d-3a53-8176-8e554329c48b" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a483cf4-97b3-3928-9460-06e5aec1e339" locEndPos="12" locType="sr" hash="844867668" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/build/../../../../../../../../stdinout.c" locStartln="35" sev="4" auth="username" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="-1448247265" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1448247265" unbViolId="d5e60bdd-2a6e-31cb-8814-48a931d7b5f1" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4c2af0c-c3eb-3de0-86ec-9d7d14c66b8a" locEndPos="12" locType="sr" hash="844867668" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/build/../../../../../../../../stdinout.c" locStartln="35" sev="3" auth="username" locRef="4" rule="HICPP-3_5_1-b" lnHash="-1448247265" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1448247265" unbViolId="78db4f17-8d7b-3ef6-b17f-40fb6f9ba904" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e7c2716c-b107-32a8-b276-81b2ca482930" locEndPos="12" locType="sr" hash="844867668" locEndLn="35" goals="0," />
    <StdViol msg="'index' shall be declared as unsigned int or signed int" ln="35" locFile="/build/../../../../../../../../stdinout.c" locStartln="35" sev="3" auth="username" locRef="4" rule="PORT-13" lnHash="-1448247265" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-1448247265" unbViolId="1aa98873-6244-3e3f-9c12-ee3466162517" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="100fe107-8738-32cc-987e-0e568d0d75ee" locEndPos="16" locType="sr" hash="844867668" locEndLn="35" goals="0," />
    <StdViol msg="Local variable 'index' is declared with the 'static' keyword" ln="35" locFile="/build/../../../../../../../../stdinout.c" locStartln="35" sev="5" auth="username" locRef="4" rule="CODSTA-04" lnHash="-1448247265" rule.header="Do not declare local variables with the 'static' keyword" tool="c++test" lineHash="-1448247265" unbViolId="509e85d9-e0b3-30d6-aab5-c79986a91d0d" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce782226-6b60-38b9-b4e2-e9ae3c659234" locEndPos="16" locType="sr" hash="844867668" locEndLn="35" goals="0," />
    <StdViol msg="Use of variable &quot;index&quot; with static storage duration is not allowed" ln="35" locFile="/build/../../../../../../../../stdinout.c" locStartln="35" sev="3" auth="username" locRef="4" rule="HICPP-3_3_1-a" lnHash="-1448247265" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="-1448247265" unbViolId="4b30b290-9d12-3836-bfe4-47b7cdf9d161" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ca6a1b8-b551-3f2a-8ebb-0d869d622c42" locEndPos="16" locType="sr" hash="844867668" locEndLn="35" goals="0," />
    <StdViol msg="The 'index' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="35" locFile="/build/../../../../../../../../stdinout.c" locStartln="35" sev="3" auth="username" locRef="4" rule="NAMING-HN-22" lnHash="-1448247265" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-1448247265" unbViolId="0b110d86-ae8c-3c9c-8c7a-96e3ebc0174d" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5502db4e-7668-36d9-ae32-f6570de01afa" locEndPos="16" locType="sr" hash="844867668" locEndLn="35" goals="0," />
    <StdViol msg="The 'index' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="35" locFile="/build/../../../../../../../../stdinout.c" locStartln="35" sev="3" auth="username" locRef="4" rule="NAMING-HN-30" lnHash="-1448247265" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-1448247265" unbViolId="ac070980-ae90-3c71-be35-aeef8f0d1dc8" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c19552b4-e279-3d5b-a9bd-e1a4c07c20fe" locEndPos="16" locType="sr" hash="844867668" locEndLn="35" goals="0," />
    <StdViol msg="The 'index' identifier should have the 's' prefix" ln="35" locFile="/build/../../../../../../../../stdinout.c" locStartln="35" sev="3" auth="username" locRef="4" rule="NAMING-HN-38" lnHash="-1448247265" rule.header="Hungarian notation for static variables" tool="c++test" lineHash="-1448247265" unbViolId="ca14fc2e-24eb-3e48-9472-a049f94559dd" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55219a90-89eb-396b-a02f-ed31d081c7ef" locEndPos="16" locType="sr" hash="844867668" locEndLn="35" goals="0," />
    <StdViol msg="The 'index' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="35" locFile="/build/../../../../../../../../stdinout.c" locStartln="35" sev="3" auth="username" locRef="4" rule="NAMING-HN-43" lnHash="-1448247265" rule.header="Hungarian notation for word types" tool="c++test" lineHash="-1448247265" unbViolId="2c2ec98b-a1c1-3d48-80cd-c735ea697cd5" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b1e7c639-267a-3b32-bf28-97e9f41f024f" locEndPos="16" locType="sr" hash="844867668" locEndLn="35" goals="0," />
    <StdViol msg="Use // comments only" ln="37" locFile="/build/../../../../../../../../stdinout.c" locStartln="37" sev="3" auth="username" locRef="4" rule="HICPP-2_3_1-a" lnHash="-908591879" rule.header="Prefer C++ style comment" tool="c++test" lineHash="-908591879" unbViolId="dc6ab414-6b29-39c4-997f-3ecd9e36050f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fadc11b4-cff4-3cca-9228-e20c9cf6250b" locEndPos="5" locType="sr" hash="844867668" locEndLn="37" goals="0," />
    <StdViol msg="Use // comments only" ln="37" locFile="/build/../../../../../../../../stdinout.c" locStartln="37" sev="2" auth="username" locRef="4" rule="JSF-126" lnHash="-908591879" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="-908591879" unbViolId="7d110bc7-dfe2-3648-9c7e-80a2cc8d3416" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad400209-dcad-367f-9835-7f66d192ab84" locEndPos="5" locType="sr" hash="844867668" locEndLn="37" goals="0," />
    <StdViol msg="Use // comments only" ln="37" locFile="/build/../../../../../../../../stdinout.c" locStartln="37" sev="3" auth="username" locRef="4" rule="COMMENT-01" lnHash="-908591879" rule.header="Prefer C++ style comment" tool="c++test" lineHash="-908591879" unbViolId="fd92814e-e4b5-3e45-95e5-e10a789b1220" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c30a1a14-8fd7-359a-9146-f1d3d7074c12" locEndPos="5" locType="sr" hash="844867668" locEndLn="37" goals="0," />
    <StdViol msg="The operand is not placed directly after prefix '++' operator" ln="38" locFile="/build/../../../../../../../../stdinout.c" locStartln="38" sev="3" auth="username" locRef="4" rule="FORMAT-22" lnHash="-1663270807" rule.header="There should be no space between a increment/decrement operator (++/--) and its operand" tool="c++test" lineHash="-1663270807" unbViolId="24d3c80c-af26-3217-bc22-76c004446c71" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="429a7bc5-df6a-3e4e-b300-a68309772dc6" locEndPos="5" locType="sr" hash="844867668" locEndLn="38" goals="0," />
    <StdViol msg="The operand is not placed directly after prefix '++' operator" ln="38" locFile="/build/../../../../../../../../stdinout.c" locStartln="38" sev="3" auth="username" locRef="4" rule="JSF-063_d" lnHash="-1663270807" rule.header="There will be no space between a increment/decrement operator (++/--) and its operand" tool="c++test" lineHash="-1663270807" unbViolId="2fefcf5d-2995-3b47-9dd7-9a84b5bab71d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ea280b5f-cfe7-38bd-8441-60ae19fff95e" locEndPos="5" locType="sr" hash="844867668" locEndLn="38" goals="0," />
    <StdViol msg="Hard coded value: 10" ln="39" locFile="/build/../../../../../../../../stdinout.c" locStartln="39" sev="3" auth="username" locRef="4" rule="CODSTA-29" lnHash="410470818" rule.header="&quot;#define&quot; or enum constants should be used instead of hard coded values whenever possible" tool="c++test" lineHash="410470818" unbViolId="418fbfab-68fb-31f5-850b-d0995ec97c8d" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a05992c2-4380-3a77-94f3-f823adc04ecb" locEndPos="14" locType="sr" hash="844867668" locEndLn="39" goals="0," />
    <StdViol msg="Hard coded value: 10" ln="39" locFile="/build/../../../../../../../../stdinout.c" locStartln="39" sev="3" auth="username" locRef="4" rule="CERT_C-DCL06-a" lnHash="410470818" rule.header="&quot;#define&quot; or enum constants should be used instead of hard coded values whenever possible" tool="c++test" lineHash="410470818" unbViolId="42cffd99-1164-3c41-851f-2b083366d2ac" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97a6f631-162e-305b-afad-97f86c20e981" locEndPos="14" locType="sr" hash="844867668" locEndLn="39" goals="0," />
    <StdViol msg="The type of cast shall be declared as 'unsigned char' or 'signed char'" ln="40" locFile="/build/../../../../../../../../stdinout.c" locStartln="40" sev="3" auth="username" locRef="4" rule="MISRA-014" lnHash="-1384567970" rule.header="Explicitly declare 'char' type as signed or unsigned" tool="c++test" lineHash="-1384567970" unbViolId="3759a59b-9555-35c2-9e6d-42c34342483c" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a4598715-979e-318d-9d08-c8f63040bb93" locEndPos="14" locType="sr" hash="844867668" locEndLn="40" goals="0," />
    <StdViol msg="Cast to primitive type should not be used if possible" ln="40" locFile="/build/../../../../../../../../stdinout.c" locStartln="40" sev="3" auth="username" locRef="4" rule="HICPP-4_2_2-b" lnHash="-1384567970" rule.header="Avoid explicit type conversions (casts)" tool="c++test" lineHash="-1384567970" unbViolId="421150f3-f01b-33a5-bce1-ee665db72d1d" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bddcbddc-3730-3c82-a11d-af1d09454418" locEndPos="14" locType="sr" hash="844867668" locEndLn="40" goals="0," />
    <StdViol msg="Cast to primitive type should not be used if possible" ln="40" locFile="/build/../../../../../../../../stdinout.c" locStartln="40" sev="4" auth="username" locRef="4" rule="JSF-183" lnHash="-1384567970" rule.header="Every possible measure should be taken to avoid type casting" tool="c++test" lineHash="-1384567970" unbViolId="628c0bf9-ece7-35a2-b3b9-41594a44690d" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff626686-9cd7-3c0e-9247-2fde6ab78d46" locEndPos="14" locType="sr" hash="844867668" locEndLn="40" goals="0," />
    <StdViol msg="Cast to primitive type should not be used if possible" ln="40" locFile="/build/../../../../../../../../stdinout.c" locStartln="40" sev="3" auth="username" locRef="4" rule="CODSTA-31" lnHash="-1384567970" rule.header="Avoid explicit type conversions (casts)" tool="c++test" lineHash="-1384567970" unbViolId="ee3e0731-ee2a-333a-a376-ac31a3efac5a" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0a73084-58cf-3b6f-b64f-86190d7b9323" locEndPos="14" locType="sr" hash="844867668" locEndLn="40" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="40" locFile="/build/../../../../../../../../stdinout.c" locStartln="40" sev="4" auth="username" locRef="4" rule="MISRA2008-3_9_2" lnHash="-1384567970" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1384567970" unbViolId="7cfb6ccc-2484-3380-b8b6-605a03d3f27c" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7445fa5-433b-3eae-93c0-385889e5df37" locEndPos="15" locType="sr" hash="844867668" locEndLn="40" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="40" locFile="/build/../../../../../../../../stdinout.c" locStartln="40" sev="3" auth="username" locRef="4" rule="MISRA-013" lnHash="-1384567970" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1384567970" unbViolId="8116c45d-eb5a-304e-8a4b-416c87bd4544" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="536ec7e4-1f96-3802-94b8-ea0c58b6e29c" locEndPos="15" locType="sr" hash="844867668" locEndLn="40" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="40" locFile="/build/../../../../../../../../stdinout.c" locStartln="40" sev="3" auth="username" locRef="4" rule="CODSTA-223" lnHash="-1384567970" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1384567970" unbViolId="033e0133-ffad-3b74-b940-9c7887178096" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b263a30-55da-3778-8c52-009d2c75f692" locEndPos="15" locType="sr" hash="844867668" locEndLn="40" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="40" locFile="/build/../../../../../../../../stdinout.c" locStartln="40" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="-1384567970" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1384567970" unbViolId="e77de0fb-1244-35d1-b23c-b2d898054431" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb4164df-2c42-3ad3-960e-630007aeb810" locEndPos="15" locType="sr" hash="844867668" locEndLn="40" goals="0," />
    <StdViol msg="Character constant  is used as LHS operand of  binary '+' operator" ln="40" locFile="/build/../../../../../../../../stdinout.c" locStartln="40" sev="3" auth="username" locRef="4" rule="CODSTA-69" lnHash="-1384567970" rule.header="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary &amp; operator" tool="c++test" lineHash="-1384567970" unbViolId="25e20e3b-2f55-3075-9d5f-d3d663897c23" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb24d285-9d17-32f7-be01-3ff112b43563" locEndPos="21" locType="sr" hash="844867668" locEndLn="40" goals="0," />
    <StdViol msg="Character constant  is used as LHS operand of  binary '+' operator" ln="40" locFile="/build/../../../../../../../../stdinout.c" locStartln="40" sev="3" auth="username" locRef="4" rule="CERT_C-STR09-a" lnHash="-1384567970" rule.header="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary &amp; operator" tool="c++test" lineHash="-1384567970" unbViolId="68d0ecdd-25fc-34c1-ab18-b7b9bb8ff416" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c9b6f92-0723-32be-b094-5074928ed82f" locEndPos="21" locType="sr" hash="844867668" locEndLn="40" goals="0," />
    <StdViol msg="Character constant  is used as LHS operand of  binary '+' operator" ln="40" locFile="/build/../../../../../../../../stdinout.c" locStartln="40" sev="2" auth="username" locRef="4" rule="MISRA2008-4_5_3" lnHash="-1384567970" rule.header="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary &amp; operator" tool="c++test" lineHash="-1384567970" unbViolId="62f44081-184c-3290-8a68-ad19a67526c2" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d49b92f-6f37-3fa9-bbca-4f69947764ef" locEndPos="21" locType="sr" hash="844867668" locEndLn="40" goals="0," />
    <StdViol msg="Character constant  is used as LHS operand of  binary '+' operator" ln="40" locFile="/build/../../../../../../../../stdinout.c" locStartln="40" sev="2" auth="username" locRef="4" rule="AUTOSAR-M4_5_3-a" lnHash="-1384567970" rule.header="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary &amp; operator" tool="c++test" lineHash="-1384567970" unbViolId="1fcd9b00-63a6-3a56-9273-94adbf829f85" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="962f671d-5d13-34d4-a5ea-abf64a62a2cd" locEndPos="21" locType="sr" hash="844867668" locEndLn="40" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="43" locFile="/build/../../../../../../../../stdinout.c" locStartln="43" sev="3" auth="username" locRef="4" rule="PREPROC-10_b" lnHash="532253764" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="532253764" unbViolId="237322e2-a0da-3a93-bb7e-515d34f2b1d0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bfb59520-3369-3a76-b604-699a7736dab5" locEndPos="1" locType="sr" hash="844867668" locEndLn="43" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="43" locFile="/build/../../../../../../../../stdinout.c" locStartln="43" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_1_d" lnHash="532253764" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="532253764" unbViolId="84784d4d-f8b3-325d-92e0-07f0c336a757" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a91519bf-c466-3b80-8abc-f48b646d0319" locEndPos="1" locType="sr" hash="844867668" locEndLn="43" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="43" locFile="/build/../../../../../../../../stdinout.c" locStartln="43" sev="3" auth="username" locRef="4" rule="JSF-028_b" lnHash="532253764" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="532253764" unbViolId="0b5b9fb7-7dba-3d7f-b792-f3efacaae72c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="094bc32d-4e95-37ad-bfed-4fd98f3b37a5" locEndPos="1" locType="sr" hash="844867668" locEndLn="43" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="43" locFile="/build/../../../../../../../../stdinout.c" locStartln="43" sev="3" auth="username" locRef="4" rule="HICPP-16_1_1-e" lnHash="532253764" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="532253764" unbViolId="994a02ef-3382-3838-96f3-726f0b34cb76" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23e5dc1e-e2c5-3155-8441-5b7a591f7421" locEndPos="1" locType="sr" hash="844867668" locEndLn="43" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="43" locFile="/build/../../../../../../../../stdinout.c" locStartln="43" sev="3" auth="username" locRef="4" rule="PREPROC-26" lnHash="532253764" rule.header="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" tool="c++test" lineHash="532253764" unbViolId="79564b76-074b-32c2-b93f-5d4f2b68d5af" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d01ab70-db0a-3e5f-9bce-7baa671d5ac4" locEndPos="1" locType="sr" hash="844867668" locEndLn="43" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="43" locFile="/build/../../../../../../../../stdinout.c" locStartln="43" sev="2" auth="username" locRef="4" rule="AUTOSAR-A16_0_1-a" lnHash="532253764" rule.header="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" tool="c++test" lineHash="532253764" unbViolId="c54d2b48-3e3a-31b4-aafb-46b46bae9537" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77cf35c1-b72a-3a4f-975a-d60e78ce5b62" locEndPos="1" locType="sr" hash="844867668" locEndLn="43" goals="0," />
    <StdViol msg="Use // comments only" ln="43" locFile="/build/../../../../../../../../stdinout.c" locStartln="43" sev="3" auth="username" locRef="4" rule="HICPP-2_3_1-a" lnHash="532253764" rule.header="Prefer C++ style comment" tool="c++test" lineHash="532253764" unbViolId="981d968b-947b-3cca-b7f4-ebb4bf889bfb" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="deb91fe7-6b33-3ccd-b422-ebf2f526c137" locEndPos="8" locType="sr" hash="844867668" locEndLn="43" goals="0," />
    <StdViol msg="Use // comments only" ln="43" locFile="/build/../../../../../../../../stdinout.c" locStartln="43" sev="2" auth="username" locRef="4" rule="JSF-126" lnHash="532253764" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="532253764" unbViolId="4613d80d-e549-3b73-8e10-7e18e07feb16" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="615f874f-5ce3-33ad-a93e-53e5b988f179" locEndPos="8" locType="sr" hash="844867668" locEndLn="43" goals="0," />
    <StdViol msg="Use // comments only" ln="43" locFile="/build/../../../../../../../../stdinout.c" locStartln="43" sev="3" auth="username" locRef="4" rule="COMMENT-01" lnHash="532253764" rule.header="Prefer C++ style comment" tool="c++test" lineHash="532253764" unbViolId="818687ea-5fea-3705-b025-ef9147ff57dd" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79124fc9-ddd3-369d-ac10-f88eb6c5c5d9" locEndPos="8" locType="sr" hash="844867668" locEndLn="43" goals="0," />
    <StdViol msg="Array index 'i' should be checked before indexing array" ln="45" locFile="/build/../../../../../../../../stdinout.c" locStartln="45" sev="5" auth="username" locRef="4" rule="MISRA-004_a" lnHash="1793475976" rule.header="Provisions should be made for appropriate run-time checking" tool="c++test" lineHash="1793475976" unbViolId="4a0fe7e5-a997-3f4f-878f-d0b55732b1a3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa4d7d59-09c7-38b2-89e7-9cca7a9af51f" locEndPos="5" locType="sr" hash="844867668" locEndLn="45" goals="0," />
    <StdViol msg="Array index 'i' should be checked before indexing array" ln="45" locFile="/build/../../../../../../../../stdinout.c" locStartln="45" sev="2" auth="username" locRef="4" rule="JSF-015" lnHash="1793475976" rule.header="Ensure that array indices are within the bounds of the array" tool="c++test" lineHash="1793475976" unbViolId="d1bdf5cd-f695-38d2-a364-536f68ee9fa5" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8cbae2f-cdf3-3735-810f-ca30b6fc51ce" locEndPos="5" locType="sr" hash="844867668" locEndLn="45" goals="0," />
    <StdViol msg="Remove spaces between the 'return' operator and the opening parenthesis" ln="46" locFile="/build/../../../../../../../../stdinout.c" locStartln="46" sev="3" auth="username" locRef="4" rule="FORMAT-23" lnHash="1849933771" rule.header="There shall be no white spaces between the 'return' statement or the 'sizeof' operator and the following opening parenthesis" tool="c++test" lineHash="1849933771" unbViolId="7d4a55f0-17f1-379b-9485-4c823c494eb1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="516c2511-b554-3bd0-8b22-3cbb5594927e" locEndPos="5" locType="sr" hash="844867668" locEndLn="46" goals="0," />
    <StdViol msg="Values &quot;buf&quot; passed to library function &quot;atoi&quot; without being checked" ln="46" locFile="/build/../../../../../../../../stdinout.c" locStartln="46" sev="2" auth="username" locRef="4" rule="CERT_C-MEM07-a" lnHash="1849933771" rule.header="The validity of values passed to library functions shall be checked" tool="c++test" lineHash="1849933771" unbViolId="676b7ad2-8b9f-33d8-a64b-55dabae4a59f" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8dbbfdaf-3709-3ffc-bcd6-2092b3839d2f" locEndPos="13" locType="sr" hash="844867668" locEndLn="46" goals="0," />
    <StdViol msg="Values &quot;buf&quot; passed to library function &quot;atoi&quot; without being checked" ln="46" locFile="/build/../../../../../../../../stdinout.c" locStartln="46" sev="2" auth="username" locRef="4" rule="CERT_C-MEM04-a" lnHash="1849933771" rule.header="The validity of values passed to library functions shall be checked" tool="c++test" lineHash="1849933771" unbViolId="acf9c86a-d76b-38a1-954f-50735462b511" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="239aa362-ba07-3158-85bb-e20aad10391d" locEndPos="13" locType="sr" hash="844867668" locEndLn="46" goals="0," />
    <StdViol msg="Values &quot;buf&quot; passed to library function &quot;atoi&quot; without being checked" ln="46" locFile="/build/../../../../../../../../stdinout.c" locStartln="46" sev="3" auth="username" locRef="4" rule="MISRA2004-20_3" lnHash="1849933771" rule.header="The validity of values passed to library functions shall be checked" tool="c++test" lineHash="1849933771" unbViolId="97e10d9c-6b48-33a2-9712-dbcc09b39a38" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4428180e-95bc-334e-99f2-d0af4dc0a4ce" locEndPos="13" locType="sr" hash="844867668" locEndLn="46" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="46" locFile="/build/../../../../../../../../stdinout.c" locStartln="46" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_21_7-a" lnHash="1849933771" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="1849933771" unbViolId="80801dfa-36cf-3e5f-b662-3944e1b13fda" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b180567-a1f4-3e46-9199-32d5b94d04e5" locEndPos="13" locType="sr" hash="844867668" locEndLn="46" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="46" locFile="/build/../../../../../../../../stdinout.c" locStartln="46" sev="3" auth="username" locRef="4" rule="CERT_CPP-ERR62-a" lnHash="1849933771" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="1849933771" unbViolId="4326ca6b-ab45-3e08-bad3-a57ef092b6e9" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c3343ee4-6063-30e0-a78e-fd72f22ac017" locEndPos="13" locType="sr" hash="844867668" locEndLn="46" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="46" locFile="/build/../../../../../../../../stdinout.c" locStartln="46" sev="2" auth="username" locRef="4" rule="MISRA2008-18_0_2" lnHash="1849933771" rule.header="The library functions atof, atoi and atol from library &lt;cstdlib> shall not be used" tool="c++test" lineHash="1849933771" unbViolId="159d10f1-c326-3576-9589-a374f75eb6f2" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a508189-e36c-37ec-878c-a5bafc5ae0b1" locEndPos="13" locType="sr" hash="844867668" locEndLn="46" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="46" locFile="/build/../../../../../../../../stdinout.c" locStartln="46" sev="3" auth="username" locRef="4" rule="CERT_C-ERR34-a" lnHash="1849933771" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="1849933771" unbViolId="fb333235-ed71-3eae-95ab-4f8fcacd611b" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb5ca34f-e557-37f7-952c-f16d06453595" locEndPos="13" locType="sr" hash="844867668" locEndLn="46" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="46" locFile="/build/../../../../../../../../stdinout.c" locStartln="46" sev="3" auth="username" locRef="4" rule="MISRA2004-20_10" lnHash="1849933771" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="1849933771" unbViolId="776e4ad9-3ace-3cab-b0be-80e597fd4e8e" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d6f928f5-3c50-3a65-bd1a-b9db358b5995" locEndPos="13" locType="sr" hash="844867668" locEndLn="46" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="46" locFile="/build/../../../../../../../../stdinout.c" locStartln="46" sev="3" auth="username" locRef="4" rule="CERT_C-MSC24-a" lnHash="1849933771" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="1849933771" unbViolId="69abcbf1-e856-3cb7-be4c-cb5df6c5ef3a" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb00b49d-3488-354c-baaa-eae2162842a0" locEndPos="13" locType="sr" hash="844867668" locEndLn="46" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="46" locFile="/build/../../../../../../../../stdinout.c" locStartln="46" sev="2" auth="username" locRef="4" rule="CERT_C-ERR07-a" lnHash="1849933771" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="1849933771" unbViolId="cf0ae035-6bf3-3f3d-902d-bee4c9289027" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f69d295f-4a38-385a-9756-40093349ab50" locEndPos="13" locType="sr" hash="844867668" locEndLn="46" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="46" locFile="/build/../../../../../../../../stdinout.c" locStartln="46" sev="2" auth="username" locRef="4" rule="AUTOSAR-A18_0_2-b" lnHash="1849933771" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="1849933771" unbViolId="55d43baf-f880-352f-b62e-7a12985dc264" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6f74874-fa79-3f99-9c0d-b829929e3efe" locEndPos="13" locType="sr" hash="844867668" locEndLn="46" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="46" locFile="/build/../../../../../../../../stdinout.c" locStartln="46" sev="2" auth="username" locRef="4" rule="AUTOSAR-A18_0_2-a" lnHash="1849933771" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="1849933771" unbViolId="820dfbdd-8c4d-3d0c-aefe-5c484fe541d9" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36aab9db-2403-303b-ab7b-4dc3a6faf5ca" locEndPos="13" locType="sr" hash="844867668" locEndLn="46" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="46" locFile="/build/../../../../../../../../stdinout.c" locStartln="46" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-21_7" lnHash="1849933771" rule.header="The atof, atoi, atol and atoll functions of &lt;stdlib.h> shall not be used" tool="c++test" lineHash="1849933771" unbViolId="f3d2e2af-5897-3490-ac62-82033f75d961" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0de7630a-b7bf-3004-94da-c9b599383952" locEndPos="13" locType="sr" hash="844867668" locEndLn="46" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="46" locFile="/build/../../../../../../../../stdinout.c" locStartln="46" sev="2" auth="username" locRef="4" rule="JSF-023" lnHash="1849933771" rule.header="The library functions atof, atoi and atol from library &lt;stdlib.h> shall not be used" tool="c++test" lineHash="1849933771" unbViolId="05ea97eb-c761-38e6-97f6-8a5f101386cd" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1dfe6752-c42b-378d-bf60-af90fcf0a37b" locEndPos="13" locType="sr" hash="844867668" locEndLn="46" goals="0," />
    <StdViol msg="Expression of array type is passed as argument to function 'atoi'" ln="46" locFile="/build/../../../../../../../../stdinout.c" locStartln="46" sev="2" auth="username" locRef="4" rule="JSF-097_d" lnHash="1849933771" rule.header="Arrays shall not be passed to functions as array/pointer parameters" tool="c++test" lineHash="1849933771" unbViolId="e0fc3b36-fc36-3346-8fb0-bc59bdd4d8b8" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db2f1f50-8bc2-38c6-ba81-0b012d7f04fd" locEndPos="18" locType="sr" hash="844867668" locEndLn="46" goals="0," />
    <StdViol msg="Expression of array type is passed as argument to function 'atoi'" ln="46" locFile="/build/../../../../../../../../stdinout.c" locStartln="46" sev="3" auth="username" locRef="4" rule="HICPP-4_1_1-b" lnHash="1849933771" rule.header="Do not pass expression with array type to a function with pointer or array type parameter" tool="c++test" lineHash="1849933771" unbViolId="404645a3-fd51-3b12-9c56-d51118da6531" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1b55246-ebfd-3e3d-af58-a140cea4f349" locEndPos="18" locType="sr" hash="844867668" locEndLn="46" goals="0," />
    <StdViol msg="Expression of array type is passed as argument to function 'atoi'" ln="46" locFile="/build/../../../../../../../../stdinout.c" locStartln="46" sev="3" auth="username" locRef="4" rule="PB-41_b" lnHash="1849933771" rule.header="Do not pass expression with array type to a function with pointer or array type parameter" tool="c++test" lineHash="1849933771" unbViolId="1ce357e3-a9c2-3701-a812-4ec4dc24bf82" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b27757a-e509-3de4-b5b1-4056d9bfc521" locEndPos="18" locType="sr" hash="844867668" locEndLn="46" goals="0," />
    <FlowViol msg="&quot;tm_tmp&quot; may possibly be null" ln="47" locFile="/build/../../../../../../../../stdinout.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="47" rule="AUTOSAR-A5_3_2-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="46" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1715513709" lang="cpp" violId="97dd2fa3-01b7-3445-bfe9-49f06ff3b509" locEndPos="0" locEndLn="48" goals="0," locStartln="47" sev="2" locRef="4" tool="c++test" lineHash="125" unbViolId="18b3643a-30c9-37f2-aada-8ec998068397" locType="sr" hash="844867668" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType=".C" rngLn="46">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: tm_tmp" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="." rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: tm_tmp" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType="." rngLn="49" />
        <ElDesc lineHash="-337297020" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="52" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="52" srcRngEndLn="53" desc="print_string(&quot;Please enter the start hour [0-23] > &quot;);" ElType="." rngLn="52">
          <ElDescList>
            <ElDesc lineHash="-206127679" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="54" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="54" srcRngEndLn="55" desc="return (printf(str));" ElType="." rngLn="54" />
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="1051372518" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="53" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="53" srcRngEndLn="54" desc="tm_tmp->tm_hour = get_input_digit();" ElType="!" rngLn="53">
          <ElDescList>
            <ElDesc lineHash="-695983806" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="18" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="18" srcRngEndLn="19" desc="char c;" ElType="." rngLn="18" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="19" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="19" srcRngEndLn="20" desc="int i;" ElType="." rngLn="19" />
            <ElDesc lineHash="-2004706563" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="20" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="20" srcRngEndLn="21" desc="char buf[BUF_SIZE];" ElType="." rngLn="20" />
            <ElDesc lineHash="-1663270807" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="38" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="38" srcRngEndLn="39" desc="++ index;" ElType="." rngLn="38" />
            <ElDesc lineHash="410470818" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="39" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="39" srcRngEndLn="40" desc="index %= 10;" ElType="." rngLn="39" />
            <ElDesc lineHash="-1384567970" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="buf[0] = (char)('0' + index);" ElType="." rngLn="40" />
            <ElDesc lineHash="1605700164" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="i = 1;" ElType="." rngLn="41" />
            <ElDesc lineHash="1793475976" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="buf[i] = '\0';" ElType="." rngLn="45" />
            <ElDesc lineHash="1849933771" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="return (atoi(buf));" ElType="." rngLn="46" />
            <ElDesc lineHash="125" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="47" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="47" srcRngEndLn="48" desc="}" ElType=".P" rngLn="47">
              <Anns>
                <Ann msg="Null value carrier: tm_tmp" kind="comment" />
                <Ann msg="Null pointer dereferencing point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;tm_tmp&quot; may possibly be null" ln="47" locFile="/build/../../../../../../../../stdinout.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="47" rule="AUTOSAR-M0_3_1-f" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="46" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="808696528" lang="cpp" violId="92196a26-1770-3cdc-9786-79ae0ad0de83" locEndPos="0" locEndLn="48" goals="0," locStartln="47" sev="2" locRef="4" tool="c++test" lineHash="125" unbViolId="29aa8dd8-0c1d-3e3c-8499-04ca13ae4564" locType="sr" hash="844867668" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType=".C" rngLn="46">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: tm_tmp" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="." rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: tm_tmp" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType="." rngLn="49" />
        <ElDesc lineHash="-337297020" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="52" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="52" srcRngEndLn="53" desc="print_string(&quot;Please enter the start hour [0-23] > &quot;);" ElType="." rngLn="52">
          <ElDescList>
            <ElDesc lineHash="-206127679" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="54" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="54" srcRngEndLn="55" desc="return (printf(str));" ElType="." rngLn="54" />
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="1051372518" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="53" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="53" srcRngEndLn="54" desc="tm_tmp->tm_hour = get_input_digit();" ElType="!" rngLn="53">
          <ElDescList>
            <ElDesc lineHash="-695983806" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="18" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="18" srcRngEndLn="19" desc="char c;" ElType="." rngLn="18" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="19" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="19" srcRngEndLn="20" desc="int i;" ElType="." rngLn="19" />
            <ElDesc lineHash="-2004706563" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="20" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="20" srcRngEndLn="21" desc="char buf[BUF_SIZE];" ElType="." rngLn="20" />
            <ElDesc lineHash="-1663270807" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="38" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="38" srcRngEndLn="39" desc="++ index;" ElType="." rngLn="38" />
            <ElDesc lineHash="410470818" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="39" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="39" srcRngEndLn="40" desc="index %= 10;" ElType="." rngLn="39" />
            <ElDesc lineHash="-1384567970" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="buf[0] = (char)('0' + index);" ElType="." rngLn="40" />
            <ElDesc lineHash="1605700164" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="i = 1;" ElType="." rngLn="41" />
            <ElDesc lineHash="1793475976" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="buf[i] = '\0';" ElType="." rngLn="45" />
            <ElDesc lineHash="1849933771" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="return (atoi(buf));" ElType="." rngLn="46" />
            <ElDesc lineHash="125" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="47" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="47" srcRngEndLn="48" desc="}" ElType=".P" rngLn="47">
              <Anns>
                <Ann msg="Null value carrier: tm_tmp" kind="comment" />
                <Ann msg="Null pointer dereferencing point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;tm_tmp&quot; may possibly be null" ln="47" locFile="/build/../../../../../../../../stdinout.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="47" rule="BD-PB-NP" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="46" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="687601144" lang="cpp" violId="ba43957e-431d-3d39-b686-0e8b8054890e" locEndPos="0" locEndLn="48" goals="0," locStartln="47" sev="1" locRef="4" tool="c++test" lineHash="125" unbViolId="fb506186-f831-3e81-aa28-0d4f7967bd8c" locType="sr" hash="844867668" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType=".C" rngLn="46">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: tm_tmp" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="." rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: tm_tmp" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType="." rngLn="49" />
        <ElDesc lineHash="-337297020" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="52" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="52" srcRngEndLn="53" desc="print_string(&quot;Please enter the start hour [0-23] > &quot;);" ElType="." rngLn="52">
          <ElDescList>
            <ElDesc lineHash="-206127679" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="54" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="54" srcRngEndLn="55" desc="return (printf(str));" ElType="." rngLn="54" />
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="1051372518" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="53" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="53" srcRngEndLn="54" desc="tm_tmp->tm_hour = get_input_digit();" ElType="!" rngLn="53">
          <ElDescList>
            <ElDesc lineHash="-695983806" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="18" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="18" srcRngEndLn="19" desc="char c;" ElType="." rngLn="18" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="19" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="19" srcRngEndLn="20" desc="int i;" ElType="." rngLn="19" />
            <ElDesc lineHash="-2004706563" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="20" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="20" srcRngEndLn="21" desc="char buf[BUF_SIZE];" ElType="." rngLn="20" />
            <ElDesc lineHash="-1663270807" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="38" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="38" srcRngEndLn="39" desc="++ index;" ElType="." rngLn="38" />
            <ElDesc lineHash="410470818" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="39" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="39" srcRngEndLn="40" desc="index %= 10;" ElType="." rngLn="39" />
            <ElDesc lineHash="-1384567970" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="buf[0] = (char)('0' + index);" ElType="." rngLn="40" />
            <ElDesc lineHash="1605700164" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="i = 1;" ElType="." rngLn="41" />
            <ElDesc lineHash="1793475976" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="buf[i] = '\0';" ElType="." rngLn="45" />
            <ElDesc lineHash="1849933771" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="return (atoi(buf));" ElType="." rngLn="46" />
            <ElDesc lineHash="125" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="47" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="47" srcRngEndLn="48" desc="}" ElType=".P" rngLn="47">
              <Anns>
                <Ann msg="Null value carrier: tm_tmp" kind="comment" />
                <Ann msg="Null pointer dereferencing point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;tm_tmp&quot; may possibly be null" ln="47" locFile="/build/../../../../../../../../stdinout.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="47" rule="CERT_C-ERR33-c" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="46" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1289583836" lang="cpp" violId="d044e43e-d85c-374a-a335-a54aedfeefe6" locEndPos="0" locEndLn="48" goals="0," locStartln="47" sev="1" locRef="4" tool="c++test" lineHash="125" unbViolId="c8ed8c88-4e46-395a-9205-270e057d5945" locType="sr" hash="844867668" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType=".C" rngLn="46">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: tm_tmp" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="." rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: tm_tmp" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType="." rngLn="49" />
        <ElDesc lineHash="-337297020" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="52" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="52" srcRngEndLn="53" desc="print_string(&quot;Please enter the start hour [0-23] > &quot;);" ElType="." rngLn="52">
          <ElDescList>
            <ElDesc lineHash="-206127679" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="54" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="54" srcRngEndLn="55" desc="return (printf(str));" ElType="." rngLn="54" />
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="1051372518" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="53" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="53" srcRngEndLn="54" desc="tm_tmp->tm_hour = get_input_digit();" ElType="!" rngLn="53">
          <ElDescList>
            <ElDesc lineHash="-695983806" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="18" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="18" srcRngEndLn="19" desc="char c;" ElType="." rngLn="18" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="19" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="19" srcRngEndLn="20" desc="int i;" ElType="." rngLn="19" />
            <ElDesc lineHash="-2004706563" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="20" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="20" srcRngEndLn="21" desc="char buf[BUF_SIZE];" ElType="." rngLn="20" />
            <ElDesc lineHash="-1663270807" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="38" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="38" srcRngEndLn="39" desc="++ index;" ElType="." rngLn="38" />
            <ElDesc lineHash="410470818" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="39" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="39" srcRngEndLn="40" desc="index %= 10;" ElType="." rngLn="39" />
            <ElDesc lineHash="-1384567970" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="buf[0] = (char)('0' + index);" ElType="." rngLn="40" />
            <ElDesc lineHash="1605700164" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="i = 1;" ElType="." rngLn="41" />
            <ElDesc lineHash="1793475976" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="buf[i] = '\0';" ElType="." rngLn="45" />
            <ElDesc lineHash="1849933771" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="return (atoi(buf));" ElType="." rngLn="46" />
            <ElDesc lineHash="125" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="47" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="47" srcRngEndLn="48" desc="}" ElType=".P" rngLn="47">
              <Anns>
                <Ann msg="Null value carrier: tm_tmp" kind="comment" />
                <Ann msg="Null pointer dereferencing point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;tm_tmp&quot; may possibly be null" ln="47" locFile="/build/../../../../../../../../stdinout.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="47" rule="CERT_C-EXP34-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="46" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1119507527" lang="cpp" violId="dc65dfa0-9126-3325-b3b3-8727e6246005" locEndPos="0" locEndLn="48" goals="0," locStartln="47" sev="1" locRef="4" tool="c++test" lineHash="125" unbViolId="0e5c8c6d-3937-307f-82fa-cbf3311125a9" locType="sr" hash="844867668" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType=".C" rngLn="46">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: tm_tmp" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="." rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: tm_tmp" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType="." rngLn="49" />
        <ElDesc lineHash="-337297020" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="52" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="52" srcRngEndLn="53" desc="print_string(&quot;Please enter the start hour [0-23] > &quot;);" ElType="." rngLn="52">
          <ElDescList>
            <ElDesc lineHash="-206127679" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="54" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="54" srcRngEndLn="55" desc="return (printf(str));" ElType="." rngLn="54" />
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="1051372518" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="53" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="53" srcRngEndLn="54" desc="tm_tmp->tm_hour = get_input_digit();" ElType="!" rngLn="53">
          <ElDescList>
            <ElDesc lineHash="-695983806" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="18" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="18" srcRngEndLn="19" desc="char c;" ElType="." rngLn="18" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="19" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="19" srcRngEndLn="20" desc="int i;" ElType="." rngLn="19" />
            <ElDesc lineHash="-2004706563" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="20" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="20" srcRngEndLn="21" desc="char buf[BUF_SIZE];" ElType="." rngLn="20" />
            <ElDesc lineHash="-1663270807" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="38" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="38" srcRngEndLn="39" desc="++ index;" ElType="." rngLn="38" />
            <ElDesc lineHash="410470818" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="39" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="39" srcRngEndLn="40" desc="index %= 10;" ElType="." rngLn="39" />
            <ElDesc lineHash="-1384567970" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="buf[0] = (char)('0' + index);" ElType="." rngLn="40" />
            <ElDesc lineHash="1605700164" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="i = 1;" ElType="." rngLn="41" />
            <ElDesc lineHash="1793475976" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="buf[i] = '\0';" ElType="." rngLn="45" />
            <ElDesc lineHash="1849933771" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="return (atoi(buf));" ElType="." rngLn="46" />
            <ElDesc lineHash="125" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="47" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="47" srcRngEndLn="48" desc="}" ElType=".P" rngLn="47">
              <Anns>
                <Ann msg="Null value carrier: tm_tmp" kind="comment" />
                <Ann msg="Null pointer dereferencing point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;tm_tmp&quot; may possibly be null" ln="47" locFile="/build/../../../../../../../../stdinout.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="47" rule="CERT_C-MSC19-b" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="46" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-456590017" lang="cpp" violId="592071f3-bb80-36ca-a600-235a3887700f" locEndPos="0" locEndLn="48" goals="0," locStartln="47" sev="3" locRef="4" tool="c++test" lineHash="125" unbViolId="0be1a989-44c7-37bd-b2e5-cc3340095503" locType="sr" hash="844867668" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType=".C" rngLn="46">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: tm_tmp" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="." rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: tm_tmp" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType="." rngLn="49" />
        <ElDesc lineHash="-337297020" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="52" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="52" srcRngEndLn="53" desc="print_string(&quot;Please enter the start hour [0-23] > &quot;);" ElType="." rngLn="52">
          <ElDescList>
            <ElDesc lineHash="-206127679" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="54" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="54" srcRngEndLn="55" desc="return (printf(str));" ElType="." rngLn="54" />
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="1051372518" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="53" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="53" srcRngEndLn="54" desc="tm_tmp->tm_hour = get_input_digit();" ElType="!" rngLn="53">
          <ElDescList>
            <ElDesc lineHash="-695983806" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="18" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="18" srcRngEndLn="19" desc="char c;" ElType="." rngLn="18" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="19" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="19" srcRngEndLn="20" desc="int i;" ElType="." rngLn="19" />
            <ElDesc lineHash="-2004706563" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="20" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="20" srcRngEndLn="21" desc="char buf[BUF_SIZE];" ElType="." rngLn="20" />
            <ElDesc lineHash="-1663270807" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="38" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="38" srcRngEndLn="39" desc="++ index;" ElType="." rngLn="38" />
            <ElDesc lineHash="410470818" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="39" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="39" srcRngEndLn="40" desc="index %= 10;" ElType="." rngLn="39" />
            <ElDesc lineHash="-1384567970" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="buf[0] = (char)('0' + index);" ElType="." rngLn="40" />
            <ElDesc lineHash="1605700164" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="i = 1;" ElType="." rngLn="41" />
            <ElDesc lineHash="1793475976" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="buf[i] = '\0';" ElType="." rngLn="45" />
            <ElDesc lineHash="1849933771" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="return (atoi(buf));" ElType="." rngLn="46" />
            <ElDesc lineHash="125" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="47" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="47" srcRngEndLn="48" desc="}" ElType=".P" rngLn="47">
              <Anns>
                <Ann msg="Null value carrier: tm_tmp" kind="comment" />
                <Ann msg="Null pointer dereferencing point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;tm_tmp&quot; may possibly be null" ln="47" locFile="/build/../../../../../../../../stdinout.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="47" rule="CERT_C-POS54-c" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="46" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1928956210" lang="cpp" violId="d40ff323-a61a-3867-8ea7-526e060edc88" locEndPos="0" locEndLn="48" goals="0," locStartln="47" sev="1" locRef="4" tool="c++test" lineHash="125" unbViolId="a5c88c2b-6018-3c54-b6be-63630708b240" locType="sr" hash="844867668" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType=".C" rngLn="46">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: tm_tmp" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="." rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: tm_tmp" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType="." rngLn="49" />
        <ElDesc lineHash="-337297020" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="52" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="52" srcRngEndLn="53" desc="print_string(&quot;Please enter the start hour [0-23] > &quot;);" ElType="." rngLn="52">
          <ElDescList>
            <ElDesc lineHash="-206127679" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="54" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="54" srcRngEndLn="55" desc="return (printf(str));" ElType="." rngLn="54" />
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="1051372518" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="53" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="53" srcRngEndLn="54" desc="tm_tmp->tm_hour = get_input_digit();" ElType="!" rngLn="53">
          <ElDescList>
            <ElDesc lineHash="-695983806" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="18" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="18" srcRngEndLn="19" desc="char c;" ElType="." rngLn="18" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="19" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="19" srcRngEndLn="20" desc="int i;" ElType="." rngLn="19" />
            <ElDesc lineHash="-2004706563" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="20" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="20" srcRngEndLn="21" desc="char buf[BUF_SIZE];" ElType="." rngLn="20" />
            <ElDesc lineHash="-1663270807" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="38" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="38" srcRngEndLn="39" desc="++ index;" ElType="." rngLn="38" />
            <ElDesc lineHash="410470818" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="39" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="39" srcRngEndLn="40" desc="index %= 10;" ElType="." rngLn="39" />
            <ElDesc lineHash="-1384567970" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="buf[0] = (char)('0' + index);" ElType="." rngLn="40" />
            <ElDesc lineHash="1605700164" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="i = 1;" ElType="." rngLn="41" />
            <ElDesc lineHash="1793475976" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="buf[i] = '\0';" ElType="." rngLn="45" />
            <ElDesc lineHash="1849933771" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="return (atoi(buf));" ElType="." rngLn="46" />
            <ElDesc lineHash="125" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="47" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="47" srcRngEndLn="48" desc="}" ElType=".P" rngLn="47">
              <Anns>
                <Ann msg="Null value carrier: tm_tmp" kind="comment" />
                <Ann msg="Null pointer dereferencing point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;tm_tmp&quot; may possibly be null" ln="47" locFile="/build/../../../../../../../../stdinout.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="47" rule="CERT_CPP-STR51-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="46" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1473952982" lang="cpp" violId="8f9698e3-f295-3c8c-8249-d235d31e6e94" locEndPos="0" locEndLn="48" goals="0," locStartln="47" sev="1" locRef="4" tool="c++test" lineHash="125" unbViolId="be0021c9-e288-3a4c-973f-1a4a494c002f" locType="sr" hash="844867668" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType=".C" rngLn="46">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: tm_tmp" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="." rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: tm_tmp" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType="." rngLn="49" />
        <ElDesc lineHash="-337297020" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="52" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="52" srcRngEndLn="53" desc="print_string(&quot;Please enter the start hour [0-23] > &quot;);" ElType="." rngLn="52">
          <ElDescList>
            <ElDesc lineHash="-206127679" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="54" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="54" srcRngEndLn="55" desc="return (printf(str));" ElType="." rngLn="54" />
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="1051372518" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="53" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="53" srcRngEndLn="54" desc="tm_tmp->tm_hour = get_input_digit();" ElType="!" rngLn="53">
          <ElDescList>
            <ElDesc lineHash="-695983806" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="18" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="18" srcRngEndLn="19" desc="char c;" ElType="." rngLn="18" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="19" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="19" srcRngEndLn="20" desc="int i;" ElType="." rngLn="19" />
            <ElDesc lineHash="-2004706563" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="20" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="20" srcRngEndLn="21" desc="char buf[BUF_SIZE];" ElType="." rngLn="20" />
            <ElDesc lineHash="-1663270807" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="38" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="38" srcRngEndLn="39" desc="++ index;" ElType="." rngLn="38" />
            <ElDesc lineHash="410470818" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="39" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="39" srcRngEndLn="40" desc="index %= 10;" ElType="." rngLn="39" />
            <ElDesc lineHash="-1384567970" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="buf[0] = (char)('0' + index);" ElType="." rngLn="40" />
            <ElDesc lineHash="1605700164" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="i = 1;" ElType="." rngLn="41" />
            <ElDesc lineHash="1793475976" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="buf[i] = '\0';" ElType="." rngLn="45" />
            <ElDesc lineHash="1849933771" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="return (atoi(buf));" ElType="." rngLn="46" />
            <ElDesc lineHash="125" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="47" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="47" srcRngEndLn="48" desc="}" ElType=".P" rngLn="47">
              <Anns>
                <Ann msg="Null value carrier: tm_tmp" kind="comment" />
                <Ann msg="Null pointer dereferencing point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;tm_tmp&quot; may possibly be null" ln="47" locFile="/build/../../../../../../../../stdinout.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="47" rule="CWE-476-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="46" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1555862687" lang="cpp" violId="dd0592d0-1120-38d2-8b81-d169c5545378" locEndPos="0" locEndLn="48" goals="0," locStartln="47" sev="1" locRef="4" tool="c++test" lineHash="125" unbViolId="a100bbac-18a2-3918-9e74-146362e842b4" locType="sr" hash="844867668" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType=".C" rngLn="46">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: tm_tmp" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="." rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: tm_tmp" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType="." rngLn="49" />
        <ElDesc lineHash="-337297020" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="52" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="52" srcRngEndLn="53" desc="print_string(&quot;Please enter the start hour [0-23] > &quot;);" ElType="." rngLn="52">
          <ElDescList>
            <ElDesc lineHash="-206127679" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="54" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="54" srcRngEndLn="55" desc="return (printf(str));" ElType="." rngLn="54" />
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="1051372518" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="53" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="53" srcRngEndLn="54" desc="tm_tmp->tm_hour = get_input_digit();" ElType="!" rngLn="53">
          <ElDescList>
            <ElDesc lineHash="-695983806" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="18" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="18" srcRngEndLn="19" desc="char c;" ElType="." rngLn="18" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="19" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="19" srcRngEndLn="20" desc="int i;" ElType="." rngLn="19" />
            <ElDesc lineHash="-2004706563" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="20" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="20" srcRngEndLn="21" desc="char buf[BUF_SIZE];" ElType="." rngLn="20" />
            <ElDesc lineHash="-1663270807" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="38" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="38" srcRngEndLn="39" desc="++ index;" ElType="." rngLn="38" />
            <ElDesc lineHash="410470818" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="39" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="39" srcRngEndLn="40" desc="index %= 10;" ElType="." rngLn="39" />
            <ElDesc lineHash="-1384567970" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="buf[0] = (char)('0' + index);" ElType="." rngLn="40" />
            <ElDesc lineHash="1605700164" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="i = 1;" ElType="." rngLn="41" />
            <ElDesc lineHash="1793475976" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="buf[i] = '\0';" ElType="." rngLn="45" />
            <ElDesc lineHash="1849933771" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="return (atoi(buf));" ElType="." rngLn="46" />
            <ElDesc lineHash="125" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="47" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="47" srcRngEndLn="48" desc="}" ElType=".P" rngLn="47">
              <Anns>
                <Ann msg="Null value carrier: tm_tmp" kind="comment" />
                <Ann msg="Null pointer dereferencing point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;tm_tmp&quot; may possibly be null" ln="47" locFile="/build/../../../../../../../../stdinout.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="47" rule="HICPP-5_2_1-c" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="46" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-880523761" lang="cpp" violId="44350cb4-ee83-330b-ae38-f9062a19d986" locEndPos="0" locEndLn="48" goals="0," locStartln="47" sev="1" locRef="4" tool="c++test" lineHash="125" unbViolId="e4dda0f7-ff3a-378f-8ddc-f54e3563dc9e" locType="sr" hash="844867668" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType=".C" rngLn="46">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: tm_tmp" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="." rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: tm_tmp" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType="." rngLn="49" />
        <ElDesc lineHash="-337297020" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="52" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="52" srcRngEndLn="53" desc="print_string(&quot;Please enter the start hour [0-23] > &quot;);" ElType="." rngLn="52">
          <ElDescList>
            <ElDesc lineHash="-206127679" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="54" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="54" srcRngEndLn="55" desc="return (printf(str));" ElType="." rngLn="54" />
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="1051372518" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="53" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="53" srcRngEndLn="54" desc="tm_tmp->tm_hour = get_input_digit();" ElType="!" rngLn="53">
          <ElDescList>
            <ElDesc lineHash="-695983806" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="18" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="18" srcRngEndLn="19" desc="char c;" ElType="." rngLn="18" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="19" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="19" srcRngEndLn="20" desc="int i;" ElType="." rngLn="19" />
            <ElDesc lineHash="-2004706563" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="20" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="20" srcRngEndLn="21" desc="char buf[BUF_SIZE];" ElType="." rngLn="20" />
            <ElDesc lineHash="-1663270807" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="38" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="38" srcRngEndLn="39" desc="++ index;" ElType="." rngLn="38" />
            <ElDesc lineHash="410470818" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="39" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="39" srcRngEndLn="40" desc="index %= 10;" ElType="." rngLn="39" />
            <ElDesc lineHash="-1384567970" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="buf[0] = (char)('0' + index);" ElType="." rngLn="40" />
            <ElDesc lineHash="1605700164" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="i = 1;" ElType="." rngLn="41" />
            <ElDesc lineHash="1793475976" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="buf[i] = '\0';" ElType="." rngLn="45" />
            <ElDesc lineHash="1849933771" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="return (atoi(buf));" ElType="." rngLn="46" />
            <ElDesc lineHash="125" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="47" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="47" srcRngEndLn="48" desc="}" ElType=".P" rngLn="47">
              <Anns>
                <Ann msg="Null value carrier: tm_tmp" kind="comment" />
                <Ann msg="Null pointer dereferencing point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;tm_tmp&quot; may possibly be null" ln="47" locFile="/build/../../../../../../../../stdinout.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="47" rule="MISRA2008-0_3_1_b" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="46" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="355833682" lang="cpp" violId="73c1b25e-73a1-3395-97b9-b7810d9bf90a" locEndPos="0" locEndLn="48" goals="0," locStartln="47" sev="5" locRef="4" tool="c++test" lineHash="125" unbViolId="583c5de2-9269-3896-b4d1-9dff052f6f00" locType="sr" hash="844867668" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType=".C" rngLn="46">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: tm_tmp" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="." rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: tm_tmp" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType="." rngLn="49" />
        <ElDesc lineHash="-337297020" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="52" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="52" srcRngEndLn="53" desc="print_string(&quot;Please enter the start hour [0-23] > &quot;);" ElType="." rngLn="52">
          <ElDescList>
            <ElDesc lineHash="-206127679" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="54" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="54" srcRngEndLn="55" desc="return (printf(str));" ElType="." rngLn="54" />
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="1051372518" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="53" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="53" srcRngEndLn="54" desc="tm_tmp->tm_hour = get_input_digit();" ElType="!" rngLn="53">
          <ElDescList>
            <ElDesc lineHash="-695983806" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="18" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="18" srcRngEndLn="19" desc="char c;" ElType="." rngLn="18" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="19" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="19" srcRngEndLn="20" desc="int i;" ElType="." rngLn="19" />
            <ElDesc lineHash="-2004706563" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="20" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="20" srcRngEndLn="21" desc="char buf[BUF_SIZE];" ElType="." rngLn="20" />
            <ElDesc lineHash="-1663270807" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="38" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="38" srcRngEndLn="39" desc="++ index;" ElType="." rngLn="38" />
            <ElDesc lineHash="410470818" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="39" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="39" srcRngEndLn="40" desc="index %= 10;" ElType="." rngLn="39" />
            <ElDesc lineHash="-1384567970" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="buf[0] = (char)('0' + index);" ElType="." rngLn="40" />
            <ElDesc lineHash="1605700164" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="i = 1;" ElType="." rngLn="41" />
            <ElDesc lineHash="1793475976" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="buf[i] = '\0';" ElType="." rngLn="45" />
            <ElDesc lineHash="1849933771" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="return (atoi(buf));" ElType="." rngLn="46" />
            <ElDesc lineHash="125" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="47" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="47" srcRngEndLn="48" desc="}" ElType=".P" rngLn="47">
              <Anns>
                <Ann msg="Null value carrier: tm_tmp" kind="comment" />
                <Ann msg="Null pointer dereferencing point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;tm_tmp&quot; may possibly be null" ln="47" locFile="/build/../../../../../../../../stdinout.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="47" rule="MISRA2012-DIR-4_1_b" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="46" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1212571797" lang="cpp" violId="da46d44c-2901-39b3-8ce1-3108617e9e1e" locEndPos="0" locEndLn="48" goals="0," locStartln="47" sev="2" locRef="4" tool="c++test" lineHash="125" unbViolId="f43621c8-8489-3799-9e1f-110d08319c52" locType="sr" hash="844867668" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType=".C" rngLn="46">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: tm_tmp" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="." rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: tm_tmp" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType="." rngLn="49" />
        <ElDesc lineHash="-337297020" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="52" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="52" srcRngEndLn="53" desc="print_string(&quot;Please enter the start hour [0-23] > &quot;);" ElType="." rngLn="52">
          <ElDescList>
            <ElDesc lineHash="-206127679" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="54" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="54" srcRngEndLn="55" desc="return (printf(str));" ElType="." rngLn="54" />
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="1051372518" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="53" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="53" srcRngEndLn="54" desc="tm_tmp->tm_hour = get_input_digit();" ElType="!" rngLn="53">
          <ElDescList>
            <ElDesc lineHash="-695983806" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="18" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="18" srcRngEndLn="19" desc="char c;" ElType="." rngLn="18" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="19" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="19" srcRngEndLn="20" desc="int i;" ElType="." rngLn="19" />
            <ElDesc lineHash="-2004706563" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="20" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="20" srcRngEndLn="21" desc="char buf[BUF_SIZE];" ElType="." rngLn="20" />
            <ElDesc lineHash="-1663270807" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="38" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="38" srcRngEndLn="39" desc="++ index;" ElType="." rngLn="38" />
            <ElDesc lineHash="410470818" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="39" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="39" srcRngEndLn="40" desc="index %= 10;" ElType="." rngLn="39" />
            <ElDesc lineHash="-1384567970" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="buf[0] = (char)('0' + index);" ElType="." rngLn="40" />
            <ElDesc lineHash="1605700164" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="i = 1;" ElType="." rngLn="41" />
            <ElDesc lineHash="1793475976" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="buf[i] = '\0';" ElType="." rngLn="45" />
            <ElDesc lineHash="1849933771" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="return (atoi(buf));" ElType="." rngLn="46" />
            <ElDesc lineHash="125" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="47" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="47" srcRngEndLn="48" desc="}" ElType=".P" rngLn="47">
              <Anns>
                <Ann msg="Null value carrier: tm_tmp" kind="comment" />
                <Ann msg="Null pointer dereferencing point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;tm_tmp&quot; may possibly be null" ln="47" locFile="/build/../../../../../../../../stdinout.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="47" rule="MISRAC2012-DIR_4_1-b" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/build/../../../../../../../../timer.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="46" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1806447918" lang="cpp" violId="0597b739-4b6d-376d-b9b2-7ed130db85f9" locEndPos="0" locEndLn="48" goals="0," locStartln="47" sev="2" locRef="4" tool="c++test" lineHash="125" unbViolId="5e13164d-6572-3cea-bb7f-fd2e1ab39f02" locType="sr" hash="844867668" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="621530644" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="int start_h, start_m, end_h, end_m;" ElType="." rngLn="40" />
        <ElDesc lineHash="-456882160" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="struct timer_record* the_record;" ElType="." rngLn="41" />
        <ElDesc lineHash="1079331828" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="42" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="42" srcRngEndLn="43" desc="time_t timer;" ElType="." rngLn="42" />
        <ElDesc lineHash="1350390768" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="43" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="43" srcRngEndLn="44" desc="struct tm* tm_tmp;" ElType="." rngLn="43" />
        <ElDesc lineHash="1705568950" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="timer = time(NULL);" ElType="." rngLn="45" />
        <ElDesc lineHash="-1526808077" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="tm_tmp = localtime(&amp;timer);" ElType=".C" rngLn="46">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: tm_tmp" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-527707354" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="48" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="48" srcRngEndLn="49" desc="the_record = (struct timer_record*)malloc(sizeof(struct timer_record));" ElType="." rngLn="48">
          <Anns>
            <Ann msg="Null value carrier: tm_tmp" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1340052799" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="49" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="49" srcRngEndLn="50" desc="memset(the_record, 0, sizeof(struct timer_record));" ElType="." rngLn="49" />
        <ElDesc lineHash="-337297020" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="52" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="52" srcRngEndLn="53" desc="print_string(&quot;Please enter the start hour [0-23] > &quot;);" ElType="." rngLn="52">
          <ElDescList>
            <ElDesc lineHash="-206127679" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="54" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="54" srcRngEndLn="55" desc="return (printf(str));" ElType="." rngLn="54" />
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="1051372518" locType="sr" srcRnghash="-275311578" locRef="3" srcRngFile="/build/../../../../../../../../timer.c" ln="53" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="53" srcRngEndLn="54" desc="tm_tmp->tm_hour = get_input_digit();" ElType="!" rngLn="53">
          <ElDescList>
            <ElDesc lineHash="-695983806" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="18" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="18" srcRngEndLn="19" desc="char c;" ElType="." rngLn="18" />
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="19" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="19" srcRngEndLn="20" desc="int i;" ElType="." rngLn="19" />
            <ElDesc lineHash="-2004706563" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="20" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="20" srcRngEndLn="21" desc="char buf[BUF_SIZE];" ElType="." rngLn="20" />
            <ElDesc lineHash="-1663270807" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="38" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="38" srcRngEndLn="39" desc="++ index;" ElType="." rngLn="38" />
            <ElDesc lineHash="410470818" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="39" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="39" srcRngEndLn="40" desc="index %= 10;" ElType="." rngLn="39" />
            <ElDesc lineHash="-1384567970" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="40" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="40" srcRngEndLn="41" desc="buf[0] = (char)('0' + index);" ElType="." rngLn="40" />
            <ElDesc lineHash="1605700164" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="41" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="41" srcRngEndLn="42" desc="i = 1;" ElType="." rngLn="41" />
            <ElDesc lineHash="1793475976" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="45" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="45" srcRngEndLn="46" desc="buf[i] = '\0';" ElType="." rngLn="45" />
            <ElDesc lineHash="1849933771" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="46" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="46" srcRngEndLn="47" desc="return (atoi(buf));" ElType="." rngLn="46" />
            <ElDesc lineHash="125" locType="sr" srcRnghash="844867668" locRef="4" srcRngFile="/build/../../../../../../../../stdinout.c" ln="47" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="47" srcRngEndLn="48" desc="}" ElType=".P" rngLn="47">
              <Anns>
                <Ann msg="Null value carrier: tm_tmp" kind="comment" />
                <Ann msg="Null pointer dereferencing point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Use // comments only" ln="49" locFile="/build/../../../../../../../../stdinout.c" locStartln="49" sev="3" auth="username" locRef="4" rule="HICPP-2_3_1-a" lnHash="1499" rule.header="Prefer C++ style comment" tool="c++test" lineHash="1499" unbViolId="a5bb1aa0-594b-3afb-835a-fe471e843631" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db1325cf-db25-3457-8814-426ac8df17de" locEndPos="1" locType="sr" hash="844867668" locEndLn="49" goals="0," />
    <StdViol msg="Use // comments only" ln="49" locFile="/build/../../../../../../../../stdinout.c" locStartln="49" sev="2" auth="username" locRef="4" rule="JSF-126" lnHash="1499" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="1499" unbViolId="f11cf3ab-8aae-37af-8b87-36c145003f70" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4da54163-5253-341c-abe2-99b1387f6b3d" locEndPos="1" locType="sr" hash="844867668" locEndLn="49" goals="0," />
    <StdViol msg="Use // comments only" ln="49" locFile="/build/../../../../../../../../stdinout.c" locStartln="49" sev="3" auth="username" locRef="4" rule="COMMENT-01" lnHash="1499" rule.header="Prefer C++ style comment" tool="c++test" lineHash="1499" unbViolId="51ab3aff-2bc0-31bb-be77-d5687318ea16" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e2f42d0-5368-36f8-96f3-40c668268dcd" locEndPos="1" locType="sr" hash="844867668" locEndLn="49" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="4" auth="username" locRef="4" rule="MISRA2008-3_9_2" lnHash="-1042560936" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1042560936" unbViolId="3221499c-a800-3276-88f7-be19cdc90b3e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cde27519-ec58-3dce-880d-de2300121ba7" locEndPos="1" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="3" auth="username" locRef="4" rule="MISRA-013" lnHash="-1042560936" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1042560936" unbViolId="57d140ec-7bc2-348d-b58f-5a362e1bfac0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00403a84-0d0e-3bb6-97ab-c6b26977f28a" locEndPos="1" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="3" auth="username" locRef="4" rule="CODSTA-223" lnHash="-1042560936" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1042560936" unbViolId="0d1318eb-e6c7-3758-b591-0b96cb045853" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="430d7b09-16f4-3d92-be8f-483e6a457ee0" locEndPos="1" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="-1042560936" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1042560936" unbViolId="41eb813f-de37-348c-95c2-9f09bb2573ef" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06c89109-fe79-306a-b018-383905aafe66" locEndPos="1" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="3" auth="username" locRef="4" rule="HICPP-7_1_6-b" lnHash="-1042560936" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-1042560936" unbViolId="6d8c3c31-2fd0-3afe-bb32-91755d3ce058" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f53ccc3d-9a49-319f-9741-9aa8c4e0e8a5" locEndPos="1" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="4" auth="username" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="-1042560936" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1042560936" unbViolId="3b7d0098-509c-32b1-94fc-39d96a675d55" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2eb3b526-9176-3441-8aea-3edd3362717d" locEndPos="1" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="3" auth="username" locRef="4" rule="MISRA2004-6_3_b" lnHash="-1042560936" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1042560936" unbViolId="bbe411e9-e0c7-3228-a1b0-907f49c7ba2b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0511924-b382-37c7-af9a-2230b01fbf8b" locEndPos="1" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="2" auth="username" locRef="4" rule="JSF-209_b" lnHash="-1042560936" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-1042560936" unbViolId="811b6409-f95f-3611-ba60-281a4ac67def" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e94507f-c7fd-313c-ba93-f7ad65522f09" locEndPos="1" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="4" auth="username" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="-1042560936" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1042560936" unbViolId="282ccd25-f592-3f55-a601-ab437d7c3eda" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="400e9519-b563-35f3-a3c8-41b45c1ee63a" locEndPos="1" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="3" auth="username" locRef="4" rule="HICPP-3_5_1-b" lnHash="-1042560936" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1042560936" unbViolId="03f23cfd-3b33-3c93-8fc9-f10d5439d09f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5cd6c65-de7b-3048-bf0c-6a44e0f8aa41" locEndPos="1" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="The 'print_string' function should be preceded by a comment that contains the '@brief' tag" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="3" auth="username" locRef="4" rule="COMMENT-14" lnHash="-1042560936" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1042560936" unbViolId="d2d70608-704a-397b-ae2c-330b34ad3526" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b05ab3d-0ea6-342f-9277-daae231f023c" locEndPos="5" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="The 'print_string' function should be preceded by a comment that contains the '@brief' tag" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="2" auth="username" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="-1042560936" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1042560936" unbViolId="575e0dfd-c8ee-3f73-8040-173d602dc0dd" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26fa1750-3e4e-3c16-bda2-2551c8d37d70" locEndPos="5" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="The 'str' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="3" auth="username" locRef="4" rule="COMMENT-14_b" lnHash="-1042560936" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1042560936" unbViolId="c724cba9-34d2-34f2-a5e6-de4ae431abba" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f9fe558-24f3-3c5e-bad5-239218658e0c" locEndPos="5" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="The 'str' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="2" auth="username" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="-1042560936" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1042560936" unbViolId="079db532-821c-3b14-8b44-4940e0fb4602" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d91ff6ad-76a8-3850-b8d4-8611ccd9b5d7" locEndPos="5" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="The 'print_string' function should be preceded by a comment that contains the '@return' tag" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="3" auth="username" locRef="4" rule="COMMENT-14_b" lnHash="-1042560936" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1042560936" unbViolId="c5669a90-f858-329e-b8d9-24cc935287fb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4fcb851e-421b-3611-8c09-f926110045cb" locEndPos="5" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="The 'print_string' function should be preceded by a comment that contains the '@return' tag" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="2" auth="username" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="-1042560936" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1042560936" unbViolId="756d4113-1f4b-3d0d-9559-6f97bb32acfb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e28a4de9-130c-36fb-b2a0-c4ea63688153" locEndPos="5" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="'print_string' shall be declared as unsigned int or signed int" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="3" auth="username" locRef="4" rule="PORT-13" lnHash="-1042560936" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-1042560936" unbViolId="76e9baff-855a-3135-b5d0-cfb78a4b00c6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7cfa925-8cc7-33b5-91c4-4ab18425b4e1" locEndPos="5" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'print_string'" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="3" auth="username" locRef="4" rule="FORMAT-28" lnHash="-1042560936" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-1042560936" unbViolId="4f85918a-f9f2-3c99-bd4c-0733688b3a59" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8338782b-51fd-3e8d-b6e4-afcda4a9cc30" locEndPos="5" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="Function 'print_string' has Cyclomatic Complexity value: 1" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="5" auth="username" locRef="4" rule="METRICS-29" lnHash="-1042560936" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-1042560936" unbViolId="438906cd-0363-3324-a543-e942060e228f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3046cec-81e7-3e16-bd45-84afa71e6910" locEndPos="5" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="Function 'print_string' has Essential Complexity value: 1" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="5" auth="username" locRef="4" rule="METRICS-33" lnHash="-1042560936" rule.header="Report Essential Complexity" tool="c++test" lineHash="-1042560936" unbViolId="ce740bf8-3dfb-3eca-9070-d35fb1993ed3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43f50c88-9dd3-3f29-88f6-c04682523418" locEndPos="5" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="The value of Halstead's delivered bugs (B) for function 'print_string' is 0.01" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="3" auth="username" locRef="4" rule="METRICS-43" lnHash="-1042560936" rule.header="Report the value of Halstead's delivered bugs (B) for a function" tool="c++test" lineHash="-1042560936" unbViolId="9cd29d53-64ea-3732-9abb-dae8b4777d8a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aacbd4aa-bb91-3a40-8b7f-e728d51592da" locEndPos="5" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="Naming convention not followed: print_string" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="3" auth="username" locRef="4" rule="NAMING-17" lnHash="-1042560936" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-1042560936" unbViolId="310d59d1-e1e3-34d6-8fde-178867ad3cc8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3609c6d1-d16b-3e66-855e-6fb99cc16e15" locEndPos="5" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="4" auth="username" locRef="4" rule="MISRA2008-3_9_2" lnHash="-1042560936" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1042560936" unbViolId="035aef74-0fb0-381c-a2f1-89288e0239a7" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36fe1e01-bc60-3e35-84c0-219d769a21d3" locEndPos="18" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="3" auth="username" locRef="4" rule="MISRA-013" lnHash="-1042560936" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1042560936" unbViolId="9e2e4685-9f23-30c6-bfd2-9b6bb5f274ef" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a92a827a-6af7-3c1e-b97d-7eed9c1c0207" locEndPos="18" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="3" auth="username" locRef="4" rule="CODSTA-223" lnHash="-1042560936" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1042560936" unbViolId="03132769-69f6-342c-b1a6-520015fbbc3b" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bcd70ebe-e397-35d0-80af-47461b353794" locEndPos="18" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="-1042560936" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1042560936" unbViolId="f5427794-7d55-3813-864b-d5154c71648e" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85c4e959-0c50-343b-9ba0-98aeeeb47bdd" locEndPos="18" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared: str" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="3" auth="username" locRef="4" rule="CODSTA-94" lnHash="-1042560936" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1042560936" unbViolId="9d27b30e-33b4-361e-8ffc-8364a35ddd42" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef015bd1-d95f-3af7-bbbd-4a14e5af155c" locEndPos="24" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="The parameter of pointer type is declared: str" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="3" auth="username" locRef="4" rule="CODSTA-95" lnHash="-1042560936" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1042560936" unbViolId="68017473-7130-3f9d-b6be-f60b08b4806e" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9131e1cc-2aa2-3d2e-94ac-9bdfbd1746d3" locEndPos="24" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="Declare parameter 'str' as const" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="3" auth="username" locRef="4" rule="CERT_C-DCL00-a" lnHash="-1042560936" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1042560936" unbViolId="48cfe2a9-ba94-3cda-a040-b043e6d149d8" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8b9d0d9-a5ff-3500-8470-33f544383c4d" locEndPos="24" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="Declare parameter 'str' as const" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="2" auth="username" locRef="4" rule="AUTOSAR-A7_1_1-a" lnHash="-1042560936" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1042560936" unbViolId="6fb21e44-3ebb-3dee-b5bb-ace7f22bb78f" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cefd381b-7bf1-3113-8899-50242830a475" locEndPos="24" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="Declare parameter 'str' as const" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="2" auth="username" locRef="4" rule="MISRA2008-7_1_1" lnHash="-1042560936" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="-1042560936" unbViolId="93477dc8-c88e-32b0-9bb6-7dd81c169ab2" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95c4c311-2cc5-355f-bc91-0c152a9a5b9d" locEndPos="24" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="Declare parameter 'str' as const" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-53" lnHash="-1042560936" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1042560936" unbViolId="401ce117-9613-3dee-a986-6a8da5b8b1bd" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="739e0846-a4a3-3663-b25d-f2ce5d52a41e" locEndPos="24" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="Declare parameter 'str' as const" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="3" auth="username" locRef="4" rule="HICPP-7_1_2-a" lnHash="-1042560936" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1042560936" unbViolId="ffd2c869-fa40-3899-928f-c1800231c399" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="179682a4-b400-3436-9589-9d22e0264458" locEndPos="24" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="Parameter 'str' is not validated before use" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="3" auth="username" locRef="4" rule="CERT_C-API00-a" lnHash="-1042560936" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1042560936" unbViolId="cc966387-9a3d-3018-9e95-e7c0e6c6f44c" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97b0d2b5-bc8a-337f-9050-7ef16e0fd693" locEndPos="24" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="Parameter 'str' is not validated before use" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="3" auth="username" locRef="4" rule="CODSTA-86" lnHash="-1042560936" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1042560936" unbViolId="ca8ae65a-115c-39fc-84fa-94f59223bdc9" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc6e6e48-ff68-3c88-85f2-da534be73a6a" locEndPos="24" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="Pass parameter &quot;str&quot; with const specifier" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="2" auth="username" locRef="4" rule="AUTOSAR-M7_1_2-b" lnHash="-1042560936" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1042560936" unbViolId="818bc342-f7e4-32fa-b32c-cc259cede497" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a7d8613-0c0c-3d77-9213-eb88f793f595" locEndPos="24" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="Pass parameter &quot;str&quot; with const specifier" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="4" auth="username" locRef="4" rule="MISRAC2012-RULE_8_13-a" lnHash="-1042560936" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1042560936" unbViolId="12297e90-cfde-3052-811f-c4cb89b56f5f" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3160b84b-02a2-3e4d-9e87-4d8de0e23f7b" locEndPos="24" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="Pass parameter &quot;str&quot; with const specifier" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="3" auth="username" locRef="4" rule="CERT_C-DCL13-a" lnHash="-1042560936" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1042560936" unbViolId="5c44d7cc-554c-3cce-97ca-664b8a243d21" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0692f26-13c6-350d-b1f0-828912d6b340" locEndPos="24" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="Pass parameter &quot;str&quot; with const specifier" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="3" auth="username" locRef="4" rule="MISRA2004-16_7" lnHash="-1042560936" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1042560936" unbViolId="aa09337a-443f-32ae-a2d3-9cf273558dd5" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc9e44bd-1340-3e65-bd0e-41dd66e0cd45" locEndPos="24" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="Pass parameter &quot;str&quot; with const specifier" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="4" auth="username" locRef="4" rule="MISRA2012-RULE-8_13_a" lnHash="-1042560936" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1042560936" unbViolId="a67fb2cf-69fa-3ff3-93ab-a073448ff80f" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a1a9834-ec22-3411-9ef9-c57180db724d" locEndPos="24" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="Pass parameter &quot;str&quot; with const specifier" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="4" auth="username" locRef="4" rule="JSF-118" lnHash="-1042560936" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1042560936" unbViolId="53087916-12f0-393c-99de-8db0684a341c" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59258b8e-3f16-3e93-ae4e-47d6a0635fcc" locEndPos="24" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="Pass parameter &quot;str&quot; with const specifier" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="2" auth="username" locRef="4" rule="MISRA2008-7_1_2_a" lnHash="-1042560936" rule.header="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" tool="c++test" lineHash="-1042560936" unbViolId="8ff6483b-cd83-3d87-afbf-4c511782ddad" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="907abad3-9fea-3346-8fb0-4ce9faa57f63" locEndPos="24" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="The 'str' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="3" auth="username" locRef="4" rule="NAMING-HN-05" lnHash="-1042560936" rule.header="Hungarian notation for byte pointer, array, or reference types" tool="c++test" lineHash="-1042560936" unbViolId="9e45a97e-1352-3aca-80f3-07f8636257a8" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="01931948-c6d2-3889-9d58-c19237336ca5" locEndPos="24" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="The 'str' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="3" auth="username" locRef="4" rule="NAMING-HN-09" lnHash="-1042560936" rule.header="Hungarian notation for char pointer, array, or reference types" tool="c++test" lineHash="-1042560936" unbViolId="dae23b02-a4a6-3a23-956e-80e7ce4b0b20" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a67cb18-6b8a-35c4-8079-8d88eb33edb5" locEndPos="24" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="The 'str' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="3" auth="username" locRef="4" rule="NAMING-HN-10" lnHash="-1042560936" rule.header="Hungarian notation for char pointer or reference types" tool="c++test" lineHash="-1042560936" unbViolId="5b130dea-de4d-39e8-8ced-c96d06c3f700" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d77d2521-0b97-3e71-87f4-6756e68c0d8b" locEndPos="24" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="The 'str' identifier should have the 'p' prefix" ln="52" locFile="/build/../../../../../../../../stdinout.c" locStartln="52" sev="3" auth="username" locRef="4" rule="NAMING-HN-34" lnHash="-1042560936" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="-1042560936" unbViolId="fcd53d30-03f8-3bb9-851e-e2fb90679619" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c90997e6-879e-3b13-ad9d-5dc069f37e7c" locEndPos="24" locType="sr" hash="844867668" locEndLn="52" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="53" locFile="/build/../../../../../../../../stdinout.c" locStartln="53" sev="3" auth="username" locRef="4" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="cb619278-e007-3a4c-be79-6ae3812748f2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3361e7ea-724a-3d07-b6f5-c7e357c08e45" locEndPos="1" locType="sr" hash="844867668" locEndLn="53" goals="0," />
    <StdViol msg="Remove spaces between the 'return' operator and the opening parenthesis" ln="54" locFile="/build/../../../../../../../../stdinout.c" locStartln="54" sev="3" auth="username" locRef="4" rule="FORMAT-23" lnHash="-206127679" rule.header="There shall be no white spaces between the 'return' statement or the 'sizeof' operator and the following opening parenthesis" tool="c++test" lineHash="-206127679" unbViolId="432fd0a7-244e-3d8c-aa78-6f0c3b8344ac" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4828d65d-6326-383d-a337-dab0b08b1a88" locEndPos="5" locType="sr" hash="844867668" locEndLn="54" goals="0," />
    <StdViol msg="Do not call the 'printf' function with only one argument" ln="54" locFile="/build/../../../../../../../../stdinout.c" locStartln="54" sev="2" auth="username" locRef="4" rule="SECURITY-05" lnHash="-206127679" rule.header="Avoid calling functions printf/wprintf with only one argument other than string constant" tool="c++test" lineHash="-206127679" unbViolId="7436cee5-3319-38a3-9ca3-5872fe39e78d" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0b64ecf-d980-30ea-aaa3-3704c48dfa2a" locEndPos="13" locType="sr" hash="844867668" locEndLn="54" goals="0," />
    <StdViol msg="Do not call the 'printf' function with only one argument" ln="54" locFile="/build/../../../../../../../../stdinout.c" locStartln="54" sev="2" auth="username" locRef="4" rule="AUTOSAR-A27_0_1-a" lnHash="-206127679" rule.header="Avoid calling functions printf/wprintf with only one argument other than string constant" tool="c++test" lineHash="-206127679" unbViolId="66039222-ea9f-3cc0-a446-26298ea5f6e2" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4aa76e14-8dc7-3503-98dc-a8880ba0e337" locEndPos="13" locType="sr" hash="844867668" locEndLn="54" goals="0," />
    <StdViol msg="Do not call the 'printf' function with only one argument" ln="54" locFile="/build/../../../../../../../../stdinout.c" locStartln="54" sev="1" auth="username" locRef="4" rule="CERT_C-FIO30-a" lnHash="-206127679" rule.header="Avoid calling functions printf/wprintf with only one argument other than string constant" tool="c++test" lineHash="-206127679" unbViolId="f90cb806-752a-373d-bac1-f4b1bac68816" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dcfcd2c0-2417-340b-a4d3-fa61181eb13c" locEndPos="13" locType="sr" hash="844867668" locEndLn="54" goals="0," />
    <StdViol msg="Usage of 'printf' function is not allowed" ln="54" locFile="/build/../../../../../../../../stdinout.c" locStartln="54" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_21_6-a" lnHash="-206127679" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="-206127679" unbViolId="b25b1cd2-f81f-3d4f-bee2-85c4c00752e7" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52196286-2e5c-3b9d-9d8a-b40d146effda" locEndPos="13" locType="sr" hash="844867668" locEndLn="54" goals="0," />
    <StdViol msg="Usage of 'printf' function is not allowed" ln="54" locFile="/build/../../../../../../../../stdinout.c" locStartln="54" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-21_6" lnHash="-206127679" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="-206127679" unbViolId="f8400590-a5b6-3a13-870e-5acf93d1db73" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88c2e2aa-8cac-32e5-b96f-7b87b9bf03c5" locEndPos="13" locType="sr" hash="844867668" locEndLn="54" goals="0," />
    <StdViol msg="Usage of 'printf' function is not allowed" ln="54" locFile="/build/../../../../../../../../stdinout.c" locStartln="54" sev="3" auth="username" locRef="4" rule="CERT_C-ERR02-a" lnHash="-206127679" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="-206127679" unbViolId="9d3ba6cd-acd7-35c6-b93a-60240cdfb5ef" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ab440f1-f601-3842-bd07-bf5f3728ef61" locEndPos="13" locType="sr" hash="844867668" locEndLn="54" goals="0," />
    <StdViol msg="Usage of 'printf' function is not allowed" ln="54" locFile="/build/../../../../../../../../stdinout.c" locStartln="54" sev="3" auth="username" locRef="4" rule="CODSTA-110" lnHash="-206127679" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="-206127679" unbViolId="2567eaec-73ce-352f-bc35-be85c0154d38" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b1aa24b-e7a1-3bc8-bfe2-165815470e89" locEndPos="13" locType="sr" hash="844867668" locEndLn="54" goals="0," />
    <StdViol msg="Usage of 'printf' function is not allowed" ln="54" locFile="/build/../../../../../../../../stdinout.c" locStartln="54" sev="2" auth="username" locRef="4" rule="CERT_C-ERR07-b" lnHash="-206127679" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="-206127679" unbViolId="f5c0ce35-8cc2-3dd1-8269-f0bb32533b44" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13597cca-5aaa-37e7-8253-99cce60d28b7" locEndPos="13" locType="sr" hash="844867668" locEndLn="54" goals="0," />
    <StdViol msg="Verify data passed as format parameter to function 'printf'" ln="54" locFile="/build/../../../../../../../../stdinout.c" locStartln="54" sev="1" auth="username" locRef="4" rule="APSC_DV-002550-d" lnHash="-206127679" rule.header="Never use unfiltered data from an untrusted user as the format parameter" tool="c++test" lineHash="-206127679" unbViolId="08b9550e-6fee-3738-909a-f465b4d319a5" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c122f7db-ee71-3659-aacb-49f8d8c95575" locEndPos="13" locType="sr" hash="844867668" locEndLn="54" goals="0," />
    <StdViol msg="Verify data passed as format parameter to function 'printf'" ln="54" locFile="/build/../../../../../../../../stdinout.c" locStartln="54" sev="2" auth="username" locRef="4" rule="APSC_DV-002520-d" lnHash="-206127679" rule.header="Never use unfiltered data from an untrusted user as the format parameter" tool="c++test" lineHash="-206127679" unbViolId="f461b27a-8676-3b92-941b-d1af79c3b695" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fca36d1c-19b5-3d16-b99d-c6cdc21fae4c" locEndPos="13" locType="sr" hash="844867668" locEndLn="54" goals="0," />
    <StdViol msg="Verify data passed as format parameter to function 'printf'" ln="54" locFile="/build/../../../../../../../../stdinout.c" locStartln="54" sev="2" auth="username" locRef="4" rule="APSC_DV-002530-d" lnHash="-206127679" rule.header="Never use unfiltered data from an untrusted user as the format parameter" tool="c++test" lineHash="-206127679" unbViolId="376286a1-6f91-3e58-be0f-7abfb43ce76f" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bac819f0-c7ef-33aa-bee7-bde08d6e82c4" locEndPos="13" locType="sr" hash="844867668" locEndLn="54" goals="0," />
    <StdViol msg="Verify data passed as format parameter to function 'printf'" ln="54" locFile="/build/../../../../../../../../stdinout.c" locStartln="54" sev="2" auth="username" locRef="4" rule="SECURITY-36" lnHash="-206127679" rule.header="Never use unfiltered data from an untrusted user as the format parameter" tool="c++test" lineHash="-206127679" unbViolId="f3e24595-68be-3dfd-a1ba-327e8ab5e2e1" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70027d2d-dd86-3b1f-b394-b980bf253d1c" locEndPos="13" locType="sr" hash="844867668" locEndLn="54" goals="0," />
    <StdViol msg="Verify data passed as format parameter to function 'printf'" ln="54" locFile="/build/../../../../../../../../stdinout.c" locStartln="54" sev="1" auth="username" locRef="4" rule="APSC_DV-002560-d" lnHash="-206127679" rule.header="Never use unfiltered data from an untrusted user as the format parameter" tool="c++test" lineHash="-206127679" unbViolId="ff38f000-0d66-3bbe-9560-6cfe84eeb78b" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5579f73f-0b5e-3f45-ac5b-9e88d484d107" locEndPos="13" locType="sr" hash="844867668" locEndLn="54" goals="0," />
    <StdViol msg="Verify data passed as format parameter to function 'printf'" ln="54" locFile="/build/../../../../../../../../stdinout.c" locStartln="54" sev="1" auth="username" locRef="4" rule="CERT_C-FIO30-c" lnHash="-206127679" rule.header="Never use unfiltered data from an untrusted user as the format parameter" tool="c++test" lineHash="-206127679" unbViolId="72be2cf9-b1b0-340a-aed7-a04a35e3127a" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9fc8ee1-df3d-3d8e-851d-63aa9a9271ca" locEndPos="13" locType="sr" hash="844867668" locEndLn="54" goals="0," /></StdViols>
      <TestedFilesDetails>
         <Total name="Total (Suppressed)" supp="0" total="2428">
            <Project id="build" name="build" supp="0" total="2428">
               <Res name=".." supp="0" total="2428">
                  <Res name=".." supp="0" total="2428">
                     <Res name=".." supp="0" total="2428">
                        <Res name=".." supp="0" total="2428">
                           <Res name=".." supp="0" total="2428">
                              <Res name=".." supp="0" total="2428">
                                 <Res name=".." supp="0" total="2428">
                                    <Res name=".." supp="0" total="2428">
                                       <Res loc="/build/../../../../../../../../clock.c" locRef="1" locType="sr" name="clock.c" supp="0" total="170" />
                                       <Res loc="/build/../../../../../../../../driver.c" locRef="2" locType="sr" name="driver.c" supp="0" total="679" />
                                       <Res loc="/build/../../../../../../../../timer.c" locRef="3" locType="sr" name="timer.c" supp="0" total="1295" />
                                       <Res loc="/build/../../../../../../../../stdinout.c" locRef="4" locType="sr" name="stdinout.c" supp="0" total="284" />
                                    </Res>
                                 </Res>
                              </Res>
                           </Res>
                        </Res>
                     </Res>
                  </Res>
               </Res>
            </Project>
         </Total>
      </TestedFilesDetails>
   </CodingStandards>
   <Statistics>

   </Statistics>
</ResultsSession>
