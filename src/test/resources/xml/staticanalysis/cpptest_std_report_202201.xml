<?xml version='1.0' encoding='UTF-8'?>
<ResultsSession buildId="FlowAnalysisCpp-2023-04-13" climode="true" execEnv="win32_x86_64" hasViols="true" id="1683492738565" lang="en_US" machine="
machine-name" prjModule="flowanalysiscpp" project="FlowAnalysisCpp" tag="cpptest_settings-flowanalysiscpp-${scontrol_branch}-win32_x86_64" time="2023-04-13T13:44:15+08:00" toolDispName="C/C++test" toolId="c++test" toolName="DTP Engine for C/C++" toolVer="2022.1.0" user="username">
   <TestConfig machine="machine-name" name="cpptest_settings" pseudoUrl="conf/std/cpptest_settings.properties" user="username" />
   <Authors>
      <Author id="dev1" name="username" />
   </Authors>
   <Analyzers>
      <Analyzer id="com.parasoft.xtest.scope.analyzer" name="Scope Analyzer" ver="10.6.0.20220510" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.code" name="Parasoft C/C++ Code Analyzer" ver="10.6.0.20220614B1716" />
      <Analyzer id="com.parasoft.xtest.dupcode.parser" name="Code Duplication Parser" ver="10.6.0.20220510" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.pattern" name="Parasoft C/C++ Static Analyzer" ver="10.6.0.20220614B1716" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.flow" name="Parasoft C/C++ Flow Analyzer" ver="10.6.0.20220527B3558" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.metrics" name="Parasoft C/C++ Metrics Analyzer" ver="10.6.0.20220614B1716" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.dupcode" name="Code Duplication Detector" ver="10.6.0.20220510" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.global" name="Parasoft C/C++ Global Static Analyzer" ver="10.6.0.20220614B1716" />
   </Analyzers>
   <VersionInfos>
      <StorageInfo ownerId="" resultId="ISetupResult" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IExecutionViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IFunctionalViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="" resultId="IChangeImpactViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IUnitTestViolation" ver="1" ver10x="1" />
   </VersionInfos>
   <Goals tsks="50">

   </Goals>
   <Metrics>
      <Metric avg="0" disp="true" id="METRIC.CBO" max="0" min="0" name="Coupling Between Objects" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="flowanalysiscpp" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="1.727" disp="true" id="METRIC.CC" max="3" min="1" name="McCabe Cyclomatic Complexity" noi="11" stddev="0.862">
         <Info avg="1.727" disp="true" elem="flowanalysiscpp" max="3" min="1" noi="11" stddev="0.862" />
      </Metric>
      <Metric avg="0.028" disp="true" id="METRIC.CLLOCRIF" max="0.114" min="0" name="Comment/Logical Lines in Files" noi="4" stddev="0.049">
         <Info avg="0.028" disp="true" elem="flowanalysiscpp" max="0.114" min="0" noi="4" stddev="0.049" />
      </Metric>
      <Metric avg="0.22" disp="true" id="METRIC.CLLOCRIM" max="1" min="0" name="Comment/Logical Lines in Methods" noi="10" stddev="0.394">
         <Info avg="0.22" disp="true" elem="flowanalysiscpp" max="1" min="0" noi="10" stddev="0.394" />
      </Metric>
      <Metric avg="0.273" disp="true" id="METRIC.DIF" max="1" min="0" name="Depth of Nested 'if' Statements" noi="11" stddev="0.445">
         <Info avg="0.273" disp="true" elem="flowanalysiscpp" max="1" min="0" noi="11" stddev="0.445" />
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.ECC" max="1" min="1" name="Essential Cyclomatic Complexity" noi="11" stddev="0">
         <Info avg="1" disp="true" elem="flowanalysiscpp" max="1" min="1" noi="11" stddev="0" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.FO" max="0" min="0" name="Fan Out" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="flowanalysiscpp" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="5.938" disp="true" id="METRIC.HDIFM" max="16.333" min="1.5" name="Halstead Difficulty" noi="11" stddev="4.48">
         <Info avg="5.938" disp="true" elem="flowanalysiscpp" max="16.333" min="1.5" noi="11" stddev="4.48" />
      </Metric>
      <Metric avg="1255.953" disp="true" id="METRIC.HEFM" max="4452.883" min="29.477" name="Halstead Effort" noi="11" stddev="1479.851">
         <Info avg="1255.953" disp="true" elem="flowanalysiscpp" max="4452.883" min="29.477" noi="11" stddev="1479.851" />
      </Metric>
      <Metric avg="25.634" disp="true" id="METRIC.HICM" max="57.125" min="12.687" name="Halstead Intelligent Content" noi="11" stddev="16.172">
         <Info avg="25.634" disp="true" elem="flowanalysiscpp" max="57.125" min="12.687" noi="11" stddev="16.172" />
      </Metric>
      <Metric avg="32.455" disp="true" id="METRIC.HLENM" max="62" min="7" name="Halstead Program Length" noi="11" stddev="20.237">
         <Info avg="32.455" disp="true" elem="flowanalysiscpp" max="62" min="7" noi="11" stddev="20.237" />
      </Metric>
      <Metric avg="0.293" disp="true" id="METRIC.HLEVM" max="0.667" min="0.061" name="Halstead Program Level" noi="11" stddev="0.199">
         <Info avg="0.293" disp="true" elem="flowanalysiscpp" max="0.667" min="0.061" noi="11" stddev="0.199" />
      </Metric>
      <Metric avg="0.033" disp="true" id="METRIC.HNOBM" max="0.09" min="0.003" name="Halstead Number of Bugs" noi="11" stddev="0.03">
         <Info avg="0.033" disp="true" elem="flowanalysiscpp" max="0.09" min="0.003" noi="11" stddev="0.03" />
      </Metric>
      <Metric avg="69.775" disp="true" id="METRIC.HTTPM" max="247.382" min="1.638" name="Halstead Time to Program" noi="11" stddev="82.214">
         <Info avg="69.775" disp="true" elem="flowanalysiscpp" max="247.382" min="1.638" noi="11" stddev="82.214" />
      </Metric>
      <Metric avg="18.455" disp="true" id="METRIC.HVOCM" max="37" min="7" name="Halstead Program Vocabulary" noi="11" stddev="9.764">
         <Info avg="18.455" disp="true" elem="flowanalysiscpp" max="37" min="7" noi="11" stddev="9.764" />
      </Metric>
      <Metric avg="145.589" disp="true" id="METRIC.HVOLM" max="307.16" min="19.651" name="Halstead Program Volume" noi="11" stddev="107.517">
         <Info avg="145.589" disp="true" elem="flowanalysiscpp" max="307.16" min="19.651" noi="11" stddev="107.517" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.IDOC" max="0" min="0" name="Inheritance Depth of Class" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="flowanalysiscpp" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.LCOM" max="0" min="0" name="Lack of Cohesion" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="flowanalysiscpp" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="1.727" disp="true" id="METRIC.MCC" max="3" min="1" name="Modified Cyclomatic Complexity" noi="11" stddev="0.862">
         <Info avg="1.727" disp="true" elem="flowanalysiscpp" max="3" min="1" noi="11" stddev="0.862" />
      </Metric>
      <Metric avg="171" disp="true" id="METRIC.MI" max="171" min="171" name="Maintainability Index" noi="1" stddev="0">
         <Info avg="171" disp="true" elem="flowanalysiscpp" max="171" min="171" noi="1" stddev="0" />
      </Metric>
      <Metric avg="0.727" disp="true" id="METRIC.NBD" max="2" min="0" name="Nested Blocks Depth" noi="11" stddev="0.862">
         <Info avg="0.727" disp="true" elem="flowanalysiscpp" max="2" min="0" noi="11" stddev="0.862" />
      </Metric>
      <Metric avg="9.75" disp="true" id="METRIC.NOBLIF" max="33" min="1" name="Blank Lines in Files" noi="4" stddev="13.442">
         <Info avg="9.75" disp="true" elem="flowanalysiscpp" max="33" min="1" noi="4" stddev="13.442" />
      </Metric>
      <Metric avg="0.182" disp="true" id="METRIC.NOBLIM" max="1" min="0" name="Blank Lines in Methods" noi="11" stddev="0.386">
         <Info avg="0.182" disp="true" elem="flowanalysiscpp" max="1" min="0" noi="11" stddev="0.386" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.NOBLIT" max="0" min="0" name="Blank Lines in Types" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="flowanalysiscpp" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.NOC" max="1" min="1" name="Number of Classes" noi="1" stddev="0">
         <Info avg="1" disp="true" elem="flowanalysiscpp" max="1" min="1" noi="1" stddev="0" />
      </Metric>
      <Metric avg="1.25" disp="true" id="METRIC.NOCLIF" max="5" min="0" name="Comment Lines in Files" noi="4" stddev="2.165">
         <Info avg="1.25" disp="true" elem="flowanalysiscpp" max="5" min="0" noi="4" stddev="2.165" />
      </Metric>
      <Metric avg="0.455" disp="true" id="METRIC.NOCLIM" max="2" min="0" name="Comment Lines in Methods" noi="11" stddev="0.656">
         <Info avg="0.455" disp="true" elem="flowanalysiscpp" max="2" min="0" noi="11" stddev="0.656" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.NOCLIT" max="0" min="0" name="Comment Lines in Types" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="flowanalysiscpp" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.NOF" max="1" min="1" name="Number of Files" noi="4" stddev="0">
         <Info avg="1" disp="true" elem="flowanalysiscpp" max="1" min="1" noi="4" stddev="0" />
      </Metric>
      <Metric avg="14.25" disp="true" id="METRIC.NOLLOCIF" max="44" min="1" name="Logical Lines in Files" noi="4" stddev="17.311">
         <Info avg="14.25" disp="true" elem="flowanalysiscpp" max="44" min="1" noi="4" stddev="17.311" />
      </Metric>
      <Metric avg="5.182" disp="true" id="METRIC.NOLLOCIM" max="12" min="0" name="Logical Lines in Methods" noi="11" stddev="4.174">
         <Info avg="5.182" disp="true" elem="flowanalysiscpp" max="12" min="0" noi="11" stddev="4.174" />
      </Metric>
      <Metric avg="2.909" disp="true" id="METRIC.NOMCIM" max="10" min="0" name="Method Calls In Methods" noi="11" stddev="3.088">
         <Info avg="2.909" disp="true" elem="flowanalysiscpp" max="10" min="0" noi="11" stddev="3.088" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.NOMIT" max="0" min="0" name="Number of Methods in Types" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="flowanalysiscpp" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="1.182" disp="true" id="METRIC.NOPAR" max="2" min="0" name="Parameters of Methods" noi="11" stddev="0.716">
         <Info avg="1.182" disp="true" elem="flowanalysiscpp" max="2" min="0" noi="11" stddev="0.716" />
      </Metric>
      <Metric avg="46.75" disp="true" id="METRIC.NOPLIF" max="152" min="6" name="Physical Lines in Files" noi="4" stddev="60.866">
         <Info avg="46.75" disp="true" elem="flowanalysiscpp" max="152" min="6" noi="4" stddev="60.866" />
      </Metric>
      <Metric avg="8.727" disp="true" id="METRIC.NOPLIM" max="17" min="4" name="Physical Lines in Methods" noi="11" stddev="4.35">
         <Info avg="8.727" disp="true" elem="flowanalysiscpp" max="17" min="4" noi="11" stddev="4.35" />
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.NOPLIT" max="1" min="1" name="Physical Lines in Types" noi="1" stddev="0">
         <Info avg="1" disp="true" elem="flowanalysiscpp" max="1" min="1" noi="1" stddev="0" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.NOPRIVMIT" max="0" min="0" name="Private Members of Types" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="flowanalysiscpp" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.NOPROTMIT" max="0" min="0" name="Protected Members of Types" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="flowanalysiscpp" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.NOPUBMIT" max="0" min="0" name="Public Members of Types" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="flowanalysiscpp" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="0.636" disp="true" id="METRIC.NORET" max="1" min="0" name="Number of Returns in Methods" noi="11" stddev="0.481">
         <Info avg="0.636" disp="true" elem="flowanalysiscpp" max="1" min="0" noi="11" stddev="0.481" />
      </Metric>
      <Metric avg="35.75" disp="true" id="METRIC.NOSLIF" max="114" min="5" name="Source Lines in Files" noi="4" stddev="45.273">
         <Info avg="35.75" disp="true" elem="flowanalysiscpp" max="114" min="5" noi="4" stddev="45.273" />
      </Metric>
      <Metric avg="8.091" disp="true" id="METRIC.NOSLIM" max="16" min="3" name="Source Lines in Methods" noi="11" stddev="4.144">
         <Info avg="8.091" disp="true" elem="flowanalysiscpp" max="16" min="3" noi="11" stddev="4.144" />
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.NOSLIT" max="1" min="1" name="Source Lines in Types" noi="1" stddev="0">
         <Info avg="1" disp="true" elem="flowanalysiscpp" max="1" min="1" noi="1" stddev="0" />
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.NOT" max="1" min="1" name="Number of Types" noi="1" stddev="0">
         <Info avg="1" disp="true" elem="flowanalysiscpp" max="1" min="1" noi="1" stddev="0" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.RFC" max="0" min="0" name="Response for Class" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="flowanalysiscpp" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="1.727" disp="true" id="METRIC.SCC" max="3" min="1" name="Strict Cyclomatic Complexity" noi="11" stddev="0.862">
         <Info avg="1.727" disp="true" elem="flowanalysiscpp" max="3" min="1" noi="11" stddev="0.862" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.WMC" max="0" min="0" name="Weighted Methods of Class" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="flowanalysiscpp" max="0" min="0" noi="1" stddev="0" />
      </Metric>
   </Metrics>
   <Scope>
      <Repositories />
      <Locations>
         <Loc auth="username" hash="-1257393797" locRef="1" projId="flowanalysiscpp" projPath="/flowanalysiscpp" project="flowanalysiscpp" resProjPath="NullPointer.cpp" totLns="14" uri="file://machine-name/D:/Parasoft%20Findings/VSTS/BitBucket/flowanalysiscpp/NullPointer.cpp" />
         <Loc auth="username" hash="-1665970746" locRef="2" projId="flowanalysiscpp" projPath="/flowanalysiscpp" project="flowanalysiscpp" resProjPath="DivisionByZero.cpp" totLns="6" uri="file://machine-name/D:/Parasoft%20Findings/VSTS/BitBucket/flowanalysiscpp/DivisionByZero.cpp" />
         <Loc auth="username" hash="1013754779" locRef="3" projId="flowanalysiscpp" projPath="/flowanalysiscpp" project="flowanalysiscpp" resProjPath="MemoryLeak.cpp" totLns="15" uri="file://machine-name/D:/Parasoft%20Findings/VSTS/BitBucket/flowanalysiscpp/MemoryLeak.cpp" />
         <Loc auth="username" hash="-1769734618" locRef="4" projId="flowanalysiscpp" projPath="/flowanalysiscpp" project="flowanalysiscpp" resProjPath="DeadLock.cpp" totLns="152" uri="file://machine-name/D:/Parasoft%20Findings/VSTS/BitBucket/flowanalysiscpp/DeadLock.cpp" />
      </Locations>
   </Scope>

  <SetupProblems />

   <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:16">
      <Projects>
         <Project bdCheckedFiles="0" bdTotalFiles="0" checkedFiles="4" checkedLns="187" id="flowanalysiscpp" name="flowanalysiscpp" qfixErrs="0" suppErrs="0" totErrs="2431" totFiles="4" totLns="187" />
      </Projects>


      <Rules>
         <CategoriesList>
            <Category authTot="0;" authUrg="0;" desc="DISA ASD STIG" name="APSC_DV" rules="104" total="0">
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001850 The application must not display passwords/PINs as clear text." name="APSC_DV-001850" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001750 The application must transmit only cryptographically-protected passwords." name="APSC_DV-001750" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000480 The application must enforce approved authorizations for controlling the flow of information within the system based on organization-defined information flow control policies." name="APSC_DV-000480" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000160 The application must implement DoD-approved encryption to protect the confidentiality of remote access sessions." name="APSC_DV-000160" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002460 The application must maintain the confidentiality and integrity of information during preparation for transmission." name="APSC_DV-002460" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-002560 The application must not be subject to input handling vulnerabilities." name="APSC_DV-002560" rules="11" total="1" />
               <Category authTot="3;" authUrg="2;" desc="APSC_DV-003110 The application must not contain embedded authentication data." name="APSC_DV-003110" rules="1" total="3" />
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-002000 The application must terminate all network connections associated with a communications session at the end of the session." name="APSC_DV-002000" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002440 The application must protect the confidentiality and integrity of transmitted information." name="APSC_DV-002440" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002540 The application must not be vulnerable to SQL Injection." name="APSC_DV-002540" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000500 The application must prevent non-privileged users from executing privileged functions to include disabling, circumventing, or altering implemented security safeguards/countermeasures." name="APSC_DV-000500" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001995 The application must not be vulnerable to race conditions." name="APSC_DV-001995" rules="9" total="0" />
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-002520 The application must protect from canonical representation vulnerabilities." name="APSC_DV-002520" rules="11" total="1" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-003235 The application must not be subject to error handling vulnerabilities." name="APSC_DV-003235" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002400 The application must restrict the ability to launch Denial of Service (DoS) attacks against itself or other information systems." name="APSC_DV-002400" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002290 The application must use the Federal Information Processing Standard (FIPS) 140-2-validated cryptographic modules and random number generator if the application implements encryption, key exchange, digital signature, and hash functionality." name="APSC_DV-002290" rules="4" total="0" />
               <Category authTot="2;" authUrg="0;" desc="APSC_DV-002390 XML-based applications must mitigate DoS attacks by using XML filters, parser options, or gateways." name="APSC_DV-002390" rules="4" total="2" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002590 The application must not be vulnerable to overflow attacks." name="APSC_DV-002590" rules="11" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000170 The application must implement cryptographic mechanisms to protect the integrity of remote access sessions." name="APSC_DV-000170" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001300 The application must protect audit information from unauthorized deletion." name="APSC_DV-001300" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001740 The application must only store cryptographic representations of passwords." name="APSC_DV-001740" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000650 The application must not write sensitive data into the application logs." name="APSC_DV-000650" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001860 The application must use mechanisms meeting the requirements of applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance for authentication to a cryptographic module." name="APSC_DV-001860" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002470 The application must maintain the confidentiality and integrity of information during reception." name="APSC_DV-002470" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002350 The application must use appropriate cryptography in order to protect stored DoD information when required by the information owner or DoD policy." name="APSC_DV-002350" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002570 The application must generate error messages that provide information necessary for corrective actions without revealing information that could be exploited by adversaries." name="APSC_DV-002570" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002010 The application must implement NSA-approved cryptography to protect classified information in accordance with applicable federal laws, Executive Orders, directives, policies, regulations, and standards." name="APSC_DV-002010" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-002550 The application must not be vulnerable to XML-oriented attacks." name="APSC_DV-002550" rules="11" total="1" />
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-002530 The application must validate all input." name="APSC_DV-002530" rules="11" total="1" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002510 The application must protect from command injection." name="APSC_DV-002510" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002480 The application must not disclose unnecessary information to users." name="APSC_DV-002480" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-001290 The application must protect audit information from unauthorized modification." name="APSC_DV-001290" rules="4" total="1" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="AUTOSAR C++14 Coding Guidelines" name="AUTOSAR" rules="554" total="0">
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-6-1 #error directive shall not be used" name="AUTOSAR-A16_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-3-1 All overloads of a function shall be visible from where it is called" name="AUTOSAR-A7_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M8-5-2 Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" name="AUTOSAR-M8_5_2" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-1 A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" name="AUTOSAR-A6_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A25-4-1 Ordering predicates used with associative containers and STL sorting and related algorithms shall adhere to a strict weak ordering relation" name="AUTOSAR-A25_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-1-1 The assignment-expression of a throw statement shall not itself cause an exception to be thrown" name="AUTOSAR-M15_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-1-3 An empty throw (throw;) shall only be used in the compound statement of a catch handler" name="AUTOSAR-M15_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-1-2 NULL shall not be thrown explicitly" name="AUTOSAR-M15_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-7-1 If the behavior of a user-defined special member function is identical to implicitly defined special member function, then it shall be defined &quot;=default&quot; or be left undefined" name="AUTOSAR-A12_7_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-3-2 The unary minus operator shall not be applied to an expression whose underlying type is unsigned" name="AUTOSAR-M5_3_2" rules="1" total="0" />
               <Category authTot="3;" authUrg="0;" desc="AUTOSAR M5-3-1 Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" name="AUTOSAR-M5_3_1" rules="1" total="3" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-3-4 Evaluation of the operand to the sizeof operator shall not contain side effects" name="AUTOSAR-M5_3_4" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-3-3 The unary &amp; operator shall not be overloaded" name="AUTOSAR-M5_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-2 All user-defined conversion operators shall be defined explicit" name="AUTOSAR-A13_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-3 User-defined conversion operators should not be used" name="AUTOSAR-A13_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-6-1 The goto statement shall not be used" name="AUTOSAR-A6_6_1" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M27-0-1 The stream input/output library &lt;cstdio> shall not be used" name="AUTOSAR-M27_0_1" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-1 If &quot;operator[]&quot; is to be overloaded with a non-const version, const version shall also be implemented" name="AUTOSAR-A13_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-16-1 The ternary conditional operator shall not be used as a sub-expression" name="AUTOSAR-A5_16_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-4 If two opposite operators are defined, one shall be defined in terms of the other" name="AUTOSAR-A13_5_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-5 Comparison operators shall be non-member functions with identical parameter types and noexcept" name="AUTOSAR-A13_5_5" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A23-0-2 Elements of a container shall only be accessed via valid references, iterators, and pointers" name="AUTOSAR-A23_0_2" rules="2" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A15-1-4 If a function exits with an exception, then before a throw, the function shall place all objects/resources that the function constructed in valid states or it shall delete them" name="AUTOSAR-A15_1_4" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A23-0-1 An iterator shall not be implicitly converted to const_iterator" name="AUTOSAR-A23_0_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M4-5-3 Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary &amp; operator" name="AUTOSAR-M4_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-1-5 Exceptions shall not be thrown across execution boundaries" name="AUTOSAR-A15_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-17-1 The semantic equivalence between a binary operator and its assignment operator form shall be preserved" name="AUTOSAR-M5_17_1" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A15-1-2 An exception object shall not be a pointer" name="AUTOSAR-A15_1_2" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M4-5-1 Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &amp;&amp;, ||, !, the equality operators == and !=, the unary &amp; operator, and the conditional operator" name="AUTOSAR-M4_5_1" rules="1" total="0" />
               <Category authTot="4;" authUrg="0;" desc="AUTOSAR M0-1-10 Every defined function should be called at least once" name="AUTOSAR-M0_1_10" rules="2" total="4" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A15-1-1 Only instances of types derived from std::exception shall be thrown" name="AUTOSAR-A15_1_1" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-4-1 Hierarchies should be based on interface classes" name="AUTOSAR-A10_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-7-1 The #pragma directive shall not be used" name="AUTOSAR-A16_7_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A11-0-1 A non-POD type should be defined as class" name="AUTOSAR-A11_0_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A11-0-2 A type defined as struct shall: (1) provide only public data members, (2) not provide any special member functions or methods, (3) not be a base of another struct or class, (4) not inherit from another struct or class" name="AUTOSAR-A11_0_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-3 Enumerations shall be declared as scoped enum classes" name="AUTOSAR-A7_2_3" rules="1" total="0" />
               <Category authTot="8;" authUrg="0;" desc="AUTOSAR M8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &amp;" name="AUTOSAR-M8_4_4" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-2 Enumeration underlying base type shall be explicitly defined" name="AUTOSAR-A7_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-1 An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" name="AUTOSAR-A7_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M8-4-2 The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration" name="AUTOSAR-M8_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-7-1 The character \ shall not occur as a last character of a C++ comment" name="AUTOSAR-A2_7_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-9-1 The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" name="AUTOSAR-M3_9_1" rules="1" total="0" />
               <Category authTot="28;" authUrg="0;" desc="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags" name="AUTOSAR-A2_7_3" rules="2" total="28" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-7-2 Sections of code shall not be &quot;commented out&quot;" name="AUTOSAR-A2_7_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M12-1-1 An object's dynamic type shall not be used from the body of its constructor or destructor" name="AUTOSAR-M12_1_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-9-3 The underlying bit representations of floating-point values shall not be used" name="AUTOSAR-M3_9_3" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A1-1-1 All code shall conform to ISO/IEC 14882:2014 - Programming Language C++ and shall not use deprecated features" name="AUTOSAR-A1_1_1" rules="11" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-1-2 Functions shall not be declared at block scope" name="AUTOSAR-M3_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-4-1 A switch statement shall have at least two case-clauses, distinct from the default label" name="AUTOSAR-A6_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-6-1 All class data members that are initialized by the constructor shall be initialized using member initializers" name="AUTOSAR-A12_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-0-3 Control shall not be transferred into a try or catch block using a goto or a switch statement" name="AUTOSAR-M15_0_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-6 A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" name="AUTOSAR-M5_2_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-9 A cast shall not convert a pointer type to an integral type" name="AUTOSAR-M5_2_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M14-5-3 A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" name="AUTOSAR-M14_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-2-1 The macro offsetof shall not be used" name="AUTOSAR-M18_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-8 An object with integer type or pointer to void type shall not be converted to an object with pointer type" name="AUTOSAR-M5_2_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-6-1 The right hand operand of the integer division or remainder operators shall not be equal to zero" name="AUTOSAR-A5_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-3 Casts from a base class to a derived class should not be performed on polymorphic types" name="AUTOSAR-M5_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-2 A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" name="AUTOSAR-M5_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-3 Do statements should not be used" name="AUTOSAR-A6_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-2 A for loop shall contain a single loop-counter which shall not have floating-point type" name="AUTOSAR-A6_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-5 Hexadecimal constants should be upper case" name="AUTOSAR-A2_13_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-6 Universal character names shall be used only inside character or string literals" name="AUTOSAR-A2_13_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-4 For-init-statement and expression should not perform actions other than loop-counter initialization and modification" name="AUTOSAR-A6_5_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-3 Type wchar_t shall not be used" name="AUTOSAR-A2_13_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-4 String literals shall not be assigned to non-constant pointers" name="AUTOSAR-A2_13_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-1 Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used" name="AUTOSAR-A2_13_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-2 String literals with different encoding prefixes shall not be concatenated" name="AUTOSAR-A2_13_2" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M5-0-15 Array indexing shall be the only form of pointer arithmetic" name="AUTOSAR-M5_0_15" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-16 A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" name="AUTOSAR-M5_0_16" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-17 Subtraction between pointers shall only be applied to pointers that address elements of the same array" name="AUTOSAR-M5_0_17" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-18 >, >=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array" name="AUTOSAR-M5_0_18" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A15-0-2 At least the basic guarantee for exception safety shall be provided for all operations. In addition, each function may offer either the strong guarantee or the nothrow guarantee" name="AUTOSAR-A15_0_2" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M9-3-1 Const member functions shall not return non-const pointers or references to class-data" name="AUTOSAR-M9_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-10 If the bitwise operators ~ and &lt;&lt; are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" name="AUTOSAR-M5_0_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" name="AUTOSAR-M9_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-11 The plain char type shall only be used for the storage and use of character values" name="AUTOSAR-M5_0_11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-12 Signed char and unsigned char type shall only be used for the storage and use of numeric values" name="AUTOSAR-M5_0_12" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-14 The first operand of a conditional-operator shall have type bool" name="AUTOSAR-M5_0_14" rules="1" total="0" />
               <Category authTot="3;" authUrg="0;" desc="AUTOSAR M7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified" name="AUTOSAR-M7_1_2" rules="3" total="3" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-4 The register keyword shall not be used" name="AUTOSAR-A7_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-3 CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name" name="AUTOSAR-A7_1_3" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A7-1-2 The constexpr specifier shall be used for values that can be determined at compile time" name="AUTOSAR-A7_1_2" rules="2" total="2" />
               <Category authTot="8;" authUrg="0;" desc="AUTOSAR A7-1-1 Constexpr or const specifiers shall be used for immutable data declaration" name="AUTOSAR-A7_1_1" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-8-1 A header file name shall be identical to a type name declared in it if it declares a type" name="AUTOSAR-A2_8_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-11-1 Volatile keyword shall not be used" name="AUTOSAR-A2_11_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A9-5-1 Unions shall not be used" name="AUTOSAR-A9_5_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement" name="AUTOSAR-M6_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-20 Non-constant operands to a binary bitwise operator shall have the same underlying type" name="AUTOSAR-M5_0_20" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-21 Bitwise operators shall only be applied to operands of unsigned underlying type" name="AUTOSAR-M5_0_21" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A18-0-1 The C library facilities shall only be accessed through C++ library headers" name="AUTOSAR-A18_0_1" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-0-3 The library &lt;clocale> (locale.h) and the setlocale function shall not be used" name="AUTOSAR-A18_0_3" rules="2" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M0-4-2 Use of floating-point arithmetic shall be documented" name="AUTOSAR-M0_4_2" rules="1" total="1" />
               <Category authTot="4;" authUrg="0;" desc="AUTOSAR A18-0-2 The error state of a conversion from string to a numeric value shall be checked" name="AUTOSAR-A18_0_2" rules="2" total="4" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-3-1 A function that contains &quot;forwarding reference&quot; as its argument shall not be overloaded" name="AUTOSAR-A13_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-5-1 A pointer to member shall not access non-existent class members" name="AUTOSAR-A5_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M14-6-1 In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" name="AUTOSAR-M14_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-4-2 Type long double shall not be used" name="AUTOSAR-A0_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-4-4 Range, domain and pole errors shall be checked when using math functions" name="AUTOSAR-A0_4_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A4-7-1 An integer expression shall not lead to data loss" name="AUTOSAR-A4_7_1" rules="8" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-5 Enumerations should be used to represent sets of related named constants" name="AUTOSAR-A7_2_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-4 In an enumeration, either (1) none, (2) the first or (3) all enumerators shall be initialized" name="AUTOSAR-A7_2_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-6 std::make_shared shall be used to construct objects owned by std::shared_ptr" name="AUTOSAR-A20_8_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-5 std::make_unique shall be used to construct objects owned by std::unique_ptr" name="AUTOSAR-A20_8_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-7 A std::weak_ptr shall be used to represent temporary shared ownership" name="AUTOSAR-A20_8_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-2 A std::unique_ptr shall be used to represent exclusive ownership" name="AUTOSAR-A20_8_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-1 An already-owned pointer value shall not be stored in an unrelated smart pointer" name="AUTOSAR-A20_8_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-4 A std::unique_ptr shall be used over std::shared_ptr if ownership sharing is not required" name="AUTOSAR-A20_8_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-3 A std::shared_ptr shall be used to represent shared ownership" name="AUTOSAR-A20_8_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A9-6-1 Data types used for interfacing with hardware or conforming to communication protocols shall be trivial, standard-layout and only contain members of types with defined sizes" name="AUTOSAR-A9_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-2-3 Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character" name="AUTOSAR-M6_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-2-2 Floating-point expressions shall not be directly or indirectly tested for equality or inequality" name="AUTOSAR-M6_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-4-1 Destructor of a base class shall be public virtual, public override or protected non-virtual" name="AUTOSAR-A12_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-1 An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" name="AUTOSAR-A2_10_1" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-2-1 Assignment operators shall not be used in sub-expressions" name="AUTOSAR-M6_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-2-2 Expression statements shall not be explicit calls to constructors of temporary objects only" name="AUTOSAR-A6_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-2-1 Move and copy assignment operators shall either move or respectively copy base classes and data members of a class, without any side effects" name="AUTOSAR-A6_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A9-6-2 Bit-fields shall be used only when interfacing to hardware or conforming to communication protocols" name="AUTOSAR-A9_6_2" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A12-4-2 If a public destructor of a class is non-virtual, then the class should be declared final" name="AUTOSAR-A12_4_2" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-11 &quot;operator new&quot; and &quot;operator delete&quot; shall be defined together" name="AUTOSAR-A18_5_11" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-11 A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" name="AUTOSAR-A8_4_11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-10 Placement new shall be used only with properly aligned pointers to sufficient storage capacity" name="AUTOSAR-A18_5_10" rules="2" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A8-4-10 A parameter shall be passed by reference if it can't be NULL" name="AUTOSAR-A8_4_10" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-13 A std::shared_ptr shall be passed to a function as: (1) a copy to express the function shares ownership (2) an lvalue reference to express that the function replaces the managed object (3) a const lvalue reference to express that the function retains a reference count" name="AUTOSAR-A8_4_13" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-12 A std::unique_ptr shall be passed to a function as: (1) a copy to express the function assumes ownership (2) an lvalue reference to express that the function replaces the managed object" name="AUTOSAR-A8_4_12" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-2 The std::vector&lt;bool> specialization shall not be used" name="AUTOSAR-A18_1_2" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A18-1-1 C-style arrays shall not be used" name="AUTOSAR-A18_1_1" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-2-1 An assignment operator shall return a reference to &quot;this&quot;" name="AUTOSAR-A13_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-4 A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" name="AUTOSAR-A18_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-0-3 The library functions abort, exit, getenv and system from library &lt;cstdlib> shall not be used" name="AUTOSAR-M18_0_3" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-2-2 A binary arithmetic operator and a bitwise operator shall return a &quot;prvalue&quot;" name="AUTOSAR-A13_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-3 The std::auto_ptr type shall not be used" name="AUTOSAR-A18_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-6 All std::hash specializations for user-defined types shall have a noexcept function call operator" name="AUTOSAR-A18_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-2-3 A relational operator shall return a boolean value" name="AUTOSAR-A13_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-0-5 The unbounded functions of library &lt;cstring> shall not be used" name="AUTOSAR-M18_0_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-0-4 The time handling functions of library &lt;ctime> shall not be used" name="AUTOSAR-M18_0_4" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR M2-10-1 Different identifiers shall be typographically unambiguous" name="AUTOSAR-M2_10_1" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-14-1 The right hand operand of a logical &amp;&amp;, || operators shall not contain side effects" name="AUTOSAR-M5_14_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-9 A class, structure, or enumeration shall not be declared in the definition of its type" name="AUTOSAR-A7_1_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-8 A non-type specifier shall be placed before a type specifier in a declaration" name="AUTOSAR-A7_1_8" rules="1" total="0" />
               <Category authTot="12;" authUrg="0;" desc="AUTOSAR A7-1-7 Each expression statement and identifier declaration shall be placed on a separate line" name="AUTOSAR-A7_1_7" rules="3" total="12" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-6 The typedef specifier shall not be used" name="AUTOSAR-A7_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-5 The auto specifier shall not be used apart from following cases: (1) to declare that a variable has the same type as return type of a function call, (2) to declare that a variable has the same type as initializer of non-fundamental type, (3) to declare parameters of a generic lambda expression, (4) to declare a function template using trailing return type syntax" name="AUTOSAR-A7_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-2 Forwarding values to other functions shall be done via: (1) std::move if the value is an rvalue reference, (2) std::forward if the value is forwarding reference" name="AUTOSAR-A18_9_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-1 The std::bind shall not be used" name="AUTOSAR-A18_9_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-4 An argument to std::forward shall not be subsequently used" name="AUTOSAR-A18_9_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-3 The std::move shall not be used on objects declared const or const&amp;" name="AUTOSAR-A18_9_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A14-8-2 Explicit specializations of function templates shall not be used" name="AUTOSAR-A14_8_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-8-1 An object shall not be accessed outside of its lifetime" name="AUTOSAR-A3_8_1" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-3-2 The # and ## operators should not be used" name="AUTOSAR-M16_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-4 If a class has a user-declared constructor that takes a parameter of type std::initializer_list, then it shall be the only constructor apart from special member function constructors" name="AUTOSAR-A8_5_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-3-1 There shall be at most one occurrence of the # or ## operators in a single macro definition" name="AUTOSAR-M16_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-3-2 The identifier main shall not be used for a function other than the global function main" name="AUTOSAR-M7_3_2" rules="1" total="0" />
               <Category authTot="13;" authUrg="0;" desc="AUTOSAR M7-3-1 The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" name="AUTOSAR-M7_3_1" rules="1" total="13" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-2-1 The ', &quot;, /*, //, \ characters shall not occur in a header file name or in #include directive" name="AUTOSAR-A16_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-1 In an initialization list, the order of initialization shall be following: (1) virtual base classes in depth and left to right order of the inheritance graph, (2) direct base classes in left to right order of inheritance list, (3) non-static data members in the order they were declared in the class definition" name="AUTOSAR-A8_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-3-4 Using-directives shall not be used" name="AUTOSAR-M7_3_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-0 All memory shall be initialized before it is read" name="AUTOSAR-A8_5_0" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-3-3 There shall be no unnamed namespaces in header files" name="AUTOSAR-M7_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-3 A variable of type auto shall not be initialized using {} or ={} braced-initialization" name="AUTOSAR-A8_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-3-6 Using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" name="AUTOSAR-M7_3_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-2-2 There shall be no unused include directives" name="AUTOSAR-A16_2_2" rules="1" total="0" />
               <Category authTot="7;" authUrg="3;" desc="AUTOSAR A8-5-2 Braced-initialization {}, without equals sign, shall be used for variable initialization" name="AUTOSAR-A8_5_2" rules="1" total="7" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A17-0-1 Reserved identifiers, macros and functions in the C++ standard library shall not be defined, redefined or undefined" name="AUTOSAR-A17_0_1" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A9-3-1 Member functions shall not return non-const &quot;raw&quot; pointers or references to private or protected data owned by the class" name="AUTOSAR-A9_3_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-5 A loop-control-variable other than the loop-counter shall not be modified within condition or expression" name="AUTOSAR-M6_5_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-4 The loop-counter shall be modified by one of: --, ++, -= n, or += n; where n remains constant for the duration of the loop" name="AUTOSAR-M6_5_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-4-1 An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" name="AUTOSAR-M3_4_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-3 The loop-counter shall not be modified within condition or statement" name="AUTOSAR-M6_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" name="AUTOSAR-M6_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-6 A loop-control-variable other than the loop-counter which is modified in statement shall have type bool" name="AUTOSAR-M6_5_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-1-2 User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" name="AUTOSAR-A13_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-2-1 An object shall not be assigned to an overlapping object" name="AUTOSAR-M0_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M4-10-1 NULL shall not be used as an integer value" name="AUTOSAR-M4_10_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-1-3 User defined literals operators shall only perform conversion of passed parameters" name="AUTOSAR-A13_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-3-3 Pointers to incomplete class types shall not be deleted" name="AUTOSAR-A5_3_3" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A5-3-2 Null pointers shall not be dereferenced" name="AUTOSAR-A5_3_2" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-3-1 Evaluation of the operand to the typeid operator shall not contain side effects" name="AUTOSAR-A5_3_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-7-1 The signal handling facilities of &lt;csignal> shall not be used" name="AUTOSAR-M18_7_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A26-5-1 Pseudorandom numbers shall not be generated using std::rand()" name="AUTOSAR-A26_5_1" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M4-10-2 Literal zero (0) shall not be used as the null-pointer-constant" name="AUTOSAR-M4_10_2" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-6 A class or enumeration name shall not be hidden by a variable, function or enumerator declaration in the same scope" name="AUTOSAR-A2_10_6" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A26-5-2 Random number engines shall not be default-initialized" name="AUTOSAR-A26_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-4 The identifier name of a non-member object with static storage duration or static function shall not be reused within a namespace" name="AUTOSAR-A2_10_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-5 An identifier name of a function with static storage duration or a non-member object with external or internal linkage should not be reused" name="AUTOSAR-A2_10_5" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A4-5-1 Expressions with type enum or enum class shall not be used as operands to built-in and overloaded operators other than the subscript operator [ ], the assignment operator =, the equality operators == and !=, the unary &amp; operator, and the relational operators &lt;, &lt;=, >, >=" name="AUTOSAR-A4_5_1" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A15-5-3 The std::terminate() function shall not be called implicitly" name="AUTOSAR-A15_5_3" rules="11" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-5-2 Program shall not be abruptly terminated. In particular, an implicit or explicit invocation of std::abort(), std::quick_exit(), std::_Exit(), std::terminate() shall not be done" name="AUTOSAR-A15_5_2" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-5-1 All user-provided class destructors, deallocation functions, move constructors, move assignment operators and swap functions shall not exit with an exception. A noexcept exception specification shall be added to these functions as appropriate" name="AUTOSAR-A15_5_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M9-6-4 Named bit-fields with signed integer type shall have a length of more than one bit" name="AUTOSAR-M9_6_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-10 The increment (++) and decrement (--) operators shall not be mixed with other operators in an expression" name="AUTOSAR-M5_2_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-12 An identifier with array type passed as a function argument shall not decay to a pointer" name="AUTOSAR-M5_2_12" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-11 The comma operator, &amp;&amp; operator and the || operator shall not be overloaded" name="AUTOSAR-M5_2_11" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A14-7-2 Template specialization shall be declared in the same file (1) as the primary template (2) as a user-defined type, for which the specialization is declared" name="AUTOSAR-A14_7_2" rules="1" total="0" />
               <Category authTot="15;" authUrg="0;" desc="AUTOSAR A3-9-1 Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" name="AUTOSAR-A3_9_1" rules="1" total="15" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-2-3 Include guards shall be provided" name="AUTOSAR-M16_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-6 Trivial accessor and mutator functions should be inlined" name="AUTOSAR-A3_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-5 A function definition shall only be placed in a class definition if (1) the function is intended to be inlined (2) it is a member function template (3) it is a member function of a class template" name="AUTOSAR-A3_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-4 When an array with external linkage is declared, its size shall be stated explicitly" name="AUTOSAR-A3_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-3 Implementation files, that are defined locally in the project, should have a file name extension of &quot;.cpp&quot;" name="AUTOSAR-A3_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-2 Header files, that are defined locally in the project, shall have a file name extension of one of: &quot;.h&quot;, &quot;.hpp&quot; or &quot;.hxx&quot;" name="AUTOSAR-A3_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule" name="AUTOSAR-A3_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-3-1 Only those characters specified in the C++ Language Standard basic source character set shall be used in the source code" name="AUTOSAR-A2_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-1-2 A base class shall only be declared virtual if it is used in a diamond hierarchy" name="AUTOSAR-M10_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-1-1 Classes should not be derived from virtual bases" name="AUTOSAR-M10_1_1" rules="1" total="0" />
               <Category authTot="6;" authUrg="0;" desc="AUTOSAR M8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" name="AUTOSAR-M8_0_1" rules="1" total="6" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-2 All if ... else if constructs shall be terminated with an else clause" name="AUTOSAR-M6_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement" name="AUTOSAR-M6_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A17-1-1 Use of the C Standard Library shall be encapsulated and isolated" name="AUTOSAR-A17_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A21-8-1 Arguments to character-handling functions shall be representable as an unsigned char" name="AUTOSAR-A21_8_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-1-3 An accessible base class shall not be both virtual and non-virtual in the same hierarchy" name="AUTOSAR-M10_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-6 The final clause of a switch statement shall be the default-clause" name="AUTOSAR-M6_4_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A25-1-1 Non-static data members or captured values of predicate function objects that are state related to this object's identity shall not be copied" name="AUTOSAR-A25_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause" name="AUTOSAR-M6_4_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-4 A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" name="AUTOSAR-M6_4_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-3 A switch statement shall be a well-formed switch statement" name="AUTOSAR-M6_4_3" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M2-7-1 The character sequence /* shall not be used within a C-style comment" name="AUTOSAR-M2_7_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-7 The condition of a switch statement shall not have bool type" name="AUTOSAR-M6_4_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-1 dynamic_cast should not be used" name="AUTOSAR-A5_2_1" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested" name="AUTOSAR-M0_3_2" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-5 An array or container shall not be accessed beyond its range" name="AUTOSAR-A5_2_5" rules="4" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M0-3-1 Minimization of run-time failures shall be ensured by the use of at least one of: (a) static analysis tools/techniques; (b) dynamic analysis tools/techniques; (c) explicit coding of checks to handle run-time faults" name="AUTOSAR-M0_3_1" rules="10" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-4 reinterpret_cast shall not be used" name="AUTOSAR-A5_2_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-3 A cast shall not remove any const or volatile qualification from the type of a pointer or reference" name="AUTOSAR-A5_2_3" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A5-2-2 Traditional C-style casts shall not be used" name="AUTOSAR-A5_2_2" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-5 Checked exceptions that could be thrown from a function shall be specified together with the function declaration and they shall be identical in all function declarations and for all its overriders" name="AUTOSAR-A15_4_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M17-0-2 The names of standard library macros and objects shall not be reused" name="AUTOSAR-M17_0_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-3 The noexcept specification of a function shall either be identical across all translation units, or identical or more restrictive between a virtual member function and an overrider" name="AUTOSAR-A15_4_3" rules="1" total="0" />
               <Category authTot="3;" authUrg="0;" desc="AUTOSAR A15-4-4 A declaration of non-throwing function shall contain noexcept specification" name="AUTOSAR-A15_4_4" rules="1" total="3" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M17-0-3 The names of standard library functions shall not be overridden" name="AUTOSAR-M17_0_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-1 Dynamic exception-specification shall not be used" name="AUTOSAR-A15_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-2 If a function is declared to be noexcept, noexcept(true) or noexcept(&lt;true condition>), then it shall not exit with an exception" name="AUTOSAR-A15_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-1-1 Class shall not be derived from more than one base class which is not an interface class" name="AUTOSAR-A10_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M17-0-5 The setjmp macro and the longjmp function shall not be used" name="AUTOSAR-M17_0_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-1-2 All #else, #elif and #endif pre-processor directives shall reside in the same file as the #if or #ifdef directive to which they are related" name="AUTOSAR-M16_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A11-3-1 Friend declarations shall not be used" name="AUTOSAR-A11_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-1-1 The defined pre-processor operator shall only be used in one of the two standard forms" name="AUTOSAR-M16_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-5-2 The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" name="AUTOSAR-M7_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-5-1 A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function" name="AUTOSAR-M7_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-4 An identifier with external linkage shall have exactly one definition" name="AUTOSAR-M3_2_4" rules="1" total="0" />
               <Category authTot="18;" authUrg="0;" desc="AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include" name="AUTOSAR-A16_0_1" rules="5" total="18" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-2-1 All accessible entity names within a multiple inheritance hierarchy should be unique" name="AUTOSAR-M10_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M8-3-1 Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments" name="AUTOSAR-M8_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-1 Constructors shall explicitly initialize all virtual base classes, all direct non-virtual base classes and all non-static data members" name="AUTOSAR-A12_1_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-2 Both NSDMI and a non-static member initializer in a constructor shall not be used in the same type" name="AUTOSAR-A12_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-4 Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" name="AUTOSAR-M15_3_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-3 If all user-defined constructors of a class initialize data members with constant values that are the same across all constructors, then data members shall be initialized using NSDMI instead" name="AUTOSAR-A12_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-7 Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last" name="AUTOSAR-M15_3_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-4 All constructors that are callable with a single argument of fundamental type shall be declared explicit" name="AUTOSAR-A12_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-6 Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" name="AUTOSAR-M15_3_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-1 All declarations of an object or function shall have compatible types" name="AUTOSAR-M3_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A17-6-1 Non-standard entities shall not be added to standard namespaces" name="AUTOSAR-A17_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-3 A type, object or function that is used in multiple translation units shall be declared in one and only one file" name="AUTOSAR-M3_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-10-1 A pointer to member virtual function shall only be tested for equality with null-pointer-constant" name="AUTOSAR-A5_10_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-2 The One Definition Rule shall not be violated" name="AUTOSAR-M3_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-6 The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators" name="AUTOSAR-A5_2_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-5 Common class initialization for non-constant members shall be done by a delegating constructor" name="AUTOSAR-A12_1_5" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M15-3-1 Exceptions shall be raised only after start-up and before termination" name="AUTOSAR-M15_3_1" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-6 Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors" name="AUTOSAR-A12_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-3 Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases" name="AUTOSAR-M15_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M11-0-1 Member data in non-POD class types shall be private" name="AUTOSAR-M11_0_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-2 Variables shall not be implicitly captured in a lambda expression" name="AUTOSAR-A5_1_2" rules="1" total="0" />
               <Category authTot="2;" authUrg="2;" desc="AUTOSAR A5-1-1 Literal values shall not be used apart from type initialization, otherwise symbolic names shall be used instead" name="AUTOSAR-A5_1_1" rules="1" total="2" />
               <Category authTot="17;" authUrg="0;" desc="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant" name="AUTOSAR-A4_10_1" rules="2" total="17" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-6 Return type of a non-void return type lambda expression should be explicitly specified" name="AUTOSAR-A5_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-4 A lambda expression object shall not outlive any of its reference-captured objects" name="AUTOSAR-A5_1_4" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-3 Parameter list (possibly empty) shall be included in every lambda expression" name="AUTOSAR-A5_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-3-4 Catch-all (ellipsis and std::exception) handlers shall be used only in (a) main, (b) task main functions, (c) in functions that are supposed to isolate independent components and (d) when calling third-party code that uses exceptions not according to AUTOSAR C++14 guidelines" name="AUTOSAR-A15_3_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-3-5 A class type exception shall be caught by reference or const reference" name="AUTOSAR-A15_3_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-3-2 If a function throws an exception, it shall be handled when meaningful actions can be taken, otherwise it shall be propagated" name="AUTOSAR-A15_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M2-13-2 Octal constants (other than zero) and octal escape sequences (other than &quot;\0&quot; ) shall not be used" name="AUTOSAR-M2_13_2" rules="2" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A15-3-3 Main function and a task main function shall catch at least: base class exceptions from all third-party libraries used, std::exception and all otherwise unhandled exceptions" name="AUTOSAR-A15_3_3" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-6-1 Functions declared with the [[noreturn]] attribute shall not return" name="AUTOSAR-A7_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M2-13-4 Literal suffixes shall be upper case" name="AUTOSAR-M2_13_4" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR M2-13-3 A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" name="AUTOSAR-M2_13_3" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-19-1 Evaluation of constant unsigned integer expressions shall not lead to wrap-around" name="AUTOSAR-M5_19_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A14-5-1 A template constructor shall not participate in overload resolution for a single argument of the enclosing class type" name="AUTOSAR-A14_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-2-1 Non-virtual member functions shall not be redefined in derived classes" name="AUTOSAR-A10_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-2-1 When declaring function templates, the trailing return type syntax shall be used if the return type depends on the type of parameters" name="AUTOSAR-A8_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A14-5-3 A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations." name="AUTOSAR-A14_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-6 &quot;forward&quot; parameters declared as T &amp;&amp; shall always be forwarded" name="AUTOSAR-A8_4_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-5 Arguments to a function-like macro shall not contain tokens that look like pre-processing directives" name="AUTOSAR-M16_0_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-5 &quot;consume&quot; parameters declared as X &amp;&amp; shall always be moved from" name="AUTOSAR-A8_4_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-8 Output parameters shall not be used" name="AUTOSAR-A8_4_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-4-1 All usage of assembler shall be documented" name="AUTOSAR-M7_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-7 &quot;in&quot; parameters for &quot;cheap to copy&quot; types shall be passed by value" name="AUTOSAR-A8_4_7" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-2 Macros shall only be #define'd or #undef'd in the global namespace" name="AUTOSAR-M16_0_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-6 Copy and move constructors and copy assignment and move assignment operators shall be declared protected or defined &quot;=delete&quot; in base class" name="AUTOSAR-A12_8_6" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A3-3-2 Static and thread-local objects shall be constant-initialized" name="AUTOSAR-A3_3_2" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-2 All exit paths from a function with non-void return type shall have an explicit return statement with an expression" name="AUTOSAR-A8_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-1 #include directives in a file shall only be preceded by other pre-processor directives or comments" name="AUTOSAR-M16_0_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-4-3 Assembly language shall be encapsulated and isolated" name="AUTOSAR-M7_4_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-7 Assignment operators should be declared with the ref-qualifier &amp;" name="AUTOSAR-A12_8_7" rules="1" total="0" />
               <Category authTot="16;" authUrg="0;" desc="AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file" name="AUTOSAR-A3_3_1" rules="2" total="16" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-1 Functions shall not be defined using the ellipsis notation" name="AUTOSAR-A8_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-4-2 Assembler instructions shall only be introduced using the asm declaration" name="AUTOSAR-M7_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-4 Multiple output values from a function should be returned as a struct or tuple" name="AUTOSAR-A8_4_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-3 Common ways of passing parameters should be used" name="AUTOSAR-A8_4_3" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-4-1 The asm declaration shall not be used" name="AUTOSAR-A7_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-5-1 Trigraphs shall not be used" name="AUTOSAR-A2_5_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-5-2 Digraphs shall not be used" name="AUTOSAR-A2_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-9 &quot;in-out&quot; parameters declared as T &amp; shall be modified" name="AUTOSAR-A8_4_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-8 If the # token appears as the first token on a line, then it shall be immediately followed by a pre-processing token" name="AUTOSAR-M16_0_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-7 Undefined macro identifiers shall not be used in #if or #elif pre-processor directives, except as operands to the defined operator" name="AUTOSAR-M16_0_7" rules="1" total="0" />
               <Category authTot="8;" authUrg="0;" desc="AUTOSAR M16-0-6 In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" name="AUTOSAR-M16_0_6" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-0-2 Bitwise operations and operations that assume data representation in memory shall not be performed on objects" name="AUTOSAR-A12_0_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-3-3 A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" name="AUTOSAR-M10_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-6-3 The continue statement shall only be used within a well-formed for loop" name="AUTOSAR-M6_6_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-3-2 If a function has internal linkage then all re-declarations shall include the static storage class specifier" name="AUTOSAR-M3_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-6-2 The goto statement shall jump to a label declared later in the same function body" name="AUTOSAR-M6_6_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-0-1 If a class declares a copy or move operation, or a destructor, either via &quot;=default&quot;, &quot;=delete&quot;, or via a user-provided declaration, then all others of these five special member functions shall be declared as well" name="AUTOSAR-A12_0_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-6-1 Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" name="AUTOSAR-M6_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-2 User-defined copy and move assignment operators should use user-defined no-throw swap function" name="AUTOSAR-A12_8_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-3 Moved-from object shall not be read-accessed" name="AUTOSAR-A12_8_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-4 Move constructor shall not initialize its class members and base classes using copy semantics" name="AUTOSAR-A12_8_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-8 Lambda expressions should not be defined inside another lambda expression" name="AUTOSAR-A5_1_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-5 A copy assignment and a move assignment operators shall handle self-assignment" name="AUTOSAR-A12_8_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-7 A lambda shall not be an operand to decltype or typeid" name="AUTOSAR-A5_1_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M19-3-1 The error indicator errno shall not be used" name="AUTOSAR-M19_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-1 Move and copy constructors shall move and respectively copy base classes and data members of a class, without any side effects" name="AUTOSAR-A12_8_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-3 The declaration of objects shall contain no more than two levels of pointer indirection" name="AUTOSAR-A5_0_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-9 An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression" name="AUTOSAR-M5_0_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-8-1 The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand" name="AUTOSAR-M5_8_1" rules="1" total="0" />
               <Category authTot="8;" authUrg="0;" desc="AUTOSAR A0-1-1 A project shall not contain instances of non-volatile variables being given values that are not subsequently used" name="AUTOSAR-A0_1_1" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-2 The condition of an if-statement and the condition of an iteration statement shall have type bool" name="AUTOSAR-A5_0_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-8 An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" name="AUTOSAR-M5_0_8" rules="2" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used" name="AUTOSAR-A0_1_2" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-1 The value of an expression shall be the same under any order of evaluation that the standard permits" name="AUTOSAR-A5_0_1" rules="7" total="0" />
               <Category authTot="9;" authUrg="0;" desc="AUTOSAR M0-1-4 A project shall not contain non-volatile POD variables having only one use" name="AUTOSAR-M0_1_4" rules="1" total="9" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-1-3 Every function defined in an anonymous namespace, or static function with internal linkage, or private member function shall be used" name="AUTOSAR-A0_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-1-2 A project shall not contain infeasible paths" name="AUTOSAR-M0_1_2" rules="29" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M5-0-5 There shall be no implicit floating-integral conversions" name="AUTOSAR-M5_0_5" rules="2" total="1" />
               <Category authTot="5;" authUrg="0;" desc="AUTOSAR A27-0-4 C-style strings shall not be used" name="AUTOSAR-A27_0_4" rules="4" total="5" />
               <Category authTot="8;" authUrg="0;" desc="AUTOSAR M0-1-3 A project shall not contain unused variables" name="AUTOSAR-M0_1_3" rules="3" total="8" />
               <Category authTot="20;" authUrg="0;" desc="AUTOSAR M5-0-4 An implicit integral conversion shall not change the signedness of the underlying type" name="AUTOSAR-M5_0_4" rules="1" total="20" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A18-5-2 Non-placement new or delete expressions shall not be used" name="AUTOSAR-A18_5_2" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A27-0-3 Alternate input and output operations on a file stream shall not be used without an intervening flush or positioning call" name="AUTOSAR-A27_0_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-7 There shall be no explicit floating-integral conversions of a cvalue expression" name="AUTOSAR-M5_0_7" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-1 Functions malloc, calloc, realloc and free shall not be used" name="AUTOSAR-A18_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A27-0-2 A C-style string shall guarantee sufficient space for data and the null terminator" name="AUTOSAR-A27_0_2" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-4 Pointer arithmetic shall not be used with pointers to non-final classes" name="AUTOSAR-A5_0_4" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-1-1 A project shall not contain unreachable code" name="AUTOSAR-M0_1_1" rules="7" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-6 An implicit integral or floating-point conversion shall not reduce the size of the underlying type" name="AUTOSAR-M5_0_6" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-6-1 Digit sequences separators ' shall only be used as follows: (1) for decimal, every 3 digits, (2) for hexadecimal, every 2 digits, (3) for binary, every 4 digits" name="AUTOSAR-A13_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A27-0-1 Inputs from independent components shall be validated" name="AUTOSAR-A27_0_1" rules="8" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A0-1-4 There shall be no unused named parameters in non-virtual functions" name="AUTOSAR-A0_1_4" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-1-5 There shall be no unused named parameters in the set of parameters for a virtual function and all the functions that override it" name="AUTOSAR-A0_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-1-6 There should be no unused type declarations" name="AUTOSAR-A0_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-3-5 A user-defined assignment operator shall not be virtual" name="AUTOSAR-A10_3_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-2-1 Constructors that are not noexcept shall not be invoked before program startup" name="AUTOSAR-A15_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-5-2 Functions shall not call themselves, either directly or indirectly" name="AUTOSAR-A7_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-18-1 The comma operator shall not be used" name="AUTOSAR-M5_18_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-5-1 A function shall not return a reference or a pointer to a parameter that is passed by reference to const" name="AUTOSAR-A7_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-4 If a project has sized or unsized version of operator &quot;delete&quot; globally defined, then both sized and unsized versions shall be defined" name="AUTOSAR-A18_5_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-3 The form of the delete expression shall match the form of the new expression used to allocate the memory" name="AUTOSAR-A18_5_3" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-3 A cvalue expression shall not be implicitly converted to a different underlying type" name="AUTOSAR-M5_0_3" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-5 Memory management functions shall ensure the following: (a) deterministic behavior resulting with the existence of worst-case execution time, (b) avoiding memory fragmentation, (c) avoid running out of memory, (d) avoiding mismatched allocations or deallocations, (e) no dependence on non-deterministic calls to kernel" name="AUTOSAR-A18_5_5" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-2 Limited dependence should be placed on C++ operator precedence rules in expressions" name="AUTOSAR-M5_0_2" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-3-1 Virtual function declaration shall contain exactly one of the three specifiers:" name="AUTOSAR-A10_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-8 Objects that do not outlive a function shall have automatic storage duration" name="AUTOSAR-A18_5_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-3-2 Each overriding virtual function shall be declared with the override or final specifier" name="AUTOSAR-A10_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-3-3 Virtual functions shall not be introduced in a final class" name="AUTOSAR-A10_3_3" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M0-1-8 All functions with void return type shall have external side effect(s)" name="AUTOSAR-M0_1_8" rules="2" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-9 Custom implementations of dynamic memory allocation and deallocation functions shall meet the semantic requirements specified in the corresponding &quot;Required behaviour&quot; clause from the C++ Standard" name="AUTOSAR-A18_5_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-1-9 There shall be no dead code" name="AUTOSAR-M0_1_9" rules="1" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Flow Analysis" name="BD" rules="122" total="0">
               <Category authTot="0;" authUrg="0;" desc="Incorrect API usage" name="BD-API" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Miscellaneous" name="BD-MISC" rules="2" total="0" />
               <Category authTot="11;" authUrg="0;" desc="Possible Bugs" name="BD-PB" rules="67" total="11" />
               <Category authTot="1;" authUrg="0;" desc="Resources" name="BD-RES" rules="8" total="1" />
               <Category authTot="2;" authUrg="0;" desc="Security" name="BD-SECURITY" rules="19" total="2" />
               <Category authTot="0;" authUrg="0;" desc="Containers" name="BD-CO" rules="5" total="0" />
               <Category authTot="7;" authUrg="0;" desc="Threads &amp; Synchronization" name="BD-TRS" rules="15" total="7" />
            </Category>
            <Category authTot="9;" authUrg="9;" desc="Code Duplication Detection" name="CDD" rules="4" total="9" />
            <Category authTot="0;" authUrg="0;" desc="SEI CERT C" name="CERT_C" rules="363" total="0">
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC12_C (REC) Detect and remove code that has no effect or is never executed" name="CERT_C-MSC12" rules="8" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC11_C (REC) Incorporate diagnostic tests using assertions" name="CERT_C-MSC11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC14_C (REC) Do not introduce unnecessary platform dependencies" name="CERT_C-MSC14" rules="1" total="0" />
               <Category authTot="8;" authUrg="0;" desc="CERT-MSC13_C (REC) Detect and remove unused values" name="CERT_C-MSC13" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC15_C (REC) Do not depend on undefined behavior" name="CERT_C-MSC15" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-WIN00_C (REC) Be specific when dynamically loading libraries" name="CERT_C-WIN00" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP03_C (REC) Detect and handle floating-point errors" name="CERT_C-FLP03" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC17_C (REC) Finish every set of statements associated with a case label with a break statement" name="CERT_C-MSC17" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP02_C (REC) Avoid using floating-point numbers when precise computation is needed" name="CERT_C-FLP02" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-MSC19_C (REC) For functions that return an array, prefer returning an empty array over a null value" name="CERT_C-MSC19" rules="2" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP06_C (REC) Convert integers to floating point for floating-point operations" name="CERT_C-FLP06" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT02_C (REC) Understand integer conversion rules" name="CERT_C-INT02" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP00_C (REC) Understand the limitations of floating-point numbers" name="CERT_C-FLP00" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-API01_C (REC) Avoid laying out strings in memory directly before sensitive data" name="CERT_C-API01" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-API02_C (REC) Functions that read or write to or from an array should take an argument to specify the source or target size" name="CERT_C-API02" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT08_C (REC) Verify that all integer values are in range" name="CERT_C-INT08" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT09_C (REC) Ensure enumeration constants map to unique values" name="CERT_C-INT09" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT07_C (REC) Use only explicitly signed or unsigned char type for numeric values" name="CERT_C-INT07" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT04_C (REC) Enforce limits on integer values originating from tainted sources" name="CERT_C-INT04" rules="3" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-INT05_C (REC) Do not use input functions to convert character data if they cannot handle all possible inputs" name="CERT_C-INT05" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV30_C (RULE) Do not modify the object referenced by the return value of certain functions" name="CERT_C-ENV30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC22_C (REC) Use the setjmp(), longjmp() facility securely" name="CERT_C-MSC22" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-MSC24_C (REC) Do not use deprecated or obsolescent functions" name="CERT_C-MSC24" rules="4" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT13_C (REC) Use bitwise operators only on unsigned operands" name="CERT_C-INT13" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT12_C (REC) Do not make assumptions about the type of a plain int bit-field when used in an expression" name="CERT_C-INT12" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT10_C (REC) Do not assume a positive remainder when using the % operator" name="CERT_C-INT10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV33_C (RULE) Do not call system()" name="CERT_C-ENV33" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV34_C (RULE) Do not store pointers returned by certain functions" name="CERT_C-ENV34" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT18_C (REC) Evaluate integer expressions in a larger size before comparing or assigning to that size" name="CERT_C-INT18" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV31_C (RULE) Do not rely on an environment pointer following an operation that may invalidate it" name="CERT_C-ENV31" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT15_C (REC) Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types" name="CERT_C-INT15" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC30_C (RULE) Do not use the rand() function for generating pseudorandom numbers" name="CERT_C-MSC30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV32_C (RULE) All exit handlers must return normally" name="CERT_C-ENV32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT16_C (REC) Do not make assumptions about representation of signed integers" name="CERT_C-INT16" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-MEM00_C (REC) Allocate and free memory in the same module, at the same level of abstraction" name="CERT_C-MEM00" rules="5" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM01_C (REC) Store a new value in pointers immediately after free()" name="CERT_C-MEM01" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG30_C (RULE) Call only asynchronous-safe functions within signal handlers" name="CERT_C-SIG30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM04_C (REC) Beware of zero-length allocations" name="CERT_C-MEM04" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM05_C (REC) Avoid large stack allocations" name="CERT_C-MEM05" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG31_C (RULE) Do not access shared objects in signal handlers" name="CERT_C-SIG31" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM02_C (REC) Immediately cast the result of a memory allocation function call into a pointer to the allocated type" name="CERT_C-MEM02" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG34_C (RULE) Do not call signal() from within interruptible signal handlers" name="CERT_C-SIG34" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM03_C (REC) Clear sensitive information stored in reusable resources" name="CERT_C-MEM03" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG35_C (RULE) Do not return from a computational exception signal handler" name="CERT_C-SIG35" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE31_C (RULE) Avoid side effects in arguments to unsafe macros" name="CERT_C-PRE31" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE32_C (RULE) Do not use preprocessor directives in invocations of function-like macros" name="CERT_C-PRE32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE30_C (RULE) Do not create a universal character name through concatenation" name="CERT_C-PRE30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV02_C (REC) Beware of multiple environment variables with the same effective name" name="CERT_C-ENV02" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV01_C (REC) Do not make assumptions about the size of an environment variable" name="CERT_C-ENV01" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC01_C (REC) Strive for logical completeness" name="CERT_C-MSC01" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC04_C (REC) Use comments consistently and in a readable fashion" name="CERT_C-MSC04" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC07_C (REC) Detect and remove dead code" name="CERT_C-MSC07" rules="8" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC09_C (REC) Character encoding: Use subset of ASCII for safety" name="CERT_C-MSC09" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT35_C (RULE) Use correct integer precisions" name="CERT_C-INT35" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT36_C (RULE) Converting a pointer to integer or integer to pointer" name="CERT_C-INT36" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT33_C (RULE) Ensure that division and remainder operations do not result in divide-by-zero errors" name="CERT_C-INT33" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT34_C (RULE) Do not shift an expression by a negative number of bits or by greater than or equal to the number of bits that exist in the operand" name="CERT_C-INT34" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT31_C (RULE) Ensure that integer conversions do not result in lost or misinterpreted data" name="CERT_C-INT31" rules="15" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT32_C (RULE) Ensure that operations on signed integers do not result in overflow" name="CERT_C-INT32" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT30_C (RULE) Ensure that unsigned integer operations do not wrap" name="CERT_C-INT30" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO34_C (RULE) Distinguish between characters read from a file and EOF or WEOF" name="CERT_C-FIO34" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO32_C (RULE) Do not perform operations on devices that are only appropriate for files" name="CERT_C-FIO32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO38_C (RULE) Do not copy a FILE object" name="CERT_C-FIO38" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO39_C (RULE) Do not alternately input and output from a stream without an intervening flush or positioning call" name="CERT_C-FIO39" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO37_C (RULE) Do not assume that fgets() or fgetws() returns a nonempty string when successful" name="CERT_C-FIO37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP44_C (RULE) Do not rely on side effects in operands to sizeof, _Alignof, or _Generic" name="CERT_C-EXP44" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP45_C (RULE) Do not perform assignments in selection statements" name="CERT_C-EXP45" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP42_C (RULE) Do not compare padding data" name="CERT_C-EXP42" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP43_C (RULE) Avoid undefined behavior when using restrict-qualified pointers" name="CERT_C-EXP43" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO30_C (RULE) Exclude user input from format strings" name="CERT_C-FIO30" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP46_C (RULE) Do not use a bitwise operator with a Boolean-like operand" name="CERT_C-EXP46" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP47_C (RULE) Do not call va_arg with an argument of the incorrect type" name="CERT_C-EXP47" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-MEM12_C (REC) Consider using a goto chain when leaving a function on error when using and releasing resources" name="CERT_C-MEM12" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR34_C (RULE) Cast characters to unsigned char before converting to larger integer sizes" name="CERT_C-STR34" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR31_C (RULE) Guarantee that storage for strings has sufficient space for character data and the null terminator" name="CERT_C-STR31" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR32_C (RULE) Do not pass a non-null-terminated character sequence to a library function that expects a string" name="CERT_C-STR32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR30_C (RULE) Do not attempt to modify string literals" name="CERT_C-STR30" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO45_C (RULE) Avoid TOCTOU race conditions while accessing files" name="CERT_C-FIO45" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO46_C (RULE) Do not access a closed file" name="CERT_C-FIO46" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO44_C (RULE) Only use values for fsetpos() that are returned from fgetpos()" name="CERT_C-FIO44" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR37_C (RULE) Arguments to character-handling functions must be representable as an unsigned char" name="CERT_C-STR37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR38_C (RULE) Do not confuse narrow and wide character strings and functions" name="CERT_C-STR38" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO47_C (RULE) Use valid format strings" name="CERT_C-FIO47" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO41_C (RULE) Do not call getc(), putc(), getwc(), or putwc() with a stream argument that has side effects" name="CERT_C-FIO41" rules="5" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-FIO42_C (RULE) Close files when they are no longer needed" name="CERT_C-FIO42" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO40_C (RULE) Reset strings on fgets() or fgetws() failure" name="CERT_C-FIO40" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM07_C (REC) Ensure that the arguments to calloc(), when multiplied, do not wrap" name="CERT_C-MEM07" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC32_C (RULE) Properly seed pseudorandom number generators" name="CERT_C-MSC32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC33_C (RULE) Do not pass invalid data to the asctime() function" name="CERT_C-MSC33" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC38_C (RULE) Do not treat a predefined identifier as an object if it might only be implemented as a macro" name="CERT_C-MSC38" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC37_C (RULE) Ensure that control never reaches the end of a non-void function" name="CERT_C-MSC37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC39_C (RULE) Do not call va_arg() on a va_list that has an indeterminate value" name="CERT_C-MSC39" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP30_C (RULE) Do not depend on the order of evaluation for side effects" name="CERT_C-EXP30" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON40_C (RULE) Do not refer to an atomic variable twice in an expression" name="CERT_C-CON40" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP20_C (REC) Perform explicit tests to determine success, true and false, and equality" name="CERT_C-EXP20" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON43_C (RULE) Do not allow data races in multithreaded code" name="CERT_C-CON43" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON41_C (RULE) Wrap functions that can fail spuriously in a loop" name="CERT_C-CON41" rules="1" total="0" />
               <Category authTot="3;" authUrg="2;" desc="CERT-MSC41_C (RULE) Never hard code sensitive information" name="CERT_C-MSC41" rules="1" total="3" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC40_C (RULE) Do not violate constraints" name="CERT_C-MSC40" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM33_C (RULE) Allocate and copy structures containing a flexible array member dynamically" name="CERT_C-MEM33" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM34_C (RULE) Only free memory allocated dynamically" name="CERT_C-MEM34" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-MEM31_C (RULE) Free dynamically allocated memory when no longer needed" name="CERT_C-MEM31" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM35_C (RULE) Allocate sufficient memory for an object" name="CERT_C-MEM35" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG01_C (REC) Understand implementation-specific details regarding signal handler persistence" name="CERT_C-SIG01" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM36_C (RULE) Do not modify the alignment of objects by calling realloc()" name="CERT_C-MEM36" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG00_C (REC) Mask signals handled by noninterruptible signal handlers" name="CERT_C-SIG00" rules="1" total="0" />
               <Category authTot="6;" authUrg="0;" desc="CERT-API00_C (REC) Functions should validate their parameters" name="CERT_C-API00" rules="1" total="6" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO24_C (REC) Do not open a file that is already open" name="CERT_C-FIO24" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG02_C (REC) Avoid using signals to implement normal functionality" name="CERT_C-SIG02" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO21_C (REC) Do not create temporary files in shared directories" name="CERT_C-FIO21" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-FIO22_C (REC) Close files before spawning processes" name="CERT_C-FIO22" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP40_C (RULE) Do not modify constant objects" name="CERT_C-EXP40" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM30_C (RULE) Do not access freed memory" name="CERT_C-MEM30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP33_C (RULE) Do not read uninitialized memory" name="CERT_C-EXP33" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-EXP34_C (RULE) Do not dereference null pointers" name="CERT_C-EXP34" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP32_C (RULE) Do not access a volatile object through a nonvolatile reference" name="CERT_C-EXP32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON32_C (RULE) Prevent data races when accessing bit-fields from multiple threads" name="CERT_C-CON32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP37_C (RULE) Call functions with the correct number and type of arguments" name="CERT_C-EXP37" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON33_C (RULE) Avoid race conditions when using library functions" name="CERT_C-CON33" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-CON30_C (RULE) Clean up thread-specific storage" name="CERT_C-CON30" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP35_C (RULE) Do not modify objects with temporary lifetime" name="CERT_C-EXP35" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON31_C (RULE) Do not destroy a mutex while it is locked" name="CERT_C-CON31" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP36_C (RULE) Do not cast pointers into more strictly aligned pointer types" name="CERT_C-EXP36" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON36_C (RULE) Wrap functions that can spuriously wake up in a loop" name="CERT_C-CON36" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON37_C (RULE) Do not call signal() in a multithreaded program" name="CERT_C-CON37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON34_C (RULE) Declare objects shared between threads with appropriate storage durations" name="CERT_C-CON34" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-EXP39_C (RULE) Do not access a variable through a pointer of an incompatible type" name="CERT_C-EXP39" rules="6" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON35_C (RULE) Avoid deadlock by locking in a predefined order" name="CERT_C-CON35" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON38_C (RULE) Preserve thread safety and liveness when using condition variables" name="CERT_C-CON38" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON39_C (RULE) Do not join or detach a thread that was previously joined or detached" name="CERT_C-CON39" rules="1" total="0" />
               <Category authTot="8;" authUrg="0;" desc="CERT-DCL22_C (REC) Use volatile for data that cannot be cached" name="CERT_C-DCL22" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL20_C (REC) Explicitly specify void when a function accepts no arguments" name="CERT_C-DCL20" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP00_C (REC) Use parentheses for precedence of operation" name="CERT_C-EXP00" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP05_C (REC) Do not cast away a const qualification" name="CERT_C-EXP05" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP02_C (REC) Be aware of the short-circuit behavior of the logical AND and OR operators" name="CERT_C-EXP02" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP08_C (REC) Ensure pointer arithmetic is used correctly" name="CERT_C-EXP08" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL19_C (REC) Minimize the scope of variables and functions" name="CERT_C-DCL19" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL18_C (REC) Do not begin integer constants with 0 when specifying a decimal value" name="CERT_C-DCL18" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL12_C (REC) Implement abstract data types using opaque types" name="CERT_C-DCL12" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO01_C (REC) Be careful using functions that use file names for identification" name="CERT_C-FIO01" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL11_C (REC) Understand the type issues associated with variadic functions" name="CERT_C-DCL11" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL10_C (REC) Maintain the contract between the writer and caller of variadic functions" name="CERT_C-DCL10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL16_C (REC) Use &quot;L,&quot; not &quot;l,&quot; to indicate a long value" name="CERT_C-DCL16" rules="1" total="0" />
               <Category authTot="16;" authUrg="0;" desc="CERT-DCL15_C (REC) Declare file-scope objects or functions that do not need external linkage as static" name="CERT_C-DCL15" rules="1" total="16" />
               <Category authTot="3;" authUrg="0;" desc="CERT-DCL13_C (REC) Declare function parameters that are pointers to values not changed by the function as const" name="CERT_C-DCL13" rules="1" total="3" />
               <Category authTot="1;" authUrg="0;" desc="CERT-EXP12_C (REC) Do not ignore values returned by functions" name="CERT_C-EXP12" rules="2" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP10_C (REC) Do not depend on the order of evaluation of subexpressions or the order in which side effects take place" name="CERT_C-EXP10" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP15_C (REC) Do not place a semicolon on the same line as an if, for, or while statement" name="CERT_C-EXP15" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP16_C (REC) Do not compare function pointers to constant values" name="CERT_C-EXP16" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP14_C (REC) Beware of integer promotion when performing bitwise operations on integer types smaller than int" name="CERT_C-EXP14" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP19_C (REC) Use braces for the body of an if, for, or while statement" name="CERT_C-EXP19" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR00_C (REC) Represent characters using an appropriate type" name="CERT_C-STR00" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR09_C (REC) Don't assume numeric values for expressions with type plain character" name="CERT_C-STR09" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-STR07_C (REC) Use the bounds-checking interfaces for string manipulation" name="CERT_C-STR07" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR04_C (REC) Use plain char for characters in the basic character set" name="CERT_C-STR04" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR05_C (REC) Use pointers to const when referring to string literals" name="CERT_C-STR05" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR02_C (REC) Sanitize data passed to complex subsystems" name="CERT_C-STR02" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR03_C (REC) Do not inadvertently truncate a string" name="CERT_C-STR03" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL41_C (RULE) Do not declare variables inside a switch statement before the first case label" name="CERT_C-DCL41" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL40_C (RULE) Do not create incompatible declarations of the same function or object" name="CERT_C-DCL40" rules="2" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-CON01_C (REC) Acquire and release synchronization primitives in the same module, at the same level of abstraction" name="CERT_C-CON01" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON02_C (REC) Do not use volatile as a synchronization primitive" name="CERT_C-CON02" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON05_C (REC) Do not perform operations that can block while holding a lock" name="CERT_C-CON05" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR11_C (REC) Do not specify the bound of a character array initialized with a string literal" name="CERT_C-STR11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL39_C (RULE) Avoid information leakage when passing a structure across a trust boundary" name="CERT_C-DCL39" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR10_C (REC) Do not concatenate different type of string literals" name="CERT_C-STR10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL31_C (RULE) Declare identifiers before using them" name="CERT_C-DCL31" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL38_C (RULE) Use the correct syntax when declaring a flexible array member" name="CERT_C-DCL38" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL37_C (RULE) Do not declare or define a reserved identifier" name="CERT_C-DCL37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL36_C (RULE) Do not declare an identifier with conflicting linkage classifications" name="CERT_C-DCL36" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL30_C (RULE) Declare objects with appropriate storage durations" name="CERT_C-DCL30" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR01_C (REC) Do not apply the sizeof operator to a pointer when taking the size of an array" name="CERT_C-ARR01" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR02_C (REC) Explicitly specify array bounds, even if implicitly defined by an initializer" name="CERT_C-ARR02" rules="1" total="0" />
               <Category authTot="8;" authUrg="0;" desc="CERT-PRE02_C (REC) Macro replacement lists should be parenthesized" name="CERT_C-PRE02" rules="1" total="8" />
               <Category authTot="8;" authUrg="0;" desc="CERT-PRE00_C (REC) Prefer inline or static functions to function-like macros" name="CERT_C-PRE00" rules="1" total="8" />
               <Category authTot="8;" authUrg="0;" desc="CERT-PRE01_C (REC) Use parentheses within macros around parameter names" name="CERT_C-PRE01" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE06_C (REC) Enclose header files in an include guard" name="CERT_C-PRE06" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE07_C (REC) Avoid using repeated question marks" name="CERT_C-PRE07" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-POS54_C (RULE) Detect and handle POSIX library errors" name="CERT_C-POS54" rules="3" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR30_C (RULE) Set errno to zero before calling a library function known to set errno, and check errno only after the function returns a value indicating failure" name="CERT_C-ERR30" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR32_C (RULE) Do not rely on indeterminate values of errno" name="CERT_C-ERR32" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-ERR33_C (RULE) Detect and handle standard library errors" name="CERT_C-ERR33" rules="4" total="2" />
               <Category authTot="2;" authUrg="0;" desc="CERT-ERR34_C (RULE) Detect errors when converting a string to a number" name="CERT_C-ERR34" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS51_C (RULE) Avoid deadlock with POSIX threads by locking in predefined order" name="CERT_C-POS51" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS50_C (RULE) Declare objects shared between POSIX threads with appropriate storage durations" name="CERT_C-POS50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS53_C (RULE) Do not use more than one mutex for concurrent waiting operations on a condition variable" name="CERT_C-POS53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS52_C (RULE) Do not perform operations that can block while holding a POSIX lock" name="CERT_C-POS52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR06_C (REC) Understand the termination behavior of assert() and abort()" name="CERT_C-ERR06" rules="1" total="0" />
               <Category authTot="4;" authUrg="0;" desc="CERT-ERR07_C (REC) Prefer functions that support error checking over equivalent functions that don't" name="CERT_C-ERR07" rules="2" total="4" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL06_C (REC) Use meaningful symbolic constants to represent literal values" name="CERT_C-DCL06" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL01_C (REC) Do not reuse variable names in subscopes" name="CERT_C-DCL01" rules="2" total="0" />
               <Category authTot="8;" authUrg="0;" desc="CERT-DCL00_C (REC) Const-qualify immutable objects" name="CERT_C-DCL00" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL05_C (REC) Use typedefs of non-pointer types only" name="CERT_C-DCL05" rules="1" total="0" />
               <Category authTot="6;" authUrg="0;" desc="CERT-DCL04_C (REC) Do not declare more than one variable per declaration" name="CERT_C-DCL04" rules="1" total="6" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL02_C (REC) Use visually distinct identifiers" name="CERT_C-DCL02" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS44_C (RULE) Do not use signals to terminate threads" name="CERT_C-POS44" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS48_C (RULE) Do not unlock or destroy another POSIX thread's mutex" name="CERT_C-POS48" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS47_C (RULE) Do not use threads that can be canceled asynchronously" name="CERT_C-POS47" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS49_C (RULE) When data must be accessed by multiple threads, provide a mutex and guarantee no adjacent data is also accessed" name="CERT_C-POS49" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-WIN30_C (RULE) Properly pair allocation and deallocation functions" name="CERT_C-WIN30" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR01_C (REC) Use ferror() rather than errno to check for FILE stream errors" name="CERT_C-ERR01" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-ERR02_C (REC) Avoid in-band error indicators" name="CERT_C-ERR02" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR04_C (REC) Choose an appropriate termination strategy" name="CERT_C-ERR04" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR05_C (REC) Application-independent code should provide error detection without dictating error handling" name="CERT_C-ERR05" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP37_C (RULE) Do not use object representations to compare floating-point values" name="CERT_C-FLP37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP36_C (RULE) Preserve precision when converting integral values to floating-point type" name="CERT_C-FLP36" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP34_C (RULE) Ensure that floating-point conversions are within range of the new type" name="CERT_C-FLP34" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS33_C (RULE) Do not use vfork()" name="CERT_C-POS33" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR32_C (RULE) Ensure size arguments for variable length arrays are in a valid range" name="CERT_C-ARR32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS35_C (RULE) Avoid race conditions while checking for the existence of a symbolic link" name="CERT_C-POS35" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS34_C (RULE) Do not call putenv() with a pointer to an automatic variable as the argument" name="CERT_C-POS34" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR30_C (RULE) Do not form or use out-of-bounds pointers or array subscripts" name="CERT_C-ARR30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS37_C (RULE) Ensure that privilege relinquishment is successful" name="CERT_C-POS37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP32_C (RULE) Prevent or detect domain and range errors in math functions" name="CERT_C-FLP32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS36_C (RULE) Observe correct revocation order while relinquishing privileges" name="CERT_C-POS36" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS39_C (RULE) Use the correct byte ordering when transferring data between systems" name="CERT_C-POS39" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP30_C (RULE) Do not use floating-point variables as loop counters" name="CERT_C-FLP30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS38_C (RULE) Beware of race conditions when using fork and file descriptors" name="CERT_C-POS38" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR39_C (RULE) Do not add or subtract a scaled integer to a pointer" name="CERT_C-ARR39" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR38_C (RULE) Guarantee that library functions do not form invalid pointers" name="CERT_C-ARR38" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR37_C (RULE) Do not add or subtract an integer to a pointer to a non-array object" name="CERT_C-ARR37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR36_C (RULE) Do not subtract or compare two pointers that do not refer to the same array" name="CERT_C-ARR36" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS30_C (RULE) Use the readlink() function properly" name="CERT_C-POS30" rules="3" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="SEI CERT C++" name="CERT_CPP" rules="143" total="0">
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL55_CPP (RULE) Avoid information leakage when passing a class object across a trust boundary" name="CERT_CPP-DCL55" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR52_CPP (RULE) Do not use setjmp() or longjmp()" name="CERT_CPP-ERR52" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL56_CPP (RULE) Avoid cycles during initialization of static objects" name="CERT_CPP-DCL56" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR51_CPP (RULE) Handle all exceptions" name="CERT_CPP-ERR51" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON56_CPP (RULE) Do not speculatively lock a non-recursive mutex that is already owned by the calling thread" name="CERT_CPP-CON56" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL53_CPP (RULE) Do not write syntactically ambiguous declarations" name="CERT_CPP-DCL53" rules="3" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-ERR50_CPP (RULE) Do not abruptly terminate the program" name="CERT_CPP-ERR50" rules="14" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL54_CPP (RULE) Overload allocation and deallocation functions as a pair in the same scope" name="CERT_CPP-DCL54" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL59_CPP (RULE) Do not define an unnamed namespace in a header file" name="CERT_CPP-DCL59" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM51_CPP (RULE) Properly deallocate dynamically allocated resources" name="CERT_CPP-MEM51" rules="4" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-MEM52_CPP (RULE) Detect and handle memory allocation errors" name="CERT_CPP-MEM52" rules="2" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL57_CPP (RULE) Do not let exceptions escape from destructors or deallocation functions" name="CERT_CPP-DCL57" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL58_CPP (RULE) Do not modify the standard namespaces" name="CERT_CPP-DCL58" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM50_CPP (RULE) Do not access freed memory" name="CERT_CPP-MEM50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON50_CPP (RULE) Do not destroy a mutex while it is locked" name="CERT_CPP-CON50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM55_CPP (RULE) Honor replacement dynamic storage management requirements" name="CERT_CPP-MEM55" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON51_CPP (RULE) Ensure actively held locks are released on exceptional conditions" name="CERT_CPP-CON51" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR59_CPP (RULE) Do not throw an exception across execution boundaries" name="CERT_CPP-ERR59" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM56_CPP (RULE) Do not store an already-owned pointer value in an unrelated smart pointer" name="CERT_CPP-MEM56" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-ERR58_CPP (RULE) Handle all exceptions thrown before main() begins executing" name="CERT_CPP-ERR58" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM53_CPP (RULE) Explicitly construct and destruct objects when manually managing object lifetime" name="CERT_CPP-MEM53" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-ERR57_CPP (RULE) Do not leak resources when handling exceptions" name="CERT_CPP-ERR57" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM54_CPP (RULE) Provide placement new with properly aligned pointers to sufficient storage capacity" name="CERT_CPP-MEM54" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON54_CPP (RULE) Wrap functions that can spuriously wake up in a loop" name="CERT_CPP-CON54" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR56_CPP (RULE) Guarantee exception safety" name="CERT_CPP-ERR56" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON55_CPP (RULE) Preserve thread safety and liveness when using condition variables" name="CERT_CPP-CON55" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR55_CPP (RULE) Honor exception specifications" name="CERT_CPP-ERR55" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON52_CPP (RULE) Prevent data races when accessing bit-fields from multiple threads" name="CERT_CPP-CON52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR54_CPP (RULE) Catch handlers should order their parameter types from most derived to least derived" name="CERT_CPP-ERR54" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM57_CPP (RULE) Avoid using default operator new for over-aligned types" name="CERT_CPP-MEM57" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON53_CPP (RULE) Avoid deadlock by locking in a predefined order" name="CERT_CPP-CON53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR53_CPP (RULE) Do not reference base classes or class data members in a constructor or destructor function-try-block handler" name="CERT_CPP-ERR53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR53_CPP (RULE) Range check element access" name="CERT_CPP-STR53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL51_CPP (RULE) Do not declare or define a reserved identifier" name="CERT_CPP-DCL51" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR50_CPP (RULE) Guarantee that storage for strings has sufficient space for character data and the null terminator" name="CERT_CPP-STR50" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL52_CPP (RULE) Never qualify a reference type with const or volatile" name="CERT_CPP-DCL52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR52_CPP (RULE) Use valid references, pointers, and iterators to reference elements of a basic_string" name="CERT_CPP-STR52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL50_CPP (RULE) Do not define a C-style variadic function" name="CERT_CPP-DCL50" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-STR51_CPP (RULE) Do not attempt to create a std::string from a null pointer" name="CERT_CPP-STR51" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP53_CPP (RULE) Write constructor member initializers in the canonical order" name="CERT_CPP-OOP53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP52_CPP (RULE) Do not delete a polymorphic object without a virtual destructor" name="CERT_CPP-OOP52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP51_CPP (RULE) Do not slice derived objects" name="CERT_CPP-OOP51" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP50_CPP (RULE) Do not invoke virtual functions from constructors or destructors" name="CERT_CPP-OOP50" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP57_CPP (RULE) Prefer special member functions and overloaded operators to C Standard Library functions" name="CERT_CPP-OOP57" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC50_CPP (RULE) Do not use std::rand() for generating pseudorandom numbers" name="CERT_CPP-MSC50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP56_CPP (RULE) Honor replacement handler requirements" name="CERT_CPP-OOP56" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC51_CPP (RULE) Ensure your random number generator is properly seeded" name="CERT_CPP-MSC51" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP55_CPP (RULE) Do not use pointer-to-member operators to access nonexistent members" name="CERT_CPP-OOP55" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC52_CPP (RULE) Value-returning functions must return a value from all exit paths" name="CERT_CPP-MSC52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP54_CPP (RULE) Gracefully handle self-copy assignment" name="CERT_CPP-OOP54" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP58_CPP (RULE) Copy operations must not mutate the source object" name="CERT_CPP-OOP58" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-FIO51_CPP (RULE) Close files when they are no longer needed" name="CERT_CPP-FIO51" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO50_CPP (RULE) Do not alternately input and output from a file stream without an intervening positioning call" name="CERT_CPP-FIO50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL60_CPP (RULE) Obey the one-definition rule" name="CERT_CPP-DCL60" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP55_CPP (RULE) Do not access a cv-qualified object through a cv-unqualified type" name="CERT_CPP-EXP55" rules="1" total="0" />
               <Category authTot="8;" authUrg="0;" desc="CERT-EXP56_CPP (RULE) Do not call a function with a mismatched language linkage" name="CERT_CPP-EXP56" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP53_CPP (RULE) Do not read uninitialized memory" name="CERT_CPP-EXP53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP54_CPP (RULE) Do not access an object outside of its lifetime" name="CERT_CPP-EXP54" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP59_CPP (RULE) Use offsetof() on valid types and members" name="CERT_CPP-EXP59" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP57_CPP (RULE) Do not cast or delete pointers to incomplete classes" name="CERT_CPP-EXP57" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP58_CPP (RULE) Pass an object of the correct type to va_start" name="CERT_CPP-EXP58" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP62_CPP (RULE) Do not access the bits of an object representation that are not part of the object's value representation" name="CERT_CPP-EXP62" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP63_CPP (RULE) Do not rely on the value of a moved-from object" name="CERT_CPP-EXP63" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP60_CPP (RULE) Do not pass a nonstandard-layout type object across execution boundaries" name="CERT_CPP-EXP60" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP61_CPP (RULE) A lambda object must not outlive any of its reference captured objects" name="CERT_CPP-EXP61" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC53_CPP (RULE) Do not return from a function declared [[noreturn]]" name="CERT_CPP-MSC53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC54_CPP (RULE) A signal handler must be a plain old function" name="CERT_CPP-MSC54" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-ERR62_CPP (RULE) Detect errors when converting a string to a number" name="CERT_CPP-ERR62" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR61_CPP (RULE) Catch exceptions by lvalue reference" name="CERT_CPP-ERR61" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR60_CPP (RULE) Exception objects must be nothrow copy constructible" name="CERT_CPP-ERR60" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR57_CPP (RULE) Provide a valid ordering predicate" name="CERT_CPP-CTR57" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR58_CPP (RULE) Predicate function objects should not be mutable" name="CERT_CPP-CTR58" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR53_CPP (RULE) Use valid iterator ranges" name="CERT_CPP-CTR53" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR54_CPP (RULE) Do not subtract iterators that do not refer to the same container" name="CERT_CPP-CTR54" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR55_CPP (RULE) Do not use an additive operator on an iterator if the result would overflow" name="CERT_CPP-CTR55" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR56_CPP (RULE) Do not use pointer arithmetic on polymorphic objects" name="CERT_CPP-CTR56" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR50_CPP (RULE) Guarantee that container indices and iterators are within the valid range" name="CERT_CPP-CTR50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR51_CPP (RULE) Use valid references, pointers, and iterators to reference elements of a container" name="CERT_CPP-CTR51" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR52_CPP (RULE) Guarantee that library functions do not overflow" name="CERT_CPP-CTR52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT50_CPP (RULE) Do not cast to an out-of-range enumeration value" name="CERT_CPP-INT50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP51_CPP (RULE) Do not delete an array through a pointer of the incorrect type" name="CERT_CPP-EXP51" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP52_CPP (RULE) Do not rely on side effects in unevaluated operands" name="CERT_CPP-EXP52" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP50_CPP (RULE) Do not depend on the order of evaluation for side effects" name="CERT_CPP-EXP50" rules="6" total="0" />
            </Category>
            <Category authTot="129;" authUrg="4;" desc="Coding Conventions" name="CODSTA" rules="441" total="129">
               <Category authTot="57;" authUrg="0;" desc="Coding Conventions for C++" name="CODSTA-CPP" rules="112" total="57" />
               <Category authTot="37;" authUrg="5;" desc="Coding Conventions for Modern C++" name="CODSTA-MCPP" rules="68" total="37" />
            </Category>
            <Category authTot="69;" authUrg="2;" desc="Comments" name="COMMENT" rules="16" total="69" />
            <Category authTot="0;" authUrg="0;" desc="Common Weakness Enumeration" name="CWE" rules="83" total="0">
               <Category authTot="0;" authUrg="0;" desc="CWE-532 Inclusion of Sensitive Information in Log Files" name="CWE-532" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CWE-772 Missing Release of Resource after Effective Lifetime" name="CWE-772" rules="2" total="1" />
               <Category authTot="1;" authUrg="0;" desc="CWE-476 NULL Pointer Dereference" name="CWE-476" rules="2" total="1" />
               <Category authTot="1;" authUrg="0;" desc="CWE-770 Allocation of Resources Without Limits or Throttling" name="CWE-770" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CWE-190 Integer Overflow or Wraparound" name="CWE-190" rules="7" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" name="CWE-78" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-617 Reachable Assertion" name="CWE-617" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-835 Loop with Unreachable Exit Condition ('Infinite Loop')" name="CWE-835" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-415 Double Free" name="CWE-415" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer" name="CWE-119" rules="11" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-416 Use After Free" name="CWE-416" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-611 Improper Restriction of XML External Entity Reference" name="CWE-611" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-732 Incorrect Permission Assignment for Critical Resource" name="CWE-732" rules="2" total="0" />
               <Category authTot="3;" authUrg="2;" desc="CWE-798 Use of Hard-coded Credentials" name="CWE-798" rules="1" total="3" />
               <Category authTot="0;" authUrg="0;" desc="CWE-125 Out-of-bounds Read" name="CWE-125" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-400 Uncontrolled Resource Consumption" name="CWE-400" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-269 Improper Privilege Management" name="CWE-269" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-863 Incorrect Authorization" name="CWE-863" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-200 Information Exposure" name="CWE-200" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-287 Improper Authentication" name="CWE-287" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-362 Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')" name="CWE-362" rules="5" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CWE-20 Improper Input Validation" name="CWE-20" rules="10" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" name="CWE-22" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" name="CWE-89" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-704 Incorrect Type Conversion or Cast" name="CWE-704" rules="12" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-426 Untrusted Search Path" name="CWE-426" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-787 Out-of-bounds Write" name="CWE-787" rules="7" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-326 Inadequate Encryption Strength" name="CWE-326" rules="1" total="0" />
            </Category>
            <Category authTot="5;" authUrg="0;" desc="Exceptions" name="EXCEPT" rules="26" total="5" />
            <Category authTot="213;" authUrg="0;" desc="Formatting" name="FORMAT" rules="51" total="213" />
            <Category authTot="13;" authUrg="0;" desc="Global Static Analysis" name="GLOBAL" rules="20" total="13" />
            <Category authTot="0;" authUrg="0;" desc="High Integrity C++" name="HICPP" rules="234" total="0">
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.2.2 Initialize none, the first only or all enumerators in an enumeration" name="HICPP-7_2_2" rules="1" total="0" />
               <Category authTot="153;" authUrg="0;" desc="HIC++ 2.1.1 Do not use tab characters in source files" name="HICPP-2_1_1" rules="1" total="153" />
               <Category authTot="17;" authUrg="0;" desc="HIC++ 2.5.3 Use nullptr for the null pointer constant" name="HICPP-2_5_3" rules="1" total="17" />
               <Category authTot="1;" authUrg="0;" desc="HIC++ 15.1.1 Only use instances of std::exception for exceptions" name="HICPP-15_1_1" rules="2" total="1" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.5.2 Do not use octal constants (other than zero)" name="HICPP-2_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.5.1 Do not concatenate strings with different encoding prefixes" name="HICPP-2_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.4 Write members in an initialization list in the order in which they are declared" name="HICPP-12_4_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.2.1 Use an explicit enumeration base and ensure that it is large enough to store all enumerators" name="HICPP-7_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.5 Use delegating constructors to reduce code duplication" name="HICPP-12_4_5" rules="1" total="0" />
               <Category authTot="7;" authUrg="0;" desc="HIC++ 3.3.1 Do not use variables with static storage duration" name="HICPP-3_3_1" rules="1" total="7" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.5.1 Do not ignore the result of std::remove, std::remove if or std::unique" name="HICPP-17_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.5 Implement a minimal set of operators and use them to implement all other related operators" name="HICPP-13_2_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 4.1.1 Ensure that a function argument does not undergo an array-to-pointer conversion" name="HICPP-4_1_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.4.2 Ensure that a braced aggregate initializer matches the layout of the aggregate object" name="HICPP-8_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.4.1 Do not access an invalid object or an object with indeterminate value" name="HICPP-8_4_1" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.1.2 If a member of a set of callable functions includes a universal reference parameter, ensure that one appears in the same position for all other members" name="HICPP-13_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.1 Within the scope of a lock, ensure that no static path results in a lock of the same mutex" name="HICPP-18_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.2 Ensure that order of nesting of locks in a project forms a DAG" name="HICPP-18_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.5 Do not access the members of std::mutex directly" name="HICPP-18_3_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.6 Do not use relaxed atomics" name="HICPP-18_3_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.3.3 Ensure that the form of delete matches the form of new used to allocate the memory" name="HICPP-5_3_3" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.3 Do not use std::recursive mutex" name="HICPP-18_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.7.2 Ensure that a pointer to member that is a virtual function is only compared (==) with nullptr" name="HICPP-5_7_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.1.1 Ensure that all overloads of a function are visible from where it is called" name="HICPP-13_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.4 Only use std::unique lock when std::lock guard cannot be used" name="HICPP-18_3_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.7.1 Do not write code that expects floating point calculations to yield exact results" name="HICPP-5_7_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.3.2 Allocate memory using new and release it using delete" name="HICPP-5_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.3.1 Do not apply unary minus to operands of unsigned type" name="HICPP-5_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.2.1 Declare bit-fields with an explicitly unsigned integral or enumeration type" name="HICPP-9_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.3.1 Correctly declare overloads for operator new and delete" name="HICPP-12_3_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.1.4 Ensure that a switch statement has at least two case labels, distinct from the default label" name="HICPP-6_1_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 11.1.1 Declare all data members private" name="HICPP-11_1_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.1.3 Ensure that a non-empty case statement block does not fall through to the next label" name="HICPP-6_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.1.2 Explicitly cover all paths through multi-way selection statements" name="HICPP-6_1_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.1.1 Enclose the body of a selection or an iteration statement in a compound statement" name="HICPP-6_1_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.3.1 Do not use using directives" name="HICPP-7_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 15.2.1 Do not throw an exception from a destructor" name="HICPP-15_2_1" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="HIC++ 2.4.1 Ensure that each identifier is distinct from any other visible identifier" name="HICPP-2_4_1" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.7 Declare assignment operators with the ref-qualifier &amp;" name="HICPP-12_5_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 10.3.1 Ensure that a derived class has at most one base class which is not an interface class" name="HICPP-10_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.8 Make the copy assignment operator of an abstract class protected or define it =delete" name="HICPP-12_5_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.6 Use an atomic, non-throwing swap operation to implement the copy and move assignment operators" name="HICPP-12_5_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.3 Ensure that a user defined move/copy constructor only moves/copies base and member objects" name="HICPP-12_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.4 Declare noexcept the move constructor and move assignment operator" name="HICPP-12_5_4" rules="1" total="0" />
               <Category authTot="3;" authUrg="0;" desc="HIC++ 8.1.1 Do not use multiple levels of pointer indirection" name="HICPP-8_1_1" rules="1" total="3" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.2.1 Do not declare functions at block scope" name="HICPP-3_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.4.1 Use const container calls when result is immediately converted to a const iterator" name="HICPP-17_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.4.2 Use API calls that construct objects in place" name="HICPP-17_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 4.4.1 Do not convert floating values to integral types except through use of standard library functions" name="HICPP-4_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.1 Do not overload operators with special semantics" name="HICPP-13_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.2.2 Synchronize access to data shared between threads using a single lock" name="HICPP-18_2_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.2 Ensure that the return type of an overloaded binary operator matches the built-in counterparts" name="HICPP-13_2_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.2.3 Do not share volatile data between threads" name="HICPP-18_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.3 Declare binary arithmetic and bitwise operators as non-members" name="HICPP-13_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.4 When overloading the subscript operator (operator[]) implement both const and non-const versions" name="HICPP-13_2_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.2.1 Use high integrity::thread in place of std::thread" name="HICPP-18_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.6.1 Do not use bitwise operators with signed operands" name="HICPP-5_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.2.4 Use std::call_once rather than the Double-Checked Locking pattern" name="HICPP-18_2_4" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="HIC++ 5.2.1 Ensure that pointer or array access is demonstrably within bounds of a valid object" name="HICPP-5_2_1" rules="3" total="1" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.2.2 Ensure that functions do not call themselves, either directly or indirectly" name="HICPP-5_2_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.2 Ensure that a constructor initializes explicitly all base classes and non-static data members" name="HICPP-12_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.3 Do not specify both an NSDMI and a member initializer in a constructor for the same non static member" name="HICPP-12_4_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.1 Do not use the dynamic type of an object unless the object is fully constructed" name="HICPP-12_4_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.4.1 Postpone variable definitions as long as possible" name="HICPP-6_4_1" rules="2" total="0" />
               <Category authTot="1;" authUrg="0;" desc="HIC++ 15.3.2 Ensure that a program does not result in a call to std::terminate" name="HICPP-15_3_2" rules="3" total="1" />
               <Category authTot="22;" authUrg="0;" desc="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards" name="HICPP-16_1_1" rules="9" total="22" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 16.1.2 Do not include a path specifier in filenames supplied in #include directives" name="HICPP-16_1_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 11.2.1 Do not use friend declarations" name="HICPP-11_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.3.1 Do not use the C comment delimiters /* ... */" name="HICPP-2_3_1" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="HIC++ 7.4.1 Ensure that any objects, functions or types to be used from a single translation unit are defined in an unnamed namespace in the main source file" name="HICPP-7_4_1" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.4.3 Ensure that an object or a function used from multiple translation units is declared in a single header file" name="HICPP-7_4_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.4.2 Ensure that an inline function, a function template, or a type used from multiple translation units is defined in a single header file" name="HICPP-7_4_2" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 16.1.5 Include directly the minimum number of headers required for compilation" name="HICPP-16_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 16.1.3 Match the filename in a #include directive to the one on the filesystem" name="HICPP-16_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 15.3.1 Do not access non-static members from a catch handler of constructor/destructor function try block" name="HICPP-15_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 16.1.4 Use &lt;> brackets for system and standard library headers. Use quotes for all other headers" name="HICPP-16_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.3.2 Do not comment out code" name="HICPP-2_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 10.2.1 Use the override special identifier when overriding a virtual function" name="HICPP-10_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.4 Do not create smart pointers of array type" name="HICPP-17_3_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.5 Do not create an rvalue reference of std::array" name="HICPP-17_3_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.1.1 Do not hide declarations" name="HICPP-3_1_1" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.1 Do not use std::move on objects declared with const or const &amp; type" name="HICPP-17_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 14.1.1 Use variadic templates rather than an ellipsis" name="HICPP-14_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.2 Use std::forward to forward universal references" name="HICPP-17_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.3 Do not subsequently use the argument to std::forward" name="HICPP-17_3_3" rules="1" total="0" />
               <Category authTot="15;" authUrg="0;" desc="HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object" name="HICPP-3_5_1" rules="4" total="15" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 4.3.1 Do not convert an expression of wider floating point type to a narrower floating point type" name="HICPP-4_3_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.10 Use static assert for assertions involving compile time constants" name="HICPP-7_1_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.2.4 Do not pass std::unique ptr by const reference" name="HICPP-8_2_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.2.3 Pass small objects with a trivial copy constructor by value" name="HICPP-8_2_3" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.2.2 Do not declare functions with an excessive number of parameters" name="HICPP-8_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.2.1 Make parameter names absent or identical in all declarations" name="HICPP-8_2_1" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="HIC++ 18.1.1 Do not use platform specific multi-threading facilities" name="HICPP-18_1_1" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.6 Do not code side effects into the right-hand operands of: &amp;&amp;, ||, sizeof, typeid or a function passed to condition variable::wait" name="HICPP-5_1_6" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.5 Include a (possibly empty) parameter list in every lambda expression" name="HICPP-5_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.5.1 Ensure that the right hand operand of the division or remainder operators is demonstrably non-zero" name="HICPP-5_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.2 Do not rely on the sequence of evaluation within an expression" name="HICPP-5_1_2" rules="10" total="0" />
               <Category authTot="2;" authUrg="2;" desc="HIC++ 5.1.1 Use symbolic names instead of literal values in code" name="HICPP-5_1_1" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.4 Do not capture variables implicitly in a lambda" name="HICPP-5_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.3 Use parentheses in expressions to specify the intent of the expression" name="HICPP-5_1_3" rules="2" total="0" />
               <Category authTot="6;" authUrg="0;" desc="HIC++ 12.5.1 Define explicitly =default or =delete implicit special member functions of concrete classes" name="HICPP-12_5_1" rules="1" total="6" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.2 Define special members =default if the behavior is equivalent" name="HICPP-12_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.3.2 Ensure that execution of a function with a non-void return type ends in a return statement with a value" name="HICPP-6_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.1.1 Do not declare implicit user defined conversions" name="HICPP-12_1_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.2.1 Ensure that all statements are reachable" name="HICPP-1_2_1" rules="10" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.2.2 Ensure that no expression or sub-expression is redundant" name="HICPP-1_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.3.1 Ensure that the label(s) for a jump statement or a switch condition appear later, in the same or an enclosing block" name="HICPP-6_3_1" rules="3" total="0" />
               <Category authTot="2;" authUrg="0;" desc="HIC++ 7.1.4 Place CV-qualifiers on the right hand side of the type they apply to" name="HICPP-7_1_4" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.2.1 Do not use digraphs or trigraphs" name="HICPP-2_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.3 Do not place type specifiers before non-type specifiers in a declaration" name="HICPP-7_1_3" rules="1" total="0" />
               <Category authTot="15;" authUrg="0;" desc="HIC++ 7.1.6 Use class types or typedefs to abstract scalar quantities and standard integer types" name="HICPP-7_1_6" rules="3" total="15" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.5 Do not inline large functions" name="HICPP-7_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.5.1 Do not use the asm declaration" name="HICPP-7_5_1" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="HIC++ 7.1.8 Use auto id = expr when declaring a variable to have the same type as its initializer function call" name="HICPP-7_1_8" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.7 Use a trailing return type in preference to type disambiguation using typename" name="HICPP-7_1_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.9 Do not explicitly specify the return type of a lambda" name="HICPP-7_1_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 10.1.1 Ensure that access to base class subobjects does not require explicit disambiguation" name="HICPP-10_1_1" rules="1" total="0" />
               <Category authTot="8;" authUrg="0;" desc="HIC++ 7.1.2 Use const whenever possible" name="HICPP-7_1_2" rules="1" total="8" />
               <Category authTot="12;" authUrg="0;" desc="HIC++ 7.1.1 Declare each identifier on a separate line in a separate declaration" name="HICPP-7_1_1" rules="2" total="12" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 14.2.2 Do not explicitly specialize a function template that is overloaded with other templates" name="HICPP-14_2_2" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="HIC++ 17.2.1 Wrap use of the C Standard Library" name="HICPP-17_2_1" rules="2" total="2" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.4.1 Do not return a reference or a pointer to an automatic variable defined within the function" name="HICPP-3_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 14.2.3 Declare extern an explicitly instantiated template" name="HICPP-14_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.4.3 Use RAII for resources" name="HICPP-3_4_3" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 14.2.1 Declare template specializations in the same file as the primary template they specialize." name="HICPP-14_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.4.2 Do not assign the address of a variable to a pointer with a greater lifetime" name="HICPP-3_4_2" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="HIC++ 4.2.2 Ensure that data loss does not demonstrably occur in an integral expression" name="HICPP-4_2_2" rules="6" total="2" />
               <Category authTot="20;" authUrg="0;" desc="HIC++ 4.2.1 Ensure that the U suffix is applied to a literal used in a context requiring an unsigned integral expression" name="HICPP-4_2_1" rules="1" total="20" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.3.4 Define =delete functions with parameters of type rvalue reference to const" name="HICPP-8_3_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.3.3 Do not use default arguments" name="HICPP-8_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.3.1 Do not write functions with an excessive McCabe Cyclomatic Complexity" name="HICPP-8_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.4.1 Do not use std::condition variable any on a std::mutex" name="HICPP-18_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.4.3 Do not convert from a base class to a derived class" name="HICPP-5_4_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.4.2 Do not cast an expression to an enumeration type" name="HICPP-5_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.8.1 Do not use the conditional operator (?:) as a sub-expression" name="HICPP-5_8_1" rules="1" total="0" />
               <Category authTot="2;" authUrg="1;" desc="HIC++ 5.4.1 Only use casting forms: static cast (excl. void*), dynamic cast or explicit constructor call" name="HICPP-5_4_1" rules="3" total="2" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.1.5 Do not introduce virtual functions in a final class" name="HICPP-9_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.1.1 Do not use std::vector&lt;bool>" name="HICPP-17_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.1.3 Do not return non-const handles to class data from const member functions" name="HICPP-9_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.1.4 Do not write member functions which return non-const handles to data less accessible than the member function" name="HICPP-9_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.1.1 Declare static any member function that does not require this. Alternatively, declare const any member function that does not modify the externally visible state of the object" name="HICPP-9_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.1.2 Make default arguments the same or absent when overriding a virtual function" name="HICPP-9_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.3.4 Do not use deprecated STL library features" name="HICPP-1_3_4" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="HIC++ 1.3.3 Do not use the C Standard Library .h headers" name="HICPP-1_3_3" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.2.4 Only modify a for loop counter in the for expression" name="HICPP-6_2_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.3.5 Do not use throw exception specifications" name="HICPP-1_3_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.2.3 Do not alter a control or counter variable more than once in a loop" name="HICPP-6_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.2.1 Declare virtual, private or protected the destructor of a type used as a base class" name="HICPP-12_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.3.2 Do not use the register keyword" name="HICPP-1_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.3.1 Do not use the increment operator (++) on a variable of type bool" name="HICPP-1_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.2.2 Ensure that a loop has a single loop counter, an optional control variable, and is not degenerate" name="HICPP-6_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.2.1 Implement a loop that only uses element values as a range-based loop" name="HICPP-6_2_1" rules="1" total="0" />
            </Category>
            <Category authTot="11;" authUrg="0;" desc="Initialization" name="INIT" rules="20" total="11" />
            <Category authTot="355;" authUrg="3;" desc="Joint Strike Fighter" name="JSF" rules="278" total="355" />
            <Category authTot="1;" authUrg="0;" desc="Metric" name="METRIC" rules="50" total="1" />
            <Category authTot="35;" authUrg="1;" desc="Metrics" name="METRICS" rules="43" total="35" />
            <Category authTot="49;" authUrg="0;" desc="MISRA C 1998" name="MISRA" rules="60" total="49" />
            <Category authTot="89;" authUrg="0;" desc="MISRA C 2004" name="MISRA2004" rules="221" total="89" />
            <Category authTot="205;" authUrg="0;" desc="MISRA C++ 2008" name="MISRA2008" rules="336" total="205" />
            <Category authTot="0;" authUrg="0;" desc="MISRA C 2012 (Legacy)" name="MISRA2012" rules="322" total="0">
               <Category authTot="53;" authUrg="0;" desc="MISRA C 2012 Rules" name="MISRA2012-RULE" rules="279" total="53" />
               <Category authTot="28;" authUrg="0;" desc="MISRA C 2012 Directives" name="MISRA2012-DIR" rules="43" total="28" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="MISRA C 2012" name="MISRAC2012" rules="322" total="0">
               <Category authTot="0;" authUrg="0;" desc="Rule 11.3 (Required) A cast shall not be performed between a pointer to object type and a pointer to a different object type" name="MISRAC2012-RULE_11_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.13 (Required) A line whose first token is # shall be a valid preprocessing directive" name="MISRAC2012-RULE_20_13" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.5 (Required) An external object or function shall be declared once in one and only one file" name="MISRAC2012-RULE_8_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 11.4 (Advisory) A conversion should not be performed between a pointer to object and an integer type" name="MISRAC2012-RULE_11_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.12 (Required) A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" name="MISRAC2012-RULE_20_12" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.6 (Required) An identifier with external linkage shall have exactly one external definition" name="MISRAC2012-RULE_8_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 11.5 (Advisory) A conversion should not be performed from pointer to void into pointer to object" name="MISRAC2012-RULE_11_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 15.1 (Advisory) The goto statement should not be used" name="MISRAC2012-RULE_15_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.11 (Required) A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" name="MISRAC2012-RULE_20_11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.3 (Required) All declarations of an object or function shall use the same names and type qualifiers" name="MISRAC2012-RULE_8_3" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 11.6 (Required) A cast shall not be performed between pointer to void and an arithmetic type" name="MISRAC2012-RULE_11_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 15.2 (Required) The goto statement shall jump to a label declared later in the same function" name="MISRAC2012-RULE_15_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.10 (Advisory) The # and ## preprocessor operators should not be used" name="MISRAC2012-RULE_20_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.4 (Required) A compatible declaration shall be visible when an object or function with external linkage is defined" name="MISRAC2012-RULE_8_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 11.7 (Required) A cast shall not be performed between pointer to object and a non-integer arithmetic type" name="MISRAC2012-RULE_11_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 15.3 (Required) Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement" name="MISRAC2012-RULE_15_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.9 (Advisory) An object should be defined at block scope if its identifier only appears in a single function" name="MISRAC2012-RULE_8_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 11.8 (Required) A cast shall not remove any const or volatile qualification from the type pointed to by a pointer" name="MISRAC2012-RULE_11_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 15.4 (Advisory) There should be no more than one break or goto statement used to terminate any iteration statement" name="MISRAC2012-RULE_15_4" rules="1" total="0" />
               <Category authTot="26;" authUrg="0;" desc="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant" name="MISRAC2012-RULE_11_9" rules="2" total="26" />
               <Category authTot="0;" authUrg="0;" desc="Rule 15.5 (Advisory) A function should have a single point of exit at the end" name="MISRAC2012-RULE_15_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 19.1 (Mandatory) An object shall not be assigned or copied to an overlapping object" name="MISRAC2012-RULE_19_1" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.7 (Advisory) Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" name="MISRAC2012-RULE_8_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 15.6 (Required) The body of an iteration-statement or a selection-statement shall be a compound-statement" name="MISRAC2012-RULE_15_6" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 19.2 (Advisory) The union keyword should not be used" name="MISRAC2012-RULE_19_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.8 (Required) The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage" name="MISRAC2012-RULE_8_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.14 (Required) The validity of values received from external sources shall be checked" name="MISRAC2012-DIR_4_14" rules="12" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 15.7 (Required) All if ... else if constructs shall be terminated with an else statement" name="MISRAC2012-RULE_15_7" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="Dir 4.13 (Advisory) Functions which are designed to provide operations on a resource should be called in an appropriate sequence" name="MISRAC2012-DIR_4_13" rules="6" total="2" />
               <Category authTot="2;" authUrg="0;" desc="Dir 4.12 (Required) Dynamic memory allocation shall not be used" name="MISRAC2012-DIR_4_12" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.11 (Required) The validity of values passed to library functions shall be checked" name="MISRAC2012-DIR_4_11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.10 (Required) Precautions shall be taken in order to prevent the contents of a header file being included more than once" name="MISRAC2012-DIR_4_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.14 (Required) All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related" name="MISRAC2012-RULE_20_14" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 4.1 (Required) Octal and hexadecimal escape sequences shall be terminated" name="MISRAC2012-RULE_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 4.2 (Advisory) Trigraphs should not be used" name="MISRAC2012-RULE_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.1 (Required) Types shall be explicitly specified" name="MISRAC2012-RULE_8_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.2 (Required) Function types shall be in prototype form with named parameters" name="MISRAC2012-RULE_8_2" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 11.1 (Required) Conversions shall not be performed between a pointer to a function and any other type" name="MISRAC2012-RULE_11_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 11.2 (Required) Conversions shall not be performed between a pointer to an incomplete type and any other type" name="MISRAC2012-RULE_11_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.3 (Required) The same file shall not be open for read and write access at the same time on different streams" name="MISRAC2012-RULE_22_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.4 (Mandatory) There shall be no attempt to write to a stream which has been opened as read-only" name="MISRAC2012-RULE_22_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.5 (Mandatory) A pointer to a FILE object shall not be dereferenced" name="MISRAC2012-RULE_22_5" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.6 (Mandatory) The value of a pointer to a FILE shall not be used after the associated stream has been closed" name="MISRAC2012-RULE_22_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.7 (Required) The macro EOF shall only be compared with the unmodified return value from any Standard Library function capable of returning EOF" name="MISRAC2012-RULE_22_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.8 (Required) The value of errno shall be set to zero prior to a call to an errno-setting-function" name="MISRAC2012-RULE_22_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.9 (Required) The value of errno shall be tested against zero after calling an errno-setting-function" name="MISRAC2012-RULE_22_9" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="Rule 22.1 (Required) All resources obtained dynamically by means of Standard Library functions shall be explicitly released" name="MISRAC2012-RULE_22_1" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.2 (Mandatory) A block of memory shall only be freed if it was allocated by means of a" name="MISRAC2012-RULE_22_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.4 (Required) Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" name="MISRAC2012-RULE_10_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.5 (Advisory) The value of an expression should not be cast to an inappropriate essential type" name="MISRAC2012-RULE_10_5" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 14.1 (Required) A loop counter shall not have essentially floating type" name="MISRAC2012-RULE_14_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.6 (Required) The value of a composite expression shall not be assigned to an object with wider essential type" name="MISRAC2012-RULE_10_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 14.2 (Required) A for loop shall be well-formed" name="MISRAC2012-RULE_14_2" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 7.4 (Required) A string literal shall not be assigned to an object unless the object's type is &quot;pointer to const-qualified char&quot;" name="MISRAC2012-RULE_7_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.7 (Required) If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" name="MISRAC2012-RULE_10_7" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 14.3 (Required) Controlling expressions shall not be invariant" name="MISRAC2012-RULE_14_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.8 (Required) The value of a composite expression shall not be cast to a different essential type category or a wider essential type" name="MISRAC2012-RULE_10_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 14.4 (Required) The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type" name="MISRAC2012-RULE_14_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.1 (Required) A pointer resulting from arithmetic on a pointer operand shall address an element of the same array as that pointer operand" name="MISRAC2012-RULE_18_1" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.2 (Required) Subtraction between pointers shall only be applied to pointers that address elements of the same array" name="MISRAC2012-RULE_18_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.3 (Required) The relational operators >, >=, &lt; and &lt;= shall not be applied to objects of pointer type except where they point into the same object" name="MISRAC2012-RULE_18_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.4 (Advisory) The +, -, += and -= operators should not be applied to an expression of pointer type" name="MISRAC2012-RULE_18_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.5 (Advisory) Declarations should contain no more than two levels of pointer nesting" name="MISRAC2012-RULE_18_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.6 (Required) The address of an object with automatic storage shall not be copied to another object that persists after the first object has ceased to exist" name="MISRAC2012-RULE_18_6" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.7 (Required) Flexible array members shall not be declared" name="MISRAC2012-RULE_18_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.8 (Required) Variable-length array types shall not be used" name="MISRAC2012-RULE_18_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 3.2 (Required) Line-splicing shall not be used in // comments" name="MISRAC2012-RULE_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 3.1 (Required) The character sequences /* and // shall not be used within a comment" name="MISRAC2012-RULE_3_1" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 7.2 (Required) A &quot;u&quot; or &quot;U&quot; suffix shall be applied to all integer constants that are represented in an unsigned type" name="MISRAC2012-RULE_7_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.1 (Required) Operands shall not be of an inappropriate essential type" name="MISRAC2012-RULE_10_1" rules="7" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 7.3 (Required) The lowercase character &quot;l&quot; shall not be used in a literal suffix" name="MISRAC2012-RULE_7_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.2 (Required) Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" name="MISRAC2012-RULE_10_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.3 (Required) The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category" name="MISRAC2012-RULE_10_3" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 7.1 (Required) Octal constants shall not be used" name="MISRAC2012-RULE_7_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.14 (Required) The Standard Library function memcmp shall not be used to compare null terminated strings" name="MISRAC2012-RULE_21_14" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.4 (Required) The standard header file &lt;setjmp.h> shall not be used" name="MISRAC2012-RULE_21_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.13 (Mandatory) Any value passed to a function in &lt;ctype.h> shall be representable as an unsigned char or be the value EOF" name="MISRAC2012-RULE_21_13" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.5 (Required) The standard header file &lt;signal.h> shall not be used" name="MISRAC2012-RULE_21_5" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.12 (Advisory) The exception handling features of &lt;fenv.h> should not be used" name="MISRAC2012-RULE_21_12" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="Rule 21.6 (Required) The Standard Library input/output functions shall not be used" name="MISRAC2012-RULE_21_6" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.11 (Required) The standard header file &lt;tgmath.h> shall not be used" name="MISRAC2012-RULE_21_11" rules="2" total="0" />
               <Category authTot="2;" authUrg="0;" desc="Rule 21.7 (Required) The atof, atoi, atol and atoll functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_7" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.10 (Required) The Standard Library time and date functions shall not be used" name="MISRAC2012-RULE_21_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.8 (Required) The Standard Library termination functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_8" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.9 (Required) The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.19 (Mandatory) The pointers returned by the Standard Library functions localeconv, getenv, setlocale or, strerror shall only be used as if they have pointer to const-qualified type" name="MISRAC2012-RULE_21_19" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.18 (Mandatory) The size_t argument passed to any function in &lt;string.h> shall have an appropriate value" name="MISRAC2012-RULE_21_18" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.17 (Mandatory) Use of the string handling functions from &lt;string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters" name="MISRAC2012-RULE_21_17" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.16 (Required) The pointer arguments to the Standard Library function memcmp shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" name="MISRAC2012-RULE_21_16" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.15 (Required) The pointer arguments to the Standard Library functions memcpy, memmove and memcmp shall be pointers to qualified or unqualified versions of compatible types" name="MISRAC2012-RULE_21_15" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.1 (Required) #define and #undef shall not be used on a reserved identifier or reserved macro name" name="MISRAC2012-RULE_21_1" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.2 (Required) A reserved identifier or macro name shall not be declared" name="MISRAC2012-RULE_21_2" rules="3" total="0" />
               <Category authTot="2;" authUrg="0;" desc="Rule 21.3 (Required) The memory allocation and deallocation functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_3" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="Rule 13.1 (Required) Initializer lists shall not contain persistent side effects" name="MISRAC2012-RULE_13_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 13.2 (Required) The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders" name="MISRAC2012-RULE_13_2" rules="7" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 13.3 (Advisory) A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator" name="MISRAC2012-RULE_13_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 13.4 (Advisory) The result of an assignment operator should not be used" name="MISRAC2012-RULE_13_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 13.5 (Required) The right hand operand of a logical &amp;&amp; or || operator shall not contain persistent side effects" name="MISRAC2012-RULE_13_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 17.1 (Required) The features of &lt;stdarg.h> shall not be used" name="MISRAC2012-RULE_17_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.21 (Required) The Standard Library function system of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_21" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 13.6 (Required) The operand of the sizeof operator shall not contain any expression which has potential side effects" name="MISRAC2012-RULE_13_6" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 17.2 (Required) Functions shall not call themselves, either directly or indirectly" name="MISRAC2012-RULE_17_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.20 (Mandatory) The pointer returned by the Standard Library functions asctime, ctime, gmtime, localtime, localeconv, getenv, setlocale or strerror shall not be used following a subsequent call to the same function" name="MISRAC2012-RULE_21_20" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 17.3 (Mandatory) A function shall not be declared implicitly" name="MISRAC2012-RULE_17_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 17.4 (Mandatory) All exit paths from a function with non-void return type shall have an explicit return statement with an expression" name="MISRAC2012-RULE_17_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 17.5 (Required) The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" name="MISRAC2012-RULE_17_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 17.6 (Mandatory) The declaration of an array parameter shall not contain the static keyword between the [ ]" name="MISRAC2012-RULE_17_6" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used" name="MISRAC2012-RULE_17_7" rules="2" total="1" />
               <Category authTot="0;" authUrg="0;" desc="Rule 17.8 (Advisory) A function parameter should not be modified" name="MISRAC2012-RULE_17_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 2.3 (Advisory) A project should not contain unused type declarations" name="MISRAC2012-RULE_2_3" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 2.4 (Advisory) A project should not contain unused tag declarations" name="MISRAC2012-RULE_2_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 2.1 (Required) A project shall not contain unreachable code" name="MISRAC2012-RULE_2_1" rules="7" total="0" />
               <Category authTot="8;" authUrg="0;" desc="Rule 2.2 (Required) There shall be no dead code" name="MISRAC2012-RULE_2_2" rules="2" total="8" />
               <Category authTot="0;" authUrg="0;" desc="Rule 2.7 (Advisory) There should be no unused parameters in functions" name="MISRAC2012-RULE_2_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 2.5 (Advisory) A project should not contain unused macro definitions" name="MISRAC2012-RULE_2_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 6.1 (Required) Bit-fields shall only be declared with an appropriate type" name="MISRAC2012-RULE_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 2.6 (Advisory) A function should not contain unused label declarations" name="MISRAC2012-RULE_2_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 6.2 (Required) Single-bit named bit fields shall not be of a signed type" name="MISRAC2012-RULE_6_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.5 (Advisory) #undef should not be used" name="MISRAC2012-RULE_20_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.6 (Required) Tokens that look like a preprocessing directive shall not occur within a macro argument" name="MISRAC2012-RULE_20_6" rules="1" total="0" />
               <Category authTot="8;" authUrg="0;" desc="Rule 20.7 (Required) Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" name="MISRAC2012-RULE_20_7" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.8 (Required) The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" name="MISRAC2012-RULE_20_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.9 (Required) All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation" name="MISRAC2012-RULE_20_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.1 (Advisory) #include directives should only be preceded by preprocessor directives or comments" name="MISRAC2012-RULE_20_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.2 (Required) The ', &quot; or \ characters and the /* or // character sequences shall not occur in a header file name" name="MISRAC2012-RULE_20_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.3 (Required) The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" name="MISRAC2012-RULE_20_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.4 (Required) A macro shall not be defined with the same name as a keyword" name="MISRAC2012-RULE_20_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 12.2 (Required) The right hand operand of a shift operator shall lie in the range zero to one less than the width in bits of the essential type of the left hand operand" name="MISRAC2012-RULE_12_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.8 (Required) Identifiers that define objects or functions with external linkage shall be unique" name="MISRAC2012-RULE_5_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 9.4 (Required) An element of an object shall not be initialized more than once" name="MISRAC2012-RULE_9_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 12.3 (Advisory) The comma operator should not be used" name="MISRAC2012-RULE_12_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.9 (Advisory) Identifiers that define objects or functions with internal linkage should be unique" name="MISRAC2012-RULE_5_9" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 9.5 (Required) Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" name="MISRAC2012-RULE_9_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 12.4 (Advisory) Evaluation of constant expressions should not lead to unsigned integer wrap-around" name="MISRAC2012-RULE_12_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.6 (Required) A typedef name shall be a unique identifier" name="MISRAC2012-RULE_5_6" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 9.2 (Required) The initializer for an aggregate or union shall be enclosed in braces" name="MISRAC2012-RULE_9_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 12.5 (Mandatory) The sizeof operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" name="MISRAC2012-RULE_12_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.1 (Required) All switch statements shall be well-formed" name="MISRAC2012-RULE_16_1" rules="8" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.7 (Required) A tag name shall be a unique identifier" name="MISRAC2012-RULE_5_7" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 9.3 (Required) Arrays shall not be partially initialized" name="MISRAC2012-RULE_9_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.2 (Required) A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" name="MISRAC2012-RULE_16_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.3 (Required) An unconditional break statement shall terminate every switch-clause" name="MISRAC2012-RULE_16_3" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.10 (Required) The value of errno shall only be tested when the last function to be called was an errno-setting-function" name="MISRAC2012-RULE_22_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.4 (Required) Every switch statement shall have a default label" name="MISRAC2012-RULE_16_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.5 (Required) A default label shall appear as either the first or the last switch label of a switch statement" name="MISRAC2012-RULE_16_5" rules="1" total="0" />
               <Category authTot="8;" authUrg="0;" desc="Dir 4.9 (Advisory) A function should be used in preference to a function-like macro where they are interchangeable" name="MISRAC2012-DIR_4_9" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.6 (Required) Every switch statement shall have at least two switch-clauses" name="MISRAC2012-RULE_16_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.8 (Advisory) If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" name="MISRAC2012-DIR_4_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.7 (Required) A switch-expression shall not have essentially Boolean type" name="MISRAC2012-RULE_16_7" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.5 (Advisory) Identifiers in the same name space with overlapping visibility should be typographically unambiguous" name="MISRAC2012-DIR_4_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.4 (Advisory) Sections of code should not be &quot;commented out&quot;" name="MISRAC2012-DIR_4_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.7 (Required) If a function returns error information, then that error information shall be tested" name="MISRAC2012-DIR_4_7" rules="2" total="0" />
               <Category authTot="15;" authUrg="0;" desc="Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types" name="MISRAC2012-DIR_4_6" rules="3" total="15" />
               <Category authTot="1;" authUrg="0;" desc="Dir 4.1 (Required) Run-time failures shall be minimized" name="MISRAC2012-DIR_4_1" rules="11" total="1" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.12 (Required) Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" name="MISRAC2012-RULE_8_12" rules="1" total="0" />
               <Category authTot="3;" authUrg="0;" desc="Rule 8.13 (Advisory) A pointer should point to a const-qualified type whenever possible" name="MISRAC2012-RULE_8_13" rules="2" total="3" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.3 (Required) Assembly language shall be encapsulated and isolated" name="MISRAC2012-DIR_4_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.14 (Required) The restrict type qualifier shall not be used" name="MISRAC2012-RULE_8_14" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.2 (Advisory) All usage of assembly language should be documented" name="MISRAC2012-DIR_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 1.1 (Required) The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits" name="MISRAC2012-RULE_1_1" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.10 (Required) An inline function shall be declared with the static storage class" name="MISRAC2012-RULE_8_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.11 (Advisory) When an array with external linkage is declared, its size should be explicitly specified" name="MISRAC2012-RULE_8_11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 1.4 (Required) Emergent language features shall not be used" name="MISRAC2012-RULE_1_4" rules="14" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.1 (Required) External identifiers shall be distinct" name="MISRAC2012-RULE_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" name="MISRAC2012-RULE_1_3" rules="15" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.4 (Required) Macro identifiers shall be distinct" name="MISRAC2012-RULE_5_4" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.5 (Required) Identifiers shall be distinct from macro names" name="MISRAC2012-RULE_5_5" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 9.1 (Mandatory) The value of an object with automatic storage duration shall not be read before it has been set" name="MISRAC2012-RULE_9_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.2 (Required) Identifiers declared in the same scope and name space shall be distinct" name="MISRAC2012-RULE_5_2" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 12.1 (Advisory) The precedence of operators within expressions should be made explicit" name="MISRAC2012-RULE_12_1" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.3 (Required) An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" name="MISRAC2012-RULE_5_3" rules="2" total="0" />
            </Category>
            <Category authTot="5;" authUrg="0;" desc="Memory and Resource Management" name="MRM" rules="60" total="5" />
            <Category authTot="49;" authUrg="0;" desc="Naming Conventions" name="NAMING" rules="98" total="49">
               <Category authTot="33;" authUrg="0;" desc="Hungarian Notation" name="NAMING-HN" rules="44" total="33" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Object Oriented" name="OOP" rules="61" total="0" />
            <Category authTot="17;" authUrg="0;" desc="Optimization" name="OPT" rules="43" total="17" />
            <Category authTot="0;" authUrg="0;" desc="OWASP Top 10 Most Critical Web Application Security Risks (2017)" name="OWASP2017" rules="16" total="0">
               <Category authTot="0;" authUrg="0;" desc="OWASP A3 Sensitive Data Exposure" name="OWASP2017-A3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A2 Broken Authentication" name="OWASP2017-A2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A1 Injection" name="OWASP2017-A1" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A10 Insufficient Logging&amp;Monitoring" name="OWASP2017-A10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A6 Security Misconfiguration" name="OWASP2017-A6" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A5 Broken Access Control" name="OWASP2017-A5" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A4 XML External Entities (XXE)" name="OWASP2017-A4" rules="1" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="OWASP API Security Top 10 (2019)" name="OWASP2019" rules="42" total="0">
               <Category authTot="0;" authUrg="0;" desc="OWASP API2 Broken User Authentication" name="OWASP2019-API2" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="OWASP API4 Lack of Resources &amp; Rate Limiting" name="OWASP2019-API4" rules="2" total="2" />
               <Category authTot="0;" authUrg="0;" desc="OWASP API3 Excessive Data Exposure" name="OWASP2019-API3" rules="17" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP API10 Insufficient Logging &amp; Monitoring" name="OWASP2019-API10" rules="2" total="0" />
               <Category authTot="17;" authUrg="1;" desc="OWASP API9 Improper Assets Management" name="OWASP2019-API9" rules="7" total="17" />
               <Category authTot="0;" authUrg="0;" desc="OWASP API8 Injection" name="OWASP2019-API8" rules="10" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP API7 Security Misconfiguration" name="OWASP2019-API7" rules="3" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="OWASP Top 10 Most Critical Web Application Security Risks (2021)" name="OWASP2021" rules="18" total="0">
               <Category authTot="0;" authUrg="0;" desc="OWASP A8 Software and Data Integrity Failures" name="OWASP2021-A8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A7 Identification and Authentication Failures" name="OWASP2021-A7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A5 Security Misconfiguration" name="OWASP2021-A5" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A9 Security Logging and Monitoring Failures" name="OWASP2021-A9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A4 Insecure Design" name="OWASP2021-A4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A3 Injection" name="OWASP2021-A3" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A2 Cryptographic Failures" name="OWASP2021-A2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A1 Broken Access Control" name="OWASP2021-A1" rules="3" total="0" />
            </Category>
            <Category authTot="11;" authUrg="11;" desc="Parser diagnostics" name="PARSER" rules="2" total="11" />
            <Category authTot="33;" authUrg="0;" desc="Possible Bugs" name="PB" rules="85" total="33" />
            <Category authTot="4;" authUrg="0;" desc="Physical File Organization" name="PFO" rules="10" total="4" />
            <Category authTot="9;" authUrg="0;" desc="Portability" name="PORT" rules="39" total="9" />
            <Category authTot="64;" authUrg="0;" desc="Preprocessor" name="PREPROC" rules="29" total="64" />
            <Category authTot="0;" authUrg="0;" desc="Qt Best Practices" name="QT" rules="18" total="0" />
            <Category authTot="12;" authUrg="0;" desc="Security" name="SECURITY" rules="54" total="12" />
            <Category authTot="3;" authUrg="0;" desc="STL Best Practices" name="STL" rules="42" total="3" />
            <Category authTot="0;" authUrg="0;" desc="Template" name="TEMPL" rules="18" total="0" />
         </CategoriesList>
         <RulesList>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-000160" desc="Do not use weak encryption functions" id="APSC_DV-000160-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-000170" desc="Do not use weak encryption functions" id="APSC_DV-000170-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-000480" desc="Protect against SQL injection" id="APSC_DV-000480-a" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-000500" desc="Observe correct revocation order while relinquishing privileges" id="APSC_DV-000500-a" origId="SECURITY-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-000650" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="APSC_DV-000650-a" origId="SECURITY-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001290" desc="Protect against SQL injection" id="APSC_DV-001290-a" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-001290" desc="Untrusted data is used as a loop boundary" id="APSC_DV-001290-b" origId="SECURITY-38" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001290" desc="Avoid passing user input into methods as parameters" id="APSC_DV-001290-c" origId="SECURITY-20" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001290" desc="Avoid using unsecured shell functions that may be affected by shell metacharacters" id="APSC_DV-001290-d" origId="SECURITY-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001300" desc="Protect against SQL injection" id="APSC_DV-001300-a" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001740" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-001740-a" origId="BD-SECURITY-SENSLOG" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001750" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-001750-a" origId="BD-SECURITY-SENSLOG" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001850" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-001850-a" origId="BD-SECURITY-SENSLOG" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001860" desc="Do not use weak encryption functions" id="APSC_DV-001860-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid race conditions when using fork and file descriptors" id="APSC_DV-001995-a" origId="BD-TRS-FORKFILE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid race conditions while checking for the existence of a symbolic link" id="APSC_DV-001995-b" origId="BD-TRS-SYMLINK" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid race conditions while accessing files" id="APSC_DV-001995-c" origId="BD-TRS-FRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Use locks to prevent race conditions when modifying bit fields" id="APSC_DV-001995-d" origId="BD-TRS-BITLOCK" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Do not use global variable with different locks set" id="APSC_DV-001995-e" origId="BD-TRS-MLOCK" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid using thread-unsafe functions" id="APSC_DV-001995-f" origId="SECURITY-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Usage of functions prone to race is not allowed" id="APSC_DV-001995-g" origId="SECURITY-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid using the 'vfork()' function" id="APSC_DV-001995-h" origId="SECURITY-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Properly define signal handlers" id="APSC_DV-001995-i" origId="BD-PB-SIGHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="APSC_DV-002000" desc="Ensure resources are freed" id="APSC_DV-002000-a" origId="BD-RES-LEAKS" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002010" desc="Do not use weak encryption functions" id="APSC_DV-002010-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002290" desc="Do not use the rand() function for generating pseudorandom numbers" id="APSC_DV-002290-a" origId="SECURITY-02_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002290" desc="Properly seed pseudorandom number generators" id="APSC_DV-002290-b" origId="BD-SECURITY-RAND" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002290" desc="The 'random_shuffle' identifier should not be used" id="APSC_DV-002290-c" origId="CODSTA-MCPP-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002290" desc="Avoid functions which use random numbers from standard C library" id="APSC_DV-002290-d" origId="SECURITY-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002350" desc="Do not use weak encryption functions" id="APSC_DV-002350-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002390" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="APSC_DV-002390-a" origId="BD-SECURITY-XXEXRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002390" desc="Do not process structured text data natively" id="APSC_DV-002390-b" origId="CODSTA-201" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="APSC_DV-002390" desc="Do not use scanf and fscanf functions without specifying variable size in format string" id="APSC_DV-002390-c" origId="SECURITY-14" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002390" desc="Do not use mbstowcs() function" id="APSC_DV-002390-d" origId="SECURITY-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002400" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002400-a" origId="BD-SECURITY-TDINPUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002400" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="APSC_DV-002400-b" origId="PB-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002400" desc="Avoid using the 'vfork()' function" id="APSC_DV-002400-c" origId="SECURITY-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002400" desc="Avoid using thread-unsafe functions" id="APSC_DV-002400-d" origId="SECURITY-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002440" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-002440-a" origId="BD-SECURITY-SENSLOG" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002460" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-002460-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002470" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-002470-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002480" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="APSC_DV-002480-a" origId="SECURITY-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002510" desc="Protect against command injection" id="APSC_DV-002510-a" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against environment injection" id="APSC_DV-002520-a" origId="BD-SECURITY-TDENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against file name injection" id="APSC_DV-002520-b" origId="BD-SECURITY-TDFNAMES" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against SQL injection" id="APSC_DV-002520-c" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Never use unfiltered data from an untrusted user as the format parameter" id="APSC_DV-002520-d" origId="SECURITY-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Avoid tainted data in array indexes" id="APSC_DV-002520-e" origId="BD-SECURITY-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against integer overflow/underflow from tainted data" id="APSC_DV-002520-f" origId="BD-SECURITY-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-002520-g" origId="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against command injection" id="APSC_DV-002520-h" origId="BD-SECURITY-TDCMD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Avoid printing tainted data on the output console" id="APSC_DV-002520-i" origId="BD-SECURITY-TDCONSOLE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002520-j" origId="BD-SECURITY-TDINPUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-002520" desc="Untrusted data is used as a loop boundary" id="APSC_DV-002520-k" origId="SECURITY-38" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against environment injection" id="APSC_DV-002530-a" origId="BD-SECURITY-TDENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against file name injection" id="APSC_DV-002530-b" origId="BD-SECURITY-TDFNAMES" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against SQL injection" id="APSC_DV-002530-c" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Never use unfiltered data from an untrusted user as the format parameter" id="APSC_DV-002530-d" origId="SECURITY-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Avoid tainted data in array indexes" id="APSC_DV-002530-e" origId="BD-SECURITY-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against integer overflow/underflow from tainted data" id="APSC_DV-002530-f" origId="BD-SECURITY-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-002530-g" origId="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against command injection" id="APSC_DV-002530-h" origId="BD-SECURITY-TDCMD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Avoid printing tainted data on the output console" id="APSC_DV-002530-i" origId="BD-SECURITY-TDCONSOLE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002530-j" origId="BD-SECURITY-TDINPUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-002530" desc="Untrusted data is used as a loop boundary" id="APSC_DV-002530-k" origId="SECURITY-38" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002540" desc="Protect against SQL injection" id="APSC_DV-002540-a" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against environment injection" id="APSC_DV-002550-a" origId="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against file name injection" id="APSC_DV-002550-b" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against SQL injection" id="APSC_DV-002550-c" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Never use unfiltered data from an untrusted user as the format parameter" id="APSC_DV-002550-d" origId="SECURITY-36" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Avoid tainted data in array indexes" id="APSC_DV-002550-e" origId="BD-SECURITY-ARRAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against integer overflow/underflow from tainted data" id="APSC_DV-002550-f" origId="BD-SECURITY-INTOVERF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-002550-g" origId="BD-SECURITY-LOG" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against command injection" id="APSC_DV-002550-h" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Avoid printing tainted data on the output console" id="APSC_DV-002550-i" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002550-j" origId="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-002550" desc="Untrusted data is used as a loop boundary" id="APSC_DV-002550-k" origId="SECURITY-38" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against environment injection" id="APSC_DV-002560-a" origId="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against file name injection" id="APSC_DV-002560-b" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against SQL injection" id="APSC_DV-002560-c" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Never use unfiltered data from an untrusted user as the format parameter" id="APSC_DV-002560-d" origId="SECURITY-36" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Avoid tainted data in array indexes" id="APSC_DV-002560-e" origId="BD-SECURITY-ARRAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against integer overflow/underflow from tainted data" id="APSC_DV-002560-f" origId="BD-SECURITY-INTOVERF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-002560-g" origId="BD-SECURITY-LOG" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against command injection" id="APSC_DV-002560-h" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Avoid printing tainted data on the output console" id="APSC_DV-002560-i" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002560-j" origId="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-002560" desc="Untrusted data is used as a loop boundary" id="APSC_DV-002560-k" origId="SECURITY-38" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002570" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-002570-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002570" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="APSC_DV-002570-b" origId="SECURITY-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid buffer overflow due to defining incorrect format limits" id="APSC_DV-002590-a" origId="BD-PB-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid overflow due to reading a not zero terminated string" id="APSC_DV-002590-b" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid overflow when reading from a buffer" id="APSC_DV-002590-c" origId="BD-PB-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid overflow when writing to a buffer" id="APSC_DV-002590-d" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid integer overflows" id="APSC_DV-002590-e" origId="BD-PB-INTOVERF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Prevent buffer overflows from tainted data" id="APSC_DV-002590-f" origId="BD-SECURITY-BUFWRITE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Protect against integer overflow/underflow from tainted data" id="APSC_DV-002590-g" origId="BD-SECURITY-INTOVERF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="APSC_DV-002590-h" origId="BD-SECURITY-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid buffer read overflow from tainted data" id="APSC_DV-002590-i" origId="BD-SECURITY-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid buffer write overflow from tainted data" id="APSC_DV-002590-j" origId="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Ensure the output buffer is large enough when using path manipulation functions" id="APSC_DV-002590-k" origId="BD-PB-PATHBUF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="2;" cat="APSC_DV-003110" desc="Do not hard code string literals" id="APSC_DV-003110-a" origId="CODSTA-203" sev="1" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-003235" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-003235-a" origId="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-003235" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-003235-b" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="8;" authUrg="0;" cat="AUTOSAR-A0_1_1" desc="Avoid unused values" id="AUTOSAR-A0_1_1-a" origId="BD-PB-VOVR" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A0_1_2" desc="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="AUTOSAR-A0_1_2-a" origId="CODSTA-CPP-58" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_1_3" desc="Every defined function with internal linkage shall be used at least once" id="AUTOSAR-A0_1_3-a" origId="OPT-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A0_1_4" desc="Eliminate unused parameters" id="AUTOSAR-A0_1_4-a" origId="OPT-03" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_1_5" desc="There shall be no unused named parameters in virtual functions" id="AUTOSAR-A0_1_5-a" origId="OPT-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_1_6" desc="A project shall not contain unused type declarations" id="AUTOSAR-A0_1_6-a" origId="GLOBAL-UNUSEDTYPE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_4_2" desc="Type long double shall not be used" id="AUTOSAR-A0_4_2-a" origId="PORT-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_4_4" desc="Validate values passed to library functions" id="AUTOSAR-A0_4_4-a" origId="BD-API-VALPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_1_1" desc="Be wary about using multiple inheritance of classes that are not abstract interfaces" id="AUTOSAR-A10_1_1-a" origId="OOP-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_2_1" desc="Never redefine an inherited nonvirtual function" id="AUTOSAR-A10_2_1-a" origId="OOP-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_2_1" desc="Member functions declared in derived class should not hide functions declared in base classes" id="AUTOSAR-A10_2_1-b" origId="OOP-53" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_3_1" desc="Only one of virtual, override or final should be specified in a member function declaration" id="AUTOSAR-A10_3_1-a" origId="CODSTA-MCPP-24" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_3_2" desc="Each overriding virtual function shall be declared with the override or final specifier" id="AUTOSAR-A10_3_2-a" origId="CODSTA-MCPP-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_3_3" desc="Do not introduce virtual functions in a final class" id="AUTOSAR-A10_3_3-a" origId="CODSTA-MCPP-52" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_3_5" desc="A user-defined assignment operator shall not be virtual" id="AUTOSAR-A10_3_5-a" origId="OOP-56" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_4_1" desc="Hierarchies should be based on abstract classes" id="AUTOSAR-A10_4_1-a" origId="OOP-40" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A11_0_1" desc="A non-POD type should be defined as class" id="AUTOSAR-A11_0_1-a" origId="OOP-55" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A11_0_2" desc="Structs should only contain public data members and should not be a base or inherit" id="AUTOSAR-A11_0_2-a" origId="OOP-57" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A11_3_1" desc="Friend declarations shall not be used except declarations of comparison operators" id="AUTOSAR-A11_3_1-a" origId="OOP-11_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_0_1" desc="Copy and destroy consistently" id="AUTOSAR-A12_0_1-a" origId="MRM-40" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_0_2" desc="Do not compare objects of a class that may contain padding bits with C standard library functions" id="AUTOSAR-A12_0_2-a" origId="CODSTA-CPP-100" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_1" desc="All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" id="AUTOSAR-A12_1_1-a" origId="PB-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_1" desc="All member variables should be initialized in constructor" id="AUTOSAR-A12_1_1-b" origId="INIT-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_2" desc="Do not specify both an NSDMI and a member initializer in a constructor for the same non-static member" id="AUTOSAR-A12_1_2-a" origId="HICPP-12_4_3-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_3" desc="User-defined constructors that initialize data members with the same constant values across all constructors should initialize using NSDMI instead" id="AUTOSAR-A12_1_3-a" origId="INIT-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_4" desc="All constructors that are callable with a single argument of fundamental type shall be declared explicit" id="AUTOSAR-A12_1_4-a" origId="OOP-45" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_5" desc="Use delegating constructors to reduce code duplication" id="AUTOSAR-A12_1_5-a" origId="CODSTA-CPP-106" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_6" desc="Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors" id="AUTOSAR-A12_1_6-a" origId="CODSTA-MCPP-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_4_1" desc="Make base class destructors public and virtual, or protected and nonvirtual" id="AUTOSAR-A12_4_1-a" origId="OOP-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A12_4_2" desc="If a public destructor of a class is non-virtual, then the class should be declared final" id="AUTOSAR-A12_4_2-a" origId="CODSTA-MCPP-23" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_6_1" desc="Prefer initialization to assignment in constructors" id="AUTOSAR-A12_6_1-a" origId="INIT-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_7_1" desc="Define special members as =default when the behavior is equivalent to the compiler's behavior" id="AUTOSAR-A12_7_1-a" origId="CODSTA-CPP-105" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_1" desc="A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member" id="AUTOSAR-A12_8_1-a" origId="OOP-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_2" desc="User-defined copy and move assignment operators should use user-defined no-throw swap function" id="AUTOSAR-A12_8_2-a" origId="CODSTA-MCPP-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_3" desc="Do not rely on the value of a moved-from object" id="AUTOSAR-A12_8_3-a" origId="BD-PB-SUBSEQMOVE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_4" desc="Use std::move() on rvalue references and std::forward() on forwarding references" id="AUTOSAR-A12_8_4-a" origId="CODSTA-MCPP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_5" desc="Check for assignment to self in operator=" id="AUTOSAR-A12_8_5-a" origId="OOP-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_6" desc="Avoid public copy constructors and assignment operators in base classes" id="AUTOSAR-A12_8_6-a" origId="OOP-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_7" desc="Declare assignment operators with the ref-qualifier &amp;" id="AUTOSAR-A12_8_7-a" origId="CODSTA-MCPP-19" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_1_2" desc="User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" id="AUTOSAR-A13_1_2-a" origId="NAMING-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_1_3" desc="User defined literals operators shall only perform conversion of passed parameters" id="AUTOSAR-A13_1_3-a" origId="CODSTA-MCPP-33" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_2_1" desc="Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type" id="AUTOSAR-A13_2_1-a" origId="CODSTA-CPP-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_2_2" desc="A binary arithmetic operator and a bitwise operator shall return a 'prvalue'" id="AUTOSAR-A13_2_2-a" origId="CODSTA-CPP-102" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_2_3" desc="A relational operator shall return a boolean value" id="AUTOSAR-A13_2_3-a" origId="CODSTA-CPP-101" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_3_1" desc="Avoid Overloading on Forwarding References" id="AUTOSAR-A13_3_1-a" origId="CODSTA-MCPP-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_1" desc="When overloading the subscript operator (operator[]), implement both const and non-const versions" id="AUTOSAR-A13_5_1-a" origId="HICPP-13_2_4-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_2" desc="User-conversion cast operators should be made explicit" id="AUTOSAR-A13_5_2-a" origId="CODSTA-MCPP-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_3" desc="Do not use user-defined conversion functions" id="AUTOSAR-A13_5_3-a" origId="CODSTA-CPP-05" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_4" desc="If two opposite equality operators ('==', '!=') are defined in a class, one shall be defined in terms of the other" id="AUTOSAR-A13_5_4-b" origId="CODSTA-CPP-86" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_5" desc="Comparison operators shall be non-member functions" id="AUTOSAR-A13_5_5-a" origId="CODSTA-CPP-107" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_5" desc="Comparison operators shall be non-member functions with identical parameter types and noexcept" id="AUTOSAR-A13_5_5-b" origId="CODSTA-CPP-107_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_6_1" desc="Digit sequences separators ' shall only be used consistently" id="AUTOSAR-A13_6_1-a" origId="CODSTA-MCPP-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A14_5_1" desc="A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter" id="AUTOSAR-A14_5_1-a" origId="TEMPL-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A14_5_3" desc="A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations" id="AUTOSAR-A14_5_3-a" origId="TEMPL-18" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A14_7_2" desc="Template specialization shall be declared in the same file as the primary template or a user-defined type, for which the specialization is declared" id="AUTOSAR-A14_7_2-a" origId="TEMPL-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A14_8_2" desc="Overloaded function templates shall not be explicitly specialized" id="AUTOSAR-A14_8_2-a" origId="TEMPL-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_0_2" desc="Ensure resources are freed" id="AUTOSAR-A15_0_2-a" origId="BD-RES-LEAKS" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_1_1" desc="Only use instances of std::exception for exceptions" id="AUTOSAR-A15_1_1-a" origId="HICPP-15_1_1-a" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_1_2" desc="An exception object should not have pointer type" id="AUTOSAR-A15_1_2-a" origId="EXCEPT-09" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_1_4" desc="Ensure resources are freed" id="AUTOSAR-A15_1_4-a" origId="BD-RES-LEAKS" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_1_5" desc="Do not throw an exception across execution boundaries" id="AUTOSAR-A15_1_5-a" origId="PORT-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_2_1" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="AUTOSAR-A15_2_1-a" origId="EXCEPT-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_2_1" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-A15_2_1-b" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_3_2" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-A15_3_2-a" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_3_3" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="AUTOSAR-A15_3_3-a" origId="EXCEPT-06" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_3_4" desc="Avoid using catch-all exception handlers" id="AUTOSAR-A15_3_4-a" origId="EXCEPT-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_3_5" desc="A class type exception shall always be caught by reference" id="AUTOSAR-A15_3_5-a" origId="EXCEPT-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_1" desc="Do not use throw exception specifications" id="AUTOSAR-A15_4_1-a" origId="EXCEPT-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_2" desc="Avoid throwing exceptions from functions that are declared not to throw" id="AUTOSAR-A15_4_2-a" origId="BD-PB-NOEXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_3" desc="If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" id="AUTOSAR-A15_4_3-a" origId="GLOBAL-EXCSPECDECL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-A15_4_4" desc="Declare functions 'noexcept' if they will not emit exceptions" id="AUTOSAR-A15_4_4-a" origId="CODSTA-MCPP-09" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_5" desc="Checked exceptions that could be thrown from a function shall be specified in the comment directly before the function declaration" id="AUTOSAR-A15_4_5-a" origId="EXCEPT-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_1" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="AUTOSAR-A15_5_1-a" origId="EXCEPT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_1" desc="All user-provided move constructors and move assignment operators shall not exit with an exception" id="AUTOSAR-A15_5_1-b" origId="EXCEPT-21" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_2" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="AUTOSAR-A15_5_2-a" origId="PB-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_2" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-A15_5_2-b" origId="PB-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_2" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-A15_5_2-c" origId="PB-75_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="AUTOSAR-A15_5_3-a" origId="PB-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="AUTOSAR-A15_5_3-b" origId="EXCEPT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Do not throw from within destructor" id="AUTOSAR-A15_5_3-c" origId="EXCEPT-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="AUTOSAR-A15_5_3-d" origId="EXCEPT-06" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="An empty throw (throw;) shall only be used in the compound-statement of a catch handler" id="AUTOSAR-A15_5_3-e" origId="EXCEPT-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Exceptions shall be raised only after start-up and before termination of the program" id="AUTOSAR-A15_5_3-f" origId="EXCEPT-08" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-A15_5_3-g" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="AUTOSAR-A15_5_3-h" origId="EXCEPT-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="AUTOSAR-A15_5_3-i" origId="EXCEPT-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Always catch exceptions" id="AUTOSAR-A15_5_3-j" origId="BD-PB-EXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Properly define exit handlers" id="AUTOSAR-A15_5_3-k" origId="BD-PB-EXITHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" id="AUTOSAR-A16_0_1-a" origId="PREPROC-26" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="#error directive shall not be used" id="AUTOSAR-A16_0_1-b" origId="PREPROC-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="The #pragma directive shall not be used" id="AUTOSAR-A16_0_1-c" origId="PREPROC-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="Avoid using macro definitions" id="AUTOSAR-A16_0_1-d" origId="PREPROC-01" sev="2" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="#undef shall not be used" id="AUTOSAR-A16_0_1-e" origId="PREPROC-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_2_1" desc="The following character sequences shall not appear in header file names: ', \, /*, //, or &quot;" id="AUTOSAR-A16_2_1-a" origId="PB-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_2_2" desc="A file should directly include only the headers that contain declarations and definitions required to compile that file" id="AUTOSAR-A16_2_2-a" origId="OPT-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_6_1" desc="#error directive shall not be used" id="AUTOSAR-A16_6_1-a" origId="PREPROC-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_7_1" desc="The #pragma directive shall not be used" id="AUTOSAR-A16_7_1-a" origId="PREPROC-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Do not #define nor #undef identifier 'defined'" id="AUTOSAR-A17_0_1-a" origId="MISRA2004-20_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)" id="AUTOSAR-A17_0_1-b" origId="CODSTA-92_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="AUTOSAR-A17_0_1-c" origId="CODSTA-92_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Do not redefine reserved words" id="AUTOSAR-A17_0_1-d" origId="MISRA2004-20_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Do not #define or #undef identifiers with names which start with underscore" id="AUTOSAR-A17_0_1-e" origId="MISRA2004-20_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_1_1" desc="The error indicator 'errno' shall not be used" id="AUTOSAR-A17_1_1-a" origId="MISRA2004-20_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_6_1" desc="Do not modify the standard namespaces 'std' and 'posix'" id="AUTOSAR-A17_6_1-a" origId="CODSTA-CPP-95" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A18_0_1" desc="The C library shall not be used" id="AUTOSAR-A18_0_1-a" origId="CODSTA-CPP-59" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A18_0_2" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="AUTOSAR-A18_0_2-a" origId="MISRA2004-20_10" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A18_0_2" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="AUTOSAR-A18_0_2-b" origId="MISRA2004-20_10" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_0_3" desc="Do not include &lt;locale.h> header" id="AUTOSAR-A18_0_3-a" origId="MISRA-121_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_0_3" desc="Do not use 'setlocale' function" id="AUTOSAR-A18_0_3-b" origId="MISRA-121_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A18_1_1" desc="C-style arrays shall not be used" id="AUTOSAR-A18_1_1-a" origId="STL-37" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_2" desc="Avoid using vector&lt;bool>" id="AUTOSAR-A18_1_2-a" origId="STL-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_3" desc="Prefer to use std::unique_ptr instead of std::auto_ptr" id="AUTOSAR-A18_1_3-a" origId="CODSTA-MCPP-16_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_4" desc="A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" id="AUTOSAR-A18_1_4-a" origId="BD-PB-ARRPTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_6" desc="All std::hash specializations for user-defined types shall have a noexcept function call operator" id="AUTOSAR-A18_1_6-a" origId="CODSTA-MCPP-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_1" desc="Do not use calloc, malloc, realloc and free functions" id="AUTOSAR-A18_5_1-a" origId="MRM-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_10" desc="Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new'" id="AUTOSAR-A18_5_10-a" origId="MRM-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_10" desc="An overhead should be used when an array of objects is passed to the placement 'new' allocation function" id="AUTOSAR-A18_5_10-b" origId="MRM-55_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_11" desc="Write operator delete if you write operator new" id="AUTOSAR-A18_5_11-a" origId="MRM-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_11" desc="Write operator delete[] if you write operator new[]" id="AUTOSAR-A18_5_11-b" origId="MRM-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A18_5_2" desc="Dynamic heap memory allocation shall not be used" id="AUTOSAR-A18_5_2-a" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_3" desc="Never provide brackets ([]) for delete when deallocating non-arrays" id="AUTOSAR-A18_5_3-a" origId="MRM-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_3" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="AUTOSAR-A18_5_3-b" origId="MRM-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_3" desc="Properly deallocate dynamically allocated resources" id="AUTOSAR-A18_5_3-c" origId="BD-RES-BADDEALLOC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_4" desc="Define both sized and unsized versions of operator delete" id="AUTOSAR-A18_5_4-a" origId="CODSTA-MCPP-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_5" desc="Use the same form in corresponding calls to new/malloc and delete/free" id="AUTOSAR-A18_5_5-a" origId="MRM-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_5" desc="Freed memory shouldn't be accessed under any circumstances" id="AUTOSAR-A18_5_5-b" origId="MRM-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_5" desc="Properly define new handlers" id="AUTOSAR-A18_5_5-c" origId="BD-PB-NEWHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_8" desc="Use allocation by declaration rather than by new or malloc" id="AUTOSAR-A18_5_8-a" origId="MRM-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_9" desc="The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails" id="AUTOSAR-A18_5_9-a" origId="MRM-53" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_1" desc="Prefer lambdas over std::bind, std::bind1st and std::bind2nd" id="AUTOSAR-A18_9_1-a" origId="CODSTA-MCPP-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_2" desc="The 'std::forward' function shall be used to forward universal references" id="AUTOSAR-A18_9_2-a" origId="CODSTA-MCPP-13_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_3" desc="Do not use std::move on objects declared with the const or const &amp; type" id="AUTOSAR-A18_9_3-a" origId="CODSTA-MCPP-53" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_4" desc="Do not subsequently use the argument to std::forward" id="AUTOSAR-A18_9_4-a" origId="BD-PB-SUBSEQFRWD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'register' storage class specifier shall not be used" id="AUTOSAR-A1_1_1-a" origId="MISRA-028" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="A copy assignment operator should be declared when a copy constructor is declared (and vice versa)" id="AUTOSAR-A1_1_1-b" origId="MRM-40_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor" id="AUTOSAR-A1_1_1-c" origId="MRM-40_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The C library shall not be used" id="AUTOSAR-A1_1_1-d" origId="CODSTA-CPP-59" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Prefer lambdas over std::bind, std::bind1st and std::bind2nd" id="AUTOSAR-A1_1_1-e" origId="CODSTA-MCPP-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'binder1st' and 'binder2nd' identifiers should not be used" id="AUTOSAR-A1_1_1-f" origId="CODSTA-MCPP-07_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Prefer to use std::unique_ptr instead of std::auto_ptr" id="AUTOSAR-A1_1_1-g" origId="CODSTA-MCPP-16_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'random_shuffle' identifier should not be used" id="AUTOSAR-A1_1_1-h" origId="CODSTA-MCPP-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Do not use the increment operator (++) on an operand of type 'bool'" id="AUTOSAR-A1_1_1-i" origId="CODSTA-MCPP-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'set_unexpected' identifier should not be used" id="AUTOSAR-A1_1_1-j" origId="CODSTA-MCPP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Do not use throw exception specifications" id="AUTOSAR-A1_1_1-k" origId="EXCEPT-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_1" desc="Do not store an already-owned pointer value in an unrelated smart pointer" id="AUTOSAR-A20_8_1-a" origId="BD-PB-PTRVALUE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_2" desc="Use smart pointers when passing a pointer to an object in a thread" id="AUTOSAR-A20_8_2-a" origId="CODSTA-MCPP-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_3" desc="Use smart pointers when passing a pointer to an object in a thread" id="AUTOSAR-A20_8_3-a" origId="CODSTA-MCPP-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_4" desc="Consider using 'std::unique_ptr' instead of 'std::shared_ptr' for local objects" id="AUTOSAR-A20_8_4-a" origId="CODSTA-MCPP-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_5" desc="'std::make_unique' shall be used to construct objects owned by 'std::unique_ptr'" id="AUTOSAR-A20_8_5-a" origId="CODSTA-MCPP-16_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_6" desc="Prefer 'std::make_shared' to the direct use of new" id="AUTOSAR-A20_8_6-a" origId="CODSTA-MCPP-16_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_7" desc="Avoid cyclic shared_ptr references" id="AUTOSAR-A20_8_7-a" origId="BD-RES-CSP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A21_8_1" desc="Do not pass incorrect values to ctype.h library functions" id="AUTOSAR-A21_8_1-a" origId="BD-API-CTYPE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A23_0_1" desc="Use const container calls when the result is immediately converted to a const iterator" id="AUTOSAR-A23_0_1-a" origId="CODSTA-MCPP-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A23_0_2" desc="Do not modify container while iterating over it" id="AUTOSAR-A23_0_2-a" origId="BD-CO-ITMOD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A23_0_2" desc="Use valid references, pointers, and iterators to reference elements of a basic_string" id="AUTOSAR-A23_0_2-b" origId="BD-CO-STRMOD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A25_1_1" desc="Make predicates const pure functions" id="AUTOSAR-A25_1_1-a" origId="STL-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A25_4_1" desc="For associative containers never use comparison function returning true for equal values" id="AUTOSAR-A25_4_1-a" origId="STL-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A26_5_1" desc="Do not use the rand() function for generating pseudorandom numbers" id="AUTOSAR-A26_5_1-a" origId="SECURITY-02_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A26_5_2" desc="Properly seed pseudorandom number generators" id="AUTOSAR-A26_5_2-a" origId="BD-SECURITY-RAND" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid calling functions printf/wprintf with only one argument other than string constant" id="AUTOSAR-A27_0_1-a" origId="SECURITY-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid tainted data in array indexes" id="AUTOSAR-A27_0_1-b" origId="BD-SECURITY-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Prevent buffer overflows from tainted data" id="AUTOSAR-A27_0_1-c" origId="BD-SECURITY-BUFWRITE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="AUTOSAR-A27_0_1-d" origId="BD-SECURITY-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid buffer read overflow from tainted data" id="AUTOSAR-A27_0_1-e" origId="BD-SECURITY-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid buffer write overflow from tainted data" id="AUTOSAR-A27_0_1-f" origId="BD-SECURITY-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Protect against command injection" id="AUTOSAR-A27_0_1-g" origId="BD-SECURITY-TDCMD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Exclude unsanitized user input from format strings" id="AUTOSAR-A27_0_1-h" origId="BD-SECURITY-TDINPUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Avoid overflow due to reading a not zero terminated string" id="AUTOSAR-A27_0_2-a" origId="BD-PB-OVERFNZT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Avoid overflow when writing to a buffer" id="AUTOSAR-A27_0_2-b" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Do not use the 'char' buffer to store input from 'std::cin'" id="AUTOSAR-A27_0_2-c" origId="SECURITY-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Prevent buffer overflows from tainted data" id="AUTOSAR-A27_0_2-e" origId="BD-SECURITY-BUFWRITE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Avoid buffer write overflow from tainted data" id="AUTOSAR-A27_0_2-f" origId="BD-SECURITY-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_3" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="AUTOSAR-A27_0_3-a" origId="BD-PB-STREAMINOUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="AUTOSAR-A27_0_4-a" origId="SECURITY-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="Avoid using unsafe string functions that do not check bounds" id="AUTOSAR-A27_0_4-b" origId="SECURITY-13" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="Do not use the 'char' buffer to store input from 'std::cin'" id="AUTOSAR-A27_0_4-c" origId="SECURITY-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="C-style strings shall not be used" id="AUTOSAR-A27_0_4-d" origId="PB-76" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="AUTOSAR-A2_10_1-a" origId="MISRA2004-5_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="AUTOSAR-A2_10_1-b" origId="MISRA2004-5_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in a local scope should not hide identifiers declared in a class scope" id="AUTOSAR-A2_10_1-c" origId="CODSTA-CPP-83" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope" id="AUTOSAR-A2_10_1-d" origId="CODSTA-CPP-84" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope" id="AUTOSAR-A2_10_1-e" origId="CODSTA-CPP-85" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_4" desc="The identifier name of a non-member object with static storage duration shall not be reused within a namespace" id="AUTOSAR-A2_10_4-a" origId="GLOBAL-REUSEDQUALGLOBVAR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_4" desc="The identifier name of a non-member static function shall not be reused within a namespace" id="AUTOSAR-A2_10_4-b" origId="GLOBAL-REUSEDQUALSTATFUN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_5" desc="No object or function identifier with static storage duration should be reused" id="AUTOSAR-A2_10_5-a" origId="MISRA2004-5_5_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_5" desc="No object or function identifier with static storage duration should be reused" id="AUTOSAR-A2_10_5-b" origId="MISRA2004-5_5_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_6" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="AUTOSAR-A2_10_6-a" origId="CODSTA-CPP-87_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_6" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="AUTOSAR-A2_10_6-b" origId="CODSTA-CPP-87_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_6" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="AUTOSAR-A2_10_6-c" origId="CODSTA-CPP-87_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_11_1" desc="Do not use the volatile keyword" id="AUTOSAR-A2_11_1-a" origId="MISRA-046_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_1" desc="Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used" id="AUTOSAR-A2_13_1-a" origId="CODSTA-CPP-60_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_2" desc="String literals with different encoding prefixes shall not be concatenated" id="AUTOSAR-A2_13_2-a" origId="PB-38_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_3" desc="Type wchar_t shall not be used" id="AUTOSAR-A2_13_3-a" origId="PORT-33" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_4" desc="A string literal shall not be modified" id="AUTOSAR-A2_13_4-a" origId="PB-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_5" desc="Hexadecimal constants will be represented using all uppercase letters" id="AUTOSAR-A2_13_5-a" origId="CODSTA-50" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_6" desc="Universal character names shall be used only inside character or string literals" id="AUTOSAR-A2_13_6-a" origId="NAMING-52" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_3_1" desc="Only use characters defined in ISO C standard" id="AUTOSAR-A2_3_1-a" origId="MISRA-005" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_5_1" desc="Trigraphs shall not be used" id="AUTOSAR-A2_5_1-a" origId="MISRA2004-4_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_5_1" desc="Trigraphs shall not be used" id="AUTOSAR-A2_5_1-b" origId="MISRA2004-4_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_5_2" desc="Do not use the following digraphs: &lt;%, %>, &lt;:, :>, %:, %:%:" id="AUTOSAR-A2_5_2-a" origId="CODSTA-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_7_1" desc="Line-splicing shall not be used in // comments" id="AUTOSAR-A2_7_1-a" origId="COMMENT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_7_2" desc="Sections of code should not be &quot;commented out&quot;" id="AUTOSAR-A2_7_2-a" origId="MISRA2004-2_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="12;" authUrg="0;" cat="AUTOSAR-A2_7_3" desc="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" id="AUTOSAR-A2_7_3-a" origId="COMMENT-14" sev="2" total="12" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="AUTOSAR-A2_7_3" desc="Function parameters and return type should be documented in a comment that precedes the function declaration" id="AUTOSAR-A2_7_3-b" origId="COMMENT-14_b" sev="2" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_8_1" desc="An include file for a class should have a file name of the form &lt;class name> + extension" id="AUTOSAR-A2_8_1-a" origId="NAMING-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_1" desc="Don't define entities with linkage in a header file" id="AUTOSAR-A3_1_1-a" origId="PFO-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_2" desc="Header files should have a file extension of: &quot;.h&quot;, &quot;.hpp&quot; or &quot;.hxx&quot;" id="AUTOSAR-A3_1_2-a" origId="NAMING-53" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_3" desc="Implementation files in C++ will always have a file name extension of &quot;.cpp&quot;" id="AUTOSAR-A3_1_3-a" origId="NAMING-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_4" desc="When an array is declared with external linkage, its size shall be stated explicitly or defined implicitly by initialisation" id="AUTOSAR-A3_1_4-a" origId="MISRA2004-8_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_5" desc="A function definition should not be placed in a class specification unless the function is intended to be inlined" id="AUTOSAR-A3_1_5-a" origId="CODSTA-CPP-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_6" desc="Trivial accessor and mutator functions should be inlined" id="AUTOSAR-A3_1_6-a" origId="OPT-23" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="AUTOSAR-A3_3_1" desc="Objects or functions with external linkage shall be declared in a header file" id="AUTOSAR-A3_3_1-a" origId="MISRA-023" sev="2" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_3_1" desc="Don't define entities with linkage in a header file" id="AUTOSAR-A3_3_1-b" origId="PFO-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A3_3_2" desc="Static and thread-local objects shall be constant-initialized" id="AUTOSAR-A3_3_2-a" origId="CODSTA-MCPP-32" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="Do not use resources that have been freed" id="AUTOSAR-A3_8_1-a" origId="BD-RES-FREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="The address of an object with automatic storage shall not be returned from a function" id="AUTOSAR-A3_8_1-b" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="AUTOSAR-A3_8_1-c" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="Do not point to a wrapped object that has been freed" id="AUTOSAR-A3_8_1-d" origId="BD-PB-WRAPESC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="AUTOSAR-A3_9_1" desc="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" id="AUTOSAR-A3_9_1-b" origId="CODSTA-223" sev="2" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_10_1" desc="NULL shall not be used as an integer value" id="AUTOSAR-A4_10_1-a" origId="CODSTA-CPP-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="AUTOSAR-A4_10_1" desc="Prefer 'nullptr' over 'NULL' or '0'(zero)" id="AUTOSAR-A4_10_1-b" origId="CODSTA-MCPP-04" sev="2" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_5_1" desc="Expressions with type enum shall not be used as operands to built-in operators other than  [ ],  =, ==, !=, &lt;, &lt;=, >, >=, and the unary &amp; operator" id="AUTOSAR-A4_5_1-a" origId="CODSTA-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid implicit conversions from signed to unsigned type" id="AUTOSAR-A4_7_1-a" origId="PB-56" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="AUTOSAR-A4_7_1-b" origId="MISRA-043_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid conversions of constant values to a narrower type" id="AUTOSAR-A4_7_1-c" origId="PORT-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="AUTOSAR-A4_7_1-d" origId="MISRA-043" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid implicit conversions from wider to narrower floating type" id="AUTOSAR-A4_7_1-e" origId="MISRA2004-10_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid implicit conversions from floating to integral type" id="AUTOSAR-A4_7_1-f" origId="MISRA2004-10_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="AUTOSAR-A4_7_1-g" origId="MISRA-043_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid integer overflows" id="AUTOSAR-A4_7_1-h" origId="BD-PB-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of function calls" id="AUTOSAR-A5_0_1-a" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Do not use more than one volatile between two adjacent sequence points" id="AUTOSAR-A5_0_1-b" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="AUTOSAR-A5_0_1-c" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="AUTOSAR-A5_0_1-d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="AUTOSAR-A5_0_1-e" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of function arguments" id="AUTOSAR-A5_0_1-f" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="AUTOSAR-A5_0_1-g" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_2" desc="The condition of an if-statement and the condition of an iteration-statement shall have type bool" id="AUTOSAR-A5_0_2-a" origId="CODSTA-CPP-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_3" desc="The declaration of objects should contain no more than 2 levels of pointer indirection" id="AUTOSAR-A5_0_3-a" origId="MISRA2004-17_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_4" desc="Don't treat arrays polymorphically" id="AUTOSAR-A5_0_4-a" origId="PB-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_4" desc="A pointer to an array of derived class objects should not be converted to a base class pointer" id="AUTOSAR-A5_0_4-b" origId="PB-57" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_4" desc="Do not treat arrays polymorphically" id="AUTOSAR-A5_0_4-c" origId="BD-PB-POLARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_10_1" desc="A pointer to member virtual function shall only be tested for equality with null-pointer-constant" id="AUTOSAR-A5_10_1-a" origId="CODSTA-MCPP-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_16_1" desc="The conditional operator should not be used as a sub-expression" id="AUTOSAR-A5_16_1-a" origId="CODSTA-224" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="2;" cat="AUTOSAR-A5_1_1" desc="Avoid magic numbers" id="AUTOSAR-A5_1_1-a" origId="CODSTA-26" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_2" desc="Avoid default capture modes" id="AUTOSAR-A5_1_2-a" origId="CODSTA-MCPP-15_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_3" desc="Include a parameter list in every lambda expression" id="AUTOSAR-A5_1_3-a" origId="CODSTA-MCPP-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_4" desc="Never return lambdas that capture local objects by reference" id="AUTOSAR-A5_1_4-a" origId="CODSTA-MCPP-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_4" desc="Never capture local objects from an outer lambda by reference" id="AUTOSAR-A5_1_4-b" origId="CODSTA-MCPP-17_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_4" desc="The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime" id="AUTOSAR-A5_1_4-c" origId="CODSTA-MCPP-17_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_6" desc="Return type of a non-void return type lambda expression should be explicitly specified" id="AUTOSAR-A5_1_6-a" origId="CODSTA-MCPP-45" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_7" desc="A lambda shall not be an operand to typeid" id="AUTOSAR-A5_1_7-a" origId="CODSTA-MCPP-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_8" desc="Lambda expressions should not be defined inside another lambda expression" id="AUTOSAR-A5_1_8-a" origId="CODSTA-MCPP-44" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_1" desc="Avoid dynamic_casts" id="AUTOSAR-A5_2_1-a" origId="CODSTA-CPP-35" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A5_2_2" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="AUTOSAR-A5_2_2-a" origId="CODSTA-CPP-66" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_3" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="AUTOSAR-A5_2_3-a" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_4" desc="Avoid using reinterpret_cast" id="AUTOSAR-A5_2_4-a" origId="CODSTA-CPP-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="Avoid accessing arrays out of bounds" id="AUTOSAR-A5_2_5-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="Avoid accessing arrays and pointers out of bounds" id="AUTOSAR-A5_2_5-b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="AUTOSAR-A5_2_5-c" origId="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="Avoid tainted data in array indexes" id="AUTOSAR-A5_2_5-d" origId="BD-SECURITY-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_6" desc="Each operand of a logical '&amp;&amp;' or '||' shall be a postfix-expression" id="AUTOSAR-A5_2_6-a" origId="CODSTA-90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_3_1" desc="The operand of the 'typeid' operator shall not contain any expression that has side effects" id="AUTOSAR-A5_3_1-a" origId="CODSTA-CPP-104" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_3_1" desc="The operand of the 'typeid' operator shall not contain a function call that causes side effects" id="AUTOSAR-A5_3_1-b" origId="CODSTA-CPP-104_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-A5_3_2" desc="Avoid null pointer dereferencing" id="AUTOSAR-A5_3_2-a" origId="BD-PB-NP" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_3_3" desc="Do not delete objects with incomplete class at the point of deletion" id="AUTOSAR-A5_3_3-a" origId="PB-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_5_1" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="AUTOSAR-A5_5_1-a" origId="CODSTA-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_6_1" desc="Avoid division by zero" id="AUTOSAR-A5_6_1-a" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_2_1" desc="Copy assignment operators should not have side effects that could affect copying the object" id="AUTOSAR-A6_2_1-a" origId="MRM-56" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_2_1" desc="Move assignment operators should not have side effects that could affect moving the object" id="AUTOSAR-A6_2_1-b" origId="MRM-57" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_2_2" desc="Expression statements shall not be explicit calls to constructors of temporary objects only" id="AUTOSAR-A6_2_2-a" origId="PB-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_4_1" desc="Every switch statement will have at least two cases and a potential default" id="AUTOSAR-A6_4_1-a" origId="CODSTA-54" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_1" desc="A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" id="AUTOSAR-A6_5_1-a" origId="CODSTA-MCPP-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_2" desc="A for loop shall contain a single loop-counter which shall not have floating type" id="AUTOSAR-A6_5_2-a" origId="CODSTA-CPP-69" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_3" desc="Prefer while statements over do statements" id="AUTOSAR-A6_5_3-a" origId="CODSTA-18" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_4" desc="The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter" id="AUTOSAR-A6_5_4-a" origId="CODSTA-52" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_4" desc="The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop" id="AUTOSAR-A6_5_4-b" origId="CODSTA-53" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_6_1" desc="The goto statement shall not be used" id="AUTOSAR-A6_6_1-a" origId="MISRA2004-14_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="AUTOSAR-A7_1_1" desc="Declare parameters or local variable as const whenever possible" id="AUTOSAR-A7_1_1-a" origId="CODSTA-CPP-53" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_2" desc="Use constexpr to declare const variables whenever possible" id="AUTOSAR-A7_1_2-a" origId="CODSTA-MCPP-11_a_cpp11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A7_1_2" desc="Use constexpr to declare functions whenever possible" id="AUTOSAR-A7_1_2-b" origId="CODSTA-MCPP-11_b_cpp11" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_3" desc="CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name" id="AUTOSAR-A7_1_3-a" origId="FORMAT-47_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_4" desc="The 'register' storage class specifier shall not be used" id="AUTOSAR-A7_1_4-a" origId="MISRA-028" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_5" desc="Do not overuse 'auto' specifier" id="AUTOSAR-A7_1_5-a" origId="CODSTA-MCPP-40" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_6" desc="Prefer alias declarations to typedefs" id="AUTOSAR-A7_1_6-a" origId="CODSTA-MCPP-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_7" desc="Only one statement shall be allowed per line" id="AUTOSAR-A7_1_7-a" origId="FORMAT-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="AUTOSAR-A7_1_7" desc="Multiple variable declarations shall not be allowed on the same line" id="AUTOSAR-A7_1_7-b" origId="FORMAT-29" sev="2" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="AUTOSAR-A7_1_7" desc="Each variable should be declared in a separate declaration statement" id="AUTOSAR-A7_1_7-c" origId="FORMAT-33" sev="2" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_8" desc="Do not place type specifiers before non-type specifiers in a declaration" id="AUTOSAR-A7_1_8-a" origId="HICPP-7_1_3-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_9" desc="A class, structure, or enumeration will not be declared in the definition of its type" id="AUTOSAR-A7_1_9-a" origId="CODSTA-CPP-56" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_1" desc="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="AUTOSAR-A7_2_1-a" origId="PB-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_2" desc="Use an explicit enumeration base and ensure that it is large enough to store all enumerators" id="AUTOSAR-A7_2_2-a" origId="HICPP-7_2_1-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_3" desc="Prefer Scoped Enums to Unscoped Enums" id="AUTOSAR-A7_2_3-a" origId="CODSTA-MCPP-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_4" desc="In an enumerator list, the &quot;=&quot; construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised" id="AUTOSAR-A7_2_4-a" origId="MISRA2004-9_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_5" desc="Enumeration types shall be used instead of integer types (and constants) as case labels" id="AUTOSAR-A7_2_5-a" origId="CODSTA-55" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_3_1" desc="Write a using declaration to redeclare overloaded functions" id="AUTOSAR-A7_3_1-a" origId="OOP-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_4_1" desc="Do not use the asm declaration" id="AUTOSAR-A7_4_1-a" origId="HICPP-7_5_1-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_5_1" desc="A function shall not return a pointer or a reference to a parameter that is passed by const reference" id="AUTOSAR-A7_5_1-a" origId="PB-39_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_5_2" desc="Functions shall not call themselves, either directly or indirectly" id="AUTOSAR-A7_5_2-a" origId="MISRA2004-16_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_6_1" desc="Never return from functions that should not return" id="AUTOSAR-A7_6_1-a" origId="BD-PB-NORETURN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_2_1" desc="Use a trailing return type syntax if the return type is preceded by the 'typename' keyword" id="AUTOSAR-A8_2_1-a" origId="TEMPL-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_1" desc="Do not use functions with variable numbers of arguments" id="AUTOSAR-A8_4_1-a" origId="MISRA-069" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="2;" authUrg="0;" cat="AUTOSAR-A8_4_10" desc="A parameter shall be passed by reference if it can't be NULL" id="AUTOSAR-A8_4_10-a" origId="BD-PB-REFPARAM" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_11" desc="A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="AUTOSAR-A8_4_11-a" origId="CODSTA-MCPP-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="Do not pass std::unique_ptr by const reference" id="AUTOSAR-A8_4_12-a" origId="HICPP-8_2_4-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="AUTOSAR-A8_4_12-b" origId="CODSTA-MCPP-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object" id="AUTOSAR-A8_4_12-c" origId="CODSTA-MCPP-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr'" id="AUTOSAR-A8_4_12-d" origId="CODSTA-MCPP-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_13" desc="A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="AUTOSAR-A8_4_13-a" origId="CODSTA-MCPP-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_13" desc="A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object" id="AUTOSAR-A8_4_13-b" origId="CODSTA-MCPP-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_13" desc="Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr'" id="AUTOSAR-A8_4_13-c" origId="CODSTA-MCPP-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_2" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="AUTOSAR-A8_4_2-a" origId="MISRA2004-16_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_3" desc="Pass objects by reference instead of by value" id="AUTOSAR-A8_4_3-a" origId="OPT-14" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_3" desc="Declare reference parameters as const references whenever possible" id="AUTOSAR-A8_4_3-b" origId="CODSTA-CPP-43" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_4" desc="Multiple output values from a function should be returned as a struct or tuple" id="AUTOSAR-A8_4_4-a" origId="CODSTA-MCPP-48" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_5" desc="Use std::move() on rvalue references and std::forward() on forwarding references" id="AUTOSAR-A8_4_5-a" origId="CODSTA-MCPP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_6" desc="Use std::move() on rvalue references and std::forward() on forwarding references" id="AUTOSAR-A8_4_6-a" origId="CODSTA-MCPP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_7" desc="Pass built-in-types by value unless you are modifying them" id="AUTOSAR-A8_4_7-a" origId="CODSTA-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_7" desc="Pass small objects with a trivial copy constructor by value" id="AUTOSAR-A8_4_7-b" origId="HICPP-8_2_3-b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_8" desc="Output parameters shall not be used" id="AUTOSAR-A8_4_8-a" origId="CODSTA-CPP-103" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_9" desc="Declare reference parameters as const references whenever possible" id="AUTOSAR-A8_4_9-a" origId="CODSTA-CPP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_0" desc="Avoid use before initialization" id="AUTOSAR-A8_5_0-a" origId="BD-PB-NOTINIT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_1" desc="List members in an initialization list in the order in which they are declared" id="AUTOSAR-A8_5_1-a" origId="INIT-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="3;" cat="AUTOSAR-A8_5_2" desc="Braced-initialization {}, without equals sign, shall be used for variable initialization" id="AUTOSAR-A8_5_2-a" origId="CODSTA-MCPP-38" sev="2" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_3" desc="A variable of type auto shall not be initialized using '{}' or '={}' braced-initialization" id="AUTOSAR-A8_5_3-a" origId="CODSTA-MCPP-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_4" desc="Avoid overloading constructors with std::initializer_list" id="AUTOSAR-A8_5_4-a" origId="CODSTA-MCPP-47" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_3_1" desc="Public member functions shall not return non-const handles to private/protected class-data" id="AUTOSAR-A9_3_1-a" origId="OOP-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_3_1" desc="Protected member function shall not return non-const handles to private class-data" id="AUTOSAR-A9_3_1-b" origId="OOP-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_5_1" desc="Unions shall not be used" id="AUTOSAR-A9_5_1-a" origId="MISRA2004-18_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_5_1" desc="Unions shall not be used" id="AUTOSAR-A9_5_1-b" origId="MISRA2004-18_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_6_1" desc="Bit fields shall only be defined to be of type unsigned int or signed int" id="AUTOSAR-A9_6_1-a" origId="MISRA2004-6_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_6_2" desc="Do not declare member variables as bit-fields" id="AUTOSAR-A9_6_2-a" origId="CODSTA-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="AUTOSAR-M0_1_1-a" origId="MISRA2004-14_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="AUTOSAR-M0_1_1-b" origId="MISRA2004-14_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in &quot;else&quot; block" id="AUTOSAR-M0_1_1-c" origId="MISRA2004-14_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="AUTOSAR-M0_1_1-d" origId="MISRA2004-14_1_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="AUTOSAR-M0_1_1-e" origId="MISRA2004-14_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in 'for' loop" id="AUTOSAR-M0_1_1-f" origId="MISRA2004-14_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in switch statement" id="AUTOSAR-M0_1_1-g" origId="MISRA2004-14_1_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="4;" authUrg="0;" cat="AUTOSAR-M0_1_10" desc="Every defined function with external linkage shall be used at least once" id="AUTOSAR-M0_1_10-a" origId="GLOBAL-UNUSEDFUNC" sev="4" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_10" desc="Every defined function with internal linkage shall be used at least once" id="AUTOSAR-M0_1_10-b" origId="OPT-30" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-a" origId="MISRA2004-13_7_ab" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-aa" origId="MISRA2004-13_7_aj" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-ab" origId="MISRA2004-13_7_k" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Avoid conditions that always evaluate to the same value" id="AUTOSAR-M0_1_2-ac" origId="BD-PB-CC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-b" origId="MISRA2004-13_7_v" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-c" origId="MISRA2004-13_7_z" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-d" origId="MISRA2004-13_7_n" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-e" origId="MISRA2004-13_7_s" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-f" origId="MISRA2004-13_7_t" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-g" origId="MISRA2004-13_7_u" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-h" origId="MISRA2004-13_7_j" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-i" origId="MISRA2004-13_7_l" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-j" origId="MISRA2004-13_7_m" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-k" origId="MISRA2004-13_7_w" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-l" origId="MISRA2004-13_7_x" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-m" origId="MISRA2004-13_7_y" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-n" origId="MISRA2004-13_7_ac" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-o" origId="MISRA2004-13_7_ad" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-p" origId="MISRA2004-13_7_ae" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-q" origId="MISRA2004-13_7_af" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-r" origId="MISRA2004-13_7_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-s" origId="MISRA2004-13_7_aa" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-t" origId="MISRA2004-13_7_ak" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-u" origId="MISRA2004-13_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-v" origId="MISRA2004-13_7_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-w" origId="MISRA2004-13_7_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-x" origId="MISRA2004-13_7_ag" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-y" origId="MISRA2004-13_7_ah" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-z" origId="MISRA2004-13_7_ai" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_3" desc="Avoid unused local variables" id="AUTOSAR-M0_1_3-a" origId="OPT-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="AUTOSAR-M0_1_3" desc="Avoid unnecessary local variables" id="AUTOSAR-M0_1_3-b" origId="OPT-06" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_3" desc="Avoid unused private member variables" id="AUTOSAR-M0_1_3-c" origId="OPT-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="9;" authUrg="0;" cat="AUTOSAR-M0_1_4" desc="A project shall not contain non-volatile POD variables having only one use" id="AUTOSAR-M0_1_4-a" origId="GLOBAL-ONEUSEVAR" sev="2" total="9" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_8" desc="All non-empty functions with void return type shall have external side effect(s)" id="AUTOSAR-M0_1_8-a" origId="OPT-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M0_1_8" desc="Functions with void return type shall not be empty" id="AUTOSAR-M0_1_8-b" origId="OPT-32_b" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_9" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="AUTOSAR-M0_1_9-a" origId="MISRA2004-14_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_2_1" desc="An object shall not be assigned to an overlapping object" id="AUTOSAR-M0_2_1-a" origId="MISRA2004-18_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_2_1" desc="An object shall not be assigned to an overlapping object" id="AUTOSAR-M0_2_1-b" origId="PB-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Do not subtract two pointers that do not address elements of the same array" id="AUTOSAR-M0_3_1-a" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid overflow when writing to a buffer" id="AUTOSAR-M0_3_1-b" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Do not compare two unrelated pointers" id="AUTOSAR-M0_3_1-c" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid accessing arrays out of bounds" id="AUTOSAR-M0_3_1-d" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid division by zero" id="AUTOSAR-M0_3_1-e" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid null pointer dereferencing" id="AUTOSAR-M0_3_1-f" origId="BD-PB-NP" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid overflow due to reading a not zero terminated string" id="AUTOSAR-M0_3_1-g" origId="BD-PB-OVERFNZT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid buffer overflow due to defining incorrect format limits" id="AUTOSAR-M0_3_1-h" origId="BD-PB-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid overflow when reading from a buffer" id="AUTOSAR-M0_3_1-i" origId="BD-PB-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Do not check for null after dereferencing" id="AUTOSAR-M0_3_1-j" origId="BD-PB-DEREF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M0_3_2" desc="If a function returns error information, then that error information shall be tested" id="AUTOSAR-M0_3_2-a" origId="MISRA2004-16_10" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M0_4_2" desc="Use of floating-point arithmetic shall be documented" id="AUTOSAR-M0_4_2-a" origId="COMMENT-10" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_1_1" desc="Classes should not be derived from virtual bases" id="AUTOSAR-M10_1_1-a" origId="OOP-47" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_1_2" desc="A base class shall only be declared virtual if it is used in a diamond hierarchy" id="AUTOSAR-M10_1_2-a" origId="GLOBAL-VIRTBASECLASS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_1_3" desc="A base class shall not be both virtual and non-virtual in the same hierarchy" id="AUTOSAR-M10_1_3-a" origId="OOP-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_2_1" desc="All accessible entity names within a multiple inheritance hierarchy should be unique" id="AUTOSAR-M10_2_1-a" origId="CODSTA-CPP-92" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_3_3" desc="A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" id="AUTOSAR-M10_3_3-a" origId="OOP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M11_0_1" desc="Member data in non-POD types shall be private" id="AUTOSAR-M11_0_1-a" origId="OOP-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M12_1_1" desc="Do not use dynamic type of an object under construction" id="AUTOSAR-M12_1_1-a" origId="BD-PB-VCTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M14_5_3" desc="A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" id="AUTOSAR-M14_5_3-a" origId="TEMPL-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M14_6_1" desc="In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" id="AUTOSAR-M14_6_1-a" origId="TEMPL-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_0_3" desc="Control shall not be transferred into a try or catch block using a goto or a switch statement" id="AUTOSAR-M15_0_3-a" origId="EXCEPT-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_1_1" desc="The assignment-expression of a throw statement shall not itself cause an exception to be thrown" id="AUTOSAR-M15_1_1-a" origId="EXCEPT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_1_2" desc="NULL shall not be thrown explicitly" id="AUTOSAR-M15_1_2-a" origId="EXCEPT-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_1_3" desc="An empty throw (throw;) shall only be used in the compound-statement of a catch handler" id="AUTOSAR-M15_1_3-a" origId="EXCEPT-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M15_3_1" desc="Exceptions shall be raised only after start-up and before termination of the program" id="AUTOSAR-M15_3_1-a" origId="EXCEPT-08" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_3" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="AUTOSAR-M15_3_3-a" origId="EXCEPT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_4" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="AUTOSAR-M15_3_4-a" origId="EXCEPT-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_4" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-M15_3_4-b" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_6" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="AUTOSAR-M15_3_6-a" origId="EXCEPT-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_7" desc="Where multiple handlers are provided in a single 'try-catch' statement or 'function-try-block', any ellipsis (catch-all) handler shall occur last" id="AUTOSAR-M15_3_7-a" origId="EXCEPT-24" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_1" desc="#include statements in a file should only be preceded by other preprocessor directives or comments" id="AUTOSAR-M16_0_1-a" origId="MISRA2004-19_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_2" desc="Macros shall not be #define'd or #undef'd within a block" id="AUTOSAR-M16_0_2-a" origId="MISRA2004-19_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_5" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="AUTOSAR-M16_0_5-a" origId="MISRA2004-19_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="AUTOSAR-M16_0_6" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="AUTOSAR-M16_0_6-a" origId="MISRA2004-19_10" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_7" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="AUTOSAR-M16_0_7-a" origId="MISRA2004-19_11_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_8" desc="Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" id="AUTOSAR-M16_0_8-a" origId="MISRA2004-19_16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_1_1" desc="The defined preprocessor operator shall only be used in one of the two standard forms" id="AUTOSAR-M16_1_1-a" origId="MISRA2004-19_14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_1_2" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="AUTOSAR-M16_1_2-a" origId="MISRA2004-19_17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_2_3" desc="Use multiple include guards" id="AUTOSAR-M16_2_3-a" origId="PFO-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_3_1" desc="There shall be at most one occurrence of the # or ## preprocessor operators in a single macro definition" id="AUTOSAR-M16_3_1-a" origId="MISRA2004-19_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_3_2" desc="The # and ## preprocessor operators should not be used" id="AUTOSAR-M16_3_2-a" origId="MISRA2004-19_13" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M17_0_2" desc="The names of standard library macros and objects shall not be reused" id="AUTOSAR-M17_0_2-a" origId="CODSTA-92" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M17_0_3" desc="The names of standard library functions shall not be overridden" id="AUTOSAR-M17_0_3-a" origId="CODSTA-93" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M17_0_5" desc="The setjmp macro and the longjmp function shall not be used" id="AUTOSAR-M17_0_5-a" origId="MISRA2004-20_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-M18_0_3-a" origId="PB-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-M18_0_3-b" origId="PB-75_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-M18_0_3-c" origId="SECURITY-48_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-M18_0_3-d" origId="SECURITY-52" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_4" desc="The time handling functions of library time.h shall not be used" id="AUTOSAR-M18_0_4-a" origId="MISRA2004-20_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_5" desc="The unbounded functions of library &lt;cstring> shall not be used" id="AUTOSAR-M18_0_5-a" origId="PB-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_2_1" desc="The macro offsetof, in library stddef.h, shall not be used" id="AUTOSAR-M18_2_1-a" origId="MISRA2004-20_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_7_1" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="AUTOSAR-M18_7_1-a" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_7_1" desc="The standard header file &lt;signal.h> shall not be used" id="AUTOSAR-M18_7_1-b" origId="MISRA2004-20_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M19_3_1" desc="The error indicator 'errno' shall not be used" id="AUTOSAR-M19_3_1-a" origId="MISRA2004-20_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M27_0_1" desc="The input/output library stdio.h shall not be used" id="AUTOSAR-M27_0_1-a" origId="MISRA2004-20_9" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-M2_10_1" desc="Different identifiers shall be typographically unambiguous" id="AUTOSAR-M2_10_1-a" origId="NAMING-47" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_13_2" desc="Octal constants (other than zero) shall not be used" id="AUTOSAR-M2_13_2-a" origId="MISRA2004-7_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_13_2" desc="Octal escape sequences shall not be used" id="AUTOSAR-M2_13_2-b" origId="MISRA2004-7_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-M2_13_3" desc="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" id="AUTOSAR-M2_13_3-a" origId="CODSTA-68" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_13_4" desc="Literal suffixes shall use uppercase rather than lowercase letters" id="AUTOSAR-M2_13_4-a" origId="CODSTA-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_7_1" desc="The character sequence /* shall not be used within a C-style comment" id="AUTOSAR-M2_7_1-a" origId="MISRA2004-2_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_1_2" desc="Always declare functions at file scope" id="AUTOSAR-M3_1_2-a" origId="MISRA2004-8_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_1" desc="All declarations of an object or function shall have compatible types" id="AUTOSAR-M3_2_1-a" origId="GLOBAL-COMPATDECLS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_2" desc="The One Definition Rule shall not be violated" id="AUTOSAR-M3_2_2-a" origId="GLOBAL-ONEDEFRULE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_3" desc="A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="AUTOSAR-M3_2_3-a" origId="GLOBAL-ONEFILEDECL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_4" desc="An identifier with external linkage shall have exactly one external definition" id="AUTOSAR-M3_2_4-a" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_3_2" desc="If a function has internal linkage then all re-declarations shall include the 'static' storage class specifier" id="AUTOSAR-M3_3_2-a" origId="CODSTA-81" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_4_1" desc="Declare variables as locally as possible" id="AUTOSAR-M3_4_1-a" origId="OPT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_4_1" desc="Objects shall be defined at block scope if they are only accessed from within a single function" id="AUTOSAR-M3_4_1-b" origId="MISRA2004-8_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_9_1" desc="The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" id="AUTOSAR-M3_9_1-a" origId="CODSTA-67" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_9_3" desc="The underlying bit representations of floating-point values shall not be used" id="AUTOSAR-M3_9_3-a" origId="MISRA2004-12_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M4_10_1" desc="NULL shall not be used as an integer value" id="AUTOSAR-M4_10_1-a" origId="CODSTA-CPP-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M4_10_2" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="AUTOSAR-M4_10_2-a" origId="CODSTA-CPP-63" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M4_5_1" desc="Expressions that are effectively Boolean should not be used as operands to operators other than (&amp;&amp;, ||, !, =, ==, !=, ?:)" id="AUTOSAR-M4_5_1-a" origId="MISRA2004-12_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M4_5_3" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary &amp; operator" id="AUTOSAR-M4_5_3-a" origId="CODSTA-69" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_10" desc="If the bitwise operators ~ and &lt;&lt; are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" id="AUTOSAR-M5_0_10-a" origId="MISRA2004-10_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_11" desc="The plain char type shall be used only for the storage and use of character values" id="AUTOSAR-M5_0_11-a" origId="MISRA2004-6_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_12" desc="signed and unsigned char type shall be used only for the storage and use of numeric values" id="AUTOSAR-M5_0_12-a" origId="MISRA2004-6_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_14" desc="The first operand of a conditional-operator shall have type bool" id="AUTOSAR-M5_0_14-a" origId="CODSTA-CPP-65" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M5_0_15" desc="Array indexing shall be the only allowed form of pointer arithmetic" id="AUTOSAR-M5_0_15-a" origId="MISRA2004-17_4" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_16" desc="Avoid accessing arrays out of bounds" id="AUTOSAR-M5_0_16-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_16" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="AUTOSAR-M5_0_16-b" origId="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_17" desc="Do not subtract two pointers that do not address elements of the same array" id="AUTOSAR-M5_0_17-a" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_18" desc="Do not compare two unrelated pointers" id="AUTOSAR-M5_0_18-a" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Use parenthesis for the right-hand operand of an assignment operator when it contains an assignment expression" id="AUTOSAR-M5_0_2-a" origId="MISRA2004-12_1_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="AUTOSAR-M5_0_2-b" origId="MISRA2004-12_1_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="No parentheses are required for the operand of a unary operator" id="AUTOSAR-M5_0_2-c" origId="MISRA2004-12_1_c" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="AUTOSAR-M5_0_2-d" origId="MISRA2004-12_1_d" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Use parentheses unless all operators in the expression are the same" id="AUTOSAR-M5_0_2-e" origId="MISRA2004-12_1_e" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="AUTOSAR-M5_0_2-f" origId="MISRA2004-12_1_f" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_20" desc="Non-constant operands to a binary bitwise operator shall have the same underlying type" id="AUTOSAR-M5_0_20-a" origId="CODSTA-66" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_21" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="AUTOSAR-M5_0_21-a" origId="CODSTA-63" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_3" desc="Avoid implicit conversions of complex expressions" id="AUTOSAR-M5_0_3-a" origId="MISRA2004-10_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_3" desc="Avoid implicit conversions of complex expressions" id="AUTOSAR-M5_0_3-b" origId="MISRA2004-10_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_3" desc="Avoid implicit conversions of complex expressions" id="AUTOSAR-M5_0_3-c" origId="MISRA2004-10_1_i" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="20;" authUrg="0;" cat="AUTOSAR-M5_0_4" desc="Avoid implicit conversions between signed and unsigned integer types" id="AUTOSAR-M5_0_4-a" origId="MISRA2004-10_1_a" sev="2" total="20" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M5_0_5" desc="There shall be no implicit conversions from integral to floating type" id="AUTOSAR-M5_0_5-a" origId="MISRA2004-10_1_b" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_5" desc="Avoid implicit conversions from floating to integral type" id="AUTOSAR-M5_0_5-b" origId="MISRA2004-10_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_6" desc="Avoid implicit integral conversions from a wider to a narrower type" id="AUTOSAR-M5_0_6-a" origId="CODSTA-222" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_6" desc="Avoid implicit conversions from wider to narrower floating type" id="AUTOSAR-M5_0_6-b" origId="MISRA2004-10_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_6" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="AUTOSAR-M5_0_6-c" origId="MISRA2004-10_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_7" desc="The value of a complex expression of floating type should not be cast to an integer type" id="AUTOSAR-M5_0_7-a" origId="CODSTA-198_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_7" desc="The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" id="AUTOSAR-M5_0_7-b" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_8" desc="The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" id="AUTOSAR-M5_0_8-a" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_8" desc="The value of a complex expression of floating type should not be cast to a wider floating type" id="AUTOSAR-M5_0_8-b" origId="CODSTA-198" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_9" desc="The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" id="AUTOSAR-M5_0_9-a" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_14_1" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="AUTOSAR-M5_14_1-a" origId="MISRA2004-12_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_17_1" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="AUTOSAR-M5_17_1-a" origId="CODSTA-CPP-91" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_18_1" desc="The comma operator shall not be used" id="AUTOSAR-M5_18_1-a" origId="MISRA2004-12_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_19_1" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="AUTOSAR-M5_19_1-a" origId="PB-66_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_19_1" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="AUTOSAR-M5_19_1-b" origId="PB-66_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_10" desc="The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" id="AUTOSAR-M5_2_10-a" origId="MISRA2004-12_13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_11" desc="Avoid overloading comma operator &quot;,&quot;" id="AUTOSAR-M5_2_11-a" origId="CODSTA-CPP-80" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_11" desc="Avoid overloading logical operators AND, OR (&amp;&amp;, ||)" id="AUTOSAR-M5_2_11-b" origId="CODSTA-CPP-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_12" desc="An identifier with array type passed as a function argument shall not decay to a pointer" id="AUTOSAR-M5_2_12-a" origId="PB-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_2" desc="A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" id="AUTOSAR-M5_2_2-a" origId="OOP-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_3" desc="Casts from a base class to a derived class should not be performed on polymorphic types" id="AUTOSAR-M5_2_3-a" origId="OOP-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_6" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="AUTOSAR-M5_2_6-a" origId="CODSTA-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_8" desc="An object with integer type or pointer to void type shall not be converted to an object with pointer type" id="AUTOSAR-M5_2_8-a" origId="CODSTA-65" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_9" desc="A cast should not convert a pointer type to an integral type" id="AUTOSAR-M5_2_9-a" origId="MISRA2004-11_3_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-M5_3_1" desc="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" id="AUTOSAR-M5_3_1-a" origId="CODSTA-CPP-67" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_2" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="AUTOSAR-M5_3_2-a" origId="MISRA2004-12_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_3" desc="The unary &amp; operator shall not be overloaded" id="AUTOSAR-M5_3_3-a" origId="CODSTA-CPP-68" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_4" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="AUTOSAR-M5_3_4-a" origId="MISRA2004-12_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_4" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="AUTOSAR-M5_3_4-b" origId="MISRA2004-12_3_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_4" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="AUTOSAR-M5_3_4-c" origId="MISRA2004-12_3_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_8_1" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="AUTOSAR-M5_8_1-a" origId="MISRA2004-12_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_2_1" desc="Assignment operators shall not be used in expressions that yield a Boolean value" id="AUTOSAR-M6_2_1-a" origId="MISRA2004-13_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_2_2" desc="Floating-point expressions shall not be tested for equality or inequality" id="AUTOSAR-M6_2_2-a" origId="MISRA2004-13_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_2_3" desc="A null statement shall occur on a line by itself or be followed by a comment" id="AUTOSAR-M6_2_3-a" origId="MISRA2004-14_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_3_1" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="AUTOSAR-M6_3_1-a" origId="MISRA2004-14_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_1" desc="'if' and 'else' should be followed by a compound statement" id="AUTOSAR-M6_4_1-a" origId="MISRA2004-14_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_2" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="AUTOSAR-M6_4_2-a" origId="MISRA2004-14_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="AUTOSAR-M6_4_3-a" origId="CODSTA-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="The final clause of a switch statement shall be the default-clause unless all enumeration values are tested" id="AUTOSAR-M6_4_3-b" origId="CODSTA-61" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="AUTOSAR-M6_4_3-c" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="Every switch statement shall have at least one case clause" id="AUTOSAR-M6_4_3-d" origId="MISRA2004-15_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="A switch expression shall not represent a value that is effectively Boolean" id="AUTOSAR-M6_4_3-e" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_4" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="AUTOSAR-M6_4_4-a" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_5" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="AUTOSAR-M6_4_5-a" origId="CODSTA-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_6" desc="The final clause of a switch statement shall be the default-clause unless all enumeration values are tested" id="AUTOSAR-M6_4_6-a" origId="CODSTA-61" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_7" desc="A switch expression shall not represent a value that is effectively Boolean" id="AUTOSAR-M6_4_7-a" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_2" desc="If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" id="AUTOSAR-M6_5_2-a" origId="CODSTA-CPP-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_3" desc="Do not modify for loop counter within a body of the loop" id="AUTOSAR-M6_5_3-a" origId="MISRA2004-13_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_4" desc="The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop" id="AUTOSAR-M6_5_4-a" origId="CODSTA-CPP-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_5" desc="A loop-control-variable other than the loop-counter shall not be modified within condition or expression" id="AUTOSAR-M6_5_5-a" origId="CODSTA-CPP-72" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_6" desc="A loop-control-variable other than the loop-counter which is modified in statement shall have type bool" id="AUTOSAR-M6_5_6-a" origId="CODSTA-CPP-73" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_6_1" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="AUTOSAR-M6_6_1-a" origId="CODSTA-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_6_2" desc="The goto statement shall jump to a label declared later in the same function body" id="AUTOSAR-M6_6_2-a" origId="CODSTA-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_6_3" desc="The continue statement shall only be used within a well formed for loop" id="AUTOSAR-M6_6_3-a" origId="CODSTA-80" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_1_2" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="AUTOSAR-M7_1_2-a" origId="MISRA2004-16_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-M7_1_2" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="AUTOSAR-M7_1_2-b" origId="MISRA2004-16_7" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_1_2" desc="Declare reference parameters as const references whenever possible" id="AUTOSAR-M7_1_2-c" origId="CODSTA-CPP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="0;" cat="AUTOSAR-M7_3_1" desc="The global namespace shall only contain main() and namespace declarations" id="AUTOSAR-M7_3_1-a" origId="CODSTA-CPP-36" sev="2" total="13" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_3_2" desc="The identifier main shall not be used for a function other than the global function main" id="AUTOSAR-M7_3_2-a" origId="CODSTA-76" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_3_3" desc="There shall be no unnamed namespaces in header files" id="AUTOSAR-M7_3_3-a" origId="CODSTA-CPP-74" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_3_4" desc="using-directives shall not be used" id="AUTOSAR-M7_3_4-a" origId="CODSTA-CPP-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_3_6" desc="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" id="AUTOSAR-M7_3_6-a" origId="CODSTA-CPP-90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_4_1" desc="All usage of assembler shall be documented" id="AUTOSAR-M7_4_1-a" origId="COMMENT-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_4_2" desc="Assembler instructions shall only be introduced using the asm declaration" id="AUTOSAR-M7_4_2-a" origId="CODSTA-73" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_4_3" desc="Assembly language shall be encapsulated and isolated in C/C++ functions" id="AUTOSAR-M7_4_3-a" origId="CODSTA-114" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_5_1" desc="The address of an object with automatic storage shall not be returned from a function" id="AUTOSAR-M7_5_1-a" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_5_2" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="AUTOSAR-M7_5_2-a" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="AUTOSAR-M8_0_1" desc="Each variable should be declared in a separate declaration statement" id="AUTOSAR-M8_0_1-a" origId="FORMAT-33" sev="2" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_3_1" desc="Do not redefine an inherited virtual function with a different default parameter value" id="AUTOSAR-M8_3_1-a" origId="OOP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_4_2" desc="The identifiers used in the declaration and definition of a function shall be identical" id="AUTOSAR-M8_4_2-a" origId="MISRA2004-16_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="AUTOSAR-M8_4_4" desc="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" id="AUTOSAR-M8_4_4-a" origId="MISRA2004-16_9" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_5_2" desc="The initializer for an aggregate or union shall be enclosed in braces" id="AUTOSAR-M8_5_2-a" origId="INIT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_5_2" desc="Arrays shall not be partially initialized" id="AUTOSAR-M8_5_2-b" origId="MISRA2004-9_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_5_2" desc="The non-zero initialization of structures requires an explicit initializer for each element" id="AUTOSAR-M8_5_2-c" origId="MISRA2004-9_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M9_3_1" desc="Const member functions shall not return non-const pointers or references to class-data" id="AUTOSAR-M9_3_1-a" origId="CODSTA-CPP-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M9_3_3" desc="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="AUTOSAR-M9_3_3-a" origId="CODSTA-CPP-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M9_6_4" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="AUTOSAR-M9_6_4-a" origId="CODSTA-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not pass incorrect values to library functions" id="BD-API-BADPARAM" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not pass negative values to functions expecting non-negative arguments" id="BD-API-NEGPARAM" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not pass incorrect values to ctype.h library functions" id="BD-API-CTYPE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not check for a non-negative value after passing as a non-negative argument" id="BD-API-REVNEGPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="The size_t argument passed to any function in string.h shall have an appropriate value" id="BD-API-STRSIZE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Validate values passed to library functions" id="BD-API-VALPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not access iterator out of range" id="BD-CO-ITOUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Use valid references, pointers, and iterators to reference elements of a basic_string" id="BD-CO-STRMOD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not pass empty container iterators to std algorithms as destinations" id="BD-CO-EMPCON" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not compare iterators from different containers" id="BD-CO-ITINVCOMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not modify container while iterating over it" id="BD-CO-ITMOD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-MISC" desc="Always close transactions" id="BD-MISC-TRANS" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-MISC" desc="Prevent calling unsafe functions (custom rule)" id="BD-MISC-DC" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Always catch exceptions" id="BD-PB-EXCEPT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not modify string literals" id="BD-PB-MODSTR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid use before initialization" id="BD-PB-NOTINIT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-PB" desc="Avoid null pointer dereferencing" id="BD-PB-NP" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid buffer overflow due to defining incorrect format limits" id="BD-PB-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow due to reading a not zero terminated string" id="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow when reading from a buffer" id="BD-PB-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow when writing to a buffer" id="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overwriting method parameters" id="BD-PB-POVR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not point to a wrapped object that has been freed" id="BD-PB-WRAPESC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid division by zero" id="BD-PB-ZERO" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid accessing arrays out of bounds" id="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" id="BD-PB-ARRPTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid incorrect shift operations" id="BD-PB-BADSHIFT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Use the correct byte ordering when transferring data between systems" id="BD-PB-BYTEORD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid conditions that always evaluate to the same value" id="BD-PB-CC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Consistently check the returned value of non-void functions" id="BD-PB-CHECKRET" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Always check the returned value of non-void function" id="BD-PB-CHECKRETGEN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not check for null after dereferencing" id="BD-PB-DEREF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not modify the alignment of objects by calling realloc()" id="BD-PB-DNMPTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="The macro EOF should be compared with the unmodified return value from the Standard Library function" id="BD-PB-EOFCOMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly use errno value" id="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define exit handlers" id="BD-PB-EXITHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Reset strings on fgets() or fgetws() failure" id="BD-PB-FGETS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Only use values for fsetpos() that are returned from fgetpos()" id="BD-PB-FSETPOS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid infinite recursion" id="BD-PB-INFREC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not rely on an environment pointer following an operation that may invalidate it" id="BD-PB-INVENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="BD-PB-INVRET" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="The Standard Library function memcmp shall not be used to compare null terminated strings" id="BD-PB-MCCSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid calls to memory-setting functions that can be optimized out by the compiler" id="BD-PB-MEMOPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define new handlers" id="BD-PB-NEWHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid throwing exceptions from functions that are declared not to throw" id="BD-PB-NOEXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Declare non-returning functions with the attribute that specifies that they do not return" id="BD-PB-NORETDECL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Never return from functions that should not return" id="BD-PB-NORETURN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid accessing arrays and pointers out of bounds" id="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="An object shall not be assigned or copied to an overlapping object" id="BD-PB-OVERLAP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not treat arrays polymorphically" id="BD-PB-POLARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not compare two unrelated pointers" id="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not subtract two pointers that do not address elements of the same array" id="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not store an already-owned pointer value in an unrelated smart pointer" id="BD-PB-PTRVALUE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not call putenv() with a pointer to an automatic variable as the argument" id="BD-PB-PUTENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define signal handlers" id="BD-PB-SIGHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not return from a computational exception signal handler" id="BD-PB-SIGRETURN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="BD-PB-STREAMINOUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not subsequently use the argument to std::forward" id="BD-PB-SUBSEQFRWD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not rely on the value of a moved-from object" id="BD-PB-SUBSEQMOVE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid switch with unreachable branches" id="BD-PB-SWITCH" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define terminate handlers" id="BD-PB-TERMHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define unexpected handlers" id="BD-PB-UNEXPHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not use dynamic type of an object under construction" id="BD-PB-VCTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not use dynamic type of an object under destruction" id="BD-PB-VDTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Ensure the size of the variable length array is in valid range" id="BD-PB-VLASIZE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="The same file shall not be opened for read and write access at the same time on different streams" id="BD-PB-WRRDSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid writing to a stream which has been opened as read only" id="BD-PB-WRROS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid integer overflows" id="BD-PB-INTOVERF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Ensure strings are zero terminated" id="BD-PB-NZTS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Ensure the output buffer is large enough when using path manipulation functions" id="BD-PB-PATHBUF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="2;" authUrg="0;" cat="BD-PB" desc="A parameter shall be passed by reference if it can't be NULL" id="BD-PB-REFPARAM" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Always throw the created std::exception object" id="BD-PB-STDEXC" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Suspicious setting of stream flags" id="BD-PB-STREAMFLAGS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Restore stream format" id="BD-PB-STREAMFMT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Use macros for variable arguments correctly" id="BD-PB-VARARGS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="8;" authUrg="0;" cat="BD-PB" desc="Avoid unused values" id="BD-PB-VOVR" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid unreachable methods" id="BD-PB-UCMETH" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Guarantee that container indices are within the valid range" id="BD-PB-VALRANGE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not use recursion" id="BD-PB-RECFUN" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Properly deallocate dynamically allocated resources" id="BD-RES-BADDEALLOC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Ensure deallocation functions guarantee resource freeing" id="BD-RES-BADFREEF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not use resources that have been freed" id="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Allocate sufficient memory to hold an object of a given type" id="BD-RES-INSUFMEM" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not free resources using invalid pointers" id="BD-RES-INVFREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-RES" desc="Ensure resources are freed" id="BD-RES-LEAKS" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Avoid cyclic shared_ptr references" id="BD-RES-CSP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not create variables on the stack above the defined limits" id="BD-RES-STACKLIM" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid tainted data in array indexes" id="BD-SECURITY-ARRAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Prevent buffer overflows from tainted data" id="BD-SECURITY-BUFWRITE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against integer overflow/underflow from tainted data" id="BD-SECURITY-INTOVERF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="BD-SECURITY-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid buffer read overflow from tainted data" id="BD-SECURITY-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid buffer write overflow from tainted data" id="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against command injection" id="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid printing tainted data on the output console" id="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against environment injection" id="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against file name injection" id="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Exclude unsanitized user input from format strings" id="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-SECURITY" desc="Validate potentially tainted data before it is used in the controlling expression of a loop" id="BD-SECURITY-TDLOOP" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against SQL injection" id="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid passing unvalidated binary data to log methods" id="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Properly seed pseudorandom number generators" id="BD-SECURITY-RAND" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Sensitive data should be cleared before being deallocated" id="BD-SECURITY-SENSFREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid passing sensitive data to functions that write to log files" id="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-SECURITY" desc="Validate potentially tainted data before it is used to determine the size of memory allocation" id="BD-SECURITY-TDALLOC" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="BD-SECURITY-XXEXRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid double locking" id="BD-TRS-DLOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions when using fork and file descriptors" id="BD-TRS-FORKFILE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-TRS" desc="Do not abandon unreleased locks" id="BD-TRS-LOCK" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not use global variable with different locks set" id="BD-TRS-MLOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not acquire locks in different order" id="BD-TRS-ORDER" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions while checking for the existence of a symbolic link" id="BD-TRS-SYMLINK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not use blocking functions while holding a lock" id="BD-TRS-TSHL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Declare objects shared between POSIX threads with appropriate storage durations" id="BD-TRS-ARG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Make const member functions thread-safe" id="BD-TRS-CMF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="6;" authUrg="0;" cat="BD-TRS" desc="Variable should be used in context of single critical section" id="BD-TRS-DIFCS" sev="2" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions while accessing files" id="BD-TRS-FRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not join or detach a thread that was previously joined or detached" id="BD-TRS-JOINDETACH" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Use locks to prevent race conditions when modifying bit fields" id="BD-TRS-BITLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not destroy another thread's mutex" id="BD-TRS-DSTRLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not release a lock that has not been acquired" id="BD-TRS-REVLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="2;" authUrg="2;" cat="CDD" desc="Avoid function duplication" id="CDD-DUPM" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="6;" authUrg="6;" cat="CDD" desc="Avoid code duplication" id="CDD-DUPC" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="0;" authUrg="0;" cat="CDD" desc="Avoid duplication of #include directives" id="CDD-DUPI" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="1;" authUrg="1;" cat="CDD" desc="Avoid string literal duplication" id="CDD-DUPS" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="CERT_C-API00" desc="The validity of parameters must be checked inside each function" id="CERT_C-API00-a" origId="CODSTA-86" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-API01" desc="Avoid overflow when writing to a buffer" id="CERT_C-API01-a" origId="BD-PB-OVERFWR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-API01" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-API01-b" origId="SECURITY-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-API02" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-API02-a" origId="SECURITY-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-API02" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="CERT_C-API02-b" origId="SECURITY-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR01" desc="Do not call 'sizeof' on a pointer type" id="CERT_C-ARR01-a" origId="PB-32" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR02" desc="Explicitly specify array bounds in array declarations with initializers" id="CERT_C-ARR02-a" origId="CODSTA-200" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR30" desc="Avoid accessing arrays out of bounds" id="CERT_C-ARR30-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR32" desc="Ensure the size of the variable length array is in valid range" id="CERT_C-ARR32-a" origId="BD-PB-VLASIZE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR36" desc="Do not subtract two pointers that do not address elements of the same array" id="CERT_C-ARR36-a" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR36" desc="Do not compare two unrelated pointers" id="CERT_C-ARR36-b" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR37" desc="Pointer arithmetic shall not be applied to pointers that address variables of non-array type" id="CERT_C-ARR37-a" origId="PB-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid overflow when reading from a buffer" id="CERT_C-ARR38-a" origId="BD-PB-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid overflow when writing to a buffer" id="CERT_C-ARR38-b" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid buffer overflow due to defining incorrect format limits" id="CERT_C-ARR38-c" origId="BD-PB-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_C-ARR38-d" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR39" desc="Avoid accessing arrays out of bounds" id="CERT_C-ARR39-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR39" desc="Pointer arithmetic should not be used" id="CERT_C-ARR39-b" origId="MISRA-101" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR39" desc="Do not add or subtract a scaled integer to a pointer" id="CERT_C-ARR39-c" origId="CODSTA-189" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-CON01" desc="Do not abandon unreleased locks" id="CERT_C-CON01-a" origId="BD-TRS-LOCK" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON02" desc="Do not use the volatile keyword" id="CERT_C-CON02-a" origId="MISRA-046_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON05" desc="Do not use blocking functions while holding a lock" id="CERT_C-CON05-a" origId="BD-TRS-TSHL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-CON30" desc="Ensure resources are freed" id="CERT_C-CON30-a" origId="BD-RES-LEAKS" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON31" desc="Do not destroy another thread's mutex" id="CERT_C-CON31-a" origId="BD-TRS-DSTRLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON31" desc="Do not use resources that have been freed" id="CERT_C-CON31-b" origId="BD-RES-FREE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON31" desc="Do not free resources using invalid pointers" id="CERT_C-CON31-c" origId="BD-RES-INVFREE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON32" desc="Use locks to prevent race conditions when modifying bit fields" id="CERT_C-CON32-a" origId="BD-TRS-BITLOCK" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON33" desc="Avoid using thread-unsafe functions" id="CERT_C-CON33-a" origId="SECURITY-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON34" desc="Declare objects shared between POSIX threads with appropriate storage durations" id="CERT_C-CON34-a" origId="BD-TRS-ARG" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON35" desc="Avoid double locking" id="CERT_C-CON35-a" origId="BD-TRS-DLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON36" desc="Wrap functions that can spuriously wake up in a loop" id="CERT_C-CON36-a" origId="CODSTA-191" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON37" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-CON37-a" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON38" desc="Use the 'cnd_signal()' function with a unique condition variable" id="CERT_C-CON38-a" origId="SECURITY-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON39" desc="Do not join or detach a thread that was previously joined or detached" id="CERT_C-CON39-a" origId="BD-TRS-JOINDETACH" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON40" desc="Do not refer to an atomic variable twice in an expression" id="CERT_C-CON40-a" origId="CODSTA-195" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON41" desc="Wrap functions that can fail spuriously in a loop" id="CERT_C-CON41-a" origId="CODSTA-194" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON43" desc="Do not use global variable with different locks set" id="CERT_C-CON43-a" origId="BD-TRS-MLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CERT_C-DCL00" desc="Declare parameters or local variable as const whenever possible" id="CERT_C-DCL00-a" origId="CODSTA-CPP-53" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL01" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="CERT_C-DCL01-a" origId="MISRA2004-5_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL01" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="CERT_C-DCL01-b" origId="MISRA2004-5_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL02" desc="Use visually distinct identifiers" id="CERT_C-DCL02-a" origId="NAMING-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="CERT_C-DCL04" desc="Each variable should be declared in a separate declaration statement" id="CERT_C-DCL04-a" origId="FORMAT-33" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL05" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="CERT_C-DCL05-a" origId="MISRA2004-16_7_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL06" desc="&quot;#define&quot; or enum constants should be used instead of hard coded values whenever possible" id="CERT_C-DCL06-a" origId="CODSTA-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL10" desc="The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" id="CERT_C-DCL10-a" origId="PB-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function" id="CERT_C-DCL11-a" origId="PB-45" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-DCL11-b" origId="PB-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function" id="CERT_C-DCL11-c" origId="PB-47" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-DCL11-d" origId="PB-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-DCL11-e" origId="PB-49" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" id="CERT_C-DCL11-f" origId="PB-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL12" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="CERT_C-DCL12-a" origId="CODSTA-115" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CERT_C-DCL13" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="CERT_C-DCL13-a" origId="MISRA2004-16_7" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="CERT_C-DCL15" desc="Objects or functions with external linkage shall be declared in a header file" id="CERT_C-DCL15-a" origId="MISRA-023" sev="3" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL16" desc="Use capital 'L' instead of lowercase 'l' to indicate long" id="CERT_C-DCL16-a" origId="PORT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL18" desc="Octal and hexadecimal escape sequences shall be terminated" id="CERT_C-DCL18-a" origId="CODSTA-117" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL18" desc="Octal constants (other than zero) shall not be used" id="CERT_C-DCL18-b" origId="MISRA2004-7_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL19" desc="Declare variables as locally as possible" id="CERT_C-DCL19-a" origId="OPT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL20" desc="The number of arguments passed to a function shall match the number of parameters" id="CERT_C-DCL20-a" origId="MISRA2004-16_6" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="8;" authUrg="0;" cat="CERT_C-DCL22" desc="Avoid unused values" id="CERT_C-DCL22-a" origId="BD-PB-VOVR" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL30" desc="The address of an object with automatic storage shall not be returned from a function" id="CERT_C-DCL30-a" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL30" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="CERT_C-DCL30-b" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL31" desc="All functions shall be declared before use" id="CERT_C-DCL31-a" origId="MISRA-020" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL36" desc="Identifiers shall not simultaneously have both internal and external linkage in the same translation unit" id="CERT_C-DCL36-a" origId="MISRA-024" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL37" desc="Do not #define or #undef identifiers with names which start with underscore" id="CERT_C-DCL37-a" origId="MISRA2004-20_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL38" desc="The final member of a structure should not be an array of size '0' or '1'" id="CERT_C-DCL38-a" origId="CODSTA-192" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL39" desc="A pointer to a structure should not be passed to a function that can copy data to the user space" id="CERT_C-DCL39-a" origId="SECURITY-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="CERT_C-DCL40" desc="All declarations of an object or function shall have compatible types" id="CERT_C-DCL40-a" origId="GLOBAL-COMPATDECLS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL40" desc="If objects or functions are declared more than once their types shall be compatible" id="CERT_C-DCL40-b" origId="MISRA2004-8_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL41" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="CERT_C-DCL41-a" origId="MISRA2004-15_0_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV01" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="CERT_C-ENV01-a" origId="SECURITY-07" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV01" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-ENV01-b" origId="SECURITY-12" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ENV01" desc="Avoid overflow when writing to a buffer" id="CERT_C-ENV01-c" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV02" desc="Usage of system properties (environment variables) should be restricted" id="CERT_C-ENV02-a" origId="SECURITY-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV30" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="CERT_C-ENV30-a" origId="CODSTA-185_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ENV31" desc="Do not rely on an environment pointer following an operation that may invalidate it" id="CERT_C-ENV31-a" origId="BD-PB-INVENV" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ENV32" desc="Properly define exit handlers" id="CERT_C-ENV32-a" origId="BD-PB-EXITHAN" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV33" desc="Do not call the 'system()' function from the 'stdlib.h' or 'cstdlib' library with an argument other than '0' (null pointer)" id="CERT_C-ENV33-a" origId="SECURITY-48" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ENV34" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="CERT_C-ENV34-a" origId="BD-PB-INVRET" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR01" desc="The error indicator 'errno' shall not be used" id="CERT_C-ERR01-a" origId="MISRA2004-20_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-ERR02" desc="The Standard Library input/output functions shall not be used" id="CERT_C-ERR02-a" origId="CODSTA-110" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR04" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR04-a" origId="PB-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR04" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR04-b" origId="PB-75_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR04" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR04-c" origId="PB-75_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR05" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR05-a" origId="PB-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR05" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR05-b" origId="PB-75_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR05" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR05-c" origId="PB-75_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR06" desc="Do not use assertions" id="CERT_C-ERR06-a" origId="CODSTA-199" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-ERR07" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="CERT_C-ERR07-a" origId="MISRA2004-20_10" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-ERR07" desc="The Standard Library input/output functions shall not be used" id="CERT_C-ERR07-b" origId="CODSTA-110" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ERR30" desc="Properly use errno value" id="CERT_C-ERR30-a" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR30" desc="Provide error handling for file opening errors right next to the call to fopen" id="CERT_C-ERR30-b" origId="MRM-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ERR32" desc="Properly use errno value" id="CERT_C-ERR32-a" origId="BD-PB-ERRNO" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-ERR33" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-ERR33-a" origId="CODSTA-122_a" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR33" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-ERR33-b" origId="CODSTA-122_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-ERR33" desc="Avoid null pointer dereferencing" id="CERT_C-ERR33-c" origId="BD-PB-NP" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ERR33" desc="Always check the returned value of non-void function" id="CERT_C-ERR33-d" origId="BD-PB-CHECKRETGEN" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-ERR34" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="CERT_C-ERR34-a" origId="MISRA2004-20_10" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP00" desc="Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used" id="CERT_C-EXP00-a" origId="CODSTA-97" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP02" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="CERT_C-EXP02-a" origId="MISRA2004-12_4_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP05" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="CERT_C-EXP05-a" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP08" desc="Pointer arithmetic should not be used" id="CERT_C-EXP08-a" origId="MISRA-101" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP08" desc="Avoid accessing arrays out of bounds" id="CERT_C-EXP08-b" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP10" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="CERT_C-EXP10-a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP10" desc="Don't write code that depends on the order of evaluation of function arguments" id="CERT_C-EXP10-b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP10" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="CERT_C-EXP10-c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP10" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="CERT_C-EXP10-d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-EXP12" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-EXP12-a" origId="CODSTA-122_a" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP12" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-EXP12-b" origId="CODSTA-122_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP14" desc="Avoid mixing arithmetic of different precisions in the same expression" id="CERT_C-EXP14-a" origId="MISRA-043_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP15" desc="Suspicious use of semicolon" id="CERT_C-EXP15-a" origId="CODSTA-57" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP16" desc="Function address should not be compared to zero" id="CERT_C-EXP16-a" origId="PB-63" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP19" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="CERT_C-EXP19-a" origId="MISRA2004-14_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP20" desc="Avoid comparing values with TRUE macro/enum constant using equality operators (&quot;==&quot;, &quot;!=&quot;)" id="CERT_C-EXP20-a" origId="CODSTA-60" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="CERT_C-EXP30-a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="Don't write code that depends on the order of evaluation of function arguments" id="CERT_C-EXP30-b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="CERT_C-EXP30-c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="CERT_C-EXP30-d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP32" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="CERT_C-EXP32-a" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP33" desc="Avoid use before initialization" id="CERT_C-EXP33-a" origId="BD-PB-NOTINIT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-EXP34" desc="Avoid null pointer dereferencing" id="CERT_C-EXP34-a" origId="BD-PB-NP" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP35" desc="Do not access an array in the result of a function call" id="CERT_C-EXP35-a" origId="CODSTA-196" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP36" desc="A cast should not be performed between a pointer to object type and a different pointer to object type" id="CERT_C-EXP36-a" origId="MISRA2004-11_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP37" desc="Identifiers shall be given for all of the parameters in a function prototype declaration" id="CERT_C-EXP37-a" origId="MISRA2004-16_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP37" desc="Function types shall have named parameters" id="CERT_C-EXP37-b" origId="CODSTA-158" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP37" desc="Function types shall be in prototype form" id="CERT_C-EXP37-c" origId="CODSTA-159" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP37" desc="Functions shall always have visible prototype at the function call" id="CERT_C-EXP37-d" origId="MISRA-071_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-EXP39" desc="There shall be no implicit conversions from integral to floating type" id="CERT_C-EXP39-a" origId="MISRA2004-10_1_b" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="A cast should not be performed between a pointer to object type and a different pointer to object type" id="CERT_C-EXP39-b" origId="MISRA2004-11_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid accessing arrays and pointers out of bounds" id="CERT_C-EXP39-c" origId="BD-PB-OVERFARRAY" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="CERT_C-EXP39-d" origId="BD-SECURITY-OVERFFMT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid buffer read overflow from tainted data" id="CERT_C-EXP39-e" origId="BD-SECURITY-OVERFRD" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid buffer write overflow from tainted data" id="CERT_C-EXP39-f" origId="BD-SECURITY-OVERFWR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP40" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="CERT_C-EXP40-a" origId="MISRA2004-11_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP42" desc="Don't memcpy or memcmp non-PODs" id="CERT_C-EXP42-a" origId="MRM-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP43" desc="The restrict type qualifier shall not be used" id="CERT_C-EXP43-a" origId="CODSTA-121" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP44" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="CERT_C-EXP44-a" origId="MISRA2004-12_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP44" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="CERT_C-EXP44-b" origId="MISRA2004-12_3_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP45" desc="Assignment operators shall not be used in conditions without brackets" id="CERT_C-EXP45-b" origId="PB-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP45" desc="Assignment operators shall not be used in expressions that yield a Boolean value" id="CERT_C-EXP45-d" origId="MISRA2004-13_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP46" desc="Expressions that are effectively Boolean should not be used as operands to operators other than (&amp;&amp;, ||, !, =, ==, !=, ?:)" id="CERT_C-EXP46-b" origId="MISRA2004-12_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP47" desc="Do not call va_arg with an argument of the incorrect type" id="CERT_C-EXP47-a" origId="PB-72" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO01" desc="Don't use chmod(), chown(), chgrp()" id="CERT_C-FIO01-a" origId="SECURITY-27" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO01" desc="Usage of functions prone to race is not allowed" id="CERT_C-FIO01-b" origId="SECURITY-19" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO21" desc="Usage of functions prone to race is not allowed" id="CERT_C-FIO21-a" origId="SECURITY-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-FIO22" desc="Ensure resources are freed" id="CERT_C-FIO22-a" origId="BD-RES-LEAKS" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO24" desc="Avoid race conditions while accessing files" id="CERT_C-FIO24-a" origId="BD-TRS-FRC" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO30" desc="Avoid calling functions printf/wprintf with only one argument other than string constant" id="CERT_C-FIO30-a" origId="SECURITY-05" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO30" desc="Avoid using functions fprintf/fwprintf with only two parameters, when second parameter is a variable" id="CERT_C-FIO30-b" origId="SECURITY-08" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO30" desc="Never use unfiltered data from an untrusted user as the format parameter" id="CERT_C-FIO30-c" origId="SECURITY-36" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO32" desc="Protect against file name injection" id="CERT_C-FIO32-a" origId="BD-SECURITY-TDFNAMES" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO34" desc="The macro EOF should be compared with the unmodified return value from the Standard Library function" id="CERT_C-FIO34-a" origId="BD-PB-EOFCOMP" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO37" desc="Avoid accessing arrays out of bounds" id="CERT_C-FIO37-a" origId="BD-PB-ARRAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO38" desc="A pointer to a FILE object shall not be dereferenced" id="CERT_C-FIO38-a" origId="CODSTA-166_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO39" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="CERT_C-FIO39-a" origId="BD-PB-STREAMINOUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO40" desc="Reset strings on fgets() or fgetws() failure" id="CERT_C-FIO40-a" origId="BD-PB-FGETS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO41" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="CERT_C-FIO41-a" origId="MISRA2004-12_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO41" desc="Don't write code that depends on the order of evaluation of function arguments" id="CERT_C-FIO41-b" origId="MISRA2004-12_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO41" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="CERT_C-FIO41-c" origId="MISRA2004-12_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO41" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="CERT_C-FIO41-d" origId="MISRA2004-12_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO41" desc="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects" id="CERT_C-FIO41-e" origId="CODSTA-123" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-FIO42" desc="Ensure resources are freed" id="CERT_C-FIO42-a" origId="BD-RES-LEAKS" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO44" desc="Only use values for fsetpos() that are returned from fgetpos()" id="CERT_C-FIO44-a" origId="BD-PB-FSETPOS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO45" desc="Avoid race conditions while accessing files" id="CERT_C-FIO45-a" origId="BD-TRS-FRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO46" desc="Do not use resources that have been freed" id="CERT_C-FIO46-a" origId="BD-RES-FREE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function" id="CERT_C-FIO47-a" origId="PB-45" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-FIO47-b" origId="PB-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function" id="CERT_C-FIO47-c" origId="PB-47" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-FIO47-d" origId="PB-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-FIO47-e" origId="PB-49" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" id="CERT_C-FIO47-f" origId="PB-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP00" desc="Floating-point expressions shall not be tested for equality or inequality" id="CERT_C-FLP00-a" origId="MISRA2004-13_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP02" desc="Floating-point expressions shall not be tested for equality or inequality" id="CERT_C-FLP02-a" origId="MISRA2004-13_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FLP03" desc="Avoid division by zero" id="CERT_C-FLP03-a" origId="BD-PB-ZERO" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP03" desc="Avoid implicit conversions from wider to narrower floating type" id="CERT_C-FLP03-b" origId="MISRA2004-10_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP03" desc="Avoid implicit conversions from narrower to wider floating type" id="CERT_C-FLP03-c" origId="MISRA2004-10_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP03" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="CERT_C-FLP03-d" origId="MISRA2004-10_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP06" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="CERT_C-FLP06-a" origId="MISRA-043_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP06" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="CERT_C-FLP06-b" origId="MISRA-043_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP30" desc="Do not use floating point variables as loop counters" id="CERT_C-FLP30-a" origId="MISRA-065" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FLP32" desc="Validate values passed to library functions" id="CERT_C-FLP32-a" origId="BD-API-VALPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP34" desc="Avoid implicit conversions from wider to narrower floating type" id="CERT_C-FLP34-a" origId="MISRA2004-10_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP34" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="CERT_C-FLP34-b" origId="MISRA2004-10_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP36" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="CERT_C-FLP36-a" origId="MISRA-043_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP36" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="CERT_C-FLP36-b" origId="MISRA-043_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP37" desc="Do not use object representations to compare floating-point values" id="CERT_C-FLP37-c" origId="CODSTA-190" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT02" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="CERT_C-INT02-a" origId="MISRA-043" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT02" desc="Avoid mixing arithmetic of different precisions in the same expression" id="CERT_C-INT02-b" origId="MISRA-043_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT04" desc="Protect against integer overflow/underflow from tainted data" id="CERT_C-INT04-a" origId="BD-SECURITY-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT04" desc="Avoid buffer read overflow from tainted data" id="CERT_C-INT04-b" origId="BD-SECURITY-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT04" desc="Avoid buffer write overflow from tainted data" id="CERT_C-INT04-c" origId="BD-SECURITY-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-INT05" desc="Avoid using unsafe string functions that do not check bounds" id="CERT_C-INT05-a" origId="SECURITY-13" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT07" desc="The plain char type shall be used only for the storage and use of character values" id="CERT_C-INT07-a" origId="MISRA2004-6_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT07" desc="signed and unsigned char type shall be used only for the storage and use of numeric values" id="CERT_C-INT07-b" origId="MISRA2004-6_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT08" desc="Avoid integer overflows" id="CERT_C-INT08-a" origId="BD-PB-INTOVERF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT09" desc="In an enumerator list, the &quot;=&quot; construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised" id="CERT_C-INT09-a" origId="MISRA2004-9_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT10" desc="Avoid accessing arrays out of bounds" id="CERT_C-INT10-a" origId="BD-PB-ARRAY" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT12" desc="Bit fields shall only be defined to be of type unsigned int or signed int" id="CERT_C-INT12-a" origId="MISRA2004-6_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT13" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="CERT_C-INT13-a" origId="CODSTA-63" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT15" desc="Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types" id="CERT_C-INT15-a" origId="PB-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT16" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="CERT_C-INT16-a" origId="CODSTA-63" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT18" desc="Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" id="CERT_C-INT18-a" origId="PB-65" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT18" desc="Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type" id="CERT_C-INT18-b" origId="PB-65_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT18" desc="Avoid possible integer overflow in expressions in which the result is cast to a wider integer type" id="CERT_C-INT18-c" origId="MISRA-048_a" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT30" desc="Avoid integer overflows" id="CERT_C-INT30-a" origId="BD-PB-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT30" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="CERT_C-INT30-b" origId="PB-66_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT30" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="CERT_C-INT30-c" origId="PB-66_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="CERT_C-INT31-a" origId="CODSTA-161_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="CERT_C-INT31-b" origId="CODSTA-161_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="CERT_C-INT31-c" origId="CODSTA-161_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="CERT_C-INT31-d" origId="CODSTA-161_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="CERT_C-INT31-e" origId="CODSTA-161_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" id="CERT_C-INT31-f" origId="CODSTA-161_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="CERT_C-INT31-g" origId="CODSTA-161_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="CERT_C-INT31-h" origId="CODSTA-163_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="CERT_C-INT31-i" origId="CODSTA-163_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="CERT_C-INT31-j" origId="CODSTA-164_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="The second and third operands of the ternary operator shall have the same essential type category" id="CERT_C-INT31-k" origId="CODSTA-164_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="CERT_C-INT31-l" origId="CODSTA-157" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="CERT_C-INT31-m" origId="CODSTA-156_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="CERT_C-INT31-n" origId="CODSTA-156_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="Avoid integer overflows" id="CERT_C-INT31-o" origId="BD-PB-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT32" desc="Avoid integer overflows" id="CERT_C-INT32-a" origId="BD-PB-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT32" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="CERT_C-INT32-b" origId="PB-66_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT32" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="CERT_C-INT32-c" origId="PB-66_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT33" desc="Avoid division by zero" id="CERT_C-INT33-a" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT34" desc="Avoid incorrect shift operations" id="CERT_C-INT34-a" origId="BD-PB-BADSHIFT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT35" desc="Use correct integer precisions when checking the right hand operand of the shift operator" id="CERT_C-INT35-a" origId="SECURITY-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT36" desc="A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t'" id="CERT_C-INT36-b" origId="CODSTA-127_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-MEM00" desc="Do not allocate memory and expect that someone else will deallocate it later" id="CERT_C-MEM00-a" origId="MRM-18" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM00" desc="Do not allocate memory and expect that someone else will deallocate it later" id="CERT_C-MEM00-b" origId="MRM-19" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM00" desc="Do not allocate memory and expect that someone else will deallocate it later" id="CERT_C-MEM00-c" origId="MRM-20" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM00" desc="Do not use resources that have been freed" id="CERT_C-MEM00-d" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-MEM00" desc="Ensure resources are freed" id="CERT_C-MEM00-e" origId="BD-RES-LEAKS" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM01" desc="Do not use resources that have been freed" id="CERT_C-MEM01-a" origId="BD-RES-FREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM01" desc="Always assign a new value to an expression that points to deallocated memory" id="CERT_C-MEM01-b" origId="MRM-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM01" desc="Always assign a new value to global or member variable that points to deallocated memory" id="CERT_C-MEM01-c" origId="MRM-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM01" desc="Always assign a new value to parameter or local variable that points to deallocated memory" id="CERT_C-MEM01-d" origId="MRM-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM02" desc="Assignment operator should have operands of compatible types" id="CERT_C-MEM02-a" origId="PB-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM02" desc="Do not assign function return value to a variable of incompatible type" id="CERT_C-MEM02-b" origId="PB-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM03" desc="Sensitive data should be cleared before being deallocated" id="CERT_C-MEM03-a" origId="BD-SECURITY-SENSFREE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM04" desc="The validity of values passed to library functions shall be checked" id="CERT_C-MEM04-a" origId="MISRA2004-20_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM05" desc="Do not use recursion" id="CERT_C-MEM05-a" origId="BD-PB-RECFUN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM05" desc="Ensure the size of the variable length array is in valid range" id="CERT_C-MEM05-b" origId="BD-PB-VLASIZE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM07" desc="The validity of values passed to library functions shall be checked" id="CERT_C-MEM07-a" origId="MISRA2004-20_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-MEM12" desc="Ensure resources are freed" id="CERT_C-MEM12-a" origId="BD-RES-LEAKS" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM30" desc="Do not use resources that have been freed" id="CERT_C-MEM30-a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-MEM31" desc="Ensure resources are freed" id="CERT_C-MEM31-a" origId="BD-RES-LEAKS" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM33" desc="Allocate structures containing a flexible array member dynamically" id="CERT_C-MEM33-a" origId="CODSTA-193" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM33" desc="Do not copy instances of structures containing a flexible array member" id="CERT_C-MEM33-b" origId="PB-71" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM34" desc="Do not free resources using invalid pointers" id="CERT_C-MEM34-a" origId="BD-RES-INVFREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM35" desc="Do not use sizeof operator on pointer type to specify the size of the memory to be allocated via 'malloc', 'calloc' or 'realloc' function" id="CERT_C-MEM35-a" origId="MRM-45" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM36" desc="Do not modify the alignment of objects by calling realloc()" id="CERT_C-MEM36-a" origId="BD-PB-DNMPTR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC01" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="CERT_C-MSC01-a" origId="MISRA2004-14_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC01" desc="The final clause of a switch statement shall be the default clause" id="CERT_C-MSC01-b" origId="MISRA2004-15_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC04" desc="The character sequence /* shall not be used within a C-style comment" id="CERT_C-MSC04-a" origId="MISRA2004-2_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC04" desc="The character sequence // shall not be used within a C-style comment" id="CERT_C-MSC04-b" origId="COMMENT-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC04" desc="The character sequence /* shall not be used within a C++-style comment" id="CERT_C-MSC04-c" origId="COMMENT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC04" desc="Line-splicing shall not be used in // comments" id="CERT_C-MSC04-d" origId="COMMENT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code in &quot;else&quot; block" id="CERT_C-MSC07-a" origId="MISRA2004-14_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="CERT_C-MSC07-b" origId="MISRA2004-14_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="CERT_C-MSC07-c" origId="MISRA2004-14_1_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code in switch statement" id="CERT_C-MSC07-d" origId="MISRA2004-14_1_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code in 'for' loop" id="CERT_C-MSC07-e" origId="MISRA2004-14_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="CERT_C-MSC07-f" origId="MISRA2004-14_1_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="CERT_C-MSC07-g" origId="MISRA2004-14_1_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="Avoid switch with unreachable branches" id="CERT_C-MSC07-h" origId="BD-PB-SWITCH" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC09" desc="Only use characters defined in ISO C standard" id="CERT_C-MSC09-a" origId="MISRA-005" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC11" desc="Assert liberally to document internal assumptions and invariants" id="CERT_C-MSC11-a" origId="CODSTA-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code in &quot;else&quot; block" id="CERT_C-MSC12-a" origId="MISRA2004-14_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="CERT_C-MSC12-b" origId="MISRA2004-14_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="CERT_C-MSC12-c" origId="MISRA2004-14_1_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code in switch statement" id="CERT_C-MSC12-d" origId="MISRA2004-14_1_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code in 'for' loop" id="CERT_C-MSC12-e" origId="MISRA2004-14_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="CERT_C-MSC12-f" origId="MISRA2004-14_1_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="CERT_C-MSC12-g" origId="MISRA2004-14_1_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="Avoid switch with unreachable branches" id="CERT_C-MSC12-h" origId="BD-PB-SWITCH" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CERT_C-MSC13" desc="Avoid unnecessary local variables" id="CERT_C-MSC13-a" origId="OPT-06" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC14" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="CERT_C-MSC14-a" origId="PB-73" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC15" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="CERT_C-MSC15-a" origId="PB-73" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC17" desc="Missing break statement between cases in a switch statement" id="CERT_C-MSC17-a" origId="CODSTA-149" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC19" desc="Avoid accessing arrays out of bounds" id="CERT_C-MSC19-a" origId="BD-PB-ARRAY" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-MSC19" desc="Avoid null pointer dereferencing" id="CERT_C-MSC19-b" origId="BD-PB-NP" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC22" desc="The setjmp macro and the longjmp function shall not be used" id="CERT_C-MSC22-a" origId="MISRA2004-20_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-MSC24" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="CERT_C-MSC24-a" origId="MISRA2004-20_10" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC24" desc="The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-MSC24-b" origId="SECURITY-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC24" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-MSC24-c" origId="SECURITY-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC24" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="CERT_C-MSC24-d" origId="SECURITY-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC30" desc="Do not use the rand() function for generating pseudorandom numbers" id="CERT_C-MSC30-a" origId="SECURITY-02_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC32" desc="Properly seed pseudorandom number generators" id="CERT_C-MSC32-d" origId="BD-SECURITY-RAND" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC33" desc="Avoid functions which use time from standard C library" id="CERT_C-MSC33-a" origId="SECURITY-01" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC37" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="CERT_C-MSC37-a" origId="MISRA2004-16_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC38" desc="A function-like macro shall not be invoked without all of its arguments" id="CERT_C-MSC38-a" origId="MISRA2004-19_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC39" desc="Use macros for variable arguments correctly" id="CERT_C-MSC39-a" origId="BD-PB-VARARGS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC40" desc="An inline definition of a function with external linkage shall not contain definitions and uses of static objects" id="CERT_C-MSC40-a" origId="CODSTA-202" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="2;" cat="CERT_C-MSC41" desc="Do not hard code string literals" id="CERT_C-MSC41-a" origId="CODSTA-203" sev="1" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS30" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_C-POS30-a" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS30" desc="The values returned by functions 'read' and 'readlink' shall be used" id="CERT_C-POS30-b" origId="CODSTA-144" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS30" desc="Use of possibly not null-terminated string with functions expecting null-terminated string" id="CERT_C-POS30-c" origId="CODSTA-145" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS33" desc="Avoid using the 'vfork()' function" id="CERT_C-POS33-a" origId="SECURITY-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS34" desc="Usage of system properties (environment variables) should be restricted" id="CERT_C-POS34-a" origId="SECURITY-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS34" desc="Do not call putenv() with a pointer to an automatic variable as the argument" id="CERT_C-POS34-b" origId="BD-PB-PUTENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS35" desc="Avoid race conditions while checking for the existence of a symbolic link" id="CERT_C-POS35-b" origId="BD-TRS-SYMLINK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS36" desc="Observe correct revocation order while relinquishing privileges" id="CERT_C-POS36-a" origId="SECURITY-44" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS37" desc="Ensure that privilege relinquishment is successful" id="CERT_C-POS37-a" origId="SECURITY-45" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS38" desc="Avoid race conditions when using fork and file descriptors" id="CERT_C-POS38-a" origId="BD-TRS-FORKFILE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS39" desc="Use the correct byte ordering when transferring data between systems" id="CERT_C-POS39-a" origId="BD-PB-BYTEORD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS44" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-POS44-a" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS47" desc="The function 'pthread_setcanceltype()' should not be called with 'PTHREAD_CANCEL_ASYNCHRONOUS' argument" id="CERT_C-POS47-a" origId="SECURITY-43" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS48" desc="Do not destroy another thread's mutex" id="CERT_C-POS48-a" origId="BD-TRS-DSTRLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS48" desc="Do not release a lock that has not been acquired" id="CERT_C-POS48-b" origId="BD-TRS-REVLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS49" desc="Use locks to prevent race conditions when modifying bit fields" id="CERT_C-POS49-a" origId="BD-TRS-BITLOCK" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS50" desc="Declare objects shared between POSIX threads with appropriate storage durations" id="CERT_C-POS50-a" origId="BD-TRS-ARG" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS51" desc="Do not acquire locks in different order" id="CERT_C-POS51-a" origId="BD-TRS-ORDER" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS52" desc="Do not use blocking functions while holding a lock" id="CERT_C-POS52-a" origId="BD-TRS-TSHL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="CERT_C-POS53" desc="Do not use more than one mutex for concurrent waiting operations on a condition variable" id="CERT_C-POS53-a" origId="GLOBAL-CONDMUTEXVAR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-POS54" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-POS54-a" origId="CODSTA-122_a" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS54" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-POS54-b" origId="CODSTA-122_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-POS54" desc="Avoid null pointer dereferencing" id="CERT_C-POS54-c" origId="BD-PB-NP" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CERT_C-PRE00" desc="A function should be used in preference to a function-like macro" id="CERT_C-PRE00-a" origId="MISRA2004-19_7" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CERT_C-PRE01" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="CERT_C-PRE01-a" origId="MISRA2004-19_10" sev="1" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CERT_C-PRE02" desc="Enclose in parentheses whole definition of a function-like macro" id="CERT_C-PRE02-a" origId="MISRA-096" sev="1" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE06" desc="Use multiple include guards" id="CERT_C-PRE06-a" origId="PFO-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE07" desc="Trigraphs shall not be used" id="CERT_C-PRE07-a" origId="MISRA2004-4_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE30" desc="Avoid token concatenation that may produce universal character names" id="CERT_C-PRE30-a" origId="PREPROC-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE31" desc="Assertions should not contain assignments, increment, or decrement operators" id="CERT_C-PRE31-b" origId="CODSTA-150" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE31" desc="Assertions should not contain function calls nor function-like macro calls" id="CERT_C-PRE31-c" origId="CODSTA-150_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE31" desc="Avoid side effects in arguments to unsafe macros" id="CERT_C-PRE31-d" origId="CODSTA-150_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE32" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="CERT_C-PRE32-a" origId="MISRA2004-19_9" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-SIG00" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-SIG00-a" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-SIG01" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-SIG01-a" origId="MISRA2004-20_8_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-SIG02" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-SIG02-a" origId="MISRA2004-20_8_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG30" desc="Properly define signal handlers" id="CERT_C-SIG30-a" origId="BD-PB-SIGHAN" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG31" desc="Properly define signal handlers" id="CERT_C-SIG31-a" origId="BD-PB-SIGHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG34" desc="Properly define signal handlers" id="CERT_C-SIG34-a" origId="BD-PB-SIGHAN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG35" desc="Do not return from a computational exception signal handler" id="CERT_C-SIG35-a" origId="BD-PB-SIGRETURN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR00" desc="The plain char type shall be used only for the storage and use of character values" id="CERT_C-STR00-a" origId="MISRA2004-6_1" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR02" desc="Protect against command injection" id="CERT_C-STR02-a" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR02" desc="Protect against file name injection" id="CERT_C-STR02-b" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR02" desc="Protect against SQL injection" id="CERT_C-STR02-c" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR03" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_C-STR03-a" origId="BD-PB-OVERFNZT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR04" desc="The plain char type shall be used only for the storage and use of character values" id="CERT_C-STR04-a" origId="MISRA2004-6_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR05" desc="A string literal shall not be modified" id="CERT_C-STR05-a" origId="PB-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-STR07" desc="Avoid using unsafe string functions that do not check bounds" id="CERT_C-STR07-a" origId="SECURITY-13" sev="1" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR09" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary &amp; operator" id="CERT_C-STR09-a" origId="CODSTA-69" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR10" desc="Narrow and wide string literals shall not be concatenated" id="CERT_C-STR10-a" origId="PB-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR11" desc="Do not specify the bound of a character array initialized with a string literal" id="CERT_C-STR11-a" origId="CODSTA-197" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR30" desc="A string literal shall not be modified" id="CERT_C-STR30-a" origId="PB-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR30" desc="Do not modify string literals" id="CERT_C-STR30-b" origId="BD-PB-MODSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Avoid accessing arrays out of bounds" id="CERT_C-STR31-a" origId="BD-PB-ARRAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Avoid overflow when writing to a buffer" id="CERT_C-STR31-b" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Prevent buffer overflows from tainted data" id="CERT_C-STR31-c" origId="BD-SECURITY-BUFWRITE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Avoid buffer write overflow from tainted data" id="CERT_C-STR31-d" origId="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-STR31-e" origId="SECURITY-12" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR32" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_C-STR32-a" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR34" desc="Cast characters to unsigned char before assignment to larger integer sizes" id="CERT_C-STR34-b" origId="CODSTA-187_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR34" desc="An expressions of the 'signed char' type should not be used as an array index" id="CERT_C-STR34-c" origId="CODSTA-187_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR34" desc="Cast characters to unsigned char before converting to larger integer sizes" id="CERT_C-STR34-d" origId="CODSTA-187_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR37" desc="Do not pass incorrect values to ctype.h library functions" id="CERT_C-STR37-a" origId="BD-API-CTYPE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR38" desc="Do not confuse narrow and wide character strings and functions" id="CERT_C-STR38-a" origId="CODSTA-188" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-WIN00" desc="Use care to ensure that LoadLibrary() will load the correct library" id="CERT_C-WIN00-a" origId="SECURITY-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-WIN30" desc="Ensure resources are freed" id="CERT_C-WIN30-a" origId="BD-RES-LEAKS" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CON50" desc="Do not destroy another thread's mutex" id="CERT_CPP-CON50-a" origId="BD-TRS-DSTRLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CON51" desc="Do not call lock() directly on a mutex" id="CERT_CPP-CON51-a" origId="CODSTA-MCPP-21" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CON52" desc="Use locks to prevent race conditions when modifying bit fields" id="CERT_CPP-CON52-a" origId="BD-TRS-BITLOCK" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CON53" desc="Do not acquire locks in different order" id="CERT_CPP-CON53-a" origId="BD-TRS-ORDER" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CON54" desc="Wrap functions that can spuriously wake up in a loop" id="CERT_CPP-CON54-a" origId="CODSTA-191" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CON55" desc="Do not use the 'notify_one()' function when multiple threads are waiting on the same condition variable" id="CERT_CPP-CON55-a" origId="SECURITY-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CON56" desc="Avoid double locking" id="CERT_CPP-CON56-a" origId="BD-TRS-DLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR50" desc="Guarantee that container indices are within the valid range" id="CERT_CPP-CTR50-a" origId="BD-PB-VALRANGE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR51" desc="Do not modify container while iterating over it" id="CERT_CPP-CTR51-a" origId="BD-CO-ITMOD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR52" desc="Do not pass empty container iterators to std algorithms as destinations" id="CERT_CPP-CTR52-a" origId="BD-CO-EMPCON" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR53" desc="Do not use an iterator range that isn't really a range" id="CERT_CPP-CTR53-a" origId="STL-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR53" desc="Do not compare iterators from different containers" id="CERT_CPP-CTR53-b" origId="BD-CO-ITINVCOMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR54" desc="Do not compare iterators from different containers" id="CERT_CPP-CTR54-a" origId="BD-CO-ITINVCOMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR54" desc="Do not compare two unrelated pointers" id="CERT_CPP-CTR54-b" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR54" desc="Do not subtract two pointers that do not address elements of the same array" id="CERT_CPP-CTR54-c" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR55" desc="Do not add or subtract a constant with a value greater than one from an iterator" id="CERT_CPP-CTR55-a" origId="PB-74" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR56" desc="Don't treat arrays polymorphically" id="CERT_CPP-CTR56-a" origId="PB-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR56" desc="A pointer to an array of derived class objects should not be converted to a base class pointer" id="CERT_CPP-CTR56-b" origId="PB-57" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR56" desc="Do not treat arrays polymorphically" id="CERT_CPP-CTR56-c" origId="BD-PB-POLARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR57" desc="For associative containers never use comparison function returning true for equal values" id="CERT_CPP-CTR57-a" origId="STL-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR58" desc="Make predicates const pure functions" id="CERT_CPP-CTR58-a" origId="STL-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL50" desc="Functions shall not be defined with a variable number of arguments" id="CERT_CPP-DCL50-a" origId="MISRA2004-16_1" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="Do not #define or #undef identifiers with names which start with underscore" id="CERT_CPP-DCL51-a" origId="MISRA2004-20_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="Do not redefine reserved words" id="CERT_CPP-DCL51-b" origId="MISRA2004-20_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="Do not #define nor #undef identifier 'defined'" id="CERT_CPP-DCL51-c" origId="MISRA2004-20_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="The names of standard library macros, objects and functions shall not be reused" id="CERT_CPP-DCL51-d" origId="MISRA2004-20_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="The names of standard library macros, objects and functions shall not be reused (C90)" id="CERT_CPP-DCL51-e" origId="MISRA2004-20_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="The names of standard library macros, objects and functions shall not be reused (C99)" id="CERT_CPP-DCL51-f" origId="MISRA2004-20_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL52" desc="Never qualify a reference type with 'const' or 'volatile'" id="CERT_CPP-DCL52-a" origId="CODSTA-CPP-97" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL53" desc="Parameter names in function declarations should not be enclosed in parentheses" id="CERT_CPP-DCL53-a" origId="FORMAT-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL53" desc="Local variable names in variable declarations should not be enclosed in parentheses" id="CERT_CPP-DCL53-b" origId="FORMAT-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL53" desc="Avoid function declarations that are syntactically ambiguous" id="CERT_CPP-DCL53-c" origId="PB-79" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL54" desc="Always provide new and delete together" id="CERT_CPP-DCL54-a" origId="MRM-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL55" desc="A pointer to a structure should not be passed to a function that can copy data to the user space" id="CERT_CPP-DCL55-a" origId="SECURITY-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL56" desc="Avoid initialization order problems across translation units by replacing non-local static objects with local static objects" id="CERT_CPP-DCL56-a" origId="INIT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL57" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="CERT_CPP-DCL57-a" origId="EXCEPT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL57" desc="Always catch exceptions" id="CERT_CPP-DCL57-b" origId="BD-PB-EXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL58" desc="Do not modify the standard namespaces 'std' and 'posix'" id="CERT_CPP-DCL58-a" origId="CODSTA-CPP-95" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL59" desc="There shall be no unnamed namespaces in header files" id="CERT_CPP-DCL59-a" origId="CODSTA-CPP-74" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL60" desc="A class, union or enum name (including qualification, if any) shall be a unique identifier" id="CERT_CPP-DCL60-a" origId="GLOBAL-UNIQUETYPE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="CERT_CPP-ERR50-a" origId="PB-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="CERT_CPP-ERR50-b" origId="EXCEPT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Do not throw from within destructor" id="CERT_CPP-ERR50-c" origId="EXCEPT-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_CPP-ERR50" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="CERT_CPP-ERR50-d" origId="EXCEPT-06" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="An empty throw (throw;) shall only be used in the compound-statement of a catch handler" id="CERT_CPP-ERR50-e" origId="EXCEPT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Exceptions shall be raised only after start-up and before termination of the program" id="CERT_CPP-ERR50-f" origId="EXCEPT-08" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="CERT_CPP-ERR50-g" origId="EXCEPT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="CERT_CPP-ERR50-h" origId="EXCEPT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="CERT_CPP-ERR50-i" origId="EXCEPT-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Always catch exceptions" id="CERT_CPP-ERR50-j" origId="BD-PB-EXCEPT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Properly define exit handlers" id="CERT_CPP-ERR50-k" origId="BD-PB-EXITHAN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_CPP-ERR50-l" origId="PB-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Avoid throwing exceptions from functions that are declared not to throw" id="CERT_CPP-ERR50-m" origId="BD-PB-NOEXCEPT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_CPP-ERR50-n" origId="PB-75_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR51" desc="Always catch exceptions" id="CERT_CPP-ERR51-a" origId="BD-PB-EXCEPT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR51" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="CERT_CPP-ERR51-b" origId="EXCEPT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR52" desc="The setjmp macro and the longjmp function shall not be used" id="CERT_CPP-ERR52-a" origId="MISRA2004-20_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR52" desc="The standard header file &lt;setjmp.h> shall not be used" id="CERT_CPP-ERR52-b" origId="MISRA2004-20_7_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR53" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="CERT_CPP-ERR53-a" origId="EXCEPT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR54" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="CERT_CPP-ERR54-a" origId="EXCEPT-17" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR55" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="CERT_CPP-ERR55-a" origId="EXCEPT-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR56" desc="Always catch exceptions" id="CERT_CPP-ERR56-a" origId="BD-PB-EXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR56" desc="Do not leave 'catch' blocks empty" id="CERT_CPP-ERR56-b" origId="EXCEPT-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_CPP-ERR57" desc="Ensure resources are freed" id="CERT_CPP-ERR57-a" origId="BD-RES-LEAKS" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_CPP-ERR58" desc="Exceptions shall be raised only after start-up and before termination of the program" id="CERT_CPP-ERR58-a" origId="EXCEPT-08" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR59" desc="Do not throw an exception across execution boundaries" id="CERT_CPP-ERR59-a" origId="PORT-30" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR60" desc="Exception objects must be nothrow copy constructible" id="CERT_CPP-ERR60-a" origId="EXCEPT-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR60" desc="An explicitly declared copy constructor for a class that inherits from 'std::exception' should have a non-throwing exception specification" id="CERT_CPP-ERR60-b" origId="EXCEPT-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR61" desc="A class type exception shall always be caught by reference" id="CERT_CPP-ERR61-a" origId="EXCEPT-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR61" desc="Throw by value, catch by reference" id="CERT_CPP-ERR61-b" origId="EXCEPT-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_CPP-ERR62" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="CERT_CPP-ERR62-a" origId="MISRA2004-20_10" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="CERT_CPP-EXP50-a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Don't write code that depends on the order of evaluation of function arguments" id="CERT_CPP-EXP50-b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="CERT_CPP-EXP50-c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="CERT_CPP-EXP50-d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="CERT_CPP-EXP50-e" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Don't write code that depends on the order of evaluation of function calls" id="CERT_CPP-EXP50-f" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP51" desc="Do not treat arrays polymorphically" id="CERT_CPP-EXP51-a" origId="BD-PB-POLARR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="CERT_CPP-EXP52-a" origId="MISRA2004-12_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="CERT_CPP-EXP52-b" origId="MISRA2004-12_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="CERT_CPP-EXP52-c" origId="MISRA2004-12_3_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="The operand of the 'typeid' operator shall not contain any expression that has side effects" id="CERT_CPP-EXP52-d" origId="CODSTA-CPP-104" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="The operand of the 'typeid' operator shall not contain a function call that causes side effects" id="CERT_CPP-EXP52-e" origId="CODSTA-CPP-104_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP53" desc="Avoid use before initialization" id="CERT_CPP-EXP53-a" origId="BD-PB-NOTINIT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP54" desc="Do not use resources that have been freed" id="CERT_CPP-EXP54-a" origId="BD-RES-FREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP54" desc="The address of an object with automatic storage shall not be returned from a function" id="CERT_CPP-EXP54-b" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP54" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="CERT_CPP-EXP54-c" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP55" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="CERT_CPP-EXP55-a" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CERT_CPP-EXP56" desc="Do not call a function with a mismatched language linkage" id="CERT_CPP-EXP56-a" origId="CODSTA-CPP-96" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP57" desc="Do not delete objects with incomplete class at the point of deletion" id="CERT_CPP-EXP57-a" origId="PB-55" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP57" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="CERT_CPP-EXP57-b" origId="CODSTA-125" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP58" desc="Use macros for variable arguments correctly" id="CERT_CPP-EXP58-a" origId="BD-PB-VARARGS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP59" desc="Use offsetof() on valid types and members" id="CERT_CPP-EXP59-a" origId="CODSTA-CPP-99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP60" desc="Do not pass a nonstandard-layout type object across execution boundaries" id="CERT_CPP-EXP60-a" origId="PORT-31" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP61" desc="Never return lambdas that capture local objects by reference" id="CERT_CPP-EXP61-a" origId="CODSTA-MCPP-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP61" desc="Never capture local objects from an outer lambda by reference" id="CERT_CPP-EXP61-b" origId="CODSTA-MCPP-17_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP61" desc="The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime" id="CERT_CPP-EXP61-c" origId="CODSTA-MCPP-17_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP62" desc="Do not compare objects of a class that may contain padding bits with C standard library functions" id="CERT_CPP-EXP62-a" origId="CODSTA-CPP-100" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP63" desc="Do not rely on the value of a moved-from object" id="CERT_CPP-EXP63-a" origId="BD-PB-SUBSEQMOVE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-FIO50" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="CERT_CPP-FIO50-a" origId="BD-PB-STREAMINOUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_CPP-FIO51" desc="Ensure resources are freed" id="CERT_CPP-FIO51-a" origId="BD-RES-LEAKS" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-INT50" desc="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="CERT_CPP-INT50-a" origId="PB-70" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM50" desc="Do not use resources that have been freed" id="CERT_CPP-MEM50-a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM51" desc="Use the same form in corresponding calls to new/malloc and delete/free" id="CERT_CPP-MEM51-a" origId="MRM-06" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM51" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="CERT_CPP-MEM51-b" origId="MRM-36" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM51" desc="Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor" id="CERT_CPP-MEM51-c" origId="MRM-40_d" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM51" desc="Properly deallocate dynamically allocated resources" id="CERT_CPP-MEM51-d" origId="BD-RES-BADDEALLOC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_CPP-MEM52" desc="Check the return value of new" id="CERT_CPP-MEM52-a" origId="MRM-34" sev="1" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM52" desc="Do not allocate resources in function argument list because the order of evaluation of a function's parameters is undefined" id="CERT_CPP-MEM52-b" origId="MRM-01" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM53" desc="Do not invoke malloc/realloc for objects having constructors" id="CERT_CPP-MEM53-a" origId="MRM-08" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM54" desc="Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new'" id="CERT_CPP-MEM54-a" origId="MRM-55" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM54" desc="An overhead should be used when an array of objects is passed to the placement 'new' allocation function" id="CERT_CPP-MEM54-b" origId="MRM-55_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM55" desc="The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails" id="CERT_CPP-MEM55-a" origId="MRM-53" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM56" desc="Do not store an already-owned pointer value in an unrelated smart pointer" id="CERT_CPP-MEM56-a" origId="BD-PB-PTRVALUE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM57" desc="Avoid using the default operator 'new' for over-aligned types" id="CERT_CPP-MEM57-a" origId="MRM-54" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC50" desc="Do not use the rand() function for generating pseudorandom numbers" id="CERT_CPP-MSC50-a" origId="SECURITY-02_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC51" desc="Properly seed pseudorandom number generators" id="CERT_CPP-MSC51-a" origId="BD-SECURITY-RAND" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC52" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="CERT_CPP-MSC52-a" origId="MISRA2004-16_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC53" desc="Never return from functions that should not return" id="CERT_CPP-MSC53-a" origId="BD-PB-NORETURN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC54" desc="Properly define signal handlers" id="CERT_CPP-MSC54-a" origId="BD-PB-SIGHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP50" desc="Avoid calling virtual functions from constructors" id="CERT_CPP-OOP50-a" origId="OOP-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP50" desc="Avoid calling virtual functions from destructors" id="CERT_CPP-OOP50-b" origId="OOP-16_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP50" desc="Do not use dynamic type of an object under construction" id="CERT_CPP-OOP50-c" origId="BD-PB-VCTOR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP50" desc="Do not use dynamic type of an object under destruction" id="CERT_CPP-OOP50-d" origId="BD-PB-VDTOR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP51" desc="Avoid slicing function arguments / return value" id="CERT_CPP-OOP51-a" origId="PB-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP52" desc="Define a virtual destructor in classes used as base classes which have virtual functions" id="CERT_CPP-OOP52-a" origId="OOP-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP53" desc="List members in an initialization list in the order in which they are declared" id="CERT_CPP-OOP53-a" origId="INIT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP54" desc="Check for assignment to self in operator=" id="CERT_CPP-OOP54-a" origId="OOP-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP55" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="CERT_CPP-OOP55-a" origId="CODSTA-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP56" desc="Properly define terminate handlers" id="CERT_CPP-OOP56-a" origId="BD-PB-TERMHAN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP56" desc="Properly define unexpected handlers" id="CERT_CPP-OOP56-b" origId="BD-PB-UNEXPHAN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP56" desc="Properly define new handlers" id="CERT_CPP-OOP56-c" origId="BD-PB-NEWHAN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP57" desc="Do not initialize objects with a non-trivial class type using C standard library functions" id="CERT_CPP-OOP57-a" origId="CODSTA-CPP-93" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP57" desc="Do not compare objects of nonstandard-layout class type with C standard library functions" id="CERT_CPP-OOP57-b" origId="CODSTA-CPP-94" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP58" desc="Copy operations must not mutate the source object" id="CERT_CPP-OOP58-a" origId="CODSTA-CPP-98" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_CPP-STR50-b" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Avoid overflow when writing to a buffer" id="CERT_CPP-STR50-c" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Prevent buffer overflows from tainted data" id="CERT_CPP-STR50-e" origId="BD-SECURITY-BUFWRITE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Avoid buffer write overflow from tainted data" id="CERT_CPP-STR50-f" origId="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Do not use the 'char' buffer to store input from 'std::cin'" id="CERT_CPP-STR50-g" origId="SECURITY-51" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_CPP-STR51" desc="Avoid null pointer dereferencing" id="CERT_CPP-STR51-a" origId="BD-PB-NP" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR52" desc="Use valid references, pointers, and iterators to reference elements of a basic_string" id="CERT_CPP-STR52-a" origId="BD-CO-STRMOD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR53" desc="Guarantee that container indices are within the valid range" id="CERT_CPP-STR53-a" origId="BD-PB-VALRANGE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Local variable or parameter names and class member variable or parent class/struct member variable names shall differ by more than a single character" id="CODSTA-22" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid internal or external name conflict with a C++ reserved word" id="CODSTA-39" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Local variables should not use the same names as member variables" id="CODSTA-44" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Parameters should not use the same names as member variables" id="CODSTA-45" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use break in for loops" id="CODSTA-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA" desc="Global functions shall not declare parameters with array type" id="CODSTA-142" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not declare the size of an array when the array is passed into a function as a parameter" id="CODSTA-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not declare the size of an array when the array is initialized" id="CODSTA-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The declaration of an array parameter shall not contain the 'static' keyword between the [ ]" id="CODSTA-160" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A pointer to a FILE object shall not be dereferenced" id="CODSTA-166_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A pointer to a FILE object shall not be dereferenced by a library function" id="CODSTA-166_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The 'sizeof' operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" id="CODSTA-182" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="CODSTA-185_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not specify the bound of a character array initialized with a string literal" id="CODSTA-197" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="EOS should be used to terminate a string rather than NULL" id="CODSTA-20" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An inline definition of a function with external linkage shall not contain definitions and uses of static objects" id="CODSTA-202" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Literal suffixes shall use uppercase rather than lowercase letters" id="CODSTA-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Enumeration types shall be used instead of integer types (and constants) as case labels" id="CODSTA-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Array elements shall be accessed by the array operator [ ]" id="CODSTA-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="Do not define constants via #define" id="CODSTA-03" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Pointers to pointers should be avoided whenever possible" id="CODSTA-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid using the '?:' operator" id="CODSTA-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a function has no parameters, use ( ) instead of ( void )" id="CODSTA-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not cast pointers to functions to pointers to primitive types" id="CODSTA-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Storage type modifiers shall be associated with the type, not the variable or the function" id="CODSTA-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Signed and unsigned values shall not be mixed in arithmetic operations" id="CODSTA-100" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Signed and unsigned values shall not be mixed in second and third operand of conditional operator" id="CODSTA-101" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A single operation with side-effect shall only be used in the proper context" id="CODSTA-102" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A call of function with side-effect shall only be used in the proper context" id="CODSTA-103" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators" id="CODSTA-104" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" id="CODSTA-107" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The standard header file &lt;tgmath.h> shall not be used" id="CODSTA-108" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The facilities that are specified as being provided by &lt;tgmath.h> should not be used" id="CODSTA-108_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="The Standard Library input/output functions shall not be used" id="CODSTA-110" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The union keyword should not be used" id="CODSTA-111" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Variable-length array types shall not be used" id="CODSTA-112" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Flexible array members shall not be declared" id="CODSTA-113" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assembly language shall be encapsulated and isolated in C/C++ functions" id="CODSTA-114" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="CODSTA-116" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Octal and hexadecimal escape sequences shall be terminated" id="CODSTA-117" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A declaration shall be visible when an object or function with external linkage is defined" id="CODSTA-118" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="CODSTA-119" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid using shift operations instead of arithmetic operations" id="CODSTA-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An inline function shall be declared with the static storage class" id="CODSTA-120" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The restrict type qualifier shall not be used" id="CODSTA-121" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA" desc="The value returned by a function having non-void return type shall be used" id="CODSTA-122_a" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value returned by a function having non-void return type shall be used" id="CODSTA-122_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Conversions shall not be performed between a pointer to a function and any other type than pointer to function" id="CODSTA-124_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Conversions shall not be performed between non compatible pointer to a function types" id="CODSTA-124_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="CODSTA-125" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A cast shall not be performed between a pointer to object type and a pointer to a different object type" id="CODSTA-126" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A cast shall not be performed between pointer to void and an arithmetic type" id="CODSTA-129_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An implicit conversion shall not be performed between pointer to void and an arithmetic type" id="CODSTA-129_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc=">, >=, &lt;, &lt;= shall not be applied to pointer types except where they point to the same array" id="CODSTA-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="CODSTA-130" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="25;" authUrg="0;" cat="CODSTA" desc="Use NULL instead of literal zero (0) as the null-pointer-constant" id="CODSTA-131" sev="3" total="25" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A macro shall not be defined with the same name as a keyword in C90" id="CODSTA-133_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A macro shall not be defined with the same name as a keyword in C99" id="CODSTA-133_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Type casting from any type to or from pointers shall not be used" id="CODSTA-135" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The identifiers va_list, va_arg, va_start, va_end, va_copy should not be used" id="CODSTA-136_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The identifiers va_list, va_arg, va_start, va_end should not be used" id="CODSTA-136_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The function call shall not be the operand of the sizeof operator" id="CODSTA-137" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The result of a built-in assignment operator should not be used" id="CODSTA-138" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Pointer subtraction shall only be applied to pointers that address elements of the same array" id="CODSTA-13_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Never convert consts to non-consts" id="CODSTA-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Initializer lists shall not contain persistent side effects" id="CODSTA-141_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Functions which are called with array argument shall not be declared with pointer parameter" id="CODSTA-142_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Suspicious use of 'strcpy' without checking size of source buffer" id="CODSTA-143" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The values returned by functions 'read' and 'readlink' shall be used" id="CODSTA-144" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use of possibly not null-terminated string with functions expecting null-terminated string" id="CODSTA-145" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A value returned from a stdio character-oriented I/O function should not be implicitly converted to a type smaller than 'int'" id="CODSTA-146" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Pointer should not be compared with NULL using relational operators &lt;, >, >=, &lt;=" id="CODSTA-147" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use string literals as operands of equality or relational operators" id="CODSTA-148" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Missing break statement between cases in a switch statement" id="CODSTA-149" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assertions should not contain assignments, increment, or decrement operators" id="CODSTA-150" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid side effects in arguments to unsafe macros" id="CODSTA-150_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of a composite expression shall not be cast to a different essential type category or a wider essential type" id="CODSTA-152" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An external object or function shall not have more than one non-defining declaration in translation unit" id="CODSTA-154" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use typedefs from stdint.h instead of declaring your own in C99 code" id="CODSTA-155" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="CODSTA-156_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="CODSTA-156_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="CODSTA-157" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Function types shall have named parameters" id="CODSTA-158" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Function types shall be in prototype form" id="CODSTA-159" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="CODSTA-161_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="CODSTA-161_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="CODSTA-161_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="CODSTA-161_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="CODSTA-161_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" id="CODSTA-161_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="CODSTA-161_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" id="CODSTA-162" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="CODSTA-163_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="CODSTA-163_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="CODSTA-164_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The second and third operands of the ternary operator shall have the same essential type category" id="CODSTA-164_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not cast from or to essentially Boolean type" id="CODSTA-165_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A loop counter in a 'for' loop shall not have essentially floating type" id="CODSTA-167_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A loop counter in 'while' and 'do-while' loops shall not have essentially floating type" id="CODSTA-167_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" id="CODSTA-168" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The first clause of a 'for' loop shall be well-formed" id="CODSTA-169_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The second clause of a 'for' loop shall be well-formed" id="CODSTA-169_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The third clause of a 'for' statement shall be well-formed" id="CODSTA-169_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use NULL identifier; use 0 instead" id="CODSTA-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c90)" id="CODSTA-170_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c99)" id="CODSTA-170_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The name of a macro should be distinct from the names of its parameters(c90)" id="CODSTA-171_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The name of a macro should be distinct from the names of its parameters(c99)" id="CODSTA-171_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c90)" id="CODSTA-172_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c99)" id="CODSTA-172_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="CODSTA-174_a_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="CODSTA-174_a_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="CODSTA-174_b_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="CODSTA-174_b_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="External identifiers shall be distinct" id="CODSTA-178" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c90)" id="CODSTA-179_a_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c99)" id="CODSTA-179_a_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers declared in the same block scope and name space shall be distinct (c90)" id="CODSTA-179_b_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers declared in the same block scope and name space shall be distinct (c99)" id="CODSTA-179_b_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers that define objects or functions with external linkage shall be unique" id="CODSTA-180" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types" id="CODSTA-183" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" id="CODSTA-184" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Strings pointed by members of the structure 'lconv' should not be modified" id="CODSTA-185_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" id="CODSTA-186" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Cast characters to unsigned char before assignment to larger integer sizes" id="CODSTA-187_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An expressions of the 'signed char' type should not be used as an array index" id="CODSTA-187_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Cast characters to unsigned char before converting to larger integer sizes" id="CODSTA-187_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not confuse narrow and wide character strings and functions" id="CODSTA-188" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not add or subtract a scaled integer to a pointer" id="CODSTA-189" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use the ctype.h facilities for character test" id="CODSTA-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use object representations to compare floating-point values" id="CODSTA-190" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Wrap functions that can spuriously wake up in a loop" id="CODSTA-191" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The final member of a structure should not be an array of size '0' or '1'" id="CODSTA-192" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Allocate structures containing a flexible array member dynamically" id="CODSTA-193" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Wrap functions that can fail spuriously in a loop" id="CODSTA-194" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not refer to an atomic variable twice in an expression" id="CODSTA-195" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not access an array in the result of a function call" id="CODSTA-196" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of a complex expression of floating type should not be cast to a wider floating type" id="CODSTA-198" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of a complex expression of floating type should not be cast to an integer type" id="CODSTA-198_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use assertions" id="CODSTA-199" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Explicitly specify array bounds in array declarations with initializers" id="CODSTA-200" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not process structured text data natively" id="CODSTA-201" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Functions declared as 'noreturn' shall have the 'void' return type" id="CODSTA-204" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not cast an array to the pointer to a structure of a larger size than the size of the array" id="CODSTA-205" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Noreturn' function specifier should not be used" id="CODSTA-206" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The &lt;stdnoreturn.h> header file should not be used" id="CODSTA-207" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The &lt;stdalign.h> header file shall not be used" id="CODSTA-208" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The facilities that are specified as being provided by &lt;stdatomic.h> should not be used" id="CODSTA-209" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Thread_local' storage class specifier should not be used" id="CODSTA-210" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The facilities that are specified as being provided by &lt;threads.h> should not be used" id="CODSTA-211" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The 'rsize_t' type should not be used" id="CODSTA-212" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Alignas' alignment specifier and the '_Alignof' operator should not be used" id="CODSTA-213" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Atomic' type specifier and the '_Atomic' type qualifier should not be used" id="CODSTA-214" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0'" id="CODSTA-215" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Generic' operator should not be used" id="CODSTA-216" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The 'errno_t' type should not be used" id="CODSTA-217" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S" id="CODSTA-218" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use the functions defined in Annex K of ISO/IEC 9899:2011 standard" id="CODSTA-219" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Arguments of integer-constant macros should be decimal, octal, or hexadecimal constants with appropriate values" id="CODSTA-220" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not include any type qualifiers in the specification of a function type" id="CODSTA-221" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid implicit integral conversions from a wider to a narrower type" id="CODSTA-222" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="CODSTA" desc="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" id="CODSTA-223" sev="3" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The conditional operator should not be used as a sub-expression" id="CODSTA-224" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA" desc="All 'if' statements should have an 'else' clause" id="CODSTA-23" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="2;" cat="CODSTA" desc="Avoid magic numbers" id="CODSTA-26" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="Avoid functions that modify global variables" id="CODSTA-27" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="&quot;#define&quot; or enum constants should be used instead of hard coded values whenever possible" id="CODSTA-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid returning handles to function parameters" id="CODSTA-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="Avoid explicit type conversions (casts)" id="CODSTA-31" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not write logical expressions of the type if(test) or if(!test)  when test is a pointer" id="CODSTA-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use operator ++ or -- in the conditional expression of if, while, or switch" id="CODSTA-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use a typedef to simplify program syntax when declaring function pointers" id="CODSTA-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Always provide a default branch for switch statements" id="CODSTA-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Pass built-in-types by value unless you are modifying them" id="CODSTA-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="Prefer const objects or enums to #defines for simple constants" id="CODSTA-37" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use a #define that prevents the compiler from checking types" id="CODSTA-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="'void' should be used when a function is passed or returns no values" id="CODSTA-40" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="All structures should be typedef'd" id="CODSTA-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use the following digraphs: &lt;%, %>, &lt;:, :>, %:, %:%:" id="CODSTA-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Null initialize or increment expressions in for loops will not be used; a while loop will be used instead" id="CODSTA-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Hexadecimal constants will be represented using all uppercase letters" id="CODSTA-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter" id="CODSTA-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop" id="CODSTA-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Every switch statement will have at least two cases and a potential default" id="CODSTA-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="All 'case' and 'default' labels of 'switch' statement should have an explicit 'break' or a 'return' statement, or 'fall through' comment" id="CODSTA-56" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid comparing values with TRUE macro/enum constant using equality operators (&quot;==&quot;, &quot;!=&quot;)" id="CODSTA-60" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The final clause of a switch statement shall be the default-clause unless all enumeration values are tested" id="CODSTA-61" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="CODSTA-62" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="CODSTA-63" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="CODSTA-64" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An object with integer type or pointer to void type shall not be converted to an object with pointer type" id="CODSTA-65" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Non-constant operands to a binary bitwise operator shall have the same underlying type" id="CODSTA-66" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" id="CODSTA-67" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" id="CODSTA-68" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary &amp; operator" id="CODSTA-69" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Expressions with type enum shall not be used as operands to built-in operators other than  [ ],  =, ==, !=, &lt;, &lt;=, >, >=, and the unary &amp; operator" id="CODSTA-70" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="CODSTA-71" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assembler instructions shall only be introduced using the asm declaration" id="CODSTA-73" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Bit-fields shall not have enum type" id="CODSTA-74" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Bit-fields shall be either bool type or an explicitly unsigned or signed integral type" id="CODSTA-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The identifier main shall not be used for a function other than the global function main" id="CODSTA-76" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The goto statement shall jump to a label declared later in the same function body" id="CODSTA-77" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="CODSTA-78" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="CODSTA-79" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The continue statement shall only be used within a well formed for loop" id="CODSTA-80" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a function has internal linkage then all re-declarations shall include the 'static' storage class specifier" id="CODSTA-81" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid infinite loops" id="CODSTA-82" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use empty infinite loops" id="CODSTA-82_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="CODSTA" desc="All loops must have a fixed upper or lower bound" id="CODSTA-83" sev="3" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid exit points within infinite loops" id="CODSTA-85" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="CODSTA" desc="The validity of parameters must be checked inside each function" id="CODSTA-86" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use no more than one level of dereferencing" id="CODSTA-87" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Function pointers are not permitted" id="CODSTA-88" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA" desc="The declaration should not contain more than one level of pointer indirection" id="CODSTA-89" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Each operand of a logical '&amp;&amp;' or '||' shall be a postfix-expression" id="CODSTA-90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A function shall have at most one exit point" id="CODSTA-91" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The names of standard library macros and objects shall not be reused" id="CODSTA-92" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="CODSTA-92_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)" id="CODSTA-92_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="25;" authUrg="0;" cat="CODSTA" desc="Do not declare pointer or array type" id="CODSTA-94" sev="3" total="25" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="25;" authUrg="0;" cat="CODSTA" desc="Do not declare pointer type" id="CODSTA-95" sev="3" total="25" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Bit-fields shall have explicitly unsigned integral or enumeration types only" id="CODSTA-96" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used" id="CODSTA-97" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="All 'if...else if' constructs will contain either a final else clause or a comment indicating why a final else clause is not necessary" id="CODSTA-98" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Signed and unsigned values shall not be mixed in comparison operations" id="CODSTA-99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The second or third operand of a ternary operator '?:' shall not contain side effects" id="CODSTA-105" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The exception handling features of &lt;fenv.h> should not be used" id="CODSTA-109" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="CODSTA-115" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects" id="CODSTA-123" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A conversion should not be performed between a pointer to object and an integer type" id="CODSTA-127" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t'" id="CODSTA-127_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A conversion should not be performed from pointer to void into pointer to object" id="CODSTA-128" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A function parameter should not be modified" id="CODSTA-132" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" id="CODSTA-134" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use enumerations in boolean condition" id="CODSTA-151" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The cast operation to essentially enumeration type is not allowed" id="CODSTA-165_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use casts between essentially character types and essentially floating types" id="CODSTA-165_c" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A function should not contain unused type declarations" id="CODSTA-175_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A source file should not contain unused type declarations" id="CODSTA-175_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A function should not contain unused local tag declarations" id="CODSTA-176_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A source file should not contain unused tag declarations" id="CODSTA-176_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A source file should not contain unused macro definitions" id="CODSTA-177" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The +, -, += and -= operators should not be applied to an expression of pointer type" id="CODSTA-181" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid switch statements with only one case" id="CODSTA-41" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Suspicious use of semicolon" id="CODSTA-57" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Cast to void is not allowed" id="CODSTA-58" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Hardcoded array declarations and 'malloc' calls should not be used" id="CODSTA-59" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not declare member variables as bit-fields" id="CODSTA-02" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not declare local variables with the 'static' keyword" id="CODSTA-04" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assert liberally to document internal assumptions and invariants" id="CODSTA-11" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assertions should not contain function calls nor function-like macro calls" id="CODSTA-150_b" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Prefer while statements over do statements" id="CODSTA-18" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="2;" cat="CODSTA" desc="Do not hard code string literals" id="CODSTA-203" sev="5" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="When using enum, the values of each member should be explicitly declared" id="CODSTA-21" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The macro FALSE should be defined as 0 (zero)" id="CODSTA-24" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The enumeration constant named 'FALSE' should be explicitly initialized by 0 value" id="CODSTA-25" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Define fields for union declarations" id="CODSTA-28" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The macro TRUE should be defined as 1" id="CODSTA-42" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The enumeration constant named 'TRUE' should be explicitly initialized by 1 value" id="CODSTA-43" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA" desc="Use positive logic rather than negative logic whenever practical" id="CODSTA-46" sev="5" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The names of standard library functions shall not be overridden" id="CODSTA-93" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Constructors allowing for conversion should be made explicit" id="CODSTA-CPP-04" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use user-defined conversion functions" id="CODSTA-CPP-05" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The first operand of a conditional-operator shall have type bool" id="CODSTA-CPP-65" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Declare at least one constructor to prevent the compiler from doing so" id="CODSTA-CPP-19" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Arrays shall not be used in interfaces" id="CODSTA-CPP-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Private and protected methods shall not declare parameters with array type" id="CODSTA-CPP-55_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Copy operations must not mutate the source object" id="CODSTA-CPP-98" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type" id="CODSTA-CPP-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Bitwise operators, comparison operators, logical operators, comma operator should be const" id="CODSTA-CPP-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid returning handles to class data from member functions" id="CODSTA-CPP-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Postfix increment and decrement should be implemented in terms of their prefix counterparts" id="CODSTA-CPP-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid overloading logical operators AND, OR (&amp;&amp;, ||)" id="CODSTA-CPP-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid using reinterpret_cast" id="CODSTA-CPP-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not define structs that contain member functions" id="CODSTA-CPP-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not compare objects of a class that may contain padding bits with C standard library functions" id="CODSTA-CPP-100" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A relational operator shall return a boolean value" id="CODSTA-CPP-101" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A binary arithmetic operator and a bitwise operator shall return a 'prvalue'" id="CODSTA-CPP-102" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Output parameters shall not be used" id="CODSTA-CPP-103" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The operand of the 'typeid' operator shall not contain any expression that has side effects" id="CODSTA-CPP-104" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The operand of the 'typeid' operator shall not contain a function call that causes side effects" id="CODSTA-CPP-104_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Define special members as =default when the behavior is equivalent to the compiler's behavior" id="CODSTA-CPP-105" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Use delegating constructors to reduce code duplication" id="CODSTA-CPP-106" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Comparison operators shall be non-member functions" id="CODSTA-CPP-107" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Comparison operators shall be non-member functions with identical parameter types and noexcept" id="CODSTA-CPP-107_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer C++-style casts" id="CODSTA-CPP-11" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Put classes that are used as base classes and classes that are used as member variables into separate include files" id="CODSTA-CPP-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Put classes that are used as function return type into separate include files" id="CODSTA-CPP-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Put classes that are used as argument types in function prototypes into separate include files" id="CODSTA-CPP-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Put functions that are used in the body of inline member function into separate include file" id="CODSTA-CPP-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="When two operators are opposites (such as == and !=), it is appropriate to define both" id="CODSTA-CPP-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use the 'struct' keyword to declare a variable in C++" id="CODSTA-CPP-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If you'd like to support mixed-mode operations make operators a non-member functions" id="CODSTA-CPP-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid making any assignment operator virtual. Do not return const T&amp; from assignment operator" id="CODSTA-CPP-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Consider making virtual functions nonpublic, and public functions nonvirtual" id="CODSTA-CPP-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Keep types and functions in separate namespaces unless they're specifically intended to work together" id="CODSTA-CPP-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Keep a type and its nonmember function interface in the same namespace" id="CODSTA-CPP-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="When binary arithmetic operators are defined  ( + , - , * , / , ^ , % , | , &amp; ), assignment versions should be provided too" id="CODSTA-CPP-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer the canonical forms of arithmetic and assignment operators" id="CODSTA-CPP-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer non-member operators than member ones to support mixed-mode arithmetic" id="CODSTA-CPP-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A function definition should not be placed in a class specification unless the function is intended to be inlined" id="CODSTA-CPP-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Member functions shall not be defined within the template class definition" id="CODSTA-CPP-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid using static_cast on pointers" id="CODSTA-CPP-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid dynamic_casts" id="CODSTA-CPP-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="0;" cat="CODSTA-CPP" desc="The global namespace shall only contain main() and namespace declarations" id="CODSTA-CPP-36" sev="3" total="13" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not define class/struct/union inside function implementation" id="CODSTA-CPP-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Conversion operator, operator->, operator(), operator[] should be const" id="CODSTA-CPP-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Don't write namespace usings in a header file or before an #include" id="CODSTA-CPP-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use the 'enum' keyword to declare a variable in C++" id="CODSTA-CPP-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not declare member variables with the 'mutable' keyword" id="CODSTA-CPP-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Declare reference parameters as const references whenever possible" id="CODSTA-CPP-43" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Have the non-const version call the const version of member function instead of duplicating the const version definition" id="CODSTA-CPP-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="In the private section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others" id="CODSTA-CPP-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Order of scopes in class: public before all others" id="CODSTA-CPP-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Order of scopes in classes: protected before private" id="CODSTA-CPP-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="In the protected section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others" id="CODSTA-CPP-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="In the public section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others" id="CODSTA-CPP-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use static keyword except inside functions and classes" id="CODSTA-CPP-50" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not define inline functions in source files" id="CODSTA-CPP-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Consider using the natural relationship between the assignment version of an operator and the stand-alone version" id="CODSTA-CPP-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CODSTA-CPP" desc="Declare parameters or local variable as const whenever possible" id="CODSTA-CPP-53" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Member functions shall be declared const whenever possible" id="CODSTA-CPP-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A class, structure, or enumeration will not be declared in the definition of its type" id="CODSTA-CPP-56" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Namespaces will not be nested more than two levels deep" id="CODSTA-CPP-57" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="CODSTA-CPP-58" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-CPP" desc="The C library shall not be used" id="CODSTA-CPP-59" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used" id="CODSTA-CPP-60" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used" id="CODSTA-CPP-60_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="NULL shall not be used as an integer value" id="CODSTA-CPP-62" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="CODSTA-CPP-63" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The condition of an if-statement and the condition of an iteration-statement shall have type bool" id="CODSTA-CPP-64" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-CPP" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="CODSTA-CPP-66" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA-CPP" desc="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" id="CODSTA-CPP-67" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The unary &amp; operator shall not be overloaded" id="CODSTA-CPP-68" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A for loop shall contain a single loop-counter which shall not have floating type" id="CODSTA-CPP-69" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" id="CODSTA-CPP-70" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop" id="CODSTA-CPP-71" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A loop-control-variable other than the loop-counter shall not be modified within condition or expression" id="CODSTA-CPP-72" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A loop-control-variable other than the loop-counter which is modified in statement shall have type bool" id="CODSTA-CPP-73" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="There shall be no unnamed namespaces in header files" id="CODSTA-CPP-74" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="using-directives shall not be used" id="CODSTA-CPP-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier" id="CODSTA-CPP-76" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Const member functions shall not return non-const pointers or references to class-data" id="CODSTA-CPP-77" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="CODSTA-CPP-78" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Neither operand of an equality operator (== or !=) shall be a pointer to a virtual member function" id="CODSTA-CPP-79" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid overloading comma operator &quot;,&quot;" id="CODSTA-CPP-80" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid unencapsulated global variables (including variables declared in namespaces and public static members)" id="CODSTA-CPP-82" sev="3" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Identifiers declared in a local scope should not hide identifiers declared in a class scope" id="CODSTA-CPP-83" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope" id="CODSTA-CPP-84" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope" id="CODSTA-CPP-85" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If two opposite equality operators ('==', '!=') are defined in a class, one shall be defined in terms of the other" id="CODSTA-CPP-86" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="CODSTA-CPP-87_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="CODSTA-CPP-87_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="CODSTA-CPP-87_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The name of typedef should not be the same as the name of its basic type" id="CODSTA-CPP-88" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" id="CODSTA-CPP-90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="CODSTA-CPP-91" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="All accessible entity names within a multiple inheritance hierarchy should be unique" id="CODSTA-CPP-92" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not initialize objects with a non-trivial class type using C standard library functions" id="CODSTA-CPP-93" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not compare objects of nonstandard-layout class type with C standard library functions" id="CODSTA-CPP-94" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not modify the standard namespaces 'std' and 'posix'" id="CODSTA-CPP-95" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CODSTA-CPP" desc="Do not call a function with a mismatched language linkage" id="CODSTA-CPP-96" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Never qualify a reference type with 'const' or 'volatile'" id="CODSTA-CPP-97" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Use offsetof() on valid types and members" id="CODSTA-CPP-99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer non-member non-friend functions to member functions" id="CODSTA-CPP-22" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Classes which have only getters/setters (accessors/mutators) are not allowed" id="CODSTA-CPP-81" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not assign enumerations to bool" id="CODSTA-CPP-89" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer iostream.h to stdio.h" id="CODSTA-CPP-01" sev="5" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="CODSTA-CPP" desc="Encapsulate global variables and constants, enumerated types, and typedefs in a class" id="CODSTA-CPP-18" sev="5" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Assignment operator must return const reference" id="CODSTA-CPP-21" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Whenever a global function  is  referenced, use the :: operator" id="CODSTA-CPP-23" sev="5" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use the keyword 'explicit' for a constructor" id="CODSTA-CPP-31" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Limiting the number of objects of a class" id="CODSTA-CPP-40" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer lambdas over std::bind, std::bind1st and std::bind2nd" id="CODSTA-MCPP-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer 'auto' to explicit type names in variable declarations" id="CODSTA-MCPP-08_a" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="2;" cat="CODSTA-MCPP" desc="Prefer 'auto' to explicit type names for function return types" id="CODSTA-MCPP-08_b" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="All std::hash specializations for user-defined types shall have a noexcept function call operator" id="CODSTA-MCPP-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="User-conversion cast operators should be made explicit" id="CODSTA-MCPP-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer alias declarations to typedefs" id="CODSTA-MCPP-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer Scoped Enums to Unscoped Enums" id="CODSTA-MCPP-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Each overriding virtual function shall be declared with the override or final specifier" id="CODSTA-MCPP-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Declare copy constructor and copy assignment operators with the 'delete' specifier to prevent copying of class" id="CODSTA-MCPP-06_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Declare copy constructor and copy assignment operators with the 'delete' specifier instead of using a base class with private methods to prevent copying of class" id="CODSTA-MCPP-06_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The 'binder1st' and 'binder2nd' identifiers should not be used" id="CODSTA-MCPP-07_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA-MCPP" desc="Declare functions 'noexcept' if they will not emit exceptions" id="CODSTA-MCPP-09" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer const iterators to iterators" id="CODSTA-MCPP-10_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer to use cbegin(), crbegin, cend(), crend() functions" id="CODSTA-MCPP-10_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use std::move() on rvalue references and std::forward() on forwarding references" id="CODSTA-MCPP-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The 'std::forward' function shall be used to forward universal references" id="CODSTA-MCPP-13_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid Overloading on Forwarding References" id="CODSTA-MCPP-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid default capture modes" id="CODSTA-MCPP-15_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use the 'this' pointer explicitly in lambdas with a default by-reference capture" id="CODSTA-MCPP-15_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer 'std::make_shared' to the direct use of new" id="CODSTA-MCPP-16_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer to use std::unique_ptr instead of std::auto_ptr" id="CODSTA-MCPP-16_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="'std::make_unique' shall be used to construct objects owned by 'std::unique_ptr'" id="CODSTA-MCPP-16_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Never return lambdas that capture local objects by reference" id="CODSTA-MCPP-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Never capture local objects from an outer lambda by reference" id="CODSTA-MCPP-17_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime" id="CODSTA-MCPP-17_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid unnecessary default capture modes in lambda expressions" id="CODSTA-MCPP-18_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid unnecessary lambda captures" id="CODSTA-MCPP-18_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Declare assignment operators with the ref-qualifier &amp;" id="CODSTA-MCPP-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use explicit ref-qualifiers on auto declarations in range-based 'for' loops" id="CODSTA-MCPP-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-MCPP" desc="If a public destructor of a class is non-virtual, then the class should be declared final" id="CODSTA-MCPP-23" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Only one of virtual, override or final should be specified in a member function declaration" id="CODSTA-MCPP-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Digit sequences separators ' shall only be used consistently" id="CODSTA-MCPP-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A pointer to member virtual function shall only be tested for equality with null-pointer-constant" id="CODSTA-MCPP-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A lambda shall not be an operand to typeid" id="CODSTA-MCPP-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use smart pointers when passing a pointer to an object in a thread" id="CODSTA-MCPP-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Consider using 'std::unique_ptr' instead of 'std::shared_ptr' for local objects" id="CODSTA-MCPP-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Define both sized and unsized versions of operator delete" id="CODSTA-MCPP-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-MCPP" desc="Static and thread-local objects shall be constant-initialized" id="CODSTA-MCPP-32" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="User defined literals operators shall only perform conversion of passed parameters" id="CODSTA-MCPP-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="CODSTA-MCPP-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object" id="CODSTA-MCPP-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr'" id="CODSTA-MCPP-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors" id="CODSTA-MCPP-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="3;" cat="CODSTA-MCPP" desc="Braced-initialization {}, without equals sign, shall be used for variable initialization" id="CODSTA-MCPP-38" sev="3" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A variable of type auto shall not be initialized using '{}' or '={}' braced-initialization" id="CODSTA-MCPP-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not overuse 'auto' specifier" id="CODSTA-MCPP-40" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The 'random_shuffle' identifier should not be used" id="CODSTA-MCPP-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not use the increment operator (++) on an operand of type 'bool'" id="CODSTA-MCPP-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The 'set_unexpected' identifier should not be used" id="CODSTA-MCPP-43" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Lambda expressions should not be defined inside another lambda expression" id="CODSTA-MCPP-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Return type of a non-void return type lambda expression should be explicitly specified" id="CODSTA-MCPP-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Include a parameter list in every lambda expression" id="CODSTA-MCPP-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid overloading constructors with std::initializer_list" id="CODSTA-MCPP-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Multiple output values from a function should be returned as a struct or tuple" id="CODSTA-MCPP-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="User-defined copy and move assignment operators should use user-defined no-throw swap function" id="CODSTA-MCPP-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" id="CODSTA-MCPP-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use const container calls when the result is immediately converted to a const iterator" id="CODSTA-MCPP-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not introduce virtual functions in a final class" id="CODSTA-MCPP-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not use std::move on objects declared with the const or const &amp; type" id="CODSTA-MCPP-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not create an rvalue reference of std::array" id="CODSTA-MCPP-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use std::call_once rather than the Double-Checked Locking pattern" id="CODSTA-MCPP-55" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer 'nullptr' over 'NULL' or '0'(zero)" id="CODSTA-MCPP-04" sev="4" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use constexpr to declare const variables whenever possible" id="CODSTA-MCPP-11_a_cpp11" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-MCPP" desc="Use constexpr to declare functions whenever possible" id="CODSTA-MCPP-11_b_cpp11" sev="4" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer smart pointer members over raw pointer members" id="CODSTA-MCPP-16_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer smart pointers over raw pointers for arrays or STL containers" id="CODSTA-MCPP-16_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer smart pointers over raw local pointers" id="CODSTA-MCPP-20" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not call lock() directly on a mutex" id="CODSTA-MCPP-21" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Line-splicing shall not be used in // comments" id="COMMENT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Prefer C++ style comment" id="COMMENT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="COMMENT" desc="Provide copyright information" id="COMMENT-02" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="COMMENT" desc="Every source file will be documented with an introductory comment that provides information on the file" id="COMMENT-03" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="11;" authUrg="2;" cat="COMMENT" desc="Document functions in comments that precede function definitions" id="COMMENT-04" sev="3" total="11" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Document functions in comments that precede function declarations" id="COMMENT-04_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="21;" authUrg="0;" cat="COMMENT" desc="Each variable declaration should be commented" id="COMMENT-05" sev="3" total="21" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Each typedef should be commented" id="COMMENT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Each enumeration value should be commented" id="COMMENT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Each structure member variable should be commented" id="COMMENT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="All usage of assembler shall be documented" id="COMMENT-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="COMMENT" desc="Use of floating-point arithmetic shall be documented" id="COMMENT-10" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="The character sequence // shall not be used within a C-style comment" id="COMMENT-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="The character sequence /* shall not be used within a C++-style comment" id="COMMENT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="12;" authUrg="0;" cat="COMMENT" desc="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" id="COMMENT-14" sev="3" total="12" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="COMMENT" desc="Function parameters and return type should be documented in a comment that precedes the function declaration" id="COMMENT-14_b" sev="3" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid buffer overflow due to defining incorrect format limits" id="CWE-119-c" origId="BD-PB-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid overflow when reading from a buffer" id="CWE-119-d" origId="BD-PB-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid overflow when writing to a buffer" id="CWE-119-e" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid tainted data in array indexes" id="CWE-119-f" origId="BD-SECURITY-ARRAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Prevent buffer overflows from tainted data" id="CWE-119-g" origId="BD-SECURITY-BUFWRITE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid buffer read overflow from tainted data" id="CWE-119-h" origId="BD-SECURITY-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid buffer write overflow from tainted data" id="CWE-119-i" origId="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid accessing arrays out of bounds" id="CWE-119-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid accessing arrays and pointers out of bounds" id="CWE-119-b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-119" desc="Suspicious use of 'strcpy' without checking size of source buffer" id="CWE-119-j" origId="CODSTA-143" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Ensure the output buffer is large enough when using path manipulation functions" id="CWE-119-k" origId="BD-PB-PATHBUF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-125" desc="Avoid overflow when reading from a buffer" id="CWE-125-c" origId="BD-PB-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-125" desc="Avoid buffer read overflow from tainted data" id="CWE-125-d" origId="BD-SECURITY-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-125" desc="Avoid accessing arrays out of bounds" id="CWE-125-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-125" desc="Avoid accessing arrays and pointers out of bounds" id="CWE-125-b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-190" desc="Avoid integer overflows" id="CWE-190-a" origId="BD-PB-INTOVERF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Avoid possible integer overflow in expressions in which the result is cast to a wider integer type" id="CWE-190-b" origId="MISRA-048_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" id="CWE-190-c" origId="PB-65" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type" id="CWE-190-d" origId="PB-65_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="CWE-190-e" origId="PB-66_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="CWE-190-f" origId="PB-66_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="CWE-190-g" origId="PB-73" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Avoid tainted data in array indexes" id="CWE-20-a" origId="BD-SECURITY-ARRAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against integer overflow/underflow from tainted data" id="CWE-20-b" origId="BD-SECURITY-INTOVERF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against command injection" id="CWE-20-d" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Avoid printing tainted data on the output console" id="CWE-20-e" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against environment injection" id="CWE-20-f" origId="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Exclude unsanitized user input from format strings" id="CWE-20-g" origId="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against SQL injection" id="CWE-20-h" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against file name injection" id="CWE-20-i" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Avoid passing unvalidated binary data to log methods" id="CWE-20-c" origId="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CWE-20" desc="Untrusted data is used as a loop boundary" id="CWE-20-j" origId="SECURITY-38" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-200" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="CWE-200-a" origId="SECURITY-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-22" desc="Protect against file name injection" id="CWE-22-a" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-269" desc="Observe correct revocation order while relinquishing privileges" id="CWE-269-a" origId="SECURITY-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-269" desc="Ensure that privilege relinquishment is successful" id="CWE-269-b" origId="SECURITY-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-287" desc="Do not use weak encryption functions" id="CWE-287-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-326" desc="Do not use weak encryption functions" id="CWE-326-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-362" desc="Avoid race conditions when using fork and file descriptors" id="CWE-362-d" origId="BD-TRS-FORKFILE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-362" desc="Do not use global variable with different locks set" id="CWE-362-e" origId="BD-TRS-MLOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-362" desc="Usage of functions prone to race is not allowed" id="CWE-362-a" origId="SECURITY-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-362" desc="Avoid race conditions while accessing files" id="CWE-362-b" origId="BD-TRS-FRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-362" desc="Use locks to prevent race conditions when modifying bit fields" id="CWE-362-c" origId="BD-TRS-BITLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-400" desc="Do not create variables on the stack above the defined limits" id="CWE-400-a" origId="BD-RES-STACKLIM" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-415" desc="Do not use resources that have been freed" id="CWE-415-a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-416" desc="Do not use resources that have been freed" id="CWE-416-a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-416" desc="Do not point to a wrapped object that has been freed" id="CWE-416-b" origId="BD-PB-WRAPESC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-416" desc="Freed memory shouldn't be accessed under any circumstances" id="CWE-416-c" origId="MRM-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-426" desc="Use care to ensure that LoadLibrary() will load the correct library" id="CWE-426-a" origId="SECURITY-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CWE-476" desc="Avoid null pointer dereferencing" id="CWE-476-a" origId="BD-PB-NP" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-476" desc="Do not check for null after dereferencing" id="CWE-476-b" origId="BD-PB-DEREF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-532" desc="Avoid passing sensitive data to functions that write to log files" id="CWE-532-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-611" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="CWE-611-a" origId="BD-SECURITY-XXEXRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-617" desc="Do not use assertions" id="CWE-617-a" origId="CODSTA-199" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Conversions shall not be performed between a pointer to a function and any other type than pointer to function" id="CWE-704-a" origId="CODSTA-124_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Conversions shall not be performed between non compatible pointer to a function types" id="CWE-704-b" origId="CODSTA-124_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="CWE-704-c" origId="CODSTA-125" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A cast shall not be performed between a pointer to object type and a pointer to a different object type" id="CWE-704-d" origId="CODSTA-126" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A cast shall not be performed between pointer to void and an arithmetic type" id="CWE-704-g" origId="CODSTA-129_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="An implicit conversion shall not be performed between pointer to void and an arithmetic type" id="CWE-704-h" origId="CODSTA-129_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="CWE-704-i" origId="CODSTA-130" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="CWE-704-j" origId="MISRA-043" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="CWE-704-k" origId="MISRA-043_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="CWE-704-l" origId="MISRA-043_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t'" id="CWE-704-e" origId="CODSTA-127_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A conversion should not be performed from pointer to void into pointer to object" id="CWE-704-f" origId="CODSTA-128" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-732" desc="Specify the access permission bits if a file is created using the 'open' or 'openat' system call" id="CWE-732-b" origId="SECURITY-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-732" desc="Call 'umask' before calling 'mkstemp'" id="CWE-732-a" origId="SECURITY-40" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CWE-770" desc="Validate potentially tainted data before it is used to determine the size of memory allocation" id="CWE-770-a" origId="BD-SECURITY-TDALLOC" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CWE-772" desc="Ensure resources are freed" id="CWE-772-a" origId="BD-RES-LEAKS" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-772" desc="Define a virtual destructor in classes used as base classes which have virtual functions" id="CWE-772-b" origId="OOP-22" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-78" desc="Protect against command injection" id="CWE-78-a" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid buffer overflow due to defining incorrect format limits" id="CWE-787-c" origId="BD-PB-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid overflow when writing to a buffer" id="CWE-787-d" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Prevent buffer overflows from tainted data" id="CWE-787-e" origId="BD-SECURITY-BUFWRITE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid buffer write overflow from tainted data" id="CWE-787-f" origId="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid accessing arrays out of bounds" id="CWE-787-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid accessing arrays and pointers out of bounds" id="CWE-787-b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Ensure the output buffer is large enough when using path manipulation functions" id="CWE-787-g" origId="BD-PB-PATHBUF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="2;" cat="CWE-798" desc="Do not hard code string literals" id="CWE-798-a" origId="CODSTA-203" sev="5" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-835" desc="Avoid infinite loops" id="CWE-835-a" origId="CODSTA-82" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-863" desc="Do not use 'cuserid' function" id="CWE-863-a" origId="SECURITY-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-89" desc="Protect against SQL injection" id="CWE-89-a" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="EXCEPT-01" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Throw by value, catch by reference" id="EXCEPT-02" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Do not throw from within destructor" id="EXCEPT-03" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="The assignment-expression of a throw statement shall not itself cause an exception to be thrown" id="EXCEPT-11" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="All exceptions should be rethrown or logged with standard logger" id="EXCEPT-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="EXCEPT" desc="C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.)" id="EXCEPT-05" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="EXCEPT" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="EXCEPT-06" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="An empty throw (throw;) shall only be used in the compound-statement of a catch handler" id="EXCEPT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="EXCEPT" desc="Exceptions shall be raised only after start-up and before termination of the program" id="EXCEPT-08" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="EXCEPT" desc="An exception object should not have pointer type" id="EXCEPT-09" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Control shall not be transferred into a try or catch block using a goto or a switch statement" id="EXCEPT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="NULL shall not be thrown explicitly" id="EXCEPT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="EXCEPT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="EXCEPT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="A class type exception shall always be caught by reference" id="EXCEPT-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="EXCEPT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="EXCEPT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="EXCEPT-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Exception objects must be nothrow copy constructible" id="EXCEPT-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="An explicitly declared copy constructor for a class that inherits from 'std::exception' should have a non-throwing exception specification" id="EXCEPT-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="All user-provided move constructors and move assignment operators shall not exit with an exception" id="EXCEPT-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Checked exceptions that could be thrown from a function shall be specified in the comment directly before the function declaration" id="EXCEPT-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Do not use throw exception specifications" id="EXCEPT-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Where multiple handlers are provided in a single 'try-catch' statement or 'function-try-block', any ellipsis (catch-all) handler shall occur last" id="EXCEPT-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Do not leave 'catch' blocks empty" id="EXCEPT-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Avoid using catch-all exception handlers" id="EXCEPT-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="FORMAT" desc="Place an opening brace '{' on its own line" id="FORMAT-02" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Place a closing brace '}' on its own line" id="FORMAT-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="FORMAT" desc="Physical lines should be less than eighty characters" id="FORMAT-04" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="The length of a macro should not exceed 10 lines" id="FORMAT-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Only one statement shall be allowed per line" id="FORMAT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding assignment operators" id="FORMAT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following assignment operators" id="FORMAT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding bitwise operators" id="FORMAT-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following bitwise operators" id="FORMAT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding and following bitwise operator '&amp;'" id="FORMAT-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character between a conditional statement keyword and its opening parenthesis" id="FORMAT-12" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a maximum of 1 ASCII space character following the opening parenthesis in conditional statements" id="FORMAT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding ternary conditional operator" id="FORMAT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following ternary conditional operator" id="FORMAT-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding and following relational and equality operators" id="FORMAT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no white space following '.' or '->' operator" id="FORMAT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no white space preceding '.' or '->' operator" id="FORMAT-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following all commas" id="FORMAT-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following all semicolons" id="FORMAT-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There should be no space between a unary operator &quot;!&quot; or &quot;~&quot; and its operand" id="FORMAT-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There should be no space between a increment/decrement operator (++/--) and its operand" id="FORMAT-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no white spaces between the 'return' statement or the 'sizeof' operator and the following opening parenthesis" id="FORMAT-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no spaces after the opening '(' and before closing ')' parenthesis that enclose the operand of the 'return' statement or the 'sizeof' operator" id="FORMAT-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="The operand of the 'sizeof' operator should be enclosed in parentheses" id="FORMAT-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="FORMAT" desc="Parenthesis shall be used with the &quot;return&quot; statement" id="FORMAT-25_b" sev="3" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding and following logical operators" id="FORMAT-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Line should be indented by a multiple of four spaces" id="FORMAT-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="FORMAT" desc="In a function definition, the return type of the function should be written on a separate line directly above the function name" id="FORMAT-28" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="FORMAT" desc="Multiple variable declarations shall not be allowed on the same line" id="FORMAT-29" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Place left parenthesis directly after function name" id="FORMAT-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Separate logical tests in conditional expressions" id="FORMAT-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="FORMAT" desc="Each variable should be declared in a separate declaration statement" id="FORMAT-33" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Braces &quot;{}&quot; which enclose a block should be placed in the same column" id="FORMAT-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="When declaring functions, the leading parenthesis and the first argument are to be written on the same line as the function name" id="FORMAT-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Sibling statement lines should be indented to the same level" id="FORMAT-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="First line in control statement body should be indented more than control statement keyword" id="FORMAT-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="When declaring functions with more than 2 parameters, the leading parenthesis and the first argument are to be written on the same line as the function name, each additional argument will be written on a separate line" id="FORMAT-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="FORMAT" desc="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" id="FORMAT-42" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="FORMAT" desc="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" id="FORMAT-43" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Braces (&quot;{}&quot;) which enclose a block will not have an empty line after &quot;{&quot; nor before &quot;}&quot;" id="FORMAT-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There should be no space between a unary operator &quot;&amp;&quot;, &quot;*&quot;, &quot;+&quot;, &quot;-&quot; and its operand" id="FORMAT-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There should be no space between an increment/decrement operator (++/--) and its operand in macro definition" id="FORMAT-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="FORMAT" desc="Place CV-qualifiers on the right hand side of the type they apply to" id="FORMAT-47_a" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name" id="FORMAT-47_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Parameter names in function declarations should not be enclosed in parentheses" id="FORMAT-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Local variable names in variable declarations should not be enclosed in parentheses" id="FORMAT-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="FORMAT" desc="The dereference operator '*' and the address-of operator '&amp;' should be directly connected with the type" id="FORMAT-32" sev="4" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Sort #include directives in alphabetical order" id="FORMAT-39" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="153;" authUrg="0;" cat="FORMAT" desc="Tabs that do not use ASCII spaces shall not be used" id="FORMAT-01" sev="5" total="153" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="White spaces after the opening square bracket '[' and before its closing square bracket ']' shall be used in consistent way" id="FORMAT-40" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no space between '[' opening square bracket and preceding token" id="FORMAT-41" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="All declarations of an object or function shall have compatible types" id="GLOBAL-COMPATDECLS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="Do not use more than one mutex for concurrent waiting operations on a condition variable" id="GLOBAL-CONDMUTEXVAR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" id="GLOBAL-EXCSPECDECL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="An inline function that is used in multiple translation units shall be defined in one and only one file" id="GLOBAL-ONEDEFINLINE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="The One Definition Rule shall not be violated" id="GLOBAL-ONEDEFRULE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A function template that is used in multiple translation units shall be defined in one and only one file" id="GLOBAL-ONEDEFTEMPL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A type that is used in multiple translation units shall be defined in one and only one file" id="GLOBAL-ONEDEFTYPE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="An identifier with external linkage shall have exactly one external definition" id="GLOBAL-ONEEXTERNDEF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="GLOBAL-ONEFILEDECL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="9;" authUrg="0;" cat="GLOBAL" desc="A project shall not contain non-volatile POD variables having only one use" id="GLOBAL-ONEUSEVAR" sev="3" total="9" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="The identifier name of a non-member object with static storage duration shall not be reused within a namespace" id="GLOBAL-REUSEDQUALGLOBVAR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="The identifier name of a non-member static function shall not be reused within a namespace" id="GLOBAL-REUSEDQUALSTATFUN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="All class templates, function templates, class template member functions and class template static members shall be instantiated at least one" id="GLOBAL-TEMPLNOINST" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A class, union or enum name (including qualification, if any) shall be a unique identifier" id="GLOBAL-UNIQUETYPE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A typedef name (including qualification, if any) shall be a unique identifier" id="GLOBAL-UNIQUETYPEDEF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="4;" authUrg="0;" cat="GLOBAL" desc="Every defined function with external linkage shall be used at least once" id="GLOBAL-UNUSEDFUNC" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A project shall not contain unused type declarations" id="GLOBAL-UNUSEDTYPE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="There shall be no unused parameters (named or unnamed) in the set of parameters for a virtual function and all the functions that override it" id="GLOBAL-UNUSEDVIRTPARAM" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A base class shall only be declared virtual if it is used in a diamond hierarchy" id="GLOBAL-VIRTBASECLASS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" id="GLOBAL-AVOIDEXTERN" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-10_1_1" desc="For multiple inheritance use virtual common base class" id="HICPP-10_1_1-a" origId="OOP-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-10_2_1" desc="Each overriding virtual function shall be declared with the override or final specifier" id="HICPP-10_2_1-a" origId="CODSTA-MCPP-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-10_3_1" desc="Be wary about using multiple inheritance of classes that are not abstract interfaces" id="HICPP-10_3_1-a" origId="OOP-07" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-11_1_1" desc="Avoid &quot;public&quot; data members" id="HICPP-11_1_1-a" origId="OOP-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-11_1_1" desc="Avoid 'protected' data members" id="HICPP-11_1_1-b" origId="OOP-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-11_2_1" desc="Avoid using the friend mechanism" id="HICPP-11_2_1-a" origId="OOP-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_1_1" desc="Constructors allowing for conversion should be made explicit" id="HICPP-12_1_1-a" origId="CODSTA-CPP-04" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_1_1" desc="User-conversion cast operators should be made explicit" id="HICPP-12_1_1-b" origId="CODSTA-MCPP-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_2_1" desc="Make destructors virtual in base classes" id="HICPP-12_2_1-a" origId="OOP-24" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_3_1" desc="Write operator delete if you write operator new" id="HICPP-12_3_1-a" origId="MRM-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_3_1" desc="Write operator delete[] if you write operator new[]" id="HICPP-12_3_1-b" origId="MRM-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-12_4_1" desc="Do not use dynamic type of an object under construction" id="HICPP-12_4_1-b" origId="BD-PB-VCTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-12_4_1" desc="Do not use dynamic type of an object under destruction" id="HICPP-12_4_1-c" origId="BD-PB-VDTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_4_2" desc="All member variables should be initialized in constructor" id="HICPP-12_4_2-a" origId="INIT-06" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_4_3" desc="Do not specify both an NSDMI and a member initializer in a constructor for the same non-static member" id="HICPP-12_4_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_4_4" desc="List members in an initialization list in the order in which they are declared" id="HICPP-12_4_4-a" origId="INIT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_4_5" desc="Use delegating constructors to reduce code duplication" id="HICPP-12_4_5-a" origId="CODSTA-CPP-106" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="HICPP-12_5_1" desc="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" id="HICPP-12_5_1-a" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_2" desc="Define special members as =default when the behavior is equivalent to the compiler's behavior" id="HICPP-12_5_2-a" origId="CODSTA-CPP-105" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_3" desc="A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member" id="HICPP-12_5_3-a" origId="OOP-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_4" desc="All user-provided move constructors and move assignment operators shall not exit with an exception" id="HICPP-12_5_4-a" origId="EXCEPT-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_6" desc="User-defined copy and move assignment operators should use user-defined no-throw swap function" id="HICPP-12_5_6-a" origId="CODSTA-MCPP-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_7" desc="Declare assignment operators with the ref-qualifier &amp;" id="HICPP-12_5_7-a" origId="CODSTA-MCPP-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_8" desc="The copy assignment operator shall be declared protected or private in an abstract class" id="HICPP-12_5_8-a" origId="OOP-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_1_1" desc="Write a using declaration to redeclare overloaded functions" id="HICPP-13_1_1-a" origId="OOP-17" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_1_2" desc="Avoid Overloading on Forwarding References" id="HICPP-13_1_2-a" origId="CODSTA-MCPP-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_1" desc="Avoid overloading logical operators AND, OR (&amp;&amp;, ||)" id="HICPP-13_2_1-a" origId="CODSTA-CPP-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_1" desc="Avoid overloading comma operator &quot;,&quot;" id="HICPP-13_2_1-b" origId="CODSTA-CPP-80" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_2" desc="A relational operator shall return a boolean value" id="HICPP-13_2_2-a" origId="CODSTA-CPP-101" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_2" desc="A binary arithmetic operator and a bitwise operator shall return a 'prvalue'" id="HICPP-13_2_2-b" origId="CODSTA-CPP-102" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_3" desc="Declare binary arithmetic and bitwise operators as non-members" id="HICPP-13_2_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_4" desc="When overloading the subscript operator (operator[]), implement both const and non-const versions" id="HICPP-13_2_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_5" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="HICPP-13_2_5-a" origId="CODSTA-CPP-91" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-14_1_1" desc="Do not use functions with variable numbers of arguments" id="HICPP-14_1_1-a" origId="MISRA-069" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-14_2_1" desc="All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template" id="HICPP-14_2_1-a" origId="TEMPL-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-14_2_2" desc="Overloaded function templates shall not be explicitly specialized" id="HICPP-14_2_2-a" origId="TEMPL-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-14_2_3" desc="Declare 'extern' an explicitly instantiated template" id="HICPP-14_2_3-a" origId="TEMPL-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-15_1_1" desc="Only use instances of std::exception for exceptions" id="HICPP-15_1_1-a" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-15_1_1" desc="Always throw the created std::exception object" id="HICPP-15_1_1-b" origId="BD-PB-STDEXC" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-15_2_1" desc="Do not throw from within destructor" id="HICPP-15_2_1-a" origId="EXCEPT-03" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-15_3_1" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="HICPP-15_3_1-a" origId="EXCEPT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-15_3_2" desc="Always catch exceptions" id="HICPP-15_3_2-a" origId="BD-PB-EXCEPT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-15_3_2" desc="Avoid throwing exceptions from functions that are declared not to throw" id="HICPP-15_3_2-c" origId="BD-PB-NOEXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-15_3_2" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="HICPP-15_3_2-b" origId="EXCEPT-06" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="HICPP-16_1_1" desc="Avoid using macro definitions" id="HICPP-16_1_1-a" origId="PREPROC-01" sev="3" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="HICPP-16_1_1-b" origId="PREPROC-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-16_1_1" desc="The #ifdef, #else, #elif preprocessor directives should not be used" id="HICPP-16_1_1-c" origId="PREPROC-11" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="Use multiple include guards" id="HICPP-16_1_1-d" origId="PFO-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-16_1_1" desc="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" id="HICPP-16_1_1-e" origId="PREPROC-10_b" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-16_1_1" desc="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="HICPP-16_1_1-f" origId="PREPROC-10_c" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="#error directive shall not be used" id="HICPP-16_1_1-g" origId="PREPROC-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="The #pragma directive shall not be used" id="HICPP-16_1_1-h" origId="PREPROC-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="#undef shall not be used" id="HICPP-16_1_1-i" origId="PREPROC-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_2" desc="Do not allow absolute or relative path names in #include statements" id="HICPP-16_1_2-a" origId="PREPROC-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_2" desc="The \ character should not occur in a header file name" id="HICPP-16_1_2-b" origId="NAMING-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_3" desc="Match the filename in a #include directive to the one on the filesystem" id="HICPP-16_1_3-a" origId="PREPROC-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_4" desc="Use &lt;> brackets for system and standard library headers. Use quotes for all other headers" id="HICPP-16_1_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="0;" authUrg="0;" cat="HICPP-16_1_5" desc="Avoid duplication of #include directives" id="HICPP-16_1_5-a" origId="CDD-DUPI" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_1_1" desc="Avoid using vector&lt;bool>" id="HICPP-17_1_1-a" origId="STL-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_2_1" desc="The error indicator 'errno' shall not be used" id="HICPP-17_2_1-b" origId="MISRA2004-20_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-17_2_1" desc="Wrap use of the C Standard Library" id="HICPP-17_2_1-a" sev="4" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_3_1" desc="Do not use std::move on objects declared with the const or const &amp; type" id="HICPP-17_3_1-a" origId="CODSTA-MCPP-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_3_2" desc="The 'std::forward' function shall be used to forward universal references" id="HICPP-17_3_2-a" origId="CODSTA-MCPP-13_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-17_3_3" desc="Do not subsequently use the argument to std::forward" id="HICPP-17_3_3-a" origId="BD-PB-SUBSEQFRWD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_3_4" desc="Do not create smart pointers of array type" id="HICPP-17_3_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_3_5" desc="Do not create an rvalue reference of std::array" id="HICPP-17_3_5-a" origId="CODSTA-MCPP-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_4_1" desc="Use const container calls when the result is immediately converted to a const iterator" id="HICPP-17_4_1-a" origId="CODSTA-MCPP-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_4_2" desc="Prefer 'std::make_shared' to the direct use of new" id="HICPP-17_4_2-a" origId="CODSTA-MCPP-16_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_5_1" desc="Follow remove-like algorithms by erase to remove elements from a container" id="HICPP-17_5_1-a" origId="STL-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-18_1_1" desc="Do not use platform-specific multi-threading facilities" id="HICPP-18_1_1-a" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_2_1" desc="Use high_integrity::thread in place of std::thread" id="HICPP-18_2_1-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-18_2_2" desc="Do not use global variable with different locks set" id="HICPP-18_2_2-a" origId="BD-TRS-MLOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-18_2_2" desc="Make const member functions thread-safe" id="HICPP-18_2_2-b" origId="BD-TRS-CMF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_2_3" desc="Do not share volatile data between threads" id="HICPP-18_2_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_2_4" desc="Use std::call_once rather than the Double-Checked Locking pattern" id="HICPP-18_2_4-a" origId="CODSTA-MCPP-55" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-18_3_1" desc="Avoid double locking" id="HICPP-18_3_1-a" origId="BD-TRS-DLOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-18_3_2" desc="Do not acquire locks in different order" id="HICPP-18_3_2-a" origId="BD-TRS-ORDER" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_3_3" desc="Do not use std::recursive_mutex" id="HICPP-18_3_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_3_4" desc="Only use std::unique lock when std::lock guard cannot be used" id="HICPP-18_3_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_3_5" desc="Do not access the members of std::mutex directly" id="HICPP-18_3_5-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_3_6" desc="Do not use relaxed atomics" id="HICPP-18_3_6-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_4_1" desc="Do not use std::condition_variable_any on a std::mutex" id="HICPP-18_4_1-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="Avoid conditions that always evaluate to the same value" id="HICPP-1_2_1-i" origId="BD-PB-CC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="Avoid switch with unreachable branches" id="HICPP-1_2_1-j" origId="BD-PB-SWITCH" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code in &quot;else&quot; block" id="HICPP-1_2_1-a" origId="MISRA2004-14_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="HICPP-1_2_1-b" origId="MISRA2004-14_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="HICPP-1_2_1-c" origId="MISRA2004-14_1_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code in switch statement" id="HICPP-1_2_1-d" origId="MISRA2004-14_1_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code in 'for' loop" id="HICPP-1_2_1-e" origId="MISRA2004-14_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="HICPP-1_2_1-f" origId="MISRA2004-14_1_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="HICPP-1_2_1-g" origId="MISRA2004-14_1_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="Avoid unreachable methods" id="HICPP-1_2_1-h" origId="BD-PB-UCMETH" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_2" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="HICPP-1_2_2-a" origId="MISRA2004-14_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_3_1" desc="Do not use the increment operator (++) on an operand of type 'bool'" id="HICPP-1_3_1-a" origId="CODSTA-MCPP-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_3_2" desc="The 'register' storage class specifier shall not be used" id="HICPP-1_3_2-a" origId="MISRA-028" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-1_3_3" desc="The C library shall not be used" id="HICPP-1_3_3-a" origId="CODSTA-CPP-59" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_3_4" desc="Do not use deprecated STL library features" id="HICPP-1_3_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_3_5" desc="Do not use throw exception specifications" id="HICPP-1_3_5-a" origId="EXCEPT-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="153;" authUrg="0;" cat="HICPP-2_1_1" desc="Tabs that do not use ASCII spaces shall not be used" id="HICPP-2_1_1-a" origId="FORMAT-01" sev="5" total="153" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_2_1" desc="Do not use the following digraphs: &lt;%, %>, &lt;:, :>, %:, %:%:" id="HICPP-2_2_1-a" origId="CODSTA-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_2_1" desc="Trigraphs shall not be used" id="HICPP-2_2_1-b" origId="MISRA2004-4_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_3_1" desc="Prefer C++ style comment" id="HICPP-2_3_1-a" origId="COMMENT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_3_2" desc="Do not use comments to remove sections of code" id="HICPP-2_3_2-a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-2_4_1" desc="Different identifiers shall be typographically unambiguous" id="HICPP-2_4_1-a" origId="NAMING-47" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_5_1" desc="String literals with different encoding prefixes shall not be concatenated" id="HICPP-2_5_1-a" origId="PB-38_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_5_2" desc="Octal constants (other than zero) shall not be used" id="HICPP-2_5_2-a" origId="MISRA2004-7_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="HICPP-2_5_3" desc="Prefer 'nullptr' over 'NULL' or '0'(zero)" id="HICPP-2_5_3-a" origId="CODSTA-MCPP-04" sev="4" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="HICPP-3_1_1-a" origId="MISRA2004-5_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="HICPP-3_1_1-b" origId="MISRA2004-5_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifiers declared in a local scope should not hide identifiers declared in a class scope" id="HICPP-3_1_1-c" origId="CODSTA-CPP-83" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope" id="HICPP-3_1_1-d" origId="CODSTA-CPP-84" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope" id="HICPP-3_1_1-e" origId="CODSTA-CPP-85" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_2_1" desc="Always declare functions at file scope" id="HICPP-3_2_1-a" origId="MISRA2004-8_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="HICPP-3_3_1" desc="Do not use variables with static storage duration" id="HICPP-3_3_1-a" sev="3" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_1" desc="The address of an object with automatic storage shall not be returned from a function" id="HICPP-3_4_1-a" origId="MISRA2004-17_6_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_2" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="HICPP-3_4_2-a" origId="MISRA2004-17_6_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_3" desc="Prefer smart pointers over raw local pointers" id="HICPP-3_4_3-a" origId="CODSTA-MCPP-20" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_3" desc="Do not call lock() directly on a mutex" id="HICPP-3_4_3-b" origId="CODSTA-MCPP-21" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_3" desc="Use RAII to prevent resource leaks" id="HICPP-3_4_3-c" origId="MRM-52" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-3_5_1" desc="Do not subtract two pointers that do not address elements of the same array" id="HICPP-3_5_1-c" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-3_5_1" desc="Do not compare two unrelated pointers" id="HICPP-3_5_1-d" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_5_1" desc="Unions shall not be used" id="HICPP-3_5_1-a" origId="MISRA2004-18_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="HICPP-3_5_1" desc="typedefs should be used in place of the basic types" id="HICPP-3_5_1-b" origId="MISRA2004-6_3_b" sev="3" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_1_1" desc="An identifier with array type passed as a function argument shall not decay to a pointer" id="HICPP-4_1_1-a" origId="PB-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_1_1" desc="Do not pass expression with array type to a function with pointer or array type parameter" id="HICPP-4_1_1-b" origId="PB-41_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="20;" authUrg="0;" cat="HICPP-4_2_1" desc="Apply the U suffix to literals used in a context that requires an unsigned integral expression" id="HICPP-4_2_1-a" sev="3" total="20" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="Avoid incorrect shift operations" id="HICPP-4_2_2-f" origId="BD-PB-BADSHIFT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="HICPP-4_2_2-a" origId="MISRA2004-12_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-4_2_2" desc="Avoid explicit type conversions (casts)" id="HICPP-4_2_2-b" origId="CODSTA-31" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="HICPP-4_2_2-c" origId="PB-66_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="Avoid integer overflows" id="HICPP-4_2_2-e" origId="BD-PB-INTOVERF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="HICPP-4_2_2-d" origId="PB-66_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_3_1" desc="Avoid implicit conversions from wider to narrower floating type" id="HICPP-4_3_1-a" origId="MISRA2004-10_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_3_1" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="HICPP-4_3_1-b" origId="MISRA2004-10_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_4_1" desc="Avoid implicit conversions from floating to integral type" id="HICPP-4_4_1-a" origId="MISRA2004-10_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="2;" cat="HICPP-5_1_1" desc="Avoid magic numbers" id="HICPP-5_1_1-a" origId="CODSTA-26" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Don't write code that depends on the order of evaluation of function arguments" id="HICPP-5_1_2-b" origId="MISRA2004-12_2_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="HICPP-5_1_2-a" origId="MISRA2004-12_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="HICPP-5_1_2-c" origId="MISRA2004-12_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="HICPP-5_1_2-d" origId="MISRA2004-12_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="HICPP-5_1_2-e" origId="MISRA2004-12_2_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Do not use more than one volatile between two adjacent sequence points" id="HICPP-5_1_2-f" origId="MISRA2004-12_2_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Don't write code that depends on the order of evaluation of function calls" id="HICPP-5_1_2-g" origId="MISRA2004-12_2_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" id="HICPP-5_1_2-h" origId="MISRA2004-12_13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="The comma operator shall not be used" id="HICPP-5_1_2-i" origId="MISRA2004-12_10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="The result of a built-in assignment operator should not be used" id="HICPP-5_1_2-j" origId="CODSTA-138" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_3" desc="Use parentheses unless all operators in the expression are the same" id="HICPP-5_1_3-a" origId="MISRA2004-12_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_3" desc="The operands of a logical &amp;&amp; or || shall be primary-expressions" id="HICPP-5_1_3-b" origId="MISRA2004-12_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_4" desc="Do not capture variables implicitly in a lambda" id="HICPP-5_1_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_5" desc="Include a parameter list in every lambda expression" id="HICPP-5_1_5-a" origId="CODSTA-MCPP-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="HICPP-5_1_6-a" origId="MISRA2004-12_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="HICPP-5_1_6-b" origId="MISRA2004-12_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="HICPP-5_1_6-c" origId="MISRA2004-12_3_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="HICPP-5_1_6-d" origId="MISRA2004-12_4_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The operand of the 'typeid' operator shall not contain any expression that has side effects" id="HICPP-5_1_6-e" origId="CODSTA-CPP-104" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The operand of the 'typeid' operator shall not contain a function call that causes side effects" id="HICPP-5_1_6-f" origId="CODSTA-CPP-104_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="HICPP-5_2_1" desc="Avoid null pointer dereferencing" id="HICPP-5_2_1-c" origId="BD-PB-NP" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-5_2_1" desc="Avoid accessing arrays out of bounds" id="HICPP-5_2_1-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-5_2_1" desc="Avoid accessing arrays and pointers out of bounds" id="HICPP-5_2_1-b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_2_2" desc="Functions shall not call themselves, either directly or indirectly" id="HICPP-5_2_2-a" origId="MISRA2004-16_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-5_2_2" desc="Do not use recursion" id="HICPP-5_2_2-b" origId="BD-PB-RECFUN" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_3_1" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="HICPP-5_3_1-a" origId="MISRA2004-12_9" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_3_2" desc="Do not use calloc, malloc, realloc and free functions" id="HICPP-5_3_2-a" origId="MRM-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-5_3_3" desc="Properly deallocate dynamically allocated resources" id="HICPP-5_3_3-c" origId="BD-RES-BADDEALLOC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_3_3" desc="Never provide brackets ([]) for delete when deallocating non-arrays" id="HICPP-5_3_3-a" origId="MRM-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_3_3" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="HICPP-5_3_3-b" origId="MRM-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="1;" cat="HICPP-5_4_1" desc="Prefer C++-style casts" id="HICPP-5_4_1-a" origId="CODSTA-CPP-11" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_4_1" desc="Avoid using reinterpret_cast" id="HICPP-5_4_1-b" origId="CODSTA-CPP-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_4_1" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="HICPP-5_4_1-c" origId="MISRA2004-11_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_4_2" desc="Do not cast an expression to an enumeration type" id="HICPP-5_4_2-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_4_3" desc="Down casting (casting from base to derived class) shall not be allowed" id="HICPP-5_4_3-a" origId="OOP-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-5_5_1" desc="Avoid division by zero" id="HICPP-5_5_1-a" origId="BD-PB-ZERO" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_6_1" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="HICPP-5_6_1-a" origId="CODSTA-63" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_7_1" desc="Floating-point expressions shall not be tested for equality or inequality" id="HICPP-5_7_1-a" origId="MISRA2004-13_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_7_2" desc="A pointer to member virtual function shall only be tested for equality with null-pointer-constant" id="HICPP-5_7_2-a" origId="CODSTA-MCPP-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_8_1" desc="The conditional operator should not be used as a sub-expression" id="HICPP-5_8_1-a" origId="CODSTA-224" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_1" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="HICPP-6_1_1-a" origId="MISRA2004-14_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_1" desc="'if' and 'else' should be followed by a compound statement" id="HICPP-6_1_1-b" origId="MISRA2004-14_9" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_2" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="HICPP-6_1_2-a" origId="MISRA2004-14_10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_2" desc="The final clause of a switch statement shall be the default clause" id="HICPP-6_1_2-b" origId="MISRA2004-15_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_3" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="HICPP-6_1_3-a" origId="CODSTA-64" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_4" desc="Every switch statement will have at least two cases and a potential default" id="HICPP-6_1_4-a" origId="CODSTA-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_4" desc="A switch expression shall not represent a value that is effectively Boolean" id="HICPP-6_1_4-b" origId="MISRA2004-15_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_2_1" desc="A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" id="HICPP-6_2_1-a" origId="CODSTA-MCPP-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_2_2" desc="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" id="HICPP-6_2_2-a" origId="CODSTA-168" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_2_3" desc="Do not modify for loop counter within a body of the loop" id="HICPP-6_2_3-a" origId="MISRA2004-13_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_2_4" desc="The third clause of a 'for' statement shall be well-formed" id="HICPP-6_2_4-a" origId="CODSTA-169_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_3_1" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="HICPP-6_3_1-a" origId="MISRA2004-15_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_3_1" desc="The goto statement shall jump to a label declared later in the same function body" id="HICPP-6_3_1-b" origId="CODSTA-77" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_3_1" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="HICPP-6_3_1-c" origId="CODSTA-78" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_3_2" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="HICPP-6_3_2-a" origId="MISRA2004-16_8_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_4_1" desc="Declare variables as locally as possible" id="HICPP-6_4_1-a" origId="OPT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_4_1" desc="Postpone variable definitions as long as possible" id="HICPP-6_4_1-b" origId="OPT-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="HICPP-7_1_1" desc="Multiple variable declarations shall not be allowed on the same line" id="HICPP-7_1_1-a" origId="FORMAT-29" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="HICPP-7_1_1" desc="Each variable should be declared in a separate declaration statement" id="HICPP-7_1_1-b" origId="FORMAT-33" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_10" desc="Use static_assert for assertions involving compile time constants" id="HICPP-7_1_10-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="HICPP-7_1_2" desc="Declare parameters or local variable as const whenever possible" id="HICPP-7_1_2-a" origId="CODSTA-CPP-53" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_3" desc="Do not place type specifiers before non-type specifiers in a declaration" id="HICPP-7_1_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-7_1_4" desc="Place CV-qualifiers on the right hand side of the type they apply to" id="HICPP-7_1_4-a" origId="FORMAT-47_a" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_5" desc="Do not inline large functions" id="HICPP-7_1_5-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_6" desc="The plain char type shall be used only for the storage and use of character values" id="HICPP-7_1_6-a" origId="MISRA2004-6_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="HICPP-7_1_6" desc="Use class types or typedefs to abstract scalar quantities and standard integer types" id="HICPP-7_1_6-b" sev="3" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_6" desc="Use class types or typedefs to abstract scalar quantities and standard integer types" id="HICPP-7_1_6-c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_7" desc="Use a trailing return type syntax if the return type is preceded by the 'typename' keyword" id="HICPP-7_1_7-a" origId="TEMPL-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-7_1_8" desc="Use auto id = expr when declaring a variable that is the same type as the initializer function call" id="HICPP-7_1_8-a" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_9" desc="Do not explicitly specify the return type of a lambda" id="HICPP-7_1_9-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_2_1" desc="Use an explicit enumeration base and ensure that it is large enough to store all enumerators" id="HICPP-7_2_1-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_2_2" desc="Initialize all, only the first, or none of the enumerators in an enumeration" id="HICPP-7_2_2-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_3_1" desc="using-directives shall not be used" id="HICPP-7_3_1-a" origId="CODSTA-CPP-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-7_4_1" desc="Do not use static keyword except inside functions and classes" id="HICPP-7_4_1-a" origId="CODSTA-CPP-50" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="HICPP-7_4_2" desc="An inline function that is used in multiple translation units shall be defined in one and only one file" id="HICPP-7_4_2-a" origId="GLOBAL-ONEDEFINLINE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="HICPP-7_4_2" desc="A function template that is used in multiple translation units shall be defined in one and only one file" id="HICPP-7_4_2-b" origId="GLOBAL-ONEDEFTEMPL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="HICPP-7_4_2" desc="A type that is used in multiple translation units shall be defined in one and only one file" id="HICPP-7_4_2-c" origId="GLOBAL-ONEDEFTYPE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="HICPP-7_4_3" desc="A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="HICPP-7_4_3-a" origId="GLOBAL-ONEFILEDECL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_5_1" desc="Do not use the asm declaration" id="HICPP-7_5_1-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="HICPP-8_1_1" desc="The declaration should not contain more than one level of pointer indirection" id="HICPP-8_1_1-a" origId="CODSTA-89" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_2_1" desc="The identifiers used in the declaration and definition of a function shall be identical" id="HICPP-8_2_1-a" origId="MISRA2004-16_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_2_2" desc="Avoid functions with more than 5 parameters" id="HICPP-8_2_2-a" origId="METRICS-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_2_3" desc="Pass small objects with a trivial copy constructor by value" id="HICPP-8_2_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_2_3" desc="Pass small objects with a trivial copy constructor by value" id="HICPP-8_2_3-b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_2_4" desc="Do not pass std::unique_ptr by const reference" id="HICPP-8_2_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_3_1" desc="Follow the Cyclomatic Complexity limit of 10" id="HICPP-8_3_1-a" origId="METRICS-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_3_3" desc="Do not use default arguments" id="HICPP-8_3_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_3_4" desc="Define rvalue reference functions that have a const parameter as =delete" id="HICPP-8_3_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-8_4_1" desc="Avoid use before initialization" id="HICPP-8_4_1-a" origId="BD-PB-NOTINIT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-8_4_1" desc="Do not use resources that have been freed" id="HICPP-8_4_1-b" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_4_1" desc="All automatic variables shall have been assigned a value before being used" id="HICPP-8_4_1-c" origId="MISRA-030" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_4_2" desc="The initializer for an aggregate or union shall be enclosed in braces" id="HICPP-8_4_2-a" origId="INIT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_1_1" desc="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="HICPP-9_1_1-a" origId="CODSTA-CPP-78" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_1_2" desc="Do not redefine an inherited virtual function with a different default parameter value" id="HICPP-9_1_2-a" origId="OOP-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_1_3" desc="Const member functions shall not return non-const pointers or references to class-data" id="HICPP-9_1_3-a" origId="CODSTA-CPP-77" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_1_4" desc="Public member functions shall not return non-const handles to private/protected class-data" id="HICPP-9_1_4-a" origId="OOP-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_1_5" desc="Do not introduce virtual functions in a final class" id="HICPP-9_1_5-a" origId="CODSTA-MCPP-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_2_1" desc="Bit-fields shall have explicitly unsigned integral or enumeration types only" id="HICPP-9_2_1-a" origId="CODSTA-96" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not initialize a reference to an object whose address can be changed" id="INIT-05" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="All member variables should be initialized in constructor" id="INIT-06" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Initialize static class members" id="INIT-09" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not use uninitialized nonstatic member variables in base class constructors" id="INIT-13_a" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not use uninitialized nonstatic member variables of nonvirtual base classes in virtual base class constructors" id="INIT-13_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="9;" authUrg="0;" cat="INIT" desc="Initialize all pointer variables" id="INIT-04" sev="2" total="9" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="An assignment operator shall assign all data members" id="INIT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Objects with external linkage should not be initialized in a header file" id="INIT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not initialize unsigned integer variables with signed constants" id="INIT-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="INIT" desc="Initialize all variables" id="INIT-03" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Make class members' initialization explicit by providing user-defined constructor" id="INIT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="User-defined constructor must be provided to ensure the proper initialization of dynamically allocated class objects" id="INIT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="List members in an initialization list in the order in which they are declared" id="INIT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Avoid initialization order problems across translation units by replacing non-local static objects with local static objects" id="INIT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not assume that members are initialized in any special order in constructors" id="INIT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not use possibly uninitialized nonstatic member variables of base classes in base class constructors" id="INIT-13_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="The initializer for an aggregate or union shall be enclosed in braces" id="INIT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="User-defined constructors that initialize data members with the same constant values across all constructors should initialize using NSDMI instead" id="INIT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Consider adding constructor to initialize 'struct' member variables" id="INIT-15" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Prefer initialization to assignment in constructors" id="INIT-14" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All functions shall have a cyclomatic complexity number of 20 or less" id="JSF-003" origId="METRICS-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Follow the Essential Complexity limit of 1" id="JSF-003_b" origId="METRICS-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Capital 'L' shall be used instead of lowercase 'l' to indicate long" id="JSF-014" origId="PORT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Ensure that array indices are within the bounds of the array" id="JSF-015" origId="MISRA-004_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The error indicator 'errno' shall not be used" id="JSF-017" origId="MISRA2004-20_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The macro 'offsetof', in library &lt;stddef.h>, shall not be used" id="JSF-018" origId="MISRA2004-20_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="'setlocale' function shall not be used" id="JSF-019" origId="MISRA-121_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="&lt;locale.h> shall not be used" id="JSF-019_b" origId="MISRA-121_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The 'setjmp' macro and the 'longjmp' function shall not be used" id="JSF-020" origId="MISRA2004-20_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The standard header file &lt;setjmp.h> shall not be used" id="JSF-020_b" origId="MISRA2004-20_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The standard header file &lt;signal.h> shall not be used" id="JSF-021" origId="MISRA2004-20_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="JSF-021_b" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="The input/output library &lt;stdio.h> shall not be used" id="JSF-022" origId="PREPROC-18" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="The library functions atof, atoi and atol from library &lt;stdlib.h> shall not be used" id="JSF-023" origId="MISRA2004-20_10" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The library function 'abort' of &lt;stdlib.h> shall not be used" id="JSF-024" origId="PB-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The library function 'exit' of &lt;stdlib.h> shall not be used" id="JSF-024_b" origId="PB-75_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The library function 'getenv' of &lt;stdlib.h> shall not be used" id="JSF-024_c" origId="SECURITY-52" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The library function 'system' of &lt;stdlib.h> shall not be used" id="JSF-024_d" origId="SECURITY-48_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The time handling functions of library &lt;time.h> shall not be used" id="JSF-025" origId="MISRA2004-20_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="The #ifdef, #else, #elif preprocessor directives should not be used" id="JSF-026" origId="PREPROC-11" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="The #if preprocessor directive should not be used" id="JSF-026_b" origId="PREPROC-11_b" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="#error directive shall not be used" id="JSF-026_c" origId="PREPROC-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The #pragma directive shall not be used" id="JSF-026_d" origId="PREPROC-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="#undef shall not be used" id="JSF-026_e" origId="PREPROC-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="JSF" desc="The #define pre-processor directive shall not be used to create inline macros" id="JSF-029" origId="MISRA2004-19_7" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="The #define pre-processor directive shall not be used to define constant values" id="JSF-030" origId="CODSTA-03" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="JSF" desc="The #include directive shall use the &lt;filename.h> notation to include header files" id="JSF-033" origId="PREPROC-09" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="User-specified C++ external identifiers should differ in the first 64 characters" id="JSF-046_a" origId="PORT-34_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="User-specified C++ internal identifiers should differ from external identifiers in the first 64 characters" id="JSF-046_b" origId="PORT-34_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="User-specified C++ internal identifiers declared in the same scope should differ in the first 64 characters" id="JSF-046_c" origId="PORT-34_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers for constant and enumerator values shall be lowercase" id="JSF-052" origId="NAMING-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The following character sequences shall not appear in header file names: ', \, /*, //, or &quot; " id="JSF-053.1" origId="PB-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The statements forming the body of a 'while', 'do...while', 'switch' or 'for' statement shall always be enclosed in braces" id="JSF-059_a" origId="MISRA2004-14_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The statements forming the body of an 'if', 'else if' or 'else' statement shall always be enclosed in braces" id="JSF-059_b" origId="MISRA2004-14_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Declare both private copy constructor and copy assignment operator at the same time" id="JSF-068" origId="MRM-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Freed memory shall not be accessed under any circumstances" id="JSF-070.1" origId="MRM-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Destructor shall not be called manually" id="JSF-070.1_b" origId="MRM-31_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Public and protected methods shall not be invoked by class constructor" id="JSF-071" origId="PB-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A class's virtual functions shall not be invoked from any of its constructors" id="JSF-071.1" origId="OOP-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A class's virtual functions shall not be invoked from its destructor" id="JSF-071.1_b" origId="OOP-16_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All member variables shall be initialized in constructor" id="JSF-071_b" origId="INIT-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A class's virtual functions shall not be invoked from any of its constructors" id="JSF-071_c" origId="OOP-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Uninitialized nonstatic member variables shall not be used in base class constructors" id="JSF-071_d" origId="INIT-13_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Uninitialized nonstatic member variables of nonvirtual base classes shall not be used in virtual base class constructors" id="JSF-071_e" origId="INIT-13_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Possibly uninitialized nonstatic member variables of base classes shall not be used in base class constructors" id="JSF-071_f" origId="INIT-13_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Members of the initialization list shall be listed in the order in which they are declared in the class" id="JSF-075" origId="INIT-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A copy constructor and a copy assignment operator shall be declared for classes that contain pointers to data items or nontrivial destructors" id="JSF-076" origId="MRM-49" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A copy constructor shall copy all data members and bases" id="JSF-077" origId="MRM-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The definition of a constructor shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor" id="JSF-077.1" origId="PB-24" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All base classes with a virtual function shall define a virtual destructor" id="JSF-078" origId="OOP-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Call fclose() on pointer member in destructor if the pointer was used to open a file" id="JSF-079" origId="MRM-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Call delete on pointer members in destructors" id="JSF-079_b" origId="MRM-33" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The assignment operator shall handle self-assignment correctly" id="JSF-081" origId="OOP-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An assignment operator shall return a reference to *this" id="JSF-082" origId="CODSTA-CPP-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An assignment operator shall assign all data members" id="JSF-083_a" origId="INIT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An assignment operator shall assign all data bases" id="JSF-083_b" origId="MRM-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Multiple inheritance shall be limited to at most 1 protected implementation" id="JSF-088" origId="OOP-07_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A stateful virtual base shall be explicitly declared in each derived class that accesses it" id="JSF-088.1" origId="OOP-39_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Multiple inheritance shall not use any public implementations" id="JSF-088_b" origId="OOP-07_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A base class shall not be both virtual and non-virtual in the same hierarchy" id="JSF-089" origId="OOP-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An inherited nonvirtual function shall not be redefined in a derived class" id="JSF-094" origId="OOP-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Member functions declared in derived class shall not hide functions declared in base classes" id="JSF-094_b" origId="OOP-53" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An inherited default parameter shall never be redefined" id="JSF-095" origId="OOP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arrays shall not be treated polymorphically" id="JSF-096" origId="PB-57" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arrays shall not be used in interfaces" id="JSF-097" origId="CODSTA-CPP-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Neither operand of an equality operator (== or !=) shall be a pointer to a virtual member function" id="JSF-097.1" origId="CODSTA-CPP-79" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arrays shall not be used in private or protected methods" id="JSF-097_b" origId="CODSTA-CPP-55_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="Arrays shall not be used in global functions" id="JSF-097_c" origId="CODSTA-142" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arrays shall not be passed to functions as array/pointer parameters" id="JSF-097_d" origId="PB-41_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions which are called with array argument shall not be declared with pointer parameter" id="JSF-097_e" origId="CODSTA-142_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions shall always be declared at file scope" id="JSF-107" origId="MISRA2004-8_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions with variable numbers of arguments shall not be used" id="JSF-108" origId="MISRA-069" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A function shall not return a pointer or reference to a non-static local object" id="JSF-111" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A function shall not return a pointer or a reference to a parameter that is passed by const reference" id="JSF-111_a" origId="PB-39_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All exit points of value-returning functions shall be through return statements" id="JSF-114" origId="MISRA2004-16_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions shall not call themselves, either directly or indirectly" id="JSF-119" origId="MISRA2004-16_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Only valid C++ style comments (//) shall be used" id="JSF-126" origId="COMMENT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Code that is not used (commented out) shall be deleted" id="JSF-127" origId="MISRA2004-2_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="JSF-135_a" origId="MISRA2004-5_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers declared in an inner local scope shall not hide identifiers declared in an outer local scope" id="JSF-135_b" origId="MISRA2004-5_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers declared in a local scope shall not hide identifiers declared in a class scope" id="JSF-135_c" origId="CODSTA-CPP-83" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers declared in a class scope shall not hide identifiers declared in a global or namespace scope" id="JSF-135_d" origId="CODSTA-CPP-84" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers declared in an inner class scope shall not hide identifiers declared in outer class scope" id="JSF-135_e" origId="CODSTA-CPP-85" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers shall not simultaneously have both internal and external linkage in the same translation unit" id="JSF-138_a" origId="MISRA-024" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" id="JSF-138_b" origId="MISRA2004-8_11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The register storage class specifier shall not be used" id="JSF-140" origId="MISRA-028" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All automatic variables shall have been assigned a value before being used" id="JSF-142_a" origId="MISRA-030" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="All variables shall be initialized before use" id="JSF-142_b" origId="INIT-03" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" id="JSF-144" origId="INIT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="In an enumerator list, the '=' construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized" id="JSF-145" origId="MISRA2004-9_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The underlying bit representations of floating point numbers shall not be used in any way by the programmer" id="JSF-147" origId="MISRA-016" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Enumeration types shall be used instead of integer types (and constants) to select from a limited series of choices" id="JSF-148" origId="CODSTA-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Octal constants (other than zero) shall not be used" id="JSF-149" origId="MISRA2004-7_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A string literal shall not be modified" id="JSF-151.1" origId="PB-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="JSF" desc="Multiple variable declarations shall not be allowed on the same line" id="JSF-152" origId="FORMAT-29" sev="2" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Unions shall not be used" id="JSF-153" origId="MISRA2004-18_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Bit-fields shall have explicitly unsigned integral or enumeration types only" id="JSF-154" origId="CODSTA-96" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All the members of a structure (or class) shall be named" id="JSF-156" origId="MISRA-113" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The right hand operand of a &amp;&amp; or || operator shall not contain side effects" id="JSF-157" origId="MISRA2004-12_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators" id="JSF-158" origId="CODSTA-104" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Operators ||, &amp;&amp; shall not be overloaded" id="JSF-159" origId="CODSTA-CPP-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Operator unary &amp; shall not be overloaded" id="JSF-159_b" origId="CODSTA-CPP-68" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An assignment expression shall be used only as the expression in an expression statement" id="JSF-160" origId="MISRA2004-13_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Signed and unsigned values shall not be mixed in comparison operations" id="JSF-162_a" origId="CODSTA-99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Signed and unsigned values shall not be mixed in second and third operand of conditional operator" id="JSF-162_b" origId="CODSTA-101" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Signed and unsigned values shall not be mixed in arithmetic operations" id="JSF-162_c" origId="CODSTA-100" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Unsigned arithmetic shall not be used" id="JSF-163" origId="PB-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="JSF" desc="The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the left-hand operand" id="JSF-164" origId="BD-PB-BADSHIFT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The left-hand operand of a right-shift operator shall not have a negative value" id="JSF-164.1" origId="PB-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The unary minus operator shall not be applied to an unsigned expression" id="JSF-165" origId="MISRA2004-12_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't assign the dividend of two integers to a floating-point type" id="JSF-167_a" origId="PB-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The comma operator shall not be used" id="JSF-168_b" origId="MISRA2004-12_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="More than 2 levels of pointer indirection shall not be used" id="JSF-170" origId="MISRA2004-17_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="JSF" desc="Relational operators shall not be applied to pointer types except where they point to the same array" id="JSF-171" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The address of an object with automatic storage shall not be assigned to an object which persists after the object has ceased to exist" id="JSF-173" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The null pointer shall not be de-referenced" id="JSF-174_a" origId="MISRA-107_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The null pointer shall not be de-referenced" id="JSF-174_b" origId="MISRA-107_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="NULL identifier shall not be used; use plain 0 instead" id="JSF-175" origId="CODSTA-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Down casting (casting from base to derived class) shall not be allowed" id="JSF-178" origId="OOP-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A pointer to a virtual base class shall not be converted to a pointer to a derived class" id="JSF-179" origId="OOP-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="JSF-180_a" origId="MISRA-043" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid implicit conversions from floating to integral type" id="JSF-180_b" origId="MISRA2004-10_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid implicit conversions from wider to narrower floating type" id="JSF-180_c" origId="MISRA2004-10_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid conversions of constant values to a narrower type" id="JSF-180_d" origId="PORT-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid implicit conversions from signed to unsigned type" id="JSF-180_e" origId="PB-56" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="JSF-180_f" origId="MISRA-043_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="JSF-180_g" origId="MISRA-043_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Type casting from any type to or from pointers shall not be used" id="JSF-182" origId="CODSTA-135" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Floating point numbers shall not implicitly be converted to integers" id="JSF-184_a" origId="MISRA2004-10_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="JSF-185" origId="CODSTA-CPP-66" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code in 'else' block" id="JSF-186_a" origId="MISRA2004-14_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="JSF-186_b" origId="MISRA2004-14_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code in 'if', 'else', 'while' and 'for' block" id="JSF-186_c" origId="MISRA2004-14_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code in 'switch' statement" id="JSF-186_d" origId="MISRA2004-14_1_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code in 'for' loop" id="JSF-186_e" origId="MISRA2004-14_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="JSF-186_f" origId="MISRA2004-14_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code after 'if' or 'switch' statement inside 'while', 'for' or 'do...while' loop" id="JSF-186_g" origId="MISRA2004-14_1_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Every defined function with internal linkage shall be used" id="JSF-186_h" origId="OPT-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All non-null statements shall potentially have a side-effect" id="JSF-187" origId="MISRA2004-14_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The goto statement shall not be used" id="JSF-189" origId="MISRA2004-14_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The continue statement shall not be used" id="JSF-190" origId="MISRA2004-14_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The break statement shall not be used (except to terminate the cases of a switch statement)" id="JSF-191" origId="MISRA-058" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="JSF-191_a" origId="CODSTA-79" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Every non-empty case clause in a switch statement shall be terminated with a break statement" id="JSF-193" origId="MISRA2004-15_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All switch statements that do not intend to test for every enumeration value shall contain a final default clause" id="JSF-194" origId="CODSTA-61" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Floating point variables shall not be used as loop counters" id="JSF-197" origId="MISRA-065" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Numeric variables being used within a for loop for iteration counting shall not be modified in the body of the loop" id="JSF-201" origId="MISRA2004-13_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Floating point variables shall not be tested for exact equality or inequality" id="JSF-202" origId="MISRA2004-13_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Evaluation of expressions shall not lead to overflow/underflow" id="JSF-203" origId="PB-73" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="JSF-204.1_a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write code that depends on the order of evaluation of function arguments" id="JSF-204.1_b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="JSF-204.1_c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="JSF-204.1_d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="JSF-204.1_e" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Do not use more than one volatile in one expression" id="JSF-204.1_f" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write code that depends on the order of evaluation of function calls" id="JSF-204.1_g" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A single operation with side-effect shall only be used in the proper context" id="JSF-204_a" origId="CODSTA-102" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A call of function with side-effect shall only be used in the proper context" id="JSF-204_b" origId="CODSTA-103" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The second or third operand of a ternary operator '?:' shall not contain side effects" id="JSF-204_d" origId="CODSTA-105" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The volatile keyword shall not be used" id="JSF-205" origId="MISRA-046_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="Dynamic heap memory allocation shall not be used" id="JSF-206" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="C++ exceptions shall not be used" id="JSF-208" origId="EXCEPT-05" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Typedefs that indicate size and signedness shall be used in place of the basic types" id="JSF-209" origId="MISRA2004-6_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="JSF" desc="Typedefs that indicate size and signedness shall be used in place of the basic types" id="JSF-209_b" origId="MISRA2004-6_3_b" sev="2" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier" id="JSF-210.1" origId="PORT-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Algorithms shall not assume particular memory alignment" id="JSF-211" origId="MISRA2004-11_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used" id="JSF-213_e" origId="CODSTA-97" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Assuming that non-local static objects, in separate translation units, are initialized in a special order shall not be done" id="JSF-214" origId="INIT-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs)" id="JSF-001" origId="METRICS-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Only those characters specified in the C++ basic source character set will be used" id="JSF-009" origId="MISRA-005" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Values of character types will be restricted to a defined and documented subset of ISO 10646-1" id="JSF-010" origId="MISRA-006" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Trigraphs will not be used" id="JSF-011" origId="MISRA2004-4_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The following digraphs will not be used &lt;%, %>, &lt;:, :>, %:, %:%:" id="JSF-012" origId="CODSTA-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Wide string literals (for example L&quot;abc&quot;) will not be used" id="JSF-013" origId="MISRA-008" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="#ifndef, #define and #endif will be used to prevent multiple inclusions of the same header file" id="JSF-027" origId="PFO-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="JSF-028" origId="PREPROC-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" id="JSF-028_b" origId="PREPROC-10_b" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="JSF" desc="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" id="JSF-031" origId="PREPROC-01" sev="3" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="JSF" desc="The #include pre-processor directive will only be used to include header (*.h) files" id="JSF-032" origId="PREPROC-08" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A header file will contain a mechanism that prevents multiple inclusions of itself" id="JSF-035" origId="PFO-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Header files (*.h) will not contain non-const variable definitions or function definitions" id="JSF-039_a" origId="PFO-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="Source lines will be kept to a length of 120 characters or less" id="JSF-041" origId="METRICS-26" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Each expression-statement will be on a separate line" id="JSF-042" origId="FORMAT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All indentations will be consistent" id="JSF-044" origId="FORMAT-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers will not begin with the underscore character &quot;_&quot;" id="JSF-047" origId="NAMING-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="JSF" desc="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" id="JSF-048" origId="NAMING-45" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Begin class, struct, union, enum, and typedef names with an uppercase letter" id="JSF-050" origId="NAMING-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="0;" cat="JSF" desc="All letters contained in function and variable names will be composed entirely of lowercase letters" id="JSF-051" origId="NAMING-44" sev="3" total="13" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Header files will always have a file name extension of &quot;.h&quot;" id="JSF-053" origId="NAMING-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Implementation files will always have a file name extension of &quot;.cpp&quot;" id="JSF-054" origId="NAMING-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The public section of a class will be declared before the protected section and before the private section" id="JSF-057_a" origId="CODSTA-CPP-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The protected section of a class will be declared before the private section" id="JSF-057_b" origId="CODSTA-CPP-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="When declaring functions with more than 2 parameters, the leading parenthesis and the first argument are to be written on the same line as the function name, each additional argument will be written on a separate line" id="JSF-058" origId="FORMAT-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="JSF" desc="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" id="JSF-060_a" origId="FORMAT-42" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="JSF" desc="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" id="JSF-060_b" origId="FORMAT-43" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Braces (&quot;{}&quot;) which enclose a block will not have an empty line after &quot;{&quot; nor before &quot;}&quot;" id="JSF-060_c" origId="FORMAT-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="JSF" desc="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" id="JSF-061" origId="FORMAT-42" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="JSF" desc="The dereference operator '*' and the address-of operator '&amp;' will be directly connected with the type-specifier" id="JSF-062" origId="FORMAT-32" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no white space following '.' or '->' operator" id="JSF-063_a" origId="FORMAT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no white space preceding '.' or '->' operator" id="JSF-063_b" origId="FORMAT-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no space between a unary operator '!' or '~' and its operand" id="JSF-063_c" origId="FORMAT-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no space between a increment/decrement operator (++/--) and its operand" id="JSF-063_d" origId="FORMAT-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no space between a unary operator '&amp;', '*', '+', '-' and its operand" id="JSF-063_e" origId="FORMAT-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There should be no space between an increment/decrement operator (++/--) and its operand in macro definition" id="JSF-063_f" origId="FORMAT-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A member function that does not affect the state of an object will be declared const" id="JSF-069" origId="CODSTA-CPP-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Initialization of nonstatic class members will be performed through the member initialization list rather than through assignment in the body of a constructor" id="JSF-074" origId="INIT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="When two operators are opposites (such as == and !=), both will be defined" id="JSF-085" origId="CODSTA-CPP-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="When one of opposite operators (== and !=) is defined, the other should be defined too and one will be defined in terms of the other" id="JSF-085_a" origId="CODSTA-CPP-86" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Namespaces will not be nested more than two levels deep" id="JSF-099" origId="CODSTA-CPP-57" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All partial and explicit specializations for a template should be declared in the same file as the declaration of their primary template" id="JSF-104" origId="TEMPL-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions with more than 7 arguments will not be used" id="JSF-110" origId="METRICS-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions will have a single exit point" id="JSF-113" origId="MISRA2004-14_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="If a function returns error information, then that error information will be tested" id="JSF-115" origId="MISRA2004-16_10" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="21;" authUrg="0;" cat="JSF" desc="Each variable declaration will be commented" id="JSF-132_a" origId="COMMENT-05" sev="3" total="21" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Each typedef will be commented" id="JSF-132_b" origId="COMMENT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Each enumeration value will be commented" id="JSF-132_c" origId="COMMENT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Each structure member variable will be commented" id="JSF-132_d" origId="COMMENT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="JSF" desc="Every source file will be documented with an introductory comment that provides information on the file" id="JSF-133_a" origId="COMMENT-03" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="JSF" desc="Every source file will contain copyright information" id="JSF-133_b" origId="COMMENT-02" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="External objects will not be declared in more than one file" id="JSF-139" origId="MISRA-027" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="External objects will not be declared in implementation files" id="JSF-139_b" origId="MISRA-027_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A class, structure, or enumeration will not be declared in the definition of its type" id="JSF-141" origId="CODSTA-CPP-56" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Variables will not be introduced until they can be initialized with meaningful values" id="JSF-143" origId="OPT-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid unused local variables" id="JSF-143_a" origId="OPT-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Hexadecimal constants will be represented using all uppercase letters" id="JSF-150" origId="CODSTA-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="2;" cat="JSF" desc="Numeric values in code will not be used; symbolic values will be used instead" id="JSF-151" origId="CODSTA-26" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The sizeof operator will not be used on expressions that contain side effects" id="JSF-166" origId="MISRA2004-12_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The sizeof operator will not be used on expressions that contain side effects" id="JSF-166_b" origId="MISRA2004-12_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The sizeof operator will not be used on expressions that contain side effects" id="JSF-166_c" origId="MISRA2004-12_3_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The implementation of integer division shall be documented" id="JSF-167" origId="MISRA-041" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A typedef will be used to simplify program syntax when declaring function pointers" id="JSF-176" origId="CODSTA-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Redundant explicit casts will not be used" id="JSF-181_a" origId="OPT-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid explicit cast from derived to a base class" id="JSF-181_b" origId="OOP-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Labels will not be used, except in switch statements" id="JSF-188" origId="MISRA-055" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All 'if...else if' constructs will contain either a final else clause or a comment indicating why a final else clause is not necessary" id="JSF-192" origId="CODSTA-98" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A switch expression will not represent a Boolean value" id="JSF-195" origId="MISRA2004-15_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Every switch statement will have at least two cases and a potential default" id="JSF-196" origId="CODSTA-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter" id="JSF-198" origId="CODSTA-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop" id="JSF-199" origId="CODSTA-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Null initialize or increment expressions in for loops will not be used; a while loop will be used instead" id="JSF-200" origId="CODSTA-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="JSF" desc="Unencapsulated global data will be avoided" id="JSF-207" origId="CODSTA-CPP-82" sev="3" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A file should directly include only headers containing declarations and definitions needed to a compilation" id="JSF-037" origId="OPT-41" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="153;" authUrg="0;" cat="JSF" desc="Tabs should be avoided" id="JSF-043" origId="FORMAT-01" sev="4" total="153" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Public data should only be used in structs, not in classes" id="JSF-067_a" origId="OOP-18" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Protected data should only be used in structs, not in classes" id="JSF-067_b" origId="OOP-19" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid using the friend mechanism" id="JSF-070" origId="OOP-11" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Hierarchies should be based on abstract classes" id="JSF-087" origId="OOP-40" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="0;" cat="JSF" desc="Every nonlocal name, except main(), should be placed in some namespace" id="JSF-098" origId="CODSTA-CPP-36" sev="4" total="13" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write namespace usings in a header file or before an #include" id="JSF-100" origId="CODSTA-CPP-39" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="In a class template with a dependent base, any name that may be found in that dependent base should be referred to using a qualifier" id="JSF-105" origId="TEMPL-12" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A function definition should not be placed in a class specification" id="JSF-109" origId="CODSTA-CPP-32" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Dereferenced local pointer initialized by new in function scope should not be returned" id="JSF-112" origId="MRM-23" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="JSF-115_a" origId="CODSTA-CPP-58" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Built-in-types should be passed by value unless you are modifying them" id="JSF-116" origId="CODSTA-36" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arguments should be passed by reference" id="JSF-117" origId="OPT-14" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An object should be passed as const reference if the function should not change the value of the object" id="JSF-117.1" origId="CODSTA-CPP-43" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid slicing function arguments / return value" id="JSF-117_a" origId="PB-20" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor" id="JSF-117_b" origId="PB-23" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="JSF" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="JSF-118" origId="MISRA2004-16_7" sev="4" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="JSF-118_b" origId="MISRA2004-16_7_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Only functions with 1 or 2 statements should be considered candidates for inline functions" id="JSF-121" origId="OPT-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Trivial accessor and mutator functions should be inlined" id="JSF-122" origId="OPT-23" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Classes which have only getters/setters (accessors/mutators) are not allowed" id="JSF-123" origId="CODSTA-CPP-81" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Trivial forwarding functions should be inlined" id="JSF-124" origId="OPT-24" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Pass and return by reference when possible" id="JSF-125_a" origId="OPT-14" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="11;" authUrg="1;" cat="JSF" desc="Document functions in comments that precede function definitions" id="JSF-134" origId="COMMENT-04" sev="4" total="11" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Document functions in comments that precede function declarations" id="JSF-134_b" origId="COMMENT-04_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Objects should be defined at block scope if they are only accessed from within a single function" id="JSF-136_a" origId="MISRA2004-8_7" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Declarations of local variables should be at the smallest feasible scope" id="JSF-136_b" origId="OPT-01" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="JSF" desc="All declarations at file scope should be static where possible" id="JSF-137" origId="MISRA-023" sev="4" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Pointers to pointers should be avoided" id="JSF-169" origId="CODSTA-05" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="User-defined conversion functions should be avoided" id="JSF-177" origId="CODSTA-CPP-05" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Constructors allowing for conversion should be made explicit" id="JSF-177_b" origId="CODSTA-CPP-04" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="Every possible measure should be taken to avoid type casting" id="JSF-183" origId="CODSTA-31" sev="4" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid using static_cast on pointers" id="JSF-183_a" origId="CODSTA-CPP-34" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid using reinterpret_cast" id="JSF-183_b" origId="CODSTA-CPP-09" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Pointer arithmetic will not be used" id="JSF-215" origId="MISRA-101" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Consider using op= instead of stand-alone op" id="JSF-125_b" origId="OPT-19" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.metrics" authTot="1;" authUrg="0;" cat="METRIC" desc="Physical Lines in Files" id="METRIC.NOPLIF" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of blocks of code in a function" id="METRICS-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of function calls within function" id="METRICS-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Class inheritance level" id="METRICS-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of data member(s) per class should not exceed 15" id="METRICS-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of methods per class" id="METRICS-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of parameter(s) per method should not exceed 10" id="METRICS-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of private data member(s) per class" id="METRICS-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of private methods per class" id="METRICS-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of protected data member(s) per class" id="METRICS-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of protected methods per class" id="METRICS-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of public data member(s) per class" id="METRICS-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of public methods per class" id="METRICS-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid functions with more than 5 parameters" id="METRICS-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Macros should not use more than 5 parameters" id="METRICS-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Cyclomatic Complexity limit of 10" id="METRICS-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="1;" cat="METRICS" desc="The percentage of comment lines versus the total number of module lines should be between 20 and 60" id="METRICS-19" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid too long functions (declarations and statements)" id="METRICS-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid too long functions (blocks)" id="METRICS-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid functions with over 75 lines of code" id="METRICS-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Nested block depth should not be higher than 5" id="METRICS-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs)" id="METRICS-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="METRICS" desc="Source lines will be kept to a length of 120 characters or less" id="METRICS-26" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Functions with more than 7 parameters will not be used" id="METRICS-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Cyclomatic Complexity limit of 20" id="METRICS-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="No function should be longer than 60 lines of code" id="METRICS-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="METRICS" desc="The assertion density of the code should average to a minimum of two assertions per function" id="METRICS-31" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="All functions with more than 20 lines should contain at least 2 assertions" id="METRICS-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="A global function should not be called from more than 5 different functions" id="METRICS-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="A function should not call more than 7 different functions" id="METRICS-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="The number of statements within function should be in range 1 - 50" id="METRICS-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="The value of VOCF metric for a function should not be higher than 4" id="METRICS-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Statements within function should not be nested deeper than 4 levels" id="METRICS-40" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="The number of blocks of comments before and inside function to the number of statements in function should be > 0.2" id="METRICS-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Report the value of Halstead's delivered bugs (B) for a function" id="METRICS-43" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid functions with over 50 lines" id="METRICS-01" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid switch statements with many cases" id="METRICS-02" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid structs, unions, or classes with more than 20 fields" id="METRICS-17" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid source files that are longer than 500 lines" id="METRICS-24" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="11;" authUrg="0;" cat="METRICS" desc="Report Cyclomatic Complexity" id="METRICS-29" sev="5" total="11" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="11;" authUrg="0;" cat="METRICS" desc="Report Essential Complexity" id="METRICS-33" sev="5" total="11" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Essential Complexity limit of 4" id="METRICS-34" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Essential Complexity limit of 10" id="METRICS-35" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Essential Complexity limit of 1" id="METRICS-42" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Only use characters defined in ISO C standard" id="MISRA-005" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Values of character types shall be restricted to a defined and documented subset of ISO 10646-1" id="MISRA-006" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use wide string literals" id="MISRA-008" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="18;" authUrg="0;" cat="MISRA" desc="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" id="MISRA-013" sev="3" total="18" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Explicitly declare 'char' type as signed or unsigned" id="MISRA-014" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The underlying bit representations of floating point numbers shall not be used" id="MISRA-016" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All functions shall be declared before use" id="MISRA-020" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Identifiers shall not simultaneously have both internal and external linkage in the same translation unit" id="MISRA-024" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="External object should not be declared in more than one file" id="MISRA-027" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="External objects should not be declared in implementation files" id="MISRA-027_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The use of a tag shall agree with its declaration" id="MISRA-029" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All automatic variables shall have been assigned a value before being used" id="MISRA-030" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="MISRA-038" origId="MISRA2004-12_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The comma operator shall not be used, except in the control expression of a for loop" id="MISRA-042" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="MISRA-043" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid mixing arithmetic of different precisions in the same expression" id="MISRA-043_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="MISRA-043_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="MISRA-043_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Redundant explicit cast to the same type is not allowed" id="MISRA-044" origId="OPT-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use the volatile keyword" id="MISRA-046_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Assignment statements should not be nested within other assignment statements" id="MISRA-046_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid possible integer overflow in expressions in which the result is cast to a wider integer type" id="MISRA-048_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Don't cast the dividend of two integers to a floating-point type" id="MISRA-048_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" id="MISRA-048_c" origId="PB-65" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid unintentionally discarding the remainder of integer division" id="MISRA-048_d" origId="PB-15_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="A null statement shall only occur on a line by itself" id="MISRA-054" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use the break statement" id="MISRA-058" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use floating point variables as loop counters" id="MISRA-065" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use functions with variable numbers of arguments" id="MISRA-069" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" id="MISRA-071_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Functions shall always have visible prototype at the function call" id="MISRA-071_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Provide none or all identifiers for function arguments" id="MISRA-073" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Provide expression for return statement of non-void functions" id="MISRA-083" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid expressions in return statements of void functions" id="MISRA-084" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRA-089" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA" desc="Enclose in parentheses whole definition of a function-like macro" id="MISRA-096" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use only non-ambiguous forms of defined pre-processor operator" id="MISRA-100" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Pointer arithmetic should not be used" id="MISRA-101" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use non-constant pointers to functions" id="MISRA-104" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All the functions pointed to by a single pointer to function shall be identical in the number and type of parameters and the return type" id="MISRA-105" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The NULL pointer shall not be dereferenced" id="MISRA-107_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The NULL pointer shall not be dereferenced" id="MISRA-107_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All members of structure or union should be fully specified" id="MISRA-108" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Unions shall not be used to access the sub-parts of larger data structure" id="MISRA-110" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All the members of a structure (or class/union) shall be named" id="MISRA-113" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Standard library function names shall not be reused" id="MISRA-115" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use 'setlocale' function" id="MISRA-121_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not include &lt;locale.h> header" id="MISRA-121_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="MISRA" desc="Objects or functions with external linkage shall be declared in a header file" id="MISRA-023" sev="4" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Provisions should be made for appropriate run-time checking" id="MISRA-004_a" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Provisions should be made for appropriate run-time checking" id="MISRA-004_b" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use type suffix for numeric constants" id="MISRA-018_a" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use type suffix for numeric constants" id="MISRA-018_b" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use type suffix for numeric constants" id="MISRA-018_c" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use type suffix for numeric constants" id="MISRA-018_d" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="MISRA" desc="Declare objects at function scope" id="MISRA-022" sev="5" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The 'register' storage class specifier shall not be used" id="MISRA-028" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Document integer division" id="MISRA-041" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="MISRA-051" origId="PB-73" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use labels" id="MISRA-055" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRA2004-12_2_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="20;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions between signed and unsigned integer types" id="MISRA2004-10_1_a" sev="3" total="20" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2004" desc="There shall be no implicit conversions from integral to floating type" id="MISRA2004-10_1_b" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of complex expressions" id="MISRA2004-10_1_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions from wider to narrower types" id="MISRA2004-10_1_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of function return expressions" id="MISRA2004-10_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of complex expressions" id="MISRA2004-10_1_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of function arguments" id="MISRA2004-10_1_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of complex expressions" id="MISRA2004-10_1_i" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions from floating to integral type" id="MISRA2004-10_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions from wider to narrower floating type" id="MISRA2004-10_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions from narrower to wider floating type" id="MISRA2004-10_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="MISRA2004-10_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" id="MISRA2004-10_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The value of a complex expression of floating type should not be cast to a wider floating type" id="MISRA2004-10_4" origId="CODSTA-198" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The value of a complex expression of floating type should not be cast to an integer type" id="MISRA2004-10_4_b" origId="CODSTA-198_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="If the bitwise operators ~ and &lt;&lt; are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" id="MISRA2004-10_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Conversions shall not be performed between a pointer to a function and any type other than an integral type" id="MISRA2004-11_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void" id="MISRA2004-11_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void" id="MISRA2004-11_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void" id="MISRA2004-11_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A cast should not convert a pointer type to an integral type" id="MISRA2004-11_3_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A cast should not convert an integral type to a pointer type" id="MISRA2004-11_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A cast should not be performed between a pointer to object type and a different pointer to object type" id="MISRA2004-11_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="MISRA2004-11_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The comma operator shall not be used" id="MISRA2004-12_10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The underlying bit representations of floating-point values shall not be used" id="MISRA2004-12_12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" id="MISRA2004-12_13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Use parenthesis for the right-hand operand of an assignment operator when it contains an assignment expression" id="MISRA2004-12_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="MISRA2004-12_1_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Use parentheses unless all operators in the expression are the same" id="MISRA2004-12_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2004-12_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRA2004-12_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRA2004-12_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRA2004-12_2_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not use more than one volatile between two adjacent sequence points" id="MISRA2004-12_2_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRA2004-12_2_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="MISRA2004-12_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="MISRA2004-12_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="MISRA2004-12_3_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="MISRA2004-12_4_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The operands of a logical &amp;&amp; or || shall be primary-expressions" id="MISRA2004-12_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2004" desc="The operands of logical operators (&amp;&amp;, || and !) should be effectively Boolean" id="MISRA2004-12_6_a" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Expressions that are effectively Boolean should not be used as operands to operators other than (&amp;&amp;, ||, !, =, ==, !=, ?:)" id="MISRA2004-12_6_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Bitwise operators shall not be applied to operands whose underlying type is signed" id="MISRA2004-12_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="MISRA2004-12_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="MISRA2004-12_9" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Assignment operators shall not be used in expressions that yield a Boolean value" id="MISRA2004-13_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" id="MISRA2004-13_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Floating-point expressions shall not be tested for equality or inequality" id="MISRA2004-13_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The controlling expression of a for statement shall not contain any objects of floating type" id="MISRA2004-13_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The three expressions of a for statement shall be concerned only with loop control" id="MISRA2004-13_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not modify for loop counter within a body of the loop" id="MISRA2004-13_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_aa" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ab" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ac" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ad" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ae" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_af" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ag" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ah" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ai" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_aj" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ak" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_j" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_k" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_l" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_m" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_n" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_s" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_t" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_u" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_v" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_w" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_x" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_y" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_z" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="MISRA2004-14_10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code in &quot;else&quot; block" id="MISRA2004-14_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="MISRA2004-14_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="MISRA2004-14_1_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code in switch statement" id="MISRA2004-14_1_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code in 'for' loop" id="MISRA2004-14_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="MISRA2004-14_1_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="MISRA2004-14_1_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRA2004-14_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A null statement shall occur on a line by itself or be followed by a comment" id="MISRA2004-14_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The goto statement shall not be used" id="MISRA2004-14_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The continue statement shall not be used" id="MISRA2004-14_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="For any iteration statement there shall be at most one break statement used for loop termination" id="MISRA2004-14_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A function shall have a single point of exit at the end of the function" id="MISRA2004-14_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="MISRA2004-14_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="'if' and 'else' should be followed by a compound statement" id="MISRA2004-14_9" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A break statement should be placed only at the end of switch clause" id="MISRA2004-15_0_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="MISRA2004-15_0_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRA2004-15_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRA2004-15_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRA2004-15_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The final clause of a switch statement shall be the default clause" id="MISRA2004-15_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRA2004-15_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRA2004-15_4_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Every switch statement shall have at least one case clause" id="MISRA2004-15_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Functions shall not be defined with a variable number of arguments" id="MISRA2004-16_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2004" desc="If a function returns error information, then that error information shall be tested" id="MISRA2004-16_10" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Functions shall not call themselves, either directly or indirectly" id="MISRA2004-16_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Identifiers shall be given for all of the parameters in a function prototype declaration" id="MISRA2004-16_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The identifiers used in the declaration and definition of a function shall be identical" id="MISRA2004-16_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Functions with no parameters shall be declared with parameter type void" id="MISRA2004-16_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The number of arguments passed to a function shall match the number of parameters" id="MISRA2004-16_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2004" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="MISRA2004-16_7" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRA2004-16_7_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRA2004-16_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="MISRA2004-16_8_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2004" desc="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" id="MISRA2004-16_9" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not apply arithmetic to pointers that don't address an array or array element" id="MISRA2004-17_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Pointer subtraction shall only be applied to pointers that address elements of the same array" id="MISRA2004-17_2" origId="CODSTA-13_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc=">, >=, &lt;, &lt;= shall not be applied to pointer types except where they point to the same array" id="MISRA2004-17_3" origId="CODSTA-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2004" desc="Array indexing shall be the only allowed form of pointer arithmetic" id="MISRA2004-17_4" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The declaration of objects should contain no more than 2 levels of pointer indirection" id="MISRA2004-17_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRA2004-17_6_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2004-17_6_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All structure and union types shall be complete at the end of a translation unit" id="MISRA2004-18_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="An object shall not be assigned to an overlapping object" id="MISRA2004-18_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="An object shall not be assigned to an overlapping object" id="MISRA2004-18_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Unions shall not be used" id="MISRA2004-18_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="#include statements in a file should only be preceded by other preprocessor directives or comments" id="MISRA2004-19_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2004" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="MISRA2004-19_10" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="MISRA2004-19_11_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be at most one occurrence of the # or ## preprocessor operators in a single macro definition" id="MISRA2004-19_12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The # and ## preprocessor operators should not be used" id="MISRA2004-19_13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The defined preprocessor operator shall only be used in one of the two standard forms" id="MISRA2004-19_14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Precautions shall be taken in order to prevent the contents of a header file being included twice" id="MISRA2004-19_15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" id="MISRA2004-19_16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="MISRA2004-19_17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Non-standard characters should not occur in header file names in #include directives" id="MISRA2004-19_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRA2004-19_3" origId="MISRA-089" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid keywords and basic types in macros" id="MISRA2004-19_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Macros shall not be #define'd or #undef'd within a block" id="MISRA2004-19_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="#undef shall not be used" id="MISRA2004-19_6" origId="PREPROC-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2004" desc="A function should be used in preference to a function-like macro" id="MISRA2004-19_7" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A function-like macro shall not be invoked without all of its arguments" id="MISRA2004-19_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="MISRA2004-19_9" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2004" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="MISRA2004-20_10" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRA2004-20_11" origId="PB-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRA2004-20_11_b" origId="PB-75_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRA2004-20_11_c" origId="SECURITY-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRA2004-20_11_d" origId="SECURITY-48_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The time handling functions of library time.h shall not be used" id="MISRA2004-20_12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not #define or #undef identifiers with names which start with underscore" id="MISRA2004-20_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not redefine reserved words" id="MISRA2004-20_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="MISRA2004-20_1_c" origId="CODSTA-92_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not #define nor #undef identifier 'defined'" id="MISRA2004-20_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The names of standard library macros, objects and functions shall not be reused" id="MISRA2004-20_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The names of standard library macros, objects and functions shall not be reused (C90)" id="MISRA2004-20_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The names of standard library macros, objects and functions shall not be reused (C99)" id="MISRA2004-20_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The validity of values passed to library functions shall be checked" id="MISRA2004-20_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2004" desc="Dynamic heap memory allocation shall not be used" id="MISRA2004-20_4" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The error indicator 'errno' shall not be used" id="MISRA2004-20_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The macro offsetof, in library stddef.h, shall not be used" id="MISRA2004-20_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The setjmp macro and the longjmp function shall not be used" id="MISRA2004-20_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The standard header file &lt;setjmp.h> shall not be used" id="MISRA2004-20_7_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The standard header file &lt;signal.h> shall not be used" id="MISRA2004-20_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="MISRA2004-20_8_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2004" desc="The input/output library stdio.h shall not be used" id="MISRA2004-20_9" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Assembly language shall be encapsulated and isolated" id="MISRA2004-2_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Source code shall only use /* ... */ style comments" id="MISRA2004-2_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The character sequence /* shall not be used within a C-style comment" id="MISRA2004-2_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All uses of the #pragma directive shall be documented and explained" id="MISRA2004-3_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not mix bit-fields and other data within the same structure" id="MISRA2004-3_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Only those escape sequences that are defined in the ISO C standard shall be used" id="MISRA2004-4_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Trigraphs shall not be used" id="MISRA2004-4_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="User-specified C external identifiers should differ in the first 31 characters" id="MISRA2004-5_1_a" origId="PORT-35_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="User-specified C internal identifiers should differ from external identifiers in the first 31 characters" id="MISRA2004-5_1_b" origId="PORT-35_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="User-specified C internal identifiers declared in the same scope should differ in the first 31 characters" id="MISRA2004-5_1_c" origId="PORT-35_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="MISRA2004-5_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="MISRA2004-5_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not reuse typedef names" id="MISRA2004-5_3_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not reuse typedef names as a typedef name" id="MISRA2004-5_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A tag name shall not be reused for other purpose within the program" id="MISRA2004-5_4_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A tag name shall not be reused to define a different tag" id="MISRA2004-5_4_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The name of typedef should not be the same as the name of type that is typedef'd" id="MISRA2004-5_4_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The plain char type shall be used only for the storage and use of character values" id="MISRA2004-6_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="signed and unsigned char type shall be used only for the storage and use of numeric values" id="MISRA2004-6_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="typedefs to basic types should contain some digits in their name" id="MISRA2004-6_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="MISRA2004" desc="typedefs should be used in place of the basic types" id="MISRA2004-6_3_b" sev="3" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Bit fields shall only be defined to be of type unsigned int or signed int" id="MISRA2004-6_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="MISRA2004-6_5" origId="CODSTA-71" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Unnamed bit-fields with signed integer type shall have a length of more than one bit" id="MISRA2004-6_5_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Octal constants (other than zero) shall not be used" id="MISRA2004-7_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Octal escape sequences shall not be used" id="MISRA2004-7_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" id="MISRA2004-8_11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="When an array is declared with external linkage, its size shall be stated explicitly or defined implicitly by initialisation" id="MISRA2004-8_12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" id="MISRA2004-8_1_a" origId="MISRA-071_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Functions shall always have visible prototype at the function call" id="MISRA2004-8_1_b" origId="MISRA-071_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Whenever a function is declared or defined, its type shall be explicitly stated" id="MISRA2004-8_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Whenever an object is declared or defined, its type shall be explicitly stated" id="MISRA2004-8_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Use identical types in declaration and definition" id="MISRA2004-8_3_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Use identical types in declaration and definition" id="MISRA2004-8_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRA2004-8_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no definitions of objects or functions in a header file" id="MISRA2004-8_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Always declare functions at file scope" id="MISRA2004-8_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Objects shall be defined at block scope if they are only accessed from within a single function" id="MISRA2004-8_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All automatic variables shall have been assigned a value before being used" id="MISRA2004-9_1" origId="MISRA-030" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The initializer for an aggregate or union shall be enclosed in braces" id="MISRA2004-9_2" origId="INIT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Arrays shall not be partially initialized" id="MISRA2004-9_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The non-zero initialization of structures requires an explicit initializer for each element" id="MISRA2004-9_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="In an enumerator list, the &quot;=&quot; construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised" id="MISRA2004-9_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Sections of code should not be &quot;commented out&quot;" id="MISRA2004-2_4" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No object or function identifier with static storage duration should be reused" id="MISRA2004-5_5_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No object or function identifier with static storage duration should be reused" id="MISRA2004-5_5_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No identifier in one name space should have the same spelling as an identifier in another name space, with the exception of structure and union member names" id="MISRA2004-5_6" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No identifier name should be reused" id="MISRA2004-5_7" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="MISRA2004" desc="Objects or functions with external linkage shall be declared in a header file" id="MISRA2004-8_10" origId="MISRA-023" sev="4" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A 'U' suffix shall be applied to all constants of unsigned type" id="MISRA2004-10_6" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="MISRA2004-12_1_b" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No parentheses are required for the operand of a unary operator" id="MISRA2004-12_1_c" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="MISRA2004-12_1_f" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Every defined function with internal linkage shall be used" id="MISRA2008-0_1_10" origId="OPT-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="4;" authUrg="0;" cat="MISRA2008" desc="Every defined function with external linkage shall be used" id="MISRA2008-0_1_10_b" origId="GLOBAL-UNUSEDFUNC" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="There shall be no unused parameters (named or unnamed) in nonvirtual functions" id="MISRA2008-0_1_11" origId="OPT-31" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no unused parameters (named or unnamed) in the set of parameters for a virtual function and all the functions that override it" id="MISRA2008-0_1_12" origId="GLOBAL-UNUSEDVIRTPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in 'else' block" id="MISRA2008-0_1_1_a" origId="MISRA2004-14_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="MISRA2008-0_1_1_b" origId="MISRA2004-14_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in 'if/else/while/for' block" id="MISRA2008-0_1_1_c" origId="MISRA2004-14_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in switch statement" id="MISRA2008-0_1_1_d" origId="MISRA2004-14_1_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in 'for' loop" id="MISRA2008-0_1_1_e" origId="MISRA2004-14_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code after 'if' or 'switch' statement outside 'for/while/catch' block" id="MISRA2008-0_1_1_f" origId="MISRA2004-14_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code after 'if' or 'switch' statement inside 'while/for/catch' block" id="MISRA2008-0_1_1_g" origId="MISRA2004-14_1_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_a" origId="MISRA2004-13_7_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_aa" origId="BD-PB-CC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_b" origId="MISRA2004-13_7_aa" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_c" origId="MISRA2004-13_7_ab" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_d" origId="MISRA2004-13_7_ac" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_e" origId="MISRA2004-13_7_ad" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_f" origId="MISRA2004-13_7_ae" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_g" origId="MISRA2004-13_7_af" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_h" origId="MISRA2004-13_7_ag" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_i" origId="MISRA2004-13_7_ah" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_j" origId="MISRA2004-13_7_ai" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_k" origId="MISRA2004-13_7_aj" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_l" origId="MISRA2004-13_7_ak" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_m" origId="MISRA2004-13_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_n" origId="MISRA2004-13_7_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_o" origId="MISRA2004-13_7_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_p" origId="MISRA2004-13_7_j" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_q" origId="MISRA2004-13_7_k" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_r" origId="MISRA2004-13_7_l" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_rz" origId="MISRA2004-13_7_z" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_s" origId="MISRA2004-13_7_m" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_sz" origId="MISRA2004-13_7_v" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_t" origId="MISRA2004-13_7_n" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_u" origId="MISRA2004-13_7_s" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_v" origId="MISRA2004-13_7_t" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_w" origId="MISRA2004-13_7_u" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_x" origId="MISRA2004-13_7_w" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_y" origId="MISRA2004-13_7_x" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_z" origId="MISRA2004-13_7_y" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unused variables" id="MISRA2008-0_1_3_a" origId="OPT-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unused variables" id="MISRA2008-0_1_3_b" origId="OPT-06" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Eliminate unused private member variables" id="MISRA2008-0_1_3_c" origId="OPT-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="9;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain non-volatile POD variables having only one use" id="MISRA2008-0_1_4" origId="GLOBAL-ONEUSEVAR" sev="2" total="9" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unused type declarations" id="MISRA2008-0_1_5" origId="GLOBAL-UNUSEDTYPE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="8;" authUrg="0;" cat="MISRA2008" desc="Avoid unused values" id="MISRA2008-0_1_6" origId="BD-PB-VOVR" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="MISRA2008-0_1_7" origId="CODSTA-CPP-58" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All functions with void return type shall have external side effect(s)" id="MISRA2008-0_1_8" origId="OPT-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="All functions with void return type shall have external side effect(s)" id="MISRA2008-0_1_8_b" origId="OPT-32_b" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRA2008-0_1_9" origId="MISRA2004-14_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object shall not be assigned to an overlapping object" id="MISRA2008-0_2_1_a" origId="MISRA2004-18_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object shall not be assigned to an overlapping object" id="MISRA2008-0_2_1_b" origId="PB-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="If a function generates error information, then that error information shall be tested" id="MISRA2008-0_3_2" origId="MISRA2004-16_10" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A base class shall only be declared virtual if it is used in a diamond hierarchy" id="MISRA2008-10_1_2" origId="GLOBAL-VIRTBASECLASS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An accessible base class shall not be both virtual and non-virtual in the same hierarchy" id="MISRA2008-10_1_3" origId="OOP-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy" id="MISRA2008-10_3_1" origId="OOP-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each overriding virtual function shall be declared with the virtual keyword" id="MISRA2008-10_3_2" origId="OOP-21" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" id="MISRA2008-10_3_3" origId="OOP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Member data in non-POD class types shall be private" id="MISRA2008-11_0_1" origId="OOP-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not use dynamic type of an object under construction" id="MISRA2008-12_1_1" origId="BD-PB-VCTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All constructors that are callable with a single argument of fundamental type shall be declared explicit" id="MISRA2008-12_1_3" origId="OOP-45" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A copy constructor shall only initialize its base classes and the nonstatic members of the class of which it is a member" id="MISRA2008-12_8_1" origId="OOP-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The copy assignment operator shall be declared protected or private in an abstract class" id="MISRA2008-12_8_2" origId="OOP-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not declare non-member generic functions in associated namespaces" id="MISRA2008-14_5_1" origId="TEMPL-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter" id="MISRA2008-14_5_2" origId="TEMPL-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" id="MISRA2008-14_5_3" origId="TEMPL-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" id="MISRA2008-14_6_1" origId="TEMPL-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The function shall resolve to a function declared previously in the translation unit" id="MISRA2008-14_6_2" origId="TEMPL-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All class templates, function templates, class template member functions and class template static members shall be instantiated at least one." id="MISRA2008-14_7_1" origId="GLOBAL-TEMPLNOINST" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template" id="MISRA2008-14_7_3" origId="TEMPL-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Overloaded function templates shall not be explicitly specialized" id="MISRA2008-14_8_1" origId="TEMPL-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Control shall not be transferred into a try or catch block using a goto or a switch statement" id="MISRA2008-15_0_3" origId="EXCEPT-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The assignment-expression of a throw statement shall not itself cause an exception to be thrown" id="MISRA2008-15_1_1" origId="EXCEPT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="NULL shall not be thrown explicitly" id="MISRA2008-15_1_2" origId="EXCEPT-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An empty throw (throw;) shall only be used in the compound statement of a catch handler" id="MISRA2008-15_1_3" origId="EXCEPT-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Exceptions shall be raised only after start-up and before termination of the program" id="MISRA2008-15_3_1" origId="EXCEPT-08" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases" id="MISRA2008-15_3_3" origId="EXCEPT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="MISRA2008-15_3_4_a" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="MISRA2008-15_3_4_b" origId="EXCEPT-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A class type exception shall always be caught by reference" id="MISRA2008-15_3_5" origId="EXCEPT-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="MISRA2008-15_3_6" origId="EXCEPT-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last" id="MISRA2008-15_3_7" origId="EXCEPT-24" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" id="MISRA2008-15_4_1" origId="GLOBAL-EXCSPECDECL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A class destructor shall not exit with an exception" id="MISRA2008-15_5_1" origId="EXCEPT-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="MISRA2008-15_5_2" origId="EXCEPT-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid throwing exceptions from functions that are declared not to throw" id="MISRA2008-15_5_2_b" origId="BD-PB-NOEXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="MISRA2008-15_5_3" origId="PB-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="MISRA2008-15_5_3_b" origId="EXCEPT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not throw from within destructor" id="MISRA2008-15_5_3_c" origId="EXCEPT-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="MISRA2008-15_5_3_d" origId="EXCEPT-06" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An empty throw (throw;) shall only be used in the compound-statement of a catch handler" id="MISRA2008-15_5_3_e" origId="EXCEPT-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Exceptions shall be raised only after start-up and before termination of the program" id="MISRA2008-15_5_3_f" origId="EXCEPT-08" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="MISRA2008-15_5_3_g" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="MISRA2008-15_5_3_h" origId="EXCEPT-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="MISRA2008-15_5_3_i" origId="EXCEPT-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Always catch exceptions" id="MISRA2008-15_5_3_j" origId="BD-PB-EXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Properly define exit handlers" id="MISRA2008-15_5_3_k" origId="BD-PB-EXITHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid throwing exceptions from functions that are declared not to throw" id="MISRA2008-15_5_3_l" origId="BD-PB-NOEXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#include directives in a file shall only be preceded by other preprocessor directives or comments" id="MISRA2008-16_0_1" origId="MISRA2004-19_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Macros shall only be #define'd or #undef'd in the global namespace" id="MISRA2008-16_0_2" origId="MISRA2004-19_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#undef shall not be used" id="MISRA2008-16_0_3" origId="PREPROC-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2008" desc="Function-like macros shall not be defined" id="MISRA2008-16_0_4" origId="MISRA2004-19_7" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="MISRA2008-16_0_5" origId="MISRA2004-19_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2008" desc="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" id="MISRA2008-16_0_6" origId="MISRA2004-19_10" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="MISRA2008-16_0_7_b" origId="MISRA2004-19_11_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If the # token appears as the first token on a line, then it shall be immediately followed by a preprocessing token" id="MISRA2008-16_0_8" origId="MISRA2004-19_16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The defined preprocessor operator shall only be used in one of the two standard forms" id="MISRA2008-16_1_1" origId="MISRA2004-19_14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="MISRA2008-16_1_2" origId="MISRA2004-19_17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="MISRA2008" desc="Avoid using macro definitions" id="MISRA2008-16_2_1_a" origId="PREPROC-01" sev="2" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="MISRA2008-16_2_1_b" origId="PREPROC-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="The #ifdef, #else, #elif preprocessor directives should not be used" id="MISRA2008-16_2_1_c" origId="PREPROC-11" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" id="MISRA2008-16_2_1_d" origId="PREPROC-10_b" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="MISRA2008-16_2_1_e" origId="PREPROC-10_c" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#error directive shall not be used" id="MISRA2008-16_2_1_f" origId="PREPROC-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The #pragma directive shall not be used" id="MISRA2008-16_2_1_g" origId="PREPROC-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#undef shall not be used" id="MISRA2008-16_2_1_h" origId="PREPROC-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="MISRA2008" desc="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" id="MISRA2008-16_2_2" origId="PREPROC-12" sev="2" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Include guards shall be provided" id="MISRA2008-16_2_3" origId="PFO-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The ', &quot;, /* or // characters shall not occur in a header file name" id="MISRA2008-16_2_4" origId="NAMING-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRA2008-16_2_6" origId="MISRA-089" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be at most one occurrence of the # or ## operators in a single macro definition" id="MISRA2008-16_3_1" origId="MISRA2004-19_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_a" origId="MISRA2004-20_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_b" origId="MISRA2004-20_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_c" origId="CODSTA-92_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_d" origId="CODSTA-92_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_e" origId="MISRA2004-20_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The names of standard library macros and objects shall not be reused" id="MISRA2008-17_0_2" origId="CODSTA-92" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The names of standard library functions shall not be overridden" id="MISRA2008-17_0_3" origId="CODSTA-93" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The setjmp macro and the longjmp function shall not be used" id="MISRA2008-17_0_5" origId="MISRA2004-20_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The standard header file &lt;setjmp.h> shall not be used" id="MISRA2008-17_0_5_b" origId="MISRA2004-20_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="The C library shall not be used" id="MISRA2008-18_0_1" origId="CODSTA-CPP-59" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="The library functions atof, atoi and atol from library &lt;cstdlib> shall not be used" id="MISRA2008-18_0_2" origId="MISRA2004-20_10" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'abort' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3" origId="PB-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'exit' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3_b" origId="PB-75_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'getenv' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3_c" origId="SECURITY-52" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'system' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3_d" origId="SECURITY-48_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The time handling functions of library &lt;ctime> shall not be used" id="MISRA2008-18_0_4" origId="MISRA2004-20_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The unbounded functions of library &lt;cstring> shall not be used" id="MISRA2008-18_0_5" origId="PB-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The macro offsetof shall not be used" id="MISRA2008-18_2_1" origId="MISRA2004-20_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="Dynamic heap memory allocation shall not be used" id="MISRA2008-18_4_1" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The standard header file &lt;csignal> shall not be used" id="MISRA2008-18_7_1" origId="MISRA2004-20_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The signal handling facilities of &lt;csignal> shall not be used" id="MISRA2008-18_7_1_b" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The error indicator errno shall not be used" id="MISRA2008-19_3_1" origId="MISRA2004-20_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="The stream input/output library &lt;cstdio> shall not be used" id="MISRA2008-27_0_1" origId="MISRA2004-20_9" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="Different identifiers shall be typographically unambiguous" id="MISRA2008-2_10_1" origId="NAMING-47" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2008-2_10_2_a" origId="MISRA2004-5_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2008-2_10_2_b" origId="MISRA2004-5_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A typedef name (including qualification, if any) shall be a unique identifier" id="MISRA2008-2_10_3" origId="GLOBAL-UNIQUETYPEDEF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A class, union or enum name (including qualification, if any) shall be a unique identifier" id="MISRA2008-2_10_4" origId="GLOBAL-UNIQUETYPE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="MISRA2008-2_10_6_a" origId="CODSTA-CPP-87_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="MISRA2008-2_10_6_b" origId="CODSTA-CPP-87_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="MISRA2008-2_10_6_c" origId="CODSTA-CPP-87_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The name of typedef should not be the same as the name of its basic type" id="MISRA2008-2_10_6_d" origId="CODSTA-CPP-88" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used" id="MISRA2008-2_13_1" origId="CODSTA-CPP-60" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Octal constants (other than zero) shall not be used" id="MISRA2008-2_13_2_a" origId="MISRA2004-7_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Octal escape sequences (other than &quot;\0&quot;) shall not be used" id="MISRA2008-2_13_2_b" origId="MISRA2004-7_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" id="MISRA2008-2_13_3" origId="CODSTA-68" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Literal suffixes shall be upper case" id="MISRA2008-2_13_4" origId="CODSTA-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Narrow and wide string literals shall not be concatenated" id="MISRA2008-2_13_5" origId="PB-38" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Trigraphs shall not be used" id="MISRA2008-2_3_1" origId="MISRA2004-4_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The character sequence /* shall not be used within a C-style comment" id="MISRA2008-2_7_1" origId="MISRA2004-2_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Sections of code shall not be &quot;commented out&quot; using C-style comments" id="MISRA2008-2_7_2" origId="MISRA2004-2_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="It shall be possible to include any header file in multiple translation units without violating the One Definition Rule" id="MISRA2008-3_1_1" origId="PFO-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Functions shall not be declared at block scope" id="MISRA2008-3_1_2" origId="MISRA2004-8_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="When an array is declared, its size shall either be stated explicitly or defined implicitly by initialization" id="MISRA2008-3_1_3" origId="MISRA2004-8_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All declarations of an object or function shall have compatible types" id="MISRA2008-3_2_1" origId="GLOBAL-COMPATDECLS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The One Definition Rule shall not be violated" id="MISRA2008-3_2_2" origId="GLOBAL-ONEDEFRULE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="MISRA2008-3_2_3" origId="GLOBAL-ONEFILEDECL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier with external linkage shall have exactly one external definition" id="MISRA2008-3_2_4" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="MISRA2008" desc="Objects or functions with external linkage shall be declared in a header file" id="MISRA2008-3_3_1" origId="MISRA-023" sev="2" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If a function has internal linkage then all re-declarations shall include the static storage class specifier" id="MISRA2008-3_3_2" origId="CODSTA-81" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" id="MISRA2008-3_4_1_a" origId="OPT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" id="MISRA2008-3_4_1_b" origId="MISRA2004-8_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" id="MISRA2008-3_9_1" origId="CODSTA-67" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The underlying bit representations of floating-point values shall not be used" id="MISRA2008-3_9_3" origId="MISRA2004-12_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="NULL shall not be used as an integer value" id="MISRA2008-4_10_1" origId="CODSTA-CPP-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="MISRA2008-4_10_2" origId="CODSTA-CPP-63" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &amp;&amp;, ||, !, the equality operators == and !=, the unary &amp; operator, and the conditional operator" id="MISRA2008-4_5_1" origId="MISRA2004-12_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Expressions with type enum shall not be used as operands to built-in operators other than [ ], =, ==, !=, &lt;, &lt;=, >, >=, and the unary &amp; operator" id="MISRA2008-4_5_2" origId="CODSTA-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary &amp; operator" id="MISRA2008-4_5_3" origId="CODSTA-69" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If the bitwise operators ~ and &lt;&lt; are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" id="MISRA2008-5_0_10" origId="MISRA2004-10_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The plain char type shall only be used for the storage and use of character values" id="MISRA2008-5_0_11" origId="MISRA2004-6_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="signed char and unsigned char type shall only be used for the storage and use of numeric values" id="MISRA2008-5_0_12" origId="MISRA2004-6_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The condition of an if-statement and the condition of an iteration-statement shall have type bool" id="MISRA2008-5_0_13" origId="CODSTA-CPP-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The first operand of a conditional-operator shall have type bool" id="MISRA2008-5_0_14" origId="CODSTA-CPP-65" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Array indexing shall be the only form of pointer arithmetic" id="MISRA2008-5_0_15" origId="MISRA2004-17_4" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid accessing arrays out of bounds" id="MISRA2008-5_0_16_a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="MISRA2008-5_0_16_b" origId="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Subtraction between pointers shall only be applied to pointers that address elements of the same array" id="MISRA2008-5_0_17" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc=">, >=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array" id="MISRA2008-5_0_18" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The declaration of objects shall contain no more than two levels of pointer indirection" id="MISRA2008-5_0_19" origId="MISRA2004-17_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_e" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_f" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_g" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Non-constant operands to a binary bitwise operator shall have the same underlying type" id="MISRA2008-5_0_20" origId="CODSTA-66" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="MISRA2008-5_0_21" origId="CODSTA-63" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cvalue expression shall not be implicitly converted to a different underlying type" id="MISRA2008-5_0_3_a" origId="MISRA2004-10_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cvalue expression shall not be implicitly converted to a different underlying type" id="MISRA2008-5_0_3_b" origId="MISRA2004-10_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cvalue expression shall not be implicitly converted to a different underlying type" id="MISRA2008-5_0_3_c" origId="MISRA2004-10_1_i" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="20;" authUrg="0;" cat="MISRA2008" desc="An implicit integral conversion shall not change the signedness of the underlying type" id="MISRA2008-5_0_4_a" origId="MISRA2004-10_1_a" sev="2" total="20" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no implicit floating-integral conversions" id="MISRA2008-5_0_5_a" origId="MISRA2004-10_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="There shall be no implicit floating-integral conversions" id="MISRA2008-5_0_5_b" origId="MISRA2004-10_1_b" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="MISRA2008-5_0_6_a" origId="CODSTA-222" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="MISRA2008-5_0_6_b" origId="MISRA2004-10_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="MISRA2008-5_0_6_c" origId="MISRA2004-10_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no explicit floating-integral conversions of a cvalue expression" id="MISRA2008-5_0_7_a" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no explicit floating-integral conversions of a cvalue expression" id="MISRA2008-5_0_7_b" origId="CODSTA-198_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" id="MISRA2008-5_0_8" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" id="MISRA2008-5_0_8_b" origId="CODSTA-198" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression" id="MISRA2008-5_0_9" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The right hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="MISRA2008-5_14_1" origId="MISRA2004-12_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="MISRA2008-5_17_1" origId="CODSTA-CPP-91" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The comma operator shall not be used" id="MISRA2008-5_18_1" origId="MISRA2004-12_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each operand of a logical &amp;&amp; or || shall be a postfix-expression" id="MISRA2008-5_2_1" origId="CODSTA-90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The &amp;&amp; operator and the || operator shall not be overloaded" id="MISRA2008-5_2_11" origId="CODSTA-CPP-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The comma &quot;,&quot; operator shall not be overloaded" id="MISRA2008-5_2_11_b" origId="CODSTA-CPP-80" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier with array type passed as a function argument shall not decay to a pointer" id="MISRA2008-5_2_12" origId="PB-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" id="MISRA2008-5_2_2" origId="OOP-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="MISRA2008-5_2_4" origId="CODSTA-CPP-66" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cast shall not remove any const or volatile qualification from the type of a pointer or reference" id="MISRA2008-5_2_5" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="MISRA2008-5_2_6" origId="CODSTA-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object with pointer type shall not be converted to an unrelated pointer type, either directly or indirectly" id="MISRA2008-5_2_7" origId="MISRA2004-11_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object with integer type or pointer to void type shall not be converted to an object with pointer type" id="MISRA2008-5_2_8" origId="CODSTA-65" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2008" desc="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" id="MISRA2008-5_3_1" origId="CODSTA-CPP-67" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="MISRA2008-5_3_2" origId="MISRA2004-12_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The unary &amp; operator shall not be overloaded" id="MISRA2008-5_3_3" origId="CODSTA-CPP-68" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Evaluation of the operand to the sizeof operator shall not contain side effects" id="MISRA2008-5_3_4" origId="MISRA2004-12_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Evaluation of the operand to the sizeof operator shall not contain side effects" id="MISRA2008-5_3_4_b" origId="MISRA2004-12_3_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Evaluation of the operand to the sizeof operator shall not contain side effects" id="MISRA2008-5_3_4_c" origId="MISRA2004-12_3_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand" id="MISRA2008-5_8_1" origId="MISRA2004-12_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Assignment operators shall not be used in sub-expressions" id="MISRA2008-6_2_1" origId="MISRA2004-13_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Floating-point expressions shall not be directly or indirectly tested for equality or inequality" id="MISRA2008-6_2_2" origId="MISRA2004-13_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character" id="MISRA2008-6_2_3" origId="MISRA2004-14_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The statement forming the body of a switch, while, do while or for statement shall be a compound statement" id="MISRA2008-6_3_1" origId="MISRA2004-14_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement" id="MISRA2008-6_4_1" origId="MISRA2004-14_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All if ... else if constructs shall be terminated with an else clause" id="MISRA2008-6_4_2" origId="MISRA2004-14_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_a" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_b" origId="CODSTA-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_c" origId="CODSTA-61" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_d" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_e" origId="MISRA2004-15_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRA2008-6_4_4" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="MISRA2008-6_4_5" origId="CODSTA-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The final clause of a switch statement shall be the default-clause" id="MISRA2008-6_4_6" origId="CODSTA-61" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The condition of a switch statement shall not have bool type" id="MISRA2008-6_4_7" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Every switch statement shall have at least one case-clause" id="MISRA2008-6_4_8" origId="MISRA2004-15_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A for loop shall contain a single loop-counter which shall not have floating type" id="MISRA2008-6_5_1" origId="CODSTA-CPP-69" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" id="MISRA2008-6_5_2" origId="CODSTA-CPP-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The loop-counter shall not be modified within condition or statement" id="MISRA2008-6_5_3" origId="MISRA2004-13_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop" id="MISRA2008-6_5_4" origId="CODSTA-CPP-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A loop-control-variable other than the loop-counter shall not be modified within condition or expression" id="MISRA2008-6_5_5" origId="CODSTA-CPP-72" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A loop-control-variable other than the loop-counter which is modified in statement within a body of the loop shall have type bool" id="MISRA2008-6_5_6" origId="CODSTA-CPP-73" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="MISRA2008-6_6_1" origId="CODSTA-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The goto statement shall jump to a label declared later in the same function body" id="MISRA2008-6_6_2" origId="CODSTA-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The continue statement shall only be used within a well-formed for loop" id="MISRA2008-6_6_3" origId="CODSTA-80" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="MISRA2008-6_6_4" origId="CODSTA-79" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A function shall have a single point of exit at the end of the function" id="MISRA2008-6_6_5" origId="MISRA2004-14_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2008" desc="A variable which is not modified shall be const qualified" id="MISRA2008-7_1_1" origId="CODSTA-CPP-53" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2008" desc="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" id="MISRA2008-7_1_2_a" origId="MISRA2004-16_7" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A reference parameter in a function shall be declared as reference to const if the corresponding object is not modified" id="MISRA2008-7_1_2_b" origId="CODSTA-CPP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRA2008-7_1_2_c" origId="MISRA2004-16_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="MISRA2008-7_2_1" origId="PB-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="0;" cat="MISRA2008" desc="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" id="MISRA2008-7_3_1" origId="CODSTA-CPP-36" sev="2" total="13" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifier main shall not be used for a function other than the global function main" id="MISRA2008-7_3_2" origId="CODSTA-76" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no unnamed namespaces in header files" id="MISRA2008-7_3_3" origId="CODSTA-CPP-74" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="using-directives shall not be used" id="MISRA2008-7_3_4" origId="CODSTA-CPP-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier" id="MISRA2008-7_3_5" origId="CODSTA-CPP-76" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" id="MISRA2008-7_3_6" origId="CODSTA-CPP-90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Assembler instructions shall only be introduced using the asm declaration" id="MISRA2008-7_4_2" origId="CODSTA-73" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Assembly language shall be encapsulated and isolated" id="MISRA2008-7_4_3" origId="CODSTA-114" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function" id="MISRA2008-7_5_1" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2008-7_5_2_a" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2008-7_5_2_b" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference" id="MISRA2008-7_5_3" origId="PB-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="MISRA2008" desc="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" id="MISRA2008-8_0_1" origId="FORMAT-33" sev="2" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments" id="MISRA2008-8_3_1" origId="OOP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Functions shall not be defined using the ellipsis notation" id="MISRA2008-8_4_1" origId="MISRA-069" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration" id="MISRA2008-8_4_2" origId="MISRA2004-16_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRA2008-8_4_3" origId="MISRA2004-16_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2008" desc="A function identifier shall either be used to call the function or it shall be preceded by '&amp;'" id="MISRA2008-8_4_4" origId="MISRA2004-16_9" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All variables shall have a defined value before they are used" id="MISRA2008-8_5_1" origId="MISRA-030" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" id="MISRA2008-8_5_2" origId="INIT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Arrays shall not be partially initialized" id="MISRA2008-8_5_2_b" origId="MISRA2004-9_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Structures shall not be partially initialized" id="MISRA2008-8_5_2_c" origId="MISRA2004-9_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="In an enumerator list, the = construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized" id="MISRA2008-8_5_3" origId="MISRA2004-9_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="const member functions shall not return non-const pointers or references to class-data" id="MISRA2008-9_3_1" origId="CODSTA-CPP-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Protected member functions shall not return non-const handles to class-data" id="MISRA2008-9_3_2_a" origId="OOP-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Public member functions shall not return non-const handles to class-data" id="MISRA2008-9_3_2_b" origId="OOP-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="MISRA2008-9_3_3" origId="CODSTA-CPP-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Unions shall not be used" id="MISRA2008-9_5_1" origId="MISRA2004-18_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Bit-fields shall be either bool type or an explicitly unsigned or signed integral type" id="MISRA2008-9_6_2" origId="CODSTA-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Bit-fields shall not have enum type" id="MISRA2008-9_6_3" origId="CODSTA-74" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="MISRA2008-9_6_4" origId="CODSTA-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Classes should not be derived from virtual bases" id="MISRA2008-10_1_1" origId="OOP-47" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All accessible entity names within a multiple inheritance hierarchy should be unique" id="MISRA2008-10_2_1" origId="CODSTA-CPP-92" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" id="MISRA2008-12_1_2" origId="PB-43" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The viable function set for a function call should either contain no function specializations, or only contain function specializations" id="MISRA2008-14_8_2" origId="TEMPL-08" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="An exception object should not have pointer type" id="MISRA2008-15_0_2" origId="EXCEPT-09" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="MISRA2008-15_3_2" origId="EXCEPT-06" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The \ character should not occur in a header file name" id="MISRA2008-16_2_5" origId="NAMING-48" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The # and ## operators should not be used" id="MISRA2008-16_3_2" origId="MISRA2004-19_13" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifier name of a non-member object or function with static storage duration should not be reused" id="MISRA2008-2_10_5_a" origId="MISRA2004-5_5_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifier name of a non-member object or function with static storage duration should not be reused" id="MISRA2008-2_10_5_b" origId="MISRA2004-5_5_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Digraphs should not be used" id="MISRA2008-2_5_1" origId="CODSTA-48" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Sections of code should not be &quot;commented out&quot; using C++ comments" id="MISRA2008-2_7_3" origId="MISRA2004-2_4" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="18;" authUrg="0;" cat="MISRA2008" desc="typedefs that indicate size and signedness should be used in place of the basic numerical types" id="MISRA2008-3_9_2" origId="MISRA-013" sev="4" total="18" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_a" origId="MISRA2004-12_1_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_b" origId="MISRA2004-12_1_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_c" origId="MISRA2004-12_1_c" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_d" origId="MISRA2004-12_1_d" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_e" origId="MISRA2004-12_1_e" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_f" origId="MISRA2004-12_1_f" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="MISRA2008-5_19_1_a" origId="PB-66_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="MISRA2008-5_19_1_b" origId="PB-66_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" id="MISRA2008-5_2_10" origId="MISRA2004-12_13" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Casts from a base class to a derived class should not be performed on polymorphic types" id="MISRA2008-5_2_3" origId="OOP-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cast should not convert a pointer type to an integral type" id="MISRA2008-5_2_9" origId="MISRA2004-11_3_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Functions should not call themselves, either directly or indirectly" id="MISRA2008-7_5_4" origId="MISRA2004-16_2" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid accessing arrays out of bounds" id="MISRA2008-0_3_1_a" origId="BD-PB-ARRAY" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Avoid null pointer dereferencing" id="MISRA2008-0_3_1_b" origId="BD-PB-NP" sev="5" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid division by zero" id="MISRA2008-0_3_1_c" origId="BD-PB-ZERO" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid buffer overflow due to defining incorrect format limits" id="MISRA2008-0_3_1_d" origId="BD-PB-OVERFFMT" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid overflow due to reading a not zero terminated string" id="MISRA2008-0_3_1_e" origId="BD-PB-OVERFNZT" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not check for null after dereferencing" id="MISRA2008-0_3_1_f" origId="BD-PB-DEREF" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid overflow when reading from a buffer" id="MISRA2008-0_3_1_g" origId="BD-PB-OVERFRD" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid overflow when writing to a buffer" id="MISRA2008-0_3_1_h" origId="BD-PB-OVERFWR" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRA2008-0_3_1_i" origId="BD-PB-PTRSUB" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not compare two unrelated pointers" id="MISRA2008-0_3_1_j" origId="BD-PB-PTRCMP" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Use of floating-point arithmetic shall be documented" id="MISRA2008-0_4_2" origId="COMMENT-10" sev="5" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All uses of the #pragma directive shall be documented" id="MISRA2008-16_6_1" origId="MISRA2004-3_4" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All usage of assembler shall be documented" id="MISRA2008-7_4_1" origId="COMMENT-09" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Precautions shall be taken in order to prevent the contents of a header file being included more than once" id="MISRA2012-DIR-4_10" origId="PFO-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Validate values passed to library functions" id="MISRA2012-DIR-4_11" origId="BD-API-VALPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2012-DIR" desc="Dynamic memory allocation shall not be used" id="MISRA2012-DIR-4_12" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid tainted data in array indexes" id="MISRA2012-DIR-4_14_a" origId="BD-SECURITY-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against integer overflow/underflow from tainted data" id="MISRA2012-DIR-4_14_b" origId="BD-SECURITY-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid buffer read overflow from tainted data" id="MISRA2012-DIR-4_14_c" origId="BD-SECURITY-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid buffer write overflow from tainted data" id="MISRA2012-DIR-4_14_d" origId="BD-SECURITY-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against command injection" id="MISRA2012-DIR-4_14_e" origId="BD-SECURITY-TDCMD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against file name injection" id="MISRA2012-DIR-4_14_f" origId="BD-SECURITY-TDFNAMES" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against SQL injection" id="MISRA2012-DIR-4_14_g" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Prevent buffer overflows from tainted data" id="MISRA2012-DIR-4_14_h" origId="BD-SECURITY-BUFWRITE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="MISRA2012-DIR-4_14_i" origId="BD-SECURITY-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against environment injection" id="MISRA2012-DIR-4_14_j" origId="BD-SECURITY-TDENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid printing tainted data on the output console" id="MISRA2012-DIR-4_14_k" origId="BD-SECURITY-TDCONSOLE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Exclude unsanitized user input from format strings" id="MISRA2012-DIR-4_14_l" origId="BD-SECURITY-TDINPUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid accessing arrays out of bounds" id="MISRA2012-DIR-4_1_a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid null pointer dereferencing" id="MISRA2012-DIR-4_1_b" origId="BD-PB-NP" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid division by zero" id="MISRA2012-DIR-4_1_c" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid buffer overflow due to defining incorrect format limits" id="MISRA2012-DIR-4_1_d" origId="BD-PB-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid overflow due to reading a not zero terminated string" id="MISRA2012-DIR-4_1_e" origId="BD-PB-OVERFNZT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not check for null after dereferencing" id="MISRA2012-DIR-4_1_f" origId="BD-PB-DEREF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid overflow when reading from a buffer" id="MISRA2012-DIR-4_1_g" origId="BD-PB-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid overflow when writing to a buffer" id="MISRA2012-DIR-4_1_h" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRA2012-DIR-4_1_i" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not compare two unrelated pointers" id="MISRA2012-DIR-4_1_j" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid integer overflows" id="MISRA2012-DIR-4_1_k" origId="BD-PB-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Assembly language shall be encapsulated and isolated" id="MISRA2012-DIR-4_3" origId="MISRA2004-2_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Consistently check the returned value of non-void functions" id="MISRA2012-DIR-4_7_a" origId="BD-PB-CHECKRET" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Always check the returned value of non-void function" id="MISRA2012-DIR-4_7_b" origId="BD-PB-CHECKRETGEN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-DIR" desc="All resources obtained dynamically by means of Standard Library functions shall be explicitly released" id="MISRA2012-DIR-4_13_a" origId="BD-RES-LEAKS" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not use resources that have been freed" id="MISRA2012-DIR-4_13_b" origId="BD-RES-FREE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not free resources using invalid pointers" id="MISRA2012-DIR-4_13_c" origId="BD-RES-INVFREE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not abandon unreleased locks" id="MISRA2012-DIR-4_13_d" origId="BD-TRS-LOCK" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid double locking" id="MISRA2012-DIR-4_13_e" origId="BD-TRS-DLOCK" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not release a lock that has not been acquired" id="MISRA2012-DIR-4_13_f" origId="BD-TRS-REVLOCK" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="All usage of assembly language should be documented" id="MISRA2012-DIR-4_2" origId="COMMENT-09" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Sections of code should not be &quot;commented out&quot;" id="MISRA2012-DIR-4_4" origId="MISRA2004-2_4" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Identifiers in the same name space with overlapping visibility should be typographically unambiguous" id="MISRA2012-DIR-4_5" origId="NAMING-50" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="typedefs to basic types should contain some digits in their name" id="MISRA2012-DIR-4_6_a" origId="MISRA2004-6_3" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="MISRA2012-DIR" desc="typedefs should be used in place of the basic types" id="MISRA2012-DIR-4_6_b" origId="MISRA2004-6_3_b" sev="4" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Use typedefs from stdint.h instead of declaring your own in C99 code" id="MISRA2012-DIR-4_6_c" origId="CODSTA-155" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="MISRA2012-DIR-4_8" origId="CODSTA-115" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2012-DIR" desc="A function should be used in preference to a function-like macro where they are interchangeable" id="MISRA2012-DIR-4_9" origId="MISRA2004-19_7" sev="4" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The 'sizeof' operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" id="MISRA2012-RULE-12_5" origId="CODSTA-182" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function shall not be declared implicitly" id="MISRA2012-RULE-17_3" origId="MISRA-071_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRA2012-RULE-17_4" origId="MISRA2004-16_8" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="MISRA2012-RULE-17_4_b" origId="MISRA2004-16_8_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The declaration of an array parameter shall not contain the 'static' keyword between the [ ]" id="MISRA2012-RULE-17_6" origId="CODSTA-160" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An object shall not be assigned or copied to an overlapping object" id="MISRA2012-RULE-19_1_a" origId="MISRA2004-18_2" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An object shall not be assigned or copied to an overlapping object" id="MISRA2012-RULE-19_1_b" origId="MISRA2004-18_2_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An object shall not be assigned or copied to an overlapping object" id="MISRA2012-RULE-19_1_c" origId="BD-PB-OVERLAP" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Any value passed to a function in &lt;ctype.h> shall be representable as an 'unsigned char' or be the value 'EOF'" id="MISRA2012-RULE-21_13" origId="BD-API-CTYPE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid overflow due to reading a not zero terminated string" id="MISRA2012-RULE-21_17_a" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid overflow when writing to a buffer" id="MISRA2012-RULE-21_17_b" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The 'size_t' argument passed to any function in &lt;string.h> shall have an appropriate value" id="MISRA2012-RULE-21_18" origId="BD-API-STRSIZE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="MISRA2012-RULE-21_19_a" origId="CODSTA-185_a" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Strings pointed by members of the structure 'lconv' should not be modified" id="MISRA2012-RULE-21_19_b" origId="CODSTA-185_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="MISRA2012-RULE-21_20" origId="BD-PB-INVRET" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use resources that have been freed" id="MISRA2012-RULE-22_2_a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not free resources using invalid pointers" id="MISRA2012-RULE-22_2_b" origId="BD-RES-INVFREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid writing to a stream which has been opened as read only" id="MISRA2012-RULE-22_4" origId="BD-PB-WRROS" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A pointer to a FILE object shall not be dereferenced" id="MISRA2012-RULE-22_5_a" origId="CODSTA-166_a" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A pointer to a FILE object shall not be dereferenced by a library function" id="MISRA2012-RULE-22_5_b" origId="CODSTA-166_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of a pointer to a FILE shall not be used after the associated stream has been closed" id="MISRA2012-RULE-22_6" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid use before initialization" id="MISRA2012-RULE-9_1" origId="BD-PB-NOTINIT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="MISRA2012-RULE-10_1_a" origId="CODSTA-161_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="MISRA2012-RULE-10_1_b" origId="CODSTA-161_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="MISRA2012-RULE-10_1_c" origId="CODSTA-161_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="MISRA2012-RULE-10_1_d" origId="CODSTA-161_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="MISRA2012-RULE-10_1_e" origId="CODSTA-161_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially signed or enum type should not be used as right hand side operand to the bitwise shifting operator" id="MISRA2012-RULE-10_1_f" origId="CODSTA-161_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="MISRA2012-RULE-10_1_g" origId="CODSTA-161_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" id="MISRA2012-RULE-10_2" origId="CODSTA-162" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="MISRA2012-RULE-10_3_a" origId="CODSTA-163_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="MISRA2012-RULE-10_3_b" origId="CODSTA-163_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="MISRA2012-RULE-10_4_a" origId="CODSTA-164_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The second and third operands of the ternary operator shall have the same essential type category" id="MISRA2012-RULE-10_4_b" origId="CODSTA-164_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="MISRA2012-RULE-10_6" origId="CODSTA-157" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="MISRA2012-RULE-10_7_a" origId="CODSTA-156_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="MISRA2012-RULE-10_7_b" origId="CODSTA-156_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of a composite expression shall not be cast to a different essential type category or a wider essential type" id="MISRA2012-RULE-10_8" origId="CODSTA-152" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Conversions shall not be performed between a pointer to a function and any other type" id="MISRA2012-RULE-11_1_a" origId="CODSTA-124_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Conversions shall not be performed between a pointer to a function and any other type" id="MISRA2012-RULE-11_1_b" origId="CODSTA-124_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="MISRA2012-RULE-11_2" origId="CODSTA-125" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A cast shall not be performed between a pointer to object type and a pointer to a different object type" id="MISRA2012-RULE-11_3" origId="CODSTA-126" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A cast shall not be performed between pointer to void and an arithmetic type" id="MISRA2012-RULE-11_6" origId="CODSTA-129_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="MISRA2012-RULE-11_7" origId="CODSTA-130" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A cast shall not remove any const or volatile qualification from the type pointed to by a pointer" id="MISRA2012-RULE-11_8" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="The macro NULL shall be the only permitted form of integer null pointer constant" id="MISRA2012-RULE-11_9_a" origId="CODSTA-CPP-63" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="25;" authUrg="0;" cat="MISRA2012-RULE" desc="The macro NULL shall be the only permitted form of integer null pointer constant" id="MISRA2012-RULE-11_9_b" origId="CODSTA-131" sev="2" total="25" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The right hand operand of a shift operator shall lie in the range zero to one less than the width in bits of the essential type of the left hand operand" id="MISRA2012-RULE-12_2" origId="MISRA2004-12_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Initializer lists shall not contain persistent side effects" id="MISRA2012-RULE-13_1_a" origId="CODSTA-141_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2012-RULE-13_2_a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRA2012-RULE-13_2_b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRA2012-RULE-13_2_c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRA2012-RULE-13_2_d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRA2012-RULE-13_2_e" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use more than one volatile in one expression" id="MISRA2012-RULE-13_2_f" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRA2012-RULE-13_2_g" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The right hand operand of a logical &amp;&amp; or || operator shall not contain persistent side effects" id="MISRA2012-RULE-13_5" origId="MISRA2004-12_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The operand of the sizeof operator shall not contain any expression which has potential side effects" id="MISRA2012-RULE-13_6_a" origId="MISRA2004-12_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The operand of the sizeof operator shall not contain any expression which has potential side effects" id="MISRA2012-RULE-13_6_b" origId="MISRA2004-12_3_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The operand of the sizeof operator shall not contain any expression which has potential side effects" id="MISRA2012-RULE-13_6_c" origId="CODSTA-137" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A loop counter in a 'for' loop shall not have essentially floating type" id="MISRA2012-RULE-14_1_a" origId="CODSTA-167_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A loop counter in 'while' and 'do-while' loops shall not have essentially floating type" id="MISRA2012-RULE-14_1_b" origId="CODSTA-167_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" id="MISRA2012-RULE-14_2_a" origId="CODSTA-168" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The first clause of a 'for' loop shall be well-formed" id="MISRA2012-RULE-14_2_b" origId="CODSTA-169_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The second clause of a 'for' loop shall be well-formed" id="MISRA2012-RULE-14_2_c" origId="CODSTA-169_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The third clause of a 'for' statement shall be well-formed" id="MISRA2012-RULE-14_2_d" origId="CODSTA-169_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Controlling expressions shall not be invariant" id="MISRA2012-RULE-14_3_zc" origId="BD-PB-CC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type" id="MISRA2012-RULE-14_4" origId="MISRA2004-13_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The goto statement shall jump to a label declared later in the same function" id="MISRA2012-RULE-15_2" origId="CODSTA-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement" id="MISRA2012-RULE-15_3" origId="CODSTA-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The body of an iteration-statement or a selection-statement shall be a compound-statement" id="MISRA2012-RULE-15_6_a" origId="MISRA2004-14_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The body of an iteration-statement or a selection-statement shall be a compound-statement" id="MISRA2012-RULE-15_6_b" origId="MISRA2004-14_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All 'if ... else if' constructs shall be terminated with an 'else' statement" id="MISRA2012-RULE-15_7" origId="MISRA2004-14_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="MISRA2012-RULE-16_1_a" origId="MISRA2004-15_0_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRA2012-RULE-16_1_b" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRA2012-RULE-16_1_c" origId="MISRA2004-15_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRA2012-RULE-16_1_d" origId="MISRA2004-15_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Always provide a default branch for switch statements" id="MISRA2012-RULE-16_1_e" origId="CODSTA-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRA2012-RULE-16_1_f" origId="CODSTA-119" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="MISRA2012-RULE-16_1_g" origId="CODSTA-116" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Every switch statement shall have at least two switch-clauses" id="MISRA2012-RULE-16_1_h" origId="OPT-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRA2012-RULE-16_2" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An unconditional break statement shall terminate every switch-clause" id="MISRA2012-RULE-16_3_a" origId="MISRA2004-15_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An unconditional break statement shall terminate every switch-clause" id="MISRA2012-RULE-16_3_b" origId="MISRA2004-15_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Every 'switch' statement shall have a 'default' label" id="MISRA2012-RULE-16_4_a" origId="CODSTA-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRA2012-RULE-16_4_b" origId="CODSTA-119" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A default label shall appear as either the first or the last switch label of a switch statement" id="MISRA2012-RULE-16_5" origId="CODSTA-116" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Every switch statement shall have at least two switch-clauses" id="MISRA2012-RULE-16_6" origId="OPT-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch-expression shall not have essentially Boolean type" id="MISRA2012-RULE-16_7_a" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch-expression shall not have essentially Boolean type" id="MISRA2012-RULE-16_7_b" origId="MISRA2004-15_4_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The features of &lt;stdarg.h> shall not be used" id="MISRA2012-RULE-17_1_a" origId="CODSTA-136_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The features of &lt;stdarg.h> shall not be used" id="MISRA2012-RULE-17_1_b" origId="CODSTA-136_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Functions shall not call themselves, either directly or indirectly" id="MISRA2012-RULE-17_2" origId="MISRA2004-16_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" id="MISRA2012-RULE-17_5" origId="CODSTA-134" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="The value returned by a function having non-void return type shall be used" id="MISRA2012-RULE-17_7_a" origId="CODSTA-122_a" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value returned by a function having non-void return type shall be used" id="MISRA2012-RULE-17_7_b" origId="CODSTA-122_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid accessing arrays out of bounds" id="MISRA2012-RULE-18_1_a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid accessing arrays and pointers out of bounds" id="MISRA2012-RULE-18_1_b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="MISRA2012-RULE-18_1_c" origId="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Subtraction between pointers shall only be applied to pointers that address elements of the same array" id="MISRA2012-RULE-18_2" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc=">, >=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array" id="MISRA2012-RULE-18_3" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRA2012-RULE-18_6_a" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2012-RULE-18_6_b" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Flexible array members shall not be declared" id="MISRA2012-RULE-18_7" origId="CODSTA-113" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Variable-length array types shall not be used" id="MISRA2012-RULE-18_8" origId="CODSTA-112" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRA2012-RULE-1_1_a_c90" origId="CODSTA-174_a_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRA2012-RULE-1_1_a_c99" origId="CODSTA-174_a_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRA2012-RULE-1_1_b_c90" origId="CODSTA-174_b_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRA2012-RULE-1_1_b_c99" origId="CODSTA-174_b_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid division by zero" id="MISRA2012-RULE-1_3_a" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid use before initialization" id="MISRA2012-RULE-1_3_b" origId="BD-PB-NOTINIT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use resources that have been freed" id="MISRA2012-RULE-1_3_c" origId="BD-RES-FREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid overflow when reading from a buffer" id="MISRA2012-RULE-1_3_d" origId="BD-PB-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid overflow when writing to a buffer" id="MISRA2012-RULE-1_3_e" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2012-RULE-1_3_f" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRA2012-RULE-1_3_g" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRA2012-RULE-1_3_h" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRA2012-RULE-1_3_i" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRA2012-RULE-1_3_j" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use more than one volatile in one expression" id="MISRA2012-RULE-1_3_k" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRA2012-RULE-1_3_l" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function shall not return a pointer or reference to a non-static local object" id="MISRA2012-RULE-1_3_m" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The address of an object with automatic storage shall not be assigned to an object which persists after the object has ceased to exist" id="MISRA2012-RULE-1_3_n" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The left-hand operand of a right-shift operator shall not have a negative value" id="MISRA2012-RULE-1_3_o" origId="PB-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The '_Generic' operator should not be used" id="MISRA2012-RULE-1_4_a" origId="CODSTA-216" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The '_Noreturn' function specifier should not be used" id="MISRA2012-RULE-1_4_b" origId="CODSTA-206" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The &lt;stdnoreturn.h> header file should not be used" id="MISRA2012-RULE-1_4_c" origId="CODSTA-207" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The '_Atomic' type specifier and the '_Atomic' type qualifier should not be used" id="MISRA2012-RULE-1_4_d" origId="CODSTA-214" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The facilities that are specified as being provided by &lt;stdatomic.h> should not be used" id="MISRA2012-RULE-1_4_e" origId="CODSTA-209" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The '_Thread_local' storage class specifier should not be used" id="MISRA2012-RULE-1_4_f" origId="CODSTA-210" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The facilities that are specified as being provided by &lt;threads.h> should not be used" id="MISRA2012-RULE-1_4_g" origId="CODSTA-211" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The '_Alignas' alignment specifier and the '_Alignof' operator should not be used" id="MISRA2012-RULE-1_4_h" origId="CODSTA-213" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The &lt;stdalign.h> header file shall not be used" id="MISRA2012-RULE-1_4_i" origId="CODSTA-208" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0'" id="MISRA2012-RULE-1_4_j" origId="CODSTA-215" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The 'rsize_t' type should not be used" id="MISRA2012-RULE-1_4_k" origId="CODSTA-212" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The 'errno_t' type should not be used" id="MISRA2012-RULE-1_4_l" origId="CODSTA-217" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S" id="MISRA2012-RULE-1_4_m" origId="CODSTA-218" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use the functions defined in Annex K of ISO/IEC 9899:2011 standard" id="MISRA2012-RULE-1_4_n" origId="CODSTA-219" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" id="MISRA2012-RULE-20_11" origId="PREPROC-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" id="MISRA2012-RULE-20_12" origId="PREPROC-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A line whose first token is # shall be a valid preprocessing directive" id="MISRA2012-RULE-20_13" origId="MISRA2004-19_16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related" id="MISRA2012-RULE-20_14" origId="MISRA2004-19_17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The ', &amp; or \ characters and the /* or // character sequences shall not occur in a header file name" id="MISRA2012-RULE-20_2_a" origId="NAMING-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The ', &amp; or \ characters and the /* or // character sequences shall not occur in a header file name" id="MISRA2012-RULE-20_2_b" origId="NAMING-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRA2012-RULE-20_3" origId="MISRA-089" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A macro shall not be defined with the same name as a keyword" id="MISRA2012-RULE-20_4_a" origId="CODSTA-133_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A macro shall not be defined with the same name as a keyword" id="MISRA2012-RULE-20_4_b" origId="CODSTA-133_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Tokens that look like a preprocessing directive shall not occur within a macro argument" id="MISRA2012-RULE-20_6" origId="MISRA2004-19_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2012-RULE" desc="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" id="MISRA2012-RULE-20_7" origId="MISRA2004-19_10" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" id="MISRA2012-RULE-20_8" origId="PREPROC-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation" id="MISRA2012-RULE-20_9_b" origId="MISRA2004-19_11_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The Standard Library time and date functions shall not be used" id="MISRA2012-RULE-21_10" origId="SECURITY-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;tgmath.h> shall not be used" id="MISRA2012-RULE-21_11" origId="CODSTA-108" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The facilities that are specified as being provided by &lt;tgmath.h> should not be used" id="MISRA2012-RULE-21_11_b" origId="CODSTA-108_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The Standard Library function 'memcmp' shall not be used to compare null-terminated strings" id="MISRA2012-RULE-21_14" origId="BD-PB-MCCSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types" id="MISRA2012-RULE-21_15" origId="CODSTA-183" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" id="MISRA2012-RULE-21_16" origId="CODSTA-184" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not #define or #undef identifiers with names which start with underscore" id="MISRA2012-RULE-21_1_a" origId="MISRA2004-20_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#define and #undef shall not be used on a reserved identifier or reserved macro name (for C90 code)" id="MISRA2012-RULE-21_1_b" origId="CODSTA-92_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#define and #undef shall not be used on a reserved identifier or reserved macro name (for C99 code)" id="MISRA2012-RULE-21_1_c" origId="CODSTA-92_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not #define nor #undef identifier 'defined'" id="MISRA2012-RULE-21_1_d" origId="MISRA2004-20_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library function 'system' of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_21" origId="SECURITY-48_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An identifier with name which starts with underscore shall not be declared" id="MISRA2012-RULE-21_2_a" origId="MISRA2004-20_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A reserved identifier or macro name shall not be declared (for C90 code)" id="MISRA2012-RULE-21_2_b" origId="MISRA2004-20_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A reserved identifier or macro name shall not be declared (for C99 code)" id="MISRA2012-RULE-21_2_c" origId="MISRA2004-20_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2012-RULE" desc="The memory allocation and deallocation functions of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_3" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;setjmp.h> shall not be used" id="MISRA2012-RULE-21_4_a" origId="MISRA2004-20_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;setjmp.h> shall not be used" id="MISRA2012-RULE-21_4_b" origId="MISRA2004-20_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;signal.h> shall not be used" id="MISRA2012-RULE-21_5_a" origId="MISRA2004-20_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;signal.h> shall not be used" id="MISRA2012-RULE-21_5_b" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2012-RULE" desc="The Standard Library input/output functions shall not be used" id="MISRA2012-RULE-21_6" origId="CODSTA-110" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2012-RULE" desc="The atof, atoi, atol and atoll functions of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_7" origId="MISRA2004-20_10" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library function 'abort' of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_8" origId="PB-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library function 'exit' of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_8_b" origId="PB-75_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library functions 'quick_exit' and '_Exit' of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_8_c" origId="PB-75_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_9" origId="CODSTA-107" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="All resources obtained dynamically by means of Standard Library functions shall be explicitly released" id="MISRA2012-RULE-22_1" origId="BD-RES-LEAKS" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of 'errno' shall only be tested when the last function to be called was an errno-setting-function" id="MISRA2012-RULE-22_10" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The same file shall not be opened for read and write access at the same time on different stream" id="MISRA2012-RULE-22_3" origId="BD-PB-WRRDSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The macro 'EOF' should be compared with the unmodified return value from the Standard Library function" id="MISRA2012-RULE-22_7" origId="BD-PB-EOFCOMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of 'errno' shall be set to zero prior to a call to an errno-setting-function" id="MISRA2012-RULE-22_8" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of 'errno' shall be tested against zero after calling an errno-setting-function" id="MISRA2012-RULE-22_9" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code in 'else' block" id="MISRA2012-RULE-2_1_a" origId="MISRA2004-14_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="MISRA2012-RULE-2_1_b" origId="MISRA2004-14_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code in 'if', 'else', 'while', 'for' block" id="MISRA2012-RULE-2_1_c" origId="MISRA2004-14_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code in 'switch' statement" id="MISRA2012-RULE-2_1_d" origId="MISRA2004-14_1_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code in 'for' loop" id="MISRA2012-RULE-2_1_e" origId="MISRA2004-14_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="MISRA2012-RULE-2_1_f" origId="MISRA2004-14_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code after 'if' or 'switch' statement inside 'while'/'for'/'do...while' loop" id="MISRA2012-RULE-2_1_g" origId="MISRA2004-14_1_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRA2012-RULE-2_2_a" origId="MISRA2004-14_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="8;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid unused values" id="MISRA2012-RULE-2_2_b" origId="BD-PB-VOVR" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The character sequence /* shall not be used within a C-style comment" id="MISRA2012-RULE-3_1_a" origId="MISRA2004-2_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The character sequence // shall not be used within a C-style comment" id="MISRA2012-RULE-3_1_b" origId="COMMENT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The character sequence /* shall not be used within a C++-style comment" id="MISRA2012-RULE-3_1_c" origId="COMMENT-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Line-splicing shall not be used in // comments" id="MISRA2012-RULE-3_2" origId="COMMENT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Octal and hexadecimal escape sequences shall be terminated" id="MISRA2012-RULE-4_1" origId="CODSTA-117" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="External identifiers shall be distinct" id="MISRA2012-RULE-5_1" origId="CODSTA-178" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c90)" id="MISRA2012-RULE-5_2_a_c90" origId="CODSTA-179_a_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c99)" id="MISRA2012-RULE-5_2_a_c99" origId="CODSTA-179_a_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers declared in the same block scope and name space shall be distinct (c90)" id="MISRA2012-RULE-5_2_b_c90" origId="CODSTA-179_b_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers declared in the same block scope and name space shall be distinct (c99)" id="MISRA2012-RULE-5_2_b_c99" origId="CODSTA-179_b_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2012-RULE-5_3_a" origId="MISRA2004-5_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2012-RULE-5_3_b" origId="MISRA2004-5_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The name of a macro should be distinct from the names of its parameters(c90)" id="MISRA2012-RULE-5_4_a_c90" origId="CODSTA-171_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The name of a macro should be distinct from the names of its parameters(c99)" id="MISRA2012-RULE-5_4_a_c99" origId="CODSTA-171_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c90)" id="MISRA2012-RULE-5_4_b_c90" origId="CODSTA-172_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c99)" id="MISRA2012-RULE-5_4_b_c99" origId="CODSTA-172_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers shall be distinct from macro names (c90)" id="MISRA2012-RULE-5_5_c90" origId="CODSTA-170_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers shall be distinct from macro names (c99)" id="MISRA2012-RULE-5_5_c99" origId="CODSTA-170_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A typedef name shall be a unique identifier" id="MISRA2012-RULE-5_6_a" origId="MISRA2004-5_3_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A typedef name shall be a unique identifier" id="MISRA2012-RULE-5_6_b" origId="MISRA2004-5_3_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A tag name shall not be reused for other purpose within the program" id="MISRA2012-RULE-5_7_a" origId="MISRA2004-5_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A tag name shall not be reused to define a different tag" id="MISRA2012-RULE-5_7_b" origId="MISRA2004-5_4_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers that define objects or functions with external linkage shall be unique" id="MISRA2012-RULE-5_8" origId="CODSTA-180" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Bit-fields shall only be declared with an appropriate type" id="MISRA2012-RULE-6_1" origId="MISRA2004-6_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Single-bit named bit fields shall not be of a signed type" id="MISRA2012-RULE-6_2" origId="CODSTA-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Octal constants shall not be used" id="MISRA2012-RULE-7_1" origId="MISRA2004-7_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A 'u' or 'U' suffix shall be applied to all integer constants that are represented in an unsigned type" id="MISRA2012-RULE-7_2" origId="MISRA2004-10_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The lowercase character 'l' shall not be used in a literal suffix" id="MISRA2012-RULE-7_3" origId="PORT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" id="MISRA2012-RULE-7_4" origId="PB-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An inline function shall be declared with the static storage class" id="MISRA2012-RULE-8_10" origId="CODSTA-120" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" id="MISRA2012-RULE-8_12" origId="PB-58" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The restrict type qualifier shall not be used" id="MISRA2012-RULE-8_14" origId="CODSTA-121" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Whenever a function is declared or defined, its type shall be explicitly stated" id="MISRA2012-RULE-8_1_a" origId="MISRA2004-8_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Whenever an object is declared or defined, its type shall be explicitly stated" id="MISRA2012-RULE-8_1_b" origId="MISRA2004-8_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers shall be given for all of the parameters in a function prototype declaration" id="MISRA2012-RULE-8_2_a" origId="MISRA2004-16_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Function types shall have named parameters" id="MISRA2012-RULE-8_2_b" origId="CODSTA-158" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Function types shall be in prototype form" id="MISRA2012-RULE-8_2_c" origId="CODSTA-159" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRA2012-RULE-8_3_a" origId="MISRA2004-8_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The identifiers used in the declaration and definition of a function shall be identical" id="MISRA2012-RULE-8_3_b" origId="MISRA2004-16_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All declarations of an object or function shall have compatible types" id="MISRA2012-RULE-8_3_c" origId="GLOBAL-COMPATDECLS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A compatible declaration shall be visible when an object or function with external linkage is defined" id="MISRA2012-RULE-8_4_a" origId="CODSTA-118" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A compatible declaration shall be visible when an object or function with external linkage is defined" id="MISRA2012-RULE-8_4_b" origId="MISRA2004-8_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An external object or function shall not have more than one non-defining declaration in translation unit" id="MISRA2012-RULE-8_5" origId="CODSTA-154" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An identifier with external linkage shall have exactly one external definition" id="MISRA2012-RULE-8_6" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage" id="MISRA2012-RULE-8_8" origId="MISRA2004-8_11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The initializer for an aggregate or union shall be enclosed in braces" id="MISRA2012-RULE-9_2" origId="INIT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Arrays shall not be partially initialized" id="MISRA2012-RULE-9_3" origId="MISRA2004-9_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An element of an object shall not be initialized more than once" id="MISRA2012-RULE-9_4" origId="PB-69" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" id="MISRA2012-RULE-9_5" origId="CODSTA-186" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The cast operation to essentially enumeration type is not allowed" id="MISRA2012-RULE-10_5_a" origId="CODSTA-165_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not cast from or to essentially Boolean type" id="MISRA2012-RULE-10_5_b" origId="CODSTA-165_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use casts between essentially character types and essentially floating types" id="MISRA2012-RULE-10_5_c" origId="CODSTA-165_c" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A conversion should not be performed between a pointer to object and an integer type" id="MISRA2012-RULE-11_4" origId="CODSTA-127" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A conversion should not be performed from pointer to void into pointer to object" id="MISRA2012-RULE-11_5" origId="CODSTA-128" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Use parentheses unless all operators in the expression are the same" id="MISRA2012-RULE-12_1_a" origId="MISRA2004-12_1_e" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The operands of a logical &amp;&amp; or || shall be primary-expressions" id="MISRA2012-RULE-12_1_b" origId="MISRA2004-12_5" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Parenthesis shall be used with 'sizeof' statement" id="MISRA2012-RULE-12_1_c" origId="FORMAT-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The comma operator should not be used" id="MISRA2012-RULE-12_3" origId="MISRA2004-12_10" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="MISRA2012-RULE-12_4_a" origId="PB-66_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="MISRA2012-RULE-12_4_b" origId="PB-66_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator" id="MISRA2012-RULE-13_3" origId="CODSTA-123" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The result of an assignment operator should not be used" id="MISRA2012-RULE-13_4" origId="CODSTA-138" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The goto statement should not be used" id="MISRA2012-RULE-15_1" origId="MISRA2004-14_4" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There should be no more than one break or goto statement used to terminate any iteration statement" id="MISRA2012-RULE-15_4" origId="CODSTA-79" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function should have a single point of exit at the end" id="MISRA2012-RULE-15_5" origId="MISRA2004-14_7" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function parameter should not be modified" id="MISRA2012-RULE-17_8" origId="CODSTA-132" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The +, -, += and -= operators should not be applied to an expression of pointer type" id="MISRA2012-RULE-18_4" origId="CODSTA-181" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Declarations should contain no more than two levels of pointer nesting" id="MISRA2012-RULE-18_5" origId="MISRA2004-17_5" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The union keyword should not be used" id="MISRA2012-RULE-19_2" origId="CODSTA-111" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#include directives should only be preceded by preprocessor directives or comments" id="MISRA2012-RULE-20_1" origId="MISRA2004-19_1" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The # and ## preprocessor operators should not be used" id="MISRA2012-RULE-20_10" origId="MISRA2004-19_13" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#undef should not be used" id="MISRA2012-RULE-20_5" origId="PREPROC-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The exception handling features of &lt;fenv.h> should not be used" id="MISRA2012-RULE-21_12" origId="CODSTA-109" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function should not contain unused type declarations" id="MISRA2012-RULE-2_3_a" origId="CODSTA-175_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A source file should not contain unused type declarations" id="MISRA2012-RULE-2_3_b" origId="CODSTA-175_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function should not contain unused local tag declarations" id="MISRA2012-RULE-2_4_a" origId="CODSTA-176_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A source file should not contain unused tag declarations" id="MISRA2012-RULE-2_4_b" origId="CODSTA-176_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A source file should not contain unused macro definitions" id="MISRA2012-RULE-2_5" origId="CODSTA-177" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function should not contain unused label declarations" id="MISRA2012-RULE-2_6" origId="OPT-37" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There should be no unused parameters in functions" id="MISRA2012-RULE-2_7" origId="OPT-38" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Trigraphs should not be used" id="MISRA2012-RULE-4_2" origId="MISRA2004-4_2" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers that define objects or functions with internal linkage should be unique" id="MISRA2012-RULE-5_9_a" origId="MISRA2004-5_5_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers that define objects or functions with internal linkage should be unique" id="MISRA2012-RULE-5_9_b" origId="MISRA2004-5_5_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="When an array with external linkage is declared, its size should be explicitly specified" id="MISRA2012-RULE-8_11" origId="MISRA2004-8_12" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2012-RULE" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="MISRA2012-RULE-8_13_a" origId="MISRA2004-16_7" sev="4" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRA2012-RULE-8_13_b" origId="MISRA2004-16_7_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" id="MISRA2012-RULE-8_7" origId="GLOBAL-AVOIDEXTERN" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An object should be defined at block scope if its identifier only appears in a single function" id="MISRA2012-RULE-8_9" origId="MISRA2004-8_7" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid accessing arrays out of bounds" id="MISRAC2012-DIR_4_1-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid null pointer dereferencing" id="MISRAC2012-DIR_4_1-b" origId="BD-PB-NP" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid division by zero" id="MISRAC2012-DIR_4_1-c" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid buffer overflow due to defining incorrect format limits" id="MISRAC2012-DIR_4_1-d" origId="BD-PB-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid overflow due to reading a not zero terminated string" id="MISRAC2012-DIR_4_1-e" origId="BD-PB-OVERFNZT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Do not check for null after dereferencing" id="MISRAC2012-DIR_4_1-f" origId="BD-PB-DEREF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid overflow when reading from a buffer" id="MISRAC2012-DIR_4_1-g" origId="BD-PB-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid overflow when writing to a buffer" id="MISRAC2012-DIR_4_1-h" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRAC2012-DIR_4_1-i" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Do not compare two unrelated pointers" id="MISRAC2012-DIR_4_1-j" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid integer overflows" id="MISRAC2012-DIR_4_1-k" origId="BD-PB-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_10" desc="Use multiple include guards" id="MISRAC2012-DIR_4_10-a" origId="PFO-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_11" desc="Validate values passed to library functions" id="MISRAC2012-DIR_4_11-a" origId="BD-API-VALPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-DIR_4_12" desc="Dynamic heap memory allocation shall not be used" id="MISRAC2012-DIR_4_12-a" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Ensure resources are freed" id="MISRAC2012-DIR_4_13-a" origId="BD-RES-LEAKS" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not use resources that have been freed" id="MISRAC2012-DIR_4_13-b" origId="BD-RES-FREE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not free resources using invalid pointers" id="MISRAC2012-DIR_4_13-c" origId="BD-RES-INVFREE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not abandon unreleased locks" id="MISRAC2012-DIR_4_13-d" origId="BD-TRS-LOCK" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Avoid double locking" id="MISRAC2012-DIR_4_13-e" origId="BD-TRS-DLOCK" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not release a lock that has not been acquired" id="MISRAC2012-DIR_4_13-f" origId="BD-TRS-REVLOCK" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid tainted data in array indexes" id="MISRAC2012-DIR_4_14-a" origId="BD-SECURITY-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against integer overflow/underflow from tainted data" id="MISRAC2012-DIR_4_14-b" origId="BD-SECURITY-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid buffer read overflow from tainted data" id="MISRAC2012-DIR_4_14-c" origId="BD-SECURITY-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid buffer write overflow from tainted data" id="MISRAC2012-DIR_4_14-d" origId="BD-SECURITY-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against command injection" id="MISRAC2012-DIR_4_14-e" origId="BD-SECURITY-TDCMD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against file name injection" id="MISRAC2012-DIR_4_14-f" origId="BD-SECURITY-TDFNAMES" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against SQL injection" id="MISRAC2012-DIR_4_14-g" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Prevent buffer overflows from tainted data" id="MISRAC2012-DIR_4_14-h" origId="BD-SECURITY-BUFWRITE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="MISRAC2012-DIR_4_14-i" origId="BD-SECURITY-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against environment injection" id="MISRAC2012-DIR_4_14-j" origId="BD-SECURITY-TDENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid printing tainted data on the output console" id="MISRAC2012-DIR_4_14-k" origId="BD-SECURITY-TDCONSOLE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Exclude unsanitized user input from format strings" id="MISRAC2012-DIR_4_14-l" origId="BD-SECURITY-TDINPUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_2" desc="All usage of assembler shall be documented" id="MISRAC2012-DIR_4_2-a" origId="COMMENT-09" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_3" desc="Assembly language shall be encapsulated and isolated" id="MISRAC2012-DIR_4_3-a" origId="MISRA2004-2_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_4" desc="Sections of code should not be &quot;commented out&quot;" id="MISRAC2012-DIR_4_4-a" origId="MISRA2004-2_4" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_5" desc="Identifiers in the same name space with overlapping visibility should be typographically unambiguous" id="MISRAC2012-DIR_4_5-a" origId="NAMING-50" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_6" desc="typedefs to basic types should contain some digits in their name" id="MISRAC2012-DIR_4_6-a" origId="MISRA2004-6_3" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="MISRAC2012-DIR_4_6" desc="typedefs should be used in place of the basic types" id="MISRAC2012-DIR_4_6-b" origId="MISRA2004-6_3_b" sev="4" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_6" desc="Use typedefs from stdint.h instead of declaring your own in C99 code" id="MISRAC2012-DIR_4_6-c" origId="CODSTA-155" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_7" desc="Consistently check the returned value of non-void functions" id="MISRAC2012-DIR_4_7-a" origId="BD-PB-CHECKRET" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_7" desc="Always check the returned value of non-void function" id="MISRAC2012-DIR_4_7-b" origId="BD-PB-CHECKRETGEN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_8" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="MISRAC2012-DIR_4_8-a" origId="CODSTA-115" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRAC2012-DIR_4_9" desc="A function should be used in preference to a function-like macro" id="MISRAC2012-DIR_4_9-a" origId="MISRA2004-19_7" sev="4" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="MISRAC2012-RULE_10_1-a" origId="CODSTA-161_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="MISRAC2012-RULE_10_1-b" origId="CODSTA-161_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="MISRAC2012-RULE_10_1-c" origId="CODSTA-161_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="MISRAC2012-RULE_10_1-d" origId="CODSTA-161_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="MISRAC2012-RULE_10_1-e" origId="CODSTA-161_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" id="MISRAC2012-RULE_10_1-f" origId="CODSTA-161_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="MISRAC2012-RULE_10_1-g" origId="CODSTA-161_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_2" desc="Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" id="MISRAC2012-RULE_10_2-a" origId="CODSTA-162" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_3" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="MISRAC2012-RULE_10_3-a" origId="CODSTA-163_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_3" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="MISRAC2012-RULE_10_3-b" origId="CODSTA-163_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_4" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="MISRAC2012-RULE_10_4-a" origId="CODSTA-164_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_4" desc="The second and third operands of the ternary operator shall have the same essential type category" id="MISRAC2012-RULE_10_4-b" origId="CODSTA-164_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_5" desc="The cast operation to essentially enumeration type is not allowed" id="MISRAC2012-RULE_10_5-a" origId="CODSTA-165_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_5" desc="Do not cast from or to essentially Boolean type" id="MISRAC2012-RULE_10_5-b" origId="CODSTA-165_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_5" desc="Do not use casts between essentially character types and essentially floating types" id="MISRAC2012-RULE_10_5-c" origId="CODSTA-165_c" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_6" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="MISRAC2012-RULE_10_6-a" origId="CODSTA-157" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_7" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="MISRAC2012-RULE_10_7-a" origId="CODSTA-156_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_7" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="MISRAC2012-RULE_10_7-b" origId="CODSTA-156_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_8" desc="The value of a composite expression shall not be cast to a different essential type category or a wider essential type" id="MISRAC2012-RULE_10_8-a" origId="CODSTA-152" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_1" desc="Conversions shall not be performed between a pointer to a function and any other type than pointer to function" id="MISRAC2012-RULE_11_1-a" origId="CODSTA-124_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_1" desc="Conversions shall not be performed between non compatible pointer to a function types" id="MISRAC2012-RULE_11_1-b" origId="CODSTA-124_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_2" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="MISRAC2012-RULE_11_2-a" origId="CODSTA-125" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_3" desc="A cast shall not be performed between a pointer to object type and a pointer to a different object type" id="MISRAC2012-RULE_11_3-a" origId="CODSTA-126" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_4" desc="A conversion should not be performed between a pointer to object and an integer type" id="MISRAC2012-RULE_11_4-a" origId="CODSTA-127" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_5" desc="A conversion should not be performed from pointer to void into pointer to object" id="MISRAC2012-RULE_11_5-a" origId="CODSTA-128" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_6" desc="A cast shall not be performed between pointer to void and an arithmetic type" id="MISRAC2012-RULE_11_6-a" origId="CODSTA-129_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_7" desc="A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="MISRAC2012-RULE_11_7-a" origId="CODSTA-130" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_8" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="MISRAC2012-RULE_11_8-a" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_11_9" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="MISRAC2012-RULE_11_9-a" origId="CODSTA-CPP-63" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="25;" authUrg="0;" cat="MISRAC2012-RULE_11_9" desc="Use NULL instead of literal zero (0) as the null-pointer-constant" id="MISRAC2012-RULE_11_9-b" origId="CODSTA-131" sev="2" total="25" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_1" desc="Use parentheses unless all operators in the expression are the same" id="MISRAC2012-RULE_12_1-a" origId="MISRA2004-12_1_e" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_1" desc="The operands of a logical &amp;&amp; or || shall be primary-expressions" id="MISRAC2012-RULE_12_1-b" origId="MISRA2004-12_5" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_1" desc="The operand of the 'sizeof' operator should be enclosed in parentheses" id="MISRAC2012-RULE_12_1-c" origId="FORMAT-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_2" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="MISRAC2012-RULE_12_2-a" origId="MISRA2004-12_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_3" desc="The comma operator shall not be used" id="MISRAC2012-RULE_12_3-a" origId="MISRA2004-12_10" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_4" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="MISRAC2012-RULE_12_4-a" origId="PB-66_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_4" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="MISRAC2012-RULE_12_4-b" origId="PB-66_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_5" desc="The 'sizeof' operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" id="MISRAC2012-RULE_12_5-a" origId="CODSTA-182" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_1" desc="Initializer lists shall not contain persistent side effects" id="MISRAC2012-RULE_13_1-a" origId="CODSTA-141_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRAC2012-RULE_13_2-a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRAC2012-RULE_13_2-b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRAC2012-RULE_13_2-c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRAC2012-RULE_13_2-d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRAC2012-RULE_13_2-e" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Do not use more than one volatile between two adjacent sequence points" id="MISRAC2012-RULE_13_2-f" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRAC2012-RULE_13_2-g" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_3" desc="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects" id="MISRAC2012-RULE_13_3-a" origId="CODSTA-123" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_4" desc="The result of a built-in assignment operator should not be used" id="MISRAC2012-RULE_13_4-a" origId="CODSTA-138" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_5" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="MISRAC2012-RULE_13_5-a" origId="MISRA2004-12_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_6" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="MISRAC2012-RULE_13_6-a" origId="MISRA2004-12_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_6" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="MISRAC2012-RULE_13_6-b" origId="MISRA2004-12_3_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_6" desc="The function call shall not be the operand of the sizeof operator" id="MISRAC2012-RULE_13_6-c" origId="CODSTA-137" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_1" desc="A loop counter in a 'for' loop shall not have essentially floating type" id="MISRAC2012-RULE_14_1-a" origId="CODSTA-167_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_1" desc="A loop counter in 'while' and 'do-while' loops shall not have essentially floating type" id="MISRAC2012-RULE_14_1-b" origId="CODSTA-167_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" id="MISRAC2012-RULE_14_2-a" origId="CODSTA-168" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="The first clause of a 'for' loop shall be well-formed" id="MISRAC2012-RULE_14_2-b" origId="CODSTA-169_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="The second clause of a 'for' loop shall be well-formed" id="MISRAC2012-RULE_14_2-c" origId="CODSTA-169_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="The third clause of a 'for' statement shall be well-formed" id="MISRAC2012-RULE_14_2-d" origId="CODSTA-169_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_3" desc="Avoid conditions that always evaluate to the same value" id="MISRAC2012-RULE_14_3-ac" origId="BD-PB-CC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_4" desc="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" id="MISRAC2012-RULE_14_4-a" origId="MISRA2004-13_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_1" desc="The goto statement shall not be used" id="MISRAC2012-RULE_15_1-a" origId="MISRA2004-14_4" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_2" desc="The goto statement shall jump to a label declared later in the same function body" id="MISRAC2012-RULE_15_2-a" origId="CODSTA-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_3" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="MISRAC2012-RULE_15_3-a" origId="CODSTA-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_4" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="MISRAC2012-RULE_15_4-a" origId="CODSTA-79" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_5" desc="A function shall have a single point of exit at the end of the function" id="MISRAC2012-RULE_15_5-a" origId="MISRA2004-14_7" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_6" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="MISRAC2012-RULE_15_6-a" origId="MISRA2004-14_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_6" desc="'if' and 'else' should be followed by a compound statement" id="MISRAC2012-RULE_15_6-b" origId="MISRA2004-14_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_7" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="MISRAC2012-RULE_15_7-a" origId="MISRA2004-14_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="MISRAC2012-RULE_16_1-a" origId="MISRA2004-15_0_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRAC2012-RULE_16_1-b" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRAC2012-RULE_16_1-c" origId="MISRA2004-15_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRAC2012-RULE_16_1-d" origId="MISRA2004-15_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="Always provide a default branch for switch statements" id="MISRAC2012-RULE_16_1-e" origId="CODSTA-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRAC2012-RULE_16_1-f" origId="CODSTA-119" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="MISRAC2012-RULE_16_1-g" origId="CODSTA-116" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="Every switch statement shall have at least two switch-clauses" id="MISRAC2012-RULE_16_1-h" origId="OPT-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_2" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRAC2012-RULE_16_2-a" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_3" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRAC2012-RULE_16_3-a" origId="MISRA2004-15_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_3" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRAC2012-RULE_16_3-b" origId="MISRA2004-15_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_4" desc="Always provide a default branch for switch statements" id="MISRAC2012-RULE_16_4-a" origId="CODSTA-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_4" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRAC2012-RULE_16_4-b" origId="CODSTA-119" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_5" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="MISRAC2012-RULE_16_5-a" origId="CODSTA-116" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_6" desc="Every switch statement shall have at least two switch-clauses" id="MISRAC2012-RULE_16_6-a" origId="OPT-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_7" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRAC2012-RULE_16_7-a" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_7" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRAC2012-RULE_16_7-b" origId="MISRA2004-15_4_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_1" desc="The identifiers va_list, va_arg, va_start, va_end, va_copy should not be used" id="MISRAC2012-RULE_17_1-a" origId="CODSTA-136_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_1" desc="The identifiers va_list, va_arg, va_start, va_end should not be used" id="MISRAC2012-RULE_17_1-b" origId="CODSTA-136_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_2" desc="Functions shall not call themselves, either directly or indirectly" id="MISRAC2012-RULE_17_2-a" origId="MISRA2004-16_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_3" desc="Functions shall always have visible prototype at the function call" id="MISRAC2012-RULE_17_3-a" origId="MISRA-071_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_4" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRAC2012-RULE_17_4-a" origId="MISRA2004-16_8" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_4" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="MISRAC2012-RULE_17_4-b" origId="MISRA2004-16_8_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_5" desc="The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" id="MISRAC2012-RULE_17_5-a" origId="CODSTA-134" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_6" desc="The declaration of an array parameter shall not contain the 'static' keyword between the [ ]" id="MISRAC2012-RULE_17_6-a" origId="CODSTA-160" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_17_7" desc="The value returned by a function having non-void return type shall be used" id="MISRAC2012-RULE_17_7-a" origId="CODSTA-122_a" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_7" desc="The value returned by a function having non-void return type shall be used" id="MISRAC2012-RULE_17_7-b" origId="CODSTA-122_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_8" desc="A function parameter should not be modified" id="MISRAC2012-RULE_17_8-a" origId="CODSTA-132" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_1" desc="Avoid accessing arrays out of bounds" id="MISRAC2012-RULE_18_1-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_1" desc="Avoid accessing arrays and pointers out of bounds" id="MISRAC2012-RULE_18_1-b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_1" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="MISRAC2012-RULE_18_1-c" origId="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_2" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRAC2012-RULE_18_2-a" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_3" desc="Do not compare two unrelated pointers" id="MISRAC2012-RULE_18_3-a" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_4" desc="The +, -, += and -= operators should not be applied to an expression of pointer type" id="MISRAC2012-RULE_18_4-a" origId="CODSTA-181" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_5" desc="The declaration of objects should contain no more than 2 levels of pointer indirection" id="MISRAC2012-RULE_18_5-a" origId="MISRA2004-17_5" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_6" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRAC2012-RULE_18_6-a" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_6" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRAC2012-RULE_18_6-b" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_7" desc="Flexible array members shall not be declared" id="MISRAC2012-RULE_18_7-a" origId="CODSTA-113" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_8" desc="Variable-length array types shall not be used" id="MISRAC2012-RULE_18_8-a" origId="CODSTA-112" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_1" desc="An object shall not be assigned to an overlapping object" id="MISRAC2012-RULE_19_1-a" origId="MISRA2004-18_2" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_1" desc="An object shall not be assigned to an overlapping object" id="MISRAC2012-RULE_19_1-b" origId="MISRA2004-18_2_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_1" desc="An object shall not be assigned or copied to an overlapping object" id="MISRAC2012-RULE_19_1-c" origId="BD-PB-OVERLAP" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_2" desc="The union keyword should not be used" id="MISRAC2012-RULE_19_2-a" origId="CODSTA-111" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRAC2012-RULE_1_1-a" origId="CODSTA-174_a_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRAC2012-RULE_1_1-b" origId="CODSTA-174_a_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRAC2012-RULE_1_1-c" origId="CODSTA-174_b_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRAC2012-RULE_1_1-d" origId="CODSTA-174_b_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid division by zero" id="MISRAC2012-RULE_1_3-a" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid use before initialization" id="MISRAC2012-RULE_1_3-b" origId="BD-PB-NOTINIT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Do not use resources that have been freed" id="MISRAC2012-RULE_1_3-c" origId="BD-RES-FREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid overflow when reading from a buffer" id="MISRAC2012-RULE_1_3-d" origId="BD-PB-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid overflow when writing to a buffer" id="MISRAC2012-RULE_1_3-e" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRAC2012-RULE_1_3-f" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRAC2012-RULE_1_3-g" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRAC2012-RULE_1_3-h" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRAC2012-RULE_1_3-i" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRAC2012-RULE_1_3-j" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Do not use more than one volatile between two adjacent sequence points" id="MISRAC2012-RULE_1_3-k" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRAC2012-RULE_1_3-l" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRAC2012-RULE_1_3-m" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRAC2012-RULE_1_3-n" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The left-hand operand of a right-shift operator shall not have a negative value" id="MISRAC2012-RULE_1_3-o" origId="PB-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The '_Generic' operator should not be used" id="MISRAC2012-RULE_1_4-a" origId="CODSTA-216" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The '_Noreturn' function specifier should not be used" id="MISRAC2012-RULE_1_4-b" origId="CODSTA-206" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The &lt;stdnoreturn.h> header file should not be used" id="MISRAC2012-RULE_1_4-c" origId="CODSTA-207" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The '_Atomic' type specifier and the '_Atomic' type qualifier should not be used" id="MISRAC2012-RULE_1_4-d" origId="CODSTA-214" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The facilities that are specified as being provided by &lt;stdatomic.h> should not be used" id="MISRAC2012-RULE_1_4-e" origId="CODSTA-209" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The '_Thread_local' storage class specifier should not be used" id="MISRAC2012-RULE_1_4-f" origId="CODSTA-210" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The facilities that are specified as being provided by &lt;threads.h> should not be used" id="MISRAC2012-RULE_1_4-g" origId="CODSTA-211" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The '_Alignas' alignment specifier and the '_Alignof' operator should not be used" id="MISRAC2012-RULE_1_4-h" origId="CODSTA-213" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The &lt;stdalign.h> header file shall not be used" id="MISRAC2012-RULE_1_4-i" origId="CODSTA-208" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0'" id="MISRAC2012-RULE_1_4-j" origId="CODSTA-215" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The 'rsize_t' type should not be used" id="MISRAC2012-RULE_1_4-k" origId="CODSTA-212" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The 'errno_t' type should not be used" id="MISRAC2012-RULE_1_4-l" origId="CODSTA-217" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S" id="MISRAC2012-RULE_1_4-m" origId="CODSTA-218" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="Do not use the functions defined in Annex K of ISO/IEC 9899:2011 standard" id="MISRAC2012-RULE_1_4-n" origId="CODSTA-219" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_1" desc="#include statements in a file should only be preceded by other preprocessor directives or comments" id="MISRAC2012-RULE_20_1-a" origId="MISRA2004-19_1" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_10" desc="The # and ## preprocessor operators should not be used" id="MISRAC2012-RULE_20_10-a" origId="MISRA2004-19_13" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_11" desc="A macro parameter immediately following a # operator shall not immediately be followed by or preceded by a ## operator" id="MISRAC2012-RULE_20_11-a" origId="PREPROC-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_12" desc="A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" id="MISRAC2012-RULE_20_12-a" origId="PREPROC-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_13" desc="Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" id="MISRAC2012-RULE_20_13-a" origId="MISRA2004-19_16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_14" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="MISRAC2012-RULE_20_14-a" origId="MISRA2004-19_17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_2" desc="The ', &quot;, /* or // characters shall not occur in a header file name" id="MISRAC2012-RULE_20_2-a" origId="NAMING-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_2" desc="The \ character should not occur in a header file name" id="MISRAC2012-RULE_20_2-b" origId="NAMING-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_3" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRAC2012-RULE_20_3-a" origId="MISRA-089" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_4" desc="A macro shall not be defined with the same name as a keyword in C90" id="MISRAC2012-RULE_20_4-a" origId="CODSTA-133_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_4" desc="A macro shall not be defined with the same name as a keyword in C99" id="MISRAC2012-RULE_20_4-b" origId="CODSTA-133_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_5" desc="#undef shall not be used" id="MISRAC2012-RULE_20_5-a" origId="PREPROC-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_6" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="MISRAC2012-RULE_20_6-a" origId="MISRA2004-19_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRAC2012-RULE_20_7" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="MISRAC2012-RULE_20_7-a" origId="MISRA2004-19_10" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_8" desc="The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" id="MISRAC2012-RULE_20_8-a" origId="PREPROC-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_9" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="MISRAC2012-RULE_20_9-b" origId="MISRA2004-19_11_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Do not #define or #undef identifiers with names which start with underscore" id="MISRAC2012-RULE_21_1-a" origId="MISRA2004-20_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="MISRAC2012-RULE_21_1-b" origId="CODSTA-92_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)" id="MISRAC2012-RULE_21_1-c" origId="CODSTA-92_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Do not #define nor #undef identifier 'defined'" id="MISRAC2012-RULE_21_1-d" origId="MISRA2004-20_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_10" desc="Avoid functions which use time from standard C library" id="MISRAC2012-RULE_21_10-a" origId="SECURITY-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_11" desc="The standard header file &lt;tgmath.h> shall not be used" id="MISRAC2012-RULE_21_11-a" origId="CODSTA-108" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_11" desc="The facilities that are specified as being provided by &lt;tgmath.h> should not be used" id="MISRAC2012-RULE_21_11-b" origId="CODSTA-108_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_12" desc="The exception handling features of &lt;fenv.h> should not be used" id="MISRAC2012-RULE_21_12-a" origId="CODSTA-109" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_13" desc="Do not pass incorrect values to ctype.h library functions" id="MISRAC2012-RULE_21_13-a" origId="BD-API-CTYPE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_14" desc="The Standard Library function memcmp shall not be used to compare null terminated strings" id="MISRAC2012-RULE_21_14-a" origId="BD-PB-MCCSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_15" desc="The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types" id="MISRAC2012-RULE_21_15-a" origId="CODSTA-183" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_16" desc="The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" id="MISRAC2012-RULE_21_16-a" origId="CODSTA-184" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_17" desc="Avoid overflow due to reading a not zero terminated string" id="MISRAC2012-RULE_21_17-a" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_17" desc="Avoid overflow when writing to a buffer" id="MISRAC2012-RULE_21_17-b" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_18" desc="The size_t argument passed to any function in string.h shall have an appropriate value" id="MISRAC2012-RULE_21_18-a" origId="BD-API-STRSIZE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_19" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="MISRAC2012-RULE_21_19-a" origId="CODSTA-185_a" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_19" desc="Strings pointed by members of the structure 'lconv' should not be modified" id="MISRAC2012-RULE_21_19-b" origId="CODSTA-185_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_2" desc="The names of standard library macros, objects and functions shall not be reused" id="MISRAC2012-RULE_21_2-a" origId="MISRA2004-20_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_2" desc="The names of standard library macros, objects and functions shall not be reused (C90)" id="MISRAC2012-RULE_21_2-b" origId="MISRA2004-20_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_2" desc="The names of standard library macros, objects and functions shall not be reused (C99)" id="MISRAC2012-RULE_21_2-c" origId="MISRA2004-20_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_20" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="MISRAC2012-RULE_21_20-a" origId="BD-PB-INVRET" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_21" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_21-a" origId="SECURITY-48_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-RULE_21_3" desc="Dynamic heap memory allocation shall not be used" id="MISRAC2012-RULE_21_3-a" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_4" desc="The setjmp macro and the longjmp function shall not be used" id="MISRAC2012-RULE_21_4-a" origId="MISRA2004-20_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_4" desc="The standard header file &lt;setjmp.h> shall not be used" id="MISRAC2012-RULE_21_4-b" origId="MISRA2004-20_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_5" desc="The standard header file &lt;signal.h> shall not be used" id="MISRAC2012-RULE_21_5-a" origId="MISRA2004-20_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_5" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="MISRAC2012-RULE_21_5-b" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-RULE_21_6" desc="The Standard Library input/output functions shall not be used" id="MISRAC2012-RULE_21_6-a" origId="CODSTA-110" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-RULE_21_7" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="MISRAC2012-RULE_21_7-a" origId="MISRA2004-20_10" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_8" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_8-a" origId="PB-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_8" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_8-b" origId="PB-75_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_8" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_8-c" origId="PB-75_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_9" desc="The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" id="MISRAC2012-RULE_21_9-a" origId="CODSTA-107" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_22_1" desc="Ensure resources are freed" id="MISRAC2012-RULE_22_1-a" origId="BD-RES-LEAKS" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_10" desc="Properly use errno value" id="MISRAC2012-RULE_22_10-a" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_2" desc="Do not use resources that have been freed" id="MISRAC2012-RULE_22_2-a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_2" desc="Do not free resources using invalid pointers" id="MISRAC2012-RULE_22_2-b" origId="BD-RES-INVFREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_3" desc="The same file shall not be opened for read and write access at the same time on different streams" id="MISRAC2012-RULE_22_3-a" origId="BD-PB-WRRDSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_4" desc="Avoid writing to a stream which has been opened as read only" id="MISRAC2012-RULE_22_4-a" origId="BD-PB-WRROS" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_5" desc="A pointer to a FILE object shall not be dereferenced" id="MISRAC2012-RULE_22_5-a" origId="CODSTA-166_a" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_5" desc="A pointer to a FILE object shall not be dereferenced by a library function" id="MISRAC2012-RULE_22_5-b" origId="CODSTA-166_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_6" desc="Do not use resources that have been freed" id="MISRAC2012-RULE_22_6-a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_7" desc="The macro EOF should be compared with the unmodified return value from the Standard Library function" id="MISRAC2012-RULE_22_7-a" origId="BD-PB-EOFCOMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_8" desc="Properly use errno value" id="MISRAC2012-RULE_22_8-a" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_9" desc="Properly use errno value" id="MISRAC2012-RULE_22_9-a" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in &quot;else&quot; block" id="MISRAC2012-RULE_2_1-a" origId="MISRA2004-14_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="MISRAC2012-RULE_2_1-b" origId="MISRA2004-14_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="MISRAC2012-RULE_2_1-c" origId="MISRA2004-14_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in switch statement" id="MISRAC2012-RULE_2_1-d" origId="MISRA2004-14_1_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in 'for' loop" id="MISRAC2012-RULE_2_1-e" origId="MISRA2004-14_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="MISRAC2012-RULE_2_1-f" origId="MISRA2004-14_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="MISRAC2012-RULE_2_1-g" origId="MISRA2004-14_1_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_2" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRAC2012-RULE_2_2-a" origId="MISRA2004-14_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="8;" authUrg="0;" cat="MISRAC2012-RULE_2_2" desc="Avoid unused values" id="MISRAC2012-RULE_2_2-b" origId="BD-PB-VOVR" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_3" desc="A function should not contain unused type declarations" id="MISRAC2012-RULE_2_3-a" origId="CODSTA-175_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_3" desc="A source file should not contain unused type declarations" id="MISRAC2012-RULE_2_3-b" origId="CODSTA-175_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_4" desc="A function should not contain unused local tag declarations" id="MISRAC2012-RULE_2_4-a" origId="CODSTA-176_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_4" desc="A source file should not contain unused tag declarations" id="MISRAC2012-RULE_2_4-b" origId="CODSTA-176_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_5" desc="A source file should not contain unused macro definitions" id="MISRAC2012-RULE_2_5-a" origId="CODSTA-177" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_6" desc="A function should not contain unused label declarations" id="MISRAC2012-RULE_2_6-a" origId="OPT-37" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_7" desc="There should be no unused parameters in functions" id="MISRAC2012-RULE_2_7-a" origId="OPT-38" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_1" desc="The character sequence /* shall not be used within a C-style comment" id="MISRAC2012-RULE_3_1-a" origId="MISRA2004-2_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_1" desc="The character sequence // shall not be used within a C-style comment" id="MISRAC2012-RULE_3_1-b" origId="COMMENT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_1" desc="The character sequence /* shall not be used within a C++-style comment" id="MISRAC2012-RULE_3_1-c" origId="COMMENT-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_2" desc="Line-splicing shall not be used in // comments" id="MISRAC2012-RULE_3_2-a" origId="COMMENT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_4_1" desc="Octal and hexadecimal escape sequences shall be terminated" id="MISRAC2012-RULE_4_1-a" origId="CODSTA-117" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_4_2" desc="Trigraphs shall not be used" id="MISRAC2012-RULE_4_2-a" origId="MISRA2004-4_2" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_1" desc="External identifiers shall be distinct" id="MISRAC2012-RULE_5_1-a" origId="CODSTA-178" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c90)" id="MISRAC2012-RULE_5_2-a" origId="CODSTA-179_a_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c99)" id="MISRAC2012-RULE_5_2-b" origId="CODSTA-179_a_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the same block scope and name space shall be distinct (c90)" id="MISRAC2012-RULE_5_2-c" origId="CODSTA-179_b_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the same block scope and name space shall be distinct (c99)" id="MISRAC2012-RULE_5_2-d" origId="CODSTA-179_b_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_3" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="MISRAC2012-RULE_5_3-a" origId="MISRA2004-5_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_3" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="MISRAC2012-RULE_5_3-b" origId="MISRA2004-5_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of its parameters(c90)" id="MISRAC2012-RULE_5_4-a" origId="CODSTA-171_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of its parameters(c99)" id="MISRAC2012-RULE_5_4-b" origId="CODSTA-171_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c90)" id="MISRAC2012-RULE_5_4-c" origId="CODSTA-172_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c99)" id="MISRAC2012-RULE_5_4-d" origId="CODSTA-172_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_5" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c90)" id="MISRAC2012-RULE_5_5-a" origId="CODSTA-170_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_5" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c99)" id="MISRAC2012-RULE_5_5-b" origId="CODSTA-170_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_6" desc="Do not reuse typedef names" id="MISRAC2012-RULE_5_6-a" origId="MISRA2004-5_3_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_6" desc="Do not reuse typedef names as a typedef name" id="MISRAC2012-RULE_5_6-b" origId="MISRA2004-5_3_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_7" desc="A tag name shall not be reused for other purpose within the program" id="MISRAC2012-RULE_5_7-a" origId="MISRA2004-5_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_7" desc="A tag name shall not be reused to define a different tag" id="MISRAC2012-RULE_5_7-b" origId="MISRA2004-5_4_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_8" desc="Identifiers that define objects or functions with external linkage shall be unique" id="MISRAC2012-RULE_5_8-a" origId="CODSTA-180" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_9" desc="No object or function identifier with static storage duration should be reused" id="MISRAC2012-RULE_5_9-a" origId="MISRA2004-5_5_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_9" desc="No object or function identifier with static storage duration should be reused" id="MISRAC2012-RULE_5_9-b" origId="MISRA2004-5_5_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_6_1" desc="Bit fields shall only be defined to be of type unsigned int or signed int" id="MISRAC2012-RULE_6_1-a" origId="MISRA2004-6_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_6_2" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="MISRAC2012-RULE_6_2-a" origId="CODSTA-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_1" desc="Octal constants (other than zero) shall not be used" id="MISRAC2012-RULE_7_1-a" origId="MISRA2004-7_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_2" desc="A 'U' suffix shall be applied to all constants of unsigned type" id="MISRAC2012-RULE_7_2-a" origId="MISRA2004-10_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_3" desc="Use capital 'L' instead of lowercase 'l' to indicate long" id="MISRAC2012-RULE_7_3-a" origId="PORT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_4" desc="A string literal shall not be modified" id="MISRAC2012-RULE_7_4-a" origId="PB-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_1" desc="Whenever a function is declared or defined, its type shall be explicitly stated" id="MISRAC2012-RULE_8_1-a" origId="MISRA2004-8_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_1" desc="Whenever an object is declared or defined, its type shall be explicitly stated" id="MISRAC2012-RULE_8_1-b" origId="MISRA2004-8_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_10" desc="An inline function shall be declared with the static storage class" id="MISRAC2012-RULE_8_10-a" origId="CODSTA-120" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_11" desc="When an array is declared with external linkage, its size shall be stated explicitly or defined implicitly by initialisation" id="MISRAC2012-RULE_8_11-a" origId="MISRA2004-8_12" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_12" desc="Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" id="MISRAC2012-RULE_8_12-a" origId="PB-58" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRAC2012-RULE_8_13" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="MISRAC2012-RULE_8_13-a" origId="MISRA2004-16_7" sev="4" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_13" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRAC2012-RULE_8_13-b" origId="MISRA2004-16_7_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_14" desc="The restrict type qualifier shall not be used" id="MISRAC2012-RULE_8_14-a" origId="CODSTA-121" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_2" desc="Identifiers shall be given for all of the parameters in a function prototype declaration" id="MISRAC2012-RULE_8_2-a" origId="MISRA2004-16_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_2" desc="Function types shall have named parameters" id="MISRAC2012-RULE_8_2-b" origId="CODSTA-158" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_2" desc="Function types shall be in prototype form" id="MISRAC2012-RULE_8_2-c" origId="CODSTA-159" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_3" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRAC2012-RULE_8_3-a" origId="MISRA2004-8_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_3" desc="The identifiers used in the declaration and definition of a function shall be identical" id="MISRAC2012-RULE_8_3-b" origId="MISRA2004-16_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_3" desc="All declarations of an object or function shall have compatible types" id="MISRAC2012-RULE_8_3-c" origId="GLOBAL-COMPATDECLS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_4" desc="A declaration shall be visible when an object or function with external linkage is defined" id="MISRAC2012-RULE_8_4-a" origId="CODSTA-118" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_4" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRAC2012-RULE_8_4-b" origId="MISRA2004-8_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_5" desc="An external object or function shall not have more than one non-defining declaration in translation unit" id="MISRAC2012-RULE_8_5-a" origId="CODSTA-154" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_6" desc="An identifier with external linkage shall have exactly one external definition" id="MISRAC2012-RULE_8_6-a" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_7" desc="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" id="MISRAC2012-RULE_8_7-a" origId="GLOBAL-AVOIDEXTERN" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_8" desc="The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" id="MISRAC2012-RULE_8_8-a" origId="MISRA2004-8_11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_9" desc="Objects shall be defined at block scope if they are only accessed from within a single function" id="MISRAC2012-RULE_8_9-a" origId="MISRA2004-8_7" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_1" desc="Avoid use before initialization" id="MISRAC2012-RULE_9_1-a" origId="BD-PB-NOTINIT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_2" desc="The initializer for an aggregate or union shall be enclosed in braces" id="MISRAC2012-RULE_9_2-a" origId="INIT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_3" desc="Arrays shall not be partially initialized" id="MISRAC2012-RULE_9_3-a" origId="MISRA2004-9_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_4" desc="An element of an object shall not be initialized more than once" id="MISRAC2012-RULE_9_4-a" origId="PB-69" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_5" desc="Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" id="MISRAC2012-RULE_9_5-a" origId="CODSTA-186" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate resources in function argument list because the order of evaluation of a function's parameters is undefined" id="MRM-01" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use the same form in corresponding calls to new/malloc and delete/free" id="MRM-06" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not invoke malloc/realloc for objects having constructors" id="MRM-08" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Avoid hiding the global new" id="MRM-32" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Declare a copy assignment operator for classes with dynamically allocated memory" id="MRM-37" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Declare a copy constructor for classes with dynamically allocated memory" id="MRM-38" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Never return a dereferenced local pointer initialized by new in this function scope" id="MRM-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Call delete on pointer members in destructors" id="MRM-33" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Provide error handling for file opening errors right next to the call to fopen" id="MRM-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="A copy constructor shall copy all data members and bases" id="MRM-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Call fclose() on pointer member in destructor if the pointer was used to open a file" id="MRM-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="An assignment operator shall assign all data bases" id="MRM-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new'" id="MRM-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate more than one resource in a single statement" id="MRM-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MRM" desc="All classes should contain the assignment operator or appropriate comment" id="MRM-04" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MRM" desc="All classes should contain the copy constructor or appropriate comment" id="MRM-05" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Don't memcpy or memcmp non-PODs" id="MRM-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always assign a new value to an expression that points to deallocated memory" id="MRM-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always assign a new value to global or member variable that points to deallocated memory" id="MRM-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always assign a new value to parameter or local variable that points to deallocated memory" id="MRM-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Adhere to convention when writing new and delete" id="MRM-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Adhere to convention when writing new" id="MRM-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator new, it should provide overloads of all three of plain, in-place, and non-throwing operator new" id="MRM-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator new[], it should provide overloads of all three of plain, in-place, and non-throwing operator new[]" id="MRM-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator delete, it should provide overloads of all three of plain, in-place, and non-throwing operator delete" id="MRM-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator delete[], it should provide overloads of all three of plain, in-place, and non-throwing operator delete[]" id="MRM-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MRM" desc="Do not allocate memory and expect that someone else will deallocate it later" id="MRM-18" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate memory and expect that someone else will deallocate it later" id="MRM-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate memory and expect that someone else will deallocate it later" id="MRM-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use objects to manage resources" id="MRM-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use objects to manage resources" id="MRM-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Store newed objects in smart pointers in standalone statements" id="MRM-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Write operator delete if you write operator new" id="MRM-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Write operator delete[] if you write operator new[]" id="MRM-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always provide new and delete together" id="MRM-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always provide new[] and delete[] together" id="MRM-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use allocation by declaration rather than by new or malloc" id="MRM-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Freed memory shouldn't be accessed under any circumstances" id="MRM-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Destructor should not be called manually" id="MRM-31_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MRM" desc="Check the return value of new" id="MRM-34" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Never provide brackets ([]) for delete when deallocating non-arrays" id="MRM-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="MRM-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Copy and destroy consistently" id="MRM-40" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="A copy assignment operator should be declared when a copy constructor is declared (and vice versa)" id="MRM-40_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Both the copy constructor and copy assignment operator should have the same public/protected/private permission" id="MRM-40_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If you have a non-trivial copy constructor or copy assignment operator, you should also declare a destructor" id="MRM-40_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor" id="MRM-40_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not use sizeof operator on pointer type to specify the size of the memory to be allocated via 'malloc', 'calloc' or 'realloc' function" id="MRM-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not use calloc, malloc, realloc and free functions" id="MRM-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Classes containing at least one non-static member variable should declare the assignment operator or contain appropriate comment" id="MRM-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Classes containing at least one non-static member variable should declare the copy constructor or contain appropriate comment" id="MRM-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="A copy constructor and a copy assignment operator shall be declared for classes that contain pointers to data items or nontrivial destructors" id="MRM-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not use 'delete' on pointers to a void type" id="MRM-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails" id="MRM-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Avoid using the default operator 'new' for over-aligned types" id="MRM-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="An overhead should be used when an array of objects is passed to the placement 'new' allocation function" id="MRM-55_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Copy assignment operators should not have side effects that could affect copying the object" id="MRM-56" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Move assignment operators should not have side effects that could affect moving the object" id="MRM-57" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Declare both private copy constructor and copy assignment operator at the same time" id="MRM-50" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use RAII to prevent resource leaks" id="MRM-52" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Identifiers for constant and enumerator values shall be lowercase" id="NAMING-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="All &quot;#define&quot; constants shall be in uppercase" id="NAMING-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="In an enumerated list, list members (elements) shall be in uppercase and names or tags for the list shall be in lowercase" id="NAMING-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="NAMING" desc="Use lowercase for file names" id="NAMING-03" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Global prefixes should only be used for global variables" id="NAMING-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin local variable names with a lowercase letters" id="NAMING-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin global variable names with a lowercase letters" id="NAMING-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin member variable names with a lowercase letters" id="NAMING-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all boolean type variables with 'b'" id="NAMING-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin class, struct, union, enum, and typedef names with an uppercase letter" id="NAMING-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The names of abstract data types, structures, typedefs, and enumerated types are to begin with an uppercase letter" id="NAMING-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The name of enumeration type shall begin with an uppercase letter and contain a suffix '_t' at the end" id="NAMING-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The names of structures shall begin with an uppercase letter and contain a suffix '_t' at the end" id="NAMING-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin constant variables with 'c'" id="NAMING-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin class data member names with 'its'" id="NAMING-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all double type variable with 'd'" id="NAMING-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all float type variables with 'f'" id="NAMING-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="NAMING" desc="Begin all function names with uppercase letter" id="NAMING-17" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="NAMING" desc="Begin global variable names with 'the'" id="NAMING-18" sev="3" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING" desc="Begin all integer type variable with 'i'" id="NAMING-19" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Functions that begin with 'is' should return boolean values" id="NAMING-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all long integer variables with 'li'" id="NAMING-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING" desc="Prefix a variable type 'pointer' with a 'p' character" id="NAMING-22" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all short integer variables with 'si'" id="NAMING-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all signed character variables with 'c'" id="NAMING-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all terminated characters string variables with 'sz'" id="NAMING-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all unsigned character type variables with 'uc'" id="NAMING-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all unsigned integer type variables with 'ui'" id="NAMING-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Use lowercase letters for structure and union member names" id="NAMING-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Append names of non-scalar typedefs with &quot;_t&quot;" id="NAMING-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Implementation files in C always have the file name extension &quot;.c&quot;" id="NAMING-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Do not use typenames that differ only by the use of uppercase and lowercase letters" id="NAMING-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="An include file for a class should have a file name of the form &lt;class name> + extension" id="NAMING-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Do not use identifiers which begin with one or two underscores (`_' or `__')" id="NAMING-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="NAMING" desc="Global function names should start with lowercase" id="NAMING-34" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Member function names should start with lowercase" id="NAMING-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Names of parameters in declaration and definition should be identical" id="NAMING-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Include files in C++ always have the file name extension '.hh'" id="NAMING-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="NAMING" desc="Implementation files in C++ always have the file name extension &quot;.cc&quot;" id="NAMING-38" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Inline definition files always have the file name extension &quot;.icc&quot;" id="NAMING-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING" desc="Only the first word of the name of a class, structure, namespace, enumeration, or typedef will begin with an uppercase letter" id="NAMING-40" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Header files will always have a file name extension of '.h'" id="NAMING-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="File name extension, if present, should be &quot;*.cpp&quot; or &quot;*.h&quot;" id="NAMING-43" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="0;" cat="NAMING" desc="All letters contained in function and variable names will be composed entirely of lowercase letters" id="NAMING-44" sev="3" total="13" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="NAMING" desc="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" id="NAMING-45" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The ', &quot;, /* or // characters shall not occur in a header file name" id="NAMING-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING" desc="Different identifiers shall be typographically unambiguous" id="NAMING-47" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The \ character should not occur in a header file name" id="NAMING-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" id="NAMING-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Universal character names shall be used only inside character or string literals" id="NAMING-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Header files should have a file extension of: &quot;.h&quot;, &quot;.hpp&quot; or &quot;.hxx&quot;" id="NAMING-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Use visually distinct identifiers" id="NAMING-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Implementation files in C++ will always have a file name extension of &quot;.cpp&quot;" id="NAMING-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Identifiers in the same name space with overlapping visibility should be typographically unambiguous" id="NAMING-50" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for array variables and parameters" id="NAMING-HN-01" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for bool types" id="NAMING-HN-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for bool pointer, array, or reference types" id="NAMING-HN-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for byte types" id="NAMING-HN-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for byte pointer, array, or reference types" id="NAMING-HN-05" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for char types" id="NAMING-HN-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for array of char types" id="NAMING-HN-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for pointer, array, or reference to array of char types" id="NAMING-HN-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for char pointer, array, or reference types" id="NAMING-HN-09" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for char pointer or reference types" id="NAMING-HN-10" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for constant parameters" id="NAMING-HN-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for double-precision floating point types" id="NAMING-HN-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for double-precision floating point pointer, array, or reference types" id="NAMING-HN-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for dword types" id="NAMING-HN-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for dword pointer, array, or reference types" id="NAMING-HN-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for dynamically allocated array" id="NAMING-HN-16" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for floating point types" id="NAMING-HN-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for floating point pointer, array, or reference types" id="NAMING-HN-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for class declaration" id="NAMING-HN-19" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for structs declaration" id="NAMING-HN-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for ifstream type variables and parameters" id="NAMING-HN-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for int types" id="NAMING-HN-22" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for int pointer, array, or reference types" id="NAMING-HN-23" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for istream type parameters and variables" id="NAMING-HN-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for long int types" id="NAMING-HN-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for long double-precision floating point types" id="NAMING-HN-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for long double-precision floating point pointer, array, or reference types" id="NAMING-HN-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for long int pointer, array, or reference types" id="NAMING-HN-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for member variables" id="NAMING-HN-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for int types" id="NAMING-HN-30" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for int pointer, array, or reference types" id="NAMING-HN-31" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for ofstream type parameters and variables" id="NAMING-HN-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for ostream type parameters and variables" id="NAMING-HN-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for pointer" id="NAMING-HN-34" sev="3" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for reference parameters" id="NAMING-HN-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for short int types" id="NAMING-HN-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for short int pointer, array, or reference types" id="NAMING-HN-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for static variables" id="NAMING-HN-38" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for string types" id="NAMING-HN-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for string pointer, array, or reference types" id="NAMING-HN-40" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for unsigned types" id="NAMING-HN-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for void pointer types" id="NAMING-HN-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for word types" id="NAMING-HN-43" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for word pointer, array, or reference types" id="NAMING-HN-44" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Class cannot inherit other class more than once unless it is virtual inheritance" id="OOP-03" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Be wary about using multiple inheritance of classes that are not abstract interfaces" id="OOP-07" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not directly access global data from a constructor" id="OOP-08" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid calling virtual functions from constructors" id="OOP-16" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid calling virtual functions from destructors" id="OOP-16_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Define a virtual destructor in classes used as base classes which have virtual functions" id="OOP-22" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Make destructors virtual in base classes" id="OOP-24" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A pointer to an abstract class shall not be converted to a pointer of a class that inherits from that abstract class" id="OOP-29" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Make base class destructors public and virtual, or protected and nonvirtual" id="OOP-31" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="If a class destructor is called and the class has virtual functions it shall have a virtual destructor" id="OOP-38" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Casts from a base class to a derived class should not be performed on polymorphic types" id="OOP-49" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not use multiple inheritance" id="OOP-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Multiple inheritance shall be limited to at most 1 protected implementation" id="OOP-07_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Multiple inheritance shall not use any public implementations" id="OOP-07_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid using global data in member functions" id="OOP-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid &quot;public&quot; data members" id="OOP-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid 'protected' data members" id="OOP-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="If a class has virtual functions it shall have a virtual destructor" id="OOP-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid casts down the inheritance hierarchy" id="OOP-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Down casting (casting from base to derived class) shall not be allowed" id="OOP-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A stateful virtual base shall be explicitly declared in each derived class that accesses it" id="OOP-39_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A base class shall not be both virtual and non-virtual in the same hierarchy" id="OOP-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid public copy constructors and assignment operators in base classes" id="OOP-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid slicing. Consider Clone instead of copying in base classes" id="OOP-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not derive functions with the same name from more than one base class" id="OOP-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="For multiple inheritance use virtual common base class" id="OOP-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid the use of global objects in destructors" id="OOP-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid using the friend mechanism" id="OOP-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Friend declarations shall not be used except declarations of comparison operators" id="OOP-11_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Protected member function shall not return non-const handles to private class-data" id="OOP-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not redefine an inherited virtual function with a different default parameter value" id="OOP-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid explicit cast from derived to a base class" id="OOP-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Use the virtual keyword if a subclass implements a virtual function" id="OOP-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid declaring virtual functions inline" id="OOP-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Never convert pointers to objects of a derived class to pointers to objects of a virtual base class" id="OOP-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Declare copy assignment operator for class with reference or const members" id="OOP-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Declare the copy constructor and copy assignment operator private not in class itself, but in a specifically designed base class" id="OOP-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Never redefine an inherited nonvirtual function" id="OOP-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not redefine an inherited nonvirtual function with template parameter" id="OOP-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Public member functions shall not return non-const handles to private/protected class-data" id="OOP-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="The copy assignment operator shall be declared protected or private in an abstract class" id="OOP-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy" id="OOP-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="All constructors that are callable with a single argument of fundamental type shall be declared explicit" id="OOP-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member" id="OOP-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Classes should not be derived from virtual bases" id="OOP-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Member data in non-POD types shall be private" id="OOP-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" id="OOP-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Member functions declared in derived class should not hide functions declared in base classes" id="OOP-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not increase the accessibility of overridden or hidden methods" id="OOP-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A user-defined assignment operator shall not be virtual" id="OOP-56" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Structs should only contain public data members and should not be a base or inherit" id="OOP-57" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Write a using declaration to redeclare overloaded functions" id="OOP-17" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Check for assignment to self in operator=" id="OOP-34" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A virtual base shall be explicitly declared in each derived class" id="OOP-39" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Hierarchies should be based on abstract classes" id="OOP-40" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" id="OOP-43" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A pointer to a class may not be converted to a pointer of a second class unless the one inherits from the other" id="OOP-52" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A non-POD type should be defined as class" id="OOP-55" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Consider use composition instead of private inheritance" id="OOP-14" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Prefer composition when don't need inheritance" id="OOP-37" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Use namespace instead of class or structure containing only static functions" id="OOP-51" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="OPT" desc="Eliminate unused parameters" id="OPT-03" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Variables will not be introduced until they can be initialized with meaningful values" id="OPT-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Declare variables as locally as possible" id="OPT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="OPT" desc="Prefer canonical form of ++ and --. Prefer calling the prefix forms" id="OPT-04" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Avoid unused private member variables" id="OPT-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Prefer &quot;a @= b&quot; than &quot;a = a @ b&quot;, where &quot;@&quot; is +, -, *, /, %" id="OPT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Prefer &quot;a @= b&quot; than &quot;a = a @ b&quot;, where &quot;@&quot; is &amp;, |, ^, &lt;&lt;, >>" id="OPT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="OPT" desc="Do not declare variables in &quot;if&quot;, &quot;for&quot;, &quot;while&quot;, and &quot;do while&quot; statement" id="OPT-10" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="If a file-level static variable is used/referenced in one function only then include that variable in the function itself" id="OPT-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="If a file-level static variable is used/referenced in one class only then include that variable in the class itself" id="OPT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Declare member variables in the descending size order" id="OPT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Pass objects by reference instead of by value" id="OPT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Consider overloading to avoid implicit type conversions" id="OPT-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Global function containing recursion, loops or virtual function call should not be inlined" id="OPT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Avoid inline constructors and destructors" id="OPT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Member function containing recursion or loops should not be inlined" id="OPT-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Consider using op= instead of stand-alone op" id="OPT-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Postpone variable definitions as long as possible" id="OPT-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Every switch statement shall have at least one non-empty case clause" id="OPT-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Useless case statement shall not be permitted" id="OPT-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="'strlen' function should not be used to check string against NULL/non-NULL" id="OPT-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Every defined function with internal linkage shall be used at least once" id="OPT-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="OPT" desc="There shall be no unused parameters (named or unnamed) in non-virtual functions" id="OPT-31" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="All non-empty functions with void return type shall have external side effect(s)" id="OPT-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Do not assign a variable to itself" id="OPT-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Do not use a variable inside its own initializer" id="OPT-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Every switch statement shall have at least two switch-clauses" id="OPT-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="There shall be no unused named parameters in virtual functions" id="OPT-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Avoid unused local variables" id="OPT-02" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="OPT" desc="Avoid unnecessary local variables" id="OPT-06" sev="4" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Trivial accessor and mutator functions should be inlined" id="OPT-23" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Trivial forwarding functions should be inlined" id="OPT-24" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Only functions with 1 or 2 statements should be considered candidates for inline functions" id="OPT-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="The number of accessor and mutator functions should be minimized" id="OPT-27" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Redundant explicit cast to the same type is not allowed" id="OPT-29" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="OPT" desc="Functions with void return type shall not be empty" id="OPT-32_b" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="A function should not contain unused label declarations" id="OPT-37" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="There should be no unused parameters in functions" id="OPT-38" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="The same code (after preprocessing) in two branches of if-else-if chain" id="OPT-40_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="The same code (after preprocessing) in different clauses of switch statement" id="OPT-40_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="A file should directly include only the headers that contain declarations and definitions required to compile that file" id="OPT-41" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Remove unnecessary '== true'" id="OPT-09" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Consider returning object by reference instead of by value" id="OPT-33" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Protect against command injection" id="OWASP2017-A1-b" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Avoid printing tainted data on the output console" id="OWASP2017-A1-c" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Protect against environment injection" id="OWASP2017-A1-d" origId="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Exclude unsanitized user input from format strings" id="OWASP2017-A1-e" origId="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Protect against SQL injection" id="OWASP2017-A1-f" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Avoid passing unvalidated binary data to log methods" id="OWASP2017-A1-a" origId="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A10" desc="All exceptions should be rethrown or logged with standard logger" id="OWASP2017-A10-a" origId="EXCEPT-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A2" desc="Do not use weak encryption functions" id="OWASP2017-A2-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A3" desc="Properly seed pseudorandom number generators" id="OWASP2017-A3-a" origId="BD-SECURITY-RAND" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A4" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="OWASP2017-A4-a" origId="BD-SECURITY-XXEXRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A5" desc="Protect against file name injection" id="OWASP2017-A5-a" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A5" desc="Observe correct revocation order while relinquishing privileges" id="OWASP2017-A5-b" origId="SECURITY-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A5" desc="Ensure that privilege relinquishment is successful" id="OWASP2017-A5-c" origId="SECURITY-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A6" desc="Properly use errno value" id="OWASP2017-A6-c" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A6" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="OWASP2017-A6-a" origId="EXCEPT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A6" desc="Do not leave 'catch' blocks empty" id="OWASP2017-A6-b" origId="EXCEPT-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API10" desc="All exceptions should be rethrown or logged with standard logger" id="OWASP2019-API10-a" origId="EXCEPT-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API10" desc="Do not use 'syslog' function for logging purposes" id="OWASP2019-API10-b" origId="SECURITY-21" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API2" desc="Do not use weak encryption functions" id="OWASP2019-API2-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid buffer overflow due to defining incorrect format limits" id="OWASP2019-API3-d" origId="BD-PB-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid overflow due to reading a not zero terminated string" id="OWASP2019-API3-e" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid overflow when reading from a buffer" id="OWASP2019-API3-f" origId="BD-PB-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid overflow when writing to a buffer" id="OWASP2019-API3-g" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="OWASP2019-API3-h" origId="BD-SECURITY-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid buffer read overflow from tainted data" id="OWASP2019-API3-i" origId="BD-SECURITY-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid buffer write overflow from tainted data" id="OWASP2019-API3-j" origId="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid race conditions while checking for the existence of a symbolic link" id="OWASP2019-API3-m" origId="BD-TRS-SYMLINK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Do not pass empty container iterators to std algorithms as destinations" id="OWASP2019-API3-a" origId="BD-CO-EMPCON" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid accessing arrays out of bounds" id="OWASP2019-API3-b" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid accessing arrays and pointers out of bounds" id="OWASP2019-API3-c" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Properly seed pseudorandom number generators" id="OWASP2019-API3-k" origId="BD-SECURITY-RAND" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid passing sensitive data to functions that write to log files" id="OWASP2019-API3-l" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="OWASP2019-API3-p" origId="SECURITY-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid functions which use time from MFC library" id="OWASP2019-API3-o" origId="SECURITY-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="A pointer to a structure should not be passed to a function that can copy data to the user space" id="OWASP2019-API3-q" origId="SECURITY-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Usage of system properties (environment variables) should be restricted" id="OWASP2019-API3-n" origId="SECURITY-03" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="OWASP2019-API4" desc="Ensure resources are freed" id="OWASP2019-API4-b" origId="BD-RES-LEAKS" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="OWASP2019-API4" desc="Validate potentially tainted data before it is used to determine the size of memory allocation" id="OWASP2019-API4-a" origId="BD-SECURITY-TDALLOC" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API7" desc="Properly use errno value" id="OWASP2019-API7-a" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API7" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="OWASP2019-API7-b" origId="EXCEPT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API7" desc="Do not leave 'catch' blocks empty" id="OWASP2019-API7-c" origId="EXCEPT-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Protect against command injection" id="OWASP2019-API8-a" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Avoid printing tainted data on the output console" id="OWASP2019-API8-b" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Protect against environment injection" id="OWASP2019-API8-c" origId="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Protect against file name injection" id="OWASP2019-API8-d" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Exclude unsanitized user input from format strings" id="OWASP2019-API8-e" origId="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Protect against SQL injection" id="OWASP2019-API8-f" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="OWASP2019-API8-g" origId="BD-SECURITY-XXEXRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Use care to ensure that LoadLibrary() will load the correct library" id="OWASP2019-API8-h" origId="SECURITY-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Avoid passing dynamically created strings into exec" id="OWASP2019-API8-i" origId="SECURITY-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Avoid passing user input into methods as parameters" id="OWASP2019-API8-j" origId="SECURITY-20" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="All usage of assembler shall be documented" id="OWASP2019-API9-c" origId="COMMENT-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="OWASP2019-API9" desc="Use of floating-point arithmetic shall be documented" id="OWASP2019-API9-d" origId="COMMENT-10" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="All uses of the #pragma directive shall be documented and explained" id="OWASP2019-API9-g" origId="MISRA2004-3_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="1;" cat="OWASP2019-API9" desc="Objects or functions with external linkage shall be declared in a header file" id="OWASP2019-API9-e" origId="MISRA-023" sev="4" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="Assert liberally to document internal assumptions and invariants" id="OWASP2019-API9-a" origId="CODSTA-11" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="When using enum, the values of each member should be explicitly declared" id="OWASP2019-API9-b" origId="CODSTA-21" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="Document integer division" id="OWASP2019-API9-f" origId="MISRA-041" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A1" desc="Protect against file name injection" id="OWASP2021-A1-a" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A1" desc="Observe correct revocation order while relinquishing privileges" id="OWASP2021-A1-b" origId="SECURITY-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A1" desc="Ensure that privilege relinquishment is successful" id="OWASP2021-A1-c" origId="SECURITY-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A2" desc="Properly seed pseudorandom number generators" id="OWASP2021-A2-a" origId="BD-SECURITY-RAND" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Protect against command injection" id="OWASP2021-A3-b" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Avoid printing tainted data on the output console" id="OWASP2021-A3-c" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Protect against environment injection" id="OWASP2021-A3-d" origId="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Exclude unsanitized user input from format strings" id="OWASP2021-A3-e" origId="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Protect against SQL injection" id="OWASP2021-A3-f" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Avoid passing unvalidated binary data to log methods" id="OWASP2021-A3-a" origId="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A4" desc="Avoid passing sensitive data to functions that write to log files" id="OWASP2021-A4-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A5" desc="Properly use errno value" id="OWASP2021-A5-c" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A5" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="OWASP2021-A5-d" origId="BD-SECURITY-XXEXRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A5" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="OWASP2021-A5-a" origId="EXCEPT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A5" desc="Do not leave 'catch' blocks empty" id="OWASP2021-A5-b" origId="EXCEPT-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A7" desc="Do not use weak encryption functions" id="OWASP2021-A7-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A8" desc="Use care to ensure that LoadLibrary() will load the correct library" id="OWASP2021-A8-a" origId="SECURITY-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A9" desc="All exceptions should be rethrown or logged with standard logger" id="OWASP2021-A9-a" origId="EXCEPT-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="10;" cat="PARSER" desc="Parser warning" id="PARSER-WARNING" sev="4" total="10" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="PARSER" desc="Parser remark" id="PARSER-REMARK" sev="5" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not call delete on non-pointers" id="PB-13" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Properly terminate character strings" id="PB-21" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor" id="PB-23" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Operators should not return value by reference" id="PB-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The definition of a constructor shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor" id="PB-24" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Unsigned arithmetic shall not be used" id="PB-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Public and protected methods should not be invoked by class constructor" id="PB-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="A string literal shall not be modified" id="PB-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The following character sequences shall not appear in header file names: ', \, /*, //, or &quot;" id="PB-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The left-hand operand of a right-shift operator shall not have a negative value" id="PB-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not cast from or to incomplete class at the point of casting" id="PB-54" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not delete objects with incomplete class at the point of deletion" id="PB-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Boolean condition always evaluates to the same value due to enumeration with only zero or only non-zero constants" id="PB-68" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PB" desc="Do not dereference pointer type expressions" id="PB-01" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not use assignments inside a(b), a[b], and cast" id="PB-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Using mixed types in ternary operator is not allowed" id="PB-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="PB" desc="Return value of a function must match declared return type" id="PB-05" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Assignment operator should have operands of compatible types" id="PB-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not assign function return value to a variable of incompatible type" id="PB-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not assign signed constants to unsigned integer variables" id="PB-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Don't treat arrays polymorphically" id="PB-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="27;" authUrg="0;" cat="PB" desc="Declared types of formal and actual parameters to functions must match" id="PB-11" sev="3" total="27" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not cast a signed char to an unsigned int" id="PB-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Incorrect End-Of-String (EOS) definition" id="PB-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Don't assign the dividend of two integers to a floating-point type" id="PB-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid unintentionally discarding the remainder of integer division" id="PB-15_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid assigning out-of-range value to char type" id="PB-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid assigning out-of-range value to unsigned char type" id="PB-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid overloading class methods on a pointer and a numerical type" id="PB-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not create inline non-member functions that contain local static data" id="PB-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid slicing function arguments / return value" id="PB-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not use increment and decrement expressions inside a(b), a[b], and cast" id="PB-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="More than one 'enum' type shall not be used as a switch condition or a label in a case statement" id="PB-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not call 'sizeof' on constants" id="PB-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not call 'sizeof' on a pointer type" id="PB-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid implicit type conversions in assignments involving enum types" id="PB-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid implicit type conversions in comparisons involving enum types" id="PB-33_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Third parameter to 'memcpy'/'strncpy'/'memmove' should not depend on second" id="PB-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Assignment operators shall not be used in conditions without brackets" id="PB-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The unbounded functions of library &lt;cstring> shall not be used" id="PB-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Narrow and wide string literals shall not be concatenated" id="PB-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="String literals with different encoding prefixes shall not be concatenated" id="PB-38_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference" id="PB-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="A function shall not return a pointer or a reference to a parameter that is passed by const reference" id="PB-39_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="An identifier with array type passed as a function argument shall not decay to a pointer" id="PB-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not pass expression with array type to a function with pointer or array type parameter" id="PB-41_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="An object shall not be assigned to an overlapping object" id="PB-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" id="PB-43" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="PB-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function" id="PB-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="PB-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function" id="PB-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="PB-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="PB-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" id="PB-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Pointer arithmetic shall not be applied to pointers that address variables of non-array type" id="PB-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid overloading global functions on a pointer and a numerical type" id="PB-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid overloading namespace functions on a pointer and a numerical type" id="PB-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid implicit conversions from signed to unsigned type" id="PB-56" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="A pointer to an array of derived class objects should not be converted to a base class pointer" id="PB-57" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" id="PB-58" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Missing comma in a string array initialization" id="PB-59" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Suspicious argument to malloc" id="PB-60" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Pointer arithmetic performed on freshly allocated memory" id="PB-61" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid function calls with incorrect argument order" id="PB-62" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Function address should not be compared to zero" id="PB-63" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The values returned by string comparison functions should be compared only to zero" id="PB-64" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" id="PB-65" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type" id="PB-65_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="PB-66_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The same code (after preprocessing) in both branches of if-else statement" id="PB-67" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="An element of an object shall not be initialized more than once" id="PB-69" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="PB-70" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not copy instances of structures containing a flexible array member" id="PB-71" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not call va_arg with an argument of the incorrect type" id="PB-72" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="PB-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="PB-75_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="PB-75_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="PB" desc="C-style strings shall not be used" id="PB-76" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Expression statements shall not be explicit calls to constructors of temporary objects only" id="PB-77" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types" id="PB-78" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid function declarations that are syntactically ambiguous" id="PB-79" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="PB-66_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not add or subtract a constant with a value greater than one from an iterator" id="PB-74" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="PB-73" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Don't define entities with linkage in a header file" id="PFO-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Use multiple include guards" id="PFO-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="An include file should not contain more than one class definition" id="PFO-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="File with extension '.c' may not include other files with extension '.c'" id="PFO-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Never include other files in a file with extension '.icc'" id="PFO-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Use multiple include guards with pattern based on the header file name" id="PFO-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Use mechanism that prevents multiple inclusion of the file i.e. include guards or &quot;#pragma once&quot; preprocessor directive" id="PFO-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="&quot;#pragma once&quot; preprocessor directive should not be used in source files" id="PFO-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Do not define more than on class in a header file" id="PFO-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="PFO" desc="Every implementation file should declare a local constant string that describes the file" id="PFO-04" sev="5" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Don't use hard coded value of offset in structures" id="PORT-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Don't use hex constant '0xffffffff' as an error marker" id="PORT-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="A pointer to a long should not be casted to an int pointer" id="PORT-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not cast an int pointer to a long pointer" id="PORT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier" id="PORT-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Assigning result of ints operation to long without casting at least one of the ints is not allowed" id="PORT-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not assign a long int to an int" id="PORT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not pass long casted to an int in function call" id="PORT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Constant assignment to long should not involve int literals" id="PORT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not initialize a long int with int literals" id="PORT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not assign the value from 32 bit multiplication to long type" id="PORT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="PORT" desc="The type int shall always be declared as unsigned int or signed int" id="PORT-13" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Avoid conversions from &quot;shorter&quot; type to &quot;longer&quot; type in assignment" id="PORT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not cast from &quot;shorter&quot; type to &quot;longer&quot; type" id="PORT-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PORT" desc="Avoid conversions from a &quot;shorter&quot; type to a &quot;longer&quot; type in function calls" id="PORT-16" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Don't use 'i64' or 'L' suffixes directly" id="PORT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Instead of casting a long type operand of an expression to int cast the result of the expression" id="PORT-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not declare variables of long type directly" id="PORT-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not assign a long value to a double" id="PORT-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="The names of identifiers should not be longer than 64 characters" id="PORT-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Avoid implicit conversions to a type of narrower size" id="PORT-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Avoid conversions of constant values to a narrower type" id="PORT-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="A pointer to a structure should not be passed to a function that writes data to a file" id="PORT-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Type long double shall not be used" id="PORT-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Type wchar_t shall not be used" id="PORT-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C++ external identifiers should differ in the first 64 characters" id="PORT-34_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C++ internal identifiers should differ from external identifiers in the first 64 characters" id="PORT-34_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C++ internal identifiers declared in the same scope should differ in the first 64 characters" id="PORT-34_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C external identifiers should differ in the first 31 characters" id="PORT-35_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C internal identifiers should differ from external identifiers in the first 31 characters" id="PORT-35_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C internal identifiers declared in the same scope should differ in the first 31 characters" id="PORT-35_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="The names of identifiers should not be longer than 31 characters" id="PORT-36_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="The names of macro identifiers should not be longer than 31 characters" id="PORT-36_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not throw an exception across execution boundaries" id="PORT-30" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not pass a nonstandard-layout type object across execution boundaries" id="PORT-31" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Use capital 'L' instead of lowercase 'l' to indicate long" id="PORT-01" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Use arrays of int types instead of large arrays of longs" id="PORT-22" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Use arrays of int types instead of dynamic allocated large arrays of longs" id="PORT-23" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Don't use large arrays of pointers to bool, char, short, int and float types" id="PORT-24" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Don't use macros in include statement" id="PREPROC-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="In a macro function, use parentheses before and after multiplication or division" id="PREPROC-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Do not allow absolute or relative path names in #include statements" id="PREPROC-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="PREPROC" desc="The #include directive shall use the &lt;filename.h> notation to include header files" id="PREPROC-09" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="PREPROC" desc="Avoid using macro definitions" id="PREPROC-01" sev="3" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="PREPROC" desc="The #include pre-processor directive will only be used to include header (*.h) files" id="PREPROC-08" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="PREPROC-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="PREPROC" desc="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" id="PREPROC-10_b" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="PREPROC" desc="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="PREPROC-10_c" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="PREPROC" desc="The #ifdef, #else, #elif preprocessor directives should not be used" id="PREPROC-11" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="PREPROC" desc="The #if preprocessor directive should not be used" id="PREPROC-11_b" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="PREPROC" desc="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" id="PREPROC-12" sev="3" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Macro should not contain token pasting, variable argument list nor recursive macro calls" id="PREPROC-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="14;" authUrg="0;" cat="PREPROC" desc="All macros must expand into complete syntactic units" id="PREPROC-14" sev="3" total="14" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Pointer dereference operations may not be hidden in macro definitions" id="PREPROC-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="A macro parameter immediately following a # operator shall not immediately be followed by or preceded by a ## operator" id="PREPROC-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PREPROC" desc="The input/output library stdio.h shall not be included" id="PREPROC-18" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" id="PREPROC-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Match the filename in a #include directive to the one on the filesystem" id="PREPROC-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="#error directive shall not be used" id="PREPROC-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="The #pragma directive shall not be used" id="PREPROC-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="All macro identifiers in preprocessor directives shall be defined before use, except in #ifdef and #ifndef preprocessor directives and the defined() operator" id="PREPROC-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="#undef shall not be used" id="PREPROC-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="PREPROC" desc="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" id="PREPROC-26" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Don't redefine primitive types" id="PREPROC-03" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PREPROC" desc="Don't define part of statement" id="PREPROC-04" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" id="PREPROC-17" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Incorrect 'NULL' definition" id="PREPROC-07" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Avoid token concatenation that may produce universal character names" id="PREPROC-21" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="The methods inside the SIGNAL and SLOT macros have to exist" id="QT-04" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not force thread termination by calling QThread::terminate()" id="QT-07" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not call new on QMutexLocker" id="QT-09" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not directly set specific Widget attributes that are set by Qt kernel" id="QT-12" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Every QObject subclass should contain a Q_OBJECT macro" id="QT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="QObject must not be inherited more than one time" id="QT-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="It's only possible to connect a signal to a slot or a signal to another signal" id="QT-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Mark signal emissions with the keyword &quot;emit&quot; to distinguish a signal emission from a normal method call" id="QT-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not set Idle or Critical priority to QThreads. Use High/Low/Med only" id="QT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="If using lock on a mutex in a function, release the lock in the same function" id="QT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Declare a copy constructor and operator= for any Qt - inherited objects that have pointers" id="QT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Never mix const and non-const iterators in assignment" id="QT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="If you use Q_DECLARE_FLAGS, you must also use Q_DECLARE_OPERATORS_FOR_FLAGS" id="QT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Q_DECLARE_OPERATORS_FOR_FLAGS must be in the global namespace, Q_DECLARE_FLAGS inside the enum's namespace" id="QT-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="The getters and setters of a Q_PROPERTY must exist and the types must match" id="QT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Properties of enum types must use Q_ENUMS" id="QT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Non-const function should not be called on the Qt object" id="QT-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not use setWindowFlags function on a Widget" id="QT-11" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Never use gets()" id="SECURITY-16" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid functions which use time from standard C library" id="SECURITY-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid functions which use random numbers from standard C library" id="SECURITY-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Use care to ensure that LoadLibrary() will load the correct library" id="SECURITY-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid calling functions printf/wprintf with only one argument other than string constant" id="SECURITY-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using functions fprintf/fwprintf with only two parameters, when second parameter is a variable" id="SECURITY-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using data() function from 'string' class of standard library" id="SECURITY-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using the 'vfork()' function" id="SECURITY-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using unsecured shell functions that may be affected by shell metacharacters" id="SECURITY-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using unsafe string functions which may cause buffer overflows" id="SECURITY-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="SECURITY" desc="Avoid using unsafe string functions that do not check bounds" id="SECURITY-13" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="SECURITY" desc="Do not use scanf and fscanf functions without specifying variable size in format string" id="SECURITY-14" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="SECURITY-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid passing non-const parameters or variables into exec" id="SECURITY-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid passing dynamically created strings into exec" id="SECURITY-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Usage of functions prone to race is not allowed" id="SECURITY-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid passing user input into methods as parameters" id="SECURITY-20" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use 'syslog' function for logging purposes" id="SECURITY-21" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use mbstowcs() function" id="SECURITY-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Beware of functions which may return the current directory or the windows directory" id="SECURITY-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using InitializeCriticalSection" id="SECURITY-24" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using thread-unsafe functions" id="SECURITY-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use 'setuid' in source code" id="SECURITY-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Don't use chmod(), chown(), chgrp()" id="SECURITY-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Standard random number generators should not be used to generate randomness for security reasons" id="SECURITY-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use obsolete C routine ulimit()" id="SECURITY-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using 'getpw' function in program code" id="SECURITY-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use 'cuserid' function" id="SECURITY-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using obsolete C routine 'usleep'" id="SECURITY-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Usage of functions which do not properly handle non-NULL terminated strings is not allowed" id="SECURITY-33" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using environment variables" id="SECURITY-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="SECURITY" desc="Don't trust any value of command line if attacker can set them" id="SECURITY-35" sev="2" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Never use unfiltered data from an untrusted user as the format parameter" id="SECURITY-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use weak encryption functions" id="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="SECURITY" desc="Untrusted data is used as a loop boundary" id="SECURITY-38" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use the rand() function for generating pseudorandom numbers" id="SECURITY-02_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid functions which use time from MFC library" id="SECURITY-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="SECURITY-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Use secure temporary file name functions" id="SECURITY-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Specify the access permission bits if a file is created using the 'open' or 'openat' system call" id="SECURITY-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="The function 'pthread_setcanceltype()' should not be called with 'PTHREAD_CANCEL_ASYNCHRONOUS' argument" id="SECURITY-43" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Observe correct revocation order while relinquishing privileges" id="SECURITY-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Ensure that privilege relinquishment is successful" id="SECURITY-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="A pointer to a structure should not be passed to a function that can copy data to the user space" id="SECURITY-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Use correct integer precisions when checking the right hand operand of the shift operator" id="SECURITY-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not call the 'system()' function from the 'stdlib.h' or 'cstdlib' library with an argument other than '0' (null pointer)" id="SECURITY-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="SECURITY-48_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use the 'char' buffer to store input from 'std::cin'" id="SECURITY-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="SECURITY-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Usage of system properties (environment variables) should be restricted" id="SECURITY-03" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Call 'umask' before calling 'mkstemp'" id="SECURITY-40" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Call 'chdir' if you call 'chroot'" id="SECURITY-41" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Use the 'cnd_signal()' function with a unique condition variable" id="SECURITY-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use the 'notify_one()' function when multiple threads are waiting on the same condition variable" id="SECURITY-50" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="To make copying efficient, correct, and immune to the slicing problem create containers of pointers instead of containers of objects" id="STL-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Call empty instead of checking size() against zero" id="STL-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Avoid using iterative calls to insert in an explicit loop" id="STL-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Almost all uses of copy where the destination range is specified using an insert iterator should be replaced with calls to range member functions" id="STL-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Instead of anonymous istream_iterator objects use istream_iterator names when used as function parameters" id="STL-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="When using containers of newed pointers, remember to delete the pointers before the container is destroyed" id="STL-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Never create containers of auto_ptrs" id="STL-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Avoid using remove algorithm with list and standard associative containers" id="STL-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="STL" desc="Prefer vector and string to dynamically allocated arrays" id="STL-10" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Use reserve to avoid unnecessary reallocations" id="STL-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Each vector and string should be checked if it is not empty before it is passed to C function" id="STL-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Avoid using vector&lt;bool>" id="STL-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Specify comparison types for associative containers of pointers" id="STL-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="For associative containers never use comparison function returning true for equal values" id="STL-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="For associative containers never use comparison function returning true for equal values" id="STL-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Prefer iterator to const iterator, reverse_iterator, and const_reverse_iterator" id="STL-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Use distance and advance to convert a container's const_iterators to iterators" id="STL-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Make sure destination ranges are big enough" id="STL-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Follow remove-like algorithms by erase to remove elements from a container" id="STL-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Avoid using remove and similar algorithms (i.e., remove_if and unique) on containers of dynamically allocated pointers" id="STL-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Proper implementation of copy_if should not be based on returning the remove_copy_if with a not1 in front of the predicate" id="STL-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="If accumulate() is used on a container of floating point values, use floating point value as initial one" id="STL-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Design functor classes for pass-by-value" id="STL-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Make predicates const pure functions" id="STL-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Each functor class should has only one operator() function, and it's parameter and return types should be passed to unary_function or binary_function" id="STL-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="You must employ ptr_fun, mem_fun, or mem_fun_ref whenever you pass a function to an STL component" id="STL-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Make sure less&lt;T> means operator&lt;" id="STL-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Prefer algorithm calls to hand-written loops" id="STL-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Prefer member functions to algorithms with the same names" id="STL-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Do not rely on the conversion of count()'s nonzero values to true and zero to false" id="STL-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Do not use an iterator range that isn't really a range" id="STL-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="STL" desc="C-style arrays shall not be used" id="STL-37" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Use != instead of &lt; to compare iterators" id="STL-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Use traits classes in conjunction with overloading" id="STL-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="When calling swap, employ a using declaration for std::swap, then call swap without namespace qualification" id="STL-40" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Do not declare the non-member to be an overloading of std::swap" id="STL-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Member version of swap should never throw exceptions" id="STL-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Consider using vector&lt;char> instead of string" id="STL-11" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="It is necessary to be careful when using reverse_iterator's base iterator for erasure purposes" id="STL-20" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Consider istreambuf_iterators for character-by-character input" id="STL-21" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="If you pass a sorted range to an algorithm that also takes a comparison function, be sure that the comparison function you pass behaves the same as the one you used to sort the range" id="STL-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Instead of trying to write the container-independent code use class encapsulation" id="STL-01" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Factor parameter-independent code out of templates" id="TEMPL-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Define non-member functions inside templates when type conversions are desired" id="TEMPL-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Do not overload functions within a template class" id="TEMPL-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="In template global functions use 'typename' to identify nested dependent type names" id="TEMPL-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="In template classes use 'typename' to identify nested dependent type names" id="TEMPL-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Don't change default arguments of virtual functions in template classes" id="TEMPL-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter" id="TEMPL-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="The viable function set for a function call should either contain no function specializations, or only contain function specializations" id="TEMPL-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Overloaded function templates shall not be explicitly specialized" id="TEMPL-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template" id="TEMPL-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" id="TEMPL-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" id="TEMPL-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Do not declare non-member generic functions in associated namespaces" id="TEMPL-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="The function shall resolve to a function declared previously in the translation unit" id="TEMPL-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Declare 'extern' an explicitly instantiated template" id="TEMPL-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Template specialization shall be declared in the same file as the primary template or a user-defined type, for which the specialization is declared" id="TEMPL-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Use a trailing return type syntax if the return type is preceded by the 'typename' keyword" id="TEMPL-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations" id="TEMPL-18" sev="3" total="0" />
         </RulesList>
         <SeverityList>
            <Severity authTot="44;" authUrg="4;" id="1" total="44" />
            <Severity authTot="657;" authUrg="9;" id="2" total="657" />
            <Severity authTot="980;" authUrg="20;" id="3" total="980" />
            <Severity authTot="391;" authUrg="12;" id="4" total="391" />
            <Severity authTot="359;" authUrg="5;" id="5" total="359" />
         </SeverityList>
      </Rules>

  <Supps />


  <StdViols>
    <StdViol msg="The assertion density is lower than two assertions per function" ln="1" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="1" sev="3" auth="username" locRef="1" rule="METRICS-31" lnHash="-1179647073" rule.header="The assertion density of the code should average to a minimum of two assertions per function" tool="c++test" lineHash="-1179647073" unbViolId="0f874000-c4b6-344c-932c-de411a60643a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23f1359a-0a40-33fe-b679-c4c3744d1232" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="The filename 'NullPointer.cpp' should be in lowercase" ln="1" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="1" sev="3" auth="username" locRef="1" rule="NAMING-03" lnHash="-1179647073" rule.header="Use lowercase for file names" tool="c++test" lineHash="-1179647073" unbViolId="f0cacf99-80b5-3ef9-9857-3f4294857b15" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3fdfdca0-458c-3677-bfcb-a89c4c675177" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'NullPointer.cpp' should have the file name extension &quot;.cc&quot;" ln="1" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="1" sev="3" auth="username" locRef="1" rule="NAMING-38" lnHash="-1179647073" rule.header="Implementation files in C++ always have the file name extension &quot;.cc&quot;" tool="c++test" lineHash="-1179647073" unbViolId="b8e9a7f1-b6f7-3c2b-88b5-98d3bb0c84cf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5bf5ba6e-6ebf-3825-9290-5a4ef5a1d44b" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'NullPointer.cpp' should declare a local constant string that begins from characters &quot;@(#)&quot; " ln="1" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="1" sev="5" auth="username" locRef="1" rule="PFO-04" lnHash="-1179647073" rule.header="Every implementation file should declare a local constant string that describes the file" tool="c++test" lineHash="-1179647073" unbViolId="049e067e-c2e4-3d7b-94f4-c6b7726654cf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8abec1c-62fc-3a97-86ac-0e1917cd4e2c" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'NullPointer.cpp'" ln="1" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="1" sev="3" auth="username" locRef="1" rule="COMMENT-02" lnHash="-1179647073" rule.header="Provide copyright information" tool="c++test" lineHash="-1179647073" unbViolId="ded1be62-5eda-313d-969c-17f9289f316d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f06e0a5-f5f7-37a3-b990-9b4705ac5ef2" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'NullPointer.cpp'" ln="1" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="1" sev="3" auth="username" locRef="1" rule="JSF-133_b" lnHash="-1179647073" rule.header="Every source file will contain copyright information" tool="c++test" lineHash="-1179647073" unbViolId="67b663a6-461b-3fe2-a835-77fb14ed8471" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f6cc6861-c8f3-3eae-87da-8e3da6927dc7" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'NullPointer.cpp'" ln="1" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="1" sev="3" auth="username" locRef="1" rule="COMMENT-03" lnHash="-1179647073" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="-1179647073" unbViolId="5d19e31c-261e-3cf7-9153-eacfdb229b88" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e6aaab84-be4b-31b9-ab5f-7a0142289104" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'NullPointer.cpp'" ln="1" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="1" sev="3" auth="username" locRef="1" rule="JSF-133_a" lnHash="-1179647073" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="-1179647073" unbViolId="431cc76f-0102-3cb0-a3db-2a8fa3214a31" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d388a3a4-8900-37d8-a54c-7e6b0c2f3806" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Point.hpp&quot;" ln="1" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="1" sev="3" auth="username" locRef="1" rule="JSF-032" lnHash="-1179647073" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="-1179647073" unbViolId="c33e639f-9d46-30b3-bfb9-b0e6469be642" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac6a9038-0ca5-3a9d-9dab-e222832755e8" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Point.hpp&quot;" ln="1" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="1" sev="3" auth="username" locRef="1" rule="PREPROC-08" lnHash="-1179647073" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="-1179647073" unbViolId="ea3815f9-9959-3e30-9e9c-98315bd55091" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e6043ad-5ca1-3b75-a312-52489794564c" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;Point.hpp&quot;" ln="1" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="1" sev="2" auth="username" locRef="1" rule="PREPROC-09" lnHash="-1179647073" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="-1179647073" unbViolId="7b1a2175-0e3a-3bc5-bd4b-cfa5c8530f96" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de0502ba-160e-37ad-b4f2-447f5727c7f8" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;Point.hpp&quot;" ln="1" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="1" sev="2" auth="username" locRef="1" rule="JSF-033" lnHash="-1179647073" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="-1179647073" unbViolId="84b7b6b3-508a-392c-aa7d-8b19a946b826" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1dbacc11-0138-3433-bf0c-477e0c5de975" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdlib.h>' the corresponding C++ library header should be used" ln="3" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="3" sev="2" auth="username" locRef="1" rule="MISRA2008-18_0_1" lnHash="-327381023" rule.header="The C library shall not be used" tool="c++test" lineHash="-327381023" unbViolId="fd33561c-34af-3e45-897e-a8aa91b83c68" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23abe1e0-b9e6-36f2-835f-caded754ba7f" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdlib.h>' the corresponding C++ library header should be used" ln="3" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="3" sev="3" auth="username" locRef="1" rule="HICPP-1_3_3-a" lnHash="-327381023" rule.header="The C library shall not be used" tool="c++test" lineHash="-327381023" unbViolId="9dabc3ef-63f0-37bb-9e4c-fc4f0b5a4c59" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a65c9784-1cff-3dc6-8422-f9527d755fb9" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdlib.h>' the corresponding C++ library header should be used" ln="3" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="3" sev="2" auth="username" locRef="1" rule="AUTOSAR-A18_0_1-a" lnHash="-327381023" rule.header="The C library shall not be used" tool="c++test" lineHash="-327381023" unbViolId="824735d7-68e0-35c7-8115-e969b56c9646" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62de2920-8c0b-3302-9d59-60743e9b2864" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdlib.h>' the corresponding C++ library header should be used" ln="3" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="3" sev="3" auth="username" locRef="1" rule="CODSTA-CPP-59" lnHash="-327381023" rule.header="The C library shall not be used" tool="c++test" lineHash="-327381023" unbViolId="a0b8c724-3637-36fc-b7a6-c54bd306bb4f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b1dc37ab-c4b3-3755-8ffc-73bde2ec6167" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdlib.h>' the corresponding C++ library header should be used" ln="3" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="3" sev="2" auth="username" locRef="1" rule="AUTOSAR-A1_1_1-d" lnHash="-327381023" rule.header="The C library shall not be used" tool="c++test" lineHash="-327381023" unbViolId="1898d765-c27d-328c-9aaf-63463e4d1dc6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7520df7c-0177-30a3-832b-41df98a3a25f" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0," />
    <StdViol msg="Ensure that C Standard Library is securely used" ln="3" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="3" sev="4" auth="username" locRef="1" rule="HICPP-17_2_1-a" lnHash="-327381023" rule.header="Wrap use of the C Standard Library" tool="c++test" lineHash="-327381023" unbViolId="fec2a797-5a6b-3898-9ce6-1911e67db893" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b661fa17-a7b6-3ae2-a0df-98366701a91e" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0," />
    <StdViol msg="The definition of the 'main' function is not preceded by a comment" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="COMMENT-04" lnHash="-332596053" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-332596053" unbViolId="e01ca135-90d3-34ab-a1d2-9928f78e88cb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6695f047-4548-36ed-8cf0-d04ab0e0ddda" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The definition of the 'main' function is not preceded by a comment" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="4" auth="username" locRef="1" rule="JSF-134" lnHash="-332596053" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-332596053" unbViolId="8500059e-0d83-3818-b607-f4bc70cee7d1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="08a2c796-e332-36d4-9bd7-0c7a49ff5b40" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="COMMENT-14" lnHash="-332596053" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-332596053" unbViolId="34fd5bcb-66df-3a50-9b53-e3c3c7559a5c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b8f0f0c-f430-3c6a-9cce-4f5e90145df4" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="2" auth="username" locRef="1" rule="AUTOSAR-A2_7_3-a" lnHash="-332596053" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-332596053" unbViolId="ce03cb2c-7adb-3641-842f-bcd21587897a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de95d1af-778e-349f-bde8-c54c328fc207" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'argc' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="COMMENT-14_b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="6b9dcfc9-34e9-3d78-b393-05ca5b96d755" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b004bd8-cad5-3f57-b125-f1cab5ebe0c8" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'argc' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="2" auth="username" locRef="1" rule="AUTOSAR-A2_7_3-b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="01a988bc-3f89-3891-b28f-869da7a79f9c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3b5ceb8-bfeb-3d9f-8b64-4a852ac20ec9" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'argv' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="COMMENT-14_b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="07709a97-908d-34eb-98a0-f02771091b08" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90fce9ee-4065-3537-bb70-94527bab2409" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'argv' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="2" auth="username" locRef="1" rule="AUTOSAR-A2_7_3-b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="66f55c3e-c4af-3f5d-ad59-7726b9062665" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1cdcb641-1f0d-3418-bc5c-33dcc3a6ddd9" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function should be preceded by a comment that contains the '@return' tag" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="COMMENT-14_b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="b9396172-fedd-3dd9-9222-aa4eef17dbd3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54a486aa-7d71-39df-a39d-3c8c21a1b406" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function should be preceded by a comment that contains the '@return' tag" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="2" auth="username" locRef="1" rule="AUTOSAR-A2_7_3-b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="9e0da2d3-5939-338f-9db6-4ae47dacbaa1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10b2be12-7040-3bf0-99dc-d3527ca83ad7" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="'main' shall be declared as unsigned int or signed int" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="PORT-13" lnHash="-332596053" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-332596053" unbViolId="72e8f561-e5db-394a-beb8-270bb0fef255" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="757296c4-1a2d-3b4f-a976-65f15549dbcb" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="CERT_CPP-ERR50-d" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="82e929b0-b769-3a4d-83ec-be92765c51f9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ac3e2f8-28be-3c5f-a99b-0facfa774fc5" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="2" auth="username" locRef="1" rule="AUTOSAR-A15_3_3-a" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="9bafcfe3-072a-31b5-87e2-b3fe4355645e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="871d30c5-9de4-3a1b-8812-e5f81117496e" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="HICPP-15_3_2-b" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="8a1bd330-e5c0-38ef-801d-c15eb4dfbcd8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ea6f08b-ca00-38d2-933b-8f8d8a8c0197" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="4" auth="username" locRef="1" rule="MISRA2008-15_3_2" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="ac8e625a-876e-3841-a724-c33f19fd156d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7aef1f13-fe88-3a77-bc01-5bcdf78fcdb8" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="2" auth="username" locRef="1" rule="AUTOSAR-A15_5_3-d" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="5d6087ed-3148-31b4-9dd6-3190b0b8cd92" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7c0e218-e3dc-30e7-b91b-413a6d4cc110" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="EXCEPT-06" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="89077683-541d-38c6-a72b-3d1d286a19a4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4d6f930-81e5-3ef9-8b3d-32a058a1279b" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="2" auth="username" locRef="1" rule="MISRA2008-15_5_3_d" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="21d94d7b-79fd-3f06-b012-b351592d0ee2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c16ed9ed-03ff-366a-8260-58d25adc0005" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'main'" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="FORMAT-28" lnHash="-332596053" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-332596053" unbViolId="adbed8de-4ff8-32d8-8c4f-e97739608360" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e18a3095-f974-3851-a47a-d57d95abb6b7" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Function 'main' has Cyclomatic Complexity value: 2" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="5" auth="username" locRef="1" rule="METRICS-29" lnHash="-332596053" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-332596053" unbViolId="e9dfc17f-f92a-3d2b-bc48-2f9a33914c11" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ac378b5-edf5-371b-9991-d314d156792f" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Function 'main' has Essential Complexity value: 1" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="5" auth="username" locRef="1" rule="METRICS-33" lnHash="-332596053" rule.header="Report Essential Complexity" tool="c++test" lineHash="-332596053" unbViolId="f5ea6f08-51ce-3911-b461-85149d314a68" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6107276c-1589-3f4c-bb8f-139eec57a1f1" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="4" auth="username" locRef="1" rule="MISRA2008-3_9_2" lnHash="-332596053" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-332596053" unbViolId="05199627-68d7-37bf-bcd3-38cf7adcd64d" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="46e8ed70-e9b0-389d-a1df-b264c518aa9f" locEndPos="10" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="MISRA-013" lnHash="-332596053" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-332596053" unbViolId="096f53d9-9a28-3fe0-a26b-57d38bf1a15d" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8dc62a73-5d61-345e-9295-91a9c72ba7bd" locEndPos="10" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The identifier 'argc' differs only by presence/absence of the underscore character from identifier '_argc' declared in file 'stdlib.h'" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="NAMING-45" lnHash="-332596053" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-332596053" unbViolId="d2cffb67-407e-3f31-9661-1b6eb0c0652d" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="312d34b5-80db-3480-ac62-98ba470e5792" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The identifier 'argc' differs only by presence/absence of the underscore character from identifier '_argc' declared in file 'stdlib.h'" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="JSF-048" lnHash="-332596053" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-332596053" unbViolId="89b4d241-367f-39e4-98d9-2b620cc65a2f" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0d1aa5f-2f76-3742-bb66-23aa88bbafd7" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="'argc' shall be declared as unsigned int or signed int" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="PORT-13" lnHash="-332596053" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-332596053" unbViolId="38f1f8ab-e8fa-3762-823e-72b58bcf891e" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6409d32-dae7-3c24-bf73-928ce0cb0688" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'argc' as const" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="CERT_C-DCL00-a" lnHash="-332596053" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-332596053" unbViolId="5be1bec8-a21e-3b1a-a668-b8d07a8048b1" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0a659d9-0501-3089-a571-dbb62ef737c9" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'argc' as const" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="2" auth="username" locRef="1" rule="AUTOSAR-A7_1_1-a" lnHash="-332596053" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-332596053" unbViolId="9637bf83-b09d-3c62-b496-a84f1a9e37f2" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77dfc7ea-77d8-345f-ad62-7336a4fdfac5" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'argc' as const" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="2" auth="username" locRef="1" rule="MISRA2008-7_1_1" lnHash="-332596053" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="-332596053" unbViolId="9606088b-d6ad-33dc-bb2d-bd2c684db9a6" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd09c7e9-f9fb-39b5-a3bf-5453cd860b7f" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'argc' as const" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="CODSTA-CPP-53" lnHash="-332596053" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-332596053" unbViolId="97607ec3-2a35-341a-af45-e037a7a9af71" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75695057-19b6-3e18-a02e-64a0dde9e674" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'argc' as const" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="HICPP-7_1_2-a" lnHash="-332596053" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-332596053" unbViolId="2699443b-23b9-3465-9255-d796776434fd" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="adbcbcd4-7118-38d6-964c-abe7c468d635" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'argc' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="NAMING-HN-22" lnHash="-332596053" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-332596053" unbViolId="081b9983-e038-3b95-8bf1-3fc9eb35eec9" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f9c4915-0504-3c8f-a74c-b26ab1c82643" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'argc' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="NAMING-HN-30" lnHash="-332596053" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-332596053" unbViolId="0d8e70f4-ea3d-3cf2-a121-673c690bc713" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="80cfa9b9-6036-3943-a175-603a466b1b6d" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'argc' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="NAMING-HN-43" lnHash="-332596053" rule.header="Hungarian notation for word types" tool="c++test" lineHash="-332596053" unbViolId="9dcd009c-9806-3968-b838-d34358ebc7b4" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99fad672-7c5c-3eb2-94fa-0663d941ad14" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="4" auth="username" locRef="1" rule="MISRA2008-3_9_2" lnHash="-332596053" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-332596053" unbViolId="b401b750-d0c1-33ec-afd5-7b620de631bd" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5188a808-100d-323b-9790-ec130bfe619d" locEndPos="20" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="MISRA-013" lnHash="-332596053" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-332596053" unbViolId="e97ff019-9abb-3914-96b6-129f2a49386c" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87cb1ff1-a43f-394b-a220-e8db58c19a6d" locEndPos="20" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The identifier 'argv' differs only by presence/absence of the underscore character from identifier '_argv' declared in file 'stdlib.h'" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="NAMING-45" lnHash="-332596053" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-332596053" unbViolId="c564b61e-646d-3b91-a568-4d80d7363258" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8d8ce04-61b5-32d4-9409-b4f2383cc48e" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The identifier 'argv' differs only by presence/absence of the underscore character from identifier '_argv' declared in file 'stdlib.h'" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="JSF-048" lnHash="-332596053" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-332596053" unbViolId="a1244ff5-210b-312c-82bd-61f2c3c1a834" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07bb7fb3-827e-3df6-a576-adc69eb12b85" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Declaration of variable 'argv' contains more than one level of pointer indirection" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="HICPP-8_1_1-a" lnHash="-332596053" rule.header="The declaration should not contain more than one level of pointer indirection" tool="c++test" lineHash="-332596053" unbViolId="a924d43a-ec77-377c-b899-3a055037f7ef" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b662d68f-200a-38c8-a9e3-c846938a2132" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Declaration of variable 'argv' contains more than one level of pointer indirection" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="CODSTA-89" lnHash="-332596053" rule.header="The declaration should not contain more than one level of pointer indirection" tool="c++test" lineHash="-332596053" unbViolId="c9b5da6b-6a50-392e-bb6a-9ad0f0e0f006" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e9b854f-c93d-3967-8d63-8986534b76fa" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared: argv" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="CODSTA-94" lnHash="-332596053" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-332596053" unbViolId="fdcdef60-afed-381e-a252-30efc4240bbb" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c711d4e2-0956-3df8-9769-4e35d6a440db" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The parameter of pointer type is declared: argv" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="CODSTA-95" lnHash="-332596053" rule.header="Do not declare pointer type" tool="c++test" lineHash="-332596053" unbViolId="57df304f-bdeb-3521-9c19-2d0b1ec31fe2" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a37dde9c-182f-3e1f-9aaa-9f75309cceaa" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Parameter 'argv' with array type was found in 'main' function declaration" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="2" auth="username" locRef="1" rule="JSF-097_c" lnHash="-332596053" rule.header="Arrays shall not be used in global functions" tool="c++test" lineHash="-332596053" unbViolId="923e9753-facc-3de8-91aa-a4fdbbcbfea5" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e6faf0c-fc80-3663-9d92-4c5ec9f4cbff" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Parameter 'argv' with array type was found in 'main' function declaration" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="2" auth="username" locRef="1" rule="CODSTA-142" lnHash="-332596053" rule.header="Global functions shall not declare parameters with array type" tool="c++test" lineHash="-332596053" unbViolId="eef0fc1a-8b41-3777-8b92-3ac91ff2fe19" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="33b99b80-d036-34ad-a04d-9a9eb737b015" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Parameter 'argv' is not validated before use" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="CERT_C-API00-a" lnHash="-332596053" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-332596053" unbViolId="a1e024a9-fde1-3c41-8b6a-a5681916be37" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bbd12b79-b62b-33d1-b488-5c8c1f2ffbe4" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Parameter 'argv' is not validated before use" ln="5" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="username" locRef="1" rule="CODSTA-86" lnHash="-332596053" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-332596053" unbViolId="8e34a43c-2107-35d9-a6d1-cf25986734a3" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dea34ba5-20f6-3fa5-9782-b9c46722d67d" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="6" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="6" sev="3" auth="username" locRef="1" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="a49f6012-4cfe-3beb-9c46-10e62b2b95af" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3ab44b1-75d5-3fed-b6e7-7444361679c0" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="6" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="4" auth="username" locRef="1" rule="JSF-043" lnHash="264435611" rule.header="Tabs should be avoided" tool="c++test" lineHash="264435611" unbViolId="151e0438-c541-3ee0-9078-f24994c17115" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a30dee0d-5106-362f-8537-6eb743b553ae" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="5" auth="username" locRef="1" rule="FORMAT-01" lnHash="264435611" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="264435611" unbViolId="a7a7985b-76f9-3e4f-9b50-4b60923045aa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74d416fd-35ae-3457-b6c0-c2e06f371425" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="5" auth="username" locRef="1" rule="HICPP-2_1_1-a" lnHash="264435611" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="264435611" unbViolId="55d393dc-9f61-3105-9e27-d6bdeed9fee6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce12759f-4bbd-3a50-8a57-51b296b3440b" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="The definition of the 'point' variable should contain a braced initializer" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="2" auth="username" locRef="1" rule="AUTOSAR-A8_5_2-a" lnHash="264435611" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="264435611" unbViolId="06a6884a-d322-3111-aed9-7e54cac04e5d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9ac4e41-80b8-3a7c-9144-a35afa475e0c" locEndPos="9" locType="sr" urgent="true" hash="-1257393797" locEndLn="7" goals="1," />
    <StdViol msg="The definition of the 'point' variable should contain a braced initializer" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="3" auth="username" locRef="1" rule="CODSTA-MCPP-38" lnHash="264435611" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="264435611" unbViolId="02ffce7b-7857-3400-a5e5-dcfd308bf808" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0e26c05-ce6e-304f-af42-db0c3aabfd0c" locEndPos="9" locType="sr" urgent="true" hash="-1257393797" locEndLn="7" goals="1," />
    <StdViol msg="The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="3" auth="username" locRef="1" rule="NAMING-45" lnHash="264435611" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="264435611" unbViolId="7c2ff9f5-9459-3e38-b958-bf0519c46406" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed1117cd-13e8-3ef9-8d97-4f99257ca57b" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="3" auth="username" locRef="1" rule="JSF-048" lnHash="264435611" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="264435611" unbViolId="ac136fcc-e06f-3cce-b481-9c23b22c3c12" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac63413f-df8a-3f65-b048-84cf67660575" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: point" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="3" auth="username" locRef="1" rule="CODSTA-94" lnHash="264435611" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="264435611" unbViolId="bfaea923-76e6-3039-bd75-a3c4d3341466" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f1420d26-0055-3173-954c-5d4fa0ed1ef7" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="The variable of pointer type is declared: point" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="3" auth="username" locRef="1" rule="CODSTA-95" lnHash="264435611" rule.header="Do not declare pointer type" tool="c++test" lineHash="264435611" unbViolId="b15497e3-235f-31d6-8bb9-5deb34bf9460" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c21da2f-7fd4-3791-a2eb-dd7fa32a9d54" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="2" auth="username" locRef="1" rule="MISRA2008-2_10_1" lnHash="264435611" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="264435611" unbViolId="d5999f04-c973-3af6-9e81-67d540cc579a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="25f37ded-72c5-3a0c-ac6b-6fefce531337" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="3" auth="username" locRef="1" rule="HICPP-2_4_1-a" lnHash="264435611" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="264435611" unbViolId="f6751396-6f18-3752-bd46-6f0c8811169b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc38166b-dce9-3e3b-9d5e-cf07cc4fdae7" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="2" auth="username" locRef="1" rule="AUTOSAR-M2_10_1-a" lnHash="264435611" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="264435611" unbViolId="af1994ba-0145-3db5-ad44-6fb51fd131a7" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f8b04e7-963d-344b-be13-6ca3b7d15bce" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="3" auth="username" locRef="1" rule="NAMING-47" lnHash="264435611" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="264435611" unbViolId="60d83228-ea29-3023-805c-6b4fc8f61697" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="301cf02f-3906-3f07-8aa3-a493f22f7ad1" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Locally allocated memory is not deleted locally for : point" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="3" auth="username" locRef="1" rule="MRM-18" lnHash="264435611" rule.header="Do not allocate memory and expect that someone else will deallocate it later" tool="c++test" lineHash="264435611" unbViolId="0b23e1cf-3e1e-3847-b417-54687ef27ad7" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb5c74c6-563c-310d-aa5d-1389b08f1ce5" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Locally allocated memory is not deleted locally for : point" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="1" auth="username" locRef="1" rule="CERT_C-MEM00-a" lnHash="264435611" rule.header="Do not allocate memory and expect that someone else will deallocate it later" tool="c++test" lineHash="264435611" unbViolId="d6892cc4-bb43-32b8-b951-d967109d9610" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75ca8fa3-49bc-38ed-bc44-f2cff02ca60f" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="The 'point' variable should be commented" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="3" auth="username" locRef="1" rule="JSF-132_a" lnHash="264435611" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="264435611" unbViolId="34948db0-bd42-318c-8d5b-7c548b9efcdd" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70fa3599-c59a-38b9-952d-98d739e83419" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="The 'point' variable should be commented" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="3" auth="username" locRef="1" rule="COMMENT-05" lnHash="264435611" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="264435611" unbViolId="68206dd4-a84c-3893-83df-1707655415b8" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e6a2bb4-b062-3472-988c-ecb71f76c54a" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="2" auth="username" locRef="1" rule="MISRA2012-RULE-11_9_a" lnHash="264435611" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="264435611" unbViolId="4f2df2bf-8c79-3f46-af84-a3f1eaad7591" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92510e57-e507-3eec-8448-ab8110834c8e" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="2" auth="username" locRef="1" rule="AUTOSAR-M4_10_2-a" lnHash="264435611" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="59c82745-f814-3415-b36c-fde9b24f6149" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3f15f6f-5b40-33d4-ba9d-29fdbebecfdd" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="2" auth="username" locRef="1" rule="MISRA2008-4_10_2" lnHash="264435611" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="6e9b14e2-7984-3838-8bf5-84a2aa169e06" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3aaa5344-cc18-3647-886f-b233f400c8e8" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="3" auth="username" locRef="1" rule="CODSTA-CPP-63" lnHash="264435611" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="3334f138-aa19-393b-9b6d-9c0d60a41e45" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5410afb-f3f5-3e6a-9871-e109aa53f9b4" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="2" auth="username" locRef="1" rule="MISRAC2012-RULE_11_9-a" lnHash="264435611" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="c13320bb-bf99-31c3-babc-e4d605f9c4a2" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3ea00a3-6557-3902-bb59-0a569fd1c1c0" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="2" auth="username" locRef="1" rule="AUTOSAR-A4_10_1-b" lnHash="264435611" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="264435611" unbViolId="89a2ab1c-04d9-3290-ac60-3b5d68d231be" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8425c4c9-c04c-30e9-9c94-9a8977597197" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="4" auth="username" locRef="1" rule="HICPP-2_5_3-a" lnHash="264435611" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="264435611" unbViolId="4d77d3da-24f9-3952-94cf-2641ed3caf19" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8637977-2a23-3f0c-8c18-a35b0929974c" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="4" auth="username" locRef="1" rule="CODSTA-MCPP-04" lnHash="264435611" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="264435611" unbViolId="080c03d7-b762-3f5c-a5ef-00d41f7189f5" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b796c211-c3a9-3864-9a84-224fab32859f" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="3" auth="username" locRef="1" rule="CODSTA-131" lnHash="264435611" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="80b958ff-65b2-316d-ab93-73763d85848a" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9169787a-5fa4-3229-99de-c4bd2d09e43b" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="2" auth="username" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="264435611" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="264435611" unbViolId="3dbfcbf7-3cc7-3bb9-9c3a-b4767957c1bf" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d90cbbab-f985-390e-b5e2-3af845a38a5f" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="2" auth="username" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="264435611" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="8b619c31-02b4-38e9-80e9-07a4dde1cd1a" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0135d7cb-1ca1-31cf-b53f-1e994554a1f3" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="8" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="3" auth="username" locRef="1" rule="JSF-061" lnHash="-620226472" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-620226472" unbViolId="0ac8cbe8-e476-3c0f-8caa-617f8fa0fdd4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7de6aaa1-f81e-3a21-a6c3-044aac12b4ef" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="8" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="3" auth="username" locRef="1" rule="FORMAT-42" lnHash="-620226472" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-620226472" unbViolId="2593db99-2104-38c6-a5ab-21add9b8dd57" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dfb011f7-691f-319f-836d-6317a9ab0bfd" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="8" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="3" auth="username" locRef="1" rule="JSF-060_a" lnHash="-620226472" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-620226472" unbViolId="afd3dc3d-5943-3c21-aabb-8c9a1b1ec6ca" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38de259f-2307-3c02-bcd8-bd507fb3465a" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="8" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="3" auth="username" locRef="1" rule="FORMAT-43" lnHash="-620226472" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-620226472" unbViolId="7cdedbfe-ff95-3a8b-b615-fc39f412e089" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21232f3e-fca8-3888-8bc8-dda0818cc9f8" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="8" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="3" auth="username" locRef="1" rule="JSF-060_b" lnHash="-620226472" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-620226472" unbViolId="92903aee-36a6-3595-8cb1-3b7e0cc33a05" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9f762b8-b2d8-3be8-a6ef-02a3d2d28ce5" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="4" auth="username" locRef="1" rule="JSF-043" lnHash="-620226472" rule.header="Tabs should be avoided" tool="c++test" lineHash="-620226472" unbViolId="b610d81b-2f9c-36c0-a52b-c53e1ac32d6e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a5b5449-57a8-319c-8aa0-ee5ed4769913" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="5" auth="username" locRef="1" rule="FORMAT-01" lnHash="-620226472" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-620226472" unbViolId="960d7fac-190a-3fd4-828d-da9bfab55693" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="284dd46f-da94-3a1d-9fcc-89f6d2aeed0c" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="5" auth="username" locRef="1" rule="HICPP-2_1_1-a" lnHash="-620226472" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-620226472" unbViolId="adbacdf1-3c03-39ea-abaf-45e9f0244217" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="988383cb-7e2b-3027-b4e3-da8fa2ab040f" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="8" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="3" auth="username" locRef="1" rule="FORMAT-02" lnHash="-620226472" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-620226472" unbViolId="6ce7ef55-853f-3e77-9343-5c199776833c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e9efaa3-582a-38fe-8d91-b7f024991b07" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="The 'if' statement doesn't have an 'else' clause" ln="8" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="3" auth="username" locRef="1" rule="CODSTA-23" lnHash="-620226472" rule.header="All 'if' statements should have an 'else' clause" tool="c++test" lineHash="-620226472" unbViolId="e550c72c-c99e-347b-89f8-4c4f60834542" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8372141a-55f5-3077-b0d4-6c8ab2524032" locEndPos="2" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="No value of command line should be trusted: argc" ln="8" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="2" auth="username" locRef="1" rule="SECURITY-35" lnHash="-620226472" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="-620226472" unbViolId="47ade95b-d79c-3a63-9371-fef0ca41ddfd" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10f48843-fcb8-39c7-a85a-e43996a2031d" locEndPos="6" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Literal constant '3' is used" ln="8" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="3" auth="username" locRef="1" rule="JSF-151" lnHash="-620226472" rule.header="Numeric values in code will not be used; symbolic values will be used instead" tool="c++test" lineHash="-620226472" unbViolId="0a8c0831-aa44-3aff-84c4-512d917022e3" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0dcff9e9-9e55-34a2-b441-a8d6846ff8c9" locEndPos="13" locType="sr" urgent="true" hash="-1257393797" locEndLn="8" goals="1," />
    <StdViol msg="Literal constant '3' is used" ln="8" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="3" auth="username" locRef="1" rule="CODSTA-26" lnHash="-620226472" rule.header="Avoid magic numbers" tool="c++test" lineHash="-620226472" unbViolId="4c0b7ae7-f926-3cc3-b52e-bb164f6a1bda" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="054f55b8-d90c-34d2-a2a9-81f76344c28e" locEndPos="13" locType="sr" urgent="true" hash="-1257393797" locEndLn="8" goals="1," />
    <StdViol msg="Literal constant '3' is used" ln="8" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="2" auth="username" locRef="1" rule="AUTOSAR-A5_1_1-a" lnHash="-620226472" rule.header="Avoid magic numbers" tool="c++test" lineHash="-620226472" unbViolId="bdd7eed1-ba18-354b-8a2b-09f52975600c" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fffaf81b-0cea-35eb-97c4-b4b1745943f9" locEndPos="13" locType="sr" urgent="true" hash="-1257393797" locEndLn="8" goals="1," />
    <StdViol msg="Literal constant '3' is used" ln="8" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="3" auth="username" locRef="1" rule="HICPP-5_1_1-a" lnHash="-620226472" rule.header="Avoid magic numbers" tool="c++test" lineHash="-620226472" unbViolId="c1524620-2e60-37be-94af-b31feba2a09a" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aba9b6e2-9ec5-3d6e-86fa-1a41424ad7a0" locEndPos="13" locType="sr" urgent="true" hash="-1257393797" locEndLn="8" goals="1," />
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="4" auth="username" locRef="1" rule="JSF-043" lnHash="212456074" rule.header="Tabs should be avoided" tool="c++test" lineHash="212456074" unbViolId="78971802-bd33-3aff-acd8-6a4ff13c1601" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54a87692-7d50-30e4-87da-71d2b5b28286" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="5" auth="username" locRef="1" rule="FORMAT-01" lnHash="212456074" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="212456074" unbViolId="11170885-e858-3245-a516-9b3b2b10e75c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="63f0e4e7-ecb2-3892-9d31-cb9c709c058c" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="5" auth="username" locRef="1" rule="HICPP-2_1_1-a" lnHash="212456074" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="212456074" unbViolId="dfc00434-59ea-332b-9d54-9964e7b2785f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3464ca7f-56a1-3533-aaaf-e3658a804218" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="4" auth="username" locRef="1" rule="JSF-043" lnHash="212456074" rule.header="Tabs should be avoided" tool="c++test" lineHash="212456074" unbViolId="f5fe5e22-6f93-3339-b56d-ed3deb23f22b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="08e8aeea-5cc2-354d-a7fc-06e9892f3f1c" locEndPos="2" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="5" auth="username" locRef="1" rule="FORMAT-01" lnHash="212456074" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="212456074" unbViolId="8c574fee-95b5-3935-887b-c0d68cb4b434" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="541c4ac4-dacd-3c9e-9115-844f2982ca59" locEndPos="2" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="5" auth="username" locRef="1" rule="HICPP-2_1_1-a" lnHash="212456074" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="212456074" unbViolId="18314dc0-f596-32c8-ba08-c9cf591b577a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e64af8da-0239-3c3e-9fa5-cf988548148e" locEndPos="2" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="76503faa-e075-3c8a-8667-8179030066a7" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f63b0824-abfa-3979-9e45-adb5692cf32f" locEndPos="3" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Check the return value of new" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="3" auth="username" locRef="1" rule="MRM-34" lnHash="212456074" rule.header="Check the return value of new" tool="c++test" lineHash="212456074" unbViolId="90ba32b3-bf95-3898-963e-a4e2fd4ef451" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="949a06dd-0407-3edb-8491-7c91a5c837f5" locEndPos="3" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Check the return value of new" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="1" auth="username" locRef="1" rule="CERT_CPP-MEM52-a" lnHash="212456074" rule.header="Check the return value of new" tool="c++test" lineHash="212456074" unbViolId="8d5cc915-beba-3495-8768-68650618b91a" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b427a256-5a9d-3c0a-ba77-47c401f7a134" locEndPos="3" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="MISRA2012-DIR-4_12" lnHash="212456074" rule.header="Dynamic memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="3c606dc5-21e2-346e-b34e-ecc493fbda84" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="979993bc-ec31-37a5-850c-e23989befbef" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="MISRA2008-18_4_1" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="147a0a54-c027-396d-83b2-cb1fa193c0a3" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05e7fc3d-3224-35d7-81b3-5514b7ed90bc" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="MISRAC2012-RULE_21_3-a" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="ef2c00cd-d463-3aa6-ab71-008d8a1f33d4" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02e2b3a3-eafc-342f-a92d-ec1418f353e9" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="AUTOSAR-A18_5_2-a" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="47aaafdc-65a6-3402-8520-f4509df0e338" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fadcdd1c-dae1-395a-a238-e6188dae2ad6" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="JSF-206" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="5a7f0a82-00b6-38fc-820b-ea72013c2aa0" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5bfd356-b359-3d0a-bff9-5da4b1f61554" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="MISRA2012-RULE-21_3" lnHash="212456074" rule.header="The memory allocation and deallocation functions of &lt;stdlib.h> shall not be used" tool="c++test" lineHash="212456074" unbViolId="66693cbe-3a88-3495-9bcd-f580dfcd4d88" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d756cecd-ded8-350f-9682-a0f0c65ee820" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="3" auth="username" locRef="1" rule="MISRA2004-20_4" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="7daa0488-d88c-3b37-82fe-bd99f2dc8e6a" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a73ef0b-9e8a-3656-b427-5f22cae6a8de" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="MISRAC2012-DIR_4_12-a" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="cb780a83-096b-3181-970f-068b030fba27" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5e68969-6e63-3da3-ab20-53277eaf8c0e" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="825d0857-b792-3870-a277-b8bca988aa48" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="960c7483-9f28-3440-96d8-a27da531bfbf" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="3925dba6-57ec-3cf2-aa4e-7e8fe31232b6" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ed26746-2644-3010-b7cc-0c82ba399741" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="MISRAC2012-RULE_21_7-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="900c6b74-7ab5-3840-af02-2aee881ada87" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88511a37-d28c-341d-bb71-ca8104b93464" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="3" auth="username" locRef="1" rule="CERT_CPP-ERR62-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="148d5737-9ea8-341a-8b78-3f764df11151" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ef50a07-f8b5-37eb-b0b3-6aeaace64914" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="MISRA2008-18_0_2" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library &lt;cstdlib> shall not be used" tool="c++test" lineHash="212456074" unbViolId="8c211d43-82e0-3193-8fac-80a1b0ba3ce7" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3f5b61f-36e3-3ecb-ab76-0ad42f6f6f95" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="3" auth="username" locRef="1" rule="CERT_C-ERR34-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="5f87ea58-fb58-36b5-83b2-b44a84c516e8" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="efc8ab5a-660d-3bf8-9354-ebabb254d8f9" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="3" auth="username" locRef="1" rule="MISRA2004-20_10" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="110e8d6a-a028-3dd2-80ed-d03bec80af82" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="838b9ab9-f832-3246-abb4-0f2c980c65df" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="3" auth="username" locRef="1" rule="CERT_C-MSC24-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="0d161f96-13e8-35e1-a3c1-4a1568c84439" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7e5ccce-71e4-3e50-b665-c2f96a82f359" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="CERT_C-ERR07-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="e064f6db-bf07-3552-bf03-db23014d3a12" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="44d2b0f5-2d29-3117-afc8-9ea1e33e5ebf" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="AUTOSAR-A18_0_2-b" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="d5a73e26-718b-3abc-bc5d-8bfd1e054783" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="189c84d8-8ef3-3940-af60-2c390472d53c" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="AUTOSAR-A18_0_2-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="995a6e3a-f70e-3e98-ab74-ea4ba0a2fdaa" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b762f609-c495-3fcb-92d5-c434ea482148" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="MISRA2012-RULE-21_7" lnHash="212456074" rule.header="The atof, atoi, atol and atoll functions of &lt;stdlib.h> shall not be used" tool="c++test" lineHash="212456074" unbViolId="c77dc54e-96da-3955-85bc-67365ee23e8c" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9bb475ba-dcc5-3d41-9896-83c327fdcdcd" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="JSF-023" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library &lt;stdlib.h> shall not be used" tool="c++test" lineHash="212456074" unbViolId="ef21106b-0362-3e91-92fb-23703aac1415" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f18acf5-baf6-3eef-b050-b76331ab3608" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="582f6a0c-9d9c-3336-9851-38a3888be0f3" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2705db55-4d73-301f-9321-2ae552df32d1" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="113fb651-3cc3-363f-9a9c-23f44d6e5901" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f5adb3b-e9b1-3822-9ebb-c1c84a0d8a73" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="MISRAC2012-RULE_21_7-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="91e45f54-4c6c-377b-8c08-9cccf00651ec" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b258eda5-c5dc-36ef-8b59-6d0afbd3834e" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="3" auth="username" locRef="1" rule="CERT_CPP-ERR62-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="1c9844b3-e619-3bdb-ac64-3da55d0ddd0b" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02409427-a6c5-3434-b87f-9f2ae6c94ce9" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="MISRA2008-18_0_2" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library &lt;cstdlib> shall not be used" tool="c++test" lineHash="212456074" unbViolId="c074aef1-a765-33b8-b1b9-fe4041abe070" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="41981d98-4737-3a29-9b6c-8ce73eee10f9" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="3" auth="username" locRef="1" rule="CERT_C-ERR34-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="608d889d-3a65-3dd8-aa1c-484db496c826" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="536e75d3-0911-3cec-8bc2-be1dc0a1062a" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="3" auth="username" locRef="1" rule="MISRA2004-20_10" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="8088d872-3b09-3d24-8f9f-4c66f3ca02b3" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51d8bb0b-835b-3453-b6b1-084e254dfdba" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="3" auth="username" locRef="1" rule="CERT_C-MSC24-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="1c980a8c-31e2-3e88-9125-f6087d954205" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee2a71ef-f317-3842-8722-5c2e69ed06eb" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="CERT_C-ERR07-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="5099bb32-7019-3807-b087-dab71fd62ba8" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="626358cb-da4f-346d-96c4-aeba1ed9f654" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="AUTOSAR-A18_0_2-b" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="393ae2c9-6f48-3053-9e29-526ddceb6bd6" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a329fc21-7071-3d9c-a24d-64f3bd86b755" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="AUTOSAR-A18_0_2-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="aec92d78-80cd-32fd-a76b-2c8c0cfedc6c" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1cd702a6-5283-35d3-92a6-2c1a8e208562" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="MISRA2012-RULE-21_7" lnHash="212456074" rule.header="The atof, atoi, atol and atoll functions of &lt;stdlib.h> shall not be used" tool="c++test" lineHash="212456074" unbViolId="7016bde5-61e3-38d2-b428-b4a2f313df56" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c1c8bf29-ac7f-3369-837f-b856265c7027" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="JSF-023" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library &lt;stdlib.h> shall not be used" tool="c++test" lineHash="212456074" unbViolId="f1407216-8c4f-3369-88cb-f4c563808a81" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e7f1f3bb-0c95-38c8-8bd6-02297de2391f" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="01bccfca-e8c1-3b36-abf7-6c84d573df90" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6b8c793-ee7e-39aa-a5eb-512429fe96d8" locEndPos="41" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Literal constant '2' is used" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="3" auth="username" locRef="1" rule="JSF-151" lnHash="212456074" rule.header="Numeric values in code will not be used; symbolic values will be used instead" tool="c++test" lineHash="212456074" unbViolId="eef280cb-d217-30c1-99c2-07398527aa40" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="824df158-1bfa-352e-976a-d83d789ba7d6" locEndPos="46" locType="sr" urgent="true" hash="-1257393797" locEndLn="9" goals="1," />
    <StdViol msg="Literal constant '2' is used" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="3" auth="username" locRef="1" rule="CODSTA-26" lnHash="212456074" rule.header="Avoid magic numbers" tool="c++test" lineHash="212456074" unbViolId="d32f40bc-279f-3fb2-9f7b-b764c9127991" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="966a9bb9-3fe8-3fac-9f40-ce501bb1db2f" locEndPos="46" locType="sr" urgent="true" hash="-1257393797" locEndLn="9" goals="1," />
    <StdViol msg="Literal constant '2' is used" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="username" locRef="1" rule="AUTOSAR-A5_1_1-a" lnHash="212456074" rule.header="Avoid magic numbers" tool="c++test" lineHash="212456074" unbViolId="b240eac5-3fa3-3eeb-a194-0c74516663b3" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb50841e-6aa9-3d47-a854-b67aef16bcfc" locEndPos="46" locType="sr" urgent="true" hash="-1257393797" locEndLn="9" goals="1," />
    <StdViol msg="Literal constant '2' is used" ln="9" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="3" auth="username" locRef="1" rule="HICPP-5_1_1-a" lnHash="212456074" rule.header="Avoid magic numbers" tool="c++test" lineHash="212456074" unbViolId="15c17e99-f19b-34ae-b08b-60a73823431e" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc2db46a-cbfe-3f83-bcaf-7c2e25a8ec50" locEndPos="46" locType="sr" urgent="true" hash="-1257393797" locEndLn="9" goals="1," />
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="10" sev="4" auth="username" locRef="1" rule="JSF-043" lnHash="404" rule.header="Tabs should be avoided" tool="c++test" lineHash="404" unbViolId="ca8f9245-2ae3-30f9-b477-51727b30a7de" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab330838-80e9-346b-8741-431c2df595c4" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="10" sev="5" auth="username" locRef="1" rule="FORMAT-01" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="378d2853-75ed-396a-9598-4216d507786b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d5187a0-4ed6-378a-8777-af0f6f3c8e91" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="10" sev="5" auth="username" locRef="1" rule="HICPP-2_1_1-a" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="bdfdcca6-d21c-3439-810a-e3e1b9e4dcb0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8619dee-2f28-3922-b6e6-9515ec03aae2" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="11" sev="4" auth="username" locRef="1" rule="JSF-043" lnHash="1178067846" rule.header="Tabs should be avoided" tool="c++test" lineHash="1178067846" unbViolId="70255cff-d656-3288-ab4f-d35215ed13f1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f57c754a-9529-3d10-a512-91d6a4d45022" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="11" sev="5" auth="username" locRef="1" rule="FORMAT-01" lnHash="1178067846" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1178067846" unbViolId="e8d0db02-430e-31bd-a084-95de209670d9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09e90358-c6c4-384e-a3db-b7ca554af63d" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="11" sev="5" auth="username" locRef="1" rule="HICPP-2_1_1-a" lnHash="1178067846" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1178067846" unbViolId="eaea74bf-c2fd-3a9a-a1e7-57268b3334b2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0620fc5f-95e4-3886-8229-a9a95efa9784" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="11" goals="0," />
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="8" rule="AUTOSAR-A5_3_2-a" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1390236584" lang="cpp" violId="bebe0c56-fda7-303d-a898-4dea5a87337e" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="2" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="27fcb25d-a3a6-3ae9-b6c6-1348a0fbb9a9" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="8" rule="AUTOSAR-M0_3_1-f" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="78528533" lang="cpp" violId="5319c950-7f06-39bd-8dab-26f5a826573a" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="2" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="3e6cbf99-653f-3d57-b286-b47f6afe7d6a" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="8" rule="BD-PB-NP" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="476450621" lang="cpp" violId="e0a12075-8e1c-3944-8eca-b16f32bd27b5" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="beee4ec2-cd7c-3be9-bc76-5c842dc41d7d" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="8" rule="CERT_C-ERR33-c" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2017494553" lang="cpp" violId="b370532d-979a-3ae4-b7a1-45e3c9621b5b" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="69caf4f5-45d9-33a4-86b2-d434d0b5b075" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="8" rule="CERT_C-EXP34-a" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1982312066" lang="cpp" violId="838616cc-ada5-3cfd-9f19-813f1edf365e" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="f9a57413-c220-3fcf-9ece-14c201ff2a74" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="8" rule="CERT_C-MSC19-b" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-799733766" lang="cpp" violId="148cfaa2-d362-3d3c-94fa-910e30337829" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="3" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="2cc87803-b4a5-3e69-bb76-d6d5b3edb107" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="8" rule="CERT_C-POS54-c" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1180988405" lang="cpp" violId="d8c6f66e-24f2-39ab-87c7-5f95342c5c71" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="0db129cb-9926-33b1-a562-c09cf86ba0b9" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="8" rule="CERT_CPP-STR51-a" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1665615379" lang="cpp" violId="f0e1185d-bee0-3951-9a96-a34e0b07bf30" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="9ecca48e-ea4d-3048-b945-463faf381fea" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="8" rule="CWE-476-a" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1747021404" lang="cpp" violId="fbfd9695-1d10-3187-b740-103ce157d2dc" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="f3e6a10c-e4d6-3ffb-a1a3-fb148cf7db1c" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="8" rule="HICPP-5_2_1-c" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-15090486" lang="cpp" violId="98baacd5-168d-3255-a5a1-c9340b543fda" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="e838dabd-e6f5-37e7-a0c1-58ca1fdd74fe" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="8" rule="MISRA2008-0_3_1_b" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="564686231" lang="cpp" violId="6693cb46-1273-3e81-a565-8b4087921e64" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="5" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="df3fc41c-5bf5-325b-ac7a-6cdd03cdbd05" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="8" rule="MISRA2012-DIR-4_1_b" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-2094766674" lang="cpp" violId="760c179d-7e28-3e2d-8eb8-9538a3a212df" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="2" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="abd75426-6552-3eb6-9e04-97001935f2d9" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="8" rule="MISRAC2012-DIR_4_1-b" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1597100009" lang="cpp" violId="5be1d012-7514-3f43-9087-e360c5080436" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="2" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="33bc0e57-e9cb-32ba-8c6e-1bb9200100a9" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="12" sev="4" auth="username" locRef="1" rule="JSF-043" lnHash="0" rule.header="Tabs should be avoided" tool="c++test" lineHash="0" unbViolId="e3bf182b-fded-37c5-bd5f-39b9cc5a27de" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9cb3dc02-c9d8-3288-8c57-96b5048ab4c9" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="12" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="12" sev="5" auth="username" locRef="1" rule="FORMAT-01" lnHash="0" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="0" unbViolId="64bba751-8145-3676-92b6-234418fc7d77" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a82df20c-73ad-3080-89cd-163c87152873" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="12" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="12" sev="5" auth="username" locRef="1" rule="HICPP-2_1_1-a" lnHash="0" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="0" unbViolId="d117865d-59b4-3293-a3b2-3ff6b61cc830" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c2163d2-5c8d-37b3-b65f-6c9550de754c" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="12" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="13" sev="4" auth="username" locRef="1" rule="JSF-043" lnHash="1599597842" rule.header="Tabs should be avoided" tool="c++test" lineHash="1599597842" unbViolId="b5fa44f8-2b0b-3e2f-bda4-cd5343bce07f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e7a33255-62f4-33bd-8e2b-96cd497d2a25" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="13" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="13" sev="5" auth="username" locRef="1" rule="FORMAT-01" lnHash="1599597842" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1599597842" unbViolId="6dbb84cf-f5c6-3c2d-a14b-c7d29d34b94c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21eca00f-aabf-3f95-9cf3-549ac88c4287" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="13" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="13" sev="5" auth="username" locRef="1" rule="HICPP-2_1_1-a" lnHash="1599597842" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1599597842" unbViolId="42d8ea7d-53d1-3f0d-a666-06d460ea0efe" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="532f9e4a-8b79-3ad1-a976-1d63a943c9e7" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="13" goals="0," />
    <StdViol msg="'return' statement should be used with parenthesis" ln="13" locFile="/flowanalysiscpp/NullPointer.cpp" locStartln="13" sev="3" auth="username" locRef="1" rule="FORMAT-25_b" lnHash="1599597842" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="1599597842" unbViolId="d419b4fa-3428-37d8-9f0a-e1e3999dcf05" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85eba56e-edbb-3bf0-acaf-d5ac1cd2b3cc" locEndPos="2" locType="sr" hash="-1257393797" locEndLn="13" goals="0," />
    <StdViol msg="The assertion density is lower than two assertions per function" ln="1" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="1" sev="3" auth="username" locRef="2" rule="METRICS-31" lnHash="329732047" rule.header="The assertion density of the code should average to a minimum of two assertions per function" tool="c++test" lineHash="329732047" unbViolId="5b527ab1-e61d-3fcb-8895-4b5ef785bfcd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71208f0f-5023-3d90-972a-8f55fbff95e6" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="The filename 'DivisionByZero.cpp' should be in lowercase" ln="1" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="1" sev="3" auth="username" locRef="2" rule="NAMING-03" lnHash="329732047" rule.header="Use lowercase for file names" tool="c++test" lineHash="329732047" unbViolId="c245bf55-e79c-3a92-9864-b3423e0466d1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a72b553-c008-368c-aeef-912142e218ae" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'DivisionByZero.cpp' should have the file name extension &quot;.cc&quot;" ln="1" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="1" sev="3" auth="username" locRef="2" rule="NAMING-38" lnHash="329732047" rule.header="Implementation files in C++ always have the file name extension &quot;.cc&quot;" tool="c++test" lineHash="329732047" unbViolId="88acf218-9654-3e24-be8a-493374d68c23" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="50508bf2-451f-3133-9642-72d7cf110a3d" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'DivisionByZero.cpp' should declare a local constant string that begins from characters &quot;@(#)&quot; " ln="1" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="1" sev="5" auth="username" locRef="2" rule="PFO-04" lnHash="329732047" rule.header="Every implementation file should declare a local constant string that describes the file" tool="c++test" lineHash="329732047" unbViolId="c3a8c8ad-27d9-345b-8ee4-f0e5aaca6ee6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4598715-7103-328d-b021-4598b3a58a35" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'DivisionByZero.cpp'" ln="1" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="1" sev="3" auth="username" locRef="2" rule="COMMENT-02" lnHash="329732047" rule.header="Provide copyright information" tool="c++test" lineHash="329732047" unbViolId="dc81665d-c16a-3d3c-a6b3-117aa1c5dc05" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f5edc25-29d6-3059-81a7-b777baef7db1" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'DivisionByZero.cpp'" ln="1" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="1" sev="3" auth="username" locRef="2" rule="JSF-133_b" lnHash="329732047" rule.header="Every source file will contain copyright information" tool="c++test" lineHash="329732047" unbViolId="5e3c38bf-b6dc-3dfc-a5e3-611e2b509ead" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b700045-a540-355a-b3a4-20b721ebf1cb" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'DivisionByZero.cpp'" ln="1" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="1" sev="3" auth="username" locRef="2" rule="COMMENT-03" lnHash="329732047" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="329732047" unbViolId="99d7bf03-6101-3724-aae6-93ad4c8dbeeb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c1f07d3-4c1d-3bf8-97dc-3385fb8a1816" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'DivisionByZero.cpp'" ln="1" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="1" sev="3" auth="username" locRef="2" rule="JSF-133_a" lnHash="329732047" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="329732047" unbViolId="4e351df5-514f-3be8-9d91-0e10d1306f28" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b41b2d5-2288-3848-9a0d-40403446e9b4" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Shapes.hpp&quot;" ln="1" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="1" sev="3" auth="username" locRef="2" rule="JSF-032" lnHash="329732047" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="329732047" unbViolId="ee58a91f-f7ac-356e-9008-8061de4045a8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b6453a6-f813-3eb2-85da-c5bae0c974b7" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Shapes.hpp&quot;" ln="1" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="1" sev="3" auth="username" locRef="2" rule="PREPROC-08" lnHash="329732047" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="329732047" unbViolId="bd97763d-3c69-3988-9694-ad84d5a32531" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ac190b7-b11c-3f23-a7f3-ad66eba91c5f" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;Shapes.hpp&quot;" ln="1" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="1" sev="2" auth="username" locRef="2" rule="PREPROC-09" lnHash="329732047" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="329732047" unbViolId="029d7834-6a15-3356-aebb-167c19b4f437" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9291f3a-1466-381d-b554-df2a604e216a" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;Shapes.hpp&quot;" ln="1" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="1" sev="2" auth="username" locRef="2" rule="JSF-033" lnHash="329732047" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="329732047" unbViolId="3aa17950-a8f9-33c1-a3e4-5d62661070c9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7acc8a26-ec63-3f47-8646-49e58dc6b7e0" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="username" locRef="2" rule="MISRA2008-3_9_2" lnHash="-1572071035" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1572071035" unbViolId="08e9fc3d-6d2e-3057-b2fc-c50fb4501cb7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd75c24e-b6ae-336d-bdc9-b8a3d57d01a0" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="MISRA-013" lnHash="-1572071035" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1572071035" unbViolId="62c2d8bd-8217-3d86-9366-791cb80fcdd4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="761a436b-3646-3886-a1e6-cac78699c64d" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="HICPP-7_1_6-b" lnHash="-1572071035" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-1572071035" unbViolId="233b9eb8-8cef-3b72-9095-0e9845f9ed6a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5cd37e3-6bed-379f-8845-b3c5838b7bd3" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="username" locRef="2" rule="MISRAC2012-DIR_4_6-b" lnHash="-1572071035" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1572071035" unbViolId="6d7ed047-58a7-3d0c-89ea-8f03fc8cf8bb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae543c31-f65c-328a-8aa2-3cfc413503a1" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="MISRA2004-6_3_b" lnHash="-1572071035" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1572071035" unbViolId="911cb4e6-280f-3d3b-b731-a1b69dd48d2c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17221068-e904-3776-bba2-78ed984e78e0" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="username" locRef="2" rule="JSF-209_b" lnHash="-1572071035" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-1572071035" unbViolId="a7a9abf6-6bf1-325c-babe-afa7bb1f77c8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4441beb2-447a-3be6-ab77-5d8283d83c8c" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="username" locRef="2" rule="MISRA2012-DIR-4_6_b" lnHash="-1572071035" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1572071035" unbViolId="0d023aa6-8427-37a4-b454-4a5345e46b70" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a37eeedb-1609-3dcf-9f14-2fb9a83b0f52" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="HICPP-3_5_1-b" lnHash="-1572071035" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1572071035" unbViolId="c3aa9f4c-2194-369d-99bb-0f6c1eb8ec19" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38c5e6ca-42bc-3de0-bf5b-3fe44a771349" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <FlowViol msg="The &quot;shape1&quot; parameter of the &quot;getShapeRatio&quot; function cannot be NULL and should be passed by reference" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" ruleSAFMsg="Function header" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="6" rule="AUTOSAR-A8_4_10-a" FirstElSrcRngStartPos="0" lnHash="-1572071035" ruleSCSCMsg="Point where the parameter is dereferenced" FirstElSrcRngFile="/flowanalysiscpp/DivisionByZero.cpp" rule.header="A parameter shall be passed by reference if it can't be NULL" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-938638073" lang="cpp" violId="b03d49e5-6ccb-3f19-aa37-8979c0002fb6" locEndPos="0" locEndLn="4" goals="0," locStartln="3" sev="2" locRef="2" tool="c++test" lineHash="-1572071035" unbViolId="d4257b02-abfa-3592-82cc-42949f639ee4" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1572071035" locType="sr" srcRnghash="-1665970746" locRef="2" srcRngFile="/flowanalysiscpp/DivisionByZero.cpp" ln="3" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="3" srcRngEndLn="4" desc="double getShapeRatio(Shape* shape1, Shape* shape2)" ElType=".P" rngLn="3">
          <Anns>
            <Ann msg="Function header" kind="point" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" locType="sr" srcRnghash="-1665970746" locRef="2" srcRngFile="/flowanalysiscpp/DivisionByZero.cpp" ln="5" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="5" srcRngEndLn="6" desc="shape1->getArea()" ElType=".C" rngLn="5">
          <Anns>
            <Ann msg="Point where the parameter is dereferenced" kind="cause" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="The &quot;shape1&quot; parameter of the &quot;getShapeRatio&quot; function cannot be NULL and should be passed by reference" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" ruleSAFMsg="Function header" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="6" rule="BD-PB-REFPARAM" FirstElSrcRngStartPos="0" lnHash="-1572071035" ruleSCSCMsg="Point where the parameter is dereferenced" FirstElSrcRngFile="/flowanalysiscpp/DivisionByZero.cpp" rule.header="A parameter shall be passed by reference if it can't be NULL" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1776184541" lang="cpp" violId="bbc81c6d-487b-3a69-b344-792a362e79c0" locEndPos="0" locEndLn="4" goals="0," locStartln="3" sev="3" locRef="2" tool="c++test" lineHash="-1572071035" unbViolId="cbbbbc89-b7fa-3d40-923d-f7ed86d2721d" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1572071035" locType="sr" srcRnghash="-1665970746" locRef="2" srcRngFile="/flowanalysiscpp/DivisionByZero.cpp" ln="3" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="3" srcRngEndLn="4" desc="double getShapeRatio(Shape* shape1, Shape* shape2)" ElType=".P" rngLn="3">
          <Anns>
            <Ann msg="Function header" kind="point" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" locType="sr" srcRnghash="-1665970746" locRef="2" srcRngFile="/flowanalysiscpp/DivisionByZero.cpp" ln="5" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="5" srcRngEndLn="6" desc="shape1->getArea()" ElType=".C" rngLn="5">
          <Anns>
            <Ann msg="Point where the parameter is dereferenced" kind="cause" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="The &quot;shape2&quot; parameter of the &quot;getShapeRatio&quot; function cannot be NULL and should be passed by reference" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" ruleSAFMsg="Function header" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="6" rule="AUTOSAR-A8_4_10-a" FirstElSrcRngStartPos="0" lnHash="-1572071035" ruleSCSCMsg="Point where the parameter is dereferenced" FirstElSrcRngFile="/flowanalysiscpp/DivisionByZero.cpp" rule.header="A parameter shall be passed by reference if it can't be NULL" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1613810146" lang="cpp" violId="a44244b8-3a68-34fa-9d8d-b9521c828e3e" locEndPos="0" locEndLn="4" goals="0," locStartln="3" sev="2" locRef="2" tool="c++test" lineHash="-1572071035" unbViolId="9d2b8b93-bb71-3578-8596-fe9699dbee42" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1572071035" locType="sr" srcRnghash="-1665970746" locRef="2" srcRngFile="/flowanalysiscpp/DivisionByZero.cpp" ln="3" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="3" srcRngEndLn="4" desc="double getShapeRatio(Shape* shape1, Shape* shape2)" ElType=".P" rngLn="3">
          <Anns>
            <Ann msg="Function header" kind="point" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" locType="sr" srcRnghash="-1665970746" locRef="2" srcRngFile="/flowanalysiscpp/DivisionByZero.cpp" ln="5" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="5" srcRngEndLn="6" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <Anns>
            <Ann msg="Point where the parameter is dereferenced" kind="cause" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="The &quot;shape2&quot; parameter of the &quot;getShapeRatio&quot; function cannot be NULL and should be passed by reference" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" ruleSAFMsg="Function header" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="6" rule="BD-PB-REFPARAM" FirstElSrcRngStartPos="0" lnHash="-1572071035" ruleSCSCMsg="Point where the parameter is dereferenced" FirstElSrcRngFile="/flowanalysiscpp/DivisionByZero.cpp" rule.header="A parameter shall be passed by reference if it can't be NULL" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1042079686" lang="cpp" violId="0c007d22-6ed4-34b3-a685-8511cb9db338" locEndPos="0" locEndLn="4" goals="0," locStartln="3" sev="3" locRef="2" tool="c++test" lineHash="-1572071035" unbViolId="aafa3f9e-76fa-36f1-ac2a-d454ff2b9ad4" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1572071035" locType="sr" srcRnghash="-1665970746" locRef="2" srcRngFile="/flowanalysiscpp/DivisionByZero.cpp" ln="3" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="3" srcRngEndLn="4" desc="double getShapeRatio(Shape* shape1, Shape* shape2)" ElType=".P" rngLn="3">
          <Anns>
            <Ann msg="Function header" kind="point" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" locType="sr" srcRnghash="-1665970746" locRef="2" srcRngFile="/flowanalysiscpp/DivisionByZero.cpp" ln="5" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="5" srcRngEndLn="6" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <Anns>
            <Ann msg="Point where the parameter is dereferenced" kind="cause" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="The 'getShapeRatio' function is not used in the testing scope" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="GLOBAL-UNUSEDFUNC" lnHash="-1572071035" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-1572071035" unbViolId="6dab3cc8-3c86-3306-b3ae-5aae355bd624" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="f916e6fa-a22e-39c6-a47d-9cc53d4661b1" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The 'getShapeRatio' function is not used in the testing scope" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="username" locRef="2" rule="AUTOSAR-M0_1_10-a" lnHash="-1572071035" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-1572071035" unbViolId="23411117-f72d-3fa9-8b87-3da1836a113e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="f7675f77-b63a-3813-93cd-e3fb2ebb29fb" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The 'getShapeRatio' function is not used in the testing scope" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="username" locRef="2" rule="MISRA2008-0_1_10_b" lnHash="-1572071035" rule.header="Every defined function with external linkage shall be used" tool="c++test" lineHash="-1572071035" unbViolId="a8220129-1fb9-325e-979a-d70fee5ac7b8" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="ef741d1a-84b7-3336-899e-92551addec62" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The return type of the 'getShapeRatio' function should be declared as 'auto'" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="username" locRef="2" rule="CODSTA-MCPP-08_b" lnHash="-1572071035" rule.header="Prefer 'auto' to explicit type names for function return types" tool="c++test" lineHash="-1572071035" unbViolId="b9ffac9f-cb27-3b99-be7c-183f87333aa0" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2c0ff1d-6cf1-3cdd-8b3b-1b76a93a4947" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="The definition of the 'getShapeRatio' function is not preceded by a comment" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="COMMENT-04" lnHash="-1572071035" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1572071035" unbViolId="a3dd7e11-9457-32b0-b56a-7fa109f08dfd" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="495ae1ee-b9b6-3168-90f5-79dc960b8669" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="The definition of the 'getShapeRatio' function is not preceded by a comment" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="username" locRef="2" rule="JSF-134" lnHash="-1572071035" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1572071035" unbViolId="b4daa1ca-3966-3e75-b440-92d1bcf3c759" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9aff59b5-a3af-359b-9d2a-108c6b0ad518" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="username" locRef="2" rule="OWASP2019-API9-e" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="beea2c89-717a-39da-ab85-0f9ae1edd262" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b0f46b5-c0e1-3c6e-857f-fb2082e33e7d" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="username" locRef="2" rule="AUTOSAR-A3_3_1-a" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="0af4212b-78ef-3536-8403-002e278d7c12" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c8305e9-28cc-3e52-9810-d5f819858f7e" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="username" locRef="2" rule="JSF-137" lnHash="-1572071035" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-1572071035" unbViolId="41c07d14-a5ad-3486-a45c-78d5b7465318" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f464e3f-a84a-358c-8455-737b170f3e93" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="username" locRef="2" rule="MISRA-023" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="c6944da9-3287-3089-84c4-febb06fda7b7" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1651a72b-b525-399c-b34e-c4cfdf9f44a7" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="username" locRef="2" rule="MISRA2008-3_3_1" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="09cbb7f6-e43a-3ecd-971f-cdf767135239" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e0bd4dc-e4c7-38bd-990a-2fc5e6cb0fe1" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="CERT_C-DCL15-a" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="91e9022b-c3cf-3134-adbf-94498ba5f640" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="35e95e25-c0a3-34f7-8be9-420a35ea095c" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="username" locRef="2" rule="MISRA2004-8_10" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="49c2931c-29ef-3675-bc29-0de538225e90" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7396bc7c-780d-3f50-91fd-ad7961e9f1a7" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The name 'getShapeRatio' should be composed only of lowercase letters" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="JSF-051" lnHash="-1572071035" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1572071035" unbViolId="73147bc8-0b03-3e9e-ae52-ae87d83f4a5d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="717a3bad-ccd9-3f13-bf6e-a309fff58caa" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The name 'getShapeRatio' should be composed only of lowercase letters" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="NAMING-44" lnHash="-1572071035" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1572071035" unbViolId="fe5d829f-36cb-3154-848b-f75931ca1d74" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e031295-b66a-3929-84aa-df020bd0343f" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Global function 'getShapeRatio' is declared in global namespace" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="username" locRef="2" rule="JSF-098" lnHash="-1572071035" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-1572071035" unbViolId="c519447f-589a-3165-83ce-8a88a5e8ec3d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0140d44-c11a-35f6-98aa-b87cb8c3485b" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Global function 'getShapeRatio' is declared in global namespace" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="CODSTA-CPP-36" lnHash="-1572071035" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1572071035" unbViolId="18ee3d78-1bce-3184-929e-013bac5388d6" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="308add3b-5931-3e77-adfc-1a8513dcd7da" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Global function 'getShapeRatio' is declared in global namespace" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="username" locRef="2" rule="AUTOSAR-M7_3_1-a" lnHash="-1572071035" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1572071035" unbViolId="3527c736-adf1-3554-8650-99b41b7dc497" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1a7b02f-057a-31bd-8c0a-3ed6f95a78b9" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Global function 'getShapeRatio' is declared in global namespace" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="username" locRef="2" rule="MISRA2008-7_3_1" lnHash="-1572071035" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-1572071035" unbViolId="c2de63e0-d1d8-33bd-a184-c8a7dab96442" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f33ba88a-a4f1-3cff-b3b0-506e16a9dc95" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The 'getShapeRatio' function should be preceded by a comment that contains the '@brief' tag" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="COMMENT-14" lnHash="-1572071035" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1572071035" unbViolId="4251627f-eda0-347c-8046-60cdd8d040f4" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2022678-ea2b-33e0-8b7f-9b77408e5ea8" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The 'getShapeRatio' function should be preceded by a comment that contains the '@brief' tag" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="username" locRef="2" rule="AUTOSAR-A2_7_3-a" lnHash="-1572071035" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1572071035" unbViolId="b0077104-8c60-362c-b9a9-a32c52d9475b" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7cc032a7-f4a2-3398-96d0-791cce92bdde" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The 'shape1' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="COMMENT-14_b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="bd0122c9-d8d1-30e7-8b63-19e83e9f25ad" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="434ce308-d934-377e-b522-d8fd158c72ef" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The 'shape1' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="username" locRef="2" rule="AUTOSAR-A2_7_3-b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="b8eeecce-4ea8-3098-8e04-aff46415e167" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4945a4c-8667-367e-b211-688679d164cb" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The 'shape2' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="COMMENT-14_b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="654ea3b4-07d4-3e54-b54e-eee89066a532" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8f71252-7773-3149-862b-663d469e9144" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The 'shape2' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="username" locRef="2" rule="AUTOSAR-A2_7_3-b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="934e66ff-67fc-3971-aecb-de40c343863b" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8c68b90-fddd-349a-a0a7-8f24d6182066" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The 'getShapeRatio' function should be preceded by a comment that contains the '@return' tag" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="COMMENT-14_b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="10404d04-144f-39b2-a945-5d454280cb3f" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="620edc80-819a-31a6-98dc-8c738141a3a2" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The 'getShapeRatio' function should be preceded by a comment that contains the '@return' tag" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="username" locRef="2" rule="AUTOSAR-A2_7_3-b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="fda94c6d-966f-31c1-a867-6b90bf3732ff" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="33453d3a-792a-31d9-85af-8ed5a40b1c69" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'getShapeRatio'" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="FORMAT-28" lnHash="-1572071035" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-1572071035" unbViolId="2f1f977f-d46d-306c-96ab-531c0fcdf303" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dea0017c-c4f9-3818-b88e-aa33169d5ddc" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Function 'getShapeRatio' has Cyclomatic Complexity value: 1" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="5" auth="username" locRef="2" rule="METRICS-29" lnHash="-1572071035" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-1572071035" unbViolId="746f506d-0ca4-3147-aba4-e0429c0d1dea" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8964cd78-f883-3ea4-9ec1-8308d049aae3" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Function 'getShapeRatio' has Essential Complexity value: 1" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="5" auth="username" locRef="2" rule="METRICS-33" lnHash="-1572071035" rule.header="Report Essential Complexity" tool="c++test" lineHash="-1572071035" unbViolId="bb56f8e6-c0cb-3010-b136-25afba6bd41e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5c096ff-caf9-3cbf-8848-edf1487a7c2d" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Naming convention not followed: getShapeRatio" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="NAMING-17" lnHash="-1572071035" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-1572071035" unbViolId="e72d49f0-91aa-36e9-a21f-c5071b737300" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0c5da9dc-aaa9-3d2c-ae8b-7caacea98ee7" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared: shape1" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="CODSTA-94" lnHash="-1572071035" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1572071035" unbViolId="797fb916-5991-3ae5-9338-c5b8231bfc24" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54404c77-b5dc-35cf-b4a3-67d44374be0e" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The parameter of pointer type is declared: shape1" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="CODSTA-95" lnHash="-1572071035" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1572071035" unbViolId="b430273e-0388-3a81-8d19-091ec4c4f2da" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="57e3c6f4-6442-39e4-a61c-8dd33b3be53e" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Declare parameter 'shape1' as const" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="CERT_C-DCL00-a" lnHash="-1572071035" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1572071035" unbViolId="5f55f6a4-5526-36a6-8e1d-56c1f6c392a2" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0337ad64-0c70-349b-8c59-4ee9ad7c8dc6" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Declare parameter 'shape1' as const" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="username" locRef="2" rule="AUTOSAR-A7_1_1-a" lnHash="-1572071035" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1572071035" unbViolId="548dbbca-287d-32c7-869e-78b87c4b0c43" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b82e4c41-9f84-30dc-9ce6-e366a797e760" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Declare parameter 'shape1' as const" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="username" locRef="2" rule="MISRA2008-7_1_1" lnHash="-1572071035" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="-1572071035" unbViolId="b91c64e0-abc1-3dfc-9f57-584d6cfa54df" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2ee161f-e609-3bde-b486-b7632fc1fa9f" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Declare parameter 'shape1' as const" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="CODSTA-CPP-53" lnHash="-1572071035" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1572071035" unbViolId="e48115e4-af3c-35b4-9773-0f84f2288b23" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e6449bf6-e461-3088-9690-f3194ef1c5f5" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Declare parameter 'shape1' as const" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="HICPP-7_1_2-a" lnHash="-1572071035" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1572071035" unbViolId="986f774e-13b1-3352-aab1-2c4824c1c527" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e57c4be-3ba4-3b62-8093-7ac8dddcd8da" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Parameter 'shape1' is not validated before use" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="CERT_C-API00-a" lnHash="-1572071035" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1572071035" unbViolId="0232d1b2-1466-3fa2-905a-f2043da8b8ed" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f29be12-f97e-338f-8cea-df4ecdd3887f" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Parameter 'shape1' is not validated before use" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="CODSTA-86" lnHash="-1572071035" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1572071035" unbViolId="66ff304a-1f11-321f-ab5b-abeee3c0f050" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d6fe9135-b7e7-37c8-8410-69664897e7e3" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="username" locRef="2" rule="AUTOSAR-M7_1_2-b" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="487e97a4-ef79-37bd-bd19-ed9197c22921" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0cbe4e77-9a7b-3c7a-9f13-15881ad8f992" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="username" locRef="2" rule="MISRAC2012-RULE_8_13-a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="0e1665cc-337e-3f05-87b5-98f415d635ac" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aebcaab7-abc3-379e-82df-f375d967e3c0" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="CERT_C-DCL13-a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="aba97baf-5ae4-330d-a9d7-af99e638ff24" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3bf12de-c6f3-3d63-bd29-1f8acbc8be4c" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="MISRA2004-16_7" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="721c1c76-8427-30a4-89f0-05062fca8590" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="63deb41b-77a8-39e1-ba42-0259e5a377ce" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="username" locRef="2" rule="MISRA2012-RULE-8_13_a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="d96f4bf5-d30e-3980-a786-a80c48908922" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="385ab0c5-3fb8-38c8-96e6-fd93dbec55e1" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="username" locRef="2" rule="JSF-118" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="36820420-a822-3db9-89b0-6aad883fa045" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f6e9022-a969-36b0-ae2b-52bca404a77e" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="username" locRef="2" rule="MISRA2008-7_1_2_a" lnHash="-1572071035" rule.header="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" tool="c++test" lineHash="-1572071035" unbViolId="4e14f33f-9278-371a-a157-99ab7343bfe2" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a45a44e2-318c-3983-b545-e3c71b6f7022" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The 'shape1' identifier should have the 'p' prefix" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="NAMING-HN-34" lnHash="-1572071035" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="-1572071035" unbViolId="67dc4246-7076-3407-b5d6-fe59055a405f" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0e6e98f-5634-341d-9b66-2e172dfd485a" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared: shape2" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="CODSTA-94" lnHash="-1572071035" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1572071035" unbViolId="2627b64b-83dc-345e-b400-5ebe5f4f00c2" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2555638b-1251-3ff1-a5fd-cb7ea61b1d30" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The parameter of pointer type is declared: shape2" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="CODSTA-95" lnHash="-1572071035" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1572071035" unbViolId="fbfec38c-6c7f-3ef6-9657-1ce55e63f6e5" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="009f7ef2-b8ed-3d25-83d9-cc132f55740e" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Declare parameter 'shape2' as const" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="CERT_C-DCL00-a" lnHash="-1572071035" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1572071035" unbViolId="c58d8788-607a-34aa-bd78-86e3672ffdd7" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8945269a-4f37-311f-8d85-cb52ffd4fbec" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Declare parameter 'shape2' as const" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="username" locRef="2" rule="AUTOSAR-A7_1_1-a" lnHash="-1572071035" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1572071035" unbViolId="fe0c7aaa-ea9a-39a9-86e0-88808d48923c" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f7163edc-465b-3ee7-99c5-354d6d61de95" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Declare parameter 'shape2' as const" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="username" locRef="2" rule="MISRA2008-7_1_1" lnHash="-1572071035" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="-1572071035" unbViolId="da4abc83-7ee4-360d-b091-e3873c9260a5" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b731abb-8547-3dfb-af41-bba39c65aff8" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Declare parameter 'shape2' as const" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="CODSTA-CPP-53" lnHash="-1572071035" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1572071035" unbViolId="832b5505-df07-3055-88e1-b75efaaf463b" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7161c9f1-a1e9-3bde-b183-b00a2aeecb45" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Declare parameter 'shape2' as const" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="HICPP-7_1_2-a" lnHash="-1572071035" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1572071035" unbViolId="f27e7981-31c5-3a03-8a0d-a01d349de4cf" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2620f21d-9c7b-3ddf-9610-6ff4d55709de" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Parameter 'shape2' is not validated before use" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="CERT_C-API00-a" lnHash="-1572071035" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1572071035" unbViolId="df00498f-29e9-3496-9cac-871fc172bc37" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e13651a9-f992-3695-b646-31b9de1774f1" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Parameter 'shape2' is not validated before use" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="CODSTA-86" lnHash="-1572071035" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1572071035" unbViolId="a3ccd5be-a30e-3546-baf3-ec637c5a9a52" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2fe1ed00-57e8-3fe8-9579-8bb2733cc78d" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="username" locRef="2" rule="AUTOSAR-M7_1_2-b" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="14d0728f-93f2-3b39-b79b-a9d858887923" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff71d96d-5d35-38d8-beda-1f6e1757b213" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="username" locRef="2" rule="MISRAC2012-RULE_8_13-a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="d61e451c-ae98-3c05-805f-a22e14544216" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="309c8623-8b9e-3eda-a08c-6b53ddd41e16" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="CERT_C-DCL13-a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="a04c86c4-6612-3b51-802f-dad524167e38" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="80bfbffb-e1fa-3173-91fd-39a771ff9488" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="MISRA2004-16_7" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="40f0e022-d9fa-3d06-95f5-f760cd326fdc" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="29e3b20f-2955-33d6-bc93-4cf7d23e89a8" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="username" locRef="2" rule="MISRA2012-RULE-8_13_a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="be60ad8e-30c7-3535-a009-93ac0df712eb" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4165a24b-1461-349d-a5a9-40fe7ae05064" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="username" locRef="2" rule="JSF-118" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="8ea4a762-0811-315f-8d50-c5bb5f95a423" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bafd0f17-b7f4-3fab-8031-117e2daadb0f" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="username" locRef="2" rule="MISRA2008-7_1_2_a" lnHash="-1572071035" rule.header="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" tool="c++test" lineHash="-1572071035" unbViolId="285e970a-0e1e-3acb-9d1b-c60012bcd289" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="46c52914-f966-3a2a-b852-cce59e239c06" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The 'shape2' identifier should have the 'p' prefix" ln="3" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="username" locRef="2" rule="NAMING-HN-34" lnHash="-1572071035" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="-1572071035" unbViolId="726b4ea6-cd9c-37e0-92f2-a7cf951dc87c" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b187558-f8d8-3f97-974a-9b3d53806aed" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="4" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="4" sev="3" auth="username" locRef="2" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="f4a48a72-c611-329c-bd00-e6bf4755e566" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6fc43f08-3b55-38d2-be53-4cc5da622823" locEndPos="1" locType="sr" urgent="true" hash="-1665970746" locEndLn="4" goals="1," />
    <StdViol msg="Non-ascii tab found" ln="5" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="5" sev="4" auth="username" locRef="2" rule="JSF-043" lnHash="2070090220" rule.header="Tabs should be avoided" tool="c++test" lineHash="2070090220" unbViolId="519a7d9d-3113-3639-9fca-b887d6f52439" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1ad392f-e24d-359a-aac5-048a9f8575f7" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="5" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="5" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="5" sev="5" auth="username" locRef="2" rule="FORMAT-01" lnHash="2070090220" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="2070090220" unbViolId="f8aaa776-91c5-3c8e-a426-d64371296239" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90aa9485-bd99-3086-9c01-f3fee1193a3f" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="5" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="5" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="5" sev="5" auth="username" locRef="2" rule="HICPP-2_1_1-a" lnHash="2070090220" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="2070090220" unbViolId="afd861c7-babe-3310-95b9-c3c2368e88ba" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a8c9b9c-29bc-3b79-bcc3-5be92afd70d3" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="5" goals="0," />
    <StdViol msg="'return' statement should be used with parenthesis" ln="5" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="5" sev="3" auth="username" locRef="2" rule="FORMAT-25_b" lnHash="2070090220" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="2070090220" unbViolId="8c2ca701-3ca6-3a0a-ae2f-2687a9607a0c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8c0a1e7-0f65-3001-9c01-1357c958469f" locEndPos="2" locType="sr" hash="-1665970746" locEndLn="5" goals="0," />
    <StdViol msg="floating-point arithmetic is not documented" ln="5" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="5" sev="5" auth="username" locRef="2" rule="MISRA2008-0_4_2" lnHash="2070090220" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="2070090220" unbViolId="0ed9675b-d2b0-33c0-a372-8933e3d81e04" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b60e0b8d-7178-386b-a2f7-b62daa924f61" locEndPos="9" locType="sr" hash="-1665970746" locEndLn="5" goals="0," />
    <StdViol msg="floating-point arithmetic is not documented" ln="5" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="5" sev="3" auth="username" locRef="2" rule="OWASP2019-API9-d" lnHash="2070090220" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="2070090220" unbViolId="473b38ae-dc92-3b1e-a97b-18a36a42827b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ee19778-c734-3668-986a-31f28e7a5960" locEndPos="9" locType="sr" hash="-1665970746" locEndLn="5" goals="0," />
    <StdViol msg="floating-point arithmetic is not documented" ln="5" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="5" sev="3" auth="username" locRef="2" rule="COMMENT-10" lnHash="2070090220" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="2070090220" unbViolId="ecd95b6a-2401-31b9-a83b-29824c395a0c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83c4b630-c0da-356c-b24d-60eefd1cc28e" locEndPos="9" locType="sr" hash="-1665970746" locEndLn="5" goals="0," />
    <StdViol msg="floating-point arithmetic is not documented" ln="5" locFile="/flowanalysiscpp/DivisionByZero.cpp" locStartln="5" sev="2" auth="username" locRef="2" rule="AUTOSAR-M0_4_2-a" lnHash="2070090220" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="2070090220" unbViolId="202b4f52-6592-3e17-9d07-41d8070d5860" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85bd2e95-bff1-388a-80e4-926b01f58f22" locEndPos="9" locType="sr" hash="-1665970746" locEndLn="5" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="1" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="username" locRef="3" rule="PREPROC-18" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be included" tool="c++test" lineHash="1233725276" unbViolId="460ccb7d-1299-3304-91f5-e671c499d494" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0584d572-7105-3ffa-ba3a-2a439fa4ffd5" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="1" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="2" auth="username" locRef="3" rule="JSF-022" lnHash="1233725276" rule.header="The input/output library &lt;stdio.h> shall not be used" tool="c++test" lineHash="1233725276" unbViolId="8179ceb7-a99e-36ad-98e0-a4493d3b38b4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="799ac7c0-a427-3ecd-876e-0dde57cbb37e" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="The assertion density is lower than two assertions per function" ln="1" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="username" locRef="3" rule="METRICS-31" lnHash="1233725276" rule.header="The assertion density of the code should average to a minimum of two assertions per function" tool="c++test" lineHash="1233725276" unbViolId="58b1a00e-4c94-3d66-8416-65189183a110" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa0678e4-a5f1-329a-b95c-6cc237d6e4be" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="The filename 'MemoryLeak.cpp' should be in lowercase" ln="1" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="username" locRef="3" rule="NAMING-03" lnHash="1233725276" rule.header="Use lowercase for file names" tool="c++test" lineHash="1233725276" unbViolId="4da40d5e-bb8d-366a-bcee-6c040f2613ab" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1bdfef3c-f753-3932-99c0-9fe9da39157f" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'MemoryLeak.cpp' should have the file name extension &quot;.cc&quot;" ln="1" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="username" locRef="3" rule="NAMING-38" lnHash="1233725276" rule.header="Implementation files in C++ always have the file name extension &quot;.cc&quot;" tool="c++test" lineHash="1233725276" unbViolId="fc03f7a1-87f7-3c55-ba22-d7980f4805c3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="093030e4-8421-3af1-a621-08603e1b4af5" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'MemoryLeak.cpp' should declare a local constant string that begins from characters &quot;@(#)&quot; " ln="1" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="5" auth="username" locRef="3" rule="PFO-04" lnHash="1233725276" rule.header="Every implementation file should declare a local constant string that describes the file" tool="c++test" lineHash="1233725276" unbViolId="45d0c0c9-b65f-394a-89c9-5dfa0d3891b7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd7263bf-1cb8-3aa6-a8ac-7c903ec10f5c" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdio.h>' the corresponding C++ library header should be used" ln="1" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="2" auth="username" locRef="3" rule="MISRA2008-18_0_1" lnHash="1233725276" rule.header="The C library shall not be used" tool="c++test" lineHash="1233725276" unbViolId="67f18f4e-f2c0-309d-92ad-bd37fe572d6e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5dd12b73-3320-34d7-bd43-ec32695142a3" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdio.h>' the corresponding C++ library header should be used" ln="1" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="username" locRef="3" rule="HICPP-1_3_3-a" lnHash="1233725276" rule.header="The C library shall not be used" tool="c++test" lineHash="1233725276" unbViolId="92ffacb9-8ac8-3291-8655-0be88609855f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91279ffb-7a07-333b-89d0-06561b431b21" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdio.h>' the corresponding C++ library header should be used" ln="1" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="2" auth="username" locRef="3" rule="AUTOSAR-A18_0_1-a" lnHash="1233725276" rule.header="The C library shall not be used" tool="c++test" lineHash="1233725276" unbViolId="466f934f-bffb-300c-bf44-febd293e631f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="325b7ab5-5505-3fbe-bf82-c1bfe950982c" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdio.h>' the corresponding C++ library header should be used" ln="1" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="username" locRef="3" rule="CODSTA-CPP-59" lnHash="1233725276" rule.header="The C library shall not be used" tool="c++test" lineHash="1233725276" unbViolId="f1e54266-6f80-3a1e-8059-3e07d188ef97" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6d13330d-de14-3f4b-a19b-673dcebfc429" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdio.h>' the corresponding C++ library header should be used" ln="1" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="2" auth="username" locRef="3" rule="AUTOSAR-A1_1_1-d" lnHash="1233725276" rule.header="The C library shall not be used" tool="c++test" lineHash="1233725276" unbViolId="8b5e4662-f650-3c71-841a-4024d4ab3c14" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c30fd9e0-539d-372d-bc46-4a4bf3d476c5" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'MemoryLeak.cpp'" ln="1" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="username" locRef="3" rule="COMMENT-02" lnHash="1233725276" rule.header="Provide copyright information" tool="c++test" lineHash="1233725276" unbViolId="48c1ef67-b88d-3bda-a794-6702b33330cf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23c0195d-462f-3907-8239-c7b91617b5e1" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'MemoryLeak.cpp'" ln="1" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="username" locRef="3" rule="JSF-133_b" lnHash="1233725276" rule.header="Every source file will contain copyright information" tool="c++test" lineHash="1233725276" unbViolId="1c7fd9ed-d827-3454-8579-0eac6ed362eb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee41e5c7-a4ff-3e14-9ac0-9a5e29a0d66c" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'MemoryLeak.cpp'" ln="1" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="username" locRef="3" rule="COMMENT-03" lnHash="1233725276" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="1233725276" unbViolId="36fa05d0-011e-3484-978a-304e67cfe034" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ad41d07-a6b5-3b99-9320-c91ef9ecca70" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'MemoryLeak.cpp'" ln="1" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="username" locRef="3" rule="JSF-133_a" lnHash="1233725276" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="1233725276" unbViolId="36a887aa-4537-37db-bfa4-55bc80a28a60" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f343e13-8f83-3b63-8e1a-98dc57014a05" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Ensure that C Standard Library is securely used" ln="1" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="4" auth="username" locRef="3" rule="HICPP-17_2_1-a" lnHash="1233725276" rule.header="Wrap use of the C Standard Library" tool="c++test" lineHash="1233725276" unbViolId="7356508d-08ad-3a78-a578-0325c4f440e9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ddcb8215-fd9d-360a-b13e-69f434b89673" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="1" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="2" auth="username" locRef="3" rule="AUTOSAR-M27_0_1-a" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be used" tool="c++test" lineHash="1233725276" unbViolId="83e3db20-c862-3dd5-a224-bba44ea0cbba" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3fc951df-ac2c-396b-be81-ada00ab80853" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="1" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="2" auth="username" locRef="3" rule="MISRA2008-27_0_1" lnHash="1233725276" rule.header="The stream input/output library &lt;cstdio> shall not be used" tool="c++test" lineHash="1233725276" unbViolId="534d74e1-0880-3167-9337-9120033dc691" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17b84f7e-1f50-307e-8022-ce487f08c00f" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="1" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="username" locRef="3" rule="MISRA2004-20_9" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be used" tool="c++test" lineHash="1233725276" unbViolId="b25bb153-228d-31d9-93f0-6efa5c8bfa2b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a803eb5-58eb-35b4-9843-8fb30ef1c5ee" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Type 'IOException' is declared in global namespace" ln="3" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="4" auth="username" locRef="3" rule="JSF-098" lnHash="-738024550" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-738024550" unbViolId="985230d0-45f6-3d25-9809-a741d1440316" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8d4f898-241a-315b-acdb-326fa82dc6a6" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Type 'IOException' is declared in global namespace" ln="3" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="username" locRef="3" rule="CODSTA-CPP-36" lnHash="-738024550" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-738024550" unbViolId="f8c79178-6856-364e-aa21-6fb05a10b2b0" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bacb0197-d560-322e-92a2-775237c501a3" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Type 'IOException' is declared in global namespace" ln="3" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="2" auth="username" locRef="3" rule="AUTOSAR-M7_3_1-a" lnHash="-738024550" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-738024550" unbViolId="84ba4bca-7078-34f7-8f58-f5d831e39bd3" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6967ee33-06db-3007-8889-442c6d6f3661" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Type 'IOException' is declared in global namespace" ln="3" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="2" auth="username" locRef="3" rule="MISRA2008-7_3_1" lnHash="-738024550" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-738024550" unbViolId="97be6b3e-efd2-3f82-b64f-8c947b3151af" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b1548318-3588-32d0-a6d9-cd9d1edebdf1" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="The declaration of the 'IOException' type should be preceded by a comment that contains the '@brief' tag" ln="3" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="username" locRef="3" rule="COMMENT-14" lnHash="-738024550" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-738024550" unbViolId="88cdf642-32d4-3e26-8823-fef82c196a4c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a42f95b8-fca5-30a7-b04b-b3fe9a9f1ef3" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="The declaration of the 'IOException' type should be preceded by a comment that contains the '@brief' tag" ln="3" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="2" auth="username" locRef="3" rule="AUTOSAR-A2_7_3-a" lnHash="-738024550" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-738024550" unbViolId="438c0123-970a-38b6-978c-39519a716847" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0cf1a79c-ff9d-329e-97fd-d5cc628ef4c9" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Class 'IOException' does not define any constructors" ln="3" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="2" auth="username" locRef="3" rule="CODSTA-CPP-19" lnHash="-738024550" rule.header="Declare at least one constructor to prevent the compiler from doing so" tool="c++test" lineHash="-738024550" unbViolId="399ffc48-1ca8-3c82-a8e3-023e6c87c1ce" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="29ef3d6f-b94a-3061-b6ce-47c39f2cb0a9" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Class 'IOException' should be final" ln="3" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="4" auth="username" locRef="3" rule="AUTOSAR-A12_4_2-a" lnHash="-738024550" rule.header="If a public destructor of a class is non-virtual, then the class should be declared final" tool="c++test" lineHash="-738024550" unbViolId="fa24d382-5075-37c0-9752-7b52ec0c6d8a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97f82bb9-6a15-3d04-89f8-7bb4cb4f5c84" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Class 'IOException' should be final" ln="3" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="username" locRef="3" rule="CODSTA-MCPP-23" lnHash="-738024550" rule.header="If a public destructor of a class is non-virtual, then the class should be declared final" tool="c++test" lineHash="-738024550" unbViolId="a6547a4d-ab10-351b-ab3a-89e1c53ef0a7" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7bce8bcd-92eb-3d9e-b4dc-855823cbd7aa" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Explicitly declare default constructor in 'IOException'" ln="3" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="username" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="572ecd41-8289-38b8-af45-de0c756b227a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="638c45f5-f1da-3115-b961-452794e83955" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Explicitly declare destructor in 'IOException'" ln="3" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="username" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="4f7de1aa-9d8d-3329-b541-e1008802c9e1" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8650e2d8-6d54-3ef0-abfc-e465718b8bd5" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Explicitly declare copy assignment operator in 'IOException'" ln="3" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="username" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="d22b1133-4a5d-370f-a65e-679f1c1451a9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cc89da4d-e180-3ede-998a-0b7f513dc85e" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Explicitly declare move assignment operator in 'IOException'" ln="3" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="username" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="c3efc10b-c54f-30cd-ad8c-7d45853e506b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="86a32ee7-577e-371b-abad-d3be7faabba5" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Explicitly declare copy constructor in 'IOException'" ln="3" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="username" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="2b3e0947-0c2f-31ac-bf0d-7fdc91ee0d24" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22716ca1-f945-3145-899b-3e60c22577f0" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Explicitly declare move constructor in 'IOException'" ln="3" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="username" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="98c2c019-ab2d-39b2-9e3c-9a15808a370a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c829ba46-a447-39d5-8bc7-478df04930d4" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Class 'IOException' missing assignment operator or special comment" ln="3" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="username" locRef="3" rule="MRM-04" lnHash="-738024550" rule.header="All classes should contain the assignment operator or appropriate comment" tool="c++test" lineHash="-738024550" unbViolId="ab329504-e1c0-399e-994d-308db428c958" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a9e6501-b1be-31a0-8718-dcf92aa69d06" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Class 'IOException' missing copy constructor or special comment" ln="3" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="username" locRef="3" rule="MRM-05" lnHash="-738024550" rule.header="All classes should contain the copy constructor or appropriate comment" tool="c++test" lineHash="-738024550" unbViolId="de984e78-06fe-3902-a1ea-72cdbf618c63" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3585c16-dd51-3c79-b552-d80d302453cc" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="All letters beside the first one in name 'IOException' should be lowercase" ln="3" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="username" locRef="3" rule="NAMING-40" lnHash="-738024550" rule.header="Only the first word of the name of a class, structure, namespace, enumeration, or typedef will begin with an uppercase letter" tool="c++test" lineHash="-738024550" unbViolId="243f6702-90e8-3bfd-ab67-81e189045363" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9cf365cd-4b31-36ad-b98d-db60dc0d217f" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="The 'IOException' identifier should have the 'C' prefix" ln="3" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="username" locRef="3" rule="NAMING-HN-19" lnHash="-738024550" rule.header="Hungarian notation for class declaration" tool="c++test" lineHash="-738024550" unbViolId="aea2c3e4-5f56-3140-8851-530d6391f5b1" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="426af30b-9dd0-34ca-9ca5-fef70e4cb5c7" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="username" locRef="3" rule="MISRA2008-3_9_2" lnHash="-1086168919" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="0ca2fc16-9609-397d-81d9-dca93978d4a3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e615a88-9ffa-3533-a6a7-4c35cd8ad0b9" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="MISRA-013" lnHash="-1086168919" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1086168919" unbViolId="40507d53-b846-307a-bb72-4c14a3c46743" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="afcc2a8f-3b95-3ef6-8bac-cd9903507951" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="CODSTA-223" lnHash="-1086168919" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="2a444247-49a1-34f0-8a5d-2ae1ff00ef22" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="efb95717-d0e7-3055-96ad-6fce1f6a6f05" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="username" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="-1086168919" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="3fc79ed2-2b42-3980-bb74-2eecb0fd4aab" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6cca8878-f398-3c9e-abcd-e5706f3cf5e3" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="HICPP-7_1_6-b" lnHash="-1086168919" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-1086168919" unbViolId="743b4966-5699-3eb4-8062-d8bb9327da72" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb278fce-cc3b-3bcc-8275-d38d865c39fb" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="username" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="3dd8d874-421f-3d57-ab7c-db8b62bfda22" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="679c32ff-3482-3fce-b7c6-77a6b039283f" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="MISRA2004-6_3_b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="d52e6482-7494-309b-8e04-3eea383f825f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3314b6d0-5c4d-3fca-a3a4-b6ec6badcbe8" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="username" locRef="3" rule="JSF-209_b" lnHash="-1086168919" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="f9b8726c-210f-3b90-902a-3e9be6479847" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1627be81-4c6a-3e9b-b9e3-c24251f59d76" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="username" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="a867ab89-46cf-3059-8846-d0b8571032a3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a2eefe2a-f0e3-3267-b40a-b6e7d1ad4ee6" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="HICPP-3_5_1-b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="6ca9bebd-43fa-3a27-98f4-0f5d9cac310f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05f04944-9ee1-3ec4-bf5e-86ae87e75fcb" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The return type of the 'readIntegerArray' function should be declared as 'auto'" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="username" locRef="3" rule="CODSTA-MCPP-08_b" lnHash="-1086168919" rule.header="Prefer 'auto' to explicit type names for function return types" tool="c++test" lineHash="-1086168919" unbViolId="9fdf3e1c-ef07-309c-af02-139a54fa65a0" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="63acedcb-ffc9-3262-bb85-926a34538323" locEndPos="6" locType="sr" urgent="true" hash="1013754779" locEndLn="5" goals="1," />
    <StdViol msg="The definition of the 'readIntegerArray' function is not preceded by a comment" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="COMMENT-04" lnHash="-1086168919" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1086168919" unbViolId="cd19020c-d124-3fbf-a847-b4525f7d51aa" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="743c2bcc-e2a2-3c95-9746-86a9f254155c" locEndPos="6" locType="sr" urgent="true" hash="1013754779" locEndLn="5" goals="1," />
    <StdViol msg="The definition of the 'readIntegerArray' function is not preceded by a comment" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="username" locRef="3" rule="JSF-134" lnHash="-1086168919" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1086168919" unbViolId="855f6864-e06f-3e2e-ae7c-e3c7b82ecb2e" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9efbe2b-28b8-3270-8e7d-0a6d0246b6f8" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="username" locRef="3" rule="OWASP2019-API9-e" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="d7068c62-e062-3f4d-9182-a51ca3811806" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="207b2369-2ae1-3489-95b4-c4739c6f944a" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="username" locRef="3" rule="AUTOSAR-A3_3_1-a" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="3bd49232-20f6-3f3f-ae84-a05ec0a43298" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de890e08-ff34-3649-8d50-495c77e8f25d" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="username" locRef="3" rule="JSF-137" lnHash="-1086168919" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-1086168919" unbViolId="fdc9475d-b5f5-3586-bb45-d2df39b0c770" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ff59965-10d4-377b-b64c-7d9b81f7833f" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="username" locRef="3" rule="MISRA-023" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="d2974f9e-d709-344b-962b-3caf60c8589f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="780998b5-a419-3398-a2a6-1d4e8ac63ba4" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="username" locRef="3" rule="MISRA2008-3_3_1" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="e497beaa-5873-36da-930e-7b57f3878bfc" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0efcc695-ee95-3e27-8bf0-e22e3d153151" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="CERT_C-DCL15-a" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="37c46a30-058c-3c77-bf78-cf3cb2c1d24f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd2e2cd3-bba1-3ca9-9e9e-1cd6c2c8b1c3" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="username" locRef="3" rule="MISRA2004-8_10" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="3910f1bc-8b79-3f5c-9693-e690ebd591f4" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b7fd4ba-7dbb-3cfa-befa-561bef1d6e7f" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The name 'readIntegerArray' should be composed only of lowercase letters" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="JSF-051" lnHash="-1086168919" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1086168919" unbViolId="55d38283-e936-38c0-92f8-0ad9a256b673" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55d8630a-a87a-3c6f-ab6b-a4916defe751" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The name 'readIntegerArray' should be composed only of lowercase letters" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="NAMING-44" lnHash="-1086168919" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1086168919" unbViolId="2e600c97-33bb-331c-985c-aa9e7d3f61ea" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0abdc8fa-63b3-34c8-8ea3-440e4329a862" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Global function 'readIntegerArray' is declared in global namespace" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="username" locRef="3" rule="JSF-098" lnHash="-1086168919" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-1086168919" unbViolId="49bbccd7-b0a9-3192-aefa-3602bcbc4713" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3f17638-ce63-3d35-90f9-558d81f41696" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Global function 'readIntegerArray' is declared in global namespace" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="CODSTA-CPP-36" lnHash="-1086168919" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1086168919" unbViolId="319d39cf-16c0-3908-ac5e-a8c4eb77afea" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77ff0776-7641-30d9-bd45-3917cf279013" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Global function 'readIntegerArray' is declared in global namespace" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="username" locRef="3" rule="AUTOSAR-M7_3_1-a" lnHash="-1086168919" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1086168919" unbViolId="1cb53cb9-1e89-3879-98ba-a8cd637b1fa1" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0530b03-725f-33db-806a-5c51d1124da8" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Global function 'readIntegerArray' is declared in global namespace" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="username" locRef="3" rule="MISRA2008-7_3_1" lnHash="-1086168919" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-1086168919" unbViolId="d13b2b06-497a-3d5c-aaf9-60f039963b01" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09b67c0b-c37a-36f1-8b71-b660efb7e26d" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' returns a pointer type" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="CODSTA-94" lnHash="-1086168919" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1086168919" unbViolId="88a085b8-c522-39ac-bd2c-99c38569e7ee" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2502eb73-bf79-3e4f-bcdc-62459d0477dc" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' returns a pointer type" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="CODSTA-95" lnHash="-1086168919" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1086168919" unbViolId="e6057967-7dd7-3640-8df3-7886a345787f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d4811e2-9be8-3779-88e0-d6d1f1228c5e" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'readIntegerArray' function should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="COMMENT-14" lnHash="-1086168919" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1086168919" unbViolId="79602cc3-fe0f-3372-a644-e399637e0d48" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f46872ca-a787-3f8a-beb5-61ea9314e599" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'readIntegerArray' function should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="username" locRef="3" rule="AUTOSAR-A2_7_3-a" lnHash="-1086168919" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1086168919" unbViolId="80a77a3f-977b-3122-90a0-104803446fb2" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f81bfb0-653e-3e8a-b7dd-3ece569ca9f4" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'file' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="COMMENT-14_b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="9cb86d2d-7da1-3f98-8d9c-53815947a3ca" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bbe60d61-4765-3667-90bb-3a080ea7ffcd" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'file' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="username" locRef="3" rule="AUTOSAR-A2_7_3-b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="997f9265-bbf6-3f44-99c0-0277c56eb280" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0739dbf4-10ef-31c9-9170-6d32384b4c49" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'pSize' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="COMMENT-14_b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="c4f8b941-55eb-3059-9000-861e3492894c" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1763f6f3-9ee7-39ca-afa4-03db41fecd0e" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'pSize' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="username" locRef="3" rule="AUTOSAR-A2_7_3-b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="ed83d7bb-f1b2-3c20-9813-9601e84e77ca" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="89e88f20-6c65-3918-9eaa-a73a3b7d4808" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'readIntegerArray' function should be preceded by a comment that contains the '@return' tag" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="COMMENT-14_b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="2f06f03d-b265-35d3-84c5-087f1e24617d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84d4f1ce-225e-3de3-acc7-c74acab35585" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'readIntegerArray' function should be preceded by a comment that contains the '@return' tag" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="username" locRef="3" rule="AUTOSAR-A2_7_3-b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="7c87e720-d11d-30e7-a96d-c2c1dcfdafe5" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ac0f853-5377-3a0a-8d8b-c796f222c18b" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'readIntegerArray'" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="FORMAT-28" lnHash="-1086168919" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-1086168919" unbViolId="c5fd6486-ccec-3286-abea-c437c1f61854" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2fbdd279-0a4b-35e5-985d-f8610dfe3ba7" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' has Cyclomatic Complexity value: 3" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="5" auth="username" locRef="3" rule="METRICS-29" lnHash="-1086168919" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-1086168919" unbViolId="0c64623e-8268-3f36-abd1-0cf56fb93abd" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a09d3b94-e961-3745-ad67-d67b2edb167b" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' has Essential Complexity value: 1" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="5" auth="username" locRef="3" rule="METRICS-33" lnHash="-1086168919" rule.header="Report Essential Complexity" tool="c++test" lineHash="-1086168919" unbViolId="18a2f568-066c-3fea-a759-f36156a38fff" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9376eb28-0ce7-3d08-a233-343c9647e7fa" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Naming convention not followed: readIntegerArray" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="NAMING-17" lnHash="-1086168919" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-1086168919" unbViolId="f2fb9551-aaa6-3ed6-b22d-e4ebc14ed01f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e548f98-03de-3c89-a7d6-3e28554844a5" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'readIntegerArray' function is not used in the testing scope" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="GLOBAL-UNUSEDFUNC" lnHash="-1086168919" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-1086168919" unbViolId="9221ed08-acd9-3e58-a7c7-7cd952c42b02" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="0928fbd3-e2aa-3080-9d76-50c5ce091b2c" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'readIntegerArray' function is not used in the testing scope" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="username" locRef="3" rule="AUTOSAR-M0_1_10-a" lnHash="-1086168919" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-1086168919" unbViolId="020666ea-6044-38f8-ba58-9159aa4ede02" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="8466a36a-7aa4-3cb2-80ed-6ce5bc49bb2b" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'readIntegerArray' function is not used in the testing scope" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="username" locRef="3" rule="MISRA2008-0_1_10_b" lnHash="-1086168919" rule.header="Every defined function with external linkage shall be used" tool="c++test" lineHash="-1086168919" unbViolId="f8accdfe-eb57-3492-ad98-ab713a5d2db2" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="3ace73a0-3fd0-3f09-92b6-8ab4b986e173" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The identifier 'file' differs only by case from identifier 'FILE' declared in file 'stdio.h'" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="NAMING-45" lnHash="-1086168919" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-1086168919" unbViolId="705bf04f-df99-306e-b739-c374edde7f05" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3956caa-336b-35c7-9de5-2554cf9fa68b" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The identifier 'file' differs only by case from identifier 'FILE' declared in file 'stdio.h'" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="JSF-048" lnHash="-1086168919" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-1086168919" unbViolId="f98249cf-c165-3929-bc4b-7afc40c4766e" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf4329ce-89b7-38f3-b2f1-de8ee971ddde" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared: file" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="CODSTA-94" lnHash="-1086168919" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1086168919" unbViolId="ed283594-1330-3e1e-9314-3a4043dcbfaa" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24552f7b-f34c-3f5c-8820-f33bf39a7d33" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The parameter of pointer type is declared: file" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="CODSTA-95" lnHash="-1086168919" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1086168919" unbViolId="0dfc6527-c20a-3045-9192-d974063e176c" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75a29660-c211-36d1-8ca3-0a4210bbaba7" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Identifier name: 'file' differs only by case from its type name: 'FILE'" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="username" locRef="3" rule="MISRA2008-2_10_1" lnHash="-1086168919" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-1086168919" unbViolId="9e0f5633-111b-311a-8573-2e6d474024fd" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="32604668-e5f8-33bd-8098-28f5b36678c9" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Identifier name: 'file' differs only by case from its type name: 'FILE'" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="HICPP-2_4_1-a" lnHash="-1086168919" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-1086168919" unbViolId="7caa186c-fc50-36d7-8678-97f78f5654b6" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb09acfc-131a-3a7a-ba0b-28c6cc468954" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Identifier name: 'file' differs only by case from its type name: 'FILE'" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="username" locRef="3" rule="AUTOSAR-M2_10_1-a" lnHash="-1086168919" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-1086168919" unbViolId="55fff4f1-3917-3bcb-91a7-c6bb06ef0b24" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f83aaa3-cbee-3bf7-8597-b1c913ead0dd" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Identifier name: 'file' differs only by case from its type name: 'FILE'" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="NAMING-47" lnHash="-1086168919" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-1086168919" unbViolId="be5c098a-02d4-3bba-8aa1-4b1a83fac8e4" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7cacca71-1362-37d2-a7a2-147b40b0ae4e" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'file' as const" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="CERT_C-DCL00-a" lnHash="-1086168919" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1086168919" unbViolId="e12b3330-7b0c-3e01-b285-47264530d05b" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21a2d352-1236-397f-bba8-13c975441794" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'file' as const" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="username" locRef="3" rule="AUTOSAR-A7_1_1-a" lnHash="-1086168919" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1086168919" unbViolId="2fd8b452-4aa7-3825-981e-1f400b7289db" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2f39ea1-1001-3d99-baf1-93b74445ffcf" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'file' as const" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="username" locRef="3" rule="MISRA2008-7_1_1" lnHash="-1086168919" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="-1086168919" unbViolId="e9e1eb14-ec5c-3157-a580-056d535d2be8" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3feaebfc-bd60-37de-a6c8-8da76b7d325c" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'file' as const" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="CODSTA-CPP-53" lnHash="-1086168919" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1086168919" unbViolId="ab779865-e218-3ed0-8d55-4e023cb58692" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e72e2cdd-ce2c-3cc3-abbd-f0cc95ef425d" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'file' as const" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="HICPP-7_1_2-a" lnHash="-1086168919" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1086168919" unbViolId="b0f33816-19c4-3e1c-8940-ec5e6f9ec717" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="616aa19a-f973-3fbe-8c89-ffe81f595763" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Parameter 'file' is not validated before use" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="CERT_C-API00-a" lnHash="-1086168919" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1086168919" unbViolId="9fa30d86-b251-3685-92d7-d67d75e30680" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="46abc37d-6b77-3640-98aa-e18590927f0d" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Parameter 'file' is not validated before use" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="CODSTA-86" lnHash="-1086168919" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1086168919" unbViolId="bf21f23a-f7e7-3b51-9ab4-7fe73736cde9" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="508a53c7-2369-362b-8aaf-f52229246e0f" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'file' identifier should have the 'p' prefix" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="NAMING-HN-34" lnHash="-1086168919" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="-1086168919" unbViolId="825a1838-78c9-31ea-bb93-2232f130de71" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0a86d0b-e831-3f8c-ba40-0cff78c63a5d" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="username" locRef="3" rule="MISRA2008-3_9_2" lnHash="-1086168919" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="04e5cd89-d040-3fa1-ab14-daa645c753c0" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03aa0f52-6a94-3172-b7d1-a7422ce85f49" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="MISRA-013" lnHash="-1086168919" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1086168919" unbViolId="8f840e8f-069d-34f0-9bee-41d372bc0a33" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a2e57b03-62f2-3f71-b8cc-6ca77f6063a5" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="CODSTA-223" lnHash="-1086168919" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="3ba2cfcc-c4c5-3674-a3d8-b3d5b93919e0" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8944b50f-0959-3d8f-a739-398a5c5eff83" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="username" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="-1086168919" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="ae66016a-3fe1-3c2c-83c7-ee7fd99d4df7" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c0757f3-cd48-3eff-b3ec-e4efc6e5e5b9" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="HICPP-7_1_6-b" lnHash="-1086168919" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-1086168919" unbViolId="b227a6c0-71d5-3040-880c-ebaa5ba1efad" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8b29002-f1be-33ce-980c-490bb771db28" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="username" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="b61ebe31-e6d5-3b4d-8e34-2171559a0585" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f809495-2339-34e7-8b23-e9bbfca7b42e" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="MISRA2004-6_3_b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="b8ce13fb-d63c-32b3-9591-f2d4cc95283c" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9fec9da3-865f-3c44-9a18-d0c8e090139f" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="username" locRef="3" rule="JSF-209_b" lnHash="-1086168919" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="e7b0db1f-2f21-3c25-b38e-ee63bbe9179c" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12597571-fc84-37a4-976d-cb0c949a245f" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="username" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="9e213fa8-9acf-3081-be13-d9e0edf3a6d4" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5708bd50-cb93-36cc-91ac-fd27c68321bb" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="HICPP-3_5_1-b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="fd689861-989c-38ef-ba98-b73665a78f9f" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f0993e2-8257-3327-b214-b432e6fb5bf3" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared: pSize" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="CODSTA-94" lnHash="-1086168919" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1086168919" unbViolId="00e6d3ca-cbe4-30df-96cf-af945af3981e" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a34c89ac-787b-3109-8fe2-ec0821866194" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The parameter of pointer type is declared: pSize" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="CODSTA-95" lnHash="-1086168919" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1086168919" unbViolId="dab9f1b6-c592-3552-be85-d943a47a2046" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1914a512-8ace-363b-adb2-769289aa4ffe" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Parameter 'pSize' is not validated before use" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="CERT_C-API00-a" lnHash="-1086168919" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1086168919" unbViolId="296b5ee9-4517-39aa-8117-b9a8aef0d5e4" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16f859ff-cd9a-343e-b7a6-6affb4e30c71" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Parameter 'pSize' is not validated before use" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="CODSTA-86" lnHash="-1086168919" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1086168919" unbViolId="a8b824e1-8e8b-3dea-a36d-8c41bfc3cdad" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="831af1ab-0bd2-369d-a96b-fff6e5323ed7" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="username" locRef="3" rule="AUTOSAR-M7_1_2-b" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="f8b47a3b-3767-3d83-88bf-cb290fa9f130" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c93d7b34-7904-39b3-8d8e-0a6ccd5cb0fd" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="username" locRef="3" rule="MISRAC2012-RULE_8_13-a" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="3a630f93-5dde-3834-a7ac-023bf1c93940" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13aa7cbb-74c2-3ef1-a8a3-c4222b7e1b5d" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="CERT_C-DCL13-a" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="6018cd8c-83bc-3a4c-b48e-d99cd3baea41" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed42c176-259b-3169-afb2-fd1ad8834f8f" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="MISRA2004-16_7" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="53bc9a7d-c6a9-3a77-a5ef-6fc297b6c69b" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1db7981e-03a0-3949-ae0f-b9ebda8ac148" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="username" locRef="3" rule="MISRA2012-RULE-8_13_a" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="723a177d-7325-3b9b-8605-368dbe29d0aa" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1fc4821a-dfd2-3c3c-a29e-7fbbcaa876b9" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="username" locRef="3" rule="JSF-118" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="fe4d0f27-d844-344a-bd92-5728e5668d28" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7dce3281-0342-3653-b1ca-6ad3b81aa3d9" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="username" locRef="3" rule="MISRA2008-7_1_2_a" lnHash="-1086168919" rule.header="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" tool="c++test" lineHash="-1086168919" unbViolId="91a954b3-5050-3d07-a942-e993618fc9f2" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="545437f0-98a4-3a96-a2c9-56ab2d06bd03" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'pSize' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="NAMING-HN-23" lnHash="-1086168919" rule.header="Hungarian notation for int pointer, array, or reference types" tool="c++test" lineHash="-1086168919" unbViolId="95da7555-c6a3-362a-b966-689d35f390ba" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54cb47a4-5e02-3bdd-a5d1-c980c119fac3" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'pSize' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="NAMING-HN-31" lnHash="-1086168919" rule.header="Hungarian notation for int pointer, array, or reference types" tool="c++test" lineHash="-1086168919" unbViolId="f9bd53a6-4eed-311a-ade9-f9ea2b68cc3b" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03ed8c1f-5285-3471-811d-0992fcd2c170" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'pSize' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="username" locRef="3" rule="NAMING-HN-44" lnHash="-1086168919" rule.header="Hungarian notation for word pointer, array, or reference types" tool="c++test" lineHash="-1086168919" unbViolId="809c7b43-6c61-335e-98d0-f7333274b571" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a4a00ecf-e221-3384-900d-5f4353b0e384" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="6" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="6" sev="3" auth="username" locRef="3" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="64375c25-da9a-3919-99d2-575ed56ef110" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4bd73e2-b4e6-38dc-b81e-0309966d5de5" locEndPos="1" locType="sr" hash="1013754779" locEndLn="6" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="4" auth="username" locRef="3" rule="JSF-043" lnHash="-1844934654" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1844934654" unbViolId="891e5c77-a704-358a-bef9-9102b242b6c2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6726437e-12a8-3d35-b373-eb0b440174af" locEndPos="1" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="5" auth="username" locRef="3" rule="FORMAT-01" lnHash="-1844934654" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="b4ab455c-7d52-38a9-832f-df38fd18a833" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2e2f280-cede-3a33-8978-96bd875be449" locEndPos="1" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="5" auth="username" locRef="3" rule="HICPP-2_1_1-a" lnHash="-1844934654" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="1ad66a56-9c4e-3820-a8c0-8d638883eaf5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c53ce89-cf8f-3378-a298-5a5d59cadad6" locEndPos="1" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_21_6-a" lnHash="-1844934654" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="448c449a-e3cd-320d-8a79-f1b85be5b3f9" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ce403dc-ec41-3707-bb84-62e99937d7e2" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-21_6" lnHash="-1844934654" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="6609d60a-7c6b-3ec4-918f-b37de906b976" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d06b0c41-8606-3db6-81f0-63c7e9a3df54" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="username" locRef="3" rule="CERT_C-ERR02-a" lnHash="-1844934654" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="45baba35-8462-3d7e-9adf-c08fcee95e75" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23339519-4121-3cf6-b87c-8281c65a185b" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="username" locRef="3" rule="CODSTA-110" lnHash="-1844934654" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="6b9b3254-fb69-33f1-a74f-fee9f2ad0059" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d58945a1-6c47-360b-9c54-606fa7aba339" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="username" locRef="3" rule="CERT_C-ERR07-b" lnHash="-1844934654" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="bd8fa910-305e-367b-ab26-a53b95ed76dd" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62584023-3240-3cf6-bbc7-f60c0c331e0d" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's 'fscanf' return value" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="username" locRef="3" rule="AUTOSAR-A0_1_2-a" lnHash="-1844934654" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1844934654" unbViolId="e33cd15f-4ebb-377b-99dd-145a3b2e30be" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27418f51-e85e-33c8-bc14-3847f0720231" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's 'fscanf' return value" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="username" locRef="3" rule="CODSTA-CPP-58" lnHash="-1844934654" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1844934654" unbViolId="b0c31c8b-2b1a-31f5-a09d-70e3672bda18" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3425449-4517-3318-a982-2883b7df68a0" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's 'fscanf' return value" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="username" locRef="3" rule="MISRA2008-0_1_7" lnHash="-1844934654" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1844934654" unbViolId="ae89f0e6-6c8e-3ff5-9aec-a1893d4f7a30" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="46041d45-470e-39f5-909e-aa502012058f" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's 'fscanf' return value" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="4" auth="username" locRef="3" rule="JSF-115_a" lnHash="-1844934654" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1844934654" unbViolId="0023f88d-e2f7-30f7-a317-9fc77d703d08" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2f948a0-6962-38d8-bcb8-57906f55bfb3" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="username" locRef="3" rule="CODSTA-122_a" lnHash="-1844934654" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1844934654" unbViolId="70b56863-9beb-367e-a389-058d9621ef2f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f70a231-7518-365e-a4b0-7dd8f76e2132" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="1" auth="username" locRef="3" rule="CERT_C-ERR33-a" lnHash="-1844934654" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1844934654" unbViolId="e0d0a187-d016-3c0b-ba79-817ad33585e1" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8481caf-e74b-3603-98c1-0a3366d1cc89" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="1" auth="username" locRef="3" rule="CERT_C-POS54-a" lnHash="-1844934654" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1844934654" unbViolId="9f54b485-b799-3e3b-ab59-f553952b587d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6425a6a0-0477-32b0-bc3a-3ec192fd19c0" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-1844934654" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1844934654" unbViolId="db03a523-672b-3dae-8c09-9ae9190a18d1" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b53077a-bc62-3f13-a272-4a78e6802d6d" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="username" locRef="3" rule="CERT_C-EXP12-a" lnHash="-1844934654" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1844934654" unbViolId="97d06d63-8d01-3e18-8e9b-fce2022fa8d1" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5cbcbdd3-a3ae-3411-bbd0-a1de0fa09d1f" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="-1844934654" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1844934654" unbViolId="72d53118-36a6-326b-b40f-7295fd24b862" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b344f854-5a42-3075-8bb0-d9a0211accc2" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="username" locRef="3" rule="MISRA2004-16_10" lnHash="-1844934654" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1844934654" unbViolId="5a9ec6d0-374d-304c-b4e0-c57ab193e435" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6589ab5f-6b05-35d7-8ac4-ee70447249aa" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="username" locRef="3" rule="AUTOSAR-M0_3_2-a" lnHash="-1844934654" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1844934654" unbViolId="26b00ea9-ceab-3962-94bd-3fc5de3197db" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e3cad1d-ea12-3741-882e-a914afea1545" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="username" locRef="3" rule="MISRA2008-0_3_2" lnHash="-1844934654" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1844934654" unbViolId="77dc4a2f-693d-3f73-baa1-6856983fcb6a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24d43356-13f1-3043-a524-32a6948502e0" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="username" locRef="3" rule="JSF-115" lnHash="-1844934654" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-1844934654" unbViolId="98ae96a1-d89c-39c0-9d71-56b260481234" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91549bb6-7d17-3009-b9d2-658f80dca59f" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="There should be number describing size of variable in '%d' on position:1" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="username" locRef="3" rule="APSC_DV-002390-c" lnHash="-1844934654" rule.header="Do not use scanf and fscanf functions without specifying variable size in format string" tool="c++test" lineHash="-1844934654" unbViolId="4f549b5f-6e52-3267-8877-0ad2c8b3ebd5" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="56127f39-17c1-3ac5-a96c-59af412f86cd" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="There should be number describing size of variable in '%d' on position:1" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="username" locRef="3" rule="SECURITY-14" lnHash="-1844934654" rule.header="Do not use scanf and fscanf functions without specifying variable size in format string" tool="c++test" lineHash="-1844934654" unbViolId="d3bfe009-2d4c-3bfd-ad23-b3d67743910f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f23bb49d-d4d4-324d-b731-d5857afb3c2a" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Prefer iostream.h to stdio.h" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="5" auth="username" locRef="3" rule="CODSTA-CPP-01" lnHash="-1844934654" rule.header="Prefer iostream.h to stdio.h" tool="c++test" lineHash="-1844934654" unbViolId="8101be1d-d1be-362c-8a64-b7fb57570603" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f066c76a-f8e7-3827-9934-90b74df05b24" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="1" auth="username" locRef="3" rule="CERT_C-STR07-a" lnHash="-1844934654" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="-1844934654" unbViolId="e5b0b0ec-9a89-3ff9-a919-29d4801f098f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab604b23-48be-3a42-95a5-91a715186c3b" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="username" locRef="3" rule="AUTOSAR-A27_0_4-b" lnHash="-1844934654" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="-1844934654" unbViolId="54cce759-3bf1-3fec-b675-03bd3243a30b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba614aea-c2c5-3cb0-b08c-7959fa6ad2dc" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="username" locRef="3" rule="CERT_C-INT05-a" lnHash="-1844934654" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="-1844934654" unbViolId="2e1db776-7545-30a9-9168-e18d1fed2403" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf8ab8d3-12c3-3031-98ca-1a717da96e49" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="username" locRef="3" rule="SECURITY-13" lnHash="-1844934654" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="-1844934654" unbViolId="9379ef45-8c6a-3a2d-a11d-9fb419219758" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7de1b1eb-5fd6-306b-93b7-485878b24e7a" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <DupViol msg="Duplicated string: '&quot;%d&quot;'" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="username" locRef="3" rule="CDD-DUPS" lnHash="-1844934654" rule.header="Avoid string literal duplication" tool="c++test" lineHash="-1844934654" unbViolId="e12c7584-7eac-3c9a-949c-e20fdfc583da" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="47d62232-36ac-3b22-aeab-578db351d922" locEndPos="18" locType="sr" urgent="true" hash="1013754779" locEndLn="7" goals="1,">
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="7" srcRngStartPos="14" srcRngEndPos="18" srcRngStartln="7" srcRngEndLn="7" desc="[Line 7] Duplicated string in file 'MemoryLeak.cpp'" rngLn="7" />
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="10" srcRngStartPos="19" srcRngEndPos="23" srcRngStartln="10" srcRngEndLn="10" desc="[Line 10] Duplicated string in file 'MemoryLeak.cpp'" rngLn="10" />
      </ElDescList>
    </DupViol>
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="5" auth="username" locRef="3" rule="CWE-798-a" lnHash="-1844934654" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1844934654" unbViolId="53136428-c571-3768-aaa2-a3708b2ee95a" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="190d7924-21cd-365a-9017-695e9a47d889" locEndPos="15" locType="sr" urgent="true" hash="1013754779" locEndLn="7" goals="1," />
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="5" auth="username" locRef="3" rule="CODSTA-203" lnHash="-1844934654" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1844934654" unbViolId="69c84fcc-d80c-39ed-a9eb-3b693f8bea03" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5be457b-3640-348a-b724-d051581b558d" locEndPos="15" locType="sr" urgent="true" hash="1013754779" locEndLn="7" goals="1," />
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="1" auth="username" locRef="3" rule="APSC_DV-003110-a" lnHash="-1844934654" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1844934654" unbViolId="4f10f13e-1a39-3995-b214-54576e6eee19" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8f71c23-6a22-3f71-8389-b461c7188b73" locEndPos="15" locType="sr" urgent="true" hash="1013754779" locEndLn="7" goals="1," />
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="1" auth="username" locRef="3" rule="CERT_C-MSC41-a" lnHash="-1844934654" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1844934654" unbViolId="42962216-c778-3547-b2e7-4c712cec202b" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8fbd6748-66d8-365a-bf3b-d7ae626fd3d6" locEndPos="15" locType="sr" urgent="true" hash="1013754779" locEndLn="7" goals="1," />
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="username" locRef="3" rule="AUTOSAR-A27_0_4-d" lnHash="-1844934654" rule.header="C-style strings shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="1e1982ac-4835-3299-8f96-e05580cebf53" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71e65aea-009d-3cad-82d0-235ab20c3d70" locEndPos="15" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call" ln="7" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="username" locRef="3" rule="PB-76" lnHash="-1844934654" rule.header="C-style strings shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="998f7b8d-c111-36a5-8b84-4d1a1e3bc8d3" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43465558-11cb-3b90-9922-0946384857f6" locEndPos="15" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="4" auth="username" locRef="3" rule="JSF-043" lnHash="1773312110" rule.header="Tabs should be avoided" tool="c++test" lineHash="1773312110" unbViolId="f68f2069-d9f1-352d-abe7-17c156e60216" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b3e9d73-271c-3c06-9d5a-6654e9ced546" locEndPos="1" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="5" auth="username" locRef="3" rule="FORMAT-01" lnHash="1773312110" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1773312110" unbViolId="3222db4a-c71b-36e4-915f-23a37edfcd9c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="102211fc-4de2-38f6-ad68-8db734344167" locEndPos="1" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="5" auth="username" locRef="3" rule="HICPP-2_1_1-a" lnHash="1773312110" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1773312110" unbViolId="46f863b5-c79d-3b6c-84b5-e59d46df542b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b1e8238d-1b1d-3fc2-90e2-05cf818c43cf" locEndPos="1" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <FlowViol msg="Data obtained from a file (&quot;*pSize&quot;) is used to determine the size of memory allocation" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where the array is allocated" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="8" rule="BD-SECURITY-TDALLOC" FirstElSrcRngStartPos="0" lnHash="1773312110" ruleSCSCMsg="Tainting point" FirstElSrcRngFile="/flowanalysiscpp/MemoryLeak.cpp" rule.header="Validate potentially tainted data before it is used to determine the size of memory allocation" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-862528737" lang="cpp" violId="3d39502f-e8ec-31cb-93ac-6a709ebd2c7e" locEndPos="0" locEndLn="9" goals="0," locStartln="8" sev="2" locRef="3" tool="c++test" lineHash="1773312110" unbViolId="b6016eb0-c2e6-3232-b755-b0cbf3f0c9b5" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Tainted data" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Tainting point" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".P" rngLn="8">
          <Anns>
            <Ann msg="Point where the array is allocated" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Data obtained from a file (&quot;*pSize&quot;) is used to determine the size of memory allocation" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where the array is allocated" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="8" rule="CWE-770-a" FirstElSrcRngStartPos="0" lnHash="1773312110" ruleSCSCMsg="Tainting point" FirstElSrcRngFile="/flowanalysiscpp/MemoryLeak.cpp" rule.header="Validate potentially tainted data before it is used to determine the size of memory allocation" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1466367756" lang="cpp" violId="6a466aa7-5d52-32fd-beae-e3dae897a447" locEndPos="0" locEndLn="9" goals="0," locStartln="8" sev="2" locRef="3" tool="c++test" lineHash="1773312110" unbViolId="06f7a6d5-bef3-39ad-a8cf-389852e930cb" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Tainted data" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Tainting point" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".P" rngLn="8">
          <Anns>
            <Ann msg="Point where the array is allocated" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Data obtained from a file (&quot;*pSize&quot;) is used to determine the size of memory allocation" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where the array is allocated" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="8" rule="OWASP2019-API4-a" FirstElSrcRngStartPos="0" lnHash="1773312110" ruleSCSCMsg="Tainting point" FirstElSrcRngFile="/flowanalysiscpp/MemoryLeak.cpp" rule.header="Validate potentially tainted data before it is used to determine the size of memory allocation" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1519224323" lang="cpp" violId="2a850708-a1ea-32ba-bf88-ae7a7fd462dc" locEndPos="0" locEndLn="9" goals="0," locStartln="8" sev="2" locRef="3" tool="c++test" lineHash="1773312110" unbViolId="4f0b15b3-92f8-3ead-979b-3665761f09e9" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Tainted data" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Tainting point" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".P" rngLn="8">
          <Anns>
            <Ann msg="Point where the array is allocated" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="4" auth="username" locRef="3" rule="MISRA2008-3_9_2" lnHash="1773312110" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="95816f28-85a7-3766-a961-e115f2556cc1" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="58d659e8-8ca0-3518-b4a5-52674d521cae" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="username" locRef="3" rule="MISRA-013" lnHash="1773312110" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1773312110" unbViolId="fc802e1e-b7ba-32cf-b8c3-b7a582146942" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="633d417c-6551-3081-8bf4-3baa091792aa" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="username" locRef="3" rule="CODSTA-223" lnHash="1773312110" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="084e16a5-e627-3fb5-8519-f35ad1689ff8" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b1d10e7-b3fa-33f5-a0cf-239eb4e24f48" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="username" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="1773312110" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="011b66b0-2e0b-37bb-be5a-ccd7448e7065" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="488178c7-69df-3e8a-a4b4-209d5965637c" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="username" locRef="3" rule="HICPP-7_1_6-b" lnHash="1773312110" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="1773312110" unbViolId="b3db1769-ad12-3a92-b428-5f7f2da1373d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f1b5135-c003-342d-a3ae-e8b14e8b4ab1" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="4" auth="username" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="bb0b21ec-43b7-3db9-ac96-e5948f5b7656" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ef1e557-dba7-3599-a439-69e39fb08f47" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="username" locRef="3" rule="MISRA2004-6_3_b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="288f4e24-c0dd-3a73-bbad-85d7a51fc3db" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ec3a1247-aeea-34c4-abeb-52bf2ae9c8ac" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="username" locRef="3" rule="JSF-209_b" lnHash="1773312110" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="fa4a975e-488a-357d-8e66-851e12ab0cd7" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="154dea18-afc0-3b6c-9ded-391522609c69" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="4" auth="username" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="286e3ef2-100a-355e-a8c7-403ad6ddea1b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fea5ea5b-e84c-35fb-971e-980f0a819de3" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="username" locRef="3" rule="HICPP-3_5_1-b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="1a092179-4cda-380e-bae1-80d382249ffe" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="336e64b7-3f9b-334a-a95f-683e54a64079" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The definition of the 'data' variable should contain a braced initializer" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="username" locRef="3" rule="AUTOSAR-A8_5_2-a" lnHash="1773312110" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1773312110" unbViolId="b6d827a0-9d58-3427-ab33-7836f0a3ae2c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5b9cef1-7b01-3ad7-b35c-2fb35c806a20" locEndPos="7" locType="sr" urgent="true" hash="1013754779" locEndLn="8" goals="1," />
    <StdViol msg="The definition of the 'data' variable should contain a braced initializer" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="username" locRef="3" rule="CODSTA-MCPP-38" lnHash="1773312110" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1773312110" unbViolId="ba4cb69f-d902-353a-b8e6-07ac7b98cb0b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42dfd256-1ce0-371a-9a54-7d704e5a8c51" locEndPos="7" locType="sr" urgent="true" hash="1013754779" locEndLn="8" goals="1," />
    <StdViol msg="The 'data' variable should be declared with the 'auto' type specifier" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="username" locRef="3" rule="CODSTA-MCPP-08_a" lnHash="1773312110" rule.header="Prefer 'auto' to explicit type names in variable declarations" tool="c++test" lineHash="1773312110" unbViolId="c4f15d6f-8278-3fe7-8319-70f6e3e41bf0" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05f6d037-527b-30c3-98d4-5496e7a26e44" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: data" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="username" locRef="3" rule="CODSTA-94" lnHash="1773312110" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="1773312110" unbViolId="db4014d9-7b61-3c4e-8b0f-429806c0b415" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="782ce1cd-ef35-3277-9c71-078cfeeabc59" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The variable of pointer type is declared: data" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="username" locRef="3" rule="CODSTA-95" lnHash="1773312110" rule.header="Do not declare pointer type" tool="c++test" lineHash="1773312110" unbViolId="97ec84dd-2732-3b1f-9cf4-dc649117e064" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8639e034-b26b-3891-9737-902dbcc93692" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Declare local variable 'data' as const" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="username" locRef="3" rule="CERT_C-DCL00-a" lnHash="1773312110" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1773312110" unbViolId="0dd138a7-5b13-3f80-adf4-35ab1733f7e3" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f6be9373-b5f1-392f-b1ea-987f7b72a093" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Declare local variable 'data' as const" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="username" locRef="3" rule="AUTOSAR-A7_1_1-a" lnHash="1773312110" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1773312110" unbViolId="dca1273f-90ba-3a13-a9cf-378b89b87e3b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b17cd1d4-3549-3035-978c-efe2848afaaf" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Declare local variable 'data' as const" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="username" locRef="3" rule="MISRA2008-7_1_1" lnHash="1773312110" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="1773312110" unbViolId="bd62358e-4fc9-3eaf-8d39-bd693537af06" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d025333-a2e9-35bf-a447-ccd60ee1f3f5" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Declare local variable 'data' as const" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="username" locRef="3" rule="CODSTA-CPP-53" lnHash="1773312110" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1773312110" unbViolId="9f4b984f-8404-3097-8663-e43dfa010f5a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b81068a3-50e0-3cb0-a314-337597a12114" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Declare local variable 'data' as const" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="username" locRef="3" rule="HICPP-7_1_2-a" lnHash="1773312110" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1773312110" unbViolId="71843e24-815c-3e19-90a9-e0bcb94d7107" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e42d3032-5aad-3477-9e86-2089ff8cb936" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The 'data' variable should be commented" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="username" locRef="3" rule="JSF-132_a" lnHash="1773312110" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="1773312110" unbViolId="4a89dfe6-d8b2-3220-b4d7-20e657e3f58f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee64801c-6088-3c2d-bdc6-33efe7366768" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The 'data' variable should be commented" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="username" locRef="3" rule="COMMENT-05" lnHash="1773312110" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="1773312110" unbViolId="3de94a82-111e-37b4-bfe7-a11bcc8bd8cc" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85937484-0491-34af-8a12-67bc9ca6e1cd" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Check the return value of new" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="username" locRef="3" rule="MRM-34" lnHash="1773312110" rule.header="Check the return value of new" tool="c++test" lineHash="1773312110" unbViolId="9e2b10b8-b17e-38e8-b7c2-9abde5cc75c8" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c3f32fad-8a7a-3314-9acf-078b8cf0a3e9" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Check the return value of new" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="1" auth="username" locRef="3" rule="CERT_CPP-MEM52-a" lnHash="1773312110" rule.header="Check the return value of new" tool="c++test" lineHash="1773312110" unbViolId="e6bec973-16fd-3cc3-b1ad-38493a37be53" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="30410690-a612-3587-900d-4887d5df4cab" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Naming convention not followed: data" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="username" locRef="3" rule="NAMING-22" lnHash="1773312110" rule.header="Prefix a variable type 'pointer' with a 'p' character" tool="c++test" lineHash="1773312110" unbViolId="3dca27cb-ca5e-3548-b36d-9a17deb5a1b6" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="234a8bb5-c78d-3414-b4e6-2cb72b78f2b6" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The 'data' identifier should have the 'prg' prefix" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="username" locRef="3" rule="NAMING-HN-16" lnHash="1773312110" rule.header="Hungarian notation for dynamically allocated array" tool="c++test" lineHash="1773312110" unbViolId="ba7746bf-3f7b-3ebe-ae7f-c1a465a67c09" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6174f8b9-a79a-3f62-851f-830181e2e143" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The 'data' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="username" locRef="3" rule="NAMING-HN-23" lnHash="1773312110" rule.header="Hungarian notation for int pointer, array, or reference types" tool="c++test" lineHash="1773312110" unbViolId="b508f84c-bf1b-3372-be71-0867d937581d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5fd49a26-4bf2-3045-a336-cef0195fb6bc" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The 'data' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="username" locRef="3" rule="NAMING-HN-31" lnHash="1773312110" rule.header="Hungarian notation for int pointer, array, or reference types" tool="c++test" lineHash="1773312110" unbViolId="0f68350d-5a35-3979-9e4f-ee9935e6e712" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c862378e-80d8-3d12-8473-acb25e5db9f7" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The 'data' identifier should have the 'p' prefix" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="username" locRef="3" rule="NAMING-HN-34" lnHash="1773312110" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="1773312110" unbViolId="7f9c4450-e21e-35ae-a65f-1f1b150319e8" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a06af21-075c-32f8-a192-4880eecd3bc7" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The 'data' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="username" locRef="3" rule="NAMING-HN-44" lnHash="1773312110" rule.header="Hungarian notation for word pointer, array, or reference types" tool="c++test" lineHash="1773312110" unbViolId="42f218c0-8290-3b95-b83b-902562b8a986" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0b5e9d3-8ffc-3601-b85b-0fd151260eae" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="username" locRef="3" rule="MISRA2012-DIR-4_12" lnHash="1773312110" rule.header="Dynamic memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="7056b324-f626-3f5e-9acd-b05770971193" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8bc1a582-210d-3ed6-af06-2fea5b05e6e1" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="username" locRef="3" rule="MISRA2008-18_4_1" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="280eb5a7-74bb-338d-82ae-22ee4aa60b14" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb669b1a-1734-3638-9fa0-72755b1c6e5a" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_21_3-a" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="fd3ebafe-784b-346a-b40b-ce3d8e65294f" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3affde1-1e73-3843-a811-26b54fde6db9" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="username" locRef="3" rule="AUTOSAR-A18_5_2-a" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="23b40c3b-ef9c-3e98-92e8-bba1104ee2ef" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8607fe2-0c9d-3ed2-9ac5-e874f9f506f6" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="username" locRef="3" rule="JSF-206" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="cc3eac90-5c36-3d15-be33-af5fb0197213" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a34ebed-4d5d-39cd-8af0-b44e6292ff64" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-21_3" lnHash="1773312110" rule.header="The memory allocation and deallocation functions of &lt;stdlib.h> shall not be used" tool="c++test" lineHash="1773312110" unbViolId="91f7af5a-8966-3078-9f37-d05d7a20970f" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f69f52a6-4229-35c1-91c8-26ab15b4bdff" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="username" locRef="3" rule="MISRA2004-20_4" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="ff1229fb-0b5d-3c54-adc5-f6eb637edf19" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="876f87c4-4562-30a5-a747-e16a560e1ac6" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="username" locRef="3" rule="MISRAC2012-DIR_4_12-a" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="9189d086-1e6c-3080-9f1b-3d9f78607fc7" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b45fa421-2b90-3924-8f2f-62e18103390e" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Use vector or string instead of dynamically allocated array" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="username" locRef="3" rule="STL-10" lnHash="1773312110" rule.header="Prefer vector and string to dynamically allocated arrays" tool="c++test" lineHash="1773312110" unbViolId="425a5a1e-84af-330d-8d86-bf17a216c76a" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40e83f3e-7d1c-3db2-b01b-fa28e68c4896" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="4" auth="username" locRef="3" rule="MISRA2008-3_9_2" lnHash="1773312110" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="c3e0da9d-b175-344c-ab83-d2a6f5ad6742" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="412a058b-a66a-3a74-a87d-52a8e154c27e" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="username" locRef="3" rule="MISRA-013" lnHash="1773312110" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1773312110" unbViolId="d14fb2e5-709c-3b7a-b9aa-bf4c64b7aeec" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5436f2ed-12e6-3aa0-a221-6b05266bbdfa" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="username" locRef="3" rule="CODSTA-223" lnHash="1773312110" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="0aefe977-a8ae-342e-b5fe-64608b6ccc08" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2f4befb-8c3d-3cc4-9e6c-9c27eacbdd39" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="username" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="1773312110" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="1ea4f164-024c-3e76-a4fc-e08e99b1b8c5" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00a680b4-5520-3223-9ad0-6cae9002fad0" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="username" locRef="3" rule="HICPP-7_1_6-b" lnHash="1773312110" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="1773312110" unbViolId="1c363da8-8161-305e-a595-b8f646565156" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e09823ff-e72b-3bd3-bf07-54cce58ce7e2" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="4" auth="username" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="b1d18bbf-794b-3894-ab8a-6beaff4b86b6" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6a78c70-6072-39a3-9a45-a6161f2cf7a2" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="username" locRef="3" rule="MISRA2004-6_3_b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="7a154fda-78c5-3967-b58f-50495d86fc90" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b34da159-31b4-3dab-8372-78f95af0f198" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="username" locRef="3" rule="JSF-209_b" lnHash="1773312110" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="63d6c0a0-1e4f-34c9-b32f-8c9f00cd3bb3" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7def0100-4b8d-37f7-9441-3d081e7754a7" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="4" auth="username" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="93cd09f6-e6ee-32ed-a38a-aa8cf3320c04" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0cc167ba-4454-3b0a-b601-875015b63d20" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="username" locRef="3" rule="HICPP-3_5_1-b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="4cda679e-aa2e-346a-9ef4-a5e254f68b7b" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5442006-a5d1-30e1-a872-c037b3a9ded3" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="username" locRef="3" rule="JSF-061" lnHash="616861252" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="616861252" unbViolId="3cacef9b-b5e8-32f3-8cf1-1bb7c8b9e0bf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e8ed62c-f843-354d-aea8-57759479c420" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="username" locRef="3" rule="FORMAT-42" lnHash="616861252" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="616861252" unbViolId="dbd041f2-d85c-34dd-8996-133e3bc28efd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70faf219-00f4-3dbc-b54a-4a56d0eded98" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="username" locRef="3" rule="JSF-060_a" lnHash="616861252" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="616861252" unbViolId="4566723e-18bb-34c4-b117-0768bb7b734a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0192201-596d-359c-86d3-3f7ce5081910" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="username" locRef="3" rule="FORMAT-43" lnHash="616861252" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="616861252" unbViolId="582c765f-7f8c-3209-9488-801c09e9516d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6b173bb-ac9d-3eb4-8e73-0ed98ea07b27" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="username" locRef="3" rule="JSF-060_b" lnHash="616861252" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="616861252" unbViolId="a9543e56-f4ff-3e61-9dbc-8723bb68d8c7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d075b30-c94f-3064-a7fe-2b5aba30cd2c" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="4" auth="username" locRef="3" rule="JSF-043" lnHash="616861252" rule.header="Tabs should be avoided" tool="c++test" lineHash="616861252" unbViolId="c55af347-f31c-33ce-99f6-8e6160abb9e3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1172751e-c3d4-3673-b564-fd318a5b92b6" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="5" auth="username" locRef="3" rule="FORMAT-01" lnHash="616861252" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="616861252" unbViolId="dfc7de34-7441-3931-8f0f-7b7f3a25a216" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="413cf888-e0c5-3e08-ac1f-a2a825068db6" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="5" auth="username" locRef="3" rule="HICPP-2_1_1-a" lnHash="616861252" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="616861252" unbViolId="c7795347-0bde-37f3-a45b-08047168001f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4513f633-a480-3749-8561-d12963ff5b98" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="username" locRef="3" rule="FORMAT-02" lnHash="616861252" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="616861252" unbViolId="9a9eab4f-3307-371a-83b0-a5ba1a4f8121" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa1c9fcd-6a72-385e-acf2-e1585748041f" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <FlowViol msg="Data obtained from a file (&quot;*pSize&quot;) is used in a loop condition" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Tainted data use in a loop condition" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="8" rule="BD-SECURITY-TDLOOP" FirstElSrcRngStartPos="0" lnHash="616861252" ruleSCSCMsg="Tainting point" FirstElSrcRngFile="/flowanalysiscpp/MemoryLeak.cpp" rule.header="Validate potentially tainted data before it is used in the controlling expression of a loop" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2054996746" lang="cpp" violId="aa6cac78-61f3-321c-bc04-fe1b5a224597" locEndPos="0" locEndLn="10" goals="0," locStartln="9" sev="1" locRef="3" tool="c++test" lineHash="616861252" unbViolId="535c230e-749f-3741-9a63-3c896fa3e94d" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Tainted data" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType=".C" rngLn="7">
          <Props>
            <Prop key="Tracked variables" val="pSize[]" />
          </Props>
          <Anns>
            <Ann msg="Tainting point" kind="cause" />
            <Ann msg="Tainted data: pSize[]" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType="." rngLn="8" />
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType=".P" rngLn="9">
          <Props>
            <Prop key="Tracked variables" val="pSize[]" />
          </Props>
          <Anns>
            <Ann msg="Tainted data: pSize[]" kind="var" />
            <Ann msg="Tainted data use in a loop condition" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="A loop does not have a fixed upper nor lower bound" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="username" locRef="3" rule="CODSTA-83" lnHash="616861252" rule.header="All loops must have a fixed upper or lower bound" tool="c++test" lineHash="616861252" unbViolId="fe2993e6-7250-34d4-9e4d-186a8e4048c9" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="712dcf67-12cb-3f28-b65f-c4474d82edfa" locEndPos="2" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="4" auth="username" locRef="3" rule="MISRA2008-3_9_2" lnHash="616861252" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="616861252" unbViolId="d40d28be-59db-34c1-8488-762a8c789c1f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a31ebcc9-6bc1-3236-9aa5-961523389bbd" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="username" locRef="3" rule="MISRA-013" lnHash="616861252" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="616861252" unbViolId="65dfbdb0-ba0e-3d1b-9f69-ebf2095b2de4" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="edeb08de-8463-360b-b1cb-01060a5cbef7" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="username" locRef="3" rule="CODSTA-223" lnHash="616861252" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="616861252" unbViolId="66aa95a4-0baa-3d4e-8bf6-7db1b3a09add" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="754cc881-0bd2-3766-a557-628182dbb551" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="2" auth="username" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="616861252" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="616861252" unbViolId="b9aef31c-2968-3705-bfae-2d82d2d5edc4" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9de6517-0cba-3a86-81ef-fd38d764d2c4" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="username" locRef="3" rule="HICPP-7_1_6-b" lnHash="616861252" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="616861252" unbViolId="db643f2d-c77e-3039-a40d-3d8ce81ae159" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="711a6dc4-2cae-39af-aef1-52e6c851543f" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="4" auth="username" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="616861252" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="616861252" unbViolId="165b4f5e-8fff-3ae4-8686-5b252a75aa5f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e93dcf44-5229-380f-b5e9-4b7f2e66b77e" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="username" locRef="3" rule="MISRA2004-6_3_b" lnHash="616861252" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="616861252" unbViolId="64675ee3-73dc-3bcb-9e6b-50da1ee32543" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22fc60e8-1310-3167-8d87-20738f0c4dfd" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="2" auth="username" locRef="3" rule="JSF-209_b" lnHash="616861252" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="616861252" unbViolId="170af6cf-fac3-3ee2-b9ee-68c7d333fbe6" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90709662-5064-384e-86d2-0496900c1310" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="4" auth="username" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="616861252" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="616861252" unbViolId="59a67e64-891c-32b6-b891-0625af3c90f6" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e33f5905-ca1b-392b-8508-e42276ad7817" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="username" locRef="3" rule="HICPP-3_5_1-b" lnHash="616861252" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="616861252" unbViolId="9ad72e9d-dab5-355c-8e01-489af0446886" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="015bfbfb-79e5-3a89-97c7-93bb6cc1f8a8" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="2" auth="username" locRef="3" rule="AUTOSAR-A8_5_2-a" lnHash="616861252" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="616861252" unbViolId="e1b4b58b-92d7-3d2a-9948-09f4d0942c33" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="efbd67d5-0bbd-3565-a3ae-8e1bb0d1f6f4" locEndPos="11" locType="sr" urgent="true" hash="1013754779" locEndLn="9" goals="1," />
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="username" locRef="3" rule="CODSTA-MCPP-38" lnHash="616861252" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="616861252" unbViolId="40c6eb80-ab73-3d56-8586-7914751c6a45" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d797c832-4e9e-3677-a59e-0c4f1c722705" locEndPos="11" locType="sr" urgent="true" hash="1013754779" locEndLn="9" goals="1," />
    <StdViol msg="'i' shall be declared as unsigned int or signed int" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="username" locRef="3" rule="PORT-13" lnHash="616861252" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="616861252" unbViolId="40d8aef1-e379-3f2d-bd2f-0d00c815d43a" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ded370c-c345-3b36-9f72-2119a84d8e28" locEndPos="11" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The 'i' variable should be commented" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="username" locRef="3" rule="JSF-132_a" lnHash="616861252" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="616861252" unbViolId="0aecdc3b-adad-353c-aa22-81fa532daf57" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f13aafb-f8dc-3ee9-803d-c644630bbbf3" locEndPos="11" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The 'i' variable should be commented" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="username" locRef="3" rule="COMMENT-05" lnHash="616861252" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="616861252" unbViolId="e8f8ec68-eeef-300f-a3f0-c8e776ef9540" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8dff71a-fd51-3b83-8397-ad4834ad43b6" locEndPos="11" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="1" auth="username" locRef="3" rule="APSC_DV-002560-k" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="22dd6e93-d78c-3dd4-87dd-be4b981e9d78" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a90e3696-0e3d-34c9-8bc3-bd2a0eb9c434" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="1" auth="username" locRef="3" rule="APSC_DV-002550-k" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="9dd14783-c7bb-3664-950e-78c66f594bbb" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74f00d06-0b7d-3f83-97c3-930dd6c886c7" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="2" auth="username" locRef="3" rule="APSC_DV-001290-b" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="378fc296-5bb4-31c1-ba6c-7b2e97f292a1" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cc841c96-6ace-37f6-ac77-26480eac3cf2" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="2" auth="username" locRef="3" rule="SECURITY-38" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="9526a699-d64e-3ba3-b59f-f38e8f72b30e" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55a7b64c-4bd1-35a7-8481-90b6f2f0dee0" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="2" auth="username" locRef="3" rule="CWE-20-j" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="39644095-ab8e-3452-a120-eece0ea77a17" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05d903ee-d41c-31dd-a299-7e4a0ad53f5b" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="2" auth="username" locRef="3" rule="APSC_DV-002530-k" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="2eb58b20-e538-352f-95d0-6a301367c7b6" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e7cb0692-bcc0-3497-bc9b-775e375f63d8" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="2" auth="username" locRef="3" rule="APSC_DV-002520-k" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="21230800-6129-399d-8dcd-e2bc50115812" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="feb017ff-b9eb-33d8-895f-6cfa80c8b3f8" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Postfix operator applied to variable 'i'; prefer prefix type" ln="9" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="username" locRef="3" rule="OPT-04" lnHash="616861252" rule.header="Prefer canonical form of ++ and --. Prefer calling the prefix forms" tool="c++test" lineHash="616861252" unbViolId="fb231148-8283-36b9-9643-b0022ab24731" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f6db5a1d-c54a-3c10-85fc-36e4e5da58e7" locEndPos="30" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="username" locRef="3" rule="JSF-061" lnHash="700522989" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="700522989" unbViolId="e3778402-6266-3b5f-ab35-bb2d5ea09c64" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e732402-a7e1-337e-87f7-abaabca38c13" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="username" locRef="3" rule="FORMAT-42" lnHash="700522989" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="700522989" unbViolId="8ee35963-78fa-3327-b2e6-ca822deb4909" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a08270e-c685-318b-b548-684d21b1fba0" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="username" locRef="3" rule="JSF-060_a" lnHash="700522989" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="700522989" unbViolId="891bbefd-6d62-35c5-830b-f76992c4b0ee" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1921555a-8add-3d74-8d25-559a90274b2f" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="username" locRef="3" rule="FORMAT-43" lnHash="700522989" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="700522989" unbViolId="96fb2240-b969-3807-8afd-e353f441e04c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="faf65347-308f-38c8-96d0-102c478733e0" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="username" locRef="3" rule="JSF-060_b" lnHash="700522989" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="700522989" unbViolId="25ee96f1-ac17-3e33-8092-5036f3617222" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f544cabe-20c1-3572-9984-7deade2857ed" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="4" auth="username" locRef="3" rule="JSF-043" lnHash="700522989" rule.header="Tabs should be avoided" tool="c++test" lineHash="700522989" unbViolId="0e774516-5bc1-3198-b25c-e01242204139" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a853fba9-bcc5-3e65-ba0c-49bd69d85067" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="5" auth="username" locRef="3" rule="FORMAT-01" lnHash="700522989" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="700522989" unbViolId="9bd6fc1c-da16-3f2d-8777-e25eefb4369b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1b9ee369-e55f-3179-8a37-6070b03e2ace" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="5" auth="username" locRef="3" rule="HICPP-2_1_1-a" lnHash="700522989" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="700522989" unbViolId="d5a09922-1fc1-37af-b83a-69814700137c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f3ba106-1707-395b-b5ad-6c6310dbfbc6" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="username" locRef="3" rule="FORMAT-02" lnHash="700522989" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="700522989" unbViolId="f46ae2e8-1df1-315f-8b99-a2c1c7d8b690" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c747770-1993-333f-b394-75759136d580" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="4" auth="username" locRef="3" rule="JSF-043" lnHash="700522989" rule.header="Tabs should be avoided" tool="c++test" lineHash="700522989" unbViolId="ffd2dbeb-ca7a-3a1f-a164-800a010d630a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7dd9a977-b9d0-3c31-bce8-db66b29e0a31" locEndPos="2" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="5" auth="username" locRef="3" rule="FORMAT-01" lnHash="700522989" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="700522989" unbViolId="0e759a73-b9f4-3896-84e8-9a683c255b82" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eceb9ad7-7e37-3ceb-9708-5ea0ec1a5813" locEndPos="2" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="5" auth="username" locRef="3" rule="HICPP-2_1_1-a" lnHash="700522989" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="700522989" unbViolId="ff08bb6c-56bf-3617-a4aa-4e14f0717ec2" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="202415e3-dacd-3c8a-985c-f1c23a13fa08" locEndPos="2" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="The 'if' statement doesn't have an 'else' clause" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="username" locRef="3" rule="CODSTA-23" lnHash="700522989" rule.header="All 'if' statements should have an 'else' clause" tool="c++test" lineHash="700522989" unbViolId="dda37b30-fed5-33d1-a804-4ed93eccfdc3" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d91c148-7175-3e14-b2cc-47cd5e58a967" locEndPos="3" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="username" locRef="3" rule="MISRAC2012-RULE_21_6-a" lnHash="700522989" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="700522989" unbViolId="cc8cb0fe-b92b-3d70-813e-f285278a3e9c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="33424193-3cd2-3123-acff-3ad14e07b7cc" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="username" locRef="3" rule="MISRA2012-RULE-21_6" lnHash="700522989" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="700522989" unbViolId="632763cd-2c69-394e-9614-be964ae6819a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a4c7c0a4-7e13-3732-b0f9-108b3cd6e170" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="username" locRef="3" rule="CERT_C-ERR02-a" lnHash="700522989" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="700522989" unbViolId="f370e8b4-80da-3eed-90dc-215dbcdbfac8" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a3702ce-6a55-35d2-950c-c853e8966581" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="username" locRef="3" rule="CODSTA-110" lnHash="700522989" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="700522989" unbViolId="8306c1d5-608f-33b4-a4c2-b06191158fe0" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4eb7f8c2-403c-3490-8872-01661977110e" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="username" locRef="3" rule="CERT_C-ERR07-b" lnHash="700522989" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="700522989" unbViolId="cca44d6e-904d-3200-be5f-cf0659aae4b1" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="365d9de2-6fdc-3fc0-ad4d-1654167432b8" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="There should be number describing size of variable in '%d' on position:1" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="username" locRef="3" rule="APSC_DV-002390-c" lnHash="700522989" rule.header="Do not use scanf and fscanf functions without specifying variable size in format string" tool="c++test" lineHash="700522989" unbViolId="cd2b092d-86fd-39f9-a691-e8344f429086" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4402f80-3a54-3bdb-9fec-8890653abef5" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="There should be number describing size of variable in '%d' on position:1" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="username" locRef="3" rule="SECURITY-14" lnHash="700522989" rule.header="Do not use scanf and fscanf functions without specifying variable size in format string" tool="c++test" lineHash="700522989" unbViolId="7413793a-b92e-3aa1-9606-9c8b0c148a5e" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9cdff475-0c42-3c79-b6ed-6721fc410dad" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Prefer iostream.h to stdio.h" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="5" auth="username" locRef="3" rule="CODSTA-CPP-01" lnHash="700522989" rule.header="Prefer iostream.h to stdio.h" tool="c++test" lineHash="700522989" unbViolId="bd80bb32-40f7-3969-b553-79343930c835" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d1216ec-0c63-3c9d-80cc-57cd1a1e7eb8" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="1" auth="username" locRef="3" rule="CERT_C-STR07-a" lnHash="700522989" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="700522989" unbViolId="c09dd95f-43fb-38d6-a9df-88f9d74f40b3" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="acb75874-891a-3fd7-a3b1-57d9ff7c00d9" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="username" locRef="3" rule="AUTOSAR-A27_0_4-b" lnHash="700522989" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="700522989" unbViolId="435438fd-6a81-318b-908f-28753582abf8" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba8775f8-2fda-3010-b77c-b3262c579c75" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="username" locRef="3" rule="CERT_C-INT05-a" lnHash="700522989" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="700522989" unbViolId="656ab758-b227-35d1-8dcd-4ee8c885b7ad" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91b10b9b-b9fb-36da-8f99-0d48601a953b" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="username" locRef="3" rule="SECURITY-13" lnHash="700522989" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="700522989" unbViolId="8c5e62e6-8dc0-390e-a9a1-fd111c243af3" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da281983-f12b-3f90-b119-995f187e9e03" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="5" auth="username" locRef="3" rule="CWE-798-a" lnHash="700522989" rule.header="Do not hard code string literals" tool="c++test" lineHash="700522989" unbViolId="c14fdf3a-3261-36bc-9e3f-e9912606e459" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3822d458-e128-3d13-b0d4-fd3c5f6202d1" locEndPos="20" locType="sr" urgent="true" hash="1013754779" locEndLn="10" goals="1," />
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="5" auth="username" locRef="3" rule="CODSTA-203" lnHash="700522989" rule.header="Do not hard code string literals" tool="c++test" lineHash="700522989" unbViolId="ae3ba7c4-be55-3241-88c7-e1cc685e05ad" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4345ff14-eeb5-3f9c-bf3a-a3a5aae8765d" locEndPos="20" locType="sr" urgent="true" hash="1013754779" locEndLn="10" goals="1," />
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="1" auth="username" locRef="3" rule="APSC_DV-003110-a" lnHash="700522989" rule.header="Do not hard code string literals" tool="c++test" lineHash="700522989" unbViolId="5ddb5dbc-767b-30bf-b7da-cfccd8a38256" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="046bee13-6740-3149-9b5d-349f981f06a3" locEndPos="20" locType="sr" urgent="true" hash="1013754779" locEndLn="10" goals="1," />
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="1" auth="username" locRef="3" rule="CERT_C-MSC41-a" lnHash="700522989" rule.header="Do not hard code string literals" tool="c++test" lineHash="700522989" unbViolId="dc311ef7-a50d-3b5b-ae81-030d6e3f8994" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="058242ac-9c1d-3265-b0e9-6e10caebc05b" locEndPos="20" locType="sr" urgent="true" hash="1013754779" locEndLn="10" goals="1," />
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="username" locRef="3" rule="AUTOSAR-A27_0_4-d" lnHash="700522989" rule.header="C-style strings shall not be used" tool="c++test" lineHash="700522989" unbViolId="ac1f78ac-69c3-39a6-aba4-1b25359a4f78" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="81076240-b3e7-3ec8-abb9-67230a968ed0" locEndPos="20" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="username" locRef="3" rule="PB-76" lnHash="700522989" rule.header="C-style strings shall not be used" tool="c++test" lineHash="700522989" unbViolId="008c0b91-037b-3db2-82dc-5d48fe135a39" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cff9a817-46a1-37d4-a2fe-595d25295ac5" locEndPos="20" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Avoid indexing non-array objects" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="username" locRef="3" rule="MISRA2004-17_4" lnHash="700522989" rule.header="Array indexing shall be the only allowed form of pointer arithmetic" tool="c++test" lineHash="700522989" unbViolId="2d086281-d4c6-33d1-9578-58a8ef0d4f51" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="048c5035-ea4f-30a9-8ae6-098f96e6259a" locEndPos="27" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Avoid indexing non-array objects" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="username" locRef="3" rule="MISRA2008-5_0_15" lnHash="700522989" rule.header="Array indexing shall be the only form of pointer arithmetic" tool="c++test" lineHash="700522989" unbViolId="edfb0c84-d25e-3731-8d34-01b948dad7d8" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3e54331-da8e-36c5-bece-2d35d20c8177" locEndPos="27" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Avoid indexing non-array objects" ln="10" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="username" locRef="3" rule="AUTOSAR-M5_0_15-a" lnHash="700522989" rule.header="Array indexing shall be the only allowed form of pointer arithmetic" tool="c++test" lineHash="700522989" unbViolId="d0520714-ddfa-39b4-aec2-cb64c7e38a67" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c78ad297-789b-35b6-9ef0-b5f16e21bcc0" locEndPos="27" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="11" sev="4" auth="username" locRef="3" rule="JSF-043" lnHash="-541829676" rule.header="Tabs should be avoided" tool="c++test" lineHash="-541829676" unbViolId="cec8c7a1-3f25-3a4d-8b7d-459942853a61" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b56e3cad-86ca-3615-90e9-ea609015e7cc" locEndPos="1" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="11" sev="5" auth="username" locRef="3" rule="FORMAT-01" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="bb09b19c-22bf-3a81-9c4d-dafa611e2bdb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f9a29bd-bec8-3b67-b08c-d8b24ed4bfff" locEndPos="1" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="11" sev="5" auth="username" locRef="3" rule="HICPP-2_1_1-a" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="65a22aed-2313-3060-b545-332183f79786" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b79504a4-aa52-3ca8-a2ba-59f7b69fa610" locEndPos="1" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="11" sev="4" auth="username" locRef="3" rule="JSF-043" lnHash="-541829676" rule.header="Tabs should be avoided" tool="c++test" lineHash="-541829676" unbViolId="1c881f7d-d09d-3a2d-b4cc-621aae416257" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9cfc432b-8478-37c7-892d-e17299289be4" locEndPos="2" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="11" sev="5" auth="username" locRef="3" rule="FORMAT-01" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="9640eda4-ecac-3c7f-88a4-6747d56d17f9" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="72d9921a-80cf-3e1d-aacf-194e6faf68e5" locEndPos="2" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="11" sev="5" auth="username" locRef="3" rule="HICPP-2_1_1-a" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="1d2acf41-837a-3af2-bea5-21159f4c479d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6094cfa4-85b0-3ca8-99a6-d522829e3362" locEndPos="2" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="11" sev="4" auth="username" locRef="3" rule="JSF-043" lnHash="-541829676" rule.header="Tabs should be avoided" tool="c++test" lineHash="-541829676" unbViolId="2318b249-b1fb-3b9b-b44f-1cf53f634002" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b5e6258-23de-30bf-8fb3-0ef90b6e8e7b" locEndPos="3" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="11" sev="5" auth="username" locRef="3" rule="FORMAT-01" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="91fa9556-0a03-3556-b360-4a43cb7bbddf" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6899418e-dc03-3323-9814-d8a56fda2367" locEndPos="3" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="11" sev="5" auth="username" locRef="3" rule="HICPP-2_1_1-a" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="8c04c792-fcf0-3330-9eea-c37a038172f5" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cdc525ca-02b3-3ed2-a976-2ecae5603811" locEndPos="3" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="c++ exception handling structure is used in function 'readIntegerArray'" ln="11" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="11" sev="2" auth="username" locRef="3" rule="JSF-208" lnHash="-541829676" rule.header="C++ exceptions shall not be used" tool="c++test" lineHash="-541829676" unbViolId="bc2933ea-5210-3261-b284-6c937e8d8ac4" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1622cd7b-0539-3f6c-90b8-0fc1f163ebfd" locEndPos="4" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="c++ exception handling structure is used in function 'readIntegerArray'" ln="11" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="11" sev="2" auth="username" locRef="3" rule="EXCEPT-05" lnHash="-541829676" rule.header="C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.)" tool="c++test" lineHash="-541829676" unbViolId="45df85ae-eac3-37f7-bdb4-d4ccb8e8fc6b" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bae959bb-0ae0-3f9b-b353-576d62dbbe4c" locEndPos="4" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="12" sev="4" auth="username" locRef="3" rule="JSF-043" lnHash="9053" rule.header="Tabs should be avoided" tool="c++test" lineHash="9053" unbViolId="2afe02fc-ceed-3f55-b7d7-0716a8631ddf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9cd68181-b7f9-3908-9138-9874272a7978" locEndPos="1" locType="sr" hash="1013754779" locEndLn="12" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="12" sev="5" auth="username" locRef="3" rule="FORMAT-01" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="d6421a9a-078f-3b7f-9316-149a9b73bc0e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="345ab453-5605-3bb6-aa3c-ae85769d36ed" locEndPos="1" locType="sr" hash="1013754779" locEndLn="12" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="12" sev="5" auth="username" locRef="3" rule="HICPP-2_1_1-a" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="216d473d-dbe7-331d-9ea5-586a9dd3c6e4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8d1f7e4-2241-3b9a-aba5-a25d719eb73e" locEndPos="1" locType="sr" hash="1013754779" locEndLn="12" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="12" sev="4" auth="username" locRef="3" rule="JSF-043" lnHash="9053" rule.header="Tabs should be avoided" tool="c++test" lineHash="9053" unbViolId="327063d0-e44a-30c4-aa0b-327c12b75fff" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af0ad833-70df-3e04-8155-bd95778eceb4" locEndPos="2" locType="sr" hash="1013754779" locEndLn="12" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="12" sev="5" auth="username" locRef="3" rule="FORMAT-01" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="dd4a35fc-49c8-3095-947d-f77e046df9f4" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b041306-8290-3293-83c0-6da4200dc3ef" locEndPos="2" locType="sr" hash="1013754779" locEndLn="12" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="12" sev="5" auth="username" locRef="3" rule="HICPP-2_1_1-a" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="75a83238-0bed-3473-9791-a783b667a2e5" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5f3c57b-9c19-3d90-8d12-9a29e3b75204" locEndPos="2" locType="sr" hash="1013754779" locEndLn="12" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="13" sev="4" auth="username" locRef="3" rule="JSF-043" lnHash="404" rule.header="Tabs should be avoided" tool="c++test" lineHash="404" unbViolId="1402aca9-e006-36bd-8984-2bb71720561d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23e4b830-66e3-33d3-90ed-c51fffc5691f" locEndPos="1" locType="sr" hash="1013754779" locEndLn="13" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="13" sev="5" auth="username" locRef="3" rule="FORMAT-01" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="c08b2356-19fe-3165-9f5f-26830402da5c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="954e1990-3c37-3a41-a78f-cfc5d48fb473" locEndPos="1" locType="sr" hash="1013754779" locEndLn="13" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="13" sev="5" auth="username" locRef="3" rule="HICPP-2_1_1-a" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="93d96743-87aa-3e22-800e-b29215a872f6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a948969-43b4-30dd-bb2a-4db4edc473a9" locEndPos="1" locType="sr" hash="1013754779" locEndLn="13" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="14" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="14" sev="4" auth="username" locRef="3" rule="JSF-043" lnHash="1006431594" rule.header="Tabs should be avoided" tool="c++test" lineHash="1006431594" unbViolId="d31115eb-46c3-355a-a81b-fef3f19746f2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88a09b52-37a7-3992-b7ab-2e65167ad7e4" locEndPos="1" locType="sr" hash="1013754779" locEndLn="14" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="14" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="14" sev="5" auth="username" locRef="3" rule="FORMAT-01" lnHash="1006431594" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1006431594" unbViolId="9ec56793-cb7e-36e5-9275-03551967a8ec" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3ec12ef-9fc7-30f4-93ca-3fd6db5b2f97" locEndPos="1" locType="sr" hash="1013754779" locEndLn="14" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="14" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="14" sev="5" auth="username" locRef="3" rule="HICPP-2_1_1-a" lnHash="1006431594" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1006431594" unbViolId="ca3cd628-586e-30e9-8782-ca326e0e0fac" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ac77c3d-b7fc-3859-bf9a-7b7c393271f2" locEndPos="1" locType="sr" hash="1013754779" locEndLn="14" goals="0," />
    <StdViol msg="'return' statement should be used with parenthesis" ln="14" locFile="/flowanalysiscpp/MemoryLeak.cpp" locStartln="14" sev="3" auth="username" locRef="3" rule="FORMAT-25_b" lnHash="1006431594" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="1006431594" unbViolId="7d26302b-9f42-364b-b31a-07420e4d721c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb9887ba-cb36-3358-b9b7-a7eb2793c715" locEndPos="2" locType="sr" hash="1013754779" locEndLn="14" goals="0," />
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="9" rule="APSC_DV-002000-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1842545282" lang="cpp" violId="4c3cce0c-beef-376a-a356-8dd2da15b74e" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="7e6eb10c-04ed-3deb-a9cc-a315e1c6b55f" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="9" rule="AUTOSAR-A15_0_2-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1331699030" lang="cpp" violId="2861c034-3330-3c49-b5f3-596a1c3cd869" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="57b88008-c487-39b3-a983-679c7a2552fe" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="9" rule="AUTOSAR-A15_1_4-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1332641371" lang="cpp" violId="91c559e8-cb84-3ee2-badc-8042c7b35849" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="b563c9bb-7665-3139-b6e1-043e1dc3a43c" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="9" rule="BD-RES-LEAKS" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1151239445" lang="cpp" violId="ecc0dd5b-017c-3956-bd73-1ed5e7593293" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="1" locRef="3" tool="c++test" lineHash="125" unbViolId="cf62b22f-e8eb-3140-8be1-27f0dcd6302b" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="9" rule="CERT_C-CON30-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="103891581" lang="cpp" violId="c1cf3e30-905e-39f5-be73-517d87b10855" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="daf6b3a1-a93b-393d-b109-168187ae200c" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="9" rule="CERT_C-FIO22-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1112344312" lang="cpp" violId="a6123257-0730-3e44-ad10-c188db3c18aa" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="95c90e58-b065-3ea3-8e60-2e4df79d288a" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="9" rule="CERT_C-FIO42-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1112174134" lang="cpp" violId="b90b6865-1a28-32b3-977e-b057d8a8f98c" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="539b7cce-0da4-304d-87af-650a21a06b8f" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="9" rule="CERT_C-MEM00-e" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="116382779" lang="cpp" violId="dfa2c973-5256-3b6a-b6a8-571b378496d4" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="1" locRef="3" tool="c++test" lineHash="125" unbViolId="d2a14424-f261-34d4-b4ab-a817bc14cd39" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="9" rule="CERT_C-MEM12-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="116285462" lang="cpp" violId="4f392253-ad19-321e-86a4-3357ce5b5cb6" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="a2ef6a6e-3abb-365e-9b77-23fa906ae4c9" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="9" rule="CERT_C-MEM31-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="114391825" lang="cpp" violId="2e171809-a5aa-378d-b951-70f47572b4ca" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="b6b8ce4a-e805-3516-bfe8-97e5de0fc6ac" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="9" rule="CERT_C-WIN30-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1055995355" lang="cpp" violId="abd2a077-7195-380e-9308-07787f16e3e4" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="db88af0c-c2e2-312c-bc99-bcf1d1f1d7c7" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="9" rule="CERT_CPP-ERR57-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1542295099" lang="cpp" violId="9d63591a-a5c1-356f-b263-e535b3864ef4" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="88a7638d-a69b-3120-be3b-ee86757b08a2" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="9" rule="CERT_CPP-FIO51-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1119006820" lang="cpp" violId="9cec9c8b-9968-35f0-8057-c37b3a427817" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="ce896e90-56d1-3900-8a24-51f3cebbc58c" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="9" rule="CWE-772-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2027493177" lang="cpp" violId="85685e36-d4de-330d-a161-277893c2f415" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="1" locRef="3" tool="c++test" lineHash="125" unbViolId="9916aeae-f5a1-32d8-a81d-76b27b2b2bc2" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="9" rule="MISRA2012-DIR-4_13_a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/MemoryLeak.cpp" rule.header="All resources obtained dynamically by means of Standard Library functions shall be explicitly released" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1431710396" lang="cpp" violId="80c6bc99-ef56-3af6-83c5-078b4a54c571" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="4" locRef="3" tool="c++test" lineHash="125" unbViolId="5041e25a-9908-35c5-a170-747471404cd7" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="9" rule="MISRA2012-RULE-22_1" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/MemoryLeak.cpp" rule.header="All resources obtained dynamically by means of Standard Library functions shall be explicitly released" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1251621320" lang="cpp" violId="ed4ff792-e6cc-303e-81ee-e643db5cfed8" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="708c92a2-9376-315b-8d88-f6321cc4c450" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="9" rule="MISRAC2012-DIR_4_13-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2127420791" lang="cpp" violId="787fbdd4-d921-3b32-a26d-c2e47ef3fc4a" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="4" locRef="3" tool="c++test" lineHash="125" unbViolId="232f710d-1c26-336a-b0da-831bdfa44d75" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="9" rule="MISRAC2012-RULE_22_1-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1043097931" lang="cpp" violId="64f5e794-51b2-3448-b25c-0ce2bf822a14" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="8b6c3406-94c7-3153-91d0-df6abdf75815" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="9" rule="OWASP2019-API4-b" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1966237325" lang="cpp" violId="da0cb4ab-f478-3ad6-8424-50754ce7563b" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="1" locRef="3" tool="c++test" lineHash="125" unbViolId="d0173919-838e-3695-9065-7c32835779b4" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <MetViol msg="Value 152 is out of acceptable range: 'lower than 50'" ln="1" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="1" sev="3" auth="username" locRef="4" rule="METRIC.NOPLIF" lnHash="329732047" rule.header="Physical Lines in Files" tool="c++test" lineHash="329732047" unbViolId="bc7baa49-8ce8-35ae-9cac-03d85974fdff" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.metrics" lang="cpp" violId="8da22ed1-81d2-3f26-882e-0e248fbd0512" locEndPos="0" locType="sr" hash="-1769734618" locEndLn="2" goals="0," />
    <StdViol msg="The assertion density is lower than two assertions per function" ln="1" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="1" sev="3" auth="username" locRef="4" rule="METRICS-31" lnHash="329732047" rule.header="The assertion density of the code should average to a minimum of two assertions per function" tool="c++test" lineHash="329732047" unbViolId="f3ec5a81-bfce-3dbe-9e38-3c2005ee567a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9234ee1a-2dce-3796-92cd-ad921df8d804" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="The filename 'DeadLock.cpp' should be in lowercase" ln="1" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="1" sev="3" auth="username" locRef="4" rule="NAMING-03" lnHash="329732047" rule.header="Use lowercase for file names" tool="c++test" lineHash="329732047" unbViolId="4e630c4b-a756-3667-9f81-6e60610caf41" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed0939f1-ec9f-391b-ac59-a9f285f63e23" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'DeadLock.cpp' should have the file name extension &quot;.cc&quot;" ln="1" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="1" sev="3" auth="username" locRef="4" rule="NAMING-38" lnHash="329732047" rule.header="Implementation files in C++ always have the file name extension &quot;.cc&quot;" tool="c++test" lineHash="329732047" unbViolId="5d8eca21-86be-35bf-9942-2c50f203ffb5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1b118cd9-b575-3633-beaa-18171efe02c5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'DeadLock.cpp' should declare a local constant string that begins from characters &quot;@(#)&quot; " ln="1" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="1" sev="5" auth="username" locRef="4" rule="PFO-04" lnHash="329732047" rule.header="Every implementation file should declare a local constant string that describes the file" tool="c++test" lineHash="329732047" unbViolId="c1b98e40-eb2c-3a76-902c-d642a9d44a0d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4248dd4b-c48e-3e4f-83d0-5556821340cd" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'DeadLock.cpp'" ln="1" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="1" sev="3" auth="username" locRef="4" rule="COMMENT-02" lnHash="329732047" rule.header="Provide copyright information" tool="c++test" lineHash="329732047" unbViolId="6f215f33-4041-339a-9140-ce4771f7dff1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8785020a-bbc4-3abd-807e-7eea2affb270" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'DeadLock.cpp'" ln="1" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="1" sev="3" auth="username" locRef="4" rule="JSF-133_b" lnHash="329732047" rule.header="Every source file will contain copyright information" tool="c++test" lineHash="329732047" unbViolId="30d0c79e-2919-3383-bdf1-2f563ea7ec39" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e0395e7-ccea-3f9d-94d4-e6ec09858668" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'DeadLock.cpp'" ln="1" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="1" sev="3" auth="username" locRef="4" rule="COMMENT-03" lnHash="329732047" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="329732047" unbViolId="bf397dc3-de18-3f21-bf2f-0c4e70e3a0fd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca0dee4c-9823-3e79-bdb0-edf69dabd939" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'DeadLock.cpp'" ln="1" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="1" sev="3" auth="username" locRef="4" rule="JSF-133_a" lnHash="329732047" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="329732047" unbViolId="4c3fe119-2c9a-3249-9c3d-9fa101117450" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff1ce4cc-8015-3636-a9b1-62d9a5002a05" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Shapes.hpp&quot;" ln="1" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="1" sev="3" auth="username" locRef="4" rule="JSF-032" lnHash="329732047" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="329732047" unbViolId="e2794c5e-7265-3854-9335-c5407896d8d8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0531919d-e1e7-3fe7-86f2-49f694ddd136" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Shapes.hpp&quot;" ln="1" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="1" sev="3" auth="username" locRef="4" rule="PREPROC-08" lnHash="329732047" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="329732047" unbViolId="f5b55aba-b9f2-3379-b223-1c002fa8fc09" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d04ead7-f06e-3eca-bf3c-48ec4307ad4d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;Shapes.hpp&quot;" ln="1" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="1" sev="2" auth="username" locRef="4" rule="PREPROC-09" lnHash="329732047" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="329732047" unbViolId="31bd5fe4-0cc1-3d51-a31e-0c4aea18c2ad" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa61787e-d6e1-38d1-8d4b-2b2b5d87a3aa" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;Shapes.hpp&quot;" ln="1" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="1" sev="2" auth="username" locRef="4" rule="JSF-033" lnHash="329732047" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="329732047" unbViolId="802445af-0854-3752-8a41-13da32d86fff" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c208d4e0-6e07-3039-9e13-257f736f1515" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="#if pre-processor directive should not be used" ln="3" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="3" sev="3" auth="username" locRef="4" rule="PREPROC-10_c" lnHash="-1674050737" rule.header="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1674050737" unbViolId="325cd2b0-fe6a-3c8f-9a69-28f6e2499ebf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94bb4709-c0e1-3f43-8718-ad5e75022dc4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="3" goals="0," />
    <StdViol msg="#if pre-processor directive should not be used" ln="3" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="3" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_1_e" lnHash="-1674050737" rule.header="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1674050737" unbViolId="2e46e92e-f5a4-3060-9fbf-6da83e789819" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ad2c1a4-d825-309c-8762-904a8aa2f7c1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="3" goals="0," />
    <StdViol msg="#if pre-processor directive should not be used" ln="3" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="3" sev="3" auth="username" locRef="4" rule="HICPP-16_1_1-f" lnHash="-1674050737" rule.header="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1674050737" unbViolId="b3a21b83-7ebb-3c39-b664-037f1f8c1c25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a51ff06-970a-33d6-8e40-c3d134c80e94" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="3" goals="0," />
    <StdViol msg="The #if preprocessor directive is used" ln="3" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="3" sev="3" auth="username" locRef="4" rule="PREPROC-11_b" lnHash="-1674050737" rule.header="The #if preprocessor directive should not be used" tool="c++test" lineHash="-1674050737" unbViolId="7fc97f82-541b-3752-917e-079101d22bdd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b67b9474-e69b-32e8-a7a1-babccf7c130a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="3" goals="0," />
    <StdViol msg="The #if preprocessor directive is used" ln="3" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="3" sev="2" auth="username" locRef="4" rule="JSF-026_b" lnHash="-1674050737" rule.header="The #if preprocessor directive should not be used" tool="c++test" lineHash="-1674050737" unbViolId="a83e97ef-39a1-3f7d-bff8-4789f50f6b85" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="58cce51b-a365-3c09-85ed-ab2011922ea9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="3" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="7" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="7" sev="3" auth="username" locRef="4" rule="JSF-031" lnHash="-1431583748" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1431583748" unbViolId="eec5d748-a2cd-32fc-842e-ac020d9e5082" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d6485f7-0fd4-38f0-b07a-92ddd2351fd1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="7" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="7" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="7" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="-1431583748" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1431583748" unbViolId="0c82bf42-9d96-30d4-87c4-03942f0b27c8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8cb8cb4b-e744-3f3e-8935-8e1f1bef2983" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="7" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="7" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="7" sev="3" auth="username" locRef="4" rule="HICPP-16_1_1-a" lnHash="-1431583748" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1431583748" unbViolId="2b978fe4-b0b2-3249-b6db-b4d7a9690d47" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b29cdd3-cb1e-3ef2-999c-b3f835649aa6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="7" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="7" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="7" sev="3" auth="username" locRef="4" rule="PREPROC-01" lnHash="-1431583748" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1431583748" unbViolId="661b8785-b14c-35f8-ac74-8a81d07b0d4d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8bc16a7c-26a2-3759-880a-d74f8c7657a9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="7" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="7" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="7" sev="2" auth="username" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="-1431583748" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1431583748" unbViolId="92f7a419-7fc1-332e-8bdd-565e0bacfc3d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24542367-3a37-3efe-a95d-049fc3386673" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="7" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'THREAD'" ln="7" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="7" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_2" lnHash="-1431583748" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1431583748" unbViolId="4421f4cd-b860-3bd6-a6ff-40bbfb157682" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0da5f10c-7ae7-362a-be5d-9bcb861c0338" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="7" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'THREAD'" ln="7" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="7" sev="3" auth="username" locRef="4" rule="PREPROC-12" lnHash="-1431583748" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1431583748" unbViolId="bc0b7385-7136-3369-bfd5-fa14878b50a6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c482f84-b3b6-35dc-af97-21adf06c3c27" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="7" goals="0," />
    <StdViol msg="Not all body of macro 'THREAD' is enclosed in braces" ln="7" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="7" sev="3" auth="username" locRef="4" rule="PREPROC-14" lnHash="-1431583748" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-1431583748" unbViolId="5d39f80f-4d72-3a80-8747-49ffa1c7a6cd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4301f784-d090-3396-996d-8da6b1f38d01" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="7" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="8" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="8" sev="3" auth="username" locRef="4" rule="JSF-031" lnHash="-823604806" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-823604806" unbViolId="21f0d25b-28d5-3309-ab25-14be2d587392" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7279c181-0cf8-3fad-a924-ff910fe5352f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="8" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="8" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="8" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="-823604806" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-823604806" unbViolId="d43835e5-5265-30d0-a82f-8746fa08fcf9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed4435b9-c603-3c5f-91b7-ebfbeb47fe71" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="8" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="8" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="8" sev="3" auth="username" locRef="4" rule="HICPP-16_1_1-a" lnHash="-823604806" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-823604806" unbViolId="e34af878-a83a-33c7-94c0-9dfadc2654ef" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5c22e12-84b4-32be-9a22-24fe39135640" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="8" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="8" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="8" sev="3" auth="username" locRef="4" rule="PREPROC-01" lnHash="-823604806" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-823604806" unbViolId="80f61817-5cea-3bbc-89c8-8ce15989c4c5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a7db7c0-8bb1-3374-97e3-adf154cf6feb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="8" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="8" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="8" sev="2" auth="username" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="-823604806" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-823604806" unbViolId="d67ff130-d482-3f3d-b4b2-8fd35d1a218a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17df8a91-d664-3b1d-9477-c511935db180" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="8" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'THREAD_RETURN_TYPE'" ln="8" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="8" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_2" lnHash="-823604806" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-823604806" unbViolId="c0a06279-3361-3b5e-a082-d1310cfb5d01" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="adebf9e0-acde-3d94-ae94-e6dac2fe8517" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="8" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'THREAD_RETURN_TYPE'" ln="8" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="8" sev="3" auth="username" locRef="4" rule="PREPROC-12" lnHash="-823604806" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-823604806" unbViolId="7af325f4-3e2d-389f-8f6a-736127fb296b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9fb1fc50-f5c2-3f6a-acfc-2b3106610335" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="8" goals="0," />
    <StdViol msg="Not all body of macro 'THREAD_RETURN_TYPE' is enclosed in braces" ln="8" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="8" sev="3" auth="username" locRef="4" rule="PREPROC-14" lnHash="-823604806" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-823604806" unbViolId="9b38ecc8-8688-36d1-9669-a7cbf4e448a9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="66d84555-f67f-3865-b71d-37b1d8c2738a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="8" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="2" auth="username" locRef="4" rule="MISRA2008-16_0_4" lnHash="371252460" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="371252460" unbViolId="96f9d246-7ef3-3880-a62c-0ab9cce8e2f2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51aca382-0c84-361f-8dee-d00c5c27a4d6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="4" auth="username" locRef="4" rule="MISRAC2012-DIR_4_9-a" lnHash="371252460" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="371252460" unbViolId="973f9437-ac51-38cb-ba2c-2d72545c6496" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97203d27-e3b1-32c4-8184-c271d72fad88" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="3" auth="username" locRef="4" rule="MISRA2004-19_7" lnHash="371252460" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="371252460" unbViolId="9c71f73a-294a-3a7b-bd20-94ec7374241e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5cfd54e0-2430-3b28-be37-2f8d5e8b0b88" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="2" auth="username" locRef="4" rule="JSF-029" lnHash="371252460" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="371252460" unbViolId="ac073b37-f7dd-3418-96df-9b5300dc9250" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4157a7e-996a-31dc-a419-a11f38f17ce2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="4" auth="username" locRef="4" rule="MISRA2012-DIR-4_9" lnHash="371252460" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="371252460" unbViolId="ac5d985e-be26-34f3-9ef3-cd62a9b672ea" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b96f0fba-1c9d-3b9d-aed8-a50763041eb7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="3" auth="username" locRef="4" rule="CERT_C-PRE00-a" lnHash="371252460" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="371252460" unbViolId="c6265757-e276-3a19-b2d4-3a95402f27d3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9dbe6100-3e86-3532-a2c6-8a2290020104" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Body of macro 'THREAD_CREATE' is defined without parentheses" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="3" auth="username" locRef="4" rule="MISRA-096" lnHash="371252460" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="371252460" unbViolId="ed33cb6f-68f1-31a3-86a3-d6de70d4e5be" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe0b6703-3c12-3997-aa33-455d3b441eed" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Body of macro 'THREAD_CREATE' is defined without parentheses" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="1" auth="username" locRef="4" rule="CERT_C-PRE02-a" lnHash="371252460" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="371252460" unbViolId="dd34b18a-49ff-3b3f-b49d-6d60c20bd603" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a093eab9-bab6-3d1d-b74f-29b273e2422f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="3" auth="username" locRef="4" rule="JSF-031" lnHash="371252460" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="371252460" unbViolId="49f75e3c-68c6-348f-980a-7727edce800a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06d2dbdd-03fe-33a1-bf0f-77acc692bf19" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="371252460" rule.header="Avoid using macro definitions" tool="c++test" lineHash="371252460" unbViolId="84416e9b-9414-3590-9e54-317796b76257" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26c51e9f-c2e9-3eab-993c-77444fbdf1e3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="3" auth="username" locRef="4" rule="HICPP-16_1_1-a" lnHash="371252460" rule.header="Avoid using macro definitions" tool="c++test" lineHash="371252460" unbViolId="cb77baff-1248-3a25-a4f3-c833f494ea53" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="32554738-91df-3f27-8d7c-913602b4de2f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="3" auth="username" locRef="4" rule="PREPROC-01" lnHash="371252460" rule.header="Avoid using macro definitions" tool="c++test" lineHash="371252460" unbViolId="63080bf8-4c85-327d-ab88-b5090ac1b2da" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="271a9c27-cda3-3b6f-bdc7-be48528f2165" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="2" auth="username" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="371252460" rule.header="Avoid using macro definitions" tool="c++test" lineHash="371252460" unbViolId="f83fc3b1-08b3-3f44-b101-20cfa81d8b72" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0fd88245-85df-3e72-8729-f244fd1fba69" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_2" lnHash="371252460" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="371252460" unbViolId="02b7b55f-4bbd-3bf5-a948-f06ed5786358" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fcebfc84-2015-3844-aff1-c79d8f4b9520" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="3" auth="username" locRef="4" rule="PREPROC-12" lnHash="371252460" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="371252460" unbViolId="8043ae02-edba-3615-952c-66c73037772a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5878aca-386e-3238-b8a9-b1fb08f5cb3e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Not all body of macro 'THREAD_CREATE' is enclosed in braces" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="3" auth="username" locRef="4" rule="PREPROC-14" lnHash="371252460" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="371252460" unbViolId="a036fa09-2ad0-32f1-96b9-d83ec1cf72f9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61eb4ee5-d520-3209-9ba7-5935ee4e0c01" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="3" auth="username" locRef="4" rule="MISRA2004-19_10" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="37124bfc-6d8f-3f5f-a639-85c3a09a16de" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fdcd33b1-427b-36ab-aa81-41cc375e2996" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="2" auth="username" locRef="4" rule="MISRA2008-16_0_6" lnHash="371252460" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="9220c1d4-2e1a-3ee5-b823-24cbf36787b4" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e205c07f-1b0a-3d88-9e24-363cdcb339fe" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-20_7" lnHash="371252460" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="371252460" unbViolId="f675aef4-c8b3-3074-9760-c786eb4d0a9f" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1fc64fe9-2f8d-3531-87c7-c40e9f06867d" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="2" auth="username" locRef="4" rule="AUTOSAR-M16_0_6-a" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="9c78316e-a622-3f3b-bb39-e18e6ec6b235" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="faa05d17-b6ad-302d-9f14-4ab3d1e967f5" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="1" auth="username" locRef="4" rule="CERT_C-PRE01-a" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="69a0537b-b0b2-3382-8467-c227e4df17b0" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6efbd26f-6150-35d3-b5f3-089d967d0b5d" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_20_7-a" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="4fd2bcd1-2259-3352-9da6-196d9dbe5d63" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce3ff71e-8aeb-3511-9024-af931236358f" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="3" auth="username" locRef="4" rule="MISRA2004-19_10" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="dd7328e8-4167-30e4-9267-191c91918573" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3b26664-7b13-36d8-b227-296da17f5b17" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="2" auth="username" locRef="4" rule="MISRA2008-16_0_6" lnHash="371252460" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="b6be88e4-0d60-3f6c-b7e3-b4f8f4ca3639" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b914c393-773a-3683-931c-daf30e466a4a" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-20_7" lnHash="371252460" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="371252460" unbViolId="55beade5-ee01-3613-92bc-f79443323314" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31179df6-15f8-3a8f-b17b-ea961e0e21fe" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="2" auth="username" locRef="4" rule="AUTOSAR-M16_0_6-a" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="65cf5010-2110-3c64-acc8-488da2c0e85b" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bfe88544-f78c-39be-8f09-8bff0046150d" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="1" auth="username" locRef="4" rule="CERT_C-PRE01-a" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="e7758f4b-ed27-3ed6-96a0-238f3605a59c" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4cd5669d-d222-38d4-8466-b60106416811" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="9" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="9" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_20_7-a" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="439f82fb-d335-3913-addd-1b39aec7df6a" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb95e931-32a4-3967-afe6-d8efc0141eeb" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="11" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="11" sev="3" auth="username" locRef="4" rule="JSF-031" lnHash="1036666232" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1036666232" unbViolId="7a5aad8a-31f1-31ec-8a8d-7021ee91375c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9b53398-a87a-33cb-bb71-b0539289517e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="11" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="11" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="11" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="1036666232" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1036666232" unbViolId="75506812-294e-38b5-9834-b47ca37b08f1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e01efa2e-6c1e-3778-aa8b-77e6d49872a2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="11" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="11" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="11" sev="3" auth="username" locRef="4" rule="HICPP-16_1_1-a" lnHash="1036666232" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1036666232" unbViolId="5a1623c3-5d7d-3457-b282-de4cd60246d3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="abbca783-e93b-330e-a912-d497cece61cb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="11" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="11" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="11" sev="3" auth="username" locRef="4" rule="PREPROC-01" lnHash="1036666232" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1036666232" unbViolId="d11bec16-f6f8-3ae5-acbf-2e82d23da2df" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ee2dd2a-9163-34e5-9a53-8e86f4eb6a5f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="11" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="11" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="11" sev="2" auth="username" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="1036666232" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1036666232" unbViolId="9d548588-f9d3-3e60-ae31-8aa262b430ff" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be742398-ddd8-325d-a97a-ae966d2b0aaf" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="11" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'LOCK'" ln="11" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="11" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_2" lnHash="1036666232" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="1036666232" unbViolId="15757042-c0f8-3380-8b5c-765af27649d7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9122be6c-890d-38c8-9d41-a38b7b1880dc" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="11" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'LOCK'" ln="11" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="11" sev="3" auth="username" locRef="4" rule="PREPROC-12" lnHash="1036666232" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="1036666232" unbViolId="fabb2439-0d7c-3c88-84db-e039a2dd820e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1d903a9-949e-3019-acca-49de7f8b1635" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="11" goals="0," />
    <StdViol msg="Not all body of macro 'LOCK' is enclosed in braces" ln="11" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="11" sev="3" auth="username" locRef="4" rule="PREPROC-14" lnHash="1036666232" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="1036666232" unbViolId="cefbce8b-03d1-36cb-b890-ee9a680e7bd4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="82a351a2-56b4-31a7-a64e-4f4c5392b57b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="11" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="12" sev="2" auth="username" locRef="4" rule="MISRA2008-16_0_4" lnHash="-632529940" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="-632529940" unbViolId="e3792aca-b342-38ea-ab87-166d25212ef4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26453861-447e-355b-9bb2-3f548572430e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="12" sev="4" auth="username" locRef="4" rule="MISRAC2012-DIR_4_9-a" lnHash="-632529940" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-632529940" unbViolId="157bedde-d5e2-3724-a836-ab3d8fea6d78" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9daa8223-26fe-35a3-b4f7-14e1b8948fc4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="12" sev="3" auth="username" locRef="4" rule="MISRA2004-19_7" lnHash="-632529940" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-632529940" unbViolId="e8c85ede-b818-367a-a096-3c4c7a19a83f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38db8159-8277-364a-937b-e624f6325c2e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="12" sev="2" auth="username" locRef="4" rule="JSF-029" lnHash="-632529940" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="-632529940" unbViolId="81bd5a62-e11a-3bab-a922-dde28c6bf617" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ac03bab-eb3c-38b3-a7ed-de47bdfc9109" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="12" sev="4" auth="username" locRef="4" rule="MISRA2012-DIR-4_9" lnHash="-632529940" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="-632529940" unbViolId="277c5a34-2c35-3aa8-b51b-554de5a1539b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eefed4ca-e3eb-3707-a6ec-bd606f1d9b70" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="12" sev="3" auth="username" locRef="4" rule="CERT_C-PRE00-a" lnHash="-632529940" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-632529940" unbViolId="70b6f874-6de4-3fff-b17b-304a49686e32" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00866a4c-7e79-35b5-8883-60df97d3db77" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Body of macro 'LOCK_ACQUIRE' is defined without parentheses" ln="12" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="12" sev="3" auth="username" locRef="4" rule="MISRA-096" lnHash="-632529940" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-632529940" unbViolId="f4f8a823-f54f-3fbe-9765-e55b7faf4000" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf969174-328f-3c99-ad2e-e8726278d817" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Body of macro 'LOCK_ACQUIRE' is defined without parentheses" ln="12" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="12" sev="1" auth="username" locRef="4" rule="CERT_C-PRE02-a" lnHash="-632529940" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-632529940" unbViolId="7c19c748-87b2-38f6-a9ee-a59d90c3beee" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f82c17b-2227-3852-8f7d-baa54b6971dd" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="12" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="12" sev="3" auth="username" locRef="4" rule="JSF-031" lnHash="-632529940" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-632529940" unbViolId="be823ce8-f0f2-3e59-a0d3-8a7a2ad95428" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="edc1cbe2-61ec-3f84-aafd-73d1965e0937" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="12" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="12" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="-632529940" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-632529940" unbViolId="ee11ba09-e6af-3fb8-8da3-c79366f02507" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69b4dfb2-97a4-3c52-8d5e-99e7f688f3e4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="12" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="12" sev="3" auth="username" locRef="4" rule="HICPP-16_1_1-a" lnHash="-632529940" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-632529940" unbViolId="82f5239b-8532-307c-a2b3-a5c62e84ec15" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85c176a9-c09a-32a2-be31-63a1c5cdb8df" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="12" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="12" sev="3" auth="username" locRef="4" rule="PREPROC-01" lnHash="-632529940" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-632529940" unbViolId="1ad82eee-14d2-3bf7-96c2-5e2022ead822" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87239f44-e46d-38b6-8c8c-ec24f0356b66" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="12" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="12" sev="2" auth="username" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="-632529940" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-632529940" unbViolId="33fa5340-f800-352b-9f4b-8b8122bcba37" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12568936-255b-3eff-a43d-a1195c6468b7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="12" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_2" lnHash="-632529940" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-632529940" unbViolId="dda3b83a-90d4-33b9-a37b-0a2813be0f06" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="258f8bb2-eec7-3ec1-b668-d9d806d0bc4a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="12" sev="3" auth="username" locRef="4" rule="PREPROC-12" lnHash="-632529940" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-632529940" unbViolId="4a664750-abec-3017-96ba-d93026e391a6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88f792e4-815a-37a3-ab94-f96c40034c14" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Not all body of macro 'LOCK_ACQUIRE' is enclosed in braces" ln="12" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="12" sev="3" auth="username" locRef="4" rule="PREPROC-14" lnHash="-632529940" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-632529940" unbViolId="bc3b9a86-8890-34c0-988d-ccaa7c6d759a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ab55011-fee2-3d74-9951-09fae349fed2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="12" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="12" sev="3" auth="username" locRef="4" rule="MISRA2004-19_10" lnHash="-632529940" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-632529940" unbViolId="e7bf40dd-c6e2-3378-b652-bb7c2db70a5d" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="838f310a-6a8a-3101-9bc7-466fa2d32e93" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="12" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="12" sev="2" auth="username" locRef="4" rule="MISRA2008-16_0_6" lnHash="-632529940" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="-632529940" unbViolId="f635e157-3718-3a19-9f81-c00b944f3b98" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31234fac-3040-3d15-add7-8e4c937ec739" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="12" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="12" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-20_7" lnHash="-632529940" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="-632529940" unbViolId="6126b276-0002-3521-9582-035b0ba8ef95" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba90aaf3-c84a-3d1f-9178-9de24e869601" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="12" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="12" sev="2" auth="username" locRef="4" rule="AUTOSAR-M16_0_6-a" lnHash="-632529940" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-632529940" unbViolId="23bd2bf2-b076-3315-98ed-20c0b010cab8" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e45c66a-a826-3fd6-8e07-eea8ba386a79" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="12" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="12" sev="1" auth="username" locRef="4" rule="CERT_C-PRE01-a" lnHash="-632529940" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-632529940" unbViolId="b15b9111-6d37-3e78-8920-06c9591d7329" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="19444ff3-b905-343d-8c4b-723a932c4280" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="12" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="12" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_20_7-a" lnHash="-632529940" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-632529940" unbViolId="a169361b-8f5a-34da-8ad4-a821a64ce807" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3e30749-343c-3fca-a317-286fdf002bbf" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="13" sev="2" auth="username" locRef="4" rule="MISRA2008-16_0_4" lnHash="1552981372" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="1552981372" unbViolId="dd049afc-ed46-36a8-9e9e-4b022aa1c556" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99ee2dad-4d04-3925-b4fa-aecb088eb671" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="13" sev="4" auth="username" locRef="4" rule="MISRAC2012-DIR_4_9-a" lnHash="1552981372" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="1552981372" unbViolId="2bd1a3d8-3088-3ccb-b55b-0b7a0c10954c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27090785-6fd9-3d98-abfb-e1825de5fd77" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="13" sev="3" auth="username" locRef="4" rule="MISRA2004-19_7" lnHash="1552981372" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="1552981372" unbViolId="f0d48499-b85c-3b9b-8510-83b30a9b9855" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5202d63d-9568-39d8-887c-cc790111832b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="13" sev="2" auth="username" locRef="4" rule="JSF-029" lnHash="1552981372" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="1552981372" unbViolId="b9768977-fadd-33f0-b20e-604a538fba5f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3eaab770-1c3d-3dfb-a499-92342443d42d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="13" sev="4" auth="username" locRef="4" rule="MISRA2012-DIR-4_9" lnHash="1552981372" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="1552981372" unbViolId="acfba28f-0a9c-38ce-aaa8-91d73423f725" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="34427052-c079-3034-8474-d6fb715695b6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="13" sev="3" auth="username" locRef="4" rule="CERT_C-PRE00-a" lnHash="1552981372" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="1552981372" unbViolId="99385836-3f39-3fba-9207-55b48c37d486" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f44bb0e3-fbd6-3a45-8240-0ffaaa79c73d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Body of macro 'LOCK_RELEASE' is defined without parentheses" ln="13" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="13" sev="3" auth="username" locRef="4" rule="MISRA-096" lnHash="1552981372" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="1552981372" unbViolId="20c562a2-61ad-3486-80bc-6093f054bcdf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="202446c5-3a08-324c-9735-7e130354860c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Body of macro 'LOCK_RELEASE' is defined without parentheses" ln="13" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="13" sev="1" auth="username" locRef="4" rule="CERT_C-PRE02-a" lnHash="1552981372" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="1552981372" unbViolId="aa3acbf1-10b1-3f68-98bd-ea3bf1f81de3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0bee258-8229-3dbd-b740-8df65d3ae561" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="13" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="13" sev="3" auth="username" locRef="4" rule="JSF-031" lnHash="1552981372" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1552981372" unbViolId="fe6388ea-4e5f-37f4-aeba-f9f5a7ebe59b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="def9d0d9-765b-3e68-a0e2-a337f6e2aaa7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="13" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="13" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="1552981372" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1552981372" unbViolId="f8e437ef-9c62-3432-b756-64deb263448c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8584db33-2faf-373a-ad24-75737ba2ab4a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="13" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="13" sev="3" auth="username" locRef="4" rule="HICPP-16_1_1-a" lnHash="1552981372" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1552981372" unbViolId="e522d259-f196-3c34-a71e-bd05d5818bc7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6f8d527-4ce1-3827-8f08-1b1ab2f8eea7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="13" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="13" sev="3" auth="username" locRef="4" rule="PREPROC-01" lnHash="1552981372" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1552981372" unbViolId="308000e3-f3ae-3278-9012-f5230f750049" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa296b00-4570-30fc-8d77-b39645770233" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="13" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="13" sev="2" auth="username" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="1552981372" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1552981372" unbViolId="05d6f2aa-f338-399b-a81c-439e9793bb0f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f0d406c-a871-3f13-b674-675238f810b9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="13" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_2" lnHash="1552981372" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="1552981372" unbViolId="f4704636-3b4e-30bf-aa9a-9467b938f88f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a7fa442-b9bb-364f-9eb2-34a3c0415582" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="13" sev="3" auth="username" locRef="4" rule="PREPROC-12" lnHash="1552981372" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="1552981372" unbViolId="ac77dd88-a11a-3112-a01f-9d558ff9d2c9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1837bf66-212b-3db1-99f6-8eaaab72fc14" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Not all body of macro 'LOCK_RELEASE' is enclosed in braces" ln="13" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="13" sev="3" auth="username" locRef="4" rule="PREPROC-14" lnHash="1552981372" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="1552981372" unbViolId="863e1ed6-a57b-39c9-8b9b-b9f2682297aa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76a58b33-5d04-34a9-b50b-dbb9b9a57d0d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="13" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="13" sev="3" auth="username" locRef="4" rule="MISRA2004-19_10" lnHash="1552981372" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="1552981372" unbViolId="5b5c32d1-2ce7-3de5-a9a5-18f1f6c42af2" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54f507a1-be64-381f-ba75-14d2ca366497" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="13" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="13" sev="2" auth="username" locRef="4" rule="MISRA2008-16_0_6" lnHash="1552981372" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="1552981372" unbViolId="81c21f69-5534-3909-b833-c38aebad45c1" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef60c5ed-b91c-3a5b-b3f5-cb94ddc1c0eb" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="13" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="13" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-20_7" lnHash="1552981372" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="1552981372" unbViolId="0cad1781-cb71-3c24-9829-a114887c09f9" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2c0f7f0-4511-39c3-958b-e8ca961e970d" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="13" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="13" sev="2" auth="username" locRef="4" rule="AUTOSAR-M16_0_6-a" lnHash="1552981372" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="1552981372" unbViolId="4eff27a1-38c3-3c8b-afb5-784464c98a5b" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0937a6c-8f67-3b4a-b4e4-82ac4afc27ef" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="13" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="13" sev="1" auth="username" locRef="4" rule="CERT_C-PRE01-a" lnHash="1552981372" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="1552981372" unbViolId="ce4ada00-b2b2-3372-88f3-1c34fe23cb52" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ff53df1-f8ef-3c89-b7c2-da72acf1e13c" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="13" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="13" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_20_7-a" lnHash="1552981372" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="1552981372" unbViolId="3cccadad-108d-3ebd-94cb-755ebf6ac42d" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27f44e5d-ee9f-30d3-baeb-c259a5e0584b" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="15" sev="2" auth="username" locRef="4" rule="MISRA2008-16_0_4" lnHash="-477159842" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="-477159842" unbViolId="77686f78-7f50-3277-ad0a-a2564b178aa5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e03bfdd3-9cde-3fb1-a4dd-4055ccd216c9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="15" sev="4" auth="username" locRef="4" rule="MISRAC2012-DIR_4_9-a" lnHash="-477159842" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-477159842" unbViolId="91b1017c-a05d-3c18-94e1-a3a470778da1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00e6be35-d6f0-3b32-9589-be45d6fce926" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="15" sev="3" auth="username" locRef="4" rule="MISRA2004-19_7" lnHash="-477159842" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-477159842" unbViolId="f963dde5-c566-34c8-8046-7897ca3003f1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2bfc2fca-b313-3a95-bb0d-71ae2af1d4f4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="15" sev="2" auth="username" locRef="4" rule="JSF-029" lnHash="-477159842" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="-477159842" unbViolId="e222267d-a5bb-3740-a383-2f05bab0e862" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ea1f129-21bc-3c97-ab82-62842fb0e523" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="15" sev="4" auth="username" locRef="4" rule="MISRA2012-DIR-4_9" lnHash="-477159842" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="-477159842" unbViolId="ec70d872-bb1d-3a14-bd93-fd274333b928" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b99c1283-72f6-345d-8f81-c1e3acd1698b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="15" sev="3" auth="username" locRef="4" rule="CERT_C-PRE00-a" lnHash="-477159842" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-477159842" unbViolId="d9703969-6253-3e3a-a40f-0b4cbd861f92" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd77c026-805a-35d1-bda7-6761b1834e03" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Body of macro 'SLEEP' is defined without parentheses" ln="15" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="15" sev="3" auth="username" locRef="4" rule="MISRA-096" lnHash="-477159842" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-477159842" unbViolId="3f7352f3-242e-3ac3-a912-722f78376097" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a157743-d7c0-3b81-a0aa-5a32d25bd32b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Body of macro 'SLEEP' is defined without parentheses" ln="15" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="15" sev="1" auth="username" locRef="4" rule="CERT_C-PRE02-a" lnHash="-477159842" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-477159842" unbViolId="a2402831-827d-315f-87d2-f683e13662d3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a5039c9-6680-3b7a-917c-6113b5566f19" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="15" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="15" sev="3" auth="username" locRef="4" rule="JSF-031" lnHash="-477159842" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-477159842" unbViolId="7c0fb735-5893-3691-b385-7d07e29cb4d1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a335a718-92e5-3143-82b3-99ee7b23cdad" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="15" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="15" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="-477159842" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-477159842" unbViolId="1be07907-78ea-3d83-8d02-be1d609d8b3a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="113a3dd2-bd8d-3fbf-83a1-a952569f0eef" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="15" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="15" sev="3" auth="username" locRef="4" rule="HICPP-16_1_1-a" lnHash="-477159842" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-477159842" unbViolId="2f2f0638-d454-3cd3-91b7-f581af02f383" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="58545afb-d72d-37cc-aca8-fb23b9a04cd3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="15" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="15" sev="3" auth="username" locRef="4" rule="PREPROC-01" lnHash="-477159842" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-477159842" unbViolId="fd31e419-37ec-3b7a-a69d-7b81ef697d84" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="098a3d46-598b-3361-af8f-66eaafcfc04d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="15" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="15" sev="2" auth="username" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="-477159842" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-477159842" unbViolId="c0b6b5af-896a-3681-9d51-2aab728efafa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="672c0363-5c9e-3f36-ab5b-979d8ec83bca" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="15" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_2" lnHash="-477159842" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-477159842" unbViolId="73d662e9-2a11-3831-8248-36d571292dc2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d7fb501-b8ff-3c43-9888-1dbd763d14cf" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="15" sev="3" auth="username" locRef="4" rule="PREPROC-12" lnHash="-477159842" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-477159842" unbViolId="fc41295f-cc87-3cdc-908e-5c53a4d5cc86" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4dd2ca48-4f80-336e-a59f-4b4387c71eb8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Not all body of macro 'SLEEP' is enclosed in braces" ln="15" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="15" sev="3" auth="username" locRef="4" rule="PREPROC-14" lnHash="-477159842" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-477159842" unbViolId="7056640b-7e4d-378b-aeb3-d148472c4e1e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff87ed9a-880f-3bcb-a707-592b22e920b8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="17" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="17" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_1_c" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="1943c513-7f53-3ccd-bc00-0b1825763a68" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9d85f8a-2a8a-320b-a629-4f55c5b2163b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="17" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="17" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="17" sev="3" auth="username" locRef="4" rule="HICPP-16_1_1-c" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="a5e8a2eb-8195-3664-a883-ea244f4df570" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c580360-9688-3ccd-8bbf-dffc94bcf83b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="17" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="17" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="17" sev="2" auth="username" locRef="4" rule="JSF-026" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="bca6770c-3751-330e-a853-fccb8d9a99b6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9f42930-9c80-31d2-96a2-217f900c50bd" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="17" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="17" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="17" sev="3" auth="username" locRef="4" rule="PREPROC-11" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="ed7b2952-614f-3755-a4c4-cfc27977ec2d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31abd44d-cdea-3a03-a7bd-f4214707bd77" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="17" goals="0," />
    <StdViol msg="#if pre-processor directive should not be used" ln="19" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="19" sev="3" auth="username" locRef="4" rule="PREPROC-10_c" lnHash="-343784077" rule.header="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-343784077" unbViolId="d6d6e80b-7830-3e48-a01f-d7680b8dd081" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f15de5e-c32e-3fdd-8f41-478641e4691e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="19" goals="0," />
    <StdViol msg="#if pre-processor directive should not be used" ln="19" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="19" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_1_e" lnHash="-343784077" rule.header="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-343784077" unbViolId="09fb2715-1035-352c-8bc2-62ddb319dbf6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1077287c-2498-35ec-b2ba-66143bfe64a7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="19" goals="0," />
    <StdViol msg="#if pre-processor directive should not be used" ln="19" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="19" sev="3" auth="username" locRef="4" rule="HICPP-16_1_1-f" lnHash="-343784077" rule.header="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-343784077" unbViolId="0798bb79-2f10-3c08-8443-bea10e78c2f5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="269fd25e-584a-3ee7-9aa8-497a63877e25" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="19" goals="0," />
    <StdViol msg="The #if preprocessor directive is used" ln="19" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="19" sev="3" auth="username" locRef="4" rule="PREPROC-11_b" lnHash="-343784077" rule.header="The #if preprocessor directive should not be used" tool="c++test" lineHash="-343784077" unbViolId="e0138bdc-36dd-3e14-ae9d-93919859e49d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a0ddfaf-886f-37d5-bf46-3f410101855e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="19" goals="0," />
    <StdViol msg="The #if preprocessor directive is used" ln="19" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="19" sev="2" auth="username" locRef="4" rule="JSF-026_b" lnHash="-343784077" rule.header="The #if preprocessor directive should not be used" tool="c++test" lineHash="-343784077" unbViolId="2dabd165-b089-3ef2-9ad3-bed938200d36" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db847f1e-6d1b-32df-86e9-7bd721e06371" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="19" goals="0," />
    <StdViol msg="Line has over 79 characters" ln="19" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="19" sev="3" auth="username" locRef="4" rule="FORMAT-04" lnHash="-343784077" rule.header="Physical lines should be less than eighty characters" tool="c++test" lineHash="-343784077" unbViolId="f8af28a6-e2df-3b75-8507-27630bd619d4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ec508d66-aa28-310b-9837-e6b9c15a9dc0" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="19" goals="0," />
    <StdViol msg="Line contains more than 120 characters: 302" ln="19" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="19" sev="3" auth="username" locRef="4" rule="JSF-041" lnHash="-343784077" rule.header="Source lines will be kept to a length of 120 characters or less" tool="c++test" lineHash="-343784077" unbViolId="ace71a8b-c3b6-3f63-98ee-b206080f54fd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2412df8c-56e2-3729-b50f-c7ad67246962" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="19" goals="0," />
    <StdViol msg="Line contains more than 120 characters: 302" ln="19" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="19" sev="3" auth="username" locRef="4" rule="METRICS-26" lnHash="-343784077" rule.header="Source lines will be kept to a length of 120 characters or less" tool="c++test" lineHash="-343784077" unbViolId="1dd15100-7bc2-3d17-b861-7242692706e8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e57ec09d-1043-3a59-9c30-8d0c7357cd56" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="19" goals="0," />
    <StdViol msg="Do not use platform-specific multi-threading facilities: &lt;pthread.h>" ln="21" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="21" sev="3" auth="username" locRef="4" rule="HICPP-18_1_1-a" lnHash="-1671860853" rule.header="Do not use platform-specific multi-threading facilities" tool="c++test" lineHash="-1671860853" unbViolId="bcff4631-3681-3dc6-96b4-9ee84d17bdc0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6130ce2b-1e82-3079-b90d-0c1a2f103bf4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="21" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="24" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="24" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_1_c" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="d7a7dcfa-bffe-3f59-9e3c-a94ed08ff6fd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3153e7c-b4ec-3597-8453-e9750da570cf" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="24" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="24" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="24" sev="3" auth="username" locRef="4" rule="HICPP-16_1_1-c" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="9f701407-585b-30f2-8a25-651b4a026a4b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ec85928-e6a6-32f1-a2ee-b46954c811fe" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="24" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="24" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="24" sev="2" auth="username" locRef="4" rule="JSF-026" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="95de5466-6e12-3ec5-8c93-50022c6a49a0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f666bf83-df25-326d-a389-b02eafb37242" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="24" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="24" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="24" sev="3" auth="username" locRef="4" rule="PREPROC-11" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="19b94bcc-ac0e-3e47-9b35-e381708d8c55" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf60cc94-8912-3993-9a7e-fab97c4e84e8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="24" goals="0," />
    <StdViol msg="#else pre-processor directive should not be used" ln="24" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="24" sev="3" auth="username" locRef="4" rule="PREPROC-26" lnHash="35439580" rule.header="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" tool="c++test" lineHash="35439580" unbViolId="f9d2d4d6-b769-39b0-a2d9-8f4c0f84b6c2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="28e9b359-99ee-3d75-b77f-071254d7a14d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="24" goals="0," />
    <StdViol msg="#else pre-processor directive should not be used" ln="24" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="24" sev="2" auth="username" locRef="4" rule="AUTOSAR-A16_0_1-a" lnHash="35439580" rule.header="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" tool="c++test" lineHash="35439580" unbViolId="a9a5e097-dcde-344b-8c1c-87b7d44024c9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f7b8b0a-8eb6-3488-9b55-2a7d64885cc4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="24" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="30" sev="4" auth="username" locRef="4" rule="MISRA2008-3_9_2" lnHash="-770959773" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-770959773" unbViolId="2bc24680-df50-38ce-8d91-9f222c9cc057" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18761839-65b0-3985-b5a5-dc46ecdbf0dd" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="30" sev="3" auth="username" locRef="4" rule="MISRA-013" lnHash="-770959773" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-770959773" unbViolId="61c29262-6ffc-3574-aee1-824d41ad6419" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b575b3e-eb6b-3066-9088-0f3fabab34a4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="30" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="30" sev="3" auth="username" locRef="4" rule="CODSTA-223" lnHash="-770959773" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-770959773" unbViolId="6b39330c-10f8-3d57-a4c2-3190f58ed9cf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba2c1fb0-3421-3d15-8005-dea285f32525" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="30" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="30" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="-770959773" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-770959773" unbViolId="49813156-e4b9-3a2a-a28a-281f9b39593a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ed0c2dd-5131-3eb3-b114-063a10ea59d4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="30" sev="3" auth="username" locRef="4" rule="HICPP-7_1_6-b" lnHash="-770959773" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-770959773" unbViolId="a0064fc0-a8fa-3620-98d5-4abf5321f5f7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40ebc0a3-9976-3efa-9f3e-e61fd43e6b11" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="30" sev="4" auth="username" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="-770959773" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-770959773" unbViolId="3dae2be4-a3ef-3c7f-b0cf-c996948114ba" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7df4cb61-d123-328d-8c80-f49861eabbcb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="30" sev="3" auth="username" locRef="4" rule="MISRA2004-6_3_b" lnHash="-770959773" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-770959773" unbViolId="102cd383-5992-35ab-a4c3-5ee89ccc0185" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2275c890-d7ce-3c0a-8144-e84c72c58f7a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="30" sev="2" auth="username" locRef="4" rule="JSF-209_b" lnHash="-770959773" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-770959773" unbViolId="3688d94a-5378-3a9d-8561-dec9da472e1e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69f75450-ac9f-38ad-b621-ae7d3f7e2265" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="30" sev="4" auth="username" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="-770959773" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-770959773" unbViolId="c237763b-3238-3ed0-8f38-7eb271a4b1ef" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ffca727d-8415-3919-9ede-40bfb2f86c1a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="30" sev="3" auth="username" locRef="4" rule="HICPP-3_5_1-b" lnHash="-770959773" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-770959773" unbViolId="d370ca46-04bf-3552-9a41-c801855579a9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="45b21420-55b4-3937-afd9-2a961882d628" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="35" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="35" sev="3" auth="username" locRef="4" rule="CODSTA-223" lnHash="-1338521823" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1338521823" unbViolId="e088b742-db5b-324e-8f42-fccb9cf00871" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b9542ba-c77d-3d41-b674-f371e1567425" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="35" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="35" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="-1338521823" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1338521823" unbViolId="c8f5ebd1-3919-3ad7-bdbe-4ff3f6041271" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="395f13fe-0b9b-3c13-9a2f-ef58c0290456" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="35" sev="3" auth="username" locRef="4" rule="HICPP-7_1_6-b" lnHash="-1338521823" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-1338521823" unbViolId="96fdcc5f-108b-3580-94fb-bfa1d80a7aa4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce894167-eaa0-310f-afe7-8cf0a757c717" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="35" sev="4" auth="username" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="-1338521823" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1338521823" unbViolId="e750c6a4-f5d7-34e4-bfef-56e76de01ed0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe9aa726-6e72-358a-836e-640fb31e3ec9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="35" sev="3" auth="username" locRef="4" rule="MISRA2004-6_3_b" lnHash="-1338521823" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1338521823" unbViolId="a9bdc63e-6f87-37e0-aac4-3c5aa5bef7f5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b871067-f422-393c-85b6-da6f6095e065" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="35" sev="2" auth="username" locRef="4" rule="JSF-209_b" lnHash="-1338521823" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-1338521823" unbViolId="3a8ef0fd-ef03-3beb-8f8e-b811497359a4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c79799ad-2b8d-35b2-80a1-7023b5e0b989" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="35" sev="4" auth="username" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="-1338521823" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1338521823" unbViolId="08d1be0e-3996-3602-a18b-9731e7acab7b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1cbd7926-dd7e-3dfe-bfcb-72f3c5c6f09f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="35" sev="3" auth="username" locRef="4" rule="HICPP-3_5_1-b" lnHash="-1338521823" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1338521823" unbViolId="04344be2-0fc4-3c9e-b01e-73ddd35fc6a7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="079507dd-9a86-3751-90f3-acedab2d312c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="35" sev="4" auth="username" locRef="4" rule="MISRA2008-3_9_2" lnHash="-1338521823" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1338521823" unbViolId="a83b4c93-05f1-32ab-b428-bf4140fd479f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="34a6d8fd-fea9-38d7-901d-aa5e5cc6eb6d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="35" sev="3" auth="username" locRef="4" rule="MISRA-013" lnHash="-1338521823" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1338521823" unbViolId="86438140-ebf1-3d26-bfa1-fc2e37217729" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3937172-447c-391a-aec3-1416418f6e18" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="37" sev="4" auth="username" locRef="4" rule="MISRA2008-3_9_2" lnHash="-529470406" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-529470406" unbViolId="c3def55e-25dd-3bcb-9fab-6fdd3cdebd5b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6436caa0-a510-313c-95d8-be5af7129b3c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="37" sev="3" auth="username" locRef="4" rule="MISRA-013" lnHash="-529470406" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-529470406" unbViolId="055db250-eebd-3385-a1b6-e8a66bf9938d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a796e002-1f50-3344-8044-e99dc4586016" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="37" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="37" sev="3" auth="username" locRef="4" rule="CODSTA-223" lnHash="-529470406" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-529470406" unbViolId="551f23ea-c311-364e-9b1e-fe1668855d93" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a97140b-6d1d-3910-9391-2264f312de9d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="37" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="37" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="-529470406" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-529470406" unbViolId="bdc4eb1f-0488-36e7-978f-7feefa6e0001" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ccd1a485-c096-3957-9d51-2e0bb0db3f71" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="37" sev="3" auth="username" locRef="4" rule="HICPP-7_1_6-b" lnHash="-529470406" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-529470406" unbViolId="7c1e9a7e-11af-3e67-b2e5-0c451efc4bd2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51a81a98-dd51-3a7b-b618-974409157cba" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="37" sev="4" auth="username" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="-529470406" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-529470406" unbViolId="f3393a88-28bf-3afc-8573-0c44a9ce5039" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a4fc803-6767-3d47-a094-3716bc731bc9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="37" sev="3" auth="username" locRef="4" rule="MISRA2004-6_3_b" lnHash="-529470406" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-529470406" unbViolId="f957ceba-2384-3645-847e-45afcc388786" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1aa105d0-5370-3313-94d5-adfe37b6f066" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="37" sev="2" auth="username" locRef="4" rule="JSF-209_b" lnHash="-529470406" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-529470406" unbViolId="f7cc22d5-b18b-3386-aedf-c98abc7a6f4a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8f6504f-118b-359e-b41c-8b06b2f3c506" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="37" sev="4" auth="username" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="-529470406" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-529470406" unbViolId="113bcdf7-9d49-3fa8-8e93-5c9c857cc85e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="80fcf7b3-8cc6-302d-92db-8e711368177d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="37" sev="3" auth="username" locRef="4" rule="HICPP-3_5_1-b" lnHash="-529470406" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-529470406" unbViolId="7693857d-8bdb-3e7c-a820-cf790bbac193" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e784ff2f-b935-3661-93d4-bbaa1e890c51" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="39" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="39" sev="3" auth="username" locRef="4" rule="CODSTA-223" lnHash="-962720826" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-962720826" unbViolId="8ab86194-9907-377a-bb9f-dc0b3631ac02" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3748f730-c510-3717-b369-b59eeaebbb97" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="39" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="39" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="-962720826" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-962720826" unbViolId="4aee850a-73e7-3f3a-a767-e898084c1726" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ea915c5-e2f2-3373-8208-51922a14e50c" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="39" sev="3" auth="username" locRef="4" rule="HICPP-7_1_6-b" lnHash="-962720826" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-962720826" unbViolId="e2527094-a0ab-345b-91eb-ea92e5a165bb" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dee6238f-51db-3eca-8dcc-73139218fb7a" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="39" sev="4" auth="username" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="-962720826" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-962720826" unbViolId="ef389724-61fb-346f-8cae-4a198ff813f9" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f2f27b7-8754-3e3a-b073-bd18e7d851ea" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="39" sev="3" auth="username" locRef="4" rule="MISRA2004-6_3_b" lnHash="-962720826" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-962720826" unbViolId="49af0d5d-2fae-3036-b57a-76719d777960" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ebeb6d16-94bb-3170-bd04-24b1ea9922b9" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="39" sev="2" auth="username" locRef="4" rule="JSF-209_b" lnHash="-962720826" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-962720826" unbViolId="4238ca37-d781-3f0b-b826-f5258c5e1aa9" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c7c20fb-ead0-34eb-a272-265cb0a8348f" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="39" sev="4" auth="username" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="-962720826" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-962720826" unbViolId="a632c9c3-bfc8-32b8-a454-d8068282f0fa" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3408f22a-3828-3bb2-b3eb-6dcfb3126726" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="39" sev="3" auth="username" locRef="4" rule="HICPP-3_5_1-b" lnHash="-962720826" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-962720826" unbViolId="241b502b-7f1d-3a83-a5c1-265c760d24a0" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05110923-38a5-3109-abd4-fc85b9b56f92" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="39" sev="4" auth="username" locRef="4" rule="MISRA2008-3_9_2" lnHash="-962720826" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-962720826" unbViolId="0c052da0-30cb-349d-82fa-f41c72c83cde" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d7923424-0e9b-3377-90c1-9eac2f58687b" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="39" sev="3" auth="username" locRef="4" rule="MISRA-013" lnHash="-962720826" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-962720826" unbViolId="21b93dea-609b-324d-be5c-3002cabca4b0" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf6f33ca-beae-3368-b87b-f7f0f5f45987" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="41" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="41" sev="3" auth="username" locRef="4" rule="PREPROC-10_b" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="148a7ec5-da61-35fb-af99-d2e248b6c96a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="986964a3-4f6e-3d5e-8130-77223c44a668" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="41" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="41" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="41" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_1_d" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="4048c6ad-dfff-3c88-9387-cc89e1a223d9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc7894a9-d490-3176-a533-4abfee6c858a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="41" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="41" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="41" sev="3" auth="username" locRef="4" rule="JSF-028_b" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="89064d2c-6b6a-3222-b731-a8a1a54614a5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="974f8f7d-d917-3b06-8a1b-87450ff23bdf" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="41" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="41" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="41" sev="3" auth="username" locRef="4" rule="HICPP-16_1_1-e" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="749005f3-8957-3a61-8d71-7a4fe7146c06" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ac0f0f8-cfb5-36d7-b731-3cd5f571ee36" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="41" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="41" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="41" sev="3" auth="username" locRef="4" rule="PREPROC-26" lnHash="1098672373" rule.header="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" tool="c++test" lineHash="1098672373" unbViolId="e1e6c884-e71c-3e4c-9b29-868e7c3d7ba1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fbbd4bdb-cde4-3f12-89d1-4050e0d35816" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="41" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="41" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="41" sev="2" auth="username" locRef="4" rule="AUTOSAR-A16_0_1-a" lnHash="1098672373" rule.header="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" tool="c++test" lineHash="1098672373" unbViolId="ed65877e-c605-348f-8441-e438a184fb50" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b7b7040-d770-3568-a1b5-0121fd3d0862" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="41" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="43" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="43" sev="3" auth="username" locRef="4" rule="JSF-031" lnHash="-1234653797" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1234653797" unbViolId="9ab5261d-3517-3d76-b2d1-33dfe18e8457" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="15063cae-de5a-3a73-a5c9-e60953b12b30" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="43" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="43" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="43" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="-1234653797" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1234653797" unbViolId="ee599105-5f4e-366c-8bb9-ccf11b1c7be3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13afa3e3-c2cb-3014-a770-b573159f1fe9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="43" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="43" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="43" sev="3" auth="username" locRef="4" rule="HICPP-16_1_1-a" lnHash="-1234653797" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1234653797" unbViolId="523859ee-b43a-3ebf-ba0a-c6ae474090e2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e9eb8d5-7f07-34da-b141-234456d20fc6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="43" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="43" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="43" sev="3" auth="username" locRef="4" rule="PREPROC-01" lnHash="-1234653797" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1234653797" unbViolId="6c024907-e361-3dea-b0ab-84c971ba1e27" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="847e7e22-3b94-3dff-99c8-69b7dc6a175b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="43" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="43" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="43" sev="2" auth="username" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="-1234653797" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1234653797" unbViolId="31b625ae-2e27-3def-bf17-6d561fd24989" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2044050-c5d2-39fb-b04f-476b2aa9316c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="43" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'THREAD'" ln="43" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="43" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_2" lnHash="-1234653797" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1234653797" unbViolId="dc86ce64-f23a-3aee-a5ab-4e5bd57f6d63" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f742668-7ce7-3203-b10e-6be451bf119f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="43" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'THREAD'" ln="43" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="43" sev="3" auth="username" locRef="4" rule="PREPROC-12" lnHash="-1234653797" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1234653797" unbViolId="9ad69eb3-e5e7-37d3-b2c3-63dcba21229a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0c89e51e-854f-3ee0-a528-3056957821fe" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="43" goals="0," />
    <StdViol msg="Not all body of macro 'THREAD' is enclosed in braces" ln="43" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="43" sev="3" auth="username" locRef="4" rule="PREPROC-14" lnHash="-1234653797" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-1234653797" unbViolId="87b53c3a-db89-359f-ab29-cb7b8938f33b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4ee72e1-949e-3345-8a57-b07d203c37b2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="43" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="44" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="44" sev="3" auth="username" locRef="4" rule="JSF-031" lnHash="1590150764" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1590150764" unbViolId="b5a7b275-9746-39e0-b8fd-a198edf904d4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db6d15af-0451-3163-ac53-22fd1768c37e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="44" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="44" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="44" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="1590150764" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1590150764" unbViolId="b1d43c40-a43d-3b50-977d-735914fadddf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3cc2be8-9a92-3334-9632-89d846a2e4b7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="44" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="44" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="44" sev="3" auth="username" locRef="4" rule="HICPP-16_1_1-a" lnHash="1590150764" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1590150764" unbViolId="01641bd2-29db-3c95-a4d0-5341692b441d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94d54721-6b73-3f03-ba95-2cf40f6c3530" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="44" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="44" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="44" sev="3" auth="username" locRef="4" rule="PREPROC-01" lnHash="1590150764" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1590150764" unbViolId="a00cfc3a-bbd3-3e3e-9dfd-7d758f12d8c4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9309553a-8a0a-3c90-9f32-b248f4f56a33" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="44" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="44" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="44" sev="2" auth="username" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="1590150764" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1590150764" unbViolId="7be9c00c-5bdc-3519-b784-f8c807763708" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48cf915b-a2b0-3090-9dfd-28b391ff8d77" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="44" goals="0," />
    <StdViol msg="'THREAD_RETURN_TYPE' part of statement" ln="44" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="44" sev="4" auth="username" locRef="4" rule="PREPROC-04" lnHash="1590150764" rule.header="Don't define part of statement" tool="c++test" lineHash="1590150764" unbViolId="0aba4f8e-ca5d-32aa-95d2-825609e2216f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9b939be-b362-3867-9d30-15829f916d76" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="44" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'THREAD_RETURN_TYPE'" ln="44" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="44" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_2" lnHash="1590150764" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="1590150764" unbViolId="4d5e855d-db1b-3af6-a819-099f67220a19" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e44cf7d-7f9f-3f4f-b693-7f76bf3c79c3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="44" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'THREAD_RETURN_TYPE'" ln="44" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="44" sev="3" auth="username" locRef="4" rule="PREPROC-12" lnHash="1590150764" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="1590150764" unbViolId="b476f930-ed94-302c-9b5d-d829fa6433c6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e765d68-68d8-3e31-b562-3cd1a2805ad9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="44" goals="0," />
    <StdViol msg="Not all body of macro 'THREAD_RETURN_TYPE' is enclosed in braces" ln="44" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="44" sev="3" auth="username" locRef="4" rule="PREPROC-14" lnHash="1590150764" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="1590150764" unbViolId="7987779b-94b3-33bb-a0dc-a1007a19d2a6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99671c9f-a6cb-339f-a1ea-9bd09471a022" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="44" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="2" auth="username" locRef="4" rule="MISRA2008-16_0_4" lnHash="-1763822430" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="-1763822430" unbViolId="f84e87d6-5356-332d-be39-07497430ec2d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5fa1dc3c-8fcd-3026-b40d-6d3d63b68115" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="4" auth="username" locRef="4" rule="MISRAC2012-DIR_4_9-a" lnHash="-1763822430" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-1763822430" unbViolId="f36805df-0368-312f-ae9a-1d7325e853af" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05fd0d3a-8d4f-3135-93d2-0142e10ccab7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="3" auth="username" locRef="4" rule="MISRA2004-19_7" lnHash="-1763822430" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-1763822430" unbViolId="4886fd82-9797-3a7b-9ae4-4a76e78865ad" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="826295e0-8709-3e34-900b-5d584cde5a70" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="2" auth="username" locRef="4" rule="JSF-029" lnHash="-1763822430" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="-1763822430" unbViolId="d9fbf193-9841-3d11-b73b-2b050c95a07a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f404c383-e036-382b-877a-8527f9253952" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="4" auth="username" locRef="4" rule="MISRA2012-DIR-4_9" lnHash="-1763822430" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="-1763822430" unbViolId="f529117a-3b5d-373f-8906-6e02ff2e2225" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc144d19-9863-353f-a1d1-709ed51b3b22" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="3" auth="username" locRef="4" rule="CERT_C-PRE00-a" lnHash="-1763822430" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-1763822430" unbViolId="3eae9ec6-35f7-3058-8ed6-86efaa3318bf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de8c2c44-e448-36c8-81a4-edca623030ef" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Body of macro 'THREAD_CREATE' is defined without parentheses" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="3" auth="username" locRef="4" rule="MISRA-096" lnHash="-1763822430" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-1763822430" unbViolId="095bc084-8563-32ee-9e36-785ccb7ed783" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e37f7eb7-10a8-3f1b-a20d-cdbd09f8ee08" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Body of macro 'THREAD_CREATE' is defined without parentheses" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="1" auth="username" locRef="4" rule="CERT_C-PRE02-a" lnHash="-1763822430" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-1763822430" unbViolId="9ce49645-59af-3330-bcb3-7cd1f82bfad6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="258f9fd7-a2e3-3854-b49e-64feefb25604" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="3" auth="username" locRef="4" rule="JSF-031" lnHash="-1763822430" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1763822430" unbViolId="defa7853-3fac-3274-8e42-47c56a7c6a4c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e2ee8f4-338f-3cdc-b0a3-8cdced0e8f88" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="-1763822430" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1763822430" unbViolId="942c9385-87b1-30af-91b0-063948a81fec" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a03c024f-605c-3ab1-9d28-df8418af9818" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="3" auth="username" locRef="4" rule="HICPP-16_1_1-a" lnHash="-1763822430" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1763822430" unbViolId="900b54cd-ef9e-36a8-be70-c076c8aafb22" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d78a99ee-cfa0-3295-92b4-d55ec98e7394" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="3" auth="username" locRef="4" rule="PREPROC-01" lnHash="-1763822430" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1763822430" unbViolId="9aef8518-46c2-3918-9864-dae01030dde3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c403f02-65c6-3352-bff2-b86ec2fd6cd8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="2" auth="username" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="-1763822430" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1763822430" unbViolId="ca4c6cca-6dd1-3412-8f19-884f63c4cb7f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e558d64-c78e-37a3-9f52-e4fcd8ce03d7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_2" lnHash="-1763822430" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1763822430" unbViolId="aa057d9e-5269-3a07-8b16-4ed364150982" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2f3ccd9-fc3e-3574-8d81-b2817c0b8961" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="3" auth="username" locRef="4" rule="PREPROC-12" lnHash="-1763822430" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1763822430" unbViolId="b615669b-d22e-387c-a4f2-20609168f561" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1cfd820c-0303-3aa9-87c2-747386c00efa" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Not all body of macro 'THREAD_CREATE' is enclosed in braces" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="3" auth="username" locRef="4" rule="PREPROC-14" lnHash="-1763822430" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-1763822430" unbViolId="085aad31-1a51-3c67-b77e-bb2c8e9124bc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf18d708-0605-32f2-8f1c-af7b9ff24e07" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="3" auth="username" locRef="4" rule="MISRA2004-19_10" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="e6dfb219-196e-3b3a-bf3e-2dc4bc82445e" locStartPos="52" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="364632c4-3136-3fc3-b3e5-6552e54528a2" locEndPos="53" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="2" auth="username" locRef="4" rule="MISRA2008-16_0_6" lnHash="-1763822430" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="6048b5fb-8ad9-3fe5-b9f4-f6bdf259b1d2" locStartPos="52" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d05a3c1a-a8ff-3001-b456-5e02c82869a7" locEndPos="53" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-20_7" lnHash="-1763822430" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="-1763822430" unbViolId="a5a32693-18cc-3758-b7f9-8b9309c82bed" locStartPos="52" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0577199c-f99f-38ed-bfcf-a72939d94edc" locEndPos="53" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="2" auth="username" locRef="4" rule="AUTOSAR-M16_0_6-a" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="e8ce9e50-305c-3eef-b97d-7030e5ff74f5" locStartPos="52" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b08196fe-8b25-3db7-b7e0-ff2c65f2a485" locEndPos="53" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="1" auth="username" locRef="4" rule="CERT_C-PRE01-a" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="67fe5f92-eba0-3779-8c12-9c7bb611b948" locStartPos="52" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d6eea392-c1c4-304d-9f6f-3f1926eb33ac" locEndPos="53" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_20_7-a" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="9a07629e-afe6-31d1-946f-d01e143d6c50" locStartPos="52" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ede7c33-3710-3251-b77d-19d8bfc3ddcf" locEndPos="53" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="3" auth="username" locRef="4" rule="MISRA2004-19_10" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="11a1f663-6fae-3043-8a04-0e408d1cb3db" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8aa4ff45-ab92-3fd6-9379-4ceffa1f737a" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="2" auth="username" locRef="4" rule="MISRA2008-16_0_6" lnHash="-1763822430" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="52f02122-55fa-32b0-a7b9-b7bbc47f904b" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ea6b68f-ddf4-3451-8d11-357b2902f487" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-20_7" lnHash="-1763822430" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="-1763822430" unbViolId="3e76bae9-980f-3302-9d89-af47c30c4b57" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ed61781-becc-3e63-b87e-1b55fb1e59d6" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="2" auth="username" locRef="4" rule="AUTOSAR-M16_0_6-a" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="802fa613-2f27-34e9-9772-08a7fd32584f" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2babef3-9a44-3713-bd88-ec4428d2dab5" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="1" auth="username" locRef="4" rule="CERT_C-PRE01-a" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="4f8c1b36-b69e-31bf-bad7-f70828d03f36" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47d0aa82-a90c-3115-ae3c-6b273a50c93f" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="45" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="45" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_20_7-a" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="3f3b5f08-79f4-38d2-a9d1-0d1d864394d9" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a447f58c-f31e-3081-bbe1-7eb3b4033f26" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="47" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="47" sev="3" auth="username" locRef="4" rule="JSF-031" lnHash="810266428" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="810266428" unbViolId="97dcbc00-5918-3664-9eaa-7be21474ed0f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe72f267-7640-3f6a-a4aa-9f2929abd092" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="47" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="47" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="47" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="810266428" rule.header="Avoid using macro definitions" tool="c++test" lineHash="810266428" unbViolId="7cd9827e-591d-37be-86e2-bd16f1376a47" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6606c43d-5eb8-38ea-beb3-246701f01c7a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="47" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="47" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="47" sev="3" auth="username" locRef="4" rule="HICPP-16_1_1-a" lnHash="810266428" rule.header="Avoid using macro definitions" tool="c++test" lineHash="810266428" unbViolId="5596f677-6b30-36d4-977d-049017261fb7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd535c3a-6e5e-3f70-ad38-7d9f6ca6419a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="47" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="47" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="47" sev="3" auth="username" locRef="4" rule="PREPROC-01" lnHash="810266428" rule.header="Avoid using macro definitions" tool="c++test" lineHash="810266428" unbViolId="957e436a-9adf-383e-b7b9-6f4ac3e7a598" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26051aeb-7980-3136-8cb6-4648069a2dba" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="47" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="47" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="47" sev="2" auth="username" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="810266428" rule.header="Avoid using macro definitions" tool="c++test" lineHash="810266428" unbViolId="100dd217-f13a-30df-a51b-d8d8a3a3cc6f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="63b11053-8724-3fc7-962e-66d4143a2518" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="47" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'LOCK'" ln="47" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="47" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_2" lnHash="810266428" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="810266428" unbViolId="f4911939-0e4d-337b-b0ac-1aa955b3c6e6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99050248-d842-36f4-902c-7461bfb83b8a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="47" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'LOCK'" ln="47" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="47" sev="3" auth="username" locRef="4" rule="PREPROC-12" lnHash="810266428" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="810266428" unbViolId="efdd140d-c18b-320f-8713-2780652bd44d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f57a0ad-f98b-31ba-9fa6-90bc7ec479a7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="47" goals="0," />
    <StdViol msg="Not all body of macro 'LOCK' is enclosed in braces" ln="47" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="47" sev="3" auth="username" locRef="4" rule="PREPROC-14" lnHash="810266428" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="810266428" unbViolId="78a6f6a2-78d6-3f2e-a652-2d87d6fae0de" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="29ac6107-a593-3a32-86d8-13c66b797e09" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="47" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="48" sev="2" auth="username" locRef="4" rule="MISRA2008-16_0_4" lnHash="865954250" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="865954250" unbViolId="4c107bf1-4226-380e-982a-5210dbf48b16" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23a13224-3007-3e55-a5b2-a3122aa45b51" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="48" sev="4" auth="username" locRef="4" rule="MISRAC2012-DIR_4_9-a" lnHash="865954250" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="865954250" unbViolId="2a0bd7f4-d735-398d-b43b-cb1b2d549e45" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc42c1b5-efe2-3cb4-bc4e-049abf303b2f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="48" sev="3" auth="username" locRef="4" rule="MISRA2004-19_7" lnHash="865954250" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="865954250" unbViolId="ab0dd88d-cb45-31d4-a0a0-3b51053a7b27" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab586a0b-58e2-37d9-b227-14d8d880877a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="48" sev="2" auth="username" locRef="4" rule="JSF-029" lnHash="865954250" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="865954250" unbViolId="1fc3f61d-a704-33ce-8f1c-09f694f15c5c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85634e2a-f083-3ec0-8934-c0492e37f223" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="48" sev="4" auth="username" locRef="4" rule="MISRA2012-DIR-4_9" lnHash="865954250" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="865954250" unbViolId="7b30375c-c6ea-379a-bf21-f512f2f28cdf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09e8e0af-ddc5-373d-9e8f-ef15cb4e0bfe" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="48" sev="3" auth="username" locRef="4" rule="CERT_C-PRE00-a" lnHash="865954250" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="865954250" unbViolId="0d681414-1262-3001-b12a-27f474957ed5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="267efba2-35a0-39b8-8c35-2651ddaec8ef" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Body of macro 'LOCK_ACQUIRE' is defined without parentheses" ln="48" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="48" sev="3" auth="username" locRef="4" rule="MISRA-096" lnHash="865954250" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="865954250" unbViolId="6be46af2-9131-38bb-b10c-6534840f00f5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9103c53b-c88f-35f1-bd75-72409ec88e27" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Body of macro 'LOCK_ACQUIRE' is defined without parentheses" ln="48" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="48" sev="1" auth="username" locRef="4" rule="CERT_C-PRE02-a" lnHash="865954250" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="865954250" unbViolId="77b6ae85-f7b0-35e8-886a-a2a442fc16d3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2086e7b-1679-36cd-a290-af5051167218" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="48" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="48" sev="3" auth="username" locRef="4" rule="JSF-031" lnHash="865954250" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="865954250" unbViolId="bd29929b-d6db-3509-a532-852b046f805f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4383837b-5964-337f-99b7-4efd46f58771" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="48" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="48" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="865954250" rule.header="Avoid using macro definitions" tool="c++test" lineHash="865954250" unbViolId="97fe2d5b-58a9-3300-9c4d-9153a0f49eb9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8236d22b-88f8-323b-95a0-a118bc58bb31" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="48" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="48" sev="3" auth="username" locRef="4" rule="HICPP-16_1_1-a" lnHash="865954250" rule.header="Avoid using macro definitions" tool="c++test" lineHash="865954250" unbViolId="f54baeb2-64e3-3aa5-8803-f44a00ee7acd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="514c958f-7917-3731-950f-a455dc79edc9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="48" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="48" sev="3" auth="username" locRef="4" rule="PREPROC-01" lnHash="865954250" rule.header="Avoid using macro definitions" tool="c++test" lineHash="865954250" unbViolId="8ad7fc4f-2fe9-33ba-b4c3-c5befdc3d481" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8476e1d5-e660-3a3f-b818-7a83fb23406d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="48" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="48" sev="2" auth="username" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="865954250" rule.header="Avoid using macro definitions" tool="c++test" lineHash="865954250" unbViolId="c7fda389-7a00-31af-bf65-76cd69966205" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="586a2e48-92da-3bdf-93e6-15b84cedb917" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="48" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_2" lnHash="865954250" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="865954250" unbViolId="5d3573b1-7961-3c9b-b135-bba1eba0e634" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0fddff80-60bb-308f-ae81-ea7ef491e0e8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="48" sev="3" auth="username" locRef="4" rule="PREPROC-12" lnHash="865954250" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="865954250" unbViolId="df184a2f-3438-31c9-90e1-4a2e56bc62c1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5731462-2ed4-3904-b8b3-f21f75d08885" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Not all body of macro 'LOCK_ACQUIRE' is enclosed in braces" ln="48" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="48" sev="3" auth="username" locRef="4" rule="PREPROC-14" lnHash="865954250" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="865954250" unbViolId="013507b6-e23d-3c20-80da-04fff48de3f1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="081f35d5-0647-3b5e-b2d5-31d0cd676ee7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="48" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="48" sev="3" auth="username" locRef="4" rule="MISRA2004-19_10" lnHash="865954250" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="865954250" unbViolId="f207d389-30a1-349b-a09b-7ddb387fd396" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7229f983-bf71-33a2-9abe-f961fe5a3b24" locEndPos="48" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="48" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="48" sev="2" auth="username" locRef="4" rule="MISRA2008-16_0_6" lnHash="865954250" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="865954250" unbViolId="b28584d4-a1e7-332a-a0d4-e71dd28ae806" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e320315-87d6-3ab7-8374-f88519141878" locEndPos="48" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="48" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="48" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-20_7" lnHash="865954250" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="865954250" unbViolId="e0b0b12a-91b3-313e-b590-ceafb6518151" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="89072114-1a80-355f-ba5e-550c1f898251" locEndPos="48" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="48" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="48" sev="2" auth="username" locRef="4" rule="AUTOSAR-M16_0_6-a" lnHash="865954250" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="865954250" unbViolId="303f2683-efe3-3d66-a031-0ebe3967ea6f" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="922d9acb-9fb3-30d0-8e2b-7a080282b46b" locEndPos="48" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="48" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="48" sev="1" auth="username" locRef="4" rule="CERT_C-PRE01-a" lnHash="865954250" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="865954250" unbViolId="713c6755-6c90-35a6-be21-813bdcbc0319" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65564dc3-d924-3d11-bfda-ffcc81256843" locEndPos="48" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="48" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="48" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_20_7-a" lnHash="865954250" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="865954250" unbViolId="462c3f93-84bb-3ff4-8f30-df835d8a5abe" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ec5a3545-f4c1-36a7-9d8a-2e96a0f7e039" locEndPos="48" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="49" sev="2" auth="username" locRef="4" rule="MISRA2008-16_0_4" lnHash="-1510788286" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="-1510788286" unbViolId="db1401e2-bd5b-399c-a4fc-f93f92c2a77e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97d5ea96-de15-31f0-b2b4-889c63edd715" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="49" sev="4" auth="username" locRef="4" rule="MISRAC2012-DIR_4_9-a" lnHash="-1510788286" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-1510788286" unbViolId="a35c7bd3-4b7d-382a-b383-dd54b389138b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae57f332-f237-3d03-a1bc-810e1d636f45" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="49" sev="3" auth="username" locRef="4" rule="MISRA2004-19_7" lnHash="-1510788286" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-1510788286" unbViolId="17f31db7-cc92-3a67-94e0-769c2120fa43" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="72303e4c-ca17-3464-9621-ce42e4900e42" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="49" sev="2" auth="username" locRef="4" rule="JSF-029" lnHash="-1510788286" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="-1510788286" unbViolId="2bff93d7-050f-36c0-8858-c81475ce7b50" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e7e3280-8b27-3216-98ec-4c3a9838657c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="49" sev="4" auth="username" locRef="4" rule="MISRA2012-DIR-4_9" lnHash="-1510788286" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="-1510788286" unbViolId="eb74047f-f989-351f-a0b9-1725f9709c44" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9714ae25-093a-3d7d-b330-11949f645fa4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="49" sev="3" auth="username" locRef="4" rule="CERT_C-PRE00-a" lnHash="-1510788286" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-1510788286" unbViolId="eb9f5ab4-599f-3d89-938b-dcf24316412a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9723402c-c4c7-3dd0-a047-72e99c8a368e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Body of macro 'LOCK_RELEASE' is defined without parentheses" ln="49" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="49" sev="3" auth="username" locRef="4" rule="MISRA-096" lnHash="-1510788286" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-1510788286" unbViolId="db94ba8f-7d5f-38b1-9bcc-b31b1dcff8e4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d711b29b-2f65-3f6e-89d3-1dc37a37886b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Body of macro 'LOCK_RELEASE' is defined without parentheses" ln="49" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="49" sev="1" auth="username" locRef="4" rule="CERT_C-PRE02-a" lnHash="-1510788286" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-1510788286" unbViolId="9e41cce7-d8ac-3a55-b55b-8cf8028f0142" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36521748-011a-3825-be0f-8a1e0f16ba89" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="49" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="49" sev="3" auth="username" locRef="4" rule="JSF-031" lnHash="-1510788286" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1510788286" unbViolId="847fca21-512d-3c1a-9712-8d5ff3d390ae" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="30050613-e8d8-3004-8a2b-8a9221722a11" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="49" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="49" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="-1510788286" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1510788286" unbViolId="c0b56e61-d626-32ac-8a9e-038f3c0108dd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="efb099d0-73b8-338e-ac3c-76dc5f1b5c04" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="49" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="49" sev="3" auth="username" locRef="4" rule="HICPP-16_1_1-a" lnHash="-1510788286" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1510788286" unbViolId="cf411f04-910f-3281-bfc4-91344badf6e7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f80bc34-dafb-3886-a83d-863edaaf7b18" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="49" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="49" sev="3" auth="username" locRef="4" rule="PREPROC-01" lnHash="-1510788286" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1510788286" unbViolId="bd00d98b-3a23-3e47-9a90-088b0c6af2eb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47209405-c61a-3ad8-bf73-d00159be1421" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="49" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="49" sev="2" auth="username" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="-1510788286" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1510788286" unbViolId="555b5336-6802-3d59-bba8-b93132a33fe6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31330124-a67d-3add-81b0-7b2adcf94e62" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="49" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_2" lnHash="-1510788286" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1510788286" unbViolId="3db8fdac-5477-37ab-83f0-48e31559da9f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="166bd749-697c-38f9-a3ec-0e8671993676" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="49" sev="3" auth="username" locRef="4" rule="PREPROC-12" lnHash="-1510788286" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1510788286" unbViolId="73cbc972-be6e-3191-8835-0fb3d21eadea" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e88bdce6-1e11-3dd2-a472-0f02bbb8c29c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Not all body of macro 'LOCK_RELEASE' is enclosed in braces" ln="49" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="49" sev="3" auth="username" locRef="4" rule="PREPROC-14" lnHash="-1510788286" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-1510788286" unbViolId="e79050e4-039e-30ac-b3a8-4cf4f693c7e8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ad6a11c-7c55-326e-8995-97d2598f0f74" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="49" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="49" sev="3" auth="username" locRef="4" rule="MISRA2004-19_10" lnHash="-1510788286" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1510788286" unbViolId="34380cd0-c49f-3a36-b901-6f05fd310823" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18975dc9-3d2c-38c4-a04a-9d206b0b5939" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="49" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="49" sev="2" auth="username" locRef="4" rule="MISRA2008-16_0_6" lnHash="-1510788286" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="-1510788286" unbViolId="23c97690-5db0-3329-a22f-514a9c60c765" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2140324-ff31-36b4-8d7d-06524be5eb7e" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="49" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="49" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-20_7" lnHash="-1510788286" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="-1510788286" unbViolId="b36b0165-9902-31f4-823d-52a64fb4a5e2" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="73c1622b-46ed-346b-b471-6e057ace5a53" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="49" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="49" sev="2" auth="username" locRef="4" rule="AUTOSAR-M16_0_6-a" lnHash="-1510788286" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1510788286" unbViolId="9e33847e-cf2c-3248-804b-e338a5556177" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6d521ae6-da16-3386-8c75-3f7b503bcac9" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="49" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="49" sev="1" auth="username" locRef="4" rule="CERT_C-PRE01-a" lnHash="-1510788286" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1510788286" unbViolId="bf7171ba-0781-30ef-af7e-f66daeb53b99" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0005fe40-bd7d-3436-b052-e6021411daf5" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="49" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="49" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_20_7-a" lnHash="-1510788286" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1510788286" unbViolId="213415b4-a3a8-3859-ad23-a683bec2f14d" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb1c5a59-f2a1-3e01-9eb7-2ce369d145ae" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="51" sev="2" auth="username" locRef="4" rule="MISRA2008-16_0_4" lnHash="-541803970" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="-541803970" unbViolId="776f2a0b-be45-36de-92c4-805b36567598" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ca79e0d-cbc6-3534-9308-7e2c161afd7a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="51" sev="4" auth="username" locRef="4" rule="MISRAC2012-DIR_4_9-a" lnHash="-541803970" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-541803970" unbViolId="02d25051-c35a-3091-8b60-4661af22fd42" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5dfb7f14-4384-39b3-88f7-ee97c3eef52c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="51" sev="3" auth="username" locRef="4" rule="MISRA2004-19_7" lnHash="-541803970" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-541803970" unbViolId="ec73b563-a3b0-3e75-b30a-1e362d8d0ae0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="11961228-8d36-30ae-9f92-629c7a85e3e9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="51" sev="2" auth="username" locRef="4" rule="JSF-029" lnHash="-541803970" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="-541803970" unbViolId="fe695008-a3ee-3bab-8e69-39c4be1c0f07" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3bc450c6-9310-3b3a-af57-2ff4bf0dec87" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="51" sev="4" auth="username" locRef="4" rule="MISRA2012-DIR-4_9" lnHash="-541803970" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="-541803970" unbViolId="1939e812-8f7d-3559-ab7b-39ed1319fa35" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d70f31b9-3a31-3ea5-9ad7-41cd2be9e16a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="51" sev="3" auth="username" locRef="4" rule="CERT_C-PRE00-a" lnHash="-541803970" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-541803970" unbViolId="088702eb-7dc6-3b77-a8f3-8ebf809ea191" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="570ee292-6fe6-30de-89a6-98bfaaa9d4ab" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Body of macro 'SLEEP' is defined without parentheses" ln="51" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="51" sev="3" auth="username" locRef="4" rule="MISRA-096" lnHash="-541803970" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-541803970" unbViolId="d96ebfb4-cc50-340a-878c-f4c0b6f47e17" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0f455eb-8c0d-3875-9a81-2611576e2cf0" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Body of macro 'SLEEP' is defined without parentheses" ln="51" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="51" sev="1" auth="username" locRef="4" rule="CERT_C-PRE02-a" lnHash="-541803970" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-541803970" unbViolId="acae67f7-cd2a-3472-b152-93125011d737" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0214638-bb15-32f0-b8e6-e3104915f1ca" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="51" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="51" sev="3" auth="username" locRef="4" rule="JSF-031" lnHash="-541803970" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-541803970" unbViolId="7199b3cc-4f67-38b7-a2d7-3f1dd41c3a0d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="81b31282-a5c0-33fd-8ae0-faa744d7495b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="51" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="51" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="-541803970" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-541803970" unbViolId="9274c121-49f3-3fe8-af53-f15270849002" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b13b4d22-d5a1-3805-97e1-65eeedf8cccc" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="51" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="51" sev="3" auth="username" locRef="4" rule="HICPP-16_1_1-a" lnHash="-541803970" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-541803970" unbViolId="0a7e6757-b467-3412-97ac-d6bdbde45747" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92ab48df-e228-3381-9908-fbf261da4ce6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="51" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="51" sev="3" auth="username" locRef="4" rule="PREPROC-01" lnHash="-541803970" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-541803970" unbViolId="3519cc30-d7aa-3be5-95ff-51f200512d06" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85f12a9f-92a8-3135-ad3b-e3affc546e8b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="51" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="51" sev="2" auth="username" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="-541803970" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-541803970" unbViolId="04e97f14-f017-3683-be0d-2e6a432c2174" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dcc7158b-6ec2-3a5c-9b36-13499b8300ae" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="51" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_2" lnHash="-541803970" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-541803970" unbViolId="f96798bd-abc1-3daf-b781-128d5a604b52" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ec01759f-40eb-316d-9d2f-20fcf315ea0a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="51" sev="3" auth="username" locRef="4" rule="PREPROC-12" lnHash="-541803970" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-541803970" unbViolId="e207c3e3-4fb2-30d2-a37f-42b380b126ba" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5091c4f-4e9b-3ce3-a30e-410a0df89860" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Not all body of macro 'SLEEP' is enclosed in braces" ln="51" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="51" sev="3" auth="username" locRef="4" rule="PREPROC-14" lnHash="-541803970" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-541803970" unbViolId="e4a3c9cb-d1e6-3aba-ab43-b510d0c6e48f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d457b00-bc3f-36e4-a2c1-5afec7dcd009" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="53" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="53" sev="3" auth="username" locRef="4" rule="PREPROC-10_b" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="9892ae5c-0dbf-3981-be82-88bfdf5209a5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c19baee5-30ce-3f15-96ae-6340b54a5146" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="53" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="53" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="53" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_1_d" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="23184b7c-b958-3614-936a-adcce0da0037" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed0fae25-0c38-3162-8bf2-491f25df4400" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="53" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="53" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="53" sev="3" auth="username" locRef="4" rule="JSF-028_b" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="6bda5a47-a176-38a4-aeee-53f2d333046c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e645d63a-96bf-3794-8d83-16b5e9dd25f4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="53" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="53" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="53" sev="3" auth="username" locRef="4" rule="HICPP-16_1_1-e" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="0c2643e6-22fb-33ba-9ffe-da2ca6ed7b86" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bcab2bf8-1ee6-3f40-837d-d75cf64b7e94" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="53" goals="0," />
    <StdViol msg="Replace the 'MAX_OBJECTS' macro with a constant variable" ln="55" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="55" sev="3" auth="username" locRef="4" rule="CODSTA-37" lnHash="941979080" rule.header="Prefer const objects or enums to #defines for simple constants" tool="c++test" lineHash="941979080" unbViolId="1a6b63a4-5402-389a-8b62-f373c05e2197" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1ff5f95-dc18-364c-bc22-ea2a4b1c6d3d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Define constant 'MAX_OBJECTS' using 'const' or 'enum' instead of '#define'" ln="55" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="55" sev="2" auth="username" locRef="4" rule="JSF-030" lnHash="941979080" rule.header="The #define pre-processor directive shall not be used to define constant values" tool="c++test" lineHash="941979080" unbViolId="a51c1185-8391-355e-aa79-b7af1e9af194" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3777458-d817-3ef7-b237-d046f00521b0" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Define constant 'MAX_OBJECTS' using 'const' or 'enum' instead of '#define'" ln="55" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="55" sev="3" auth="username" locRef="4" rule="CODSTA-03" lnHash="941979080" rule.header="Do not define constants via #define" tool="c++test" lineHash="941979080" unbViolId="978a4020-5394-3d0f-ac81-b3a6b4e20cab" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7d4a7f1-ad04-3d8e-969f-b24b7c14635a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Do not use the macro definition 'MAX_OBJECTS'" ln="55" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="55" sev="3" auth="username" locRef="4" rule="JSF-031" lnHash="941979080" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="941979080" unbViolId="7529d06f-7668-372a-9576-171fe4a51fd5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6bc702ca-84de-35db-a561-8dfb63c57517" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Do not use the macro definition 'MAX_OBJECTS'" ln="55" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="55" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="941979080" rule.header="Avoid using macro definitions" tool="c++test" lineHash="941979080" unbViolId="f535dfbb-008c-3e1a-9078-bb08ed3842bc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69f20447-c626-315f-b164-45d6daf3ed0b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Do not use the macro definition 'MAX_OBJECTS'" ln="55" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="55" sev="3" auth="username" locRef="4" rule="HICPP-16_1_1-a" lnHash="941979080" rule.header="Avoid using macro definitions" tool="c++test" lineHash="941979080" unbViolId="eff3a3a3-c742-38de-90a9-f525562d3f6e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0c4b5c2-918f-3e91-9abd-314b6d36959e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Do not use the macro definition 'MAX_OBJECTS'" ln="55" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="55" sev="3" auth="username" locRef="4" rule="PREPROC-01" lnHash="941979080" rule.header="Avoid using macro definitions" tool="c++test" lineHash="941979080" unbViolId="2527cca0-861c-3d33-9df7-48adc97add6c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d42224b6-72f7-3a3e-a62b-08799be17aac" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Do not use the macro definition 'MAX_OBJECTS'" ln="55" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="55" sev="2" auth="username" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="941979080" rule.header="Avoid using macro definitions" tool="c++test" lineHash="941979080" unbViolId="44983fd4-b1f9-35cd-997d-30c3776657e3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8888882-a3be-39ff-b4e4-ed61b732734b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'MAX_OBJECTS'" ln="55" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="55" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_2" lnHash="941979080" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="941979080" unbViolId="e2f78d2a-b339-37d3-9ff4-84042f3cb386" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f9bf816-aa18-30b9-a91f-861f90ba90bf" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'MAX_OBJECTS'" ln="55" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="55" sev="3" auth="username" locRef="4" rule="PREPROC-12" lnHash="941979080" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="941979080" unbViolId="d68fe8b5-ed29-3d80-914c-b52ae9688a68" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dcc699be-7cba-3f05-8ce7-0c6757a30826" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Define constant 'STEP' using 'const' or 'enum' instead of '#define'" ln="56" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="56" sev="2" auth="username" locRef="4" rule="JSF-030" lnHash="-326464112" rule.header="The #define pre-processor directive shall not be used to define constant values" tool="c++test" lineHash="-326464112" unbViolId="4b3c1752-9e99-386e-9883-c2389e1d072b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1cf92821-480a-368d-bae9-581a8a67459d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="Define constant 'STEP' using 'const' or 'enum' instead of '#define'" ln="56" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="56" sev="3" auth="username" locRef="4" rule="CODSTA-03" lnHash="-326464112" rule.header="Do not define constants via #define" tool="c++test" lineHash="-326464112" unbViolId="d8220d00-0027-3c7b-869b-458e652a197e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="597c2406-083b-3ed9-b1e3-8c6c314da70a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="Do not use the macro definition 'STEP'" ln="56" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="56" sev="3" auth="username" locRef="4" rule="JSF-031" lnHash="-326464112" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-326464112" unbViolId="d4959e25-ca43-3c35-a4e1-e9c93e462c06" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c7b425e-0878-31cd-a859-26cfc5808e4f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="Do not use the macro definition 'STEP'" ln="56" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="56" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="-326464112" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-326464112" unbViolId="bd84ef99-0e71-31b2-8f07-75c62fa2f34c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="45fac1ba-c40a-3c98-8d7f-e2432fef98f3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="Do not use the macro definition 'STEP'" ln="56" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="56" sev="3" auth="username" locRef="4" rule="HICPP-16_1_1-a" lnHash="-326464112" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-326464112" unbViolId="2cd1ecff-11d7-3100-b8e3-13c79b145729" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a06c52b-17a8-3002-9bf8-3898ec86df81" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="Do not use the macro definition 'STEP'" ln="56" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="56" sev="3" auth="username" locRef="4" rule="PREPROC-01" lnHash="-326464112" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-326464112" unbViolId="9574c3de-ea32-37e4-8933-9114cf644d22" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ee7586d-b75b-300a-98fb-6e9b8862e7bb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="Do not use the macro definition 'STEP'" ln="56" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="56" sev="2" auth="username" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="-326464112" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-326464112" unbViolId="52b9969a-8471-3066-9f49-a5e9c8ef0a00" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ff19da7-9e3a-39bc-831d-b0ca9938ed30" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'STEP'" ln="56" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="56" sev="2" auth="username" locRef="4" rule="MISRA2008-16_2_2" lnHash="-326464112" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-326464112" unbViolId="d3952362-382e-3206-9189-b655fe03fcb9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ceb0089-3ab1-37a4-ae49-cade92837d16" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'STEP'" ln="56" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="56" sev="3" auth="username" locRef="4" rule="PREPROC-12" lnHash="-326464112" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-326464112" unbViolId="da9ccd93-620e-3640-8476-1e96e2189daa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="774dde2a-d54a-3ad8-bd5f-0a157feb8484" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="Replace the 'STEP' macro with a constant variable" ln="56" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="56" sev="3" auth="username" locRef="4" rule="CODSTA-37" lnHash="-326464112" rule.header="Prefer const objects or enums to #defines for simple constants" tool="c++test" lineHash="-326464112" unbViolId="323219a6-c6ca-332e-ae89-0d8bcffe1fb8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="56a6106b-5158-31a9-bf02-5f9bf0c27d14" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="The 'assertion' function should be preceded by a comment that contains the '@brief' tag" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="COMMENT-14" lnHash="1429237719" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1429237719" unbViolId="08f67998-89cf-3385-867f-e9ffdd5a32df" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="53495af1-a35a-3b35-becc-3d5ed6a82fec" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'assertion' function should be preceded by a comment that contains the '@brief' tag" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="2" auth="username" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="1429237719" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1429237719" unbViolId="49849b02-20da-3f62-abdb-28bfff9dd229" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf0bfe91-eb23-39a2-96be-b89cc65d10de" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'condition' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="COMMENT-14_b" lnHash="1429237719" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1429237719" unbViolId="9b8d3984-bc02-3579-ba08-efe8ff374002" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8077d47d-0ea7-37ef-9308-9918a3c87e1f" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'condition' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="2" auth="username" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="1429237719" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1429237719" unbViolId="f737a005-06bb-3911-82e2-5714668c625e" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3306a16e-caa0-3b14-94d1-bb76ed01066c" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'message' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="COMMENT-14_b" lnHash="1429237719" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1429237719" unbViolId="245f7264-4c1e-365f-9910-75c827431d57" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ea4e799f-1aaf-34f2-8f00-4e2a932adac6" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'message' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="2" auth="username" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="1429237719" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1429237719" unbViolId="1713d20b-562a-3d75-b6f3-b5cc51f92770" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ec9b99f2-526f-3b2f-9988-140fcf2fa1df" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'assertion'" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="FORMAT-28" lnHash="1429237719" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="1429237719" unbViolId="90cc3c7e-2d3a-3b51-a839-9a7a3573714c" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92b6c653-664c-3089-b099-f215f9ba9926" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Function 'assertion' has Cyclomatic Complexity value: 2" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="5" auth="username" locRef="4" rule="METRICS-29" lnHash="1429237719" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="1429237719" unbViolId="72d415c1-e7e4-3bcc-9050-1361c178f444" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1def82e-2c2c-3907-9438-00f19db8aacd" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Function 'assertion' has Essential Complexity value: 1" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="5" auth="username" locRef="4" rule="METRICS-33" lnHash="1429237719" rule.header="Report Essential Complexity" tool="c++test" lineHash="1429237719" unbViolId="33d1f0d7-ae0b-3b46-98c5-58a39b545d0f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe8c5165-08d2-3212-aab6-347bf5769a41" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Naming convention not followed: assertion" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="NAMING-17" lnHash="1429237719" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="1429237719" unbViolId="e8c9528d-1a71-375d-8a81-5945ad508258" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dce72e29-8b1a-3f96-b1ac-a016950fe1ef" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The definition of the 'assertion' function is not preceded by a comment" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="COMMENT-04" lnHash="1429237719" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="1429237719" unbViolId="445fa917-e972-3656-a026-e63c574ec04a" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="39630bdf-0208-3991-bb8a-d8350385c9c4" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The definition of the 'assertion' function is not preceded by a comment" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="4" auth="username" locRef="4" rule="JSF-134" lnHash="1429237719" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="1429237719" unbViolId="3d388d91-520e-3974-ba14-e6b9d026c120" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="254932c7-73c8-39a6-ba40-4e5e434a2607" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="4" auth="username" locRef="4" rule="OWASP2019-API9-e" lnHash="1429237719" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1429237719" unbViolId="7f2a8efa-8a6b-37f2-aa29-9df30ee81199" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee0756f5-c6e5-34fc-a1ad-675c2baccbbb" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="1429237719" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1429237719" unbViolId="1fd66eff-c693-3f11-98a9-b42397d6f197" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48a0c407-bed4-31cb-983b-0fca1b0a07aa" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="4" auth="username" locRef="4" rule="JSF-137" lnHash="1429237719" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="1429237719" unbViolId="9ab91690-a2bf-3087-bc58-9ae4d7ede977" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="899ffa9b-5ff4-373e-b8b8-69c5c6bceb44" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="4" auth="username" locRef="4" rule="MISRA-023" lnHash="1429237719" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1429237719" unbViolId="acf25bee-5e6f-3d5d-b573-ba47a7692605" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cdd8c53e-4e1f-3f35-8622-1502c4638d46" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="2" auth="username" locRef="4" rule="MISRA2008-3_3_1" lnHash="1429237719" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1429237719" unbViolId="cbbfc0b2-910f-3bf4-bb73-fc46b111c83b" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c60b5f1-dd09-3f4d-bd6e-99b0d95c0af7" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="CERT_C-DCL15-a" lnHash="1429237719" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1429237719" unbViolId="32f6316f-2e58-3a3a-a3a3-c22529bfaa55" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf1c65e6-964f-382c-b25c-0e76b4d2e2b7" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="4" auth="username" locRef="4" rule="MISRA2004-8_10" lnHash="1429237719" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1429237719" unbViolId="dcb5e492-4bb7-371a-ab10-cb3bdb774092" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2c58928-291a-37fd-bab8-ba31c0473104" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Global function 'assertion' is declared in global namespace" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="4" auth="username" locRef="4" rule="JSF-098" lnHash="1429237719" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="1429237719" unbViolId="6585329b-9d27-3958-8a18-f84e8f5cba43" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a0ac675-b617-3057-95d6-c680ed89b344" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Global function 'assertion' is declared in global namespace" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-36" lnHash="1429237719" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="1429237719" unbViolId="a551b2ef-730e-342b-a74b-48d904fecce2" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="57d2b427-dd39-3294-a695-f87db0cda3ed" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Global function 'assertion' is declared in global namespace" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="2" auth="username" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="1429237719" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="1429237719" unbViolId="7b09411c-243c-3ad9-91a8-e7b1c27a0182" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff0d1a02-9d31-3263-b32e-2009165a6226" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Global function 'assertion' is declared in global namespace" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="2" auth="username" locRef="4" rule="MISRA2008-7_3_1" lnHash="1429237719" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="1429237719" unbViolId="993e8f24-8e95-37d7-bd5f-74fa316cba61" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61cdd23c-addb-3f12-b90b-0ac1bd8c8a41" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="4" auth="username" locRef="4" rule="MISRA2008-3_9_2" lnHash="1429237719" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1429237719" unbViolId="f3d8dd8c-d0e6-352a-b112-053e1f761a66" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7665e3b-f5c4-3662-a0d5-d471f9be6cfa" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="MISRA-013" lnHash="1429237719" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1429237719" unbViolId="7c5440bc-4502-3388-a300-7e8172c0698e" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="566b58a0-511f-3465-9b17-68e35195f892" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="CODSTA-223" lnHash="1429237719" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1429237719" unbViolId="46697533-86d2-3444-814c-0601f221d425" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="714cd2aa-f28e-315c-9d9a-cf2241881811" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="1429237719" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1429237719" unbViolId="499a27a5-d749-3eea-9f89-c1dfe0c9be92" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7253981a-fc79-3449-8dfb-546946b7f8b4" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="HICPP-7_1_6-b" lnHash="1429237719" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="1429237719" unbViolId="6c3c1995-4ecf-3a71-ac37-1676150954a0" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="39d2738b-730b-3813-b402-f2dbd4d238e5" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="4" auth="username" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="1429237719" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1429237719" unbViolId="685677a8-a45a-3b05-9dd5-07f39acbf80d" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ddbdf35-a7bf-30f0-91d8-c9a38e4d019f" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="MISRA2004-6_3_b" lnHash="1429237719" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1429237719" unbViolId="a400c21c-e715-3592-a9c0-d8380e7e0c5c" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2817b42a-efe4-34e3-93f7-1d0aed499b9d" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="2" auth="username" locRef="4" rule="JSF-209_b" lnHash="1429237719" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1429237719" unbViolId="5550438c-e33f-3cc6-8fe6-de15794341c7" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d161494d-a0d8-342c-a733-038c31fed13c" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="4" auth="username" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="1429237719" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1429237719" unbViolId="47376690-a19f-37e3-a109-596a9f0a0450" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bbfd992f-1103-3874-b1db-7bcfac3041d7" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="HICPP-3_5_1-b" lnHash="1429237719" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1429237719" unbViolId="0b4c7d2e-1fe6-3399-a8d1-3e5fd1de11d7" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43773c24-5ef7-3f03-b533-df9215a43dfa" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="'condition' shall be declared as unsigned int or signed int" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="PORT-13" lnHash="1429237719" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="1429237719" unbViolId="5dcb93e7-1b25-3b22-ad5d-15bbb23fac1f" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9ecda69-86d0-3867-9445-a2500cf187a1" locEndPos="20" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'condition' as const" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="CERT_C-DCL00-a" lnHash="1429237719" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1429237719" unbViolId="faa2f559-afb5-3a01-9cb3-464cff39937d" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b2a9815-cf71-3bf4-97ae-33211a41e73a" locEndPos="20" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'condition' as const" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="2" auth="username" locRef="4" rule="AUTOSAR-A7_1_1-a" lnHash="1429237719" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1429237719" unbViolId="8e645315-16e8-39d2-a8ac-f99868db3f13" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8d313cb-8732-3835-aa06-0ea6ac7bedca" locEndPos="20" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'condition' as const" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="2" auth="username" locRef="4" rule="MISRA2008-7_1_1" lnHash="1429237719" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="1429237719" unbViolId="a76ff7f3-e643-3af3-9f08-1e4a021acc6a" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="afc925a9-cc9d-33ec-a3ad-f69998b6b2d3" locEndPos="20" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'condition' as const" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-53" lnHash="1429237719" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1429237719" unbViolId="48e9cba6-c6fe-3cc9-a97d-dc63bf2bb20d" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bea6f89a-6262-36b0-b778-4e97911612d9" locEndPos="20" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'condition' as const" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="HICPP-7_1_2-a" lnHash="1429237719" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1429237719" unbViolId="7a3697b0-9aea-3b46-b4d7-76b9098c0a65" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eca038b2-75fe-36f7-a73c-5feaf8afae4e" locEndPos="20" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'condition' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="NAMING-HN-22" lnHash="1429237719" rule.header="Hungarian notation for int types" tool="c++test" lineHash="1429237719" unbViolId="8dec86ba-71d2-3b85-b456-a5d3cf622bff" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5cdac91d-e8ce-37c2-a575-1faf211a3f00" locEndPos="20" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'condition' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="NAMING-HN-30" lnHash="1429237719" rule.header="Hungarian notation for int types" tool="c++test" lineHash="1429237719" unbViolId="16e78988-d257-3695-a955-c723a770a7dd" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a73cb1a-897b-3938-8592-e83537894d39" locEndPos="20" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'condition' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="NAMING-HN-43" lnHash="1429237719" rule.header="Hungarian notation for word types" tool="c++test" lineHash="1429237719" unbViolId="efe2923b-f825-3f4e-adb7-26ff8a55c89e" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8ea5456-c2a5-354c-96f6-c34cb8ab90cd" locEndPos="20" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'const' qualifier should be placed on the right hand side of the type" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="FORMAT-47_a" lnHash="1429237719" rule.header="Place CV-qualifiers on the right hand side of the type they apply to" tool="c++test" lineHash="1429237719" unbViolId="d572d125-4cd8-377f-aaa2-328fda5a4134" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ecf228b1-91dc-3c6a-b22f-f87cbe754a59" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'const' qualifier should be placed on the right hand side of the type" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="HICPP-7_1_4-a" lnHash="1429237719" rule.header="Place CV-qualifiers on the right hand side of the type they apply to" tool="c++test" lineHash="1429237719" unbViolId="4f8c0c85-b82b-3074-9cf6-18d79c91952c" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6d208200-440a-33d1-aa0c-9278d79e001b" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="CODSTA-223" lnHash="1429237719" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1429237719" unbViolId="0f4ea9a2-d794-3188-8959-a4dadf5f8a50" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="040f8c80-ac02-3977-8876-842b65c51f63" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="1429237719" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1429237719" unbViolId="226a260d-4cc1-3719-926e-0eb00d76da66" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a581993f-73c1-3418-87c2-b38e05242938" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="4" auth="username" locRef="4" rule="MISRA2008-3_9_2" lnHash="1429237719" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1429237719" unbViolId="aa62ce9d-4467-35fc-87ca-f49d817edfa0" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc71cc50-8498-3916-9a50-35649c685690" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="MISRA-013" lnHash="1429237719" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1429237719" unbViolId="ebde8502-28b9-39fc-a920-5212bce50b76" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40b584c0-4790-35e5-8257-c132928796f4" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared: message" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="CODSTA-94" lnHash="1429237719" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="1429237719" unbViolId="5b0adbdc-61fc-3b2c-892c-efcfe5a9d186" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="158a749b-da8e-3fff-a719-c663a4647c45" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The parameter of pointer type is declared: message" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="CODSTA-95" lnHash="1429237719" rule.header="Do not declare pointer type" tool="c++test" lineHash="1429237719" unbViolId="47d5e02d-6134-3f4e-9150-4b344faa697d" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4864f22f-932c-32a4-8d4a-f717becbe13b" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'message' as const" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="CERT_C-DCL00-a" lnHash="1429237719" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1429237719" unbViolId="6268388d-811b-3334-96d2-6f55257852a0" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b44141d9-e388-38ce-b565-34de88fc8dfe" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'message' as const" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="2" auth="username" locRef="4" rule="AUTOSAR-A7_1_1-a" lnHash="1429237719" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1429237719" unbViolId="c30d8eb6-e1b4-3bf0-8821-957bd5c5ad00" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="275963e8-75f5-3737-b4cd-c58f09bc0b74" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'message' as const" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="2" auth="username" locRef="4" rule="MISRA2008-7_1_1" lnHash="1429237719" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="1429237719" unbViolId="889f27e4-1cd2-3dcf-9697-6f92ac990c83" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="80e63740-ebff-368c-bee1-a667d34c208d" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'message' as const" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-53" lnHash="1429237719" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1429237719" unbViolId="d38bb88c-2a42-393f-8af2-632520b1b490" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71406207-51b2-3bfb-8efe-beb57cc107c0" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'message' as const" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="HICPP-7_1_2-a" lnHash="1429237719" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1429237719" unbViolId="876179e2-1622-3dd7-82b5-099a04593743" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74922df9-77bf-3737-99db-3ee5e4b89244" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Parameter 'message' is not validated before use" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="CERT_C-API00-a" lnHash="1429237719" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="1429237719" unbViolId="82edbc9f-1d2d-3d55-95fa-e477847e5235" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b077b22-9a80-3383-9f11-33a609e5d478" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Parameter 'message' is not validated before use" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="CODSTA-86" lnHash="1429237719" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="1429237719" unbViolId="611017ee-6568-342a-a392-a308c9a7ca71" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b926c77-5c63-3761-8419-dcfd98fd1be9" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'message' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="NAMING-HN-05" lnHash="1429237719" rule.header="Hungarian notation for byte pointer, array, or reference types" tool="c++test" lineHash="1429237719" unbViolId="a85165d9-8b37-3d9d-b0a1-834ca9fdc20f" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="673e39a6-f914-3d4f-9135-26043e694088" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'message' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="NAMING-HN-09" lnHash="1429237719" rule.header="Hungarian notation for char pointer, array, or reference types" tool="c++test" lineHash="1429237719" unbViolId="f75a1c27-c1da-36e7-bac4-76e7484f83c6" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ef1ba90-50b6-31a9-bef2-fa2a6026d085" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'message' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="NAMING-HN-10" lnHash="1429237719" rule.header="Hungarian notation for char pointer or reference types" tool="c++test" lineHash="1429237719" unbViolId="afed7bf7-007d-3709-9414-86942e99345d" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2867714f-8aeb-33d0-9a05-0840bbae8d38" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'message' identifier should have the 'p' prefix" ln="58" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="58" sev="3" auth="username" locRef="4" rule="NAMING-HN-34" lnHash="1429237719" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="1429237719" unbViolId="9dba6cfc-8627-3f6b-9aaf-359be6a3aa0b" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="456756e7-636a-3340-9233-f49f14cb47bb" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="59" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="59" sev="3" auth="username" locRef="4" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="77f0e3ff-81a1-3f8d-bf4e-591b888070f9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51557139-d3e1-3345-bd51-8b5645da9c16" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="59" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="60" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="60" sev="3" auth="username" locRef="4" rule="JSF-061" lnHash="-600547524" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-600547524" unbViolId="32f63b09-6f7c-37f3-a52d-1829bf7cacdf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1fdd08b-aaa9-3b71-ace4-c21b1bfeb74f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="60" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="60" sev="3" auth="username" locRef="4" rule="FORMAT-42" lnHash="-600547524" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-600547524" unbViolId="ddcfefe7-069d-3b36-b2c1-46f170024346" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="30cbbfa0-73e0-399d-ac50-f7b7492764e9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="60" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="60" sev="3" auth="username" locRef="4" rule="JSF-060_a" lnHash="-600547524" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-600547524" unbViolId="7e287865-6321-3029-956d-b1f6fe93203c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b676dbeb-52a6-37cb-a01d-8a889802d74a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="60" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="60" sev="3" auth="username" locRef="4" rule="FORMAT-43" lnHash="-600547524" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-600547524" unbViolId="4379c21a-fedb-3e8b-901a-0ddaa0f5889e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8251d20b-034a-313a-be16-6b474197d684" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="60" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="60" sev="3" auth="username" locRef="4" rule="JSF-060_b" lnHash="-600547524" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-600547524" unbViolId="30aec06f-d274-3261-8195-4e51abe3d3ef" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8698d02f-8866-36a9-8725-fef5c5ce06de" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="60" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="60" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-600547524" rule.header="Tabs should be avoided" tool="c++test" lineHash="-600547524" unbViolId="f1d54e59-1880-394e-a13a-95b157bc6e84" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06c29722-0620-3cd9-8477-b212424dd959" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="60" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="60" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-600547524" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-600547524" unbViolId="965e9ec9-3d1d-3b09-9f00-edef145daaad" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c699caf9-0d7f-3bce-872b-f9d98de4eadd" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="60" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="60" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-600547524" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-600547524" unbViolId="364a57ac-b9b8-3766-bdf0-c78f2a65b199" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a8031c7-adcc-3bb4-b299-449652989ad6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="60" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="60" sev="3" auth="username" locRef="4" rule="FORMAT-02" lnHash="-600547524" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-600547524" unbViolId="6625c8d4-efcc-3ebf-b694-041f0aae49a2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31faddcd-62c3-3fae-b420-0fb2254ce62e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="The 'if' statement doesn't have an 'else' clause" ln="60" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="60" sev="3" auth="username" locRef="4" rule="CODSTA-23" lnHash="-600547524" rule.header="All 'if' statements should have an 'else' clause" tool="c++test" lineHash="-600547524" unbViolId="35fd8aa9-064f-3d77-a973-2b260e095a42" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a09dd61-c95b-374c-861b-3fab162ed81d" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="60" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="60" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-67" lnHash="-600547524" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-600547524" unbViolId="6647118d-6fc4-3f44-a9e5-59af71622bab" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c9dc8e7-24a4-3c09-a464-d9413c49a2fe" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="60" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="60" sev="2" auth="username" locRef="4" rule="AUTOSAR-M5_3_1-a" lnHash="-600547524" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-600547524" unbViolId="63bdd4ae-1794-3352-9591-49f6524a9699" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d47af17-760e-3105-b2ac-06a2464dc7d9" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="60" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="60" sev="2" auth="username" locRef="4" rule="MISRA2008-5_3_1" lnHash="-600547524" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-600547524" unbViolId="b441e0b8-f1de-311a-85e8-9fdc07af7ce0" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="417e997b-56a7-31a4-baa1-2493d9567e45" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="In 'assertion' function use positive logic rather than negative logic whenever possible" ln="60" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="60" sev="5" auth="username" locRef="4" rule="CODSTA-46" lnHash="-600547524" rule.header="Use positive logic rather than negative logic whenever practical" tool="c++test" lineHash="-600547524" unbViolId="aa43d307-06bd-349f-90cb-b23da2ae1205" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="612ca842-045d-3d30-92d2-874e62c7ed8b" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="The operand of logical operator '!' is not 'effectively Boolean'" ln="60" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="60" sev="3" auth="username" locRef="4" rule="MISRA2004-12_6_a" lnHash="-600547524" rule.header="The operands of logical operators (&amp;&amp;, || and !) should be effectively Boolean" tool="c++test" lineHash="-600547524" unbViolId="0fcd61c0-5f3f-3c11-9762-062fc3a3b8a6" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc1a0154-6906-308d-9bcd-740f3add84dd" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="61" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="61" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="1274881582" rule.header="Tabs should be avoided" tool="c++test" lineHash="1274881582" unbViolId="800d3d93-2091-3d5e-874a-f7cd88a6d020" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee732cd6-d32b-3788-bddd-9f9adc72ff1b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="61" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="61" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="1274881582" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1274881582" unbViolId="690af367-b12c-35b6-865f-1ffa9027e8a4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="887c3207-6ea7-3a04-992a-797bfd8e57a7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="61" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="61" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="1274881582" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1274881582" unbViolId="ffb3e104-97f9-3f9f-96e5-a5c5d19eeb44" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd46f5b8-e339-33e0-91c7-ba8f83a1e19a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="61" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="61" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="1274881582" rule.header="Tabs should be avoided" tool="c++test" lineHash="1274881582" unbViolId="553bb8f4-eeb8-39dc-8947-d2b7f198f316" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4eaef89e-246c-3bdb-9b2e-cefe5930788e" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="61" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="61" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="1274881582" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1274881582" unbViolId="14de7873-dd80-34d2-98b3-171209432fda" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d121502-6020-363c-a80a-1b81afd2b304" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="61" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="61" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="1274881582" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1274881582" unbViolId="15f0a96d-4344-3589-b556-a0f8a6cd6098" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e476e70b-2246-3cc9-bf09-980b6037ec0a" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Throw only instances of std::exception" ln="61" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="61" sev="3" auth="username" locRef="4" rule="HICPP-15_1_1-a" lnHash="1274881582" rule.header="Only use instances of std::exception for exceptions" tool="c++test" lineHash="1274881582" unbViolId="78b7fa75-c62e-3ffe-b250-31339b6044c2" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9c583f3-d619-3626-9fd2-b8e583ddde45" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Throw only instances of std::exception" ln="61" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="61" sev="4" auth="username" locRef="4" rule="AUTOSAR-A15_1_1-a" lnHash="1274881582" rule.header="Only use instances of std::exception for exceptions" tool="c++test" lineHash="1274881582" unbViolId="5778f2f9-6338-302b-8529-3c056aebafc2" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0c260224-d727-3fed-b171-e3279af3079e" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="c++ exception handling structure is used in function 'assertion'" ln="61" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="61" sev="2" auth="username" locRef="4" rule="JSF-208" lnHash="1274881582" rule.header="C++ exceptions shall not be used" tool="c++test" lineHash="1274881582" unbViolId="94342f27-eee0-307a-b3f1-9b0ba36d996f" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00b72f76-7083-33e2-acef-73fb394c8d03" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="c++ exception handling structure is used in function 'assertion'" ln="61" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="61" sev="2" auth="username" locRef="4" rule="EXCEPT-05" lnHash="1274881582" rule.header="C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.)" tool="c++test" lineHash="1274881582" unbViolId="9090b082-c50e-348f-83b4-b86bd13bacb5" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f52c7d2e-1078-3ad2-8824-8f5ea5bd07d8" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Exception of type 'const char *' is thrown by pointer; throw by value instead" ln="61" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="61" sev="4" auth="username" locRef="4" rule="MISRA2008-15_0_2" lnHash="1274881582" rule.header="An exception object should not have pointer type" tool="c++test" lineHash="1274881582" unbViolId="133f7f40-c003-330f-bf23-fd9d182012bc" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="986b614b-55bc-3e1a-a7ed-01715e9ab0ea" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Exception of type 'const char *' is thrown by pointer; throw by value instead" ln="61" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="61" sev="2" auth="username" locRef="4" rule="AUTOSAR-A15_1_2-a" lnHash="1274881582" rule.header="An exception object should not have pointer type" tool="c++test" lineHash="1274881582" unbViolId="bcffc86d-1845-3749-a299-b6fd348a9648" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5916553-2c8a-3fe4-a5a3-38a227a08445" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Exception of type 'const char *' is thrown by pointer; throw by value instead" ln="61" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="61" sev="3" auth="username" locRef="4" rule="EXCEPT-09" lnHash="1274881582" rule.header="An exception object should not have pointer type" tool="c++test" lineHash="1274881582" unbViolId="c0c7f9fd-10dd-3091-90a0-9f9f2f77cdbb" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c03e692-1bb0-3986-a3c9-d2ed080c4354" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="62" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="62" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="404" rule.header="Tabs should be avoided" tool="c++test" lineHash="404" unbViolId="ec1dc108-e696-3818-9850-871a09047479" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee2ff760-9c41-3da8-9962-d5640ba9ca64" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="62" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="62" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="62" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="f555b058-7941-38e4-90f5-b891b9d6803c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="416a0e66-f23b-34b8-b6b1-d3dfd7701ed6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="62" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="62" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="62" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="21553a49-3ec7-37d7-b22a-0fba0cd75545" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be75e95b-a327-3d80-8430-49e60a6d2d51" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="62" goals="0," />
    <StdViol msg="'changePositionMutex' should be encapsulated in a class" ln="65" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="65" sev="5" auth="username" locRef="4" rule="CODSTA-CPP-18" lnHash="136478104" rule.header="Encapsulate global variables and constants, enumerated types, and typedefs in a class" tool="c++test" lineHash="136478104" unbViolId="89f7d402-44d4-3406-8e7c-e6aedeee82cc" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="14bb843b-c2fa-3278-9abd-14884af54e5b" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The 'static' keyword is used in 'changePositionMutex' variable declaration" ln="65" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="65" sev="3" auth="username" locRef="4" rule="HICPP-7_4_1-a" lnHash="136478104" rule.header="Do not use static keyword except inside functions and classes" tool="c++test" lineHash="136478104" unbViolId="ea62053c-7c2c-3f91-aedd-3276ac658f1f" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="998269eb-d68d-3716-883b-c01d78b350f5" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The 'static' keyword is used in 'changePositionMutex' variable declaration" ln="65" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="65" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-50" lnHash="136478104" rule.header="Do not use static keyword except inside functions and classes" tool="c++test" lineHash="136478104" unbViolId="26619d61-3864-35a9-a7dc-e58c5d2e41e3" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cefaca03-97c8-3bd9-bd6e-0cbb9b446f82" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="Consider encapsulating 'changePositionMutex'" ln="65" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="65" sev="3" auth="username" locRef="4" rule="JSF-207" lnHash="136478104" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="136478104" unbViolId="dae3e942-6a2d-3d65-9ef2-3883ae30a82c" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87fa2d17-8bc7-3463-8410-d0bbaa8a392f" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="Consider encapsulating 'changePositionMutex'" ln="65" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="65" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-82" lnHash="136478104" rule.header="Avoid unencapsulated global variables (including variables declared in namespaces and public static members)" tool="c++test" lineHash="136478104" unbViolId="e6d8a6b0-e1f8-3fec-9619-ccf0ba896a60" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5f1b61d-d0c9-3e6f-be15-8519b9290459" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The 'changePositionMutex' variable should be commented" ln="65" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="65" sev="3" auth="username" locRef="4" rule="JSF-132_a" lnHash="136478104" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="136478104" unbViolId="b85237d4-ac96-3ec4-b6b1-56f99531cb54" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37d187cf-7711-3619-b346-d9cbe2ec0d6c" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The 'changePositionMutex' variable should be commented" ln="65" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="65" sev="3" auth="username" locRef="4" rule="COMMENT-05" lnHash="136478104" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="136478104" unbViolId="7cf960da-abb7-3471-a925-29a525f4aa4c" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9433adc6-8089-30ec-932f-ba25de24e44e" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="Use of variable &quot;changePositionMutex&quot; with static storage duration is not allowed" ln="65" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="65" sev="3" auth="username" locRef="4" rule="HICPP-3_3_1-a" lnHash="136478104" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="136478104" unbViolId="797b6d85-dd4b-3e4f-89d0-7bf47a17af68" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dcf75065-8e12-3d82-a92b-74ec0175de42" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="Global variable 'changePositionMutex' is declared" ln="65" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="65" sev="5" auth="username" locRef="4" rule="MISRA-022" lnHash="136478104" rule.header="Declare objects at function scope" tool="c++test" lineHash="136478104" unbViolId="01a5dee8-c53b-3cda-ba0f-cd4d40465c75" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a5f0899-dd92-3350-8e97-c6b41e826cc5" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="Naming convention not followed: changePositionMutex" ln="65" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="65" sev="3" auth="username" locRef="4" rule="NAMING-18" lnHash="136478104" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="136478104" unbViolId="09567e47-001d-30e1-8461-efd4fc215434" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="08ccd3b0-4d8e-354c-a32a-3c31a3efdb31" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The 'changePositionMutex' identifier should have the 's' prefix" ln="65" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="65" sev="3" auth="username" locRef="4" rule="NAMING-HN-38" lnHash="136478104" rule.header="Hungarian notation for static variables" tool="c++test" lineHash="136478104" unbViolId="421b0c5f-b274-3081-88ff-e95deada9805" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ac4e9d0-a01a-31a0-b248-ceee18d9b1cf" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The name 'changePositionMutex' should be composed only of lowercase letters" ln="65" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="65" sev="3" auth="username" locRef="4" rule="JSF-051" lnHash="136478104" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="136478104" unbViolId="936a4470-f67b-3a52-ab5a-b1f57995dc3d" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f519f003-a7d5-3726-ad30-2c37161c4625" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The name 'changePositionMutex' should be composed only of lowercase letters" ln="65" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="65" sev="3" auth="username" locRef="4" rule="NAMING-44" lnHash="136478104" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="136478104" unbViolId="cf0d19e1-7c2b-360b-932f-76cd7bac27cc" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="200a6e89-daa9-3f32-a272-c8058c2fb7bf" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="Global variable 'changePositionMutex' is declared in global namespace" ln="65" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="65" sev="4" auth="username" locRef="4" rule="JSF-098" lnHash="136478104" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="136478104" unbViolId="c34d2dfc-c348-3d2a-93d4-79a01644e663" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9609e5be-e02b-3a1c-a9f9-bd3dc3e1bf53" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="Global variable 'changePositionMutex' is declared in global namespace" ln="65" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="65" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-36" lnHash="136478104" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="136478104" unbViolId="7367263b-9fdb-3f6b-b27c-04bfbb912eeb" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="492375a4-1417-31dc-8112-19c70f7004ca" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="Global variable 'changePositionMutex' is declared in global namespace" ln="65" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="65" sev="2" auth="username" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="136478104" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="136478104" unbViolId="6dde394f-d7ce-34ec-87f1-13c796e88017" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed543c54-8549-3b74-a00e-63877ca82a0e" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="Global variable 'changePositionMutex' is declared in global namespace" ln="65" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="65" sev="2" auth="username" locRef="4" rule="MISRA2008-7_3_1" lnHash="136478104" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="136478104" unbViolId="aa70876f-48bf-35b3-b54b-f31402f44f4e" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4bc95fb5-61bb-3f1c-b7ae-6d67bad10782" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The declaration of variable 'ring' contains a non-constant initializer" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_3_2-a" lnHash="893639642" rule.header="Static and thread-local objects shall be constant-initialized" tool="c++test" lineHash="893639642" unbViolId="f200af40-483f-372b-b398-7d3cc870ba89" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb794208-4048-3cca-a747-29e14486d859" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The declaration of variable 'ring' contains a non-constant initializer" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="3" auth="username" locRef="4" rule="CODSTA-MCPP-32" lnHash="893639642" rule.header="Static and thread-local objects shall be constant-initialized" tool="c++test" lineHash="893639642" unbViolId="da77b41e-792b-320f-901c-22014a1aea7c" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8eb61f44-3271-3f0a-96c6-8668c072a1f1" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The definition of the 'ring' variable should contain a braced initializer" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="2" auth="username" locRef="4" rule="AUTOSAR-A8_5_2-a" lnHash="893639642" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="893639642" unbViolId="922a370c-9937-36a9-b508-2d353cb01486" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0f18acf-43fb-3e84-a08a-5b9cfc9c0c1b" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The definition of the 'ring' variable should contain a braced initializer" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="3" auth="username" locRef="4" rule="CODSTA-MCPP-38" lnHash="893639642" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="893639642" unbViolId="137fc03a-9b55-3002-97c1-9a2a3372cf20" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65db9a5a-429b-38f0-a812-9a887589e121" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="4" auth="username" locRef="4" rule="OWASP2019-API9-e" lnHash="893639642" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="893639642" unbViolId="3f208424-1e4f-39e8-8899-ad833da752ca" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8615f4f-8d7b-321e-8d16-40198bade154" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="893639642" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="893639642" unbViolId="63029a5b-0b3e-3374-b697-0883db944a49" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f76836e9-838e-3232-96ce-2d9afdd7b8af" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="4" auth="username" locRef="4" rule="JSF-137" lnHash="893639642" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="893639642" unbViolId="007db5f8-6e30-31a3-8728-e7bf76a711f1" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1b04f6d-58b7-3f7d-9b78-93865fa6574e" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="4" auth="username" locRef="4" rule="MISRA-023" lnHash="893639642" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="893639642" unbViolId="08292159-9e62-3dd9-bdd1-d0778921403a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="45f4e0d2-ecf6-3f86-952b-c913b249b16d" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="2" auth="username" locRef="4" rule="MISRA2008-3_3_1" lnHash="893639642" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="893639642" unbViolId="c6b3fffd-1add-3dda-91bb-073aad5ec34a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="280cdc8e-1b3e-3374-b809-653b03df6d0d" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="3" auth="username" locRef="4" rule="CERT_C-DCL15-a" lnHash="893639642" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="893639642" unbViolId="db8ea537-8b04-3616-9329-a5f6a7cf81f3" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b1b4f326-1d18-33de-925b-21438c911aac" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="4" auth="username" locRef="4" rule="MISRA2004-8_10" lnHash="893639642" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="893639642" unbViolId="13eb171f-46e7-3ee9-993e-84c2b9627c2c" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5155122f-6657-34b8-8ee9-321270407f50" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' is declared in global namespace" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="4" auth="username" locRef="4" rule="JSF-098" lnHash="893639642" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="893639642" unbViolId="da327146-7c5e-32ca-bcc6-5e83eee0ed6d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1715e418-187c-3bcf-9585-313c8d96caf3" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' is declared in global namespace" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-36" lnHash="893639642" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="893639642" unbViolId="f7c99799-8913-32fe-962e-d15d3471c462" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e1b323d-214f-3da4-81c4-bfe35f8b7595" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' is declared in global namespace" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="2" auth="username" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="893639642" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="893639642" unbViolId="439cb2b3-a240-36b0-bc68-d74cd6e962db" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="757dc785-ecf1-3089-855e-c03fe39be969" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' is declared in global namespace" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="2" auth="username" locRef="4" rule="MISRA2008-7_3_1" lnHash="893639642" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="893639642" unbViolId="93329d77-916b-38f4-9462-e487ec23403e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e81cd77-43b2-3ee5-b887-804bb64f643d" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="'ring' should be encapsulated in a class" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="5" auth="username" locRef="4" rule="CODSTA-CPP-18" lnHash="893639642" rule.header="Encapsulate global variables and constants, enumerated types, and typedefs in a class" tool="c++test" lineHash="893639642" unbViolId="3e8c8f39-3d6d-33c8-bcba-79f34ad887b2" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b563e2f-dd7f-312f-bf30-2e7b80d09218" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Consider encapsulating 'ring'" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="3" auth="username" locRef="4" rule="JSF-207" lnHash="893639642" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="893639642" unbViolId="3c27d47a-e665-339d-bbca-8fadae5c68ba" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="147eddd8-464d-3cdc-a52d-4dc195a09e05" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Consider encapsulating 'ring'" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-82" lnHash="893639642" rule.header="Avoid unencapsulated global variables (including variables declared in namespaces and public static members)" tool="c++test" lineHash="893639642" unbViolId="0357f670-7b9c-3d14-96ba-1904ec722e8c" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6546c8f4-51e3-38a2-a5a8-85cdc2b2086f" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The 'ring' variable should be commented" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="3" auth="username" locRef="4" rule="JSF-132_a" lnHash="893639642" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="893639642" unbViolId="b59acf1b-0390-3b6c-bc5b-c5cac5039330" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9ef486e-443f-3d64-a872-6bec751b7e47" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The 'ring' variable should be commented" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="3" auth="username" locRef="4" rule="COMMENT-05" lnHash="893639642" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="893639642" unbViolId="dd7dd1d3-11ec-3ce9-ac6e-b9f34e3ba29a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ccd1d0ab-902f-3417-9927-c6218562c68e" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="2" auth="username" locRef="4" rule="AUTOSAR-M15_3_1-a" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="8b566425-086b-3a8d-ac3e-c8cf6180daa5" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb2124df-6ad2-3cc6-945a-ebffa797c1d4" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="2" auth="username" locRef="4" rule="CERT_CPP-ERR58-a" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="bf96019b-569b-35a3-98ea-d55259a99d0e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="89300b4c-cec2-3e1e-8eea-540f19d45e06" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="2" auth="username" locRef="4" rule="MISRA2008-15_3_1" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="d5e7d64a-01ea-3ff3-902b-d9ab2369139b" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b1b506e2-2b9a-3c7a-8f93-6af43b906d75" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="2" auth="username" locRef="4" rule="AUTOSAR-A15_5_3-f" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="847c7127-f028-31b6-9d82-69245dd4d95f" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0155245-c793-3399-8192-6c43c53b6c59" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="3" auth="username" locRef="4" rule="CERT_CPP-ERR50-f" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="cdf271ab-0475-345b-8ff0-c5bf0445c731" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aff66688-f20a-330a-a862-dd3d52ebfed3" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="3" auth="username" locRef="4" rule="EXCEPT-08" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="ca4c7a32-5c41-3a18-8b21-b011191bb5e6" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fbbcf807-4ccf-3e68-9c15-18bf2f1fac93" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="2" auth="username" locRef="4" rule="MISRA2008-15_5_3_f" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="6284871c-c922-3673-bc2f-994f264b00a9" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fbb341d6-550b-3caa-94b7-eb7850e2f601" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Use of variable &quot;ring&quot; with static storage duration is not allowed" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="3" auth="username" locRef="4" rule="HICPP-3_3_1-a" lnHash="893639642" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="893639642" unbViolId="7f0d44fe-07aa-3d98-ac87-ecae332bc0e4" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18ffaf9a-b988-3f19-b8d8-292a34a162b9" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Variable 'ring' should be declared using 'auto' specifier" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="3" auth="username" locRef="4" rule="HICPP-7_1_8-a" lnHash="893639642" rule.header="Use auto id = expr when declaring a variable that is the same type as the initializer function call" tool="c++test" lineHash="893639642" unbViolId="a8a60cb0-ae99-39dd-b6f7-b095047550af" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b776b611-8f26-3a72-a90f-6a722a5cbf02" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' is declared" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="5" auth="username" locRef="4" rule="MISRA-022" lnHash="893639642" rule.header="Declare objects at function scope" tool="c++test" lineHash="893639642" unbViolId="e2097372-f880-33d8-b09a-bea8744469f5" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e46318c2-9883-3ae4-bc0e-0ac9f2479bcf" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Naming convention not followed: ring" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="3" auth="username" locRef="4" rule="NAMING-18" lnHash="893639642" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="893639642" unbViolId="d4908518-9ea9-3d13-b623-3470af3dc201" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c54190f-4c44-3c45-b3b8-e2848d1537db" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The type 'int' of function argument number '2' does not match declared type 'double'" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="3" auth="username" locRef="4" rule="PB-11" lnHash="893639642" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="893639642" unbViolId="3a7afbf8-c950-30b3-8219-12227fe6702c" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="860db426-5bc8-3fce-b8dc-7883d7312af4" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Argument type conversion from &quot;shorter&quot; type to &quot;longer&quot; type" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="3" auth="username" locRef="4" rule="PORT-16" lnHash="893639642" rule.header="Avoid conversions from a &quot;shorter&quot; type to a &quot;longer&quot; type in function calls" tool="c++test" lineHash="893639642" unbViolId="516d6b48-7969-3927-a755-9e943f34d010" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04d3a5ff-10de-35ed-8719-a3e46c8549cb" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Implicit conversion from integral to floating type in function's argument" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="2" auth="username" locRef="4" rule="MISRA2008-5_0_5_b" lnHash="893639642" rule.header="There shall be no implicit floating-integral conversions" tool="c++test" lineHash="893639642" unbViolId="f9792a65-d9c6-3b28-b037-701f505496a9" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac51dd55-41da-350d-99e5-771a21e5496e" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Implicit conversion from integral to floating type in function's argument" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="3" auth="username" locRef="4" rule="CERT_C-EXP39-a" lnHash="893639642" rule.header="There shall be no implicit conversions from integral to floating type" tool="c++test" lineHash="893639642" unbViolId="6c72fb1e-7b36-3fb3-8c4a-008b051fa9db" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fdf51531-a943-3f7e-a82d-5cd569ce21c1" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Implicit conversion from integral to floating type in function's argument" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="2" auth="username" locRef="4" rule="AUTOSAR-M5_0_5-a" lnHash="893639642" rule.header="There shall be no implicit conversions from integral to floating type" tool="c++test" lineHash="893639642" unbViolId="79c7581e-f83f-379e-9b58-9201af6c8f30" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f05a2a9-e505-304d-98fe-335dc9b9433c" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Implicit conversion from integral to floating type in function's argument" ln="67" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="67" sev="3" auth="username" locRef="4" rule="MISRA2004-10_1_b" lnHash="893639642" rule.header="There shall be no implicit conversions from integral to floating type" tool="c++test" lineHash="893639642" unbViolId="39c7fb96-0acd-3e4c-89f0-35b409739883" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a508029-004a-38c2-a354-ff8838b2c839" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The operator '*', used for 'participants' declaration, should be directly connected with the type" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="3" auth="username" locRef="4" rule="JSF-062" lnHash="-1054095129" rule.header="The dereference operator '*' and the address-of operator '&amp;' will be directly connected with the type-specifier" tool="c++test" lineHash="-1054095129" unbViolId="ceda3b62-58f2-3885-9a0e-5f925f96252f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38b8334e-dd2b-3c17-9af5-421c093bc3a8" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="The operator '*', used for 'participants' declaration, should be directly connected with the type" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="4" auth="username" locRef="4" rule="FORMAT-32" lnHash="-1054095129" rule.header="The dereference operator '*' and the address-of operator '&amp;' should be directly connected with the type" tool="c++test" lineHash="-1054095129" unbViolId="af4fa90e-47e6-33b2-9366-68664a4a9172" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e55241d-1b47-304e-b60b-42be06f778cf" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Declaration of variable 'participants' contains more than one level of pointer indirection" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="3" auth="username" locRef="4" rule="HICPP-8_1_1-a" lnHash="-1054095129" rule.header="The declaration should not contain more than one level of pointer indirection" tool="c++test" lineHash="-1054095129" unbViolId="a9b46627-a6b6-3555-9b68-e2db17e79250" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05191f18-dc70-3f41-bb76-fd401e366289" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Declaration of variable 'participants' contains more than one level of pointer indirection" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="3" auth="username" locRef="4" rule="CODSTA-89" lnHash="-1054095129" rule.header="The declaration should not contain more than one level of pointer indirection" tool="c++test" lineHash="-1054095129" unbViolId="4c4163dd-49e9-3ced-bd25-6157d633bdfc" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36302f14-7c99-3e82-8b47-63eb355fc41f" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: participants" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="3" auth="username" locRef="4" rule="CODSTA-94" lnHash="-1054095129" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1054095129" unbViolId="5949de20-eef5-347a-897f-9a4bc4386ae0" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f24feca-6698-316a-a8a0-a1244cef291c" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="The variable of pointer type is declared: participants" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="3" auth="username" locRef="4" rule="CODSTA-95" lnHash="-1054095129" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1054095129" unbViolId="1bde4a26-b592-324c-b63c-c517e342444a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d60ef828-e5c0-3d73-b59c-5a21cc32d889" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="'participants' should be encapsulated in a class" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="5" auth="username" locRef="4" rule="CODSTA-CPP-18" lnHash="-1054095129" rule.header="Encapsulate global variables and constants, enumerated types, and typedefs in a class" tool="c++test" lineHash="-1054095129" unbViolId="c1084cda-38c5-37d4-b1da-691eef364b28" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5fadb94b-1730-3bbd-9889-0f361f065d9f" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Consider encapsulating 'participants'" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="3" auth="username" locRef="4" rule="JSF-207" lnHash="-1054095129" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="-1054095129" unbViolId="5d489b17-b822-37e3-98ea-0a6e7adbb223" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75a15788-d21a-38fa-b5a8-1d45baed9ee4" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Consider encapsulating 'participants'" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-82" lnHash="-1054095129" rule.header="Avoid unencapsulated global variables (including variables declared in namespaces and public static members)" tool="c++test" lineHash="-1054095129" unbViolId="7a2e76e5-df52-301c-9fa6-49abe82722e0" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9286eed7-429f-3499-ae30-a86978d4ee81" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="The 'participants' variable should be commented" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="3" auth="username" locRef="4" rule="JSF-132_a" lnHash="-1054095129" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1054095129" unbViolId="56034759-3e9b-3e14-8857-73d83f2f4a3c" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3cf2fc17-0228-3eed-8a5d-def00355be53" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="The 'participants' variable should be commented" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="3" auth="username" locRef="4" rule="COMMENT-05" lnHash="-1054095129" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1054095129" unbViolId="ec8955e2-a2fd-3e4c-9357-e1992997df47" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f4b35f52-9846-33bc-9fa8-fd876ea683c9" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Use of variable &quot;participants&quot; with static storage duration is not allowed" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="3" auth="username" locRef="4" rule="HICPP-3_3_1-a" lnHash="-1054095129" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="-1054095129" unbViolId="c532caf6-5092-357c-85de-d73088e608b6" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e79236bc-1dcd-3b88-a32f-934a2c33136e" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' is declared" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="5" auth="username" locRef="4" rule="MISRA-022" lnHash="-1054095129" rule.header="Declare objects at function scope" tool="c++test" lineHash="-1054095129" unbViolId="93a014df-2318-3066-9b59-35737ebbd60c" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="058cc9b5-2024-33cd-a961-42cd6c6b3df6" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Naming convention not followed: participants" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="3" auth="username" locRef="4" rule="NAMING-18" lnHash="-1054095129" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="-1054095129" unbViolId="9ecd3670-602f-38a5-9e72-168541d9033b" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="785e9aa3-b165-359e-98df-4487749d9696" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="The 'participants' identifier should have the 'rg' prefix" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="3" auth="username" locRef="4" rule="NAMING-HN-01" lnHash="-1054095129" rule.header="Hungarian notation for array variables and parameters" tool="c++test" lineHash="-1054095129" unbViolId="6db4b37d-2dc7-37c6-b951-c7ec018a4ef7" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e4d4d7d-0f55-31b3-9be6-9a11c183e451" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="4" auth="username" locRef="4" rule="OWASP2019-API9-e" lnHash="-1054095129" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1054095129" unbViolId="e1a6e2eb-21c1-3bd5-a4e3-7f25b682ecab" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07cabb56-00f2-3cf9-b4bc-7e9bf9c89d09" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="-1054095129" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1054095129" unbViolId="a4ba826b-b723-31cf-8028-1316312923a0" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf11ec39-f708-360a-a732-f15a4eb77bc0" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="4" auth="username" locRef="4" rule="JSF-137" lnHash="-1054095129" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-1054095129" unbViolId="da225d96-a4c6-3acc-99f4-368a414c74d5" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12395836-caa0-3f14-a239-d18984a655d8" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="4" auth="username" locRef="4" rule="MISRA-023" lnHash="-1054095129" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1054095129" unbViolId="53183582-c3a8-3eda-b198-e27828d375cb" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0dbc41a9-f454-31c2-8a3f-736fd486ffa9" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="2" auth="username" locRef="4" rule="MISRA2008-3_3_1" lnHash="-1054095129" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1054095129" unbViolId="9641924b-2bbf-38b2-be0e-9a922d84fb3b" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="491b51e5-1dfe-3d83-b48c-ccf3eb40f5d6" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="3" auth="username" locRef="4" rule="CERT_C-DCL15-a" lnHash="-1054095129" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1054095129" unbViolId="7d614dce-dc27-3552-af57-4a13156c0ee8" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f32af01-293f-37fc-96e9-16d065256a17" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="4" auth="username" locRef="4" rule="MISRA2004-8_10" lnHash="-1054095129" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1054095129" unbViolId="ad595f3e-48f4-3b08-8d52-eadd872ded72" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8851e1f-3d72-39cc-aa9f-52af123b97db" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="The 'participants' array should not be used" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="3" auth="username" locRef="4" rule="STL-37" lnHash="-1054095129" rule.header="C-style arrays shall not be used" tool="c++test" lineHash="-1054095129" unbViolId="6c995a81-de30-36a7-a5a1-e7b354a1141d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b6607a0-40af-3c98-9753-629069cb9f13" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="The 'participants' array should not be used" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="2" auth="username" locRef="4" rule="AUTOSAR-A18_1_1-a" lnHash="-1054095129" rule.header="C-style arrays shall not be used" tool="c++test" lineHash="-1054095129" unbViolId="2a7737b8-0f56-3f1b-b029-a96252d853a0" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4bc6ff8e-8b46-37b4-a38c-901fd57e20f5" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' is declared in global namespace" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="4" auth="username" locRef="4" rule="JSF-098" lnHash="-1054095129" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-1054095129" unbViolId="68a03563-4e5b-33b0-bae2-83eef13a9ed9" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cfb1c751-46a9-3981-81b9-75883d2d2caa" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' is declared in global namespace" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-36" lnHash="-1054095129" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1054095129" unbViolId="34da8d76-553a-3c60-bb0a-44811348b756" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aee89a50-2b4d-3034-bd47-06f64f226a69" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' is declared in global namespace" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="2" auth="username" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="-1054095129" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1054095129" unbViolId="1d82f2a9-d7a2-380a-8463-00f8ae5a1d0d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d97da55-9b8f-34bd-a339-9e53595fcc0b" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' is declared in global namespace" ln="68" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="68" sev="2" auth="username" locRef="4" rule="MISRA2008-7_3_1" lnHash="-1054095129" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-1054095129" unbViolId="67679ad6-025f-3148-9b33-6b331fcd36e2" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f1561a2-1bcc-35a5-bc64-ddabf73aa1c7" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="4" auth="username" locRef="4" rule="MISRA2008-3_9_2" lnHash="-1146363747" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1146363747" unbViolId="06743b34-aff3-3201-8308-917709df9792" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94cdaadd-e9cb-3447-9ecd-3832ad595497" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="3" auth="username" locRef="4" rule="MISRA-013" lnHash="-1146363747" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1146363747" unbViolId="99a975c0-efae-3003-a329-d880461dd200" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f5fdf79-00e3-3516-a03f-cc5a21dad778" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="3" auth="username" locRef="4" rule="CODSTA-223" lnHash="-1146363747" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1146363747" unbViolId="fa566f80-62ac-3065-9560-a9186d84abcf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59b89440-4bee-3b92-8030-8b03c285b036" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="-1146363747" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1146363747" unbViolId="a6751dc0-48ba-30d6-98a6-e893e78479dc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="735df298-2c9d-39e8-b99f-ff921026f038" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="3" auth="username" locRef="4" rule="HICPP-7_1_6-b" lnHash="-1146363747" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-1146363747" unbViolId="9238d5e5-71bb-3624-afcf-ce8e10043bed" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d2fa617-b153-3678-8cdd-8d12cdb968a9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="4" auth="username" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="-1146363747" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1146363747" unbViolId="9351f090-d4eb-3339-aeae-f98350b20ef9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dcbf74f9-debb-309e-8604-04bddce8d897" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="3" auth="username" locRef="4" rule="MISRA2004-6_3_b" lnHash="-1146363747" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1146363747" unbViolId="76223f2d-9e46-379a-bc99-451a7b52f881" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b9a953e-58d7-3222-be7a-214dc2486a0a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="2" auth="username" locRef="4" rule="JSF-209_b" lnHash="-1146363747" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-1146363747" unbViolId="e649cb3c-0625-396b-9c20-2edaa33e7fb4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f65794e-20fa-350f-bf4a-e9121c65b1f6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="4" auth="username" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="-1146363747" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1146363747" unbViolId="faf10827-33e7-36ae-a6ee-8a2c0d13228b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7fe270dc-6f27-330a-bbe4-5e10350fa540" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="3" auth="username" locRef="4" rule="HICPP-3_5_1-b" lnHash="-1146363747" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1146363747" unbViolId="23424f66-0a4e-31f1-ad1c-4c3667a52312" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f9bfc5d-7e0e-38f2-9d65-c4333284883a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="'participantsCount' shall be declared as unsigned int or signed int" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="3" auth="username" locRef="4" rule="PORT-13" lnHash="-1146363747" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-1146363747" unbViolId="539e4353-159d-398c-bcb2-18af01288573" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6d7b0ccb-525e-31f1-8b00-dcf7b578afc9" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="'participantsCount' should be encapsulated in a class" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="5" auth="username" locRef="4" rule="CODSTA-CPP-18" lnHash="-1146363747" rule.header="Encapsulate global variables and constants, enumerated types, and typedefs in a class" tool="c++test" lineHash="-1146363747" unbViolId="c9e9d714-ae57-3d1e-9975-cb3d2d8652d2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b42559f-5143-3a62-aaaf-03b03ad1ca47" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Consider encapsulating 'participantsCount'" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="3" auth="username" locRef="4" rule="JSF-207" lnHash="-1146363747" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="-1146363747" unbViolId="24c4979e-89b1-3a15-8450-b5c17ace8095" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb823f5f-ac0f-3c2d-90fd-8731ebf8de12" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Consider encapsulating 'participantsCount'" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-82" lnHash="-1146363747" rule.header="Avoid unencapsulated global variables (including variables declared in namespaces and public static members)" tool="c++test" lineHash="-1146363747" unbViolId="f1ebfef3-2c95-3ee8-9e68-4c5e7d02697a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa60fb8a-7b7b-3e9c-b5a1-8b10037500b6" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The 'participantsCount' variable should be commented" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="3" auth="username" locRef="4" rule="JSF-132_a" lnHash="-1146363747" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1146363747" unbViolId="dde30745-3ba6-3236-8809-acc91694bef9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b8bde90-2f77-3d4d-8699-ba375053d0cc" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The 'participantsCount' variable should be commented" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="3" auth="username" locRef="4" rule="COMMENT-05" lnHash="-1146363747" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1146363747" unbViolId="8adecaed-fb7b-33b0-9135-641b4fb7d3cc" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="525f4f11-bcb7-34ef-a8a2-5c156db932fd" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Use of variable &quot;participantsCount&quot; with static storage duration is not allowed" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="3" auth="username" locRef="4" rule="HICPP-3_3_1-a" lnHash="-1146363747" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="-1146363747" unbViolId="6c82820f-1375-383d-b4fa-26560758f32f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68fe8b2f-f97c-3dff-8f7a-ffb609780c55" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' is declared" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="5" auth="username" locRef="4" rule="MISRA-022" lnHash="-1146363747" rule.header="Declare objects at function scope" tool="c++test" lineHash="-1146363747" unbViolId="95732a1a-8fc5-3972-a9e4-134e9c78451a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0fc424a-e30b-3939-93d6-d695405ff85c" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Naming convention not followed: participantsCount" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="3" auth="username" locRef="4" rule="NAMING-18" lnHash="-1146363747" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="-1146363747" unbViolId="1ddd1a3b-4802-33e5-8435-aa278d6f8f84" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5ed71e8-aa88-366c-a5a6-d4f98982d840" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Naming convention not followed: participantsCount" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="3" auth="username" locRef="4" rule="NAMING-19" lnHash="-1146363747" rule.header="Begin all integer type variable with 'i'" tool="c++test" lineHash="-1146363747" unbViolId="9564d4c8-233e-32b3-a4b0-4d4374cb4169" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="df573691-ac7b-32c1-a5cc-11370f3e134d" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The 'participantsCount' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="3" auth="username" locRef="4" rule="NAMING-HN-22" lnHash="-1146363747" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-1146363747" unbViolId="f415d297-2dc4-3d27-a49e-8e116e20fe6e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23837ff6-0e1e-3f23-8410-d10d76f7a4b1" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The 'participantsCount' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="3" auth="username" locRef="4" rule="NAMING-HN-30" lnHash="-1146363747" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-1146363747" unbViolId="b49bab8d-e683-330b-8b71-5f22631b597a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83b79987-4c73-37dd-afd7-0382f6985b30" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The 'participantsCount' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="3" auth="username" locRef="4" rule="NAMING-HN-43" lnHash="-1146363747" rule.header="Hungarian notation for word types" tool="c++test" lineHash="-1146363747" unbViolId="4aa221d9-e9b0-3470-8bab-0aa4f6f71e4f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="955b4645-3722-305c-8ce1-84dc3531bd79" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The variable &quot;participantsCount&quot; was not initialized when declared" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="2" auth="username" locRef="4" rule="JSF-142_b" lnHash="-1146363747" rule.header="All variables shall be initialized before use" tool="c++test" lineHash="-1146363747" unbViolId="0e6ecd9e-c57d-3c19-8e20-135d8284bc9a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db5aa00f-10cf-38e2-9882-1fe46733dd22" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The variable &quot;participantsCount&quot; was not initialized when declared" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="3" auth="username" locRef="4" rule="INIT-03" lnHash="-1146363747" rule.header="Initialize all variables" tool="c++test" lineHash="-1146363747" unbViolId="113efd93-9721-3c55-aadc-2f4df0bd7889" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7587b2b8-8b09-3641-8f88-2b3d36c70d99" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="4" auth="username" locRef="4" rule="OWASP2019-API9-e" lnHash="-1146363747" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1146363747" unbViolId="87f64bf5-43fa-387f-9efd-0f93aecb6faa" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27ecb5a3-631a-338c-b517-9654f7c3393c" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="-1146363747" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1146363747" unbViolId="261c29fe-3c1b-3d62-9783-516525b39360" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aff78f3d-77e3-30e8-9999-1270cf42583e" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="4" auth="username" locRef="4" rule="JSF-137" lnHash="-1146363747" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-1146363747" unbViolId="cc402e70-ee02-3337-976d-790628624782" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d9dbfc8-0493-3d98-803a-487fd41aac78" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="4" auth="username" locRef="4" rule="MISRA-023" lnHash="-1146363747" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1146363747" unbViolId="29ebebd5-d91e-3036-a67c-793a76782bbe" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f2e327b6-db1d-3d35-afb0-74cfccd8c3a9" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="2" auth="username" locRef="4" rule="MISRA2008-3_3_1" lnHash="-1146363747" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1146363747" unbViolId="2f610041-7a4c-343b-b646-7f6effbecac4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79a89450-4e04-3fc8-81fb-fbc9d791735c" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="3" auth="username" locRef="4" rule="CERT_C-DCL15-a" lnHash="-1146363747" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1146363747" unbViolId="5edc5ad0-20b5-346c-a9ad-69e6310ac79c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07ec4313-c8bc-31d5-96e4-789b5c136968" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="4" auth="username" locRef="4" rule="MISRA2004-8_10" lnHash="-1146363747" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1146363747" unbViolId="ce52818e-0821-3885-9ec6-28b0506fe695" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e68cdca-818a-3794-8b94-0e0d65bcfe9d" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The name 'participantsCount' should be composed only of lowercase letters" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="3" auth="username" locRef="4" rule="JSF-051" lnHash="-1146363747" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1146363747" unbViolId="dae14578-d128-38b8-b373-14ff87678d21" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="870c74eb-da40-3b55-b993-2c72a1aad3a3" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The name 'participantsCount' should be composed only of lowercase letters" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="3" auth="username" locRef="4" rule="NAMING-44" lnHash="-1146363747" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1146363747" unbViolId="3382f850-c888-350a-9e72-c6ac9251216c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5bde7f96-2509-3585-8c74-2b3857ba632b" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' is declared in global namespace" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="4" auth="username" locRef="4" rule="JSF-098" lnHash="-1146363747" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-1146363747" unbViolId="52aee535-0d9d-3d9c-ae14-96ac870596e7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="922884f9-4a33-3bab-8ea4-d3352a0655a6" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' is declared in global namespace" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-36" lnHash="-1146363747" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1146363747" unbViolId="26526175-3368-30fd-86d3-ab46214c7f7c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c58ff09a-1554-3c6f-b1dc-960fc37fad53" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' is declared in global namespace" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="2" auth="username" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="-1146363747" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1146363747" unbViolId="f50dc502-f8d7-3dbb-99e4-503a64e410a5" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="01f9f0dc-8a61-3c0e-bcc3-2a70a226eebc" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' is declared in global namespace" ln="69" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="69" sev="2" auth="username" locRef="4" rule="MISRA2008-7_3_1" lnHash="-1146363747" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-1146363747" unbViolId="beb95474-abcb-3f2a-b81e-9419d49b33b5" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23fe3c05-9e1a-3b17-9645-dd8f7c528df9" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="4" auth="username" locRef="4" rule="MISRA2008-3_9_2" lnHash="-807048934" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-807048934" unbViolId="40460491-414b-379c-ae83-02ae4116e5fc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f41b17f-c050-38fa-b07e-4cd8b9b18c74" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="3" auth="username" locRef="4" rule="MISRA-013" lnHash="-807048934" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-807048934" unbViolId="5ec1e805-f4ce-3530-870e-b52e70982e8a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e2d7dd4-bd65-359b-ae2e-47114093a65d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="3" auth="username" locRef="4" rule="CODSTA-223" lnHash="-807048934" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-807048934" unbViolId="dd19fce1-12ea-3d98-a7eb-7708045b2bf4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2779be15-9aa2-3be8-aecd-8d52a370ec4e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="-807048934" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-807048934" unbViolId="d4cde6ed-910b-3096-a606-19f3232084a3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="100524f9-28fd-3965-9de5-405868d76862" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="3" auth="username" locRef="4" rule="HICPP-7_1_6-b" lnHash="-807048934" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-807048934" unbViolId="fbc5f1d0-6183-34d9-a5b6-d360c5642b3f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8223b8a-b9bd-3b7b-b869-a35fd553ece9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="4" auth="username" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="-807048934" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-807048934" unbViolId="94272341-dbe5-3469-92db-0cc2c7a7b115" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f33fa05-e928-3ccb-9b00-69ab129c718a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="3" auth="username" locRef="4" rule="MISRA2004-6_3_b" lnHash="-807048934" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-807048934" unbViolId="b56f5b44-5703-37e3-9ddc-56eed2896232" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="93c8d4b7-dace-35ac-91e3-c5703d6f208f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="2" auth="username" locRef="4" rule="JSF-209_b" lnHash="-807048934" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-807048934" unbViolId="ec53bc9f-2e93-37fb-918f-1e3bb7413380" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf252dc6-7607-30e8-bd1a-512ee3e21ea9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="4" auth="username" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="-807048934" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-807048934" unbViolId="fb4f6550-a38a-3928-8098-6270bd22fd90" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2b0964d-2088-3d85-936b-e685bf91185c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="3" auth="username" locRef="4" rule="HICPP-3_5_1-b" lnHash="-807048934" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-807048934" unbViolId="00063ddf-49b0-33e8-bde9-af5817a85d06" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1770cd7-7ad3-367f-a399-745bf10acf27" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="'exitGame' shall be declared as unsigned int or signed int" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="3" auth="username" locRef="4" rule="PORT-13" lnHash="-807048934" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-807048934" unbViolId="02eda7b6-e0ab-39f3-ab94-bab761a49571" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab931d4b-f832-3a99-a3e0-88f06a5d1ea8" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="'exitGame' should be encapsulated in a class" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="5" auth="username" locRef="4" rule="CODSTA-CPP-18" lnHash="-807048934" rule.header="Encapsulate global variables and constants, enumerated types, and typedefs in a class" tool="c++test" lineHash="-807048934" unbViolId="90f1d989-70da-33ae-af2b-5fa167737fe0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5cf60771-0f79-3f27-b419-e69e4a5c4ed8" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Consider encapsulating 'exitGame'" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="3" auth="username" locRef="4" rule="JSF-207" lnHash="-807048934" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="-807048934" unbViolId="ca0ac728-095d-3202-bc78-3e503856afaa" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13bbb908-128e-39b7-a01b-084bf44ab02f" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Consider encapsulating 'exitGame'" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-82" lnHash="-807048934" rule.header="Avoid unencapsulated global variables (including variables declared in namespaces and public static members)" tool="c++test" lineHash="-807048934" unbViolId="ee2e8d4f-f5f5-341e-b5f9-1cf3ef307814" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bbc58213-5b3a-35e0-b839-49d2424fa2cf" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The 'exitGame' variable should be commented" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="3" auth="username" locRef="4" rule="JSF-132_a" lnHash="-807048934" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-807048934" unbViolId="f0c86b8c-8115-3ed7-9a80-6cd3d8a3f253" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d528d0a7-0345-3747-9c7e-6c7131ed9cec" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The 'exitGame' variable should be commented" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="3" auth="username" locRef="4" rule="COMMENT-05" lnHash="-807048934" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-807048934" unbViolId="7fbe3edd-61b5-349f-a0a9-f701e350b251" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e11fb72c-4303-322c-a58b-9a6d12df3a9e" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Use of variable &quot;exitGame&quot; with static storage duration is not allowed" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="3" auth="username" locRef="4" rule="HICPP-3_3_1-a" lnHash="-807048934" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="-807048934" unbViolId="3a4c3835-8c3c-36c9-bece-49b5b2c1ced6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06885abd-644b-3d18-85ae-7b57435522cf" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' is declared" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="5" auth="username" locRef="4" rule="MISRA-022" lnHash="-807048934" rule.header="Declare objects at function scope" tool="c++test" lineHash="-807048934" unbViolId="cc1171b7-f6de-356d-b0d5-f3cf02ecde46" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5090df3b-ac2d-393a-9c41-e97ca1c8fb74" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Naming convention not followed: exitGame" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="3" auth="username" locRef="4" rule="NAMING-18" lnHash="-807048934" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="-807048934" unbViolId="8dc41939-2a1b-34a8-907e-2a98c60e3008" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1385c1be-8fa4-319c-aaf7-c897fb3c32e5" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Naming convention not followed: exitGame" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="3" auth="username" locRef="4" rule="NAMING-19" lnHash="-807048934" rule.header="Begin all integer type variable with 'i'" tool="c++test" lineHash="-807048934" unbViolId="1092b6b3-142a-378d-84ee-a58d26220f0e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="786a8ff3-d7d0-3787-bd73-98eaf6652965" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The 'exitGame' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="3" auth="username" locRef="4" rule="NAMING-HN-22" lnHash="-807048934" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-807048934" unbViolId="cebdc6b0-305d-3efc-9ad8-9a1ef4ac5e0a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="57dc73c5-eb16-37bd-b65c-cefbcb816b20" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The 'exitGame' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="3" auth="username" locRef="4" rule="NAMING-HN-30" lnHash="-807048934" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-807048934" unbViolId="ea56761f-ea30-39c2-adec-bb8fc994ae95" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3209a7bc-99da-35d9-92eb-38384dcdd1b4" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The 'exitGame' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="3" auth="username" locRef="4" rule="NAMING-HN-43" lnHash="-807048934" rule.header="Hungarian notation for word types" tool="c++test" lineHash="-807048934" unbViolId="e06a0e4d-d6d6-3df8-8eff-3e84c7021d7d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb04500b-3783-3c53-92a0-fd3ed7da0653" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The variable &quot;exitGame&quot; was not initialized when declared" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="2" auth="username" locRef="4" rule="JSF-142_b" lnHash="-807048934" rule.header="All variables shall be initialized before use" tool="c++test" lineHash="-807048934" unbViolId="9a5ba7be-3343-3d0f-9a31-f3763da4c8a9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8cc7a06-9ecb-380a-9f37-7cab894478ad" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The variable &quot;exitGame&quot; was not initialized when declared" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="3" auth="username" locRef="4" rule="INIT-03" lnHash="-807048934" rule.header="Initialize all variables" tool="c++test" lineHash="-807048934" unbViolId="ca26e5e7-3040-3155-a4ed-62bc5c5c86b6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="15ff3443-5d0e-301d-8518-e8ad03e788f3" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="4" auth="username" locRef="4" rule="OWASP2019-API9-e" lnHash="-807048934" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-807048934" unbViolId="63e7f9bb-c4e5-30d9-9986-11a1d022ea7c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a2637801-0992-39f6-8d4e-e65f9fa76dac" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="-807048934" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-807048934" unbViolId="b2f011ef-87e1-36ac-b4a2-575c65b916af" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f46325d-9612-37ab-b969-0c6685cbf636" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="4" auth="username" locRef="4" rule="JSF-137" lnHash="-807048934" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-807048934" unbViolId="dcdf8027-7d81-36f1-8d77-f7fb0bee692f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9bda4c0d-e84d-3b93-ad90-7ea25c7ccca3" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="4" auth="username" locRef="4" rule="MISRA-023" lnHash="-807048934" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-807048934" unbViolId="7f2d3ef9-2137-3ebf-b828-15253086ec87" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c54c04f7-c120-346e-9d5c-f547ea0d1be8" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="2" auth="username" locRef="4" rule="MISRA2008-3_3_1" lnHash="-807048934" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-807048934" unbViolId="e3f7bb3e-9156-3328-8219-8283132d0b97" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5645e86e-4736-3024-921d-fac65be8e2e8" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="3" auth="username" locRef="4" rule="CERT_C-DCL15-a" lnHash="-807048934" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-807048934" unbViolId="7e71f1dc-9ad6-34c1-b4de-63de1687d5c4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="44fb20ac-5662-3f80-9371-e9c790e1ed77" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="4" auth="username" locRef="4" rule="MISRA2004-8_10" lnHash="-807048934" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-807048934" unbViolId="e03c5d22-115e-3489-abbe-6eb782ad83de" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f68bddb-7ba2-3bc7-b0ba-1e481c404a25" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The name 'exitGame' should be composed only of lowercase letters" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="3" auth="username" locRef="4" rule="JSF-051" lnHash="-807048934" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-807048934" unbViolId="a327a3d2-3acb-3230-8924-b828f657ffaa" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="435c01ce-06be-30f6-9336-3b98049dd785" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The name 'exitGame' should be composed only of lowercase letters" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="3" auth="username" locRef="4" rule="NAMING-44" lnHash="-807048934" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-807048934" unbViolId="2d542e76-bbb9-3087-88fd-64f240912828" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b6302ef-1c0c-3a64-82a7-0347f31a21be" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' is declared in global namespace" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="4" auth="username" locRef="4" rule="JSF-098" lnHash="-807048934" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-807048934" unbViolId="e2f90ed1-4c65-334c-a107-36ccbc11988c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da18ade4-6210-363f-b75a-e04a7e149304" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' is declared in global namespace" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-36" lnHash="-807048934" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-807048934" unbViolId="b726a186-f2ac-37c3-9291-b03c56ab21b1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f1474e93-98a9-35bb-b4e2-5d29adf965a5" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' is declared in global namespace" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="2" auth="username" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="-807048934" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-807048934" unbViolId="b669b2b4-59f6-34c5-977d-952bdb09b527" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c239dd8f-aa08-3b87-90cd-ac897131800a" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' is declared in global namespace" ln="70" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="70" sev="2" auth="username" locRef="4" rule="MISRA2008-7_3_1" lnHash="-807048934" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-807048934" unbViolId="99842615-7a2c-34a1-9aba-97bad766210a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d835bce-33d1-3b34-bc10-3d68cff62313" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The return type of the 'GameLogic_Thread' function should be declared as 'auto'" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="2" auth="username" locRef="4" rule="CODSTA-MCPP-08_b" lnHash="-105532398" rule.header="Prefer 'auto' to explicit type names for function return types" tool="c++test" lineHash="-105532398" unbViolId="5fba3477-33d5-31f2-b5d0-b71fc6f70456" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d3459a1-3ab5-366a-b231-c978205d6a4a" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The definition of the 'GameLogic_Thread' function is not preceded by a comment" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="3" auth="username" locRef="4" rule="COMMENT-04" lnHash="-105532398" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-105532398" unbViolId="3e8ce873-625c-3281-94f9-235af5e36795" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da7238f4-6694-3c0e-aea4-e9ca3d305058" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The definition of the 'GameLogic_Thread' function is not preceded by a comment" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="4" auth="username" locRef="4" rule="JSF-134" lnHash="-105532398" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-105532398" unbViolId="382c8632-c61c-357c-b870-31a9a53ac213" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e51527fe-46c4-314f-954b-ed86b4b7d5f1" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="4" auth="username" locRef="4" rule="OWASP2019-API9-e" lnHash="-105532398" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-105532398" unbViolId="75dfb1c6-f544-3d34-89ca-fa4ba1329815" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0fe6120c-dfbb-3a3c-81b1-5880ac95f8c9" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="-105532398" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-105532398" unbViolId="4f79b825-df6f-35fd-9fd1-77e19bec3b85" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bfba0b13-dc1e-3d60-897b-caa08711c8d7" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="4" auth="username" locRef="4" rule="JSF-137" lnHash="-105532398" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-105532398" unbViolId="8eac9554-83d8-3e29-8f54-e08af06f8abb" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="140226fd-478d-33b5-99dd-c17550275177" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="4" auth="username" locRef="4" rule="MISRA-023" lnHash="-105532398" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-105532398" unbViolId="0d3ad495-a301-39d7-a7c2-1297c0517f78" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab361bad-ab8e-3a08-9470-12d1d54d3e96" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="2" auth="username" locRef="4" rule="MISRA2008-3_3_1" lnHash="-105532398" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-105532398" unbViolId="b70f764d-e149-3afc-b758-c1616af60f40" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b68eebe7-6472-354e-90c1-fd9dddabda5c" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="3" auth="username" locRef="4" rule="CERT_C-DCL15-a" lnHash="-105532398" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-105532398" unbViolId="62cdb256-758c-3619-a80f-5a13672c8d10" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef8670fc-bec8-301b-8228-c061f0b84fbd" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="4" auth="username" locRef="4" rule="MISRA2004-8_10" lnHash="-105532398" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-105532398" unbViolId="cd4947de-6932-32a1-a1ae-3e22e1e774b0" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="958ef82b-f5f9-3725-9279-488ba388c04b" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The name 'GameLogic_Thread' should be composed only of lowercase letters" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="3" auth="username" locRef="4" rule="JSF-051" lnHash="-105532398" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-105532398" unbViolId="5d81ab65-26de-3c09-b239-def8b4638266" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd5ee2b3-a493-3e7d-9a6c-77f9f6a6721c" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The name 'GameLogic_Thread' should be composed only of lowercase letters" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="3" auth="username" locRef="4" rule="NAMING-44" lnHash="-105532398" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-105532398" unbViolId="e25a5664-bd62-3d84-8417-633926338c74" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ce44e8a-4dfd-3aa6-b0ab-36354de27297" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Global function 'GameLogic_Thread' is declared in global namespace" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="4" auth="username" locRef="4" rule="JSF-098" lnHash="-105532398" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-105532398" unbViolId="cfc68bfd-a38c-31a4-88cf-cbdcdf26ca0b" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5322eb41-8ce6-3d95-aa52-f404998eaa24" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Global function 'GameLogic_Thread' is declared in global namespace" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-36" lnHash="-105532398" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-105532398" unbViolId="2b85661c-baa9-3a80-a9d5-52185e474466" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b567c99b-f114-396c-bd07-ddfc5bdc4340" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Global function 'GameLogic_Thread' is declared in global namespace" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="2" auth="username" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="-105532398" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-105532398" unbViolId="5039fc57-72a2-314e-9a67-a903c8faf1d6" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7410d6b4-9193-3c40-9bb1-5c17de3c957b" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Global function 'GameLogic_Thread' is declared in global namespace" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="2" auth="username" locRef="4" rule="MISRA2008-7_3_1" lnHash="-105532398" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-105532398" unbViolId="cfc7a0b4-fb2d-307e-804c-d505b9f3175e" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b743f2d-9a43-3689-86d9-c13ef6be6fc3" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Consider using 'constexpr' for the 'GameLogic_Thread' function" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="2" auth="username" locRef="4" rule="AUTOSAR-A7_1_2-b" lnHash="-105532398" rule.header="Use constexpr to declare functions whenever possible" tool="c++test" lineHash="-105532398" unbViolId="58f15fe5-e0ce-38ff-800c-badf53817c41" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3bf6356-c916-30e1-973f-02bd2e2a4278" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Consider using 'constexpr' for the 'GameLogic_Thread' function" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="4" auth="username" locRef="4" rule="CODSTA-MCPP-11_b_cpp11" lnHash="-105532398" rule.header="Use constexpr to declare functions whenever possible" tool="c++test" lineHash="-105532398" unbViolId="9ae1fc39-82e4-32da-be19-3785a412bbb0" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="46297ca8-f6ec-3998-b434-7ad0203eb4d3" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The 'GameLogic_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="3" auth="username" locRef="4" rule="COMMENT-14" lnHash="-105532398" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-105532398" unbViolId="606c7865-c737-3acc-a1f2-2734522d1d4b" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51ed9238-cc20-3a63-8fb3-7d9a3041908c" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The 'GameLogic_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="2" auth="username" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="-105532398" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-105532398" unbViolId="aedbc6fc-dc66-38f0-af58-a40dfd75436a" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3fe69961-c335-3f39-bc72-56ca56ede85d" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The 'GameLogic_Thread' function should be preceded by a comment that contains the '@return' tag" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="3" auth="username" locRef="4" rule="COMMENT-14_b" lnHash="-105532398" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-105532398" unbViolId="fb9fb19e-51ff-3bd5-b0d2-484594521b0e" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36945d4b-8bca-32da-bc70-88da9c9eef17" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The 'GameLogic_Thread' function should be preceded by a comment that contains the '@return' tag" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="2" auth="username" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="-105532398" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-105532398" unbViolId="2c89748d-ed82-3596-825c-79db64a89caf" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b8dc5be-cc94-3bfb-a564-e68c250de64e" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The 'GameLogic_Thread' function should be declared 'noexcept'" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="2" auth="username" locRef="4" rule="AUTOSAR-A15_4_4-a" lnHash="-105532398" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-105532398" unbViolId="d0647983-9dfc-381e-adc0-cf3ff4f4e8ba" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d7887fc-fa75-3fd2-b0eb-56193ca825dc" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The 'GameLogic_Thread' function should be declared 'noexcept'" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="3" auth="username" locRef="4" rule="CODSTA-MCPP-09" lnHash="-105532398" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-105532398" unbViolId="1dd22e12-3df6-3c0c-9949-858009479d4b" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99f381b7-feef-3cef-bda7-f95bb0c51443" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'GameLogic_Thread'" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="3" auth="username" locRef="4" rule="FORMAT-28" lnHash="-105532398" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-105532398" unbViolId="d741e15b-6ba3-3002-8f6e-dcf2fec96afc" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="998784f7-ce6e-37fc-a9fe-e6f2b541cae3" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' has Cyclomatic Complexity value: 1" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="5" auth="username" locRef="4" rule="METRICS-29" lnHash="-105532398" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-105532398" unbViolId="f588dd42-63d1-3364-a1b1-a66ba8e173d2" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb52ecf4-73e5-3eaf-a493-13ce684adb6d" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' has Essential Complexity value: 1" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="5" auth="username" locRef="4" rule="METRICS-33" lnHash="-105532398" rule.header="Report Essential Complexity" tool="c++test" lineHash="-105532398" unbViolId="b1f3f65d-9bff-3179-b923-7e59f490cb3f" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff638c11-8007-3103-a60a-9cdc111f1b6c" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The incorrect global function name GameLogic_Thread was found" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="3" auth="username" locRef="4" rule="NAMING-34" lnHash="-105532398" rule.header="Global function names should start with lowercase" tool="c++test" lineHash="-105532398" unbViolId="7b2b18a5-a956-3427-9381-eb6ef92ae5e9" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f7dee4cd-57a0-3ce9-afe4-da0a7169ba40" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="3" auth="username" locRef="4" rule="CODSTA-94" lnHash="-105532398" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-105532398" unbViolId="eee05ece-3a3a-304d-bba6-a6039e920a9f" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc9768ab-dac9-3737-94e3-7ab2d88fa9e7" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The parameter of pointer type is declared" ln="72" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="72" sev="3" auth="username" locRef="4" rule="CODSTA-95" lnHash="-105532398" rule.header="Do not declare pointer type" tool="c++test" lineHash="-105532398" unbViolId="3f2dfa10-7ad4-3d5b-b006-bbc26fe0a8a6" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0608c1d-c5c9-3874-b0b0-cec2dcf0743a" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <DupViol msg="Duplicated function: 'THREAD_RETURN_TYPE GameLogic_Thread ( void * ) { return (...'" ln="73" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="73" sev="2" auth="username" locRef="4" rule="CDD-DUPM" lnHash="123" rule.header="Avoid function duplication" tool="c++test" lineHash="123" unbViolId="8d51d345-34e8-3350-9783-c49b054104b9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="97862a60-f337-34db-8a61-3d7e498c35b6" locEndPos="1" locType="sr" urgent="true" hash="-1769734618" locEndLn="76" goals="1,">
      <ElDescList>
        <ElDesc lineHash="123" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="73" srcRngStartPos="0" srcRngEndPos="1" srcRngStartln="73" srcRngEndLn="76" desc="[Line 73] Duplicated function in file 'DeadLock.cpp'" rngLn="73" />
        <ElDesc lineHash="123" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="79" srcRngStartPos="0" srcRngEndPos="1" srcRngStartln="79" srcRngEndLn="82" desc="[Line 79] Duplicated function in file 'DeadLock.cpp'" rngLn="79" />
      </ElDescList>
    </DupViol>
    <StdViol msg="Non-ascii tab found" ln="74" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="74" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="937420148" rule.header="Tabs should be avoided" tool="c++test" lineHash="937420148" unbViolId="a6ce7de3-2852-3784-9a2b-1b613466ac5a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d25bc6a1-9188-3e01-8199-4a8093e4e444" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="74" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="74" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="74" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="937420148" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="937420148" unbViolId="6a0b6d10-99a2-37bc-aeff-530ec12933ed" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5533a671-9729-3d3b-a0e6-e533caf16eef" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="74" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="74" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="74" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="937420148" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="937420148" unbViolId="a7c99f4e-b310-303b-8cd4-cee6c6782fa5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3bbd14fe-ed78-35d2-b43a-eae8a50dff62" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="74" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="75" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="75" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="466607007" rule.header="Tabs should be avoided" tool="c++test" lineHash="466607007" unbViolId="e52b8236-e68a-3153-995e-adac9ccea94d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e849cd0-c246-381c-9cb7-55077a7374f1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="75" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="75" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="466607007" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="466607007" unbViolId="051f3c0e-e9fc-3c13-9028-47ac13fd76dc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c1434c58-e638-34fa-a77e-035cd0ceb4b1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="75" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="75" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="466607007" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="466607007" unbViolId="d0dcaf5b-83b6-3fd4-9109-3551bd300096" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9bcb1a1-291f-3b78-8df8-97c232d9b377" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="'return' statement should be used with parenthesis" ln="75" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="75" sev="3" auth="username" locRef="4" rule="FORMAT-25_b" lnHash="466607007" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="466607007" unbViolId="99e61ead-6a00-3ac9-b3c1-97ce6ecb0ccb" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f623c8fc-233c-361c-bcb8-93d7e03ff28a" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <DupViol msg="Duplicated code: 'return (THREAD_RETURN_TYPE)0;'" ln="75" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="75" sev="3" auth="username" locRef="4" rule="CDD-DUPC" lnHash="466607007" rule.header="Avoid code duplication" tool="c++test" lineHash="466607007" unbViolId="0a6f8eb1-6a0c-384d-837e-89c1121b50ea" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="01cfd28e-af11-3351-9e51-f864679341a6" locEndPos="30" locType="sr" urgent="true" hash="-1769734618" locEndLn="75" goals="1,">
      <ElDescList>
        <ElDesc lineHash="466607007" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="75" srcRngStartPos="1" srcRngEndPos="30" srcRngStartln="75" srcRngEndLn="75" desc="[Line 75] Duplicated code in file 'DeadLock.cpp'" rngLn="75" />
        <ElDesc lineHash="466607007" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="81" srcRngStartPos="1" srcRngEndPos="30" srcRngStartln="81" srcRngEndLn="81" desc="[Line 81] Duplicated code in file 'DeadLock.cpp'" rngLn="81" />
      </ElDescList>
    </DupViol>
    <StdViol msg="C-style cast is used" ln="75" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="75" sev="3" auth="username" locRef="4" rule="HICPP-5_4_1-a" lnHash="466607007" rule.header="Prefer C++-style casts" tool="c++test" lineHash="466607007" unbViolId="e4abd851-ffa8-3e4e-a782-660a4f123a04" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1cabbf3-c4ea-353b-b27b-9430e4c6b376" locEndPos="9" locType="sr" urgent="true" hash="-1769734618" locEndLn="75" goals="1," />
    <StdViol msg="C-style cast is used" ln="75" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="75" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-11" lnHash="466607007" rule.header="Prefer C++-style casts" tool="c++test" lineHash="466607007" unbViolId="f7216c41-92da-3785-be3e-368983bf4508" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03d2d5a5-4e86-3dcd-9c48-29fa637921ea" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="C-style cast to 'DWORD' type is used" ln="75" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="75" sev="2" auth="username" locRef="4" rule="JSF-185" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="b870ea0b-de51-3f67-bc8f-277f48812fb7" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f1761862-7ebf-3c9c-8ffe-d60d571ce12f" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="C-style cast to 'DWORD' type is used" ln="75" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="75" sev="2" auth="username" locRef="4" rule="AUTOSAR-A5_2_2-a" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="07925f20-ca96-3faa-afe7-144cfc36da72" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f43e3420-a0d7-3e9d-abba-51828c8c930d" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="C-style cast to 'DWORD' type is used" ln="75" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="75" sev="2" auth="username" locRef="4" rule="MISRA2008-5_2_4" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="b2218043-9cdb-3031-bba5-d8b35375f9e4" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="161b81cb-05bc-3351-8a33-a80e5930b490" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="C-style cast to 'DWORD' type is used" ln="75" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="75" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-66" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="d3459074-1414-3367-869e-da3435ba6734" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c1773813-5565-3443-a08f-454e2fb212c2" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="Cast to primitive type should not be used if possible" ln="75" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="75" sev="3" auth="username" locRef="4" rule="HICPP-4_2_2-b" lnHash="466607007" rule.header="Avoid explicit type conversions (casts)" tool="c++test" lineHash="466607007" unbViolId="84e6ef5d-d1d1-3ba7-ae42-88b34dc51203" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="efaa6dcf-76d2-37df-b8cd-b2c15d6d0296" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="Cast to primitive type should not be used if possible" ln="75" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="75" sev="4" auth="username" locRef="4" rule="JSF-183" lnHash="466607007" rule.header="Every possible measure should be taken to avoid type casting" tool="c++test" lineHash="466607007" unbViolId="62aae2c0-10f8-35ad-af2d-15ca48f98e3e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e91d44b1-21f7-3f4f-a103-1bf800489e8c" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="Cast to primitive type should not be used if possible" ln="75" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="75" sev="3" auth="username" locRef="4" rule="CODSTA-31" lnHash="466607007" rule.header="Avoid explicit type conversions (casts)" tool="c++test" lineHash="466607007" unbViolId="97185c05-a782-346b-8655-ff4049dff6e6" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9fdf5c1-7511-392c-b8ad-76212ad06f06" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="W-1144: attribute &quot;__stdcall__&quot; does not apply to non-function type &quot;DWORD&quot;" ln="75" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="75" sev="4" auth="username" locRef="4" rule="PARSER-WARNING" lnHash="466607007" rule.header="Parser warning" tool="c++test" lineHash="466607007" unbViolId="70446707-9fdd-379e-8d96-f6def5d61094" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9617e968-84b1-3eb3-a032-a4e8c065aa1d" locEndPos="31" locType="sr" urgent="true" hash="-1769734618" locEndLn="75" goals="1," />
    <StdViol msg="The return type of the 'Controller_Thread' function should be declared as 'auto'" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="2" auth="username" locRef="4" rule="CODSTA-MCPP-08_b" lnHash="-391064646" rule.header="Prefer 'auto' to explicit type names for function return types" tool="c++test" lineHash="-391064646" unbViolId="07285780-218e-3c38-9897-9a711ad24025" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67587746-f1c7-3f53-89ed-752178d1aa60" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The definition of the 'Controller_Thread' function is not preceded by a comment" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="3" auth="username" locRef="4" rule="COMMENT-04" lnHash="-391064646" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-391064646" unbViolId="bba4935a-0cd0-3530-adbe-013a3a37740b" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4cdb893d-7319-3535-b85e-73a62f8b3bfb" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The definition of the 'Controller_Thread' function is not preceded by a comment" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="4" auth="username" locRef="4" rule="JSF-134" lnHash="-391064646" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-391064646" unbViolId="dce3f578-68c4-3fa1-a820-c56aa5972ff7" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="018d8a41-173a-3598-8c7d-e76af62e7468" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="4" auth="username" locRef="4" rule="OWASP2019-API9-e" lnHash="-391064646" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-391064646" unbViolId="7940393c-d826-37b8-b6e3-dff091fbabdc" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b2301c7-e0b9-3d3b-8d05-65632c79c065" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="-391064646" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-391064646" unbViolId="e4ad9701-0da5-3acc-ad69-be97c51c22b3" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04bf69bb-8cf3-3d2a-8d16-f1bce05162db" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="4" auth="username" locRef="4" rule="JSF-137" lnHash="-391064646" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-391064646" unbViolId="f9cefcc1-68a2-39bb-86fe-76230c56308d" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40459588-b77a-3fd3-b4f9-59a6aad68489" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="4" auth="username" locRef="4" rule="MISRA-023" lnHash="-391064646" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-391064646" unbViolId="4596e8ff-7a87-3fc7-aee3-50a35f9637b0" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ea4b4721-5c6c-3c4d-948f-35990773158a" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="2" auth="username" locRef="4" rule="MISRA2008-3_3_1" lnHash="-391064646" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-391064646" unbViolId="9bb144a0-23aa-37a5-a892-3b1aa6cca3b7" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f938c55d-83e9-31d4-a54c-bfc095ff2406" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="3" auth="username" locRef="4" rule="CERT_C-DCL15-a" lnHash="-391064646" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-391064646" unbViolId="d88a4117-7a3f-3db1-b8a6-be07666f430a" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2af8b71f-e83b-3361-a1ee-f46f40f8cdb1" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="4" auth="username" locRef="4" rule="MISRA2004-8_10" lnHash="-391064646" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-391064646" unbViolId="712903fe-290f-3c2c-9f34-4094ae77aaf2" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="373b844c-05df-31da-9478-c2d189686753" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The name 'Controller_Thread' should be composed only of lowercase letters" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="3" auth="username" locRef="4" rule="JSF-051" lnHash="-391064646" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-391064646" unbViolId="d85cf131-29ac-3370-91ab-d35b48de7ae9" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e50061e-9780-3985-a115-3eb129de397b" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The name 'Controller_Thread' should be composed only of lowercase letters" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="3" auth="username" locRef="4" rule="NAMING-44" lnHash="-391064646" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-391064646" unbViolId="d2ce370c-20e0-32bc-b076-f078f7906356" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2849cf5-17fb-3736-a9af-8c75a08feec7" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Global function 'Controller_Thread' is declared in global namespace" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="4" auth="username" locRef="4" rule="JSF-098" lnHash="-391064646" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-391064646" unbViolId="a545d45a-33b3-37d2-b9d6-8225c252fc21" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a000f65e-3354-3deb-ab3f-132e44a8ccd1" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Global function 'Controller_Thread' is declared in global namespace" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-36" lnHash="-391064646" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-391064646" unbViolId="c22df239-bdc4-33b6-b681-45f73b07e485" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9430f09-7a37-3e66-9b38-e12cf0255205" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Global function 'Controller_Thread' is declared in global namespace" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="2" auth="username" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="-391064646" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-391064646" unbViolId="b2cf08ba-4704-30e9-9a29-7a2c86c6e91a" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c458d71-7856-333e-90d7-9c47ffac7820" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Global function 'Controller_Thread' is declared in global namespace" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="2" auth="username" locRef="4" rule="MISRA2008-7_3_1" lnHash="-391064646" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-391064646" unbViolId="cd046de0-bf73-34e8-a0f9-634012b56623" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9eb73cff-fbd1-337c-82dc-2b785c26fb69" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Consider using 'constexpr' for the 'Controller_Thread' function" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="2" auth="username" locRef="4" rule="AUTOSAR-A7_1_2-b" lnHash="-391064646" rule.header="Use constexpr to declare functions whenever possible" tool="c++test" lineHash="-391064646" unbViolId="53c0b239-61ca-3cd9-969b-cac8b932a82b" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="981f967a-ae95-32ca-b320-9be28c195530" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Consider using 'constexpr' for the 'Controller_Thread' function" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="4" auth="username" locRef="4" rule="CODSTA-MCPP-11_b_cpp11" lnHash="-391064646" rule.header="Use constexpr to declare functions whenever possible" tool="c++test" lineHash="-391064646" unbViolId="39d27078-57ba-3d94-91b4-298b0b72c163" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4760f040-42f7-364d-8957-d23110ba3c80" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The 'Controller_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="3" auth="username" locRef="4" rule="COMMENT-14" lnHash="-391064646" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-391064646" unbViolId="226a45d8-e205-36c8-892b-6bb182aef2ee" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65ea6c4b-56a5-3a81-993d-272fe01608e2" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The 'Controller_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="2" auth="username" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="-391064646" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-391064646" unbViolId="98403c68-d624-341d-a32a-2d3f708064da" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="efcf7e86-b813-39f6-88c6-16eaa36b91b0" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The 'Controller_Thread' function should be preceded by a comment that contains the '@return' tag" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="3" auth="username" locRef="4" rule="COMMENT-14_b" lnHash="-391064646" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-391064646" unbViolId="f36fcbbf-b7ae-3736-a63d-60c0fad7043d" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b319040e-d28f-3002-9dcd-6dec28d76037" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The 'Controller_Thread' function should be preceded by a comment that contains the '@return' tag" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="2" auth="username" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="-391064646" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-391064646" unbViolId="2d35d170-dfe7-3e21-bb1b-18753121cd51" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="45876af6-963a-32f1-8dac-6080c17e4859" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The 'Controller_Thread' function should be declared 'noexcept'" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="2" auth="username" locRef="4" rule="AUTOSAR-A15_4_4-a" lnHash="-391064646" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-391064646" unbViolId="0bd64bcb-60bc-3dc4-85d0-f1c588e3ac80" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a896b2d-3ea5-3b36-a401-428cbbe3a03f" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The 'Controller_Thread' function should be declared 'noexcept'" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="3" auth="username" locRef="4" rule="CODSTA-MCPP-09" lnHash="-391064646" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-391064646" unbViolId="24f8493d-638b-33df-b45b-018f56e4c1ca" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8015c2eb-95aa-3083-87f7-0b5ff507d790" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' has Cyclomatic Complexity value: 1" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="5" auth="username" locRef="4" rule="METRICS-29" lnHash="-391064646" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-391064646" unbViolId="ea208643-04f9-3620-ae76-b6091d1feb56" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3cba4f4-dcc0-361b-8604-27730d6c1b14" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' has Essential Complexity value: 1" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="5" auth="username" locRef="4" rule="METRICS-33" lnHash="-391064646" rule.header="Report Essential Complexity" tool="c++test" lineHash="-391064646" unbViolId="ecdf0fd4-867f-3ecd-b8bc-8889fe6b04ed" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="466718fc-4483-3807-b608-8f231caf0d51" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The incorrect global function name Controller_Thread was found" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="3" auth="username" locRef="4" rule="NAMING-34" lnHash="-391064646" rule.header="Global function names should start with lowercase" tool="c++test" lineHash="-391064646" unbViolId="d4c2aa85-38c8-386d-a414-fc0f4d097b49" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4854e610-881a-33ca-8b74-7bac6f56a465" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="3" auth="username" locRef="4" rule="CODSTA-94" lnHash="-391064646" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-391064646" unbViolId="1c4c4283-b50d-3bdc-9d54-1bcd4121698a" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="edafcaaa-cd86-37c7-bf93-06032f4e531b" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The parameter of pointer type is declared" ln="78" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="78" sev="3" auth="username" locRef="4" rule="CODSTA-95" lnHash="-391064646" rule.header="Do not declare pointer type" tool="c++test" lineHash="-391064646" unbViolId="768bca3d-c739-3c1e-9060-2da61fdda58a" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="501c050a-ce4a-30fc-8cc1-bde69fe26368" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="80" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="80" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="2111304760" rule.header="Tabs should be avoided" tool="c++test" lineHash="2111304760" unbViolId="3af7f910-d87d-3997-b3dd-b932ce3fb522" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af3403d8-ec10-3381-8acc-a3a925c36f09" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="80" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="80" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="80" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="2111304760" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="2111304760" unbViolId="2ccaed3b-7aad-3d44-a096-952b9bd2117b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="72e2535d-69dc-3849-9b7f-355126c1414b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="80" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="80" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="80" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="2111304760" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="2111304760" unbViolId="951c4cef-2f85-3cf9-b648-2562d7796c1a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96afaddb-b176-38eb-a9c2-da7768e9a0ce" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="80" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="81" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="81" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="466607007" rule.header="Tabs should be avoided" tool="c++test" lineHash="466607007" unbViolId="709f5891-c61c-39c3-aa44-888f9ccf552b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4628056-35f1-37de-b5ab-c684c12e9975" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="81" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="81" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="466607007" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="466607007" unbViolId="9eae4fe1-3e0a-3025-b0cf-b6bd692034c0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f2aa2307-7732-3db2-ab36-de4fef2d2ba3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="81" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="81" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="466607007" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="466607007" unbViolId="0ac80a81-35fb-3c33-81b2-13e7d048571a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3bcc5b0e-c996-3118-90c0-032c9f77312c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="'return' statement should be used with parenthesis" ln="81" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="81" sev="3" auth="username" locRef="4" rule="FORMAT-25_b" lnHash="466607007" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="466607007" unbViolId="cf17a797-862e-3403-8077-0c61cf9cb136" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55ee6db6-1b35-3eb1-adbf-a6d70bee63f2" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Cast to primitive type should not be used if possible" ln="81" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="81" sev="3" auth="username" locRef="4" rule="HICPP-4_2_2-b" lnHash="466607007" rule.header="Avoid explicit type conversions (casts)" tool="c++test" lineHash="466607007" unbViolId="743f0c52-6993-36b4-8f12-aa5b9b01b613" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a064445-2efc-357c-9c43-a29e0beee70f" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Cast to primitive type should not be used if possible" ln="81" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="81" sev="4" auth="username" locRef="4" rule="JSF-183" lnHash="466607007" rule.header="Every possible measure should be taken to avoid type casting" tool="c++test" lineHash="466607007" unbViolId="ac98042d-8eec-32a3-a06a-deb92f3b7b83" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9236b77-43dd-30a0-873f-f2ffd15ae03a" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Cast to primitive type should not be used if possible" ln="81" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="81" sev="3" auth="username" locRef="4" rule="CODSTA-31" lnHash="466607007" rule.header="Avoid explicit type conversions (casts)" tool="c++test" lineHash="466607007" unbViolId="d982c037-2390-3b94-8267-9ef338ef8011" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76c73f38-37b3-3bbe-8a8a-7073c00ecd66" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="C-style cast is used" ln="81" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="81" sev="3" auth="username" locRef="4" rule="HICPP-5_4_1-a" lnHash="466607007" rule.header="Prefer C++-style casts" tool="c++test" lineHash="466607007" unbViolId="38a3d47d-c9d2-3b34-8c18-b36f73e2cc5a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ea633b33-e26c-30c8-9d81-4792b8aceaa0" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="C-style cast is used" ln="81" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="81" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-11" lnHash="466607007" rule.header="Prefer C++-style casts" tool="c++test" lineHash="466607007" unbViolId="a62f8186-d33b-38ba-8536-22c239ed48fc" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83772a25-7e69-385c-8dea-13c081b561ab" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="C-style cast to 'DWORD' type is used" ln="81" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="81" sev="2" auth="username" locRef="4" rule="JSF-185" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="ed61178a-2d13-31e7-837a-14382e0031c2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0c1d3f0c-ae59-3d4d-b4a1-e9a955161b19" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="C-style cast to 'DWORD' type is used" ln="81" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="81" sev="2" auth="username" locRef="4" rule="AUTOSAR-A5_2_2-a" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="362d6c35-7279-3367-b8f4-fd7b1a2723e8" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="11345886-fbff-35ee-a070-898465711f50" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="C-style cast to 'DWORD' type is used" ln="81" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="81" sev="2" auth="username" locRef="4" rule="MISRA2008-5_2_4" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="3390f83d-902e-3a06-add2-3f61f3c8706e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b942501e-01fb-383d-99b8-8887eabddabd" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="C-style cast to 'DWORD' type is used" ln="81" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="81" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-66" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="741f3f4f-7e6c-3aba-a329-a48c09ad7e55" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9cb10bb-413b-3e71-b373-362844f19977" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="W-1144: attribute &quot;__stdcall__&quot; does not apply to non-function type &quot;DWORD&quot;" ln="81" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="81" sev="4" auth="username" locRef="4" rule="PARSER-WARNING" lnHash="466607007" rule.header="Parser warning" tool="c++test" lineHash="466607007" unbViolId="7bf71724-282d-389e-af72-2cd9721bd891" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59ff93db-7d8c-39b8-9a61-a918a92b2097" locEndPos="31" locType="sr" urgent="true" hash="-1769734618" locEndLn="81" goals="1," />
    <StdViol msg="Non-ascii tab found" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="348867655" rule.header="Tabs should be avoided" tool="c++test" lineHash="348867655" unbViolId="4699d757-acdf-3ce3-b691-26484e2a4305" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b37b813-8a16-3604-9823-16fefde11854" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="348867655" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="348867655" unbViolId="75aea3a5-2e20-3a99-b55e-094baea5aa4f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5baec97-62be-3d3f-9e39-746d02f0b1ec" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="348867655" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="348867655" unbViolId="ea57c1c9-1c2a-3e6c-b520-17cc6585f0ed" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0cf06f6-05a4-3eca-b998-d000e97cddea" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The operator '*', used for 'velocityArray' declaration, should be directly connected with the type" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="3" auth="username" locRef="4" rule="JSF-062" lnHash="348867655" rule.header="The dereference operator '*' and the address-of operator '&amp;' will be directly connected with the type-specifier" tool="c++test" lineHash="348867655" unbViolId="cd0e70c2-7551-3546-9ad8-194031e54bc4" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f146d11a-13d4-31f7-9883-0c4ff85dc8b6" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The operator '*', used for 'velocityArray' declaration, should be directly connected with the type" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="4" auth="username" locRef="4" rule="FORMAT-32" lnHash="348867655" rule.header="The dereference operator '*' and the address-of operator '&amp;' should be directly connected with the type" tool="c++test" lineHash="348867655" unbViolId="8ed44e9d-3715-3688-87b1-6995e143275e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8bb2c33d-88d2-3bb5-8156-7e4fa1718153" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Declaration of variable 'velocityArray' contains more than one level of pointer indirection" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="3" auth="username" locRef="4" rule="HICPP-8_1_1-a" lnHash="348867655" rule.header="The declaration should not contain more than one level of pointer indirection" tool="c++test" lineHash="348867655" unbViolId="295a0544-ee58-365f-a75c-e4f84b1ce965" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42543b01-b2a2-3008-9080-5d04bcfbe16e" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Declaration of variable 'velocityArray' contains more than one level of pointer indirection" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="3" auth="username" locRef="4" rule="CODSTA-89" lnHash="348867655" rule.header="The declaration should not contain more than one level of pointer indirection" tool="c++test" lineHash="348867655" unbViolId="69e4594f-5705-3fcf-84a6-832613f88114" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d728b26-f8b8-383b-9634-88bc88134c06" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: velocityArray" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="3" auth="username" locRef="4" rule="CODSTA-94" lnHash="348867655" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="348867655" unbViolId="62dbfe6c-c16f-3f97-be89-0dc4fb1c5a70" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8825a6b8-a605-3d1a-b495-2bc5fa983bb9" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The variable of pointer type is declared: velocityArray" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="3" auth="username" locRef="4" rule="CODSTA-95" lnHash="348867655" rule.header="Do not declare pointer type" tool="c++test" lineHash="348867655" unbViolId="730a7d55-2e75-361a-ae7e-270b8175f1c2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7bb42ced-96a4-310f-b755-ee7b8bb84468" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Consider encapsulating 'velocityArray'" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="3" auth="username" locRef="4" rule="JSF-207" lnHash="348867655" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="348867655" unbViolId="4a850244-9662-327c-98a5-909efcae56ba" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f142e66f-9268-35f8-86fe-5253232311ac" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Consider encapsulating 'velocityArray'" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-82" lnHash="348867655" rule.header="Avoid unencapsulated global variables (including variables declared in namespaces and public static members)" tool="c++test" lineHash="348867655" unbViolId="e458159a-e575-3986-87a6-88d5970f9f77" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="328ea276-ab11-3442-a921-eacddb39e071" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The 'velocityArray' variable should be commented" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="3" auth="username" locRef="4" rule="JSF-132_a" lnHash="348867655" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="348867655" unbViolId="b06a3dc3-8d44-3f20-98ea-9f18c49be654" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c66a2fe3-298c-3e6f-aaf8-f52a58e6ed18" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The 'velocityArray' variable should be commented" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="3" auth="username" locRef="4" rule="COMMENT-05" lnHash="348867655" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="348867655" unbViolId="f9ba3f07-90d3-3ea9-bd0b-6246309fd279" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d68d6b76-1c5f-3af6-abdf-d5b02865bb84" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Use of variable &quot;velocityArray&quot; with static storage duration is not allowed" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="3" auth="username" locRef="4" rule="HICPP-3_3_1-a" lnHash="348867655" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="348867655" unbViolId="af9b7c2f-6110-3693-b79f-5ca13a145d7c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="58a6c13f-9ad7-32ad-8517-69dba47f4559" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Global variable 'velocityArray' is declared" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="5" auth="username" locRef="4" rule="MISRA-022" lnHash="348867655" rule.header="Declare objects at function scope" tool="c++test" lineHash="348867655" unbViolId="0a6474c4-4115-3672-8526-21f09c517f2a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="335c0323-00a8-3c86-b1f3-11069a74f83b" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Naming convention not followed: velocityArray" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="3" auth="username" locRef="4" rule="NAMING-18" lnHash="348867655" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="348867655" unbViolId="de6639c5-652f-3743-b5cf-5c22b937447b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a2f65e2-9cf3-34eb-8643-675551ad88be" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The 'velocityArray' identifier should have the 'rg' prefix" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="3" auth="username" locRef="4" rule="NAMING-HN-01" lnHash="348867655" rule.header="Hungarian notation for array variables and parameters" tool="c++test" lineHash="348867655" unbViolId="e153f782-d0b9-3d04-be43-4f51b30ebe13" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f89dd50b-95bc-320a-91e4-e4aa9179a73c" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="4" auth="username" locRef="4" rule="OWASP2019-API9-e" lnHash="348867655" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="348867655" unbViolId="72f8d080-204e-36ad-8dc1-2eb313ff5a46" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="085dbe5b-2c75-3c23-b8e2-09cb6f82dc6c" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="348867655" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="348867655" unbViolId="c3710b8c-5ffb-3326-8a5d-800250983d8a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1258aa0e-3812-391e-9933-df8fdb02d732" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="4" auth="username" locRef="4" rule="JSF-137" lnHash="348867655" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="348867655" unbViolId="a07bfffc-b6a4-3234-aef0-d1f6d4caf96a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc7729eb-3d7b-35ff-99b3-072f51400db6" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="4" auth="username" locRef="4" rule="MISRA-023" lnHash="348867655" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="348867655" unbViolId="ef4d8993-40da-3c81-96db-e36ddb4a49b4" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3eb43885-72e8-36ce-b0d4-05c447b8ff33" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="2" auth="username" locRef="4" rule="MISRA2008-3_3_1" lnHash="348867655" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="348867655" unbViolId="a6d34e8b-ba49-3e94-a68b-4194c83da901" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dae18796-8606-3e95-afb4-8ff46ef314a1" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="3" auth="username" locRef="4" rule="CERT_C-DCL15-a" lnHash="348867655" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="348867655" unbViolId="cba55f60-e926-3242-aea8-e25b7cafe3c9" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3743393-b9fa-33b3-a3fa-f9af9be8c3be" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="4" auth="username" locRef="4" rule="MISRA2004-8_10" lnHash="348867655" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="348867655" unbViolId="3d71a80b-c077-37b5-887c-c2a691ef7ecc" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83e98a19-6f45-3a84-a483-16e6bff31d78" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The name 'velocityArray' should be composed only of lowercase letters" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="3" auth="username" locRef="4" rule="JSF-051" lnHash="348867655" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="348867655" unbViolId="7ea38daa-1356-3e2b-9e6c-2523c22ba93b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bdb107fe-46c1-3495-be72-86f9967ad931" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The name 'velocityArray' should be composed only of lowercase letters" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="3" auth="username" locRef="4" rule="NAMING-44" lnHash="348867655" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="348867655" unbViolId="8619c732-6d65-3a9c-bb38-44f0ccaba63f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4fbe7c91-8eeb-38ba-a5c7-63125e5e7f8a" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The 'velocityArray' array should not be used" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="3" auth="username" locRef="4" rule="STL-37" lnHash="348867655" rule.header="C-style arrays shall not be used" tool="c++test" lineHash="348867655" unbViolId="c050af8f-43e3-3715-9166-0cae9a420207" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="855b4482-bc26-390e-9d3f-da84c84c8fa2" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The 'velocityArray' array should not be used" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="2" auth="username" locRef="4" rule="AUTOSAR-A18_1_1-a" lnHash="348867655" rule.header="C-style arrays shall not be used" tool="c++test" lineHash="348867655" unbViolId="f94e1f6c-78b5-3f4d-b2bf-57dbe006a602" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="773b284d-5699-3587-a18c-a557d0f0c901" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The 'velocityArray' variable has only one use" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="2" auth="username" locRef="4" rule="AUTOSAR-M0_1_4-a" lnHash="348867655" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="348867655" unbViolId="1add01a1-8638-3a41-9ff8-fbca79305923" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="fab83a6d-4603-3694-9b64-5e56d443b49e" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The 'velocityArray' variable has only one use" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="2" auth="username" locRef="4" rule="MISRA2008-0_1_4" lnHash="348867655" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="348867655" unbViolId="2c1b4384-399f-302e-95ee-74457172c0e2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="61ee32c9-f357-356a-a2c5-e6a979b2e789" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The 'velocityArray' variable has only one use" ln="86" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="86" sev="3" auth="username" locRef="4" rule="GLOBAL-ONEUSEVAR" lnHash="348867655" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="348867655" unbViolId="e837992d-a26d-3b9d-a274-89101a9697f2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="e2f25f39-306c-34ce-a7ad-e3c40dcb8a17" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="88" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="88" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="465702038" rule.header="Tabs should be avoided" tool="c++test" lineHash="465702038" unbViolId="56c857b3-d102-3349-b534-5e4b1c32e617" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75c9b0e0-86ae-3ad5-a3ba-68b3d5dc7275" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="88" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="88" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="465702038" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="465702038" unbViolId="76c35f75-c1f9-3be7-b97e-cbe4a0c48ada" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aae3f45b-2881-3edf-ada3-282cb8782e28" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="88" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="88" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="465702038" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="465702038" unbViolId="68d60c3c-10f9-36aa-8271-5c1a502bf71f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca656a56-35dc-377b-a6fd-bb2b5de70b08" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The 'Physics_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="88" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="88" sev="3" auth="username" locRef="4" rule="COMMENT-14" lnHash="465702038" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="465702038" unbViolId="6fd8d97d-cc06-31fb-b4ec-89cf8f521265" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2363ec0f-3e6a-37df-8015-e1f988f5b5ba" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The 'Physics_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="88" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="88" sev="2" auth="username" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="465702038" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="465702038" unbViolId="17fc58c6-278f-3772-8d9c-3063dede0650" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="805c2173-a5f6-35a8-a053-63acb43b9e41" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The 'Physics_Thread' function should be preceded by a comment that contains the '@return' tag" ln="88" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="88" sev="3" auth="username" locRef="4" rule="COMMENT-14_b" lnHash="465702038" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="465702038" unbViolId="88064464-ef27-3296-9ed1-489df9ef7c48" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b506d136-bf0e-3288-9333-f9033124f99f" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The 'Physics_Thread' function should be preceded by a comment that contains the '@return' tag" ln="88" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="88" sev="2" auth="username" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="465702038" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="465702038" unbViolId="67ae6cbd-1bf5-3de9-bb52-e035f63bd625" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ecd9953-d04c-316f-b609-2ab643d728f2" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has Cyclomatic Complexity value: 3" ln="88" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="88" sev="5" auth="username" locRef="4" rule="METRICS-29" lnHash="465702038" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="465702038" unbViolId="96a8d920-af03-3d14-a421-ce3220512116" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="41aa0c50-c5d3-3e44-9c04-b5910f6e6cf4" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has Essential Complexity value: 1" ln="88" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="88" sev="5" auth="username" locRef="4" rule="METRICS-33" lnHash="465702038" rule.header="Report Essential Complexity" tool="c++test" lineHash="465702038" unbViolId="0944ea29-ffdc-3ab8-82b1-310e8d5977c2" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee1b6d39-9055-3c8e-b365-94e11474914a" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The incorrect global function name Physics_Thread was found" ln="88" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="88" sev="3" auth="username" locRef="4" rule="NAMING-34" lnHash="465702038" rule.header="Global function names should start with lowercase" tool="c++test" lineHash="465702038" unbViolId="fba84f66-f318-3cd0-8dde-18203b3ff37f" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d43802f5-dfce-3cc6-b2b5-927668be6ad6" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The definition of the 'Physics_Thread' function is not preceded by a comment" ln="88" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="88" sev="3" auth="username" locRef="4" rule="COMMENT-04" lnHash="465702038" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="465702038" unbViolId="9edf848f-c771-367d-9b24-3f6f60821028" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4e3e7d3-769c-3870-bd67-fb518a9dbeb8" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The definition of the 'Physics_Thread' function is not preceded by a comment" ln="88" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="88" sev="4" auth="username" locRef="4" rule="JSF-134" lnHash="465702038" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="465702038" unbViolId="3d5969d5-edf1-3566-b8cf-7a4e15c7a5b3" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd447d05-3720-3b77-91ef-a684b47123d0" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="88" sev="4" auth="username" locRef="4" rule="OWASP2019-API9-e" lnHash="465702038" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="465702038" unbViolId="be370b34-916c-333a-a896-70bf4e46f5a1" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dadc5d49-94a3-3eb9-96ea-4457e92b4dbe" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="88" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="465702038" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="465702038" unbViolId="6f6b52d8-7c71-3a0a-b841-bc7678d3e472" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f6413096-629e-3c23-9a81-f8ddc9774022" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="88" sev="4" auth="username" locRef="4" rule="JSF-137" lnHash="465702038" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="465702038" unbViolId="d9ae2f9a-de77-374c-850e-b3060274fc00" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd8e3ddb-fe5c-3ff0-b65e-4628cf607352" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="88" sev="4" auth="username" locRef="4" rule="MISRA-023" lnHash="465702038" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="465702038" unbViolId="5a891db3-91b4-3592-952d-3608e170cb31" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9375231d-ad60-3972-84bd-b8fdac63050a" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="88" sev="2" auth="username" locRef="4" rule="MISRA2008-3_3_1" lnHash="465702038" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="465702038" unbViolId="51f23529-41c9-3239-a937-4e3d2f5cdbbe" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10c7ffcd-891f-3b9d-908b-a8d4a1df99c3" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="88" sev="3" auth="username" locRef="4" rule="CERT_C-DCL15-a" lnHash="465702038" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="465702038" unbViolId="70a9e53f-a0c4-3f2f-8d9d-58c8470043fd" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78f114c7-8c27-306c-9cb8-7865b2bbbb46" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="88" sev="4" auth="username" locRef="4" rule="MISRA2004-8_10" lnHash="465702038" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="465702038" unbViolId="2d7b4b49-e2db-342f-bdeb-3f38f9f47fcf" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8fec7806-d194-314d-8ddd-3731c8075405" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The name 'Physics_Thread' should be composed only of lowercase letters" ln="88" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="88" sev="3" auth="username" locRef="4" rule="JSF-051" lnHash="465702038" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="465702038" unbViolId="ced9521b-1e74-37e6-a02a-29c83c2f7a4a" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="403e71a5-1eef-386b-be01-f63caeece2ba" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The name 'Physics_Thread' should be composed only of lowercase letters" ln="88" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="88" sev="3" auth="username" locRef="4" rule="NAMING-44" lnHash="465702038" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="465702038" unbViolId="7d227744-4f6e-32a6-bea0-c3a1790a2c5d" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eeda5294-3542-3536-92ea-c17fb40df32a" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared" ln="88" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="88" sev="3" auth="username" locRef="4" rule="CODSTA-94" lnHash="465702038" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="465702038" unbViolId="5a57c31e-8846-367b-85a3-28fab6808323" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef742a3d-cd95-3a1d-ac34-d2d2d0271601" locEndPos="41" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The parameter of pointer type is declared" ln="88" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="88" sev="3" auth="username" locRef="4" rule="CODSTA-95" lnHash="465702038" rule.header="Do not declare pointer type" tool="c++test" lineHash="465702038" unbViolId="ed923160-0cd3-3985-bc31-4dfeaa157699" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a2947c3c-eb61-376d-b32d-51212821f7c7" locEndPos="41" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="89" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="89" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="402" rule.header="Tabs should be avoided" tool="c++test" lineHash="402" unbViolId="01c16074-511e-32a8-bfaa-1548ff5cb4be" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f83fd52-e628-3478-b92c-77e99add089c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="89" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="89" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="89" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="402" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="402" unbViolId="32297d8c-be10-3b6a-a968-46315249b894" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f57f644-293c-378d-8d71-8e7a674d5f1f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="89" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="89" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="89" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="402" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="402" unbViolId="5292c270-28a2-32de-b156-8f756d8679e0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52c3e4a0-9ce3-3b06-8861-7bb8bac4c2b1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="89" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 13" ln="89" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="89" sev="3" auth="username" locRef="4" rule="METRICS-19" lnHash="402" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="402" unbViolId="0f392034-dcb5-3128-945c-526e2ad69a9e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="047e0e87-ed28-3d1a-967d-06fd75f1840f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="89" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="90" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="90" sev="3" auth="username" locRef="4" rule="JSF-061" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1229452372" unbViolId="6018902e-4093-3f17-a54c-85e407c7cd4d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c98f6d84-ad4f-32d7-84ef-cf83fa0806d9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="90" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="90" sev="3" auth="username" locRef="4" rule="FORMAT-42" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1229452372" unbViolId="3209f421-7ce2-3cb7-b246-20abd43896a5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="427420cd-c9cb-308f-8f1e-bf7e3c6f7948" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="90" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="90" sev="3" auth="username" locRef="4" rule="JSF-060_a" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1229452372" unbViolId="f74d1aee-0ba5-31da-b229-4aefc6d254f9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d4f4493-b449-3a58-add1-ebea56478acf" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="90" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="90" sev="3" auth="username" locRef="4" rule="FORMAT-43" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1229452372" unbViolId="dedeb740-c731-348d-9bc6-b70760ba3e07" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="609331f4-e541-3cd3-adb2-741ab1f1a7be" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="90" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="90" sev="3" auth="username" locRef="4" rule="JSF-060_b" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1229452372" unbViolId="3e111a96-c64d-3de0-9b5b-7579ab5d9412" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="698869f2-18da-37a3-9179-45f16577a342" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="90" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="90" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1229452372" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1229452372" unbViolId="110a42ea-8c35-3121-9829-ee9ddd9c00f3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dcaa5e01-0ce8-30af-a4ae-a8dd716ba06e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="90" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="90" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="7cc7c1c2-4fd7-39a6-b30b-798f16644b7b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2061356c-ccbb-318b-9521-2a2c1a3d70fd" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="90" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="90" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="62dc3a5d-2dc3-3081-9a3f-e787cc698c60" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e74075af-ed91-392f-9a73-43cdd070667d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="90" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="90" sev="3" auth="username" locRef="4" rule="FORMAT-02" lnHash="-1229452372" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-1229452372" unbViolId="515b5323-f009-315c-9d32-6f1c6eb5f31f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ea85e7e3-2a1a-3031-9f0e-bf02377c2ab3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="90" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="90" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1229452372" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1229452372" unbViolId="44e6b428-8cf8-376b-971f-c8364a2069ec" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a763e175-1176-33b5-a4eb-882c780f8a74" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="90" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="90" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="2803bb14-a43f-323f-b4a3-f99481142a5c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8bd68871-00fb-3436-9e51-77e44790fafa" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="90" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="90" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="fa01eea7-68b7-3f47-8229-9503aed5483c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a21db5b1-bd9a-3bb9-9dd1-6d4129642a7b" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="A loop does not have a fixed upper nor lower bound" ln="90" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="90" sev="3" auth="username" locRef="4" rule="CODSTA-83" lnHash="-1229452372" rule.header="All loops must have a fixed upper or lower bound" tool="c++test" lineHash="-1229452372" unbViolId="d6490b64-7018-32a8-ac53-dcbf8f1ed708" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ce50372-c315-3888-83f6-62298747ba68" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="90" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="90" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-67" lnHash="-1229452372" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-1229452372" unbViolId="e6541233-0229-3a0e-831d-5c8cbfa08c20" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3bf78910-684c-3a96-b9ed-3039934bda35" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="90" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="90" sev="2" auth="username" locRef="4" rule="AUTOSAR-M5_3_1-a" lnHash="-1229452372" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-1229452372" unbViolId="b83a9a77-cfe1-3c87-8dec-784956041891" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8af23745-38ef-369d-a819-57fa8368ff88" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="90" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="90" sev="2" auth="username" locRef="4" rule="MISRA2008-5_3_1" lnHash="-1229452372" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-1229452372" unbViolId="bafe9ef6-26d2-393c-82a9-b855dd434d22" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="49fad21d-a401-37f2-81e8-8fb151cbc4d2" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="In 'Physics_Thread' function use positive logic rather than negative logic whenever possible" ln="90" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="90" sev="5" auth="username" locRef="4" rule="CODSTA-46" lnHash="-1229452372" rule.header="Use positive logic rather than negative logic whenever practical" tool="c++test" lineHash="-1229452372" unbViolId="28a96875-a9d8-39cf-929f-331154ff4c68" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e8fd765-39d9-3cf7-9fec-a58db1e87b93" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="The operand of logical operator '!' is not 'effectively Boolean'" ln="90" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="90" sev="3" auth="username" locRef="4" rule="MISRA2004-12_6_a" lnHash="-1229452372" rule.header="The operands of logical operators (&amp;&amp;, || and !) should be effectively Boolean" tool="c++test" lineHash="-1229452372" unbViolId="c122b146-e5ad-35ca-be8e-99e3d5911873" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3b99dc9-088e-3abb-8bf2-1eb2f0a60ba1" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="3" auth="username" locRef="4" rule="JSF-061" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1544355218" unbViolId="568da926-aa44-3f7e-a466-62cdd78d36bb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74d70a09-0f76-3a52-b0e6-61accec1ea8a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="3" auth="username" locRef="4" rule="FORMAT-42" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1544355218" unbViolId="e33261fe-0024-3e97-984e-bd94f9c48afa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5062307b-dbb0-3a70-91b4-6f930b1fdf1d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="3" auth="username" locRef="4" rule="JSF-060_a" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1544355218" unbViolId="4f8d0571-3df9-35f3-8fc7-a306744eca4a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd40529c-788b-3d8e-bfda-3fb0ca2f8c13" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="3" auth="username" locRef="4" rule="FORMAT-43" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="1544355218" unbViolId="ebde7a8b-2b45-35c7-a4da-0b744ff7aa52" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12c01a70-0646-330d-84f1-ccba434bf27f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="3" auth="username" locRef="4" rule="JSF-060_b" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="1544355218" unbViolId="34a68f4c-6093-393c-8545-f946093614fe" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f085c402-f96c-3e65-af6f-042882f361c9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="1544355218" rule.header="Tabs should be avoided" tool="c++test" lineHash="1544355218" unbViolId="8dd2463f-addf-3ab4-b2d4-f61b78b0d78a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ba0df57-ef4f-3303-ac84-9b4578bdb62c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="8fd8ad5d-9f35-3287-93f4-c5f86da479a6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f9e0a6c-44a1-31ba-9479-95921e0b68e5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="bf9005b9-dc20-3f00-a45b-29f1dc413faf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="029c9c12-f819-3e5f-a6b1-322562b07eb7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="3" auth="username" locRef="4" rule="FORMAT-02" lnHash="1544355218" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="1544355218" unbViolId="05c7b07e-fdef-3fab-982c-386c94e5add8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03fbd599-9e53-3748-a950-10369884519b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="1544355218" rule.header="Tabs should be avoided" tool="c++test" lineHash="1544355218" unbViolId="1b08a976-4c1c-33bb-93d6-92e0957fc1ed" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05ff1d07-e4ca-36d4-b5b6-4ca8b7cb55a6" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="ed0c024c-5b78-37dd-86f6-7bbf4d3cbe84" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2cdd7da9-d6af-38fc-b7e7-97c244785a45" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="68f0290d-8d80-3dd9-8f87-0c86e821b7ae" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eaac09bf-4769-3599-b2f2-372aa6df3ba9" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="1544355218" rule.header="Tabs should be avoided" tool="c++test" lineHash="1544355218" unbViolId="f3e297a7-9e9d-304e-8ac6-7174bca3f07d" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61554080-f8fa-3ca0-9ddf-b05fd20ffda4" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="aa742776-7a9d-33a7-9caa-6674ccd444e0" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ec2d4ef5-6b68-3c62-953a-c4bca38c3486" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="4764035d-faf1-333c-9fd7-3d415bb97348" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7de16f1-770b-3c34-880a-6121c66bd2c8" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="A loop does not have a fixed upper nor lower bound" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="3" auth="username" locRef="4" rule="CODSTA-83" lnHash="1544355218" rule.header="All loops must have a fixed upper or lower bound" tool="c++test" lineHash="1544355218" unbViolId="5a1cf8a6-8350-3657-9115-028b41f5ba6f" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a5f180e-ea85-3e29-9435-39ffa5b83821" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Between conditional statement 'for' and its opening parenthesis '(' should be exactly one space" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="3" auth="username" locRef="4" rule="FORMAT-12" lnHash="1544355218" rule.header="There shall be a single ASCII space character between a conditional statement keyword and its opening parenthesis" tool="c++test" lineHash="1544355218" unbViolId="4a096151-1a71-3d1f-9adb-78afc00ec1b9" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="667bd389-f06b-3768-ad02-f5ea8c3c1f7e" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <DupViol msg="Duplicated code: 'for(int i = 0;'" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="3" auth="username" locRef="4" rule="CDD-DUPC" lnHash="1544355218" rule.header="Avoid code duplication" tool="c++test" lineHash="1544355218" unbViolId="8192f3d4-0d22-36c2-a4c1-813c56fd816f" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="0584fa3d-0361-35c6-b98d-bc32ea069a03" locEndPos="17" locType="sr" urgent="true" hash="-1769734618" locEndLn="91" goals="1,">
      <ElDescList>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="91" srcRngStartPos="3" srcRngEndPos="17" srcRngStartln="91" srcRngEndLn="91" desc="[Line 91] Duplicated code in file 'DeadLock.cpp'" rngLn="91" />
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="122" srcRngStartPos="3" srcRngEndPos="17" srcRngStartln="122" srcRngEndLn="122" desc="[Line 122] Duplicated code in file 'DeadLock.cpp'" rngLn="122" />
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/flowanalysiscpp/MemoryLeak.cpp" ln="9" srcRngStartPos="1" srcRngEndPos="16" srcRngStartln="9" srcRngEndLn="9" desc="[Line 9] Duplicated code in file 'MemoryLeak.cpp'" rngLn="9" />
      </ElDescList>
    </DupViol>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="3" auth="username" locRef="4" rule="CODSTA-223" lnHash="1544355218" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1544355218" unbViolId="4ca0a911-5bc3-39e2-8500-dfe59c11472b" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca2372ca-ad8f-325a-b639-a981df6ed9d2" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="1544355218" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1544355218" unbViolId="f6619e0c-7f61-3971-83ee-4d66359080bd" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0fe1c9a8-5be6-35b9-84f4-a3cb44137200" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="3" auth="username" locRef="4" rule="HICPP-7_1_6-b" lnHash="1544355218" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="1544355218" unbViolId="20bb2eb9-b9c5-3894-80d8-4cdec9543740" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="567928aa-4021-33af-9423-b3d880d47f69" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="4" auth="username" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="0512d7e3-c6ae-31b2-975b-eb03fff732b1" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d4f0ad8-bf9d-3ef7-b3f7-4ce6ded3beac" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="3" auth="username" locRef="4" rule="MISRA2004-6_3_b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="ea61b9f7-ce38-3aa1-a5aa-96852aa59871" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba0423b5-c8cf-395a-950b-7af33e4c037b" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="2" auth="username" locRef="4" rule="JSF-209_b" lnHash="1544355218" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="b7b51f08-b378-3766-b8e8-e7b062461488" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8f96d8f-86e7-312f-9160-feaccb92422b" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="4" auth="username" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="00550854-6221-3812-831a-dcce57c977a0" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2da97048-41ca-349c-9d01-d63540a15626" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="3" auth="username" locRef="4" rule="HICPP-3_5_1-b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="61ba7fbb-fae0-347f-9c68-e87b0c6963ff" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5fc251af-a32c-3662-a592-71a897b3d856" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="4" auth="username" locRef="4" rule="MISRA2008-3_9_2" lnHash="1544355218" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1544355218" unbViolId="554be576-71e0-3ee7-88d9-03697ad13e05" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00f0a319-4b17-35c1-b009-f95e31811a93" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="3" auth="username" locRef="4" rule="MISRA-013" lnHash="1544355218" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1544355218" unbViolId="0377aa85-9234-35f4-aaea-7667bef6ddaf" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3207f1b5-1067-325e-b504-61fb9f3ad3a6" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="'i' shall be declared as unsigned int or signed int" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="3" auth="username" locRef="4" rule="PORT-13" lnHash="1544355218" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="1544355218" unbViolId="c9ae557c-2310-377a-b196-f298caa30cf0" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="369d0096-0880-35bc-9941-ce4c17fd19fc" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Variable &quot;i&quot; declaration was found in control statement" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="3" auth="username" locRef="4" rule="OPT-10" lnHash="1544355218" rule.header="Do not declare variables in &quot;if&quot;, &quot;for&quot;, &quot;while&quot;, and &quot;do while&quot; statement" tool="c++test" lineHash="1544355218" unbViolId="44fd4c8f-6034-3ed1-b576-65a5f3e28990" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da9af7bc-45c6-3492-8b62-4d4ec71e5276" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The 'i' variable should be commented" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="3" auth="username" locRef="4" rule="JSF-132_a" lnHash="1544355218" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="1544355218" unbViolId="d35a53f0-09ae-3068-a806-c947bf5c2929" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10c09567-a79c-3605-90df-4a079a35fcf5" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The 'i' variable should be commented" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="3" auth="username" locRef="4" rule="COMMENT-05" lnHash="1544355218" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="1544355218" unbViolId="9a927444-c440-38e7-b6a7-0fc6f7ccefb4" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8e1a40c-29e1-353b-b961-848544f5d230" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="2" auth="username" locRef="4" rule="AUTOSAR-A8_5_2-a" lnHash="1544355218" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1544355218" unbViolId="d0dc46c7-a143-36c5-a337-4eece544a4d1" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff385468-a5cf-3250-81ad-e5dde8399129" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="3" auth="username" locRef="4" rule="CODSTA-MCPP-38" lnHash="1544355218" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1544355218" unbViolId="f8161355-9fdd-385e-810b-c15ba5f49e97" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f458296a-f3d9-3386-b366-7f33883ae276" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Postfix operator applied to variable 'i'; prefer prefix type" ln="91" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="91" sev="3" auth="username" locRef="4" rule="OPT-04" lnHash="1544355218" rule.header="Prefer canonical form of ++ and --. Prefer calling the prefix forms" tool="c++test" lineHash="1544355218" unbViolId="223e45fc-b7be-3aae-bd59-df2660fbcb15" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da90b465-7d90-35d2-ab98-ea0d01ffede6" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="92" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="7b90be5e-9cd1-3932-bd62-b0e3a01ec74d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="371acd8f-a8ef-36fb-ab36-bed2c6347744" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="92" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="ba5a6014-c5a8-365a-8da2-e3ab0155ccbc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96fd1b26-ef73-323f-aa46-a08d1fb80b16" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="92" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="88ac752a-31a4-3bbd-925f-935bc36a7597" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37ff43d2-edfa-3420-b490-12d6eeaae981" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="92" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="3b271855-7764-3a50-9b59-d69ac8a18c2b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83eb3d6e-1e63-3833-b6ae-7dfac1fb8f8a" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="92" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="bd9dac05-ed94-3488-bfe9-1b882828e888" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a6fb1f1-6ad1-3977-8d38-0d72dc1c831a" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="92" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="01a3c9a2-6b4e-3a72-aa35-ea71c713d467" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a0db9f6-bc5c-3917-a2f9-b93b6af7916a" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="92" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="827dc05b-fa91-3d80-85a3-70a028878bb8" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="461c69fe-946a-36fb-990d-d38105d9e6de" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="92" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="e74f2aca-ed0d-39c1-800f-260ef9511585" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2371a240-1241-3f6d-b65f-ac836a75d365" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="92" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="a548a623-0147-3fb5-994a-dc11428ee973" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ac59487-c9c2-3f6a-b8a8-dfb930bd09b8" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="92" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="b94e8896-5e17-3478-ae15-092b28bfeb93" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="652976b2-ae2a-3f1f-9bfd-a3ea6fd05d93" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="92" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="28ad0c9d-0125-392b-ad38-99253a92d76b" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23a77afa-05dd-3aae-a053-482e7e07fd00" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="92" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="8ada2e36-78e8-3ca6-addf-dbdb971a38b9" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3aa03853-085a-3c9c-8012-0aa0de9d8e9b" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <DupViol msg="Duplicated code: 'LOCK_ACQUIRE(changePositionMutex);'" ln="92" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="92" sev="3" auth="username" locRef="4" rule="CDD-DUPC" lnHash="-251104526" rule.header="Avoid code duplication" tool="c++test" lineHash="-251104526" unbViolId="0203492c-2e06-37c4-932b-a552190df160" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="3773bfe3-8997-3102-89c7-eb36707ad583" locEndPos="38" locType="sr" urgent="true" hash="-1769734618" locEndLn="92" goals="1,">
      <ElDescList>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="92" srcRngStartPos="4" srcRngEndPos="38" srcRngStartln="92" srcRngEndLn="92" desc="[Line 92] Duplicated code in file 'DeadLock.cpp'" rngLn="92" />
        <ElDesc lineHash="-2061438629" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="118" srcRngStartPos="3" srcRngEndPos="37" srcRngStartln="118" srcRngEndLn="118" desc="[Line 118] Duplicated code in file 'DeadLock.cpp'" rngLn="118" />
      </ElDescList>
    </DupViol>
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="93" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1511312469" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1511312469" unbViolId="aa0f0da2-8dbe-3983-9700-7dbb3bf2b2fd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="803bd9d8-1365-3f7e-98d3-8d094830b419" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="93" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="aac79630-d45e-35bf-90a0-b0ce55702d01" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68aeea67-c9b4-37ce-b4df-8014220d8cff" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="93" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="d0a7ecd6-7f62-300d-aaa2-678fdcc09540" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6784ac83-ef9b-3d5a-a71c-34835d77b390" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <FlowViol msg="&quot;participants&quot; is used in two critical sections in context of single method, using one critical section will improve atomicity of operation" ln="93" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Usage of &quot;participants&quot; in second critical section" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="94" rule="BD-TRS-DIFCS" FirstElSrcRngStartPos="0" lnHash="-1511312469" ruleSCSCMsg="Usage of &quot;participants&quot; in first critical section" pkg="Physics" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Variable should be used in context of single critical section" FirstElSrcRngStartln="93" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1740258409" lang="cpp" violId="5446036c-e9e1-3570-8a67-5b5dc2fef732" locEndPos="0" locEndLn="94" goals="0," locStartln="93" sev="2" locRef="4" tool="c++test" lineHash="-1511312469" unbViolId="df9bfd81-78e9-3f7e-bcf0-287b56ab6842" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Variable used in critical section" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1229452372" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="90" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="90" srcRngEndLn="91" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="91" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="91" srcRngEndLn="92" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="92" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="92" srcRngEndLn="93" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="92">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="93" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="93" srcRngEndLn="94" desc="Point&amp; position = participants[i]->getPosition();" ElType=".C" rngLn="93">
          <Anns>
            <Ann msg="Usage of &quot;participants&quot; in first critical section" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="929435952" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="94" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="94" srcRngEndLn="95" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94" />
        <ElDesc lineHash="-1599411881" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="95" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="95" srcRngEndLn="96" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="." rngLn="95">
          <ElDescList>
            <ElDesc lineHash="-600547524" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="60" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="60" srcRngEndLn="61" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming false)" kind="condEval" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="793595747" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="98" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="98" srcRngEndLn="99" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="98">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="91" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="91" srcRngEndLn="92" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="92" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="92" srcRngEndLn="93" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="92">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="93" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="93" srcRngEndLn="94" desc="Point&amp; position = participants[i]->getPosition();" ElType=".P" rngLn="93">
          <Anns>
            <Ann msg="Usage of &quot;participants&quot; in second critical section" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="93" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1511312469" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1511312469" unbViolId="2143e65f-8f0f-3770-892c-844a48d9bf61" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8210bc73-9624-3aa1-a167-433d05a0f7e6" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="93" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="cf2fe0b4-aa48-399f-9f96-06c4f2fba702" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e53fe00-b624-363b-aa12-6c8966a9ee91" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="93" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="43059702-9637-3d2b-83b4-973cf3b7cf74" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="082fc7b4-02ff-3f60-9c85-315a1607668b" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="93" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1511312469" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1511312469" unbViolId="989396e7-df62-3ea9-b57f-1105c1b7d51f" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0f1570a-4205-3194-95ab-3e7cdf2931a0" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="93" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="ac37574f-7eb5-369c-b674-7627da2e24cf" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e7adf498-a851-3593-a33e-cb1a7eea9592" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="93" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="27574f52-1854-3eec-bfc9-7a7f66a718ed" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa4ee89e-1988-34af-854a-281706a49caa" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="93" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1511312469" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1511312469" unbViolId="f35bb223-7f8e-3cc9-853b-a33627b8ac52" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b896f3a0-2a65-340c-8dda-f63ab03edfb4" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="93" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="4aafb452-b6b3-3f99-a14b-a0799cb5e321" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59c04197-58db-396f-9869-92e6ef2d145d" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="93" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="b5683d65-a9cf-33b1-889c-90709ad80e9f" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d764d61-bde7-3682-bc48-bc3ca6d61267" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Variable &quot;position&quot; declaration was found in control statement" ln="93" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="93" sev="3" auth="username" locRef="4" rule="OPT-10" lnHash="-1511312469" rule.header="Do not declare variables in &quot;if&quot;, &quot;for&quot;, &quot;while&quot;, and &quot;do while&quot; statement" tool="c++test" lineHash="-1511312469" unbViolId="7cb086ce-32ef-333c-a18f-ed8331728bb6" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bae7cdf2-e397-3b83-afd8-1ed508a855f6" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="The 'position' variable should be commented" ln="93" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="93" sev="3" auth="username" locRef="4" rule="JSF-132_a" lnHash="-1511312469" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1511312469" unbViolId="e0f509dd-7612-3d62-a956-372077dee490" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cade6a96-2767-367b-87e8-aaa68aaa3096" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="The 'position' variable should be commented" ln="93" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="93" sev="3" auth="username" locRef="4" rule="COMMENT-05" lnHash="-1511312469" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1511312469" unbViolId="3ca959c0-1de3-3460-81d7-760d3bd8385c" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="691a6ad1-a1e0-343f-a223-fc90fb9dc5d8" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Variable 'position' should be declared using 'auto' specifier" ln="93" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="93" sev="3" auth="username" locRef="4" rule="HICPP-7_1_8-a" lnHash="-1511312469" rule.header="Use auto id = expr when declaring a variable that is the same type as the initializer function call" tool="c++test" lineHash="-1511312469" unbViolId="a445c42f-3a98-3041-b3c5-3cc32b24505a" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d1aa53b-56b1-37c4-ae89-24ac11f5223e" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="The definition of the 'position' variable should contain a braced initializer" ln="93" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="93" sev="2" auth="username" locRef="4" rule="AUTOSAR-A8_5_2-a" lnHash="-1511312469" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="-1511312469" unbViolId="223b663f-c9b1-3708-9a2c-9637365898f7" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9771caf3-8b26-3ea6-8384-37940cde5cc5" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="The definition of the 'position' variable should contain a braced initializer" ln="93" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="93" sev="3" auth="username" locRef="4" rule="CODSTA-MCPP-38" lnHash="-1511312469" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="-1511312469" unbViolId="f506c80c-fec0-38fb-bba2-1a3868c50c36" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3eedadff-9bf6-38b7-8e46-d3609262f8cc" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="The 'position' variable should be declared with the 'auto&amp;' type specifier" ln="93" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="93" sev="2" auth="username" locRef="4" rule="CODSTA-MCPP-08_a" lnHash="-1511312469" rule.header="Prefer 'auto' to explicit type names in variable declarations" tool="c++test" lineHash="-1511312469" unbViolId="13fe63ea-07fe-32ab-9512-812a0820074a" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88917cba-e650-31f1-acc9-9697ee7f64dd" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="94" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="929435952" rule.header="Tabs should be avoided" tool="c++test" lineHash="929435952" unbViolId="663df7bf-b39d-3a36-89da-7c7bac771f69" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07d40bbd-bc8c-35cc-b579-f21edb598527" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="94" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="ca6e10bd-e8ef-3e24-8f94-7fbb0b59a1d9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="712de5c7-3591-3ca4-a5c7-f184f51350d5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="94" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="7d5539bd-6483-3126-989b-e65025d8a424" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="11a0f574-1cc8-3421-b3d2-fa42f715039c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <FlowViol msg="&quot;velocityArray&quot; is used in two critical sections in context of single method, using one critical section will improve atomicity of operation" ln="94" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Usage of &quot;velocityArray&quot; in second critical section" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="95" rule="BD-TRS-DIFCS" FirstElSrcRngStartPos="0" lnHash="929435952" ruleSCSCMsg="Usage of &quot;velocityArray&quot; in first critical section" pkg="Physics" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Variable should be used in context of single critical section" FirstElSrcRngStartln="94" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1468383187" lang="cpp" violId="940f2515-e009-3357-bc7c-bb95a4cffd11" locEndPos="0" locEndLn="95" goals="0," locStartln="94" sev="2" locRef="4" tool="c++test" lineHash="929435952" unbViolId="05358891-5efb-3931-a5ef-9438b859308b" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Variable used in critical section" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1229452372" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="90" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="90" srcRngEndLn="91" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="91" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="91" srcRngEndLn="92" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="92" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="92" srcRngEndLn="93" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="92">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="93" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="93" srcRngEndLn="94" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93" />
        <ElDesc lineHash="929435952" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="94" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="94" srcRngEndLn="95" desc="position.translate(*velocityArray[i]);" ElType=".C" rngLn="94">
          <Anns>
            <Ann msg="Usage of &quot;velocityArray&quot; in first critical section" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1599411881" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="95" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="95" srcRngEndLn="96" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="." rngLn="95">
          <ElDescList>
            <ElDesc lineHash="-600547524" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="60" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="60" srcRngEndLn="61" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming false)" kind="condEval" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="793595747" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="98" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="98" srcRngEndLn="99" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="98">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="91" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="91" srcRngEndLn="92" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="92" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="92" srcRngEndLn="93" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="92">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="93" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="93" srcRngEndLn="94" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93" />
        <ElDesc lineHash="929435952" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="94" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="94" srcRngEndLn="95" desc="position.translate(*velocityArray[i]);" ElType=".P" rngLn="94">
          <Anns>
            <Ann msg="Usage of &quot;velocityArray&quot; in second critical section" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="94" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="929435952" rule.header="Tabs should be avoided" tool="c++test" lineHash="929435952" unbViolId="f75fea05-d420-3959-a083-625af55f9f39" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94f5c319-3505-3de3-a484-3bd00f6d71eb" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="94" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="7df0cb9d-e01b-3757-831a-53dbd158e5b4" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="acd89b12-09c2-360f-b1a2-e59a328c4e43" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="94" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="20bf43af-4b90-3c27-90b8-9189bb940f7d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75baacfb-bc3f-35b9-9a89-fdf7878eb1a1" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="94" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="929435952" rule.header="Tabs should be avoided" tool="c++test" lineHash="929435952" unbViolId="52ffc7ec-6290-3dd7-8a5c-ba3145789fd3" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26ced8e8-3a9e-3f10-b1ad-4ffac4cc78f6" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="94" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="a70391d8-57f4-301b-9e6c-3e39aa6188ea" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7dee0197-5b15-3fcc-9d58-d4276c294507" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="94" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="5ab2b5fe-f146-30ec-aba7-bca02289b13d" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="548d8f68-3cac-3827-b018-7393404b9e55" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="94" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="929435952" rule.header="Tabs should be avoided" tool="c++test" lineHash="929435952" unbViolId="7dc4277f-0803-3f41-8af0-53220d040170" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84bf15b8-3cac-3013-aac6-79a741fbe0ef" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="94" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="22663336-3a09-3548-801f-a91d7db5b13e" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96c49409-3a99-34fc-91ca-ecdb64fa6adf" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="94" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="5c72f96e-76e7-3507-a18c-9add5659dddf" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9fd3d7ef-a276-394e-a680-62754290f8af" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Dereferenced pointer type expression should not be used" ln="94" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="94" sev="3" auth="username" locRef="4" rule="PB-01" lnHash="929435952" rule.header="Do not dereference pointer type expressions" tool="c++test" lineHash="929435952" unbViolId="62aaa31e-87f9-3126-816f-3f6a4bd81791" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="865a4085-7a08-3e4a-8c1d-998d501a541d" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="95" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1599411881" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1599411881" unbViolId="4e279711-3560-3ab5-a80e-3d2aeae9d219" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b893bb6-5ec3-34f4-af33-9e53fdccf651" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="95" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="0a399c27-5ed6-3c41-8760-eccb4f600f2a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="56814715-be90-311b-80bf-a11d135e43d1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="95" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="885c3fbb-613f-3797-afe1-bf38c846bda5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd96e213-c0df-3a48-bd2e-708b2472d1f8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <FlowViol msg="&quot;ring&quot; is used in two critical sections in context of single method, using one critical section will improve atomicity of operation" ln="95" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Usage of &quot;ring&quot; in second critical section" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="96" rule="BD-TRS-DIFCS" FirstElSrcRngStartPos="0" lnHash="-1599411881" ruleSCSCMsg="Usage of &quot;ring&quot; in first critical section" pkg="Physics" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Variable should be used in context of single critical section" FirstElSrcRngStartln="95" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-245506449" lang="cpp" violId="8278ed11-ca84-3eee-8308-ca9b127e8ae6" locEndPos="0" locEndLn="96" goals="0," locStartln="95" sev="2" locRef="4" tool="c++test" lineHash="-1599411881" unbViolId="ed25d5bf-ee09-3009-92ca-63f9d969ef5a" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Variable used in critical section" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1229452372" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="90" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="90" srcRngEndLn="91" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="91" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="91" srcRngEndLn="92" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="92" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="92" srcRngEndLn="93" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="92">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="93" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="93" srcRngEndLn="94" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93" />
        <ElDesc lineHash="929435952" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="94" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="94" srcRngEndLn="95" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94" />
        <ElDesc lineHash="-1599411881" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="95" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="95" srcRngEndLn="96" desc="ring.contains(...)" ElType=".C" rngLn="95">
          <Anns>
            <Ann msg="Usage of &quot;ring&quot; in first critical section" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1599411881" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="95" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="95" srcRngEndLn="96" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="." rngLn="95">
          <ElDescList>
            <ElDesc lineHash="-600547524" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="60" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="60" srcRngEndLn="61" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming false)" kind="condEval" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="793595747" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="98" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="98" srcRngEndLn="99" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="98">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="91" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="91" srcRngEndLn="92" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="92" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="92" srcRngEndLn="93" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="92">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="93" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="93" srcRngEndLn="94" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93" />
        <ElDesc lineHash="929435952" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="94" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="94" srcRngEndLn="95" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94" />
        <ElDesc lineHash="-1599411881" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="95" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="95" srcRngEndLn="96" desc="ring.contains(...)" ElType=".P" rngLn="95">
          <Anns>
            <Ann msg="Usage of &quot;ring&quot; in second critical section" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="95" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1599411881" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1599411881" unbViolId="f0d39fbd-a14e-3dc4-915b-724c6cd51780" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ba1d5e1-3188-34e3-9418-e2dd8fecdbf1" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="95" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="6eb9ff22-7499-39e6-a4e9-807e99f75212" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb37ce29-0158-36cd-9aef-25489e5ac71f" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="95" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="69389ae0-45a3-3533-8be7-1a6617cc2a7c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="015453b1-b61a-31c9-aca6-8cbec2f103a4" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="95" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1599411881" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1599411881" unbViolId="71cafb87-8db4-350f-b992-8212ea38d281" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cbb3e5d5-bd16-3c57-b5f3-0d046d11dbd4" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="95" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="13e8fd27-8907-3439-a2ed-29e26ab38d4e" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d2e5d0b-b7fb-34da-af71-47590f2f9562" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="95" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="02471063-779b-379f-9f7f-4e19d5c0430f" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23f6ade7-7c5a-3ee9-bc2c-9d35f76c6739" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="95" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1599411881" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1599411881" unbViolId="b2daca04-6fa0-34f4-9a39-8f2cbd1e5fba" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62b9a4b1-a1fd-3fc4-a51b-7a91d8bc1a7c" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="95" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="4f53de84-b0c4-308b-8514-7a3b603aa422" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8209b36b-3265-3dfb-84c9-42015672d51c" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="95" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="bde2af95-856e-33e1-934c-8056daff0a2a" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d6ebfa1b-6b5a-33c4-a0da-d26ae3912290" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="The global function 'assertion' is called without scope resolution operator '::'" ln="95" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="95" sev="5" auth="username" locRef="4" rule="CODSTA-CPP-23" lnHash="-1599411881" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-1599411881" unbViolId="67113ee8-400a-30f1-ab2f-da23599bd159" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9aae67df-14ef-3292-b7ff-e8242ab307ee" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Participant is out of ring" ln="95" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="95" sev="5" auth="username" locRef="4" rule="CWE-798-a" lnHash="-1599411881" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1599411881" unbViolId="8d9e6769-a138-36b5-859e-72e489250da2" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="576091e5-b9e7-329c-a3f8-5d2a8e6c0057" locEndPos="40" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Participant is out of ring" ln="95" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="95" sev="5" auth="username" locRef="4" rule="CODSTA-203" lnHash="-1599411881" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1599411881" unbViolId="aa4e514c-33f9-3c02-bce9-6af5e83397ba" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9d810bb-9355-33fa-b622-4451752ea6ce" locEndPos="40" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Participant is out of ring" ln="95" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="95" sev="1" auth="username" locRef="4" rule="APSC_DV-003110-a" lnHash="-1599411881" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1599411881" unbViolId="45c20f72-3909-3c8d-9aaa-515249b9832e" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d1dcff3-d3b9-3f72-a96d-0d474eff9e23" locEndPos="40" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Participant is out of ring" ln="95" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="95" sev="1" auth="username" locRef="4" rule="CERT_C-MSC41-a" lnHash="-1599411881" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1599411881" unbViolId="58837235-3983-3472-a8fd-47ad26d01d2f" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7e45e08-9253-32ed-891d-8591f68d669d" locEndPos="40" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'assertion' function call" ln="95" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="95" sev="2" auth="username" locRef="4" rule="AUTOSAR-A27_0_4-d" lnHash="-1599411881" rule.header="C-style strings shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="09256f0f-8c33-326e-85ea-79a205a27c6c" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="352b8803-13d2-3d54-b08e-8459b0a3a385" locEndPos="40" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'assertion' function call" ln="95" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="95" sev="3" auth="username" locRef="4" rule="PB-76" lnHash="-1599411881" rule.header="C-style strings shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="328810e2-253b-3022-b824-9a3676f7e602" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4e31309-4fb4-3453-93d7-70c44428c125" locEndPos="40" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="1bc4462f-7566-380a-b985-da8ad39e60c4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="14483322-2339-37f4-a3d3-f6f9bcb17b36" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="c9b84e2b-6aae-3a33-b460-fac61f0544b6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c96f2059-f1fd-3ae2-b26e-b6ee739fc09a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="5983584b-1bb5-36a2-8120-6e5b09fc3a0b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce881e6e-338d-3ccd-a450-cc302d15fa50" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="d49a8879-8d74-39e9-b774-721c0727f684" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43115451-79c7-3246-a70a-5cd72f09d667" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="d7bafcea-37e9-3f06-9353-54a0a5e4f5a8" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dca67977-7765-3a0f-ae24-6c89c65006d2" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="49cdf0e4-7ad2-34b9-96c9-73dbfbbcaba2" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e87ba69-a2e4-3e44-a45b-c16613cfe4f4" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="27b30dc8-71ac-33b5-8476-95edae576375" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="820f0150-62b0-3bdb-ab65-4473686f752b" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="676a358e-0b82-3558-985b-3dbe9665fb56" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4549db3-8dbb-38a5-88e9-959cc43f4350" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="3c275c69-cfec-3aee-8673-b9eabecf9cb6" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7cac6a8f-cc31-3864-aeab-b6fdee148838" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="95501129-37df-3a76-8fdd-8b6487516966" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7822806-8be1-396f-aad0-a1c1644ecd0c" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="e145ea9c-a6fc-3239-a218-3ab8f19b07ef" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0abb4199-30a0-3b16-90db-2ca22058ad31" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="9f156d32-e8c9-382e-bc01-92f1881f3ae9" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9bbe3970-bb1a-3cb5-b5c3-68a14533a8f6" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="b8344a84-5c28-34eb-bd4d-d7bf6bc1a8f1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7978e4e6-8df9-386c-bb53-d993e0bd678d" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="8e02cfd0-2425-3c78-abb3-fe1a684dc0d9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7d412ac-69ab-3ca8-a360-1b7e2830f185" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="33ee8d47-12eb-38d6-8b21-4a7c50994b07" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fcfe3392-6773-3dde-ba16-00d74e5df385" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="e0cd9c52-7f83-371e-b782-c90ebefdc12d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="edc58c23-93e3-38a7-a132-96a589a8d7fe" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="b88650eb-eb3f-3d4a-9502-e72aee51bd5a" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d2d0467-d0bb-3491-a64c-a5cff91356b9" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="6c94953f-9be1-3e33-ba1a-2b0468888ce5" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c03bc06f-2dc0-36bb-83f3-432b880f0fd9" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="ac6a0d78-eec6-3203-a568-682ea44aee3c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf62b00a-00cc-3d5c-92bc-1b44375f188f" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="80e46a9e-806c-3d6b-b08d-c0bfe4c861a9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3cfbda59-2045-3de1-bc67-f3b6d6284659" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="fe391774-bbc0-35c2-9d78-9f9fee243814" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="010741c4-bf1e-31dc-8f9b-acf5ba00d169" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="cc8414f0-80d9-397a-89eb-53542eb012ff" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="577457f9-0dae-3042-923b-741f2f25f66c" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="b69dd67d-4605-3953-a4dd-7194550c66a2" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f142788-fced-374f-bb37-498bb0dacfa7" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="8ab1a891-069c-3b25-b649-23726c3b97a5" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd30a87a-7728-3c6f-8bfc-cda0ee86c8ed" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="50a572a3-7ec6-324f-9d3e-878ae7c8e159" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ad8d609-c055-3ccd-bc94-8e1ad5bb6ce2" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="655f01e6-7418-38c4-8c38-84c268998610" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="006e7f9d-c437-3469-923c-6de0133fe129" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="21ee7d6e-eb3c-3c57-ba14-68553cea2413" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b250adad-cd99-3a78-ad20-8cdf10c9af8e" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="099fc1c6-7863-3912-b80c-6e569b873298" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="60fa1c62-a8e4-3b99-85b3-131038841b82" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="29709dc3-7ddf-32eb-9cc3-d2111ce9ebd7" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a42e6378-83ea-3d9e-abcd-97aeece4455b" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="2b869c53-9c43-30f6-a323-4e3d039d9c4c" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd12642b-a867-35b4-aa3d-78c95c7fc54a" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="f8b1d8e3-5239-3b5d-bbe3-ac07ae9b4137" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a700c8cf-9257-3bc0-8626-86ac5489af24" locEndPos="11" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="40f210c7-fac9-3474-85cd-3f81ff13877b" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d44bc570-e305-30ae-8b9a-8049980dbdaa" locEndPos="11" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="499c6731-4522-36e3-843e-2499aa0ee4a3" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7d7209e-fea3-3ea5-ba14-4f573ad6d14d" locEndPos="11" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="94d81ea9-af14-388e-8c9d-395dcc581c50" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a48e55b2-e4e6-314d-9fa9-f2646b4aa513" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="c555e9f0-b14d-30f5-a50a-0724730b463d" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="768b4eff-ca61-3146-b343-38981b8b55c1" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="96" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="1aaeef80-b7c5-3c91-956c-e05ac9fed262" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="040fa8e8-272e-34a2-bc61-dc3dbbddb5c4" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="52db2a46-60db-3f4f-94b7-230e4751c522" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c06f05af-376d-3ad3-b6c6-64c15bc980ca" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="674e5718-14a4-326d-9e6f-7d33b59e8687" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ea276e7-18e1-34a3-9ee8-ce382a256715" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="0b832668-c3ab-3d69-8b1e-a4aaa4a3895c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6cc53a75-5b23-3a28-a402-2e17cc89c681" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="1530b79d-daab-3149-be2d-24952f60554f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe6601c9-3bcc-32a0-bb54-c6937839582f" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="66b369b5-0ad9-36ba-b49f-1a20902309d1" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="265687db-de0c-3ce3-aac1-2109715d72e4" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="e6c0f82d-48f5-3d75-a8fe-71e295e1fdeb" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2efc9a58-1a54-3406-8336-cb4435b149f4" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="9e2ae9b1-86c0-31aa-939e-3a03d185491a" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c196070b-9c28-3d7b-907e-ca35bd354e1c" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="8ee61688-f765-3c2a-adeb-7b4016cd9f02" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e34b9f08-4d1e-3212-9f0e-bbfb69c2a597" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="f011cac3-b97e-3142-953f-e712a2cdefc9" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca7c7b4f-9985-353c-99f0-225f230f1b74" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="e288717b-b08e-31a6-9f3d-a0184de0a106" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5759b88a-8557-3b73-b2dc-9215c1bb86ad" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="32327e04-a778-38d6-8fd2-32352bb1982a" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4523c5f7-040c-3ff3-8881-562b2683a672" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="a2176fa2-7ee5-31c4-821f-c0bf0d3f66ce" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="49dcb0f2-7b14-36b5-90ce-a8ce6ff0455f" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="4879a416-8a89-3b18-ac54-4f11b3ffa608" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16316af6-26a4-3166-95a5-92ade6c33abb" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="543e402e-142b-3a4a-acbc-7a4c8a1ec1b5" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64e724d9-b488-3a42-a5c1-6bb71097c752" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="9bd8c587-f03e-35a3-a248-dc690d34dd42" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d472ee13-7bc9-363c-9834-8ae723c0f4cf" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="16d93cd1-cdce-3088-9b09-a01578cbf202" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d16ff1b-d739-3561-831e-bb2531c48223" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="5f090650-314c-3c74-82b8-7afb2b0087fe" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f35d3ec8-2ef0-36a3-9b83-211808116506" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="d68762ff-791e-36bf-bc0d-5f43965ffab3" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6c5d55d-da49-3b3b-9fde-4e39e0bb69af" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="8ea83246-e5a0-33a6-82c1-7587fff31aee" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38fcb4d3-438d-3a15-ab67-6f19532aec28" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="d9fa02a4-2b72-366b-82ab-1c39a9f731ad" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e090779-1335-38df-820a-ed03b32b967d" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="ca97ecb8-429d-3eed-8c57-9b4d13c65e4d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cff979c6-2477-31c1-ab12-f71081899e79" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="4414932f-1496-323a-984f-ce50b1248f23" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa606ad2-497c-3e92-bdbd-d2c2b5b22c80" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="5c53def5-45e8-3604-96ad-3ac54dd55a25" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae7f7380-03be-3cde-b7e6-990dc098932a" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="c499da45-0236-35cc-b456-04b27fc4eb02" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="045924a1-bbcd-36cc-ab9c-30f388fc6ca2" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="ad7d33a1-abe9-3ea3-b27c-b60ff07ce330" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f88d9a5-3d1c-32bf-916a-f21bfcebe630" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="c925be8e-d48d-3e89-8a4c-3f0c38d4af5c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d1827b9-5404-36f3-8e6b-a874cd63ec4d" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="b044290a-fee0-3650-949f-63f15b0515d3" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a356b33-4a25-332f-8ad8-3905e0894d2f" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="c51da93f-9a08-3948-8e07-ceafddfef051" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83e4d8f0-5bcc-3e73-8b71-699247ba5827" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="5432e811-f906-3389-b544-a8011de1c514" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0fff295-e88f-3ee7-808d-c9a924eb5f82" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="bc78fa40-7887-3986-a625-714ebf5d9132" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2b1cee0-a84a-321a-be4b-d5f84acd0272" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="0c8e89c8-ba41-345b-9ac6-fdad58149deb" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d519e5c-e428-3fb2-8723-e1eb711bb6e2" locEndPos="11" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="c25f7b41-fba1-3e75-8245-4eab6b3518ea" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff3ca824-8086-3fa9-b992-4254eef6a93e" locEndPos="11" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="6f38c2df-5e7e-3c77-8141-2642f180f5ab" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="134407f2-3f93-399b-bc9e-ea4610eee4ae" locEndPos="11" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="6046d7dd-77e1-30d3-95fe-1ce53f2dc5f5" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f7dac240-9e48-353d-b031-95f5ca1d8cc4" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="ccedb2bb-c073-3e57-a139-f20b2b2b0421" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1cb9cb8d-09ee-33fc-a45c-53f0e3dde1b3" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="97" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="e9525c9e-0dfb-3f7a-8799-50bb0d69af60" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b729a6f5-bc3e-31c3-bbda-79303d3ccac9" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="98" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="e7c57f06-0b8c-3961-a4ce-e9232887bbb4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="124d524d-614a-37ce-a137-9ceff138e4be" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="98" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="1efb2f7e-3bdc-3ab8-93e0-33e3f8b539cd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5302bd4d-2f88-354f-91d9-5dcf29dd978f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="98" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="2cd2b1d8-d4c8-36c4-bf2f-0381570dd4ef" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fdb5a74c-d480-3769-8ad7-84fad50405ed" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="98" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="747e2682-c32d-37fa-b3df-ec7a08aa8f15" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c686c4f-25dd-362a-b5e9-7b4b6695c7c4" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="98" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="3f7ccdf1-8071-3845-9ca0-e756b6520a94" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d83d0bcb-f97f-3955-91a9-70d29f207c5c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="98" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="728d5829-2886-30f3-862b-5f1a7e22dc4b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="df812b54-83bd-371f-8475-76442a37005d" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="98" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="afb310e2-cd84-3083-bc46-7a82903fa95a" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ad4a85d-3741-38f8-9963-2954ef755012" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="98" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="4b86bb54-89a5-3c88-bb83-09b28cc93304" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="871b2de8-820e-3397-8ebe-a79f57f5fef8" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="98" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="1af94ee3-ed15-3601-ae0a-c250a613cb45" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8b55741-6a20-3c8f-b14c-d57c1510bde7" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="98" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="5e5c12db-840a-3587-a490-50fe2130d23d" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b45ec409-adc4-39d5-b1fd-651f5cb06173" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="98" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="3ced6eba-03c0-3aa9-a40c-4fbd8c586a7e" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03a5d38f-fab0-324d-a0f8-d15b9c69c894" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="98" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="f1d5fbc9-4e33-370b-857e-968c522c5269" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0d60e34-27ca-385b-a139-8c052c6db418" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="99" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="277172" rule.header="Tabs should be avoided" tool="c++test" lineHash="277172" unbViolId="660a7687-3b56-31fe-a93c-b0aad789bc1f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="08c08768-398c-3f68-8589-3228c03733b4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="99" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="99" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="22d61400-a168-30d6-8bc7-8d50876d8f67" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="724cd0ef-074c-306e-a81b-dc6b055ba67b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="99" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="99" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="bd0f9ae7-1df4-3027-bad6-371af50d4d62" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="129e3d47-db51-3294-9aea-57ceeb758ace" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="99" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="99" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="277172" rule.header="Tabs should be avoided" tool="c++test" lineHash="277172" unbViolId="861dd854-41eb-3fe2-89dd-6fdb1fc203bf" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="19e87764-b778-3bbd-a384-399d7cc159c2" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="99" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="99" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="b5e9dfd5-4113-3548-b70f-dbdba7e55fe0" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa0bb36b-6771-3819-849b-be236eea84d9" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="99" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="99" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="6374053d-2294-3151-a3b0-e4e90d8e9814" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="021d5625-8ca4-3fa9-82f4-6357f1c1bb4f" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="99" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="99" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="277172" rule.header="Tabs should be avoided" tool="c++test" lineHash="277172" unbViolId="ea75d8e1-e274-3b15-ac0a-25fa542d41d9" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ea7dc4d3-4cdd-38f4-a58b-68cf5cfc62d8" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="99" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="99" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="41e49ed5-17ce-340f-9be6-b7167da9e3bd" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9fbaeaeb-dd67-3bde-a63f-a505ea1babcd" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="99" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="99" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="09d00880-adf2-3459-a3dd-9354f3a208b9" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8811da7b-0a21-3433-9bc6-c2f5acaebc86" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="99" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="100" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="1234365944" rule.header="Tabs should be avoided" tool="c++test" lineHash="1234365944" unbViolId="d471d0ea-11e8-3531-8b61-efe832b72b35" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7bbf78ce-994d-3bb4-b62d-6faf274d2d6e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="100" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="d5140717-509c-3960-8472-dc69092c8318" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a503104-c880-3fee-91ab-3c2898730bf0" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="100" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="fcca07a8-5b6b-334e-8a9b-1b8622ef676f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aed18e02-3eff-3abb-b591-1ff502b52e61" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="100" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="1234365944" rule.header="Tabs should be avoided" tool="c++test" lineHash="1234365944" unbViolId="bbd06783-cb2b-311a-be4b-b76f82352217" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de4620a1-13dc-307f-baf6-333a1b1b424a" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="100" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="07fd6a06-22c3-38ca-908b-2354a6431fcd" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23911e3a-d505-360b-bba7-16cc04353267" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="100" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="159e2ea5-7759-3899-a765-11871b843e1c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="045001d8-5974-3712-85ba-5288f06acfd9" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="100" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="1234365944" rule.header="Tabs should be avoided" tool="c++test" lineHash="1234365944" unbViolId="5a28043d-947d-33db-a46a-698246422777" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c22820a6-2860-3f3e-914b-6d0581db7a08" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="100" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="caa2ad40-273c-3301-aa77-860fc78e5317" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da87d15a-137f-39ad-96f4-3c6a2879555e" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="100" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="796e426a-a8f2-3f95-b64a-de1229aaa249" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3f7ed8f-74e5-3518-b58b-11d82ddbe8c9" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="The type 'int' of function argument number '1' does not match declared type 'unsigned long'" ln="100" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="100" sev="3" auth="username" locRef="4" rule="PB-11" lnHash="1234365944" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="1234365944" unbViolId="56144cc9-67ba-3cc5-b78d-de9dd1fdbf0c" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4424d65f-9e75-3f4a-8d08-9ded747e756a" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <DupViol msg="Duplicated code: 'SLEEP(STEP);'" ln="100" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="100" sev="3" auth="username" locRef="4" rule="CDD-DUPC" lnHash="1234365944" rule.header="Avoid code duplication" tool="c++test" lineHash="1234365944" unbViolId="d8f37a51-46ef-311d-8fa0-518cd8fef57f" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="08a75af5-2d0b-36ee-80a2-01b6136120ea" locEndPos="15" locType="sr" urgent="true" hash="-1769734618" locEndLn="100" goals="1,">
      <ElDescList>
        <ElDesc lineHash="1234365944" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="100" srcRngStartPos="3" srcRngEndPos="15" srcRngStartln="100" srcRngEndLn="100" desc="[Line 100] Duplicated code in file 'DeadLock.cpp'" rngLn="100" />
        <ElDesc lineHash="1234365944" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="128" srcRngStartPos="3" srcRngEndPos="15" srcRngStartln="128" srcRngEndLn="128" desc="[Line 128] Duplicated code in file 'DeadLock.cpp'" rngLn="128" />
      </ElDescList>
    </DupViol>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used" ln="100" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="100" sev="2" auth="username" locRef="4" rule="MISRA2008-5_0_4_a" lnHash="1234365944" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="1234365944" unbViolId="dd5dbad2-b7d3-338d-a17f-9c720621d6ed" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e76e402f-7737-311e-9447-6ba8d548a63a" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used" ln="100" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="100" sev="2" auth="username" locRef="4" rule="AUTOSAR-M5_0_4-a" lnHash="1234365944" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="1234365944" unbViolId="9de48073-3790-3276-a4c2-bef34fe524c2" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23ef18e4-237c-3179-a0a1-25014f1268e9" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used" ln="100" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="100" sev="3" auth="username" locRef="4" rule="MISRA2004-10_1_a" lnHash="1234365944" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="1234365944" unbViolId="5765196a-53c6-32ec-8782-cddcd179a2ef" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fbdf4c0d-b178-3c14-bfad-2b630fa18db0" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 20" ln="100" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="100" sev="3" auth="username" locRef="4" rule="HICPP-4_2_1-a" lnHash="1234365944" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="1234365944" unbViolId="e89f74c9-d2b2-3e34-bbd7-8b5158d2df05" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e46c55f4-3816-368c-87cb-17f56f27c73a" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="101" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="101" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="9053" rule.header="Tabs should be avoided" tool="c++test" lineHash="9053" unbViolId="74f57167-42c5-312b-a642-f3fe07add2cd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="119b388f-bdb4-343b-9bf5-46538f197ae8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="101" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="101" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="101" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="aaa6d14f-fdbf-37b4-9cec-dfce9acb74e8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a613036f-7bc7-3ebd-b4e2-9e1f445ca444" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="101" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="101" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="101" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="d165cca5-086c-392a-99b4-01650c2b328c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e345ae76-a5e6-3f19-98a7-39763fa738e3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="101" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="101" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="101" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="9053" rule.header="Tabs should be avoided" tool="c++test" lineHash="9053" unbViolId="f41d4c0f-0fd1-3e6e-8a7a-f1208a329956" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="907976c3-b652-370a-a501-27311af93d00" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="101" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="101" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="101" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="ef0e4728-410e-37b5-9698-589221f5d08e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a8017bc-48a7-3ed9-88af-0827c759cd9b" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="101" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="101" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="101" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="b45c187f-ee06-3c3a-a835-dd34dfe9c53d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a41ad23-f112-35ab-8730-d1f825f38865" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="101" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="102" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="102" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1688062501" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1688062501" unbViolId="1ad65ef4-ec00-3be8-a9a2-cfd4b8f28053" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f74d950b-8c23-3ce9-8666-708f241a9e0f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="102" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="102" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="419fedb2-3581-3062-a6d3-ae3a825162ca" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5c5c185b-84cb-3c43-b36c-e4a96f21de18" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="102" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="102" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="011d3101-4cbb-3685-abcd-9d28f86d3480" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52312e7e-56bd-38ef-8680-17b6e794219e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="102" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="102" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1688062501" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1688062501" unbViolId="2e9c2cd0-45a4-3817-868d-fe2228eea494" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0505f700-7e08-3274-9d4f-fb6731c73fd0" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="102" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="102" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="2e7914e6-f31f-3cb6-be83-b99145cb1b12" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cc787f14-d000-3ef0-8ded-c10d24380308" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="102" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="102" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="920f5d5c-581e-3164-a9fd-6cd79602c340" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c0e60c4-112d-39d5-a2d3-1045515f2fad" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has declared return type 'unsigned long' but returns value of type 'int'" ln="102" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="102" sev="3" auth="username" locRef="4" rule="PB-05" lnHash="-1688062501" rule.header="Return value of a function must match declared return type" tool="c++test" lineHash="-1688062501" unbViolId="549155fc-b71b-3ed1-a769-9fab21ce4d1f" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6fa49c7-bacd-3c43-9795-5bc9616d09ec" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="'return' statement should be used with parenthesis" ln="102" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="102" sev="3" auth="username" locRef="4" rule="FORMAT-25_b" lnHash="-1688062501" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="-1688062501" unbViolId="70da1950-daeb-3b59-859b-478500bc0874" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b58ff7b5-4be9-392e-be63-fc66d97c38ea" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <DupViol msg="Duplicated code: 'return 0;'" ln="102" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="102" sev="3" auth="username" locRef="4" rule="CDD-DUPC" lnHash="-1688062501" rule.header="Avoid code duplication" tool="c++test" lineHash="-1688062501" unbViolId="99373e1e-6695-3fb0-9970-e9ab464d7a6e" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="1f2f75d2-4969-3dea-8f2b-c5fee41b2a7b" locEndPos="11" locType="sr" urgent="true" hash="-1769734618" locEndLn="102" goals="1,">
      <ElDescList>
        <ElDesc lineHash="-1688062501" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="102" srcRngStartPos="2" srcRngEndPos="11" srcRngStartln="102" srcRngEndLn="102" desc="[Line 102] Duplicated code in file 'DeadLock.cpp'" rngLn="102" />
        <ElDesc lineHash="-1688062501" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="130" srcRngStartPos="2" srcRngEndPos="11" srcRngStartln="130" srcRngEndLn="130" desc="[Line 130] Duplicated code in file 'DeadLock.cpp'" rngLn="130" />
        <ElDesc lineHash="1599597842" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/flowanalysiscpp/NullPointer.cpp" ln="13" srcRngStartPos="1" srcRngEndPos="10" srcRngStartln="13" srcRngEndLn="13" desc="[Line 13] Duplicated code in file 'NullPointer.cpp'" rngLn="13" />
      </ElDescList>
    </DupViol>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function return statement shall not be used" ln="102" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="102" sev="2" auth="username" locRef="4" rule="MISRA2008-5_0_4_a" lnHash="-1688062501" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-1688062501" unbViolId="35929fa5-c595-32fd-b666-a2b675cffe55" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="399378df-afb6-3b3c-829d-29c5e5fdc95e" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function return statement shall not be used" ln="102" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="102" sev="2" auth="username" locRef="4" rule="AUTOSAR-M5_0_4-a" lnHash="-1688062501" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1688062501" unbViolId="39a933dd-30fe-31de-b005-01e557c858e6" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dedff70c-9087-3941-a996-06e7f1be3433" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function return statement shall not be used" ln="102" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="102" sev="3" auth="username" locRef="4" rule="MISRA2004-10_1_a" lnHash="-1688062501" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1688062501" unbViolId="76f15d94-ef60-3a47-8366-2b57b8a9b150" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="82192039-2a5a-301e-9940-9226581586d0" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="102" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="102" sev="2" auth="username" locRef="4" rule="AUTOSAR-M2_13_3-a" lnHash="-1688062501" rule.header="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" tool="c++test" lineHash="-1688062501" unbViolId="0be6e0c9-926c-389d-989d-539942b9938f" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="893cc738-09cd-34f1-b6cb-bed8e1701cd3" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="102" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="102" sev="3" auth="username" locRef="4" rule="CODSTA-68" lnHash="-1688062501" rule.header="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" tool="c++test" lineHash="-1688062501" unbViolId="1e20793b-2958-3d2f-8062-ac144178ef0e" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2dbb5467-da4c-3402-8e78-cb9e0d8369a7" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="102" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="102" sev="2" auth="username" locRef="4" rule="MISRA2008-2_13_3" lnHash="-1688062501" rule.header="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" tool="c++test" lineHash="-1688062501" unbViolId="a029ffb3-66b0-3606-95af-6e5690def465" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0506621d-eae2-35de-ab84-3152fb8e4036" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="102" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="102" sev="3" auth="username" locRef="4" rule="HICPP-4_2_1-a" lnHash="-1688062501" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-1688062501" unbViolId="06cf9c94-25f9-3b24-a0c4-1fa785bf523c" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e6f9e8f-7d43-3f61-8dab-a7906f03d725" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="103" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="103" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="404" rule.header="Tabs should be avoided" tool="c++test" lineHash="404" unbViolId="34119fbb-35f4-380d-8c46-ab43449fccd3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43ac5680-a735-31fc-84d9-d74aacc49b1f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="103" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="103" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="103" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="875210b2-a74d-3151-81bc-74a6352575d9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="625bd916-1cf1-35d0-996b-6d49798f13cc" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="103" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="103" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="103" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="71736308-9086-38c3-8745-4b049151e594" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="392abea6-6de5-396d-8c79-fa8bc897672e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="103" goals="0," />
    <FlowViol msg="Unreleased lock: changePositionMutex" ln="103" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point prior to which the lock is to be released" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="93" rule="BD-TRS-LOCK" FirstElSrcRngStartPos="0" lnHash="404" ruleSCSCMsg="Point where the lock is acquired" pkg="Physics" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Do not abandon unreleased locks" FirstElSrcRngStartln="92" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-749361822" lang="cpp" violId="54924af4-97ef-307c-88c7-5949a3ff62db" locEndPos="0" locEndLn="104" goals="0," locStartln="103" sev="1" locRef="4" tool="c++test" lineHash="404" unbViolId="5dba70ab-7eff-3a25-8421-95fe63ad7dd2" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1229452372" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="90" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="90" srcRngEndLn="91" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="91" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="91" srcRngEndLn="92" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="92" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="92" srcRngEndLn="93" desc="LOCK_ACQUIRE(changePositionMutex);" ElType=".C" rngLn="92">
          <Anns>
            <Ann msg="Point where the lock is acquired" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="93" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="93" srcRngEndLn="94" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93" />
        <ElDesc lineHash="929435952" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="94" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="94" srcRngEndLn="95" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94" />
        <ElDesc lineHash="-1599411881" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="95" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="95" srcRngEndLn="96" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="!E" rngLn="95" thrownTypes="const char *" throwingMethod="assertion">
          <ElDescList>
            <ElDesc lineHash="-600547524" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="60" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="60" srcRngEndLn="61" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming true)" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1274881582" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="61" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="61" srcRngEndLn="62" desc="throw message;" ElType="!E" rngLn="61" thrownTypes="throwStatement" throwingMethod="">
              <Anns>
                <Ann msg="Throws an exception" kind="except" />
              </Anns>
            </ElDesc>
          </ElDescList>
          <Anns>
            <Ann msg="assertion() throws const char *" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="404" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="103" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="103" srcRngEndLn="104" desc="}" ElType=".P" rngLn="103">
          <Anns>
            <Ann msg="Point prior to which the lock is to be released" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Unreleased lock: changePositionMutex" ln="103" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point prior to which the lock is to be released" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="93" rule="CERT_C-CON01-a" FirstElSrcRngStartPos="0" lnHash="404" ruleSCSCMsg="Point where the lock is acquired" pkg="Physics" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Do not abandon unreleased locks" FirstElSrcRngStartln="92" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-297012482" lang="cpp" violId="2875b002-e52d-3007-ae3a-61b3515ed80d" locEndPos="0" locEndLn="104" goals="0," locStartln="103" sev="3" locRef="4" tool="c++test" lineHash="404" unbViolId="f8db1b90-d684-3c4f-9cd2-3527e7a9e2dc" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1229452372" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="90" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="90" srcRngEndLn="91" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="91" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="91" srcRngEndLn="92" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="92" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="92" srcRngEndLn="93" desc="LOCK_ACQUIRE(changePositionMutex);" ElType=".C" rngLn="92">
          <Anns>
            <Ann msg="Point where the lock is acquired" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="93" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="93" srcRngEndLn="94" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93" />
        <ElDesc lineHash="929435952" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="94" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="94" srcRngEndLn="95" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94" />
        <ElDesc lineHash="-1599411881" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="95" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="95" srcRngEndLn="96" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="!E" rngLn="95" thrownTypes="const char *" throwingMethod="assertion">
          <ElDescList>
            <ElDesc lineHash="-600547524" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="60" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="60" srcRngEndLn="61" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming true)" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1274881582" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="61" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="61" srcRngEndLn="62" desc="throw message;" ElType="!E" rngLn="61" thrownTypes="throwStatement" throwingMethod="">
              <Anns>
                <Ann msg="Throws an exception" kind="except" />
              </Anns>
            </ElDesc>
          </ElDescList>
          <Anns>
            <Ann msg="assertion() throws const char *" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="404" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="103" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="103" srcRngEndLn="104" desc="}" ElType=".P" rngLn="103">
          <Anns>
            <Ann msg="Point prior to which the lock is to be released" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Unreleased lock: changePositionMutex" ln="103" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point prior to which the lock is to be released" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="93" rule="MISRA2012-DIR-4_13_d" FirstElSrcRngStartPos="0" lnHash="404" ruleSCSCMsg="Point where the lock is acquired" pkg="Physics" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Do not abandon unreleased locks" FirstElSrcRngStartln="92" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1110195382" lang="cpp" violId="7e55664e-cdaf-3a8a-a6ff-5942ca68fede" locEndPos="0" locEndLn="104" goals="0," locStartln="103" sev="4" locRef="4" tool="c++test" lineHash="404" unbViolId="97d4bd0c-b9ff-3203-8917-9105796d894a" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1229452372" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="90" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="90" srcRngEndLn="91" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="91" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="91" srcRngEndLn="92" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="92" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="92" srcRngEndLn="93" desc="LOCK_ACQUIRE(changePositionMutex);" ElType=".C" rngLn="92">
          <Anns>
            <Ann msg="Point where the lock is acquired" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="93" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="93" srcRngEndLn="94" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93" />
        <ElDesc lineHash="929435952" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="94" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="94" srcRngEndLn="95" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94" />
        <ElDesc lineHash="-1599411881" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="95" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="95" srcRngEndLn="96" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="!E" rngLn="95" thrownTypes="const char *" throwingMethod="assertion">
          <ElDescList>
            <ElDesc lineHash="-600547524" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="60" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="60" srcRngEndLn="61" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming true)" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1274881582" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="61" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="61" srcRngEndLn="62" desc="throw message;" ElType="!E" rngLn="61" thrownTypes="throwStatement" throwingMethod="">
              <Anns>
                <Ann msg="Throws an exception" kind="except" />
              </Anns>
            </ElDesc>
          </ElDescList>
          <Anns>
            <Ann msg="assertion() throws const char *" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="404" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="103" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="103" srcRngEndLn="104" desc="}" ElType=".P" rngLn="103">
          <Anns>
            <Ann msg="Point prior to which the lock is to be released" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Unreleased lock: changePositionMutex" ln="103" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point prior to which the lock is to be released" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="93" rule="MISRAC2012-DIR_4_13-d" FirstElSrcRngStartPos="0" lnHash="404" ruleSCSCMsg="Point where the lock is acquired" pkg="Physics" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Do not abandon unreleased locks" FirstElSrcRngStartln="92" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1773652853" lang="cpp" violId="c259473f-5108-3e60-82bb-5426edf1e47a" locEndPos="0" locEndLn="104" goals="0," locStartln="103" sev="4" locRef="4" tool="c++test" lineHash="404" unbViolId="26814ac1-8862-3a4a-af42-d7751fb4a6e2" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1229452372" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="90" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="90" srcRngEndLn="91" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="91" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="91" srcRngEndLn="92" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="92" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="92" srcRngEndLn="93" desc="LOCK_ACQUIRE(changePositionMutex);" ElType=".C" rngLn="92">
          <Anns>
            <Ann msg="Point where the lock is acquired" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="93" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="93" srcRngEndLn="94" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93" />
        <ElDesc lineHash="929435952" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="94" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="94" srcRngEndLn="95" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94" />
        <ElDesc lineHash="-1599411881" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="95" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="95" srcRngEndLn="96" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="!E" rngLn="95" thrownTypes="const char *" throwingMethod="assertion">
          <ElDescList>
            <ElDesc lineHash="-600547524" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="60" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="60" srcRngEndLn="61" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming true)" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1274881582" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="61" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="61" srcRngEndLn="62" desc="throw message;" ElType="!E" rngLn="61" thrownTypes="throwStatement" throwingMethod="">
              <Anns>
                <Ann msg="Throws an exception" kind="except" />
              </Anns>
            </ElDesc>
          </ElDescList>
          <Anns>
            <Ann msg="assertion() throws const char *" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="404" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="103" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="103" srcRngEndLn="104" desc="}" ElType=".P" rngLn="103">
          <Anns>
            <Ann msg="Point prior to which the lock is to be released" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="108" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="108" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1765880527" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1765880527" unbViolId="2c133e59-a328-3f7e-b723-4521c1a07900" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5583e1ee-8845-3df6-b339-5e952733ce23" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="108" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="108" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1765880527" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1765880527" unbViolId="c3d4dc18-17dd-3865-89ed-c655f3fd2a09" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ae11ed0-9c44-3bd2-95ff-7e6496caae41" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="108" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="108" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1765880527" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1765880527" unbViolId="6c92e569-a652-3345-a186-3c8379496acf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02925038-d04e-3fc7-aa61-15a00d2308f1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="The operator '*', used for 'currentCameraVelocity' declaration, should be directly connected with the type" ln="108" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="108" sev="3" auth="username" locRef="4" rule="JSF-062" lnHash="-1765880527" rule.header="The dereference operator '*' and the address-of operator '&amp;' will be directly connected with the type-specifier" tool="c++test" lineHash="-1765880527" unbViolId="d4e2d60e-7e5f-3659-9810-d95ff7518b04" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07267ecc-1fe1-3d23-b801-98676162a7bc" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="The operator '*', used for 'currentCameraVelocity' declaration, should be directly connected with the type" ln="108" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="108" sev="4" auth="username" locRef="4" rule="FORMAT-32" lnHash="-1765880527" rule.header="The dereference operator '*' and the address-of operator '&amp;' should be directly connected with the type" tool="c++test" lineHash="-1765880527" unbViolId="1ef41ff4-0d2e-3705-a64b-3c0c067a2e3f" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74ecc21a-fdf7-3166-8b2b-43f43170ac97" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: currentCameraVelocity" ln="108" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="108" sev="3" auth="username" locRef="4" rule="CODSTA-94" lnHash="-1765880527" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1765880527" unbViolId="2edeba33-4a2a-3774-b99f-e65d71f578e2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a81a3ef5-a00f-34df-a9ab-4dac715cf5c5" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="The variable of pointer type is declared: currentCameraVelocity" ln="108" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="108" sev="3" auth="username" locRef="4" rule="CODSTA-95" lnHash="-1765880527" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1765880527" unbViolId="3bb483c3-40e8-301a-bf68-fa3d8adad3b5" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce4f2477-0174-3daa-bac9-df45c5fc78c5" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Pointer variable 'currentCameraVelocity' uninitialized when declared" ln="108" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="108" sev="2" auth="username" locRef="4" rule="INIT-04" lnHash="-1765880527" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1765880527" unbViolId="23887f2a-a7a1-3334-a111-1756490d2efa" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba7077f9-b5f2-38c8-bc4f-6cff319b2c97" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Consider encapsulating 'currentCameraVelocity'" ln="108" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="108" sev="3" auth="username" locRef="4" rule="JSF-207" lnHash="-1765880527" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="-1765880527" unbViolId="e5db47a8-9db7-3ac0-a995-b5df1854234f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48917332-b57b-384d-adf1-10bcc3387f46" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Consider encapsulating 'currentCameraVelocity'" ln="108" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="108" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-82" lnHash="-1765880527" rule.header="Avoid unencapsulated global variables (including variables declared in namespaces and public static members)" tool="c++test" lineHash="-1765880527" unbViolId="666b8055-c2d8-3127-9ca4-3f4423e24a1e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f25843e-8d43-3bc6-9e66-165ff67eb9d4" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="The 'currentCameraVelocity' variable should be commented" ln="108" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="108" sev="3" auth="username" locRef="4" rule="JSF-132_a" lnHash="-1765880527" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1765880527" unbViolId="1d361e2a-250c-331d-b355-f1ee513829e1" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1789c2c8-6169-381f-9385-d18d5bb51220" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="The 'currentCameraVelocity' variable should be commented" ln="108" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="108" sev="3" auth="username" locRef="4" rule="COMMENT-05" lnHash="-1765880527" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1765880527" unbViolId="2d7081b6-68e1-3c9c-a54e-17d1a1b5cad0" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="803b700b-e5d2-3d1e-a6e7-bb62beca0f07" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Use of variable &quot;currentCameraVelocity&quot; with static storage duration is not allowed" ln="108" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="108" sev="3" auth="username" locRef="4" rule="HICPP-3_3_1-a" lnHash="-1765880527" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="-1765880527" unbViolId="51da869d-9cb8-3d53-b530-c2e43fc9a58c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="80405a19-200f-38cc-b703-3682eea9f06c" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Global variable 'currentCameraVelocity' is declared" ln="108" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="108" sev="5" auth="username" locRef="4" rule="MISRA-022" lnHash="-1765880527" rule.header="Declare objects at function scope" tool="c++test" lineHash="-1765880527" unbViolId="cc208068-d14c-3485-be69-61b8ad4dbbbe" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="44d1a0a3-ffa2-376d-9c7c-f7ec436acd65" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Naming convention not followed: currentCameraVelocity" ln="108" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="108" sev="3" auth="username" locRef="4" rule="NAMING-18" lnHash="-1765880527" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="-1765880527" unbViolId="17201d93-9c7d-34b9-bba4-e876bb2b2c0b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e04b613f-9ede-344b-b89f-84195f761281" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Naming convention not followed: currentCameraVelocity" ln="108" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="108" sev="3" auth="username" locRef="4" rule="NAMING-22" lnHash="-1765880527" rule.header="Prefix a variable type 'pointer' with a 'p' character" tool="c++test" lineHash="-1765880527" unbViolId="88bdbc0b-d423-3788-83e9-3686bd131a5e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="487cce2d-09e7-3d3a-b6b2-9f5d56c8039e" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="The 'currentCameraVelocity' identifier should have the 'p' prefix" ln="108" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="108" sev="3" auth="username" locRef="4" rule="NAMING-HN-34" lnHash="-1765880527" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="-1765880527" unbViolId="45452788-802d-3afb-860e-6e40d0f5aa21" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6aef4f27-9fae-33b1-8797-ff7f217b6dd4" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="108" sev="4" auth="username" locRef="4" rule="OWASP2019-API9-e" lnHash="-1765880527" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1765880527" unbViolId="74150b27-b3c5-34d8-949e-464323c0bb35" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76084d3c-56eb-3595-973a-c7628edd6a00" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="108" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="-1765880527" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1765880527" unbViolId="5b5724f1-f0a4-3cee-b5cc-1384e535805e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65643831-57c5-3b6a-b53d-059d222a309f" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="108" sev="4" auth="username" locRef="4" rule="JSF-137" lnHash="-1765880527" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-1765880527" unbViolId="1a784a68-7908-3849-a0b9-39d45493a602" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5edde2f-35a4-3a81-a161-8b8842df5c09" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="108" sev="4" auth="username" locRef="4" rule="MISRA-023" lnHash="-1765880527" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1765880527" unbViolId="935e52bb-d6b5-37de-9849-03f560a5884f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="32f5fc3a-e070-3d6d-a0e7-05dad2d21c9a" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="108" sev="2" auth="username" locRef="4" rule="MISRA2008-3_3_1" lnHash="-1765880527" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1765880527" unbViolId="f5b9ec9e-8b5c-36ca-bd57-508fe3857435" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed7146f7-3a49-36d5-8b69-11120e90b66b" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="108" sev="3" auth="username" locRef="4" rule="CERT_C-DCL15-a" lnHash="-1765880527" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1765880527" unbViolId="8b1a686f-a058-317d-bd65-b7afb2dd6d3f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="171b326d-e944-3065-9304-d7b2ec5ee507" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="108" sev="4" auth="username" locRef="4" rule="MISRA2004-8_10" lnHash="-1765880527" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1765880527" unbViolId="369785a8-ed93-3d5e-bcdc-ced260d7b5bc" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68e6ce1a-a6ee-3922-bab6-f4a809d70389" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="The name 'currentCameraVelocity' should be composed only of lowercase letters" ln="108" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="108" sev="3" auth="username" locRef="4" rule="JSF-051" lnHash="-1765880527" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1765880527" unbViolId="cfaea068-32f1-3eb1-979e-ae647e91cba5" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18967658-9f5c-34da-918c-f8a71013e821" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="The name 'currentCameraVelocity' should be composed only of lowercase letters" ln="108" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="108" sev="3" auth="username" locRef="4" rule="NAMING-44" lnHash="-1765880527" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1765880527" unbViolId="82656b57-079d-36c1-8f82-ff4d1b737b8b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e443a7c8-02a5-3181-9c80-d65fa07ee4c9" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="2003669405" rule.header="Tabs should be avoided" tool="c++test" lineHash="2003669405" unbViolId="0f24e3f3-97c3-32e2-a43a-97736b6ce2a9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="801635d0-320a-3469-ab3c-41f4b5e7b01b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="2003669405" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="2003669405" unbViolId="5714fa28-a0a9-3e06-a3ad-25af12929586" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d690c509-d03a-3004-ab62-0e8b371774ec" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="2003669405" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="2003669405" unbViolId="7ebbe92e-1fed-3a7f-86c5-256e162f123a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d65884c-232a-38de-88bb-f08a3270390b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The 'draw' function should be preceded by a comment that contains the '@brief' tag" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="3" auth="username" locRef="4" rule="COMMENT-14" lnHash="2003669405" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="2003669405" unbViolId="4a771f28-d513-3a58-a1b1-1fa520e59d00" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="acae03e7-5c32-3efb-9a74-6b42da678f51" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The 'draw' function should be preceded by a comment that contains the '@brief' tag" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="2" auth="username" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="2003669405" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="2003669405" unbViolId="905b243e-b7bb-3d3b-9a3a-04be244b2a5c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c780982-ac7a-3b97-b4ce-6c866397e981" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The 'object' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="3" auth="username" locRef="4" rule="COMMENT-14_b" lnHash="2003669405" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="2003669405" unbViolId="31de55c5-06a7-3fe4-8322-bb724c24292f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d92a680d-2d0a-3887-8422-d60d407d6ea9" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The 'object' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="2" auth="username" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="2003669405" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="2003669405" unbViolId="8d43cb82-c3a2-304d-b4ec-ef48fb4285c9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b768355-5bb4-3ac3-8b57-98a80d306a27" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The 'draw' function should be declared 'noexcept'" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="2" auth="username" locRef="4" rule="AUTOSAR-A15_4_4-a" lnHash="2003669405" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="2003669405" unbViolId="39beaefa-c0d0-3486-b772-dfedf0da5c66" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27b1ecd9-f416-37a2-a776-cd7e9006e8bb" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The 'draw' function should be declared 'noexcept'" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="3" auth="username" locRef="4" rule="CODSTA-MCPP-09" lnHash="2003669405" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="2003669405" unbViolId="8bcd5f62-d2c5-3572-911e-db0c81160cf0" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b44a881-3319-348c-b402-e0e6b166fc48" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'draw'" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="3" auth="username" locRef="4" rule="FORMAT-28" lnHash="2003669405" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="2003669405" unbViolId="9ba1de43-6f55-390c-94f7-acd9ebb878d8" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ca84739-72f2-3333-b3bd-89829c28bf0e" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' has Cyclomatic Complexity value: 1" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="5" auth="username" locRef="4" rule="METRICS-29" lnHash="2003669405" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="2003669405" unbViolId="24132454-12dc-32ae-87c2-b1bfb4e063df" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55f782eb-0536-3b05-8bee-daa2e1c48fd2" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' has Essential Complexity value: 1" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="5" auth="username" locRef="4" rule="METRICS-33" lnHash="2003669405" rule.header="Report Essential Complexity" tool="c++test" lineHash="2003669405" unbViolId="aa9d6d53-773f-36fa-ab6d-11f3321f7e50" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0c823195-d53c-3d0c-aba7-d0cbc4d19908" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Naming convention not followed: draw" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="3" auth="username" locRef="4" rule="NAMING-17" lnHash="2003669405" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="2003669405" unbViolId="677a67a8-01ae-36be-a536-f73d8f42d2cb" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f2996dd-e6e4-338c-8a32-19222c0c1b15" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' is empty" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="2" auth="username" locRef="4" rule="MISRA2008-0_1_8_b" lnHash="2003669405" rule.header="All functions with void return type shall have external side effect(s)" tool="c++test" lineHash="2003669405" unbViolId="a39fa911-6603-3527-8730-e8db5bfcd431" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="262ec946-4192-3dbd-81c3-4d95e3d9b249" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' is empty" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="4" auth="username" locRef="4" rule="OPT-32_b" lnHash="2003669405" rule.header="Functions with void return type shall not be empty" tool="c++test" lineHash="2003669405" unbViolId="7dcea859-6272-31f3-8d96-b0e7597cb49c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5d50623-8a8b-3870-b438-287270bd8151" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' is empty" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="2" auth="username" locRef="4" rule="AUTOSAR-M0_1_8-b" lnHash="2003669405" rule.header="Functions with void return type shall not be empty" tool="c++test" lineHash="2003669405" unbViolId="5cfdb934-35d7-3ed1-8081-499824eea456" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="89540d16-7653-3290-9518-af8693cdb1c5" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The definition of the 'draw' function is not preceded by a comment" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="3" auth="username" locRef="4" rule="COMMENT-04" lnHash="2003669405" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="2003669405" unbViolId="79599d64-78ca-373a-bda1-37e655c861f9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4cf7243a-101e-3f21-a66c-21a832442c36" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The definition of the 'draw' function is not preceded by a comment" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="4" auth="username" locRef="4" rule="JSF-134" lnHash="2003669405" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="2003669405" unbViolId="598b8360-bfd2-31c0-94f4-6aba3e9d247b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4aadd72e-0399-317d-93d6-006bf020223d" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="4" auth="username" locRef="4" rule="OWASP2019-API9-e" lnHash="2003669405" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2003669405" unbViolId="295f6be7-c129-324f-a6ba-8505d3f408aa" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="34747c03-65a6-39e0-8924-a38d521c69b2" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="2003669405" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2003669405" unbViolId="345ba666-6990-3754-b6bf-9211da9f83bb" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6cc6f4d-17fd-378e-bc47-3b88f1286bd0" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="4" auth="username" locRef="4" rule="JSF-137" lnHash="2003669405" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="2003669405" unbViolId="357d1636-af26-3c08-af6c-ae1dba23944a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b5ad9ab-84bc-30e5-b037-f47cfb3a3201" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="4" auth="username" locRef="4" rule="MISRA-023" lnHash="2003669405" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2003669405" unbViolId="3ba4afa8-88f9-38c7-85ac-d930d963aa90" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76959d69-ff19-3495-9f0f-4a7919652906" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="2" auth="username" locRef="4" rule="MISRA2008-3_3_1" lnHash="2003669405" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2003669405" unbViolId="61cbc62b-b869-3b71-9ab6-7f4e71297051" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a491914-8e80-3805-ab8e-4e9ddf1d7877" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="3" auth="username" locRef="4" rule="CERT_C-DCL15-a" lnHash="2003669405" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2003669405" unbViolId="13465163-3a6a-37f4-b9e7-53bd17aff674" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0457fbb8-da35-3c44-af39-355ee65c2809" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="4" auth="username" locRef="4" rule="MISRA2004-8_10" lnHash="2003669405" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2003669405" unbViolId="8e2eefd8-da3e-393a-a29f-fc860c7ea816" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65517c46-e8fa-3bc2-8350-902235ac9acd" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The 'const' qualifier should be placed on the right hand side of the type" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="3" auth="username" locRef="4" rule="FORMAT-47_a" lnHash="2003669405" rule.header="Place CV-qualifiers on the right hand side of the type they apply to" tool="c++test" lineHash="2003669405" unbViolId="b96200d9-3221-35c0-acf1-ef56aaf95dd8" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="511f9fbe-6bd1-3269-956d-5c8aaa2fcdc4" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The 'const' qualifier should be placed on the right hand side of the type" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="3" auth="username" locRef="4" rule="HICPP-7_1_4-a" lnHash="2003669405" rule.header="Place CV-qualifiers on the right hand side of the type they apply to" tool="c++test" lineHash="2003669405" unbViolId="3c0c343a-7bd8-3077-810a-a230ef87b133" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd46cc89-81c9-305c-ba83-a6191320e8ba" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The operator '*', used for 'object' declaration, should be directly connected with the type" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="3" auth="username" locRef="4" rule="JSF-062" lnHash="2003669405" rule.header="The dereference operator '*' and the address-of operator '&amp;' will be directly connected with the type-specifier" tool="c++test" lineHash="2003669405" unbViolId="c5587d85-20b1-35fa-9912-75b143270229" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db3a9471-6032-386f-ab8d-52d0696e19e6" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The operator '*', used for 'object' declaration, should be directly connected with the type" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="4" auth="username" locRef="4" rule="FORMAT-32" lnHash="2003669405" rule.header="The dereference operator '*' and the address-of operator '&amp;' should be directly connected with the type" tool="c++test" lineHash="2003669405" unbViolId="fe0184cd-0105-3ee6-b96d-f23e97836f9e" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ba58466-a931-3675-bfcd-8fcba1273e7c" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared: object" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="3" auth="username" locRef="4" rule="CODSTA-94" lnHash="2003669405" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="2003669405" unbViolId="40565dd1-c77b-3aae-87ec-89ece78e92b1" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ede5df18-9e01-336a-b663-cfb083e62b14" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The parameter of pointer type is declared: object" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="3" auth="username" locRef="4" rule="CODSTA-95" lnHash="2003669405" rule.header="Do not declare pointer type" tool="c++test" lineHash="2003669405" unbViolId="2fff6714-6c12-31c4-85ad-afa0a33770d9" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4cd71b3f-c8a1-3267-a769-e65d704c3a88" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Declare parameter 'object' as const" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="3" auth="username" locRef="4" rule="CERT_C-DCL00-a" lnHash="2003669405" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="2003669405" unbViolId="2ebbf03d-80fa-3ec4-8753-96221fa8c289" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5c3b93e-09b4-3838-ba46-ca299fa63d3d" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Declare parameter 'object' as const" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="2" auth="username" locRef="4" rule="AUTOSAR-A7_1_1-a" lnHash="2003669405" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="2003669405" unbViolId="cc1318f5-6356-3c38-8766-1bd170ac57c9" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="451aa2bf-6c59-38d8-ba5d-6c72ca5f2dea" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Declare parameter 'object' as const" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="2" auth="username" locRef="4" rule="MISRA2008-7_1_1" lnHash="2003669405" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="2003669405" unbViolId="3b5b6938-1390-3db9-a41f-4bf598583aeb" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae371d8f-0a1c-3469-8ef0-6643fd96fc5d" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Declare parameter 'object' as const" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-53" lnHash="2003669405" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="2003669405" unbViolId="69f7b9cd-628a-36c6-ac2c-a03ae63d88ec" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="29f0c7dc-15d0-382e-a193-7b890bbbc8aa" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Declare parameter 'object' as const" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="3" auth="username" locRef="4" rule="HICPP-7_1_2-a" lnHash="2003669405" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="2003669405" unbViolId="4df052e1-6d00-34d1-b2b5-437a7ee7d430" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="933ee9d7-f15a-3dcc-8745-4d62bd98f9ff" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The 'object' identifier should have the 'p' prefix" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="3" auth="username" locRef="4" rule="NAMING-HN-34" lnHash="2003669405" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="2003669405" unbViolId="78b4fa8b-f1f0-3737-87c2-0dd057491f61" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="458f3036-1a43-3257-92a4-f7f5174ab829" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="R-828: parameter &quot;object&quot; was never referenced" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="5" auth="username" locRef="4" rule="PARSER-REMARK" lnHash="2003669405" rule.header="Parser remark" tool="c++test" lineHash="2003669405" unbViolId="6d080707-43ef-34b6-a110-04ce3578238d" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d3728c9-e8e2-3263-89ec-05623dd19b24" locEndPos="25" locType="sr" urgent="true" hash="-1769734618" locEndLn="110" goals="1," />
    <StdViol msg="Parameter 'object' is not used" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="2" auth="username" locRef="4" rule="OPT-03" lnHash="2003669405" rule.header="Eliminate unused parameters" tool="c++test" lineHash="2003669405" unbViolId="109f2e6a-00e0-3e99-90e0-bbddd151dce8" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8d12f48-d381-3a19-8a93-e2bd79020537" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Parameter 'object' is not used" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="2" auth="username" locRef="4" rule="AUTOSAR-A0_1_4-a" lnHash="2003669405" rule.header="Eliminate unused parameters" tool="c++test" lineHash="2003669405" unbViolId="344364bc-7bca-334c-96cb-a16a9d736f56" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c2471de-dd82-3d91-9694-4ecbb10c68d2" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Parameter 'object' is not used" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="3" auth="username" locRef="4" rule="OPT-31" lnHash="2003669405" rule.header="There shall be no unused parameters (named or unnamed) in non-virtual functions" tool="c++test" lineHash="2003669405" unbViolId="42040cd8-ea1c-321c-aabf-2bf64076be80" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a975ed5c-094a-3e32-a153-f13c7a300366" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Parameter 'object' is not used" ln="110" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="110" sev="2" auth="username" locRef="4" rule="MISRA2008-0_1_11" lnHash="2003669405" rule.header="There shall be no unused parameters (named or unnamed) in nonvirtual functions" tool="c++test" lineHash="2003669405" unbViolId="1e57bd18-8280-3d0a-93a6-93630352e1bf" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae5a010c-55ce-3c5c-951d-48812c41a57c" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="111" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="111" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="402" rule.header="Tabs should be avoided" tool="c++test" lineHash="402" unbViolId="20a4af63-73fd-3e99-8c26-11be4f143dfb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="520a9860-1087-3871-877d-6f5a2f9eba59" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="111" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="111" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="111" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="402" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="402" unbViolId="0d0c360f-6ba6-398f-b3a7-4908dccbc23c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eea525a6-1661-3bb8-9ada-00897c4c28de" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="111" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="111" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="111" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="402" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="402" unbViolId="13bf7c63-1bab-3522-ae57-f10ff3a33d34" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c66a4854-ee6f-39da-aef7-b90e084a54ea" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="111" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="112" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="112" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="1506270258" rule.header="Tabs should be avoided" tool="c++test" lineHash="1506270258" unbViolId="ce0877e8-9084-35c0-95e1-8d6e81397508" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d37cc4c2-96a1-335b-9762-55312bf56b46" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="112" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="112" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="112" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="1506270258" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1506270258" unbViolId="c0bb5fa3-e3f3-3456-b2b2-69869bdb31df" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a615c138-78d5-3354-aa56-ed74bb97a5de" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="112" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="112" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="112" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="1506270258" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1506270258" unbViolId="36b888b7-7a2e-359e-8ef6-3b9bb835a058" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f87c191c-048d-30fa-925d-bf7e67a3f996" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="112" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="112" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="112" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="1506270258" rule.header="Tabs should be avoided" tool="c++test" lineHash="1506270258" unbViolId="16b8ff3a-11bf-3f2c-ba29-e4c5d2386094" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d02a05c4-f001-35ca-b7ae-ac79f3ffba8f" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="112" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="112" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="112" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="1506270258" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1506270258" unbViolId="0f0f2aba-af2f-3abd-a4cc-896de59e99f5" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b025d3d9-140c-36f5-af3e-5f52f3c9eef3" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="112" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="112" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="112" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="1506270258" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1506270258" unbViolId="c6e6d0ae-d907-3334-8c1a-3a67ea27fb8c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a403362-6e89-3b2f-bdf5-0a431afb72f9" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="112" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="113" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="113" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="404" rule.header="Tabs should be avoided" tool="c++test" lineHash="404" unbViolId="288d53d2-685e-32fa-9e7f-be39058f4a1a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ee1c656-7825-3304-b5dc-d01fcef7b00c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="113" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="113" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="113" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="108dfe52-9850-36b0-a63a-0b12a05e6d1a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="288d5eec-d641-3790-85bc-c9b54d9c3fb2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="113" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="113" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="113" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="9180cc5e-9cb8-3e43-8929-08ba8cc98939" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07543095-f63b-3423-aa7e-3127cdb12dd3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="113" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="115" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="115" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1747693045" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1747693045" unbViolId="0572f432-2bd9-3e31-8bd2-e462fdc67844" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40ff90cd-3242-38ab-beb5-f199378992c4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="115" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="115" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1747693045" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1747693045" unbViolId="58d186e2-2f0e-36bf-879e-dc96c8eab135" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5579a28-bf4f-32ff-b5c3-057b55607689" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="115" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="115" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1747693045" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1747693045" unbViolId="5087c66f-dc55-3741-912b-b6ad36c74b63" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26dc1da2-d0a6-302b-bfae-d58132d7106a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The 'Render_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="115" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="115" sev="3" auth="username" locRef="4" rule="COMMENT-14" lnHash="-1747693045" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1747693045" unbViolId="29ea161e-f523-3218-b8e2-411936b37de5" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0ee2f22-d2ec-3b7b-8a12-f259d172713c" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The 'Render_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="115" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="115" sev="2" auth="username" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="-1747693045" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1747693045" unbViolId="5b131064-e1f0-37db-8c52-916d0424a6e9" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91939269-6800-311c-9b30-5f7980170985" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The 'Render_Thread' function should be preceded by a comment that contains the '@return' tag" ln="115" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="115" sev="3" auth="username" locRef="4" rule="COMMENT-14_b" lnHash="-1747693045" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1747693045" unbViolId="7d3f5314-29cd-326c-8040-c12c4defb027" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="220b4ba6-dcab-38c2-952f-cc0cc9f1d770" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The 'Render_Thread' function should be preceded by a comment that contains the '@return' tag" ln="115" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="115" sev="2" auth="username" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="-1747693045" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1747693045" unbViolId="4b945c03-cc1c-3aef-a765-0e3fd2cce790" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cda19874-8ab4-327c-a19c-49464d9df0b8" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' has Cyclomatic Complexity value: 3" ln="115" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="115" sev="5" auth="username" locRef="4" rule="METRICS-29" lnHash="-1747693045" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-1747693045" unbViolId="3a9d90c6-010f-3a2f-9e93-c0f2f0790b27" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2980d8d9-b230-36c2-b335-0df9d3b3ec60" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' has Essential Complexity value: 1" ln="115" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="115" sev="5" auth="username" locRef="4" rule="METRICS-33" lnHash="-1747693045" rule.header="Report Essential Complexity" tool="c++test" lineHash="-1747693045" unbViolId="1e891951-25f5-341c-a578-d7b2843b71d4" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c60895d6-730e-3491-b8f9-d9f55ad9f52a" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The incorrect global function name Render_Thread was found" ln="115" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="115" sev="3" auth="username" locRef="4" rule="NAMING-34" lnHash="-1747693045" rule.header="Global function names should start with lowercase" tool="c++test" lineHash="-1747693045" unbViolId="5a7439fa-b814-397a-8ab5-efd81206ff9d" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d2896c9-769f-3178-bc6f-018b28f93e93" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The definition of the 'Render_Thread' function is not preceded by a comment" ln="115" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="115" sev="3" auth="username" locRef="4" rule="COMMENT-04" lnHash="-1747693045" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1747693045" unbViolId="4f7bae34-7604-35fc-9499-cb1f1d45babe" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36aaac2c-fc84-3aee-97e3-c71ec0f6948e" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The definition of the 'Render_Thread' function is not preceded by a comment" ln="115" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="115" sev="4" auth="username" locRef="4" rule="JSF-134" lnHash="-1747693045" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1747693045" unbViolId="605cedf7-1f36-3076-8622-732970cddd28" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="14c431a0-ab8f-34f5-b910-5c2ca7e3b156" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="115" sev="4" auth="username" locRef="4" rule="OWASP2019-API9-e" lnHash="-1747693045" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1747693045" unbViolId="97ca9946-6704-3818-af29-88282c611ad4" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b40bce72-d7fe-3621-8da3-77d85fe0f987" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="115" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="-1747693045" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1747693045" unbViolId="3b74e04a-d633-38bb-bedd-68a81aee8e3d" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74e955c5-b2b9-3d57-b6d5-ae31f69aaf77" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="115" sev="4" auth="username" locRef="4" rule="JSF-137" lnHash="-1747693045" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-1747693045" unbViolId="61766c55-68fc-3512-a4e5-5473876f82e0" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55db6699-e372-329d-b2d3-4c1c779ac4dd" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="115" sev="4" auth="username" locRef="4" rule="MISRA-023" lnHash="-1747693045" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1747693045" unbViolId="621973de-03ca-3527-a2ce-f27fe420b55b" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27329bca-dfe0-3aeb-ad43-a9192834c579" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="115" sev="2" auth="username" locRef="4" rule="MISRA2008-3_3_1" lnHash="-1747693045" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1747693045" unbViolId="d1e8f360-82d8-3231-9b1e-f6088fd43fe2" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="25e0205f-dc9b-3d36-800b-d3c42e82ec05" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="115" sev="3" auth="username" locRef="4" rule="CERT_C-DCL15-a" lnHash="-1747693045" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1747693045" unbViolId="690ce620-79fd-3257-a26b-9b15d6be1410" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9745a947-aca2-39ee-9e97-bf4ee862eab7" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="115" sev="4" auth="username" locRef="4" rule="MISRA2004-8_10" lnHash="-1747693045" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1747693045" unbViolId="7b062d64-c4af-398b-bb10-4075c8289fbf" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="970571a6-b6c9-3f6b-8b8f-4eb075c2be94" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The name 'Render_Thread' should be composed only of lowercase letters" ln="115" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="115" sev="3" auth="username" locRef="4" rule="JSF-051" lnHash="-1747693045" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1747693045" unbViolId="173cf6d1-be9e-3952-90ab-8c9b8d0398f6" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b13bb662-1c42-3af9-b6cf-805acd92a0be" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The name 'Render_Thread' should be composed only of lowercase letters" ln="115" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="115" sev="3" auth="username" locRef="4" rule="NAMING-44" lnHash="-1747693045" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1747693045" unbViolId="a5754346-5078-3234-b4ac-dfa35b4630b3" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d845cd7-9ed6-3d35-b357-feacad10b754" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared" ln="115" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="115" sev="3" auth="username" locRef="4" rule="CODSTA-94" lnHash="-1747693045" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1747693045" unbViolId="04a16087-016c-381e-8f34-9981f7ccb564" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62f4cb30-c7b0-3049-ace3-7e2a1d5f97d1" locEndPos="40" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The parameter of pointer type is declared" ln="115" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="115" sev="3" auth="username" locRef="4" rule="CODSTA-95" lnHash="-1747693045" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1747693045" unbViolId="22aa6d8a-37f2-32de-a449-03ed47ceac14" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed82e37c-eb2d-3447-806a-52a1c1e52179" locEndPos="40" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="116" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="116" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="402" rule.header="Tabs should be avoided" tool="c++test" lineHash="402" unbViolId="3ee12136-f793-3c06-a76a-dd0abddda369" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8bbba7d6-5bf3-3fb2-b13d-c5628aa9af29" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="116" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="116" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="116" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="402" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="402" unbViolId="3469973e-a357-3ce7-b369-acf3d9cae785" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7666f735-90ca-3b49-b43f-d946d5e0f424" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="116" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="116" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="116" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="402" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="402" unbViolId="e8279ea7-47a4-3f69-8efe-ff32d969ff56" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4fec3173-edf7-3887-8bc1-81ffcaa63f78" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="116" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="116" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="116" sev="3" auth="username" locRef="4" rule="METRICS-19" lnHash="402" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="402" unbViolId="f2024e9a-c8a5-3f95-b384-c2d95d3c633d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b776e5e-0ba3-3e10-a787-52855b103ade" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="116" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="117" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="117" sev="3" auth="username" locRef="4" rule="JSF-061" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1229452372" unbViolId="86bf9d2e-2631-3c2c-b36a-0efc72d49b31" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8562dc35-0e13-34db-90d5-4924938e4525" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="117" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="117" sev="3" auth="username" locRef="4" rule="FORMAT-42" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1229452372" unbViolId="c8a8463a-0fa1-3743-9cb1-04ed1b6e61c7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="abe98d7b-d755-3954-9987-ce7642afe4d9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="117" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="117" sev="3" auth="username" locRef="4" rule="JSF-060_a" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1229452372" unbViolId="428e0c4d-480e-343c-98a3-8065e028cb50" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b93fcab8-37ed-3598-915d-d80a51c122bb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="117" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="117" sev="3" auth="username" locRef="4" rule="FORMAT-43" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1229452372" unbViolId="c527a19a-a21a-3830-9569-810f9304132b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c086a3c8-8709-368b-8d3c-d6d491681bfd" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="117" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="117" sev="3" auth="username" locRef="4" rule="JSF-060_b" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1229452372" unbViolId="e57fa31a-c0e9-3b93-aa8d-609baba10977" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af9adee6-39ea-3b6b-b088-21b7428f43f5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="117" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="117" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1229452372" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1229452372" unbViolId="fbe0af80-7d23-339d-8df0-812bd795bb30" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3eb2f8a9-f83b-370c-b502-52fa71b5b27c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="117" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="117" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="aaec8fd0-7169-3bbb-b527-b5db765d242e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2aa3f7b5-f617-34ae-96e2-92b7e6df79bc" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="117" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="117" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="4f4c0b7e-da2d-3882-9dc9-a5b65031c006" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="19c7cfa6-5de5-3d03-bd47-80e6a50d2b80" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="117" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="117" sev="3" auth="username" locRef="4" rule="FORMAT-02" lnHash="-1229452372" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-1229452372" unbViolId="73e558f9-a039-3d19-a200-47a331ed5caa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c859c3db-fc3c-314d-ba3a-563826edc67a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="117" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="117" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1229452372" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1229452372" unbViolId="0bc32794-b6f2-3190-949d-cbc236d91b61" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="efebede1-7705-3ff1-a2cf-4e5778b7055a" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="117" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="117" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="8bf5c2cd-e3cf-3557-8381-ed6d25aef802" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="612b5a57-6377-3ae8-986d-9ae5cc830a6c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="117" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="117" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="7b31597b-d21b-379e-a389-967b536c6311" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc5b14b9-2847-3d98-8ac3-bda365cb951d" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="A loop does not have a fixed upper nor lower bound" ln="117" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="117" sev="3" auth="username" locRef="4" rule="CODSTA-83" lnHash="-1229452372" rule.header="All loops must have a fixed upper or lower bound" tool="c++test" lineHash="-1229452372" unbViolId="8166dd42-03dd-3f5a-9121-1be0c89bd518" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e00d8f9f-cb2e-3b82-b661-b8a25045b719" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="117" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="117" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-67" lnHash="-1229452372" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-1229452372" unbViolId="9d5a096a-5dbf-3f62-9636-0ac63c76bada" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1e8bf60-f857-3202-918f-fa454fb201fb" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="117" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="117" sev="2" auth="username" locRef="4" rule="AUTOSAR-M5_3_1-a" lnHash="-1229452372" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-1229452372" unbViolId="4361a7c5-5b65-3356-813b-1c09b9902787" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65f6f3ae-90f0-3f66-8baa-e84c7f538382" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="117" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="117" sev="2" auth="username" locRef="4" rule="MISRA2008-5_3_1" lnHash="-1229452372" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-1229452372" unbViolId="ba0b2f82-3354-345a-a437-d4bed9a18cc5" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b15a5e8-1026-39a5-a14c-45aee3d473d0" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="In 'Render_Thread' function use positive logic rather than negative logic whenever possible" ln="117" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="117" sev="5" auth="username" locRef="4" rule="CODSTA-46" lnHash="-1229452372" rule.header="Use positive logic rather than negative logic whenever practical" tool="c++test" lineHash="-1229452372" unbViolId="efe271b7-1104-32f7-a8ab-664e35e6a07a" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db6c9bfb-b349-37a4-be5e-2bc1b284ccee" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="The operand of logical operator '!' is not 'effectively Boolean'" ln="117" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="117" sev="3" auth="username" locRef="4" rule="MISRA2004-12_6_a" lnHash="-1229452372" rule.header="The operands of logical operators (&amp;&amp;, || and !) should be effectively Boolean" tool="c++test" lineHash="-1229452372" unbViolId="858b594d-9aca-3f94-b5dd-47ba23252922" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ab51bf1-d577-302e-8c3c-ca8ad16b949a" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="118" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-2061438629" rule.header="Tabs should be avoided" tool="c++test" lineHash="-2061438629" unbViolId="d3032c7c-a8ae-3ab0-9f13-c99afdfa060e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8ee3817-b020-3bb3-b0f1-f530b356e8f7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="118" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-2061438629" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2061438629" unbViolId="734f143f-23af-3dad-9fb6-66a51b72a31a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4376ee6e-67e3-30d5-bda8-31ef99b84784" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="118" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-2061438629" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2061438629" unbViolId="8f18b748-c2ed-3a94-aa87-624ce73182d8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d7d0672c-c29e-38a2-a691-b41c0fe8c8d8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="118" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-2061438629" rule.header="Tabs should be avoided" tool="c++test" lineHash="-2061438629" unbViolId="0fbca3a2-4c6f-3c67-98ff-a471356b2383" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ba521db-fd36-3be9-8b47-caaec816c766" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="118" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-2061438629" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2061438629" unbViolId="00ed86ac-080a-3625-be45-1aa8b92428d5" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f04d06c-5aa3-35e8-81fb-019ade809030" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="118" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-2061438629" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2061438629" unbViolId="5de00948-b729-3e26-9257-d983d7ab351c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e21f24dd-0acb-33b7-91eb-6cd52b972939" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="118" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-2061438629" rule.header="Tabs should be avoided" tool="c++test" lineHash="-2061438629" unbViolId="47241b4b-726a-3110-8ed9-ad99f6110d90" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b1c62156-3e65-3952-a5b5-bdb2d2a497c5" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="118" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-2061438629" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2061438629" unbViolId="e072d3d7-8fd1-3a85-833f-954d068246c8" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a89d107-812e-32ec-ba74-dfbb754409e9" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="118" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-2061438629" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2061438629" unbViolId="f9859de5-ed82-3f2d-8d8f-9e11e6138364" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47aa1146-2e12-3950-b5b6-0a5797cf8de0" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="119" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1448027104" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1448027104" unbViolId="f27c77ca-4d2b-3e9b-96c3-f4cfdd883ee6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="57001196-21b5-39fe-a111-f001f63b73b7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="119" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="119" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1448027104" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1448027104" unbViolId="f393154d-4282-3d47-9627-e82eda4a3550" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f79b4f61-80e9-3e55-ac2c-ec57b9f412be" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="119" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="119" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1448027104" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1448027104" unbViolId="77b459c4-0553-3d0c-a5ce-76625d6d057d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a97ee7b-5df6-3a2f-a621-b2e435fcd7fe" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="119" goals="0," />
    <FlowViol msg="&quot;ring&quot; is used in two critical sections in context of single method, using one critical section will improve atomicity of operation" ln="119" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Usage of &quot;ring&quot; in second critical section" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="120" rule="BD-TRS-DIFCS" FirstElSrcRngStartPos="0" lnHash="-1448027104" ruleSCSCMsg="Usage of &quot;ring&quot; in first critical section" pkg="Render" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Variable should be used in context of single critical section" FirstElSrcRngStartln="119" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="317235658" lang="cpp" violId="94d15799-88ba-3bba-9bb2-720e49acae63" locEndPos="0" locEndLn="120" goals="0," locStartln="119" sev="2" locRef="4" tool="c++test" lineHash="-1448027104" unbViolId="20bef5ef-6387-3b9e-8a32-da291cf18ce0" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Variable used in critical section" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1229452372" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="117" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="117" srcRngEndLn="118" desc="while (!exitGame) {" ElType="." rngLn="117">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-2061438629" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="118" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="118" srcRngEndLn="119" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="118">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1448027104" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="119" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="119" srcRngEndLn="120" desc="ring.getPosition()" ElType=".C" rngLn="119">
          <Anns>
            <Ann msg="Usage of &quot;ring&quot; in first critical section" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1448027104" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="119" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="119" srcRngEndLn="120" desc="ring.getPosition().translate(*currentCameraVelocity);" ElType="." rngLn="119" />
        <ElDesc lineHash="-1016738356" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="120" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="120" srcRngEndLn="121" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="120">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="122" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="122" srcRngEndLn="123" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="122">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming false)" kind="condEval" />
            <Ann msg="Not entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1234365944" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="SLEEP(STEP);" ElType="." rngLn="128" />
        <ElDesc lineHash="-1229452372" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="117" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="117" srcRngEndLn="118" desc="while (!exitGame) {" ElType="." rngLn="117">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-2061438629" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="118" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="118" srcRngEndLn="119" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="118">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1448027104" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="119" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="119" srcRngEndLn="120" desc="ring.getPosition()" ElType=".P" rngLn="119">
          <Anns>
            <Ann msg="Usage of &quot;ring&quot; in second critical section" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="119" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1448027104" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1448027104" unbViolId="73f53e2c-e21e-337b-976f-54ac9e8dc156" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b096605f-4c69-369b-abf3-26deb1257c49" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="119" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="119" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1448027104" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1448027104" unbViolId="8009f6db-5ede-3356-b8c0-5719a2cf77e3" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b2817c4-7599-3122-8ad0-52d8ba1087eb" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="119" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="119" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1448027104" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1448027104" unbViolId="f83a75bb-61db-350a-8573-890d65cd8b87" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd54be47-5474-3b84-af5f-a0226803df8b" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="119" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="119" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1448027104" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1448027104" unbViolId="56887cdc-ef60-3883-9d4d-59538132a8c1" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7eb4cd33-4564-3514-bff8-aea53cc4bbd4" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="119" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="119" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1448027104" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1448027104" unbViolId="66c54ef2-4254-3025-876a-e004f9802830" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f006a86-8fb5-33aa-941c-4a144a800f88" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="119" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="119" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1448027104" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1448027104" unbViolId="7d668311-bd0f-3cd0-89a5-ec1944c241df" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6fdcb3d-a7ee-3235-9c0c-9bd5a490ceef" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="119" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="120" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1016738356" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1016738356" unbViolId="29e4980f-308c-3fdb-990a-1160adfdb37b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d3a9d55-8db7-3814-977e-7f3deec944c5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="120" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1016738356" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1016738356" unbViolId="8450001c-8e20-31c9-812a-7ca05e00d95b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62707658-6e3c-37c4-bf81-6de850d2a55b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="120" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1016738356" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1016738356" unbViolId="3cc07c31-72b9-3b40-ad34-3d8f6fcfe07b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38a50e4b-8816-3ffb-bde0-c9dc29debda9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="120" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1016738356" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1016738356" unbViolId="32fa53c6-95c3-3591-8aa1-f5aff9a130f3" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa71d306-2ae6-3620-aeee-de6ac7e79a24" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="120" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1016738356" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1016738356" unbViolId="4f322268-f12b-346c-a064-f36cf85c56cb" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dca165e0-7206-3f34-8430-9a9a8d65d84a" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="120" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1016738356" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1016738356" unbViolId="d158456d-0704-31d3-870e-3026cf53fbc0" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e2f7e03-dab0-3ab7-8083-c990a93ca454" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="120" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1016738356" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1016738356" unbViolId="576f2a08-a8d4-30a5-8ea3-9f35a01d9373" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97465ab8-d46a-36ae-af43-4976c8bc1d43" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="120" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1016738356" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1016738356" unbViolId="e211383c-d066-34a6-a2cf-900157f2a1be" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="72efe7cf-294b-36a5-bd76-12af0ac0418e" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="120" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1016738356" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1016738356" unbViolId="eb24f275-d348-310f-af31-165dd35ed7a9" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ac9154a-f365-3ab8-879c-223cb465dc77" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="3" auth="username" locRef="4" rule="JSF-061" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1544355218" unbViolId="63cd8b33-9135-3b53-91a6-6d469ec420f6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff63b3a8-d121-3bfb-80af-b977c231d2ed" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="3" auth="username" locRef="4" rule="FORMAT-42" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1544355218" unbViolId="3ba6bd95-c4a6-358a-942b-f36696130b09" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f36a0581-c581-32bf-b7d0-36281aa22d58" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="3" auth="username" locRef="4" rule="JSF-060_a" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1544355218" unbViolId="851a0328-325f-32fb-b8c4-41eb4aa59857" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c009b50-b998-32bc-b810-15ff88941b59" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="3" auth="username" locRef="4" rule="FORMAT-43" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="1544355218" unbViolId="6203939e-cfb2-3d29-8c66-676a1880c464" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f4b4e7a-77ea-3b32-b7a6-c4e258a19e54" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="3" auth="username" locRef="4" rule="JSF-060_b" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="1544355218" unbViolId="c70f1944-d88a-3a15-90e2-08cb9523765a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e2d7697-4bee-3f9e-8a59-635cd66839a0" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="1544355218" rule.header="Tabs should be avoided" tool="c++test" lineHash="1544355218" unbViolId="ee5daef5-a6a9-37b6-9405-d2a99ff64e18" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="821486fd-eb72-39ec-9115-beca9465b64f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="d9227c45-b561-30a0-bf56-ed23659d0617" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7871075d-1be0-37cb-bf02-81517094c944" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="484e368d-f9bf-3bfb-8a67-65c2e7bc727d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd44cdfc-5a9a-329c-89f7-53f75d339ced" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="3" auth="username" locRef="4" rule="FORMAT-02" lnHash="1544355218" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="1544355218" unbViolId="ed345401-9a97-3201-b9a1-c9b32c7d3c05" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f2f32ff1-206a-36a1-a54d-10fc88001973" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="1544355218" rule.header="Tabs should be avoided" tool="c++test" lineHash="1544355218" unbViolId="cbd2d5af-be37-39bc-8f39-b17d8876f0da" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1b836725-d681-3b35-b740-2c547407b7da" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="58b3e43d-6cbc-3b88-8606-efa49683384f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b76787da-42d3-309d-ba8b-55a4d7241044" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="c4693d2e-f1ff-319b-ac71-f0df96ce9827" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9fab8a9a-3ca0-3ed2-ab60-bc31351eae03" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="1544355218" rule.header="Tabs should be avoided" tool="c++test" lineHash="1544355218" unbViolId="246b5c1d-acab-3f5f-bd80-eed6d454a34f" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e42eb27-d2ba-31a4-8569-ddae8d07b6aa" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="582e0a47-37be-3b56-90e2-36cd29d8dbf9" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83dcc71a-70c9-306c-90c1-ce6f77d53172" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="ab1ba829-0c6d-369c-8623-68e0365755a4" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52131e9b-46d8-3703-ae45-b55e7e816e32" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="A loop does not have a fixed upper nor lower bound" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="3" auth="username" locRef="4" rule="CODSTA-83" lnHash="1544355218" rule.header="All loops must have a fixed upper or lower bound" tool="c++test" lineHash="1544355218" unbViolId="d024bb69-c1a3-3f26-9d57-45c6e5e2d8cb" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6907b6ad-3725-3c28-b8bd-15695b65578e" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Between conditional statement 'for' and its opening parenthesis '(' should be exactly one space" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="3" auth="username" locRef="4" rule="FORMAT-12" lnHash="1544355218" rule.header="There shall be a single ASCII space character between a conditional statement keyword and its opening parenthesis" tool="c++test" lineHash="1544355218" unbViolId="33a3cb63-003a-3f1d-83b8-7e34e8b0f942" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="000fd3dd-e796-3244-a99c-416da224bf07" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="3" auth="username" locRef="4" rule="CODSTA-223" lnHash="1544355218" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1544355218" unbViolId="77a8fb82-c6f6-32f7-bb07-08f3fe8717c2" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4fdc0e26-1e7d-3066-9541-625d3abf69e5" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="1544355218" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1544355218" unbViolId="5de53979-7f5c-3212-87fc-fa407b1faa94" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9cd79417-7477-39e0-9b33-2cabf1b20c3f" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="3" auth="username" locRef="4" rule="HICPP-7_1_6-b" lnHash="1544355218" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="1544355218" unbViolId="caba9e8d-95dc-307e-bbf1-91e1df359773" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37098b85-907b-302a-a792-d8eda4f40228" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="4" auth="username" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="705681c0-9421-3d8a-b371-40cccb0bac76" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="93fd35b5-7552-311a-aff7-e6e615f76c5a" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="3" auth="username" locRef="4" rule="MISRA2004-6_3_b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="07d4b7e7-de77-3f0b-9287-b2284a28526b" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8abe530-0885-3155-a257-df36141958bf" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="2" auth="username" locRef="4" rule="JSF-209_b" lnHash="1544355218" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="8ffaa73b-213b-387d-bc1d-4becb3132b42" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23b7c4ab-4c8b-3c4b-ace5-13a9931fdc55" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="4" auth="username" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="fe4e43c7-71b6-37e8-b3e3-fdb671a40db7" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a24f9cc-36ed-343a-a839-365961c2ddc1" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="3" auth="username" locRef="4" rule="HICPP-3_5_1-b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="8007d162-6056-358d-a03f-613732cc7f8c" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb3bcb50-bd1f-3a38-bdb0-8bf6da0235aa" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="4" auth="username" locRef="4" rule="MISRA2008-3_9_2" lnHash="1544355218" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1544355218" unbViolId="a3e76d4a-d16c-34b2-8ee2-1c1af7ff36c7" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8a73988-8805-33a2-81d1-330d59c4db01" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="3" auth="username" locRef="4" rule="MISRA-013" lnHash="1544355218" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1544355218" unbViolId="6330c5cb-ae47-30a6-b648-5c057a6b8262" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb9993fe-0921-3ec5-bb56-ae54d1b13095" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="'i' shall be declared as unsigned int or signed int" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="3" auth="username" locRef="4" rule="PORT-13" lnHash="1544355218" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="1544355218" unbViolId="7cf40c06-2b37-372f-b7dc-9d262039f2ce" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36e65a3e-3fae-3315-8da1-71e8c8125a81" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Variable &quot;i&quot; declaration was found in control statement" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="3" auth="username" locRef="4" rule="OPT-10" lnHash="1544355218" rule.header="Do not declare variables in &quot;if&quot;, &quot;for&quot;, &quot;while&quot;, and &quot;do while&quot; statement" tool="c++test" lineHash="1544355218" unbViolId="f5b9edc3-6f8c-3933-ba25-c53d5a55be37" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d0191f5-3e34-3d9f-b330-d7d5e73e7b00" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The 'i' variable should be commented" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="3" auth="username" locRef="4" rule="JSF-132_a" lnHash="1544355218" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="1544355218" unbViolId="c23f4679-5bd6-3a41-9686-7a01f74144f8" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a25d9f7c-a8ef-3889-8cee-c2788f7d2053" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The 'i' variable should be commented" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="3" auth="username" locRef="4" rule="COMMENT-05" lnHash="1544355218" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="1544355218" unbViolId="19589ac4-80f7-352c-b924-d3c2cdfe85cb" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="39c308b2-73bb-35e1-8378-5f766c7a7905" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="2" auth="username" locRef="4" rule="AUTOSAR-A8_5_2-a" lnHash="1544355218" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1544355218" unbViolId="5dc09bb6-04ad-306e-b44b-2c7e2c833faf" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="160716b3-8c4c-3d9e-98f2-b87215f4fe8d" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="3" auth="username" locRef="4" rule="CODSTA-MCPP-38" lnHash="1544355218" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1544355218" unbViolId="6a2d9a06-a156-3692-90c8-30cf2de43765" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="043d5699-ff38-3cc2-9147-790a9aad50fa" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Postfix operator applied to variable 'i'; prefer prefix type" ln="122" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="122" sev="3" auth="username" locRef="4" rule="OPT-04" lnHash="1544355218" rule.header="Prefer canonical form of ++ and --. Prefer calling the prefix forms" tool="c++test" lineHash="1544355218" unbViolId="d98b11f2-f807-32c0-8f9d-823aea83607d" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07b782d3-6f70-3b32-aada-c6e1aa9cb0cf" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="123" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="224827bd-914f-352f-b7fb-065464236b5e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="312d8731-3b0d-3523-96c1-5d64e29b1aa5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="123" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="863a43af-384a-39ad-b873-811b15f1c9ef" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d00bdd6b-f963-3c61-9c90-877359193cae" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="123" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="3c794d52-8076-3fee-b940-731c5daea3ec" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98262494-ea60-3199-bdaa-fd4eb60125b0" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="123" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="eba20a16-4b31-3acd-9609-a5fd35488626" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4b56e52-9cfd-3bcd-8d84-5c1bd16a0a9f" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="123" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="57078684-faef-3eb5-99e3-991cf1042adb" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9aefb34-9cf3-3862-b67c-3dc821dbbaae" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="123" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="763209f9-2836-314e-89d2-28e8b82b338e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="043e9978-38df-3822-a349-21dd8c63a11e" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="123" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="8adca197-7b2e-3373-befb-42a1a4052da4" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f711de36-1cd4-300a-a7b8-009405697a75" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="123" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="3c00fa5e-e247-37ca-b4d5-151699143c86" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da4fd154-a4a8-3bc3-a44b-cf0960bf2365" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="123" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="e1227957-3757-34f4-b9eb-0bc5f15886e2" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="383a11f5-52e9-37de-9a66-fce08bf29451" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="123" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="dc425274-e3d5-3a32-a7de-8f670d6f5b47" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b55b3751-e464-3b23-8bc9-6fc1bd34f29b" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="123" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="0b311a3c-28b0-3d71-9feb-ca4c977a766f" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="016d047b-b0e2-3392-97f5-212e38a92b50" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="123" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="66e1e5a7-58dc-3ce5-93dc-c441556d9a74" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9fd823b4-31fe-3604-92dd-b408c0e53666" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="124" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-864998869" rule.header="Tabs should be avoided" tool="c++test" lineHash="-864998869" unbViolId="4ea7350f-82c7-3f3b-9a57-51e730a9ac87" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2667d1ac-d399-396a-92bb-de4a73a8fd67" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="124" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="0fbcd51c-b216-3a7d-a3f5-85fcf046ce9c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a158544a-1719-38f9-b8cf-8a043ddfef62" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="124" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="54a3130a-0079-3972-bc1f-6201eeeed569" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e79bdec-cca6-3337-b39c-fa51fef7937c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <FlowViol msg="&quot;currentCameraVelocity&quot; is used in two critical sections in context of single method, using one critical section will improve atomicity of operation" ln="124" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Usage of &quot;currentCameraVelocity&quot; in second critical section" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="120" rule="BD-TRS-DIFCS" FirstElSrcRngStartPos="0" lnHash="-864998869" ruleSCSCMsg="Usage of &quot;currentCameraVelocity&quot; in first critical section" pkg="Render" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Variable should be used in context of single critical section" FirstElSrcRngStartln="119" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1260626131" lang="cpp" violId="2edc94f0-f157-359b-879b-e3aed51f1624" locEndPos="0" locEndLn="125" goals="0," locStartln="124" sev="2" locRef="4" tool="c++test" lineHash="-864998869" unbViolId="6c308f95-2fd7-3d2e-b693-b71ccb2bd812" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Variable used in critical section" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1229452372" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="117" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="117" srcRngEndLn="118" desc="while (!exitGame) {" ElType="." rngLn="117">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-2061438629" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="118" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="118" srcRngEndLn="119" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="118">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1448027104" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="119" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="119" srcRngEndLn="120" desc="ring.getPosition().translate(*currentCameraVelocity);" ElType=".C" rngLn="119">
          <Anns>
            <Ann msg="Usage of &quot;currentCameraVelocity&quot; in first critical section" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1016738356" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="120" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="120" srcRngEndLn="121" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="120">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="122" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="122" srcRngEndLn="123" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="122">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="123" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="123" srcRngEndLn="124" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="123">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-864998869" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="124" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="124" srcRngEndLn="125" desc="participants[i]->getPosition().translate(*currentCameraVelocity);" ElType=".P" rngLn="124">
          <Anns>
            <Ann msg="Usage of &quot;currentCameraVelocity&quot; in second critical section" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;participants&quot; is used in two critical sections in context of single method, using one critical section will improve atomicity of operation" ln="124" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Usage of &quot;participants&quot; in second critical section" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="125" rule="BD-TRS-DIFCS" FirstElSrcRngStartPos="0" lnHash="-864998869" ruleSCSCMsg="Usage of &quot;participants&quot; in first critical section" pkg="Render" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Variable should be used in context of single critical section" FirstElSrcRngStartln="124" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1666431762" lang="cpp" violId="f4683dbe-be26-386a-a4ed-92d4ef875fe7" locEndPos="0" locEndLn="125" goals="0," locStartln="124" sev="2" locRef="4" tool="c++test" lineHash="-864998869" unbViolId="393343d2-9c22-3270-a201-992126afe0e0" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Variable used in critical section" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1229452372" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="117" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="117" srcRngEndLn="118" desc="while (!exitGame) {" ElType="." rngLn="117">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-2061438629" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="118" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="118" srcRngEndLn="119" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="118">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1448027104" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="119" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="119" srcRngEndLn="120" desc="ring.getPosition().translate(*currentCameraVelocity);" ElType="." rngLn="119" />
        <ElDesc lineHash="-1016738356" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="120" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="120" srcRngEndLn="121" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="120">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="122" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="122" srcRngEndLn="123" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="122">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="123" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="123" srcRngEndLn="124" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="123">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-864998869" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="124" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="124" srcRngEndLn="125" desc="participants[i]->getPosition()" ElType=".C" rngLn="124">
          <Anns>
            <Ann msg="Usage of &quot;participants&quot; in first critical section" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-864998869" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="124" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="124" srcRngEndLn="125" desc="participants[i]->getPosition().translate(*currentCameraVelocity);" ElType="." rngLn="124" />
        <ElDesc lineHash="793595747" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="125" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="125" srcRngEndLn="126" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="125">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-596932643" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="126" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="126" srcRngEndLn="127" desc="draw(participants[i]);" ElType="!" rngLn="126" />
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="122" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="122" srcRngEndLn="123" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="122">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="123" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="123" srcRngEndLn="124" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="123">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-864998869" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="124" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="124" srcRngEndLn="125" desc="participants[i]->getPosition()" ElType=".P" rngLn="124">
          <Anns>
            <Ann msg="Usage of &quot;participants&quot; in second critical section" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="124" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-864998869" rule.header="Tabs should be avoided" tool="c++test" lineHash="-864998869" unbViolId="814b4579-2eb4-3bce-8a62-b951afc58158" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4205082a-02eb-30c3-9d73-f40cd74738c8" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="124" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="8aa47b18-72dd-34ed-87c3-189dd83737bf" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c827ca75-21fe-3de1-8812-0f4ba1e6e85a" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="124" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="3f5cd2f5-090d-33a6-ae13-601659e84f0e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e4fb567-1f02-3ff2-90e3-7d5f209275f6" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="124" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-864998869" rule.header="Tabs should be avoided" tool="c++test" lineHash="-864998869" unbViolId="e1048ee2-816f-30ae-9a64-622f6ddb3044" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6761c614-4742-3782-bab9-6baab32ff40b" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="124" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="6a33090e-8d32-3ecb-8d6f-8d6377bcae38" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cfcaa00e-814d-30b3-91cb-a38912d9c8af" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="124" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="31b2739f-645c-30e0-a966-0735bb477db2" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c118b51e-631b-3712-95d5-238afc83581a" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="124" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-864998869" rule.header="Tabs should be avoided" tool="c++test" lineHash="-864998869" unbViolId="a68e2831-99c1-3381-9fba-df8d2efc266c" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="01e45082-c270-3aa6-bd87-bd04a13d9c30" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="124" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="cd92b232-071c-38be-8c2a-1f061a412ddd" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d598773-7365-392c-a215-c8f6e7d1ea14" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="124" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="d6637eca-cf2a-3490-8496-e9b48b1fdf1a" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e2fa4b2-27d1-379b-8cb8-c9d6fcb9e82a" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="125" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="d9377ee0-8290-31fc-8c2b-ca5f898345b4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="56ef17e2-1a8f-340d-9087-fb6e93ecca7c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="125" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="f3606e9f-5d8d-30ef-b09e-526111b4a850" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36f00555-f9fb-3be5-9953-c6d8917459f5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="125" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="1cd0957d-e3d9-3b51-9bb1-04522025aee9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff5c242c-7e8c-3b17-8a85-4ac704e15fd4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="125" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="1558033a-e3f5-3a36-96da-5f543e1fb4fe" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c403ef48-ae60-3b36-a013-b3b2e9072435" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="125" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="a638422b-f604-3e4c-b275-14f57b4f4ad2" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ee019f7-2e5d-3e71-9c29-bf85856b80a2" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="125" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="54b44e6c-5596-396f-ace2-42f55d0797ff" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68bf141f-4e5f-366a-b3ed-347e0e1de80f" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="125" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="f7c1b357-8aec-3fab-8583-cb9e1f54bde0" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a372c34-159c-3449-ba2c-6fb756ca66af" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="125" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="ee3af2fb-6303-3ab0-a7ec-e0390f47aace" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5fb65561-f9f2-35de-994f-839041bd0654" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="125" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="f614dd5f-a393-395e-863b-eeeb11bdd35d" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bafd7965-4079-3940-9a6e-6768b660e0a2" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="125" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="6457f723-2a54-32fc-824f-33fb63130751" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be67edc6-6cb6-3927-9b11-e0c6c1f3dbd1" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="125" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="b45d760f-aeb3-3911-8af7-bd9cba9bee4f" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f943020e-b526-3a64-bc3e-51e9753de363" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="125" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="a5cf7610-6ee3-3fc9-8a8e-9df3d98cb5f3" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="241186c7-ff1f-373c-ba04-592286703268" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="126" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-596932643" rule.header="Tabs should be avoided" tool="c++test" lineHash="-596932643" unbViolId="316d14c2-684c-3350-89a6-1d89e67fe2bc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dde4d886-b290-307b-8000-ce57582b7098" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="126" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="a1045dc6-644f-36e1-b063-22c2ebc3d5d3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d468076-3793-3d29-a031-9d6ec56f2fdc" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="126" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="34f9cdf8-4055-348d-b151-99cb9f3a31ca" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f2fc04d7-f269-3849-8ab7-81ce2e1b9c25" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="126" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-596932643" rule.header="Tabs should be avoided" tool="c++test" lineHash="-596932643" unbViolId="d9d0850d-56ae-34c7-8107-6ea0ff73494f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc5d2f1b-eeb0-33ee-b7ed-d57488c4787f" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="126" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="9632fbf6-bf3a-3fcf-8e42-e0d9c8d2396f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be0ebac4-2565-32f7-b9f7-d88b937facfc" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="126" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="4a308751-1321-373a-bcfb-0c04bdbbc4d2" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a16b507-464c-3703-8ebb-0c8d62691424" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="126" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-596932643" rule.header="Tabs should be avoided" tool="c++test" lineHash="-596932643" unbViolId="f95a69e8-cd4a-3fd4-a7d4-d86bf89b4ade" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ff3688d-6fb1-3864-98fe-bc5221b89fa6" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="126" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="5067ecc4-ce06-3431-96ac-2c0b8d922420" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f8c1462-e9b0-31b0-924d-93e751b7644b" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="126" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="337ed6c9-7480-363b-83d8-d65867baebdd" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="abce9bc7-a7a5-364f-9d2c-31805c9a179f" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="126" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-596932643" rule.header="Tabs should be avoided" tool="c++test" lineHash="-596932643" unbViolId="b9aba2c3-752a-3722-b050-9ebb2ac178e3" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21cd4f37-2c76-3c7c-8688-ed3ad230c8ec" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="126" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="f2650d92-ef43-3538-bf1f-3b37eb23408f" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cae8ebb7-cf80-3a4e-9fa6-de7b02d24a24" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="126" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="3fc89dff-af6b-3f33-bb63-cc374995dc25" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99ef5306-d2e1-36af-a045-5ebab5fcca4f" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="127" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="277172" rule.header="Tabs should be avoided" tool="c++test" lineHash="277172" unbViolId="4d7f98bd-2b2f-3f53-98c2-446f1667961f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="35617a49-9acc-3ddd-91a7-87071a74d827" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="127" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="127" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="6645b2c9-f371-3c67-b30a-ec8c1cf9a1a2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f1f43a04-6814-34aa-ad47-683178a9024f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="127" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="127" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="f02b4e16-9692-39b7-aaa0-bdcb78a9b289" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b6dc9c5-dc03-326d-81bb-3519b423942a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="127" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="127" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="277172" rule.header="Tabs should be avoided" tool="c++test" lineHash="277172" unbViolId="fce39094-703d-3227-8bf1-46f3580ad979" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7bdf368-562c-3ef1-acbe-f7007c364646" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="127" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="127" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="c388ea84-43c8-3875-834d-1271871d9841" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06f26fcb-9b2a-3211-8518-b368f696fb8a" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="127" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="127" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="d765e8d1-7c8e-3a79-bc51-a6cf67c6703d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="308c7727-0640-3522-a81f-0142de5be224" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="127" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="127" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="277172" rule.header="Tabs should be avoided" tool="c++test" lineHash="277172" unbViolId="5955664a-3ba0-3349-824d-c2d301dc0d5c" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a60a9fc-31ff-3c0f-9183-9fdcdde56cdc" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="127" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="127" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="6e73d882-512c-32c6-ac23-a667f070a3f4" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc54c223-5839-380e-8c6a-5cb30223a7c0" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="127" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="127" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="394abac2-ef1a-3d7d-b004-fd8a0631c7de" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0829c8b-0dcf-37ab-a8ec-cd747d48bef0" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="127" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="128" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="1234365944" rule.header="Tabs should be avoided" tool="c++test" lineHash="1234365944" unbViolId="ef73f96e-ae3b-3d99-b15f-cbf8a0c67ba5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a2a3ecce-c029-3445-ae62-5a2c756af285" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="128" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="c8686496-2529-33b9-9edf-992e4d44f634" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dca25fbc-8a5a-3d07-9d0b-8e5d20f3c9ad" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="128" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="cf0df0cd-ec92-33ae-a324-79a18a50e332" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b39cb83-83f5-3cde-a05c-abf418e91bb2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="128" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="1234365944" rule.header="Tabs should be avoided" tool="c++test" lineHash="1234365944" unbViolId="0cbc997b-0fe0-3b83-95cc-d3661540a999" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5cd7e8b3-d036-3656-b5dc-3cdb3ac10495" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="128" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="45e97ae8-d8eb-3e6a-9961-a7677ebdc0db" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="80f85a64-5a07-3b15-b18c-42eb0aed55cc" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="128" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="0f47b21e-83c5-3cbe-be3c-270fa54cc392" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa2a4ce3-ad2f-306f-9eb8-7eeb31f00a26" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="128" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="1234365944" rule.header="Tabs should be avoided" tool="c++test" lineHash="1234365944" unbViolId="bdd9b9bf-cce6-3fc0-8987-38ece93454aa" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7674981c-1594-3760-aef9-14accd1cb880" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="128" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="4818a517-4a02-3055-a5eb-26fcaecf4ac9" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99b25631-ac73-3333-88b3-c316f7f87398" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="128" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="c37764d1-c63a-3fcf-aa72-d8b70f6f15d3" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e69808b-0629-30f6-b5f8-888e2d0c09a3" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="The type 'int' of function argument number '1' does not match declared type 'unsigned long'" ln="128" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="128" sev="3" auth="username" locRef="4" rule="PB-11" lnHash="1234365944" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="1234365944" unbViolId="ed47d1a5-72af-3462-9fd6-ef7081e6d9cd" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91d7fbfa-12d6-3e3b-b45b-38588e33858b" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 20" ln="128" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="128" sev="3" auth="username" locRef="4" rule="HICPP-4_2_1-a" lnHash="1234365944" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="1234365944" unbViolId="fe338c43-40b2-3dd2-abc4-e90b224745a0" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c0fc921-4992-3b1f-9688-9eacb7c540e8" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used" ln="128" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="128" sev="2" auth="username" locRef="4" rule="MISRA2008-5_0_4_a" lnHash="1234365944" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="1234365944" unbViolId="05852571-d804-37c1-bfa8-a2321345891e" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67a42bf0-1d23-33bf-bcad-e043e246dab8" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used" ln="128" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="128" sev="2" auth="username" locRef="4" rule="AUTOSAR-M5_0_4-a" lnHash="1234365944" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="1234365944" unbViolId="47043715-86e8-32d6-9dcf-1a3d7feb2689" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="623f7e62-c99a-3a2a-b475-3c823575b630" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used" ln="128" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="128" sev="3" auth="username" locRef="4" rule="MISRA2004-10_1_a" lnHash="1234365944" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="1234365944" unbViolId="a6c23892-e7d0-3b9c-964a-0193b2a49f02" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02b2fd2b-8034-3368-890c-f9ed67474131" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="129" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="129" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="9053" rule.header="Tabs should be avoided" tool="c++test" lineHash="9053" unbViolId="cb0b7b6f-8c59-3404-97b3-0a0029325c1d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4291df9-3304-3b27-b125-331e8892c74a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="129" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="129" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="129" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="cb0f9467-2dd7-3920-aa8d-8cbdef77d229" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="01e11cab-ddb4-3223-a417-3ea919c4bdd5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="129" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="129" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="129" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="d9a10f56-3b54-30bd-91c2-8c04b11bca46" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="29b7b185-1989-3a6e-a8ab-584499b44997" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="129" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="129" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="129" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="9053" rule.header="Tabs should be avoided" tool="c++test" lineHash="9053" unbViolId="6e35103e-68a1-3fd3-a866-d1b999fbe5a8" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e81d6ebc-0bf5-39b2-8870-cd67e48407a2" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="129" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="129" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="129" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="2618c9f5-aac3-3f2e-8a3b-17d49453fe73" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c18dfd8-a15b-3597-b0af-f4e33ffd8fb2" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="129" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="129" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="129" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="7d59db83-e4a4-3071-9d74-e6e9cbc592da" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b98cd71-473e-367f-8e6a-4860968640eb" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="129" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="130" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="130" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1688062501" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1688062501" unbViolId="63c93fbb-c5ce-3272-b5fd-c5b2a7afa3df" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f301f836-80e3-3591-b351-eefd48640ac1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="130" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="130" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="088cc789-6516-3789-93a5-1c1df66577c7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e0add63-d935-3632-ba79-5630e09b9349" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="130" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="130" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="a3f9ca86-0982-33d0-a63a-8813c2bebb5f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e99b1fbc-782e-370c-98dd-4b566ec483b2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="130" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="130" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1688062501" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1688062501" unbViolId="9cb3e0c8-f73c-3dbf-bf1d-efa99e926915" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae558600-a64e-354d-a37b-d422817e0857" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="130" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="130" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="a53109a5-5c48-37a7-af7a-806e0f654042" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad8148fd-1b58-383b-a87f-0a08878693af" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="130" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="130" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="d1a25063-4c5f-3237-b512-b99c669cfb70" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24f5f7c7-1368-363e-b78e-4d4b73e7a1d5" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Function 'Render_Thread' has declared return type 'unsigned long' but returns value of type 'int'" ln="130" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="130" sev="3" auth="username" locRef="4" rule="PB-05" lnHash="-1688062501" rule.header="Return value of a function must match declared return type" tool="c++test" lineHash="-1688062501" unbViolId="706da1da-0b2d-3f48-93fb-fe046ef6a591" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="819ed092-a5d7-311c-9ae2-0453fc1c033e" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="'return' statement should be used with parenthesis" ln="130" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="130" sev="3" auth="username" locRef="4" rule="FORMAT-25_b" lnHash="-1688062501" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="-1688062501" unbViolId="1c99b2c3-8a03-355d-a0f2-01178ef13937" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fdc8d7cf-2afa-35bb-b423-6fadc00a922c" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function return statement shall not be used" ln="130" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="130" sev="2" auth="username" locRef="4" rule="MISRA2008-5_0_4_a" lnHash="-1688062501" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-1688062501" unbViolId="ffcddc54-c58d-3b84-ad86-cdd8d3996b57" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f46b3b71-952a-3411-93ca-33e79ac7f81f" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function return statement shall not be used" ln="130" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="130" sev="2" auth="username" locRef="4" rule="AUTOSAR-M5_0_4-a" lnHash="-1688062501" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1688062501" unbViolId="e9bfa2b8-085b-3199-90a5-20be37069372" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1421f1ae-c397-31f8-9837-0b0ef5c5d616" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function return statement shall not be used" ln="130" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="130" sev="3" auth="username" locRef="4" rule="MISRA2004-10_1_a" lnHash="-1688062501" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1688062501" unbViolId="3bc7f0e6-370a-3d5e-9a8e-86f211da2e94" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="49c123cf-1dd0-3c79-8ffd-ce5b8479fb78" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="130" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="130" sev="2" auth="username" locRef="4" rule="AUTOSAR-M2_13_3-a" lnHash="-1688062501" rule.header="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" tool="c++test" lineHash="-1688062501" unbViolId="dc490f0f-be68-34ad-855a-3adee81392a7" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40135b48-d31e-3392-85ef-627e91bd9f82" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="130" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="130" sev="3" auth="username" locRef="4" rule="CODSTA-68" lnHash="-1688062501" rule.header="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" tool="c++test" lineHash="-1688062501" unbViolId="fee6f674-8e28-3dd7-921f-b2bc19674362" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="975df508-4aae-3c3b-b88f-1f3ee8f4c2a1" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="130" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="130" sev="2" auth="username" locRef="4" rule="MISRA2008-2_13_3" lnHash="-1688062501" rule.header="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" tool="c++test" lineHash="-1688062501" unbViolId="5326a786-cf6b-332e-8a25-9c86ac57fc36" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92afab91-a097-3871-bceb-7eac3c1f71fc" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="130" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="130" sev="3" auth="username" locRef="4" rule="HICPP-4_2_1-a" lnHash="-1688062501" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-1688062501" unbViolId="34b052cb-ab4d-3f0c-b4c9-ec9125e05798" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff07d8b4-ee3a-350d-901e-0703d3ddc184" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="131" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="131" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="404" rule.header="Tabs should be avoided" tool="c++test" lineHash="404" unbViolId="978f9f7d-c68f-37b8-8e7c-402bf4d5e133" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9901654d-7920-325c-9f65-11987e3d2e76" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="131" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="131" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="131" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="da12510e-1abe-3958-b249-b612da14c4e2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5c5cc7a4-1cc5-35ad-88cd-f15592b69e57" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="131" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="131" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="131" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="effa9b03-0177-306f-8974-6a332035415f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f83c9b3-c98b-3293-a6c6-a7e73d8a184d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="131" goals="0," />
    <StdViol msg="The 'runGameThreads' function should be preceded by a comment that contains the '@brief' tag" ln="134" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="3" auth="username" locRef="4" rule="COMMENT-14" lnHash="-106623271" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-106623271" unbViolId="cfa380f1-11cc-3e89-8e31-9c77a434711b" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff2f5bdc-1917-3056-ae95-7aed8fabb90b" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="The 'runGameThreads' function should be preceded by a comment that contains the '@brief' tag" ln="134" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="2" auth="username" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="-106623271" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-106623271" unbViolId="2e5a35cb-caba-30ec-819a-c20071e67d62" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84b4ed8d-51dd-3872-b170-9e3e545ddef8" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'runGameThreads'" ln="134" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="3" auth="username" locRef="4" rule="FORMAT-28" lnHash="-106623271" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-106623271" unbViolId="d312329f-611a-3db8-b3ce-188903859279" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="63385529-7889-3d64-8a4e-4a5d36dd9104" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Function 'runGameThreads' has Cyclomatic Complexity value: 1" ln="134" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="5" auth="username" locRef="4" rule="METRICS-29" lnHash="-106623271" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-106623271" unbViolId="9820a423-3fbe-3fb4-85e4-3d93c889ffad" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d314ba2-a891-3b6c-adcd-4b11353f0121" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Function 'runGameThreads' has Essential Complexity value: 1" ln="134" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="5" auth="username" locRef="4" rule="METRICS-33" lnHash="-106623271" rule.header="Report Essential Complexity" tool="c++test" lineHash="-106623271" unbViolId="caa344cf-77d1-3c12-9fe0-cb105cd52ae8" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1b120957-666f-3c4c-a5ec-e22e41f7a73d" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Naming convention not followed: runGameThreads" ln="134" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="3" auth="username" locRef="4" rule="NAMING-17" lnHash="-106623271" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-106623271" unbViolId="beeaf66e-7aac-39d7-92a4-d6cb2355a219" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e01df2f3-7be9-3291-ba78-f33df455bdfb" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="The definition of the 'runGameThreads' function is not preceded by a comment" ln="134" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="3" auth="username" locRef="4" rule="COMMENT-04" lnHash="-106623271" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-106623271" unbViolId="74a85b34-f849-39bf-8443-355603dfa0e0" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9832262-5116-3b80-aa73-bb9c3e17b559" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="The definition of the 'runGameThreads' function is not preceded by a comment" ln="134" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="4" auth="username" locRef="4" rule="JSF-134" lnHash="-106623271" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-106623271" unbViolId="baf943c0-1521-3cad-983d-41ee00a56bb9" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0172599c-6d7a-33be-84b1-a8371256d7c0" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="4" auth="username" locRef="4" rule="OWASP2019-API9-e" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="54253cca-6f7f-3ed9-921f-2e6437532017" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f373e248-570f-3c86-a75f-d069f066438a" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="c4c8ec6a-06b3-3a26-82ed-a789f8acb160" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16f09496-a83b-3486-a172-e955814ba6cf" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="4" auth="username" locRef="4" rule="JSF-137" lnHash="-106623271" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-106623271" unbViolId="19ebe0a6-c9e7-380e-88ee-cec17dedbd52" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="829ea127-ef2a-3ddf-874f-fff93d870743" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="4" auth="username" locRef="4" rule="MISRA-023" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="18a8ed5f-a851-389d-8055-3c47667d1f48" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52fa4a0f-1280-3253-994b-d887294cfa84" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="2" auth="username" locRef="4" rule="MISRA2008-3_3_1" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="d8cf992e-7dbd-321f-a529-707b83c86795" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16534f30-01ef-3782-8e46-2dc137e96ae8" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="3" auth="username" locRef="4" rule="CERT_C-DCL15-a" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="720faa95-ddd6-3cbb-99db-192b46342660" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a974dc8-94ff-3a93-a71a-c6aff7f4f3eb" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="4" auth="username" locRef="4" rule="MISRA2004-8_10" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="85ab4740-e261-3986-bc62-50b24610b724" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9bfdbf0-6aee-3063-b5bb-734b947c4a3f" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="The name 'runGameThreads' should be composed only of lowercase letters" ln="134" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="3" auth="username" locRef="4" rule="JSF-051" lnHash="-106623271" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-106623271" unbViolId="ac577c6e-7e7f-3cc5-a439-f49e50545e8c" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a2b973b-95ca-328d-8faa-8c58d3c9a5ba" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="The name 'runGameThreads' should be composed only of lowercase letters" ln="134" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="3" auth="username" locRef="4" rule="NAMING-44" lnHash="-106623271" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-106623271" unbViolId="9f0b28b5-2921-3191-8585-48cb3af14523" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="402ea96d-5f62-3e44-a5b7-c9504718a154" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Global function 'runGameThreads' is declared in global namespace" ln="134" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="4" auth="username" locRef="4" rule="JSF-098" lnHash="-106623271" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-106623271" unbViolId="cacb4a2e-9903-3449-9c8a-907943487b3d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="afada82f-d067-3923-91da-49d56f5fcaab" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Global function 'runGameThreads' is declared in global namespace" ln="134" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-36" lnHash="-106623271" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-106623271" unbViolId="640ffeee-bd87-375e-99a1-c9bfd6ea22df" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa5edaa8-8de5-34e2-9dfb-275964885e1e" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Global function 'runGameThreads' is declared in global namespace" ln="134" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="2" auth="username" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="-106623271" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-106623271" unbViolId="f3cd6ac7-6533-3bd4-9c39-bf6d763c0cfa" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2734a61f-9bf2-3b0e-8f8c-8736c1a2f6ea" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Global function 'runGameThreads' is declared in global namespace" ln="134" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="2" auth="username" locRef="4" rule="MISRA2008-7_3_1" lnHash="-106623271" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-106623271" unbViolId="cc1afb05-b534-3fec-9f02-82c0b367cce2" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a032df3-1b4f-3e66-964b-1eda8c0ad066" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="The 'runGameThreads' function is not used in the testing scope" ln="134" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="3" auth="username" locRef="4" rule="GLOBAL-UNUSEDFUNC" lnHash="-106623271" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-106623271" unbViolId="a0939ace-25ff-3afc-92fe-9741204fdc61" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="ace45ed7-f0d0-3daa-9594-a94a2012d355" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="The 'runGameThreads' function is not used in the testing scope" ln="134" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="4" auth="username" locRef="4" rule="AUTOSAR-M0_1_10-a" lnHash="-106623271" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-106623271" unbViolId="55db1fa4-c2d4-37a1-b137-4ea08d467754" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="9d6a7efd-05c9-3603-a98b-de8d1a2d1c4d" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="The 'runGameThreads' function is not used in the testing scope" ln="134" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="2" auth="username" locRef="4" rule="MISRA2008-0_1_10_b" lnHash="-106623271" rule.header="Every defined function with external linkage shall be used" tool="c++test" lineHash="-106623271" unbViolId="7c92feaa-5b19-3d4b-ba50-a2034414bebe" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="8d7dca1f-fd5d-321d-9891-ad56d2829301" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <DupViol msg="Duplicated function: 'void runGameThreads ( ) { exitGame = 0 ; THREAD thread1 ,...'" ln="135" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="135" sev="2" auth="username" locRef="4" rule="CDD-DUPM" lnHash="123" rule.header="Avoid function duplication" tool="c++test" lineHash="123" unbViolId="59dc36cf-0307-3a1f-9be7-a27c946f3a17" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="e23036ab-b441-3054-b52d-8c684c55ba56" locEndPos="1" locType="sr" urgent="true" hash="-1769734618" locEndLn="142" goals="1,">
      <ElDescList>
        <ElDesc lineHash="123" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="135" srcRngStartPos="0" srcRngEndPos="1" srcRngStartln="135" srcRngEndLn="142" desc="[Line 135] Duplicated function in file 'DeadLock.cpp'" rngLn="135" />
        <ElDesc lineHash="123" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="145" srcRngStartPos="0" srcRngEndPos="1" srcRngStartln="145" srcRngEndLn="152" desc="[Line 145] Duplicated function in file 'DeadLock.cpp'" rngLn="145" />
      </ElDescList>
    </DupViol>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="135" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="135" sev="3" auth="username" locRef="4" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="dcf17e87-6999-3717-80b0-4f58ac89cbba" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="263853e5-f1a6-3737-b910-d85b1e190732" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="135" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="136" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="136" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="409232213" rule.header="Tabs should be avoided" tool="c++test" lineHash="409232213" unbViolId="d7cb8c67-9b2d-302d-98d0-c772806127b6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59e87870-675a-374e-bc25-cd63d2dc5467" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="136" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="136" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="136" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="409232213" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="409232213" unbViolId="aea56775-739c-346d-9bc5-27cd7280a411" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd20dc5a-1c83-3b6f-8aed-437f048df154" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="136" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="136" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="136" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="409232213" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="409232213" unbViolId="5678afaa-a98e-3b19-a4f0-150ce27c7050" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dde219fe-7936-304d-854d-6f29aa02f48e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="136" goals="0," />
    <StdViol msg="Global variable 'exitGame' is modified in function 'runGameThreads'" ln="136" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="136" sev="3" auth="username" locRef="4" rule="CODSTA-27" lnHash="409232213" rule.header="Avoid functions that modify global variables" tool="c++test" lineHash="409232213" unbViolId="8fddab54-5bad-3896-914e-6166ec684a93" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd6c1f34-07e8-3e57-8c0f-50299209a55d" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="136" goals="0," />
    <DupViol msg="Duplicated code: 'exitGame = 0;&#x9;THREAD thread1, thread2, thread3, thread4;&#x9;THR...'" ln="136" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="136" sev="3" auth="username" locRef="4" rule="CDD-DUPC" lnHash="409232213" rule.header="Avoid code duplication" tool="c++test" lineHash="409232213" unbViolId="80a802e8-a3cd-31f8-b4d2-3faf86b11cfd" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="c351ba84-68ae-371f-8f32-1a4a21d31c5b" locEndPos="47" locType="sr" urgent="true" hash="-1769734618" locEndLn="141" goals="1,">
      <ElDescList>
        <ElDesc lineHash="409232213" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="136" srcRngStartPos="1" srcRngEndPos="47" srcRngStartln="136" srcRngEndLn="141" desc="[Line 136] Duplicated code in file 'DeadLock.cpp'" rngLn="136" />
        <ElDesc lineHash="409232213" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="146" srcRngStartPos="1" srcRngEndPos="47" srcRngStartln="146" srcRngEndLn="151" desc="[Line 146] Duplicated code in file 'DeadLock.cpp'" rngLn="146" />
      </ElDescList>
    </DupViol>
    <StdViol msg="Non-ascii tab found" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1123182240" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1123182240" unbViolId="b986ba0f-ae6a-3843-9323-86287925a963" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="798babd7-b9ca-3893-b5f4-1447d0c11370" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1123182240" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1123182240" unbViolId="878e5498-eb10-3fa0-a589-d84dc40ce39a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9294de6b-5887-3411-aae6-0856f34d90a2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1123182240" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1123182240" unbViolId="378af81c-9fd9-3963-8b11-58bc75955390" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ea29838-429b-3bb9-9511-b7fe947883b2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: thread1" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="1b9002f7-997e-389e-8fc0-41cdf220dfb4" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e28f8475-691b-31ce-b227-788c44d2d579" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The variable of pointer type is declared: thread1" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="3c87cf6b-378c-3126-9116-5f87db0e4ba6" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2176db36-34de-3533-a6a5-392ae400bd5c" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Pointer variable 'thread1' uninitialized when declared" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="1709478b-6e78-308d-aa82-4ef1dd84f981" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23c6e581-5b3d-3ef7-a23c-e1f2dffc8f3a" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Local variable 'thread1' declared in function 'runGameThreads' is unnecessary" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="AUTOSAR-M0_1_3-b" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="cc8c525e-84f2-323c-8728-f593ccc87b38" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eff8d76d-0df2-3c63-ad14-13c234b157b1" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Local variable 'thread1' declared in function 'runGameThreads' is unnecessary" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="MISRA2008-0_1_3_b" lnHash="-1123182240" rule.header="A project shall not contain unused variables" tool="c++test" lineHash="-1123182240" unbViolId="729dc0ca-1af5-34ac-8d76-3ce417c5c2cf" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d486eb0-f964-344d-afd3-2f325c87e555" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Local variable 'thread1' declared in function 'runGameThreads' is unnecessary" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="CERT_C-MSC13-a" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="2bfb0550-cdd5-381e-8e1b-b4977f069dc1" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d80126f-7de7-353c-ae4a-daa32c74df7d" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Local variable 'thread1' declared in function 'runGameThreads' is unnecessary" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="4" auth="username" locRef="4" rule="OPT-06" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="89263731-3e6f-35de-be85-052b93e2c816" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e7936c7a-f837-32d6-bf20-868e3d26c3d8" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread1' variable should be commented" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="50af0196-2904-3670-be66-86c96078755c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="81e1bfd9-be87-34ba-95bc-e36784ec6218" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread1' variable should be commented" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="a748f223-c21d-3fd7-994f-84f4e27c0bd2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f7473da-ddc8-3023-8e71-e60f14e6b7fa" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="W-552: variable &quot;thread1&quot; was set but never used" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="4" auth="username" locRef="4" rule="PARSER-WARNING" lnHash="-1123182240" rule.header="Parser warning" tool="c++test" lineHash="-1123182240" unbViolId="e030c4ed-7130-396e-bf68-5c8cf4604b89" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="15431422-dc7e-3d6e-abe2-f9b9ba7d99f5" locEndPos="9" locType="sr" urgent="true" hash="-1769734618" locEndLn="137" goals="1," />
    <StdViol msg="The 'thread1' variable has only one use" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="44a027fa-5bfa-3368-8f45-02615d4c9db2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="0c1d46a1-968d-3539-84af-d231fd76ac6c" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread1' variable has only one use" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="2f4928e7-82d0-39b2-88ee-21e2619d0f63" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="f06fcdac-ee24-3dff-b554-ee1ac69d54a5" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread1' variable has only one use" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="d6b0bd90-186f-3916-bb05-559eb7579e31" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="f2db6409-1161-335e-a5b8-d7b4329e0092" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread2' variable has only one use" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="b346b22f-45e2-3ec3-ba20-331dcd818e8d" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="7416ed85-2af4-37a2-91a3-a1b0ade900c0" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread2' variable has only one use" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="cebf16b4-f13a-3955-b631-ebda69b4d1a5" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="c1e7961c-5845-3313-a86a-acf9e374f018" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread2' variable has only one use" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="19aa1c1e-fe67-340b-9984-acd5d571d0d6" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="b1d6eb2c-aa93-33e9-91f5-fc02f5ac1ec4" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="W-552: variable &quot;thread2&quot; was set but never used" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="4" auth="username" locRef="4" rule="PARSER-WARNING" lnHash="-1123182240" rule.header="Parser warning" tool="c++test" lineHash="-1123182240" unbViolId="d1d6de94-ed18-357b-9621-7d8ff4862353" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2a67a52-615f-3ef8-a1fe-e00d8ae3c80f" locEndPos="18" locType="sr" urgent="true" hash="-1769734618" locEndLn="137" goals="1," />
    <StdViol msg="The variable of pointer or array type is declared: thread2" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="95bce5cf-7a64-33ee-a76a-e946152c31ee" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d6e9964-fea0-38f7-84fa-0158c39308a3" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The variable of pointer type is declared: thread2" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="7f0440a3-6f73-3e79-87cb-3e7cf57167ff" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7bae12ed-2120-3a0d-ab7a-ca33b05c018a" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="JSF-152" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="8ccfe86f-4399-37e1-89a1-3579c47babe8" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52ff5cfd-0304-3ff9-af08-682f0d6cfa5f" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="AUTOSAR-A7_1_7-b" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="aa9aaab5-f7a6-3cf2-89c4-98de917403a5" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ea680433-ab65-3ca6-bdb8-ad5696f86a76" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="HICPP-7_1_1-a" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="227dcd04-10db-38c3-983a-11cc1ef499fa" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0d2d972-a212-3c0f-92d4-56b846acaebf" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="FORMAT-29" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="41281f33-2f10-3c0c-921c-b2bbc86e594f" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cda5cb36-67a5-3180-a484-ddce58211f7c" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="AUTOSAR-A7_1_7-c" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="bc348c41-bffc-3d02-a75f-0650d914c0d4" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ec7758c-3a43-3e97-8746-965080bda0a6" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="FORMAT-33" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="419bd3f9-bfa3-3193-9d7b-647ad7a16a59" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="408688cf-bbb4-3b85-b583-2ef5440df722" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="MISRA2008-8_0_1" lnHash="-1123182240" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-1123182240" unbViolId="12d50a2e-73d8-3fc9-baac-1bd3790b3a44" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d1f4754-bae8-3c3e-b24a-966f3b214f3b" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="HICPP-7_1_1-b" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="9249a26c-3ea0-345a-9495-93b96634520d" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe169c21-88af-3421-98bb-592067e10164" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="AUTOSAR-M8_0_1-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="f4d3b680-738f-3615-b5ac-89815ebe8fef" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2e81e24-2205-375a-b1a3-95f6cd5b3c2d" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="CERT_C-DCL04-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="0fbfabb8-da4e-3ba8-aed4-dc0d09175976" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a81cac8-d0cd-3555-8a30-4aa4d48a52ce" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Pointer variable 'thread2' uninitialized when declared" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="efdd21a8-b56c-303e-968c-5a35a3565879" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5010eda0-39fa-39b0-ad57-e2ff5bbfbf04" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Local variable 'thread2' declared in function 'runGameThreads' is unnecessary" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="AUTOSAR-M0_1_3-b" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="28ea3394-01b9-3f0d-9b4e-bc630e5c5cfa" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aab422eb-70d7-3791-8f8a-6ff8ae39f082" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Local variable 'thread2' declared in function 'runGameThreads' is unnecessary" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="MISRA2008-0_1_3_b" lnHash="-1123182240" rule.header="A project shall not contain unused variables" tool="c++test" lineHash="-1123182240" unbViolId="ff06d7da-193a-3b19-b645-86617631a8b7" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b25b110-f2d1-3ffd-b505-983625a5aa98" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Local variable 'thread2' declared in function 'runGameThreads' is unnecessary" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="CERT_C-MSC13-a" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="30e4cce9-62e5-3116-b885-1c697d321858" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="373752c2-0f4b-36c1-aeea-7c2eefda9fa5" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Local variable 'thread2' declared in function 'runGameThreads' is unnecessary" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="4" auth="username" locRef="4" rule="OPT-06" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="5a638c92-9ae1-3252-a1d8-e2551d6d4449" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e42c09f1-81d4-34d7-935f-291b17eb1cf4" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread2' variable should be commented" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="63f1e5dc-854b-3ac0-abc8-ddad144183ce" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="11689a24-36de-3ab8-98ab-2bf249412b3f" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread2' variable should be commented" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="361b7fb0-3ed2-3bb0-a831-9c7c8d748abb" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9aa0ce8-3687-33be-a136-51d9f1fc8c0f" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: thread3" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="79f73a57-c7c2-338e-baa3-4090660ccfd8" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1bab83d-e0b4-3a4f-90e2-60f18e14b781" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The variable of pointer type is declared: thread3" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="fa1dc8c0-1a89-3a16-ab7b-8d3f20dcd6e5" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e78a3cbd-0f89-398f-9ec8-ff90ccf4869e" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="JSF-152" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="7cdbde66-7cb8-3e57-a2ef-a2d4da6c0036" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2ea20bc-d534-3d76-8375-57c2551f1ea8" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="AUTOSAR-A7_1_7-b" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="4464f367-5ab6-3fcc-979c-89c657d429be" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="66c1a041-8efd-3b3e-9120-c2c09301996c" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="HICPP-7_1_1-a" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="da66ddce-0c1e-3230-9502-e6933f1175a0" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f4263e4-4517-3d4a-9d4d-d277ad6cc858" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="FORMAT-29" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="4af5d974-1342-32d0-b445-735db9f0974d" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b608565b-9fad-34b4-971d-ec611f8935ed" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="AUTOSAR-A7_1_7-c" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="32770372-ed04-344c-835b-b734feeaa9f7" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d3e9d60-9132-3954-813b-fba93514e677" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="FORMAT-33" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="a40457ee-9d76-3032-97dd-2f9f3f9fa112" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0eb115bd-004c-3c40-93d0-66dc6e5aa5ae" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="MISRA2008-8_0_1" lnHash="-1123182240" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-1123182240" unbViolId="bcd6c1b5-7238-3e36-88b2-d4842f9f1ce5" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3ea92d4-588d-341c-8d82-8975ecf63d4d" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="HICPP-7_1_1-b" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="4421117f-18dd-3b9a-9da6-dda1cac436ee" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0fd65c49-e1fc-321a-8cd8-0eb846bd2052" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="AUTOSAR-M8_0_1-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="7716954f-6942-3e9d-a6a8-8820c0186a96" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aaf19ac2-a3c0-3cc9-bb22-50d219624548" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="CERT_C-DCL04-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="bd42a714-e498-3b22-b063-8537396a432f" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa4b48ef-e569-372a-a83c-a14925bc7aef" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Pointer variable 'thread3' uninitialized when declared" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="a2498b3c-41d8-32d8-8bfc-d5ec1591130d" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5888ec2-53ac-3154-97e7-4f9550bb7559" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Local variable 'thread3' declared in function 'runGameThreads' is unnecessary" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="AUTOSAR-M0_1_3-b" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="51c11065-848c-3a00-9e94-64f223b3d48d" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8316648-ca1a-3c9d-ae38-abaa23be828b" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Local variable 'thread3' declared in function 'runGameThreads' is unnecessary" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="MISRA2008-0_1_3_b" lnHash="-1123182240" rule.header="A project shall not contain unused variables" tool="c++test" lineHash="-1123182240" unbViolId="150a6503-fbca-3f3d-80fc-5f0801e47c03" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9a673f7-185e-3d34-aaa9-867acbae0b6f" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Local variable 'thread3' declared in function 'runGameThreads' is unnecessary" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="CERT_C-MSC13-a" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="b00c9d80-65f6-345f-abfe-5f4ca7391b79" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2928ff11-6e2b-397c-8572-69da58fd2114" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Local variable 'thread3' declared in function 'runGameThreads' is unnecessary" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="4" auth="username" locRef="4" rule="OPT-06" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="a981b3b1-de5b-33e0-a18e-6c1e94f74426" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="11528246-ea41-3dbc-aa78-57aec48478d0" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread3' variable should be commented" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="8ddc1b54-a3b3-3089-b711-fda1c5d33694" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ad4f143-d515-3fa4-af8c-cad57331c110" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread3' variable should be commented" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="abc127f4-ffae-3586-9105-51de2939b83d" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b447acf-6eb7-3c27-8d12-2c2c84830e67" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="W-552: variable &quot;thread3&quot; was set but never used" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="4" auth="username" locRef="4" rule="PARSER-WARNING" lnHash="-1123182240" rule.header="Parser warning" tool="c++test" lineHash="-1123182240" unbViolId="e80f4733-c92d-30f1-801c-199e5b6e9e33" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cabad158-0b95-30ce-9d46-4c18d6ee6e44" locEndPos="27" locType="sr" urgent="true" hash="-1769734618" locEndLn="137" goals="1," />
    <StdViol msg="The 'thread3' variable has only one use" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="0a981238-aa3b-3279-8c68-f5a54d5f61bf" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="94ada1b1-1914-357c-afe7-252f957f5c44" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread3' variable has only one use" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="673a93ef-5852-333d-a43e-38ba0289aa0f" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="9a651168-7a20-33ba-961e-73d9ce8513aa" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread3' variable has only one use" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="31e02be3-0b53-3968-96bc-b165770db103" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="67e63a21-76b7-343d-88cf-ffdf52367968" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread4' variable has only one use" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="888791ca-5242-3200-ae8d-14031e5ee477" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="25e45dab-14a4-32f7-a1d4-ebbff27d6f60" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread4' variable has only one use" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="d5e858df-8738-31ae-bd09-f4acbf79ac40" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="1d29346e-9eea-3298-9543-bdb2a4e8cad1" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread4' variable has only one use" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="7a6dfe79-fb20-3301-b44f-7749774d4912" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="fdfc11ab-f31c-328a-b72a-f11911f53ea5" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="W-552: variable &quot;thread4&quot; was set but never used" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="4" auth="username" locRef="4" rule="PARSER-WARNING" lnHash="-1123182240" rule.header="Parser warning" tool="c++test" lineHash="-1123182240" unbViolId="df0e8af5-3fa9-39ce-aa44-dc87498a233b" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b65dbd3-29a5-35b3-b3d4-7eecae0057d7" locEndPos="36" locType="sr" urgent="true" hash="-1769734618" locEndLn="137" goals="1," />
    <StdViol msg="The variable of pointer or array type is declared: thread4" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="ea9beb2a-fb9e-3332-9d55-17b525da2c0b" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74d80ec1-2a2c-35a0-abb1-8748279c22c2" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The variable of pointer type is declared: thread4" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="f1d03a44-9533-347d-a898-384e5c0e2d76" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ab15658-327b-314b-98d4-9d084f67093e" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="JSF-152" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="b7cd833e-6428-3648-9b1d-36c81e3cc342" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="090e5330-6a7c-3293-b591-65680b4782bc" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="AUTOSAR-A7_1_7-b" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="67874bcb-0052-3c40-a047-4553768702a9" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6998828-9610-30f9-a017-529a389d00bd" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="HICPP-7_1_1-a" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="f0db9355-fc91-311d-8e98-de6ea67dbb39" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4fcf655-391a-3344-9ce8-502de96b793c" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="FORMAT-29" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="7e748ac0-d9d4-3d2d-b548-1c11afec6320" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7650b0cd-5bae-3169-809f-e1f5e73ad67d" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="AUTOSAR-A7_1_7-c" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="84459e37-484f-3c4c-88f1-abd94944c204" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e083d558-4152-3023-9405-b11959f498d1" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="FORMAT-33" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="89e47bb4-8ca7-3eac-abf2-18a1946fc57e" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e26e31e-2aa6-3098-b96e-70d41040110f" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="MISRA2008-8_0_1" lnHash="-1123182240" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-1123182240" unbViolId="fd205c23-8764-3994-b012-490cec2f2005" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae146a67-8d5b-3dd9-a6f9-84bfbf691181" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="HICPP-7_1_1-b" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="1f0a38a0-6722-3700-986c-dec805808bde" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d96942e9-ae2d-3865-a34f-2565507faabf" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="AUTOSAR-M8_0_1-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="eac1473f-5de4-3847-972f-88be0121a564" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0c8c70f1-6ba9-30d1-9953-60ade1586aae" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="CERT_C-DCL04-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="5ad65199-567a-3ab1-b1b0-6f7abddf2148" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a76711bf-246d-32b6-8d0e-dc156809a9be" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Pointer variable 'thread4' uninitialized when declared" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="98abc6ee-0403-342c-adbc-c52cf525c860" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a90a5c44-8128-3287-966f-f7d61dccdd11" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Local variable 'thread4' declared in function 'runGameThreads' is unnecessary" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="AUTOSAR-M0_1_3-b" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="dec82a9b-e2e2-362b-bcaa-485e8c8f0418" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22511f94-4478-34cc-8baf-5f58eb58683f" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Local variable 'thread4' declared in function 'runGameThreads' is unnecessary" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="username" locRef="4" rule="MISRA2008-0_1_3_b" lnHash="-1123182240" rule.header="A project shall not contain unused variables" tool="c++test" lineHash="-1123182240" unbViolId="87a05bba-2fac-3511-bb3d-020fa1e667dd" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91fa723b-8320-3e8c-a288-2fa298d8416d" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Local variable 'thread4' declared in function 'runGameThreads' is unnecessary" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="CERT_C-MSC13-a" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="bc16e9cf-4f42-33ea-8d91-eafde8213f09" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27129d5c-cdee-31a6-b51c-e1559d28588c" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Local variable 'thread4' declared in function 'runGameThreads' is unnecessary" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="4" auth="username" locRef="4" rule="OPT-06" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="d185752c-143d-3317-b981-97568455eb50" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8748a8b2-afec-3e08-a38f-5f7792eaa09a" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread4' variable should be commented" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="8a1b825f-bad0-3a81-b90f-4d92f3656a54" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="15b5dbb9-5e3d-3d12-9b9c-99875f97f1ff" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread4' variable should be commented" ln="137" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="username" locRef="4" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="b4d88d79-06af-3836-bf54-b3c4c7b8a6a3" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="386f49e3-c754-30e9-8d12-f87c3e2064f1" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-2033288726" rule.header="Tabs should be avoided" tool="c++test" lineHash="-2033288726" unbViolId="febc5898-0b02-38b0-be47-a1d57f1b3883" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ccca019-194a-3d5a-bf66-f8f98395d29d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-2033288726" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2033288726" unbViolId="cb8be35c-e716-380c-9239-5f41bf6e1c15" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="66f38305-d730-302b-b1f4-7907789f492d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-2033288726" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2033288726" unbViolId="a9459628-7f06-320a-a97a-de1742b528c4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dccb8ac0-03f1-34ae-a0ea-24a08a6bf78b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <FlowViol msg="Value of &quot;thread1&quot; is never used" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="139" rule="AUTOSAR-A0_1_1-a" FirstElSrcRngStartPos="0" lnHash="-2033288726" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="138" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1776530347" lang="cpp" violId="9cc32655-613a-3c1d-a3d4-7705742495fd" locEndPos="0" locEndLn="139" goals="0," locStartln="138" sev="2" locRef="4" tool="c++test" lineHash="-2033288726" unbViolId="6d9be5d2-ec85-36df-b480-29c855c476ef" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-2033288726" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="138" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="138" srcRngEndLn="139" desc="THREAD_CREATE(thread1, GameLogic_Thread);" ElType="CP" rngLn="138">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread1&quot; is never used" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="139" rule="BD-PB-VOVR" FirstElSrcRngStartPos="0" lnHash="-2033288726" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="138" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1398327407" lang="cpp" violId="453ea49b-5fe6-32c8-b01b-b11fca31e86e" locEndPos="0" locEndLn="139" goals="0," locStartln="138" sev="3" locRef="4" tool="c++test" lineHash="-2033288726" unbViolId="d8577885-53d2-39f2-a9ea-f690a7f025b8" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-2033288726" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="138" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="138" srcRngEndLn="139" desc="THREAD_CREATE(thread1, GameLogic_Thread);" ElType="CP" rngLn="138">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread1&quot; is never used" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="139" rule="CERT_C-DCL22-a" FirstElSrcRngStartPos="0" lnHash="-2033288726" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="138" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-980512408" lang="cpp" violId="0b5997af-e538-3745-a3e3-f5c41a233afa" locEndPos="0" locEndLn="139" goals="0," locStartln="138" sev="3" locRef="4" tool="c++test" lineHash="-2033288726" unbViolId="48e6de88-7025-3d3d-92d2-f9d681362d9f" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-2033288726" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="138" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="138" srcRngEndLn="139" desc="THREAD_CREATE(thread1, GameLogic_Thread);" ElType="CP" rngLn="138">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread1&quot; is never used" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="139" rule="MISRA2008-0_1_6" FirstElSrcRngStartPos="0" lnHash="-2033288726" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="138" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-565393844" lang="cpp" violId="80018124-eadf-3df6-a234-aa236337544c" locEndPos="0" locEndLn="139" goals="0," locStartln="138" sev="2" locRef="4" tool="c++test" lineHash="-2033288726" unbViolId="c2b73db3-484f-373e-b780-1f94297a1394" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-2033288726" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="138" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="138" srcRngEndLn="139" desc="THREAD_CREATE(thread1, GameLogic_Thread);" ElType="CP" rngLn="138">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread1&quot; is never used" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="139" rule="MISRA2012-RULE-2_2_b" FirstElSrcRngStartPos="0" lnHash="-2033288726" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="138" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1879622155" lang="cpp" violId="a94a62a1-63e2-35c7-b8b1-a9c97b3030f3" locEndPos="0" locEndLn="139" goals="0," locStartln="138" sev="2" locRef="4" tool="c++test" lineHash="-2033288726" unbViolId="4021edff-54ab-3adf-9430-9781ed534ae0" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-2033288726" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="138" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="138" srcRngEndLn="139" desc="THREAD_CREATE(thread1, GameLogic_Thread);" ElType="CP" rngLn="138">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread1&quot; is never used" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="139" rule="MISRAC2012-RULE_2_2-b" FirstElSrcRngStartPos="0" lnHash="-2033288726" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="138" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1162428060" lang="cpp" violId="28b7cfb8-14ae-3578-871a-58c0ad3d8ea4" locEndPos="0" locEndLn="139" goals="0," locStartln="138" sev="2" locRef="4" tool="c++test" lineHash="-2033288726" unbViolId="38723c29-2414-3671-bb93-e823a9a4e7bf" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-2033288726" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="138" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="138" srcRngEndLn="139" desc="THREAD_CREATE(thread1, GameLogic_Thread);" ElType="CP" rngLn="138">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="The type 'int' of function argument number '2' does not match declared type 'unsigned long'" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="3" auth="username" locRef="4" rule="PB-11" lnHash="-2033288726" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-2033288726" unbViolId="a06ecc4a-6931-3196-9fef-58133eea9bfd" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3700135c-e594-3405-b196-f4b65482f075" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="The type 'int' of function argument number '5' does not match declared type 'unsigned long'" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="3" auth="username" locRef="4" rule="PB-11" lnHash="-2033288726" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-2033288726" unbViolId="7fb1b384-04b3-33b2-b98a-05ab0701fb7a" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e44cde3b-31a2-3071-a1b1-93e40267b600" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="The type 'DWORD __stdcall (void *)*' of function argument number '3' does not match declared type 'DWORD __stdcall (LPVOID)*'" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="3" auth="username" locRef="4" rule="PB-11" lnHash="-2033288726" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-2033288726" unbViolId="2f86d5ee-2572-34ec-88b2-150d09750f16" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1da5d14e-1109-32da-b46b-1a6d5ec482ba" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="2" auth="username" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="ba427921-4c5f-3517-83a9-9670d69497c6" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f3333f6-550a-316a-a997-437c762e90d6" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="4" auth="username" locRef="4" rule="HICPP-2_5_3-a" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="67f6529d-a6ab-3261-a34b-bdffcd7880bf" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b497efd-2df4-35cb-beac-11c83103e0c7" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="4" auth="username" locRef="4" rule="CODSTA-MCPP-04" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="7418ecee-9628-3326-9015-f70abfbec54d" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="25a84fa0-66db-30d6-95e7-bb2d0c365d4e" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="3" auth="username" locRef="4" rule="CODSTA-131" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="258685d5-e738-3734-8317-1e0966862949" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64a83ce5-9891-30e8-aa02-0efa3d456766" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-2033288726" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-2033288726" unbViolId="f3711be4-832d-39e6-a122-3acf6c4e138e" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1b6cfea7-7165-39ab-90ac-751673380ace" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="03624556-6828-359b-9c39-85a7259fcceb" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5020b470-5d40-318f-b2eb-db8cc5945a05" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="2" auth="username" locRef="4" rule="MISRA2008-5_0_4_a" lnHash="-2033288726" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-2033288726" unbViolId="fb309eff-691e-3f86-ac12-f5468228393d" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="998b65ae-a536-35d4-b755-1197f39823fa" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="2" auth="username" locRef="4" rule="AUTOSAR-M5_0_4-a" lnHash="-2033288726" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-2033288726" unbViolId="350a3832-051a-3dec-b82d-b80b4f94f0e3" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f4d711d-51cf-3d69-849a-21d6124ad545" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="3" auth="username" locRef="4" rule="MISRA2004-10_1_a" lnHash="-2033288726" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-2033288726" unbViolId="51f8a78a-2c9d-3487-b59e-ea8d71a229da" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4538ef68-8d27-3c74-a465-af2f64b9e656" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="3" auth="username" locRef="4" rule="HICPP-4_2_1-a" lnHash="-2033288726" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-2033288726" unbViolId="8f4dc746-1216-3557-88a8-fc984c6e84bb" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e361a5f7-d89a-3984-928e-3099e7e93364" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="3" auth="username" locRef="4" rule="CERT_CPP-EXP56-a" lnHash="-2033288726" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-2033288726" unbViolId="0837d197-5f6f-3fe8-a8f5-d0291b17e6eb" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05875740-e1a0-3f2a-816d-f972c95a9bc1" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-96" lnHash="-2033288726" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-2033288726" unbViolId="bcd6b158-2543-3dd4-8817-d419b627eaeb" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0cc98f8-b6f5-3b20-b49a-14d272520a5f" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Pointer to function 'GameLogic_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="3" auth="username" locRef="4" rule="MISRA2004-16_9" lnHash="-2033288726" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-2033288726" unbViolId="93fc5a9f-5532-38ea-b608-79084ff3d033" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa0c22fb-19dd-37cd-8a2a-726e45fa63c8" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Pointer to function 'GameLogic_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="2" auth="username" locRef="4" rule="AUTOSAR-M8_4_4-a" lnHash="-2033288726" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-2033288726" unbViolId="a557004a-37fc-38df-9b84-5f943ff6f298" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1074f647-150f-3f9b-bbc5-e5570abd56b1" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Pointer to function 'GameLogic_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="2" auth="username" locRef="4" rule="MISRA2008-8_4_4" lnHash="-2033288726" rule.header="A function identifier shall either be used to call the function or it shall be preceded by '&amp;'" tool="c++test" lineHash="-2033288726" unbViolId="7a5c73b1-6023-39e8-bb91-b5fad5e3917c" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98844a0d-c1a4-3c12-a5bd-e287166f74c9" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="2" auth="username" locRef="4" rule="MISRA2008-5_0_4_a" lnHash="-2033288726" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-2033288726" unbViolId="e291a49b-4c65-34b5-a2f7-16f9914f7f21" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b43d0c9-7d52-3097-8077-8e7d1ee66f1c" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="2" auth="username" locRef="4" rule="AUTOSAR-M5_0_4-a" lnHash="-2033288726" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-2033288726" unbViolId="29b36d28-0291-388e-8d7c-6013dac79be3" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fad1a365-0a0a-3b54-b6e4-9cb8e8333556" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="3" auth="username" locRef="4" rule="MISRA2004-10_1_a" lnHash="-2033288726" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-2033288726" unbViolId="6b2e0ab5-2c4f-31b9-9ea6-a8cc7556baa4" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f790a7fe-a1b8-3bcd-a6f1-0c8c07425758" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="2" auth="username" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="1af39cda-1a0b-36c1-bb41-f661d5e76ea7" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3f7bfa9-de94-3c69-ad15-3b8da08664bf" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="4" auth="username" locRef="4" rule="HICPP-2_5_3-a" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="1bae9f65-8bd5-3978-81b1-24a46180ef47" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="023f089d-225c-37e3-a390-ee45c1d90273" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="4" auth="username" locRef="4" rule="CODSTA-MCPP-04" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="8da92359-4236-3837-8113-7bb5f6f1817b" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5c315c3a-aff2-321d-92fd-05559b509b57" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="3" auth="username" locRef="4" rule="CODSTA-131" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="ae523581-7298-38d9-b191-f5a193ecb74f" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e20a98df-dc54-33b8-9590-c4f3d0d76f5b" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-2033288726" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-2033288726" unbViolId="2e64807b-059d-3459-b249-e4f5dffffc62" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67ff1f45-8a31-3162-af53-a60486fd5942" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="a27c9f4c-2119-3104-b82d-10ae80c1184c" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59b8a6e5-2949-3efb-ae1f-ec32448f15d5" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="3" auth="username" locRef="4" rule="CODSTA-131" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="5ec3da71-b63d-33ef-8ff2-caf228f2e146" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="32b325c8-e6f0-39c7-b166-970f04063212" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-2033288726" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-2033288726" unbViolId="b230a972-847f-3ab6-81ca-e756fcf28055" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65678669-ef9a-3443-b249-37d83e0ce61b" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="2f9e8d16-6728-3e04-b842-dea2108e1065" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="646e77c9-67f9-34ed-8791-526328c45cdf" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="138" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="3" auth="username" locRef="4" rule="HICPP-4_2_1-a" lnHash="-2033288726" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-2033288726" unbViolId="35414bb7-a727-3bbe-ac4b-20a0fe160961" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d38344a-8f03-3779-8823-7c4b0efde027" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1824414877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1824414877" unbViolId="2e2174fa-9f06-3de9-abd4-998d1a3f3a15" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0c380deb-af9e-34af-995d-12453fbf34e4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1824414877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1824414877" unbViolId="ed197739-9977-3bd2-9c71-494e86a04add" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="180ea0b2-f480-37f0-b0fc-d6006f433e26" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1824414877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1824414877" unbViolId="83df6552-5164-3699-81e6-2c766a4e96b9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5862806-ff61-35c2-af95-9762dd10e6c3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <FlowViol msg="Value of &quot;thread2&quot; is never used" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="140" rule="AUTOSAR-A0_1_1-a" FirstElSrcRngStartPos="0" lnHash="-1824414877" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="139" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1265996232" lang="cpp" violId="0d65efc1-f749-3d5f-9773-9b6eb6e154ba" locEndPos="0" locEndLn="140" goals="0," locStartln="139" sev="2" locRef="4" tool="c++test" lineHash="-1824414877" unbViolId="a45a8ded-4271-3990-83bd-73b7be6e54fa" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1824414877" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="139" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="139" srcRngEndLn="140" desc="THREAD_CREATE(thread2, Controller_Thread);" ElType="CP" rngLn="139">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread2&quot; is never used" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="140" rule="BD-PB-VOVR" FirstElSrcRngStartPos="0" lnHash="-1824414877" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="139" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1909385742" lang="cpp" violId="c38b3cc2-cf34-350e-ad49-e50acdc01152" locEndPos="0" locEndLn="140" goals="0," locStartln="139" sev="3" locRef="4" tool="c++test" lineHash="-1824414877" unbViolId="2b59c71a-205c-3fa0-9a4a-47ef805ac1c1" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1824414877" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="139" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="139" srcRngEndLn="140" desc="THREAD_CREATE(thread2, Controller_Thread);" ElType="CP" rngLn="139">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread2&quot; is never used" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="140" rule="CERT_C-DCL22-a" FirstElSrcRngStartPos="0" lnHash="-1824414877" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="139" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-417811701" lang="cpp" violId="802f8a3e-8b68-398e-b047-82f242804d10" locEndPos="0" locEndLn="140" goals="0," locStartln="139" sev="3" locRef="4" tool="c++test" lineHash="-1824414877" unbViolId="e0b7446c-f3ba-311a-8562-af5ff9b6f4ce" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1824414877" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="139" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="139" srcRngEndLn="140" desc="THREAD_CREATE(thread2, Controller_Thread);" ElType="CP" rngLn="139">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread2&quot; is never used" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="140" rule="MISRA2008-0_1_6" FirstElSrcRngStartPos="0" lnHash="-1824414877" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="139" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-52763601" lang="cpp" violId="358b1496-d597-323b-bf4c-713465b8443a" locEndPos="0" locEndLn="140" goals="0," locStartln="139" sev="2" locRef="4" tool="c++test" lineHash="-1824414877" unbViolId="47cceaf6-b695-3e99-901f-25737abe59aa" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1824414877" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="139" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="139" srcRngEndLn="140" desc="THREAD_CREATE(thread2, Controller_Thread);" ElType="CP" rngLn="139">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread2&quot; is never used" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="140" rule="MISRA2012-RULE-2_2_b" FirstElSrcRngStartPos="0" lnHash="-1824414877" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="139" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1386143848" lang="cpp" violId="5daa5bd6-0bbc-32b5-8214-fa31a9277325" locEndPos="0" locEndLn="140" goals="0," locStartln="139" sev="2" locRef="4" tool="c++test" lineHash="-1824414877" unbViolId="0164525e-bc1f-30ca-99a3-e11f6029b1bc" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1824414877" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="139" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="139" srcRngEndLn="140" desc="THREAD_CREATE(thread2, Controller_Thread);" ElType="CP" rngLn="139">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread2&quot; is never used" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="140" rule="MISRAC2012-RULE_2_2-b" FirstElSrcRngStartPos="0" lnHash="-1824414877" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="139" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1742675199" lang="cpp" violId="10954a94-b93a-3955-af8c-134d37a5e72b" locEndPos="0" locEndLn="140" goals="0," locStartln="139" sev="2" locRef="4" tool="c++test" lineHash="-1824414877" unbViolId="258dad70-a995-344c-b61f-6eb53b57fed2" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1824414877" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="139" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="139" srcRngEndLn="140" desc="THREAD_CREATE(thread2, Controller_Thread);" ElType="CP" rngLn="139">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="The type 'int' of function argument number '2' does not match declared type 'unsigned long'" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="3" auth="username" locRef="4" rule="PB-11" lnHash="-1824414877" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-1824414877" unbViolId="69d63863-3d2b-369b-8836-52dcbc323fdb" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7cb0b32a-d17c-3b6a-b83c-9400117cdc91" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="The type 'int' of function argument number '5' does not match declared type 'unsigned long'" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="3" auth="username" locRef="4" rule="PB-11" lnHash="-1824414877" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-1824414877" unbViolId="a72a5d1b-bac5-321d-bf55-e115a85c397b" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79d0c4ba-4cf4-37e4-849d-03cabf50d169" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="The type 'DWORD __stdcall (void *)*' of function argument number '3' does not match declared type 'DWORD __stdcall (LPVOID)*'" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="3" auth="username" locRef="4" rule="PB-11" lnHash="-1824414877" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-1824414877" unbViolId="f30a6ef7-d934-3867-81ce-9b784f0cc705" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="73ce1189-89a7-343a-a188-3575b0f416b3" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="2" auth="username" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="681b9260-a385-3688-84dd-86611b8c962e" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8888e6cf-7d07-32ce-b44b-2209f02b4abc" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="4" auth="username" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="b4cf2a25-9285-350d-a1e6-e62c89ca0ac8" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ffe3d882-7098-317c-8f91-f15112a74990" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="4" auth="username" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="7e4140d7-77d4-37d1-8c95-ea7ca4f8bbfb" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9dfb0663-4082-3d37-8348-7f3cb81d0cb4" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="3" auth="username" locRef="4" rule="CODSTA-131" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="973d3e92-3620-333a-a2a3-5f485c220b07" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae02730f-716d-3030-ac71-cfba5d53d016" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1824414877" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1824414877" unbViolId="b73b4a73-f361-31dc-ab46-7768b287d484" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="899308c0-1640-3df9-b726-95705dff180b" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="3c8be09b-24ba-31a5-ac84-2d7ef1b742fe" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e5efa88-0232-3348-93e7-5e483784c517" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="2" auth="username" locRef="4" rule="MISRA2008-5_0_4_a" lnHash="-1824414877" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-1824414877" unbViolId="1a4d720b-7bfd-3d1c-850e-1973f14b5da9" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e321afa7-b988-3428-a426-97a089f665e6" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="2" auth="username" locRef="4" rule="AUTOSAR-M5_0_4-a" lnHash="-1824414877" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1824414877" unbViolId="05f742d9-00c7-37ea-8cc1-3df1f4b34274" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7a0bd96-a4dd-3fbd-a266-1023a60f4c98" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="3" auth="username" locRef="4" rule="MISRA2004-10_1_a" lnHash="-1824414877" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1824414877" unbViolId="ac6681c6-be2c-3e88-8447-9db9805b4b96" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b69a1ccd-d4d8-396e-85fb-1754aa90a7a9" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="3" auth="username" locRef="4" rule="HICPP-4_2_1-a" lnHash="-1824414877" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-1824414877" unbViolId="2f58c8fc-904c-3cb2-a060-7bbfafc834ff" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7cae5aa-d239-3063-8546-d7b0978b4b01" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="3" auth="username" locRef="4" rule="CERT_CPP-EXP56-a" lnHash="-1824414877" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1824414877" unbViolId="048f9006-0029-3cc9-aa23-635f9c46f3b1" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aae3afd2-6cd1-3582-97d7-9a33d16c5bb3" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-96" lnHash="-1824414877" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1824414877" unbViolId="0f69a704-c6c8-305d-abe9-dcf1c3436902" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eedbc150-35d5-3f20-9603-37622b09f979" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Pointer to function 'Controller_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="3" auth="username" locRef="4" rule="MISRA2004-16_9" lnHash="-1824414877" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-1824414877" unbViolId="b92fb8af-d393-3878-b66d-9bd58a3f361d" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="248ddd27-d1fa-3a39-bd03-d781c1681ba5" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Pointer to function 'Controller_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="2" auth="username" locRef="4" rule="AUTOSAR-M8_4_4-a" lnHash="-1824414877" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-1824414877" unbViolId="c7131c0e-0c51-37f3-bff5-13cc9ad21c74" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d14fd8ce-5c0b-36e5-9fd7-af0b3585b2e9" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Pointer to function 'Controller_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="2" auth="username" locRef="4" rule="MISRA2008-8_4_4" lnHash="-1824414877" rule.header="A function identifier shall either be used to call the function or it shall be preceded by '&amp;'" tool="c++test" lineHash="-1824414877" unbViolId="721c69ae-bc3f-3e68-89de-b9b910c38f3c" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bcfacf8d-bcda-3141-b145-790dae75f8f6" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="2" auth="username" locRef="4" rule="MISRA2008-5_0_4_a" lnHash="-1824414877" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-1824414877" unbViolId="e029d97d-e0fb-3ac1-8350-ff09700be7cb" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0d24e08-3ad5-3027-83a7-270c6577161b" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="2" auth="username" locRef="4" rule="AUTOSAR-M5_0_4-a" lnHash="-1824414877" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1824414877" unbViolId="d4c70cc6-064e-36dc-aaeb-51b8c6552d58" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f7c24fde-e6f2-3b82-84ad-fdd2bba49757" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="3" auth="username" locRef="4" rule="MISRA2004-10_1_a" lnHash="-1824414877" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1824414877" unbViolId="58935253-60ea-3c39-945d-167beed54fda" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07fb43cb-75ac-3e22-891b-9265a9b24ab6" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="2" auth="username" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="1cee5ca4-0a5b-3ff6-b536-4f278573be69" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9b8c8338-885d-35e3-98fc-154f089aa768" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="4" auth="username" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="f9e70164-bd5b-3f8f-b390-a3b2e83fcbc9" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e54c9f3f-6cf9-38c0-a3f8-7f5372303adb" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="4" auth="username" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="5bbee40b-9509-3a9d-87ed-f463c82f587f" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6676509c-8513-3588-a7a3-f6d6df78b690" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="3" auth="username" locRef="4" rule="CODSTA-131" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="2e372dd8-2e43-3724-aafc-e9a52c663cdf" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b42a657-f1dd-358a-aff7-43424ddff91d" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1824414877" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1824414877" unbViolId="8a7a0c4d-ec33-3ab5-ad29-37c7035a2427" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f76e969-e6e9-3ec9-84a1-9497e26b132a" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="fffa6780-11ba-36d7-9635-db65d8953829" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ec592988-e13b-3b20-872c-6f6b4f5becd5" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="3" auth="username" locRef="4" rule="CODSTA-131" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="cbff70a6-52a0-3ced-a32f-f9f005bad029" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b89b4120-732d-3041-a51b-c395ac064e2e" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1824414877" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1824414877" unbViolId="58d7ef5c-781d-3e45-88a2-537997cab70e" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b18ccc64-6c1e-3b06-bc54-761481d99e15" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="b7fcbf21-11df-33ef-997b-12fa810b2399" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="30848ff8-a95d-3f17-b820-b96acde3518e" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="139" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="3" auth="username" locRef="4" rule="HICPP-4_2_1-a" lnHash="-1824414877" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-1824414877" unbViolId="92a9e60f-ebaa-30a5-99e5-93031e2df6ae" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab9bfdf1-cd51-3007-acf5-d9feea0cee27" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1305984162" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1305984162" unbViolId="88c73c63-2629-33cc-bcb0-f31de0b6e32a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e01c65f7-3577-337d-8da2-2be9df2d2f41" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1305984162" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1305984162" unbViolId="35bd49b5-03b7-3f43-ba3a-24dba2d9e9af" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e291d1ae-a52d-386f-aefa-ad51681839ca" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1305984162" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1305984162" unbViolId="00d2707d-b797-3487-8a8c-c8665990069a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dde7806a-74cb-341e-afa9-a6d1e8c791db" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <FlowViol msg="Value of &quot;thread3&quot; is never used" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="141" rule="AUTOSAR-A0_1_1-a" FirstElSrcRngStartPos="0" lnHash="-1305984162" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="140" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="755462121" lang="cpp" violId="d36e3470-14ed-3e87-b292-fb8c83ebfc78" locEndPos="0" locEndLn="141" goals="0," locStartln="140" sev="2" locRef="4" tool="c++test" lineHash="-1305984162" unbViolId="f6a2e028-2ed7-3085-ae11-d9c97b99f2e2" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1305984162" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="140" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="140" srcRngEndLn="141" desc="THREAD_CREATE(thread3, Physics::Physics_Thread);" ElType="CP" rngLn="140">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread3&quot; is never used" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="141" rule="BD-PB-VOVR" FirstElSrcRngStartPos="0" lnHash="-1305984162" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="140" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-398201901" lang="cpp" violId="ad87f6a7-0ebf-355f-a003-9dbd66a58d4d" locEndPos="0" locEndLn="141" goals="0," locStartln="140" sev="3" locRef="4" tool="c++test" lineHash="-1305984162" unbViolId="ef2b56ed-885f-34e1-9f1b-537f11e307f4" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1305984162" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="140" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="140" srcRngEndLn="141" desc="THREAD_CREATE(thread3, Physics::Physics_Thread);" ElType="CP" rngLn="140">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread3&quot; is never used" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="141" rule="CERT_C-DCL22-a" FirstElSrcRngStartPos="0" lnHash="-1305984162" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="140" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-2123739862" lang="cpp" violId="59bf5a74-2fa9-39c1-b7cb-beda8248173e" locEndPos="0" locEndLn="141" goals="0," locStartln="140" sev="3" locRef="4" tool="c++test" lineHash="-1305984162" unbViolId="914da37d-6939-3f5c-b15e-de2e3591ad69" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1305984162" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="140" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="140" srcRngEndLn="141" desc="THREAD_CREATE(thread3, Physics::Physics_Thread);" ElType="CP" rngLn="140">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread3&quot; is never used" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="141" rule="MISRA2008-0_1_6" FirstElSrcRngStartPos="0" lnHash="-1305984162" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="140" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1700259314" lang="cpp" violId="46054ad7-3243-3d98-b706-0d1364e2e077" locEndPos="0" locEndLn="141" goals="0," locStartln="140" sev="2" locRef="4" tool="c++test" lineHash="-1305984162" unbViolId="be280bb6-1dee-3b07-88e1-4da2e9cdb4bf" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1305984162" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="140" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="140" srcRngEndLn="141" desc="THREAD_CREATE(thread3, Physics::Physics_Thread);" ElType="CP" rngLn="140">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread3&quot; is never used" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="141" rule="MISRA2012-RULE-2_2_b" FirstElSrcRngStartPos="0" lnHash="-1305984162" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="140" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="887889481" lang="cpp" violId="0fd051f3-5e30-3633-a6b1-e13595ee90ca" locEndPos="0" locEndLn="141" goals="0," locStartln="140" sev="2" locRef="4" tool="c++test" lineHash="-1305984162" unbViolId="4e4d657c-228e-3e2a-b9c9-593c12d6a8b6" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1305984162" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="140" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="140" srcRngEndLn="141" desc="THREAD_CREATE(thread3, Physics::Physics_Thread);" ElType="CP" rngLn="140">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread3&quot; is never used" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="141" rule="MISRAC2012-RULE_2_2-b" FirstElSrcRngStartPos="0" lnHash="-1305984162" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="140" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="28173022" lang="cpp" violId="df363876-ccf1-3499-b2da-50d150bcbacb" locEndPos="0" locEndLn="141" goals="0," locStartln="140" sev="2" locRef="4" tool="c++test" lineHash="-1305984162" unbViolId="e8b92b4a-aafd-3359-9653-4e93ee8db2c3" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1305984162" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="140" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="140" srcRngEndLn="141" desc="THREAD_CREATE(thread3, Physics::Physics_Thread);" ElType="CP" rngLn="140">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="The type 'int' of function argument number '2' does not match declared type 'unsigned long'" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="3" auth="username" locRef="4" rule="PB-11" lnHash="-1305984162" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-1305984162" unbViolId="a1334aba-8806-3e15-abc2-fde22aa81061" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3884b3c6-21e2-36ee-8c5e-169026006010" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="The type 'int' of function argument number '5' does not match declared type 'unsigned long'" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="3" auth="username" locRef="4" rule="PB-11" lnHash="-1305984162" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-1305984162" unbViolId="35d6dd52-0862-3840-911e-7eda498c9f67" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e0804fc-e7e4-37af-be33-516edcf6b0dd" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="The type 'DWORD __stdcall (void *)*' of function argument number '3' does not match declared type 'DWORD __stdcall (LPVOID)*'" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="3" auth="username" locRef="4" rule="PB-11" lnHash="-1305984162" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-1305984162" unbViolId="a20b6273-3fd1-3ffa-b036-8ba82057404c" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43cb2f6e-ca3a-3c22-b0fc-a35830ebc972" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="2" auth="username" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="e7df1b45-c895-3f5a-8f3f-a47843058a44" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="522d65af-c4ec-30ec-9f36-90be0da67210" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="4" auth="username" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="4a152f9d-ccd5-37a1-b5e1-4f6ff6c0b0b1" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4f5c8de-da36-3f66-879b-877a9a8710a3" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="4" auth="username" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="30255ee5-9048-3915-b729-2e34de9d46d5" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8423b4f3-4a9e-3691-a621-7c81ed0974ae" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="3" auth="username" locRef="4" rule="CODSTA-131" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="9d8aea86-fc32-38f2-9735-82e7d1b92f0a" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ccdd84e9-0391-3e1c-ab85-c0938a42d59a" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1305984162" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1305984162" unbViolId="ceda155a-ba11-3ba6-87e5-c66e908a5a18" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="46335d83-7383-3a8e-bd7d-293a096c3e93" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="cf62532c-605b-363a-ad42-ad9578d12979" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3489ba6-24fe-328e-afd9-a1b3395fa10d" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="2" auth="username" locRef="4" rule="MISRA2008-5_0_4_a" lnHash="-1305984162" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-1305984162" unbViolId="f4b09fa2-160b-30e9-8d8a-dc2c5325ee9a" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce786d4c-95aa-3079-bf2f-984957d241a9" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="2" auth="username" locRef="4" rule="AUTOSAR-M5_0_4-a" lnHash="-1305984162" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1305984162" unbViolId="aa45cf40-daf3-3b97-a619-d19c75fa66db" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0103ee8f-5220-3727-b3c7-3807f629151b" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="3" auth="username" locRef="4" rule="MISRA2004-10_1_a" lnHash="-1305984162" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1305984162" unbViolId="3ad4ee25-70d6-3cef-9eec-c20fbbe670c4" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83510315-2d7c-3e1b-ac64-278173fcf288" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="3" auth="username" locRef="4" rule="HICPP-4_2_1-a" lnHash="-1305984162" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-1305984162" unbViolId="64497167-8e67-3fab-8fa5-713708788eee" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="574de688-09bb-3eab-88e9-a7aedd7b290f" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="3" auth="username" locRef="4" rule="CERT_CPP-EXP56-a" lnHash="-1305984162" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1305984162" unbViolId="11829535-7109-3f4f-aabe-add19e9305e7" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bed2cf56-977d-38b1-a639-718729cdea96" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-96" lnHash="-1305984162" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1305984162" unbViolId="b1464fd9-88df-38bd-8596-9df89d4e8cb6" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67144eb6-6c11-3111-8026-33c8a44c4358" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Pointer to function 'Physics_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="3" auth="username" locRef="4" rule="MISRA2004-16_9" lnHash="-1305984162" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-1305984162" unbViolId="fea66988-c6eb-35ab-8a4c-344ae61bc6e2" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="627d7acf-4ebb-352b-834d-30de02defde1" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Pointer to function 'Physics_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="2" auth="username" locRef="4" rule="AUTOSAR-M8_4_4-a" lnHash="-1305984162" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-1305984162" unbViolId="6f2e9800-e285-39a2-85f5-e5d4f57cbe83" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3540fab-3925-3cec-9c30-32c23132a192" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Pointer to function 'Physics_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="2" auth="username" locRef="4" rule="MISRA2008-8_4_4" lnHash="-1305984162" rule.header="A function identifier shall either be used to call the function or it shall be preceded by '&amp;'" tool="c++test" lineHash="-1305984162" unbViolId="02b8a9ac-8bd4-3623-9d96-6744dbd475ef" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88df6c9e-b3a1-3b2f-b0b1-b8382e97b6b4" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="2" auth="username" locRef="4" rule="MISRA2008-5_0_4_a" lnHash="-1305984162" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-1305984162" unbViolId="0e02aebc-9a38-36c6-b4d8-e5e208a7d11d" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="decae4e7-e307-3c1a-8604-c9f50ee464e5" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="2" auth="username" locRef="4" rule="AUTOSAR-M5_0_4-a" lnHash="-1305984162" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1305984162" unbViolId="b1948085-1f14-3b0c-bca2-67262fb5bb75" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="815b3291-f120-3b85-ab02-33d46f665e03" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="3" auth="username" locRef="4" rule="MISRA2004-10_1_a" lnHash="-1305984162" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1305984162" unbViolId="d9ccb14f-773c-317d-96eb-f86f2c7f5748" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42a97eca-cc6f-3403-bfd5-996ae78d326e" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="2" auth="username" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="dc875635-3f7d-3523-bc8a-a7a6be8a1a20" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="789e6be9-3df5-326e-99dc-f4a8f79b9e1a" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="4" auth="username" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="1be1adce-4bdc-3066-8653-dac103d18edc" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a09c9315-de2d-3044-bc90-73745e797161" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="4" auth="username" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="33da188b-a883-3cfa-bba8-5ac50cfb877c" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e938de31-058d-3e89-aebd-12c88d4b18a1" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="3" auth="username" locRef="4" rule="CODSTA-131" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="a5d7139c-6cfc-36b1-a6e5-6621cafe2896" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="829df1af-a6e1-3e74-b2b2-149027d96e3a" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1305984162" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1305984162" unbViolId="323a48d3-33f7-3ec0-9ec2-9e3b5a1befe0" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a572c64f-d9c3-340e-85b5-33131375d99a" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="fd01fd22-e23f-369b-93da-1251ce97f452" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f87564e-08ca-3e65-b153-95785c8df766" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="3" auth="username" locRef="4" rule="CODSTA-131" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="57486576-047d-35cf-92b7-d2587525415c" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c284b28-a30e-3f53-b84d-e03abddc00ff" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1305984162" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1305984162" unbViolId="e9a71b03-26e6-3078-8a83-11143a53ec6f" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f3866da-3498-37fc-95d6-49fcf273e503" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="3f3199c1-9a52-3290-9605-85bf367c2d77" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ee8a862-5592-35d0-935a-2705d4eff3f6" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="140" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="3" auth="username" locRef="4" rule="HICPP-4_2_1-a" lnHash="-1305984162" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-1305984162" unbViolId="d4f43d19-dbd5-3a2d-9fe7-86a9ccdb7a98" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8772cd6-b544-387a-8157-971ec46371c1" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-604051279" rule.header="Tabs should be avoided" tool="c++test" lineHash="-604051279" unbViolId="35a7cc82-6d4c-3a3e-a162-2f01e7100771" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="696bd9c4-015b-349b-9f12-56d08c84f63d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-604051279" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-604051279" unbViolId="d3a3fbd6-2d55-3de7-b430-9ecc5dacc8e8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="41df7c96-bc34-3b41-86a2-4141af50c042" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-604051279" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-604051279" unbViolId="acb0061d-c6c2-368d-9534-5330b3ab5586" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="904f6f27-c7cc-3877-a9d3-43489f30e265" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <FlowViol msg="Value of &quot;thread4&quot; is never used" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="142" rule="AUTOSAR-A0_1_1-a" FirstElSrcRngStartPos="0" lnHash="-604051279" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="141" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="244927494" lang="cpp" violId="2cbf7c23-fc02-3ffc-bbe7-6b77fc8c4991" locEndPos="0" locEndLn="142" goals="0," locStartln="141" sev="2" locRef="4" tool="c++test" lineHash="-604051279" unbViolId="e143a01d-61da-3db1-935e-5a68c753ed5b" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-604051279" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="141" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="141" srcRngEndLn="142" desc="THREAD_CREATE(thread4, Render::Render_Thread);" ElType="CP" rngLn="141">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread4&quot; is never used" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="142" rule="BD-PB-VOVR" FirstElSrcRngStartPos="0" lnHash="-604051279" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="141" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-874657732" lang="cpp" violId="9a54b270-122d-3cdc-8302-716f0824c3db" locEndPos="0" locEndLn="142" goals="0," locStartln="141" sev="3" locRef="4" tool="c++test" lineHash="-604051279" unbViolId="fbcff2af-9e31-3611-8949-2e3eeb59029c" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-604051279" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="141" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="141" srcRngEndLn="142" desc="THREAD_CREATE(thread4, Render::Render_Thread);" ElType="CP" rngLn="141">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread4&quot; is never used" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="142" rule="CERT_C-DCL22-a" FirstElSrcRngStartPos="0" lnHash="-604051279" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="141" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1561039163" lang="cpp" violId="5666b891-1fa7-3bc6-88a2-f528c3edb761" locEndPos="0" locEndLn="142" goals="0," locStartln="141" sev="3" locRef="4" tool="c++test" lineHash="-604051279" unbViolId="665a96da-2444-3deb-96ea-f29a23828ac5" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-604051279" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="141" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="141" srcRngEndLn="142" desc="THREAD_CREATE(thread4, Render::Render_Thread);" ElType="CP" rngLn="141">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread4&quot; is never used" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="142" rule="MISRA2008-0_1_6" FirstElSrcRngStartPos="0" lnHash="-604051279" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="141" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1187628575" lang="cpp" violId="1965ed5c-5fca-3b02-9e4a-2e2b24164904" locEndPos="0" locEndLn="142" goals="0," locStartln="141" sev="2" locRef="4" tool="c++test" lineHash="-604051279" unbViolId="6ecc89ce-8127-30aa-bd0a-4101b2625854" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-604051279" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="141" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="141" srcRngEndLn="142" desc="THREAD_CREATE(thread4, Render::Render_Thread);" ElType="CP" rngLn="141">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread4&quot; is never used" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="142" rule="MISRA2012-RULE-2_2_b" FirstElSrcRngStartPos="0" lnHash="-604051279" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="141" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="393362854" lang="cpp" violId="828e791c-3998-3e27-b247-0aae1241707d" locEndPos="0" locEndLn="142" goals="0," locStartln="141" sev="2" locRef="4" tool="c++test" lineHash="-604051279" unbViolId="abf1103e-c2cf-38a2-b4a3-49b3cc883bed" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-604051279" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="141" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="141" srcRngEndLn="142" desc="THREAD_CREATE(thread4, Render::Render_Thread);" ElType="CP" rngLn="141">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread4&quot; is never used" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="142" rule="MISRAC2012-RULE_2_2-b" FirstElSrcRngStartPos="0" lnHash="-604051279" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="141" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="573817137" lang="cpp" violId="e412b572-0377-3893-9f3d-4c16922c3b47" locEndPos="0" locEndLn="142" goals="0," locStartln="141" sev="2" locRef="4" tool="c++test" lineHash="-604051279" unbViolId="d6f4c6d3-9f10-33bd-9369-52a25aded5c0" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-604051279" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="141" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="141" srcRngEndLn="142" desc="THREAD_CREATE(thread4, Render::Render_Thread);" ElType="CP" rngLn="141">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="The type 'int' of function argument number '2' does not match declared type 'unsigned long'" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="3" auth="username" locRef="4" rule="PB-11" lnHash="-604051279" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-604051279" unbViolId="787f566c-415a-3a68-aa0a-e5f3af105a9e" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc0367cc-3301-350b-a3ab-3d9fcc0139fb" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The type 'int' of function argument number '5' does not match declared type 'unsigned long'" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="3" auth="username" locRef="4" rule="PB-11" lnHash="-604051279" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-604051279" unbViolId="9e13e04c-fc12-3e9b-a96e-9c3daf529df8" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ced10fc4-98e2-3700-8336-ca808c8aaee3" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The type 'DWORD __stdcall (void *)*' of function argument number '3' does not match declared type 'DWORD __stdcall (LPVOID)*'" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="3" auth="username" locRef="4" rule="PB-11" lnHash="-604051279" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-604051279" unbViolId="7195e8d5-ec3b-3ac1-b6c6-0b804f28c9d5" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="248ee9cf-f4fb-3b13-b0d6-7a785a82b9fb" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="2" auth="username" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="bd848078-d43e-3009-bce1-c6c27855087d" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6268a51f-b4fc-3698-a174-d8e9b0f62485" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="4" auth="username" locRef="4" rule="HICPP-2_5_3-a" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="6eb613dd-52c4-3071-9c8b-bd61e1718f95" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce1e5219-9143-32b1-9b64-a64055d3d361" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="4" auth="username" locRef="4" rule="CODSTA-MCPP-04" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="46fec51e-977e-3cc0-a65d-ddb7f556c585" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7c2f47c-8a93-335a-8859-e131b0c9f8fe" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="3" auth="username" locRef="4" rule="CODSTA-131" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="b0a25c1a-9b78-3358-96fa-00563992fc8b" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52aa7ac8-16a1-364b-9658-bdf0e62de67f" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-604051279" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-604051279" unbViolId="a31995f3-bd47-3e99-85d0-263277412de2" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ad8b31c-1fcb-3441-98ea-a02ece2454f3" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="b32d67ee-c067-3501-8673-ecfb7909aa1c" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e61a1b39-2dad-3514-a838-cfc602290436" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="2" auth="username" locRef="4" rule="MISRA2008-5_0_4_a" lnHash="-604051279" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-604051279" unbViolId="3ee76b7a-eeb8-3f4d-8ee2-cd0ae5dfdf46" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc8b2bc3-41c3-3d5d-b1ff-a91502ec29a1" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="2" auth="username" locRef="4" rule="AUTOSAR-M5_0_4-a" lnHash="-604051279" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-604051279" unbViolId="f368c395-93c1-3121-b133-6310b462b15a" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="043a91a2-9192-3c7f-b40b-3bdb5797805d" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="3" auth="username" locRef="4" rule="MISRA2004-10_1_a" lnHash="-604051279" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-604051279" unbViolId="ba908ed4-cd24-3423-a98f-5d067a93c5ba" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da9a7420-6eea-32f8-a19a-68d2d1b44572" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="3" auth="username" locRef="4" rule="HICPP-4_2_1-a" lnHash="-604051279" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-604051279" unbViolId="95c673b2-eca0-3dd5-bd32-30aac6e9a5a6" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db189546-dae5-37ab-933a-65fcade5ebab" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="3" auth="username" locRef="4" rule="CERT_CPP-EXP56-a" lnHash="-604051279" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-604051279" unbViolId="9dc211d9-5f7d-3fab-ad12-424c1d4540a2" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e7955728-a2b8-330e-ab2d-618bd6446535" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-96" lnHash="-604051279" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-604051279" unbViolId="a5849596-7bb4-395d-8653-1b08a7f29859" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1046211c-2f9d-36fb-9a1d-ce5c2c55482d" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Pointer to function 'Render_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="3" auth="username" locRef="4" rule="MISRA2004-16_9" lnHash="-604051279" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-604051279" unbViolId="cd19b355-d3da-348f-a04c-61656932e3ca" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="50d0d989-c55f-3bf9-8fb8-4aeec5123fd1" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Pointer to function 'Render_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="2" auth="username" locRef="4" rule="AUTOSAR-M8_4_4-a" lnHash="-604051279" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-604051279" unbViolId="2a8b1dfe-f43d-3932-977d-65e5aafb4de7" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0da38e20-2a5c-32b0-8b90-01d7d7246d8c" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Pointer to function 'Render_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="2" auth="username" locRef="4" rule="MISRA2008-8_4_4" lnHash="-604051279" rule.header="A function identifier shall either be used to call the function or it shall be preceded by '&amp;'" tool="c++test" lineHash="-604051279" unbViolId="c7311f30-3169-3e38-887e-2d3cb75c47c7" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="677cb69c-19f8-30b2-8dcc-3d766a2020e1" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="2" auth="username" locRef="4" rule="MISRA2008-5_0_4_a" lnHash="-604051279" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-604051279" unbViolId="605ecd56-9685-30dc-828f-e3d36e5bd6af" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1e3a0ad-d874-31f4-9ace-c0f8b2620bef" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="2" auth="username" locRef="4" rule="AUTOSAR-M5_0_4-a" lnHash="-604051279" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-604051279" unbViolId="e5e0ac8f-982d-34fe-8806-f0cf7201e140" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3b3f1d1-fb71-3dba-bf4c-90c6661f320b" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="3" auth="username" locRef="4" rule="MISRA2004-10_1_a" lnHash="-604051279" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-604051279" unbViolId="dfeafc12-6edf-3a38-b653-7d7d98a87d04" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69fb385b-2c2a-3cbf-b0ed-e33b340345de" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="2" auth="username" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="2124e40d-2e39-3c34-9a4e-6043a160e9a4" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a1edae7-3236-3df5-b487-f971ddf4b945" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="4" auth="username" locRef="4" rule="HICPP-2_5_3-a" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="27e1d484-220a-3787-a0ee-f03140978441" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ce3f253-a663-35cd-85c2-f6b5d9f5ad5e" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="4" auth="username" locRef="4" rule="CODSTA-MCPP-04" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="22d9a157-8009-3faf-b315-f141c0f5d193" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a571c98d-9c48-3fe1-9e68-a734c55b897f" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="3" auth="username" locRef="4" rule="CODSTA-131" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="2484f823-49c4-3722-9103-25a46bb8ad8f" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="005300c6-c91c-39a3-b722-2e593c70860d" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-604051279" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-604051279" unbViolId="bcaa8f20-68c2-3823-a66d-921d1eea97f0" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9cfb2c4c-8d14-35e9-9036-f82614826965" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="34c392b2-519e-3b73-9df8-35319240cd23" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4afc20ce-84f7-3f01-ab2a-cd2c06ba9b90" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="3" auth="username" locRef="4" rule="CODSTA-131" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="83c18aa3-a19e-3aca-994f-05e537d5e5bc" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f82220ad-f8e7-3261-aee7-194fba15a82c" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-604051279" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-604051279" unbViolId="c20e38fc-02e6-3301-804d-d398898389f7" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16da0e3f-1c32-3a60-9cfe-2a5eb09825a8" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="4dba5714-40a7-391e-97aa-8b6858f54ec6" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="56cc240e-fa26-3cda-ab42-938fc517a416" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="141" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="3" auth="username" locRef="4" rule="HICPP-4_2_1-a" lnHash="-604051279" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-604051279" unbViolId="8d9670a3-2fd1-34fd-b818-9b03c91ea533" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03e35d6a-f370-36b9-bd0c-1200c56d27f4" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The 'runGameThreads2' function should be preceded by a comment that contains the '@brief' tag" ln="144" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="144" sev="3" auth="username" locRef="4" rule="COMMENT-14" lnHash="989655515" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="989655515" unbViolId="4a82a50a-c371-3760-92bd-a5fe0ef432ca" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e24b0c0-e442-3a87-b2e0-c048cb87179e" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="The 'runGameThreads2' function should be preceded by a comment that contains the '@brief' tag" ln="144" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="144" sev="2" auth="username" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="989655515" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="989655515" unbViolId="839c4539-e095-3eb6-a7dc-b175b2a95a1f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0ec3d3b-f4ca-3ed7-b458-f91f00bb2110" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'runGameThreads2'" ln="144" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="144" sev="3" auth="username" locRef="4" rule="FORMAT-28" lnHash="989655515" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="989655515" unbViolId="5e6fed8c-1737-3f64-a404-00a05bab5a63" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6fbeba62-aba3-3e89-a3e7-1851117c49d2" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Function 'runGameThreads2' has Cyclomatic Complexity value: 1" ln="144" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="144" sev="5" auth="username" locRef="4" rule="METRICS-29" lnHash="989655515" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="989655515" unbViolId="2113fc46-e5f1-3e0e-a86d-ae3f8a05508e" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62e8f346-3c27-3232-88f4-f706d75ddec1" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Function 'runGameThreads2' has Essential Complexity value: 1" ln="144" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="144" sev="5" auth="username" locRef="4" rule="METRICS-33" lnHash="989655515" rule.header="Report Essential Complexity" tool="c++test" lineHash="989655515" unbViolId="82f268e2-7715-3a56-8588-f3ae3fef6bdb" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e38303e8-c6ff-3252-a31e-5e169ae27902" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Naming convention not followed: runGameThreads2" ln="144" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="144" sev="3" auth="username" locRef="4" rule="NAMING-17" lnHash="989655515" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="989655515" unbViolId="424f9ae0-4073-3128-8a5d-20c5778026f8" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3965ba11-739f-3672-ad9f-4fd1ec70127a" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="The definition of the 'runGameThreads2' function is not preceded by a comment" ln="144" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="144" sev="3" auth="username" locRef="4" rule="COMMENT-04" lnHash="989655515" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="989655515" unbViolId="b2fa9475-99e8-3002-8075-9fe2b5805e00" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b60feacc-d712-36c6-b78c-ee9ecb0dff5f" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="The definition of the 'runGameThreads2' function is not preceded by a comment" ln="144" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="144" sev="4" auth="username" locRef="4" rule="JSF-134" lnHash="989655515" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="989655515" unbViolId="d9c7c7b2-e647-3580-a9f0-d1391c3e8112" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="958266be-bfc3-3666-91a8-1a74f2be9c8d" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="144" sev="4" auth="username" locRef="4" rule="OWASP2019-API9-e" lnHash="989655515" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="989655515" unbViolId="f65f170d-85c7-38a7-aeb1-787946cbf9dc" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c35eca1-5610-34b1-acd2-6a637412f530" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="144" sev="2" auth="username" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="989655515" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="989655515" unbViolId="1834ee09-517e-3726-ba54-028562689e54" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9494275-e72d-3dff-91e6-74020634f51d" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="144" sev="4" auth="username" locRef="4" rule="JSF-137" lnHash="989655515" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="989655515" unbViolId="fab5672a-5a63-32a6-9379-15b05eafe749" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce0ed7aa-64e2-3ee6-bd66-b91f887d617f" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="144" sev="4" auth="username" locRef="4" rule="MISRA-023" lnHash="989655515" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="989655515" unbViolId="90c925e3-cc47-3755-9e58-ceb797d19f8d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="53deea04-cfb3-3e83-a11c-19f2bb4c5dcf" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="144" sev="2" auth="username" locRef="4" rule="MISRA2008-3_3_1" lnHash="989655515" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="989655515" unbViolId="54045293-0008-3bb1-8a49-7eb063d12ae5" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e37660e3-b6ab-3a44-80ee-bfcb8761b7e9" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="144" sev="3" auth="username" locRef="4" rule="CERT_C-DCL15-a" lnHash="989655515" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="989655515" unbViolId="773c8a21-07e1-3123-a766-860da38d27d8" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d644e52-35af-3845-93f3-ef74fddb415e" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="144" sev="4" auth="username" locRef="4" rule="MISRA2004-8_10" lnHash="989655515" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="989655515" unbViolId="e8518555-f131-30ae-af2b-f10c488e3a5f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f3e15f4-bc92-39f9-9aa4-071f536e37fe" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="The name 'runGameThreads2' should be composed only of lowercase letters" ln="144" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="144" sev="3" auth="username" locRef="4" rule="JSF-051" lnHash="989655515" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="989655515" unbViolId="57297c9c-79e5-3bb7-a417-e36e1f20dbd1" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be8b56d5-5aed-3cf3-b7f7-2ead27319e6f" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="The name 'runGameThreads2' should be composed only of lowercase letters" ln="144" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="144" sev="3" auth="username" locRef="4" rule="NAMING-44" lnHash="989655515" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="989655515" unbViolId="fc270bb2-b96d-384d-86a1-97d3da8284b0" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0731ede-be11-3d25-8aef-d7e86cb5a5e8" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Global function 'runGameThreads2' is declared in global namespace" ln="144" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="144" sev="4" auth="username" locRef="4" rule="JSF-098" lnHash="989655515" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="989655515" unbViolId="ba80b854-40bf-340d-893f-de16b417656f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="945f8f67-2b8f-3add-b398-5d0a54fa4e99" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Global function 'runGameThreads2' is declared in global namespace" ln="144" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="144" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-36" lnHash="989655515" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="989655515" unbViolId="a166aaf8-01f2-336b-be91-811a91a6dcce" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bad8557d-88da-3b45-8e2e-40e63091116c" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Global function 'runGameThreads2' is declared in global namespace" ln="144" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="144" sev="2" auth="username" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="989655515" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="989655515" unbViolId="606db2f0-a864-3cbe-93a8-7ed0885cf3cf" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1465eee0-8519-3755-bf36-10fdc4d0bd8d" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Global function 'runGameThreads2' is declared in global namespace" ln="144" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="144" sev="2" auth="username" locRef="4" rule="MISRA2008-7_3_1" lnHash="989655515" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="989655515" unbViolId="7706272e-0f02-3ca8-8472-8e7275371c55" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75f98a08-9bc4-353a-9dff-3978c8abb505" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="The 'runGameThreads2' function is not used in the testing scope" ln="144" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="144" sev="3" auth="username" locRef="4" rule="GLOBAL-UNUSEDFUNC" lnHash="989655515" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="989655515" unbViolId="407f71a2-16ec-31a0-9a30-29f91858c6bd" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="ce338d20-9578-3872-b524-69821f5ba252" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="The 'runGameThreads2' function is not used in the testing scope" ln="144" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="144" sev="4" auth="username" locRef="4" rule="AUTOSAR-M0_1_10-a" lnHash="989655515" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="989655515" unbViolId="c4f67565-832e-3c9a-9166-7dfe5474e852" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="73a6b653-b5fa-3e63-b0a7-9a419df24723" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="The 'runGameThreads2' function is not used in the testing scope" ln="144" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="144" sev="2" auth="username" locRef="4" rule="MISRA2008-0_1_10_b" lnHash="989655515" rule.header="Every defined function with external linkage shall be used" tool="c++test" lineHash="989655515" unbViolId="529354df-aec9-3ed7-baa7-333dd1a785d3" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="9bf279c8-ca1a-360f-b103-4832ffd0a575" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="145" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="145" sev="3" auth="username" locRef="4" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="2dc477f3-b0cc-302a-8fcf-090a4cd9b534" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa6d456b-1df5-3719-96fa-b19d308d8b95" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="145" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="146" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="146" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="409232213" rule.header="Tabs should be avoided" tool="c++test" lineHash="409232213" unbViolId="bfffc73a-1968-333d-a910-55426aac6e8f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e09892cb-fc24-3d14-a931-3ce08a29b9cb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="146" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="146" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="146" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="409232213" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="409232213" unbViolId="eea3bcac-b8d3-3462-bc0b-c728ab909a8a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7cf6085-bdbf-3e99-a133-cf5029b917d5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="146" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="146" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="146" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="409232213" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="409232213" unbViolId="7b75a4d1-cd4c-3a0e-a9c0-1216c54a71a6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c35822af-fc87-3fe0-b799-b40f59f11bbe" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="146" goals="0," />
    <StdViol msg="Global variable 'exitGame' is modified in function 'runGameThreads2'" ln="146" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="146" sev="3" auth="username" locRef="4" rule="CODSTA-27" lnHash="409232213" rule.header="Avoid functions that modify global variables" tool="c++test" lineHash="409232213" unbViolId="14f2f325-df7f-3a55-bcf6-bd24ecee150d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="50fef37b-d84d-3343-ae45-d2ed7c6aaa96" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="146" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1123182240" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1123182240" unbViolId="f4df8d1f-7225-3ef0-9d5d-fe012e502970" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="560af300-c113-3451-b5c6-84d6210abf1b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1123182240" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1123182240" unbViolId="332f289f-8876-337b-8d32-265cdefe9ae2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3309dc0d-c73f-37b5-b1d9-e1f52dab4ee8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1123182240" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1123182240" unbViolId="d473c93a-9f32-3955-bd91-174698e89f02" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f6a7d68-ec3b-3371-9d25-7ca6de713746" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: thread1" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="837c7afb-749e-3f59-9649-7f5bbe8a4a89" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3bacf6d7-75b4-38bb-96be-3170427e8f34" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The variable of pointer type is declared: thread1" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="26845557-0c5a-38fb-858e-7fe4aaae3585" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d2446d0-6341-332d-a57b-5fb543f5ec35" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Pointer variable 'thread1' uninitialized when declared" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="21adcea3-6d9a-36f6-bcc5-b902bf49b740" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="abda3626-1981-3eac-8fb0-1a71e4236fdd" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Local variable 'thread1' declared in function 'runGameThreads2' is unnecessary" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="AUTOSAR-M0_1_3-b" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="67b9c8bd-f39d-376a-a9d5-95b3cebe92d2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f4ef5df4-10b8-32b4-9336-d73036d5dfa4" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Local variable 'thread1' declared in function 'runGameThreads2' is unnecessary" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="MISRA2008-0_1_3_b" lnHash="-1123182240" rule.header="A project shall not contain unused variables" tool="c++test" lineHash="-1123182240" unbViolId="d3aa6697-c41b-38cc-8025-318a038b8682" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99998357-fc4a-3d7c-a305-14c4b728c9d8" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Local variable 'thread1' declared in function 'runGameThreads2' is unnecessary" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="CERT_C-MSC13-a" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="fea4b353-0345-3acf-a522-f25d3ed1ea13" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f0fd65f-289a-33c8-8ada-d3ec4bbe483a" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Local variable 'thread1' declared in function 'runGameThreads2' is unnecessary" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="4" auth="username" locRef="4" rule="OPT-06" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="3dd27767-a912-3d6a-a7cb-c9bf2f482c02" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5652f98-6749-35bd-9cf3-c402fccdbb6b" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread1' variable should be commented" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="d9910d84-71f9-3292-8ea6-f31228c4968d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47258d98-41aa-3c05-a918-b43f1ce0bd45" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread1' variable should be commented" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="7d9bbb4b-6f8e-3e30-9a3b-05e2285f4d46" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af25d45d-4082-3a48-aefe-2e33ac27c048" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="W-552: variable &quot;thread1&quot; was set but never used" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="4" auth="username" locRef="4" rule="PARSER-WARNING" lnHash="-1123182240" rule.header="Parser warning" tool="c++test" lineHash="-1123182240" unbViolId="bbbb775a-54cf-3b61-8e19-3d6669a2ead8" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9b1196c-4135-3d03-8971-eef777701461" locEndPos="9" locType="sr" urgent="true" hash="-1769734618" locEndLn="147" goals="1," />
    <StdViol msg="The 'thread1' variable has only one use" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="3e5a2d52-3901-3d1d-8e94-6d2c4ce0ca7c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="372c26f7-3a03-3ed5-81b9-3511de8f1c79" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread1' variable has only one use" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="ed4fb5bc-e3af-30eb-9578-24436755ee83" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="c9ab4084-ec1a-3ca4-ae36-6adb3934f39d" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread1' variable has only one use" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="63bcc94c-1261-3502-919c-c9004f38781c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="0f169fe2-9cc3-3929-a964-f7b1e9f3e48b" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread2' variable has only one use" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="f51d6a18-d4dd-3a8c-b703-04639d0f65cb" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="035c2f21-8fdf-3d20-b402-e80cf6c3abff" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread2' variable has only one use" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="6fc873ad-e984-39e0-8586-cb4f7cbe276f" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="893d9480-e236-3be4-b275-fba46dd5ce95" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread2' variable has only one use" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="84815159-a0f5-3430-90d5-8b54f132430e" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="68fa6c1f-91c8-3f5b-b5f2-10739d8f4f88" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="W-552: variable &quot;thread2&quot; was set but never used" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="4" auth="username" locRef="4" rule="PARSER-WARNING" lnHash="-1123182240" rule.header="Parser warning" tool="c++test" lineHash="-1123182240" unbViolId="9b648505-3d9d-3d55-99ea-6510244efd5c" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="01b546ac-063d-31a6-b205-89d1338501ac" locEndPos="18" locType="sr" urgent="true" hash="-1769734618" locEndLn="147" goals="1," />
    <StdViol msg="The variable of pointer or array type is declared: thread2" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="3f19e926-abc8-3e18-b0d6-4e4aa11d55d3" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5bc50ae-f964-3728-a0db-cbdc6878e4fa" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The variable of pointer type is declared: thread2" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="9aa987c3-9fd7-3006-a196-33b4d411c81f" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1d3f784-623f-314e-b575-94aea3146026" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="JSF-152" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="c0e6e143-b916-38b7-a0f4-baddd2845e85" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88a9498f-5cd2-36db-92c3-ca8c2e9ff6b6" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="AUTOSAR-A7_1_7-b" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="bc24d972-2e14-3ab1-acfe-f73de874672a" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5fc89d6d-0f84-3ebc-b3c8-a72086362ff0" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="HICPP-7_1_1-a" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="82acc06c-7c3a-30b1-a06a-bd850faef958" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6faa5ed7-b157-3a6e-a9a9-55ed950079a5" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="FORMAT-29" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="ba183148-df96-3e46-8055-935aaa09280c" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2c6fc84-314a-3fde-8c50-8343ffba75bf" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="AUTOSAR-A7_1_7-c" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="866ebb7b-23ee-358a-9a14-33b537ed38b9" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d9ca5dc-47b1-36ec-9040-5c84e922a852" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="FORMAT-33" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="38ae324c-f08c-3963-9667-2939f4f473f9" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e2c286d-560c-3427-9870-33f1896bdcc2" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="MISRA2008-8_0_1" lnHash="-1123182240" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-1123182240" unbViolId="0de11b3c-41f6-3c20-87a1-be8890342f16" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="554d652c-5b66-3262-b17d-8f1f58cd244d" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="HICPP-7_1_1-b" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="0858ec20-7106-3955-bc62-4ef21b910989" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f7a643c9-3b5f-34ea-956d-7f7943748ce9" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="AUTOSAR-M8_0_1-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="57eb60ec-1620-3c27-ad61-b93fd7ef63bc" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="34e7772b-1a61-391c-a75c-6b573864717e" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="CERT_C-DCL04-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="f9963abc-c6e2-3e41-999f-ea0e0b80c603" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42aec48f-f02e-398f-af1c-887c9deaee67" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Pointer variable 'thread2' uninitialized when declared" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="a6bb97f9-49dc-32d5-b68d-a3181b0930f7" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da87f172-8313-33f7-b9ae-50de1b803c23" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Local variable 'thread2' declared in function 'runGameThreads2' is unnecessary" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="AUTOSAR-M0_1_3-b" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="a533a106-732e-3b2c-a9c7-7685d6d66bc8" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3482cf71-93da-3384-b311-d2f003bf7b46" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Local variable 'thread2' declared in function 'runGameThreads2' is unnecessary" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="MISRA2008-0_1_3_b" lnHash="-1123182240" rule.header="A project shall not contain unused variables" tool="c++test" lineHash="-1123182240" unbViolId="d2aa7ccf-5553-327d-b172-1d8afc700565" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b8da5b7-858f-372e-bcfc-369fc700a9ca" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Local variable 'thread2' declared in function 'runGameThreads2' is unnecessary" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="CERT_C-MSC13-a" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="38176232-dad2-3505-91b6-200279a1b48d" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="678af297-631d-362e-8fdd-adaf3eda21fd" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Local variable 'thread2' declared in function 'runGameThreads2' is unnecessary" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="4" auth="username" locRef="4" rule="OPT-06" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="0e03454a-3693-33ae-ae78-a38424a81f4d" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8712150-cf68-3e5a-89e1-a4ce79345ce2" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread2' variable should be commented" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="9354c13d-e1a5-35fa-b16e-74dab2d7bd1f" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="944a93f0-b2d3-3009-8e16-869e4f14e6a0" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread2' variable should be commented" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="3adc7d41-4b65-374d-8695-9cbf0d06f57c" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="247942cb-5f68-38d4-b2d3-3f5e99d17d3f" locEndPos="18" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: thread3" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="c8442897-9468-3e24-97ca-033197e43e11" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="458555bd-923c-3fb7-8612-6b9b9cc639db" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The variable of pointer type is declared: thread3" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="44a1adc9-f69f-37cd-8212-c64a9cd5062f" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a59f572-4b4e-3c4f-bb58-2b1847c38d6c" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="JSF-152" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="2975c36b-1992-3c67-a570-6eef09298374" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab727d07-0be9-38f2-bdac-ee4ca95603e9" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="AUTOSAR-A7_1_7-b" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="4ec06808-3443-36fb-be74-1b2678cd1a70" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b89ffa0-2b5d-3f89-882e-cea1b533c596" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="HICPP-7_1_1-a" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="b1544691-c9bd-380f-89ec-c017587cb8d1" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23006dcf-72de-3c4d-9824-88c1559a83b9" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="FORMAT-29" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="4763f327-c43a-3e45-8e9c-ee19096b700b" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f6cac532-d4fc-3f1e-ad9d-cb1551310962" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="AUTOSAR-A7_1_7-c" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="18bfb715-6b2a-3065-9198-73444ebe6ed0" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5217c5bb-1864-3274-b407-33080523bea6" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="FORMAT-33" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="015ad166-c407-3c23-b470-080c707ecd93" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a57d6522-c6c3-38fa-b398-014818e083e9" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="MISRA2008-8_0_1" lnHash="-1123182240" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-1123182240" unbViolId="f953207f-be7c-353f-ad3d-d8474a834737" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce7315b1-e172-3507-9694-5ecfb78031df" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="HICPP-7_1_1-b" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="adbb11ba-8a56-31bd-908d-0880e84c84c7" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55c37fb0-31e5-3e6b-b56f-f2912a3208f2" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="AUTOSAR-M8_0_1-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="c0c88d21-f9b6-3399-8010-e16ab3515d48" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef8e5b13-d6d8-3bb8-8c18-f87b8bad0eac" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="CERT_C-DCL04-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="d79754ed-2683-3d87-918e-de86ec50f078" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e9b01f0-9ccd-3d1a-804b-cd31434e07c5" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Pointer variable 'thread3' uninitialized when declared" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="1c4c490f-c51d-321d-bb9a-8b28dfbb30d8" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="601df40e-2f58-3bcc-9e0f-2cd0e74120ba" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Local variable 'thread3' declared in function 'runGameThreads2' is unnecessary" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="AUTOSAR-M0_1_3-b" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="2b8d5b4c-5ed4-3224-8427-ad49eb9d0904" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8954d768-f06d-3c00-8ce1-524927d66b4c" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Local variable 'thread3' declared in function 'runGameThreads2' is unnecessary" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="MISRA2008-0_1_3_b" lnHash="-1123182240" rule.header="A project shall not contain unused variables" tool="c++test" lineHash="-1123182240" unbViolId="5eedad14-ac15-3e50-9fd0-a3bdcbea0dd7" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da75c533-8b60-3094-9636-f295fc2c1cd1" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Local variable 'thread3' declared in function 'runGameThreads2' is unnecessary" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="CERT_C-MSC13-a" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="0aac7347-1df8-30d7-8fa7-45b606bbdb3a" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e7fae680-36d7-3f8d-bbaf-b00e7c4587af" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Local variable 'thread3' declared in function 'runGameThreads2' is unnecessary" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="4" auth="username" locRef="4" rule="OPT-06" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="b306a87c-365a-30f6-9e30-97565bbae2fc" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b52cc3cf-c603-3698-927f-f075c8debafa" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread3' variable should be commented" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="e092c318-0651-326a-93e6-1f805d519158" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="268e2958-b2af-37bf-a25e-e279550dd266" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread3' variable should be commented" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="51ea77d1-172b-374d-b9d7-ce6058764436" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c281137-2bfa-307d-8d5f-aaba611fafa1" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="W-552: variable &quot;thread3&quot; was set but never used" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="4" auth="username" locRef="4" rule="PARSER-WARNING" lnHash="-1123182240" rule.header="Parser warning" tool="c++test" lineHash="-1123182240" unbViolId="361ccdac-b5ee-3af7-8030-ff1c920a28b4" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="998fd18b-ba8e-3330-934b-f46555011131" locEndPos="27" locType="sr" urgent="true" hash="-1769734618" locEndLn="147" goals="1," />
    <StdViol msg="The 'thread3' variable has only one use" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="5eae5fb3-db70-3def-9bfc-9c213cfb6639" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="456e22f1-67a4-30c5-96f2-c1f24abee1f2" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread3' variable has only one use" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="bb810ea3-62e1-3d3f-b5f9-b8cc41609fd8" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="3ec3b7d0-9b7c-326d-ad4e-116b484d94f2" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread3' variable has only one use" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="17f05698-d4bc-3a44-9a30-9c21f1e0e918" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="0eed3b92-d742-3837-9015-3f9cf5bcf53e" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread4' variable has only one use" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="a2da4b9f-1366-357e-9073-114da3c00d3b" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="47199398-9dac-3873-9e69-26995edb1cb5" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread4' variable has only one use" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="5f56762f-8928-371b-9007-7bb9db42286d" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="f60e14ee-cd4c-38bd-8584-b000e21a2f19" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread4' variable has only one use" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="94881f20-7021-3960-9ed2-2ea23c098321" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="4be582e8-6a24-3702-b421-b1be32a31c6e" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="W-552: variable &quot;thread4&quot; was set but never used" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="4" auth="username" locRef="4" rule="PARSER-WARNING" lnHash="-1123182240" rule.header="Parser warning" tool="c++test" lineHash="-1123182240" unbViolId="e71a3473-36f6-3bbb-b184-bcf987bc9271" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="645cfe3e-a31c-377f-9e9b-5cc9fbdbf274" locEndPos="36" locType="sr" urgent="true" hash="-1769734618" locEndLn="147" goals="1," />
    <StdViol msg="The variable of pointer or array type is declared: thread4" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="a01eefe8-f710-3fbb-a0cf-508e27e4dd3f" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a0d24d4-b48e-341a-bd2d-94be67b94257" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The variable of pointer type is declared: thread4" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="1989b2eb-a406-3def-ac95-711c1a90b287" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f70756e-369c-3f27-953d-68ad29f71839" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="JSF-152" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="1a7cf8f7-f4f3-392b-9ed7-0170743abb17" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0380a95-3cc3-3851-85fd-c67f1d071132" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="AUTOSAR-A7_1_7-b" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="4cc6d175-c1fc-3073-8a95-04eadd4a529e" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95be77e0-9e45-39d5-91e8-f5b6b38e7383" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="HICPP-7_1_1-a" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="a12e79a7-1234-3025-83bd-a3e66c33583d" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe267245-7fc4-3443-9510-4a89a7692502" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="FORMAT-29" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="1a3894e0-9616-37d2-b4a5-acf76b4ee469" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88806fbc-6377-3dd7-a478-c5f8013595eb" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="AUTOSAR-A7_1_7-c" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="76601cc3-58b5-380d-88b4-e6c63651eae2" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="89e7b845-45ba-36b5-bfdd-46836cd83555" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="FORMAT-33" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="99b0da28-eedb-3096-bc83-118eb783f550" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f6101f1-3b36-3799-9f3c-46b183c7f2c9" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="MISRA2008-8_0_1" lnHash="-1123182240" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-1123182240" unbViolId="81490615-d5df-3fdc-a6ca-16fc922525d7" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6637e3bc-3a73-3cff-a592-e8a1b9a12307" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="HICPP-7_1_1-b" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="cd14cbc3-a53b-33c4-a780-79d283264be7" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4bf86487-88f6-3fe6-aa1c-0e4e4d384700" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="AUTOSAR-M8_0_1-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="3e2fea2c-e02f-315c-998c-a698d9377dd1" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48c4bbb1-1e06-3b28-b1ff-30c2315558d4" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="CERT_C-DCL04-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="624e484e-2635-39cb-8c22-992ed290fb25" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16b9ee62-5661-3a96-b0e8-27192d0318fd" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Pointer variable 'thread4' uninitialized when declared" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="b029f77c-a57f-3278-b60b-11253a876cbf" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc928cbf-0d5e-3f36-8eee-387e402a6d43" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Local variable 'thread4' declared in function 'runGameThreads2' is unnecessary" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="AUTOSAR-M0_1_3-b" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="07d36c2f-a1f3-30fb-9295-fafc680c4028" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96a77b4e-ba09-3e6c-90d4-930dafe65153" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Local variable 'thread4' declared in function 'runGameThreads2' is unnecessary" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="2" auth="username" locRef="4" rule="MISRA2008-0_1_3_b" lnHash="-1123182240" rule.header="A project shall not contain unused variables" tool="c++test" lineHash="-1123182240" unbViolId="292259db-e23e-35bf-ac0e-68c2537eb72c" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8cd0c682-f3ec-3f6f-a6fd-083a330457be" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Local variable 'thread4' declared in function 'runGameThreads2' is unnecessary" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="CERT_C-MSC13-a" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="d7eed9ef-b694-34a1-8d4e-eeb34e852a9a" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91e5d97a-b3c3-3de7-bef5-2adec7186d98" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Local variable 'thread4' declared in function 'runGameThreads2' is unnecessary" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="4" auth="username" locRef="4" rule="OPT-06" lnHash="-1123182240" rule.header="Avoid unnecessary local variables" tool="c++test" lineHash="-1123182240" unbViolId="0b6b1b6e-65e7-309e-bba3-0727a6c314be" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13c4dc88-a9f3-3b70-a41d-e96c8eb52e64" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread4' variable should be commented" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="e931ddde-92a9-34b1-b23e-9eedecffd03b" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b6039e8-0fea-3637-aa07-4a75b7f2407e" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread4' variable should be commented" ln="147" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="147" sev="3" auth="username" locRef="4" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="6ccce39f-fc4c-35e0-95c7-c6036e1413d4" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da27948a-4477-3472-9afa-7a299bc86e33" locEndPos="36" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-2033288726" rule.header="Tabs should be avoided" tool="c++test" lineHash="-2033288726" unbViolId="5907bb59-d500-3205-a4b0-1937b5b61b33" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f577caa9-b7a3-3dec-8e5e-51798f6861ce" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-2033288726" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2033288726" unbViolId="170435ff-0f5a-3e8e-8666-8c1c8ca46774" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b106e1eb-9f71-37f6-99cc-c96fdae754d7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-2033288726" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2033288726" unbViolId="de95f6e9-4bd7-38b3-9d1e-16b7d43c5317" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9b53c978-ac2a-36ff-86d0-23f24129c8db" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <FlowViol msg="Value of &quot;thread1&quot; is never used" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="149" rule="AUTOSAR-A0_1_1-a" FirstElSrcRngStartPos="0" lnHash="-2033288726" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="148" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1776530347" lang="cpp" violId="ed3e0f41-5bf8-3914-96b7-0eac32829484" locEndPos="0" locEndLn="149" goals="0," locStartln="148" sev="2" locRef="4" tool="c++test" lineHash="-2033288726" unbViolId="a40c0025-0b77-34d9-9054-22c61ebaa7d2" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-2033288726" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="148" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="148" srcRngEndLn="149" desc="THREAD_CREATE(thread1, GameLogic_Thread);" ElType="CP" rngLn="148">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread1&quot; is never used" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="149" rule="BD-PB-VOVR" FirstElSrcRngStartPos="0" lnHash="-2033288726" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="148" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1398327407" lang="cpp" violId="2325ba38-f476-3759-806d-7ba492e16c96" locEndPos="0" locEndLn="149" goals="0," locStartln="148" sev="3" locRef="4" tool="c++test" lineHash="-2033288726" unbViolId="a86d950c-6f8c-3c52-bd44-330288a1db6a" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-2033288726" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="148" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="148" srcRngEndLn="149" desc="THREAD_CREATE(thread1, GameLogic_Thread);" ElType="CP" rngLn="148">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread1&quot; is never used" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="149" rule="CERT_C-DCL22-a" FirstElSrcRngStartPos="0" lnHash="-2033288726" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="148" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-980512408" lang="cpp" violId="45fb978e-7475-3058-9787-2c449f9f82f3" locEndPos="0" locEndLn="149" goals="0," locStartln="148" sev="3" locRef="4" tool="c++test" lineHash="-2033288726" unbViolId="f7e64717-794d-30da-865f-cc8d2bcde77d" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-2033288726" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="148" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="148" srcRngEndLn="149" desc="THREAD_CREATE(thread1, GameLogic_Thread);" ElType="CP" rngLn="148">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread1&quot; is never used" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="149" rule="MISRA2008-0_1_6" FirstElSrcRngStartPos="0" lnHash="-2033288726" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="148" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-565393844" lang="cpp" violId="d12dae57-c273-38d1-a2ae-e130a4f69ca4" locEndPos="0" locEndLn="149" goals="0," locStartln="148" sev="2" locRef="4" tool="c++test" lineHash="-2033288726" unbViolId="da3a4bb7-8bfe-3e89-85ce-4e9f030b8377" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-2033288726" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="148" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="148" srcRngEndLn="149" desc="THREAD_CREATE(thread1, GameLogic_Thread);" ElType="CP" rngLn="148">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread1&quot; is never used" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="149" rule="MISRA2012-RULE-2_2_b" FirstElSrcRngStartPos="0" lnHash="-2033288726" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="148" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1879622155" lang="cpp" violId="36c6b590-c7f6-3693-a30f-ac70069cfdff" locEndPos="0" locEndLn="149" goals="0," locStartln="148" sev="2" locRef="4" tool="c++test" lineHash="-2033288726" unbViolId="a16c8ceb-f020-3007-bfc1-b6d38ec0d264" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-2033288726" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="148" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="148" srcRngEndLn="149" desc="THREAD_CREATE(thread1, GameLogic_Thread);" ElType="CP" rngLn="148">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread1&quot; is never used" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="149" rule="MISRAC2012-RULE_2_2-b" FirstElSrcRngStartPos="0" lnHash="-2033288726" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="148" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1162428060" lang="cpp" violId="a62865be-a211-3f3c-844d-b44857fb17b4" locEndPos="0" locEndLn="149" goals="0," locStartln="148" sev="2" locRef="4" tool="c++test" lineHash="-2033288726" unbViolId="6220bd4b-68b3-3acb-9745-8c4d8d4a8d4c" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-2033288726" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="148" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="148" srcRngEndLn="149" desc="THREAD_CREATE(thread1, GameLogic_Thread);" ElType="CP" rngLn="148">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="The type 'int' of function argument number '2' does not match declared type 'unsigned long'" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="3" auth="username" locRef="4" rule="PB-11" lnHash="-2033288726" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-2033288726" unbViolId="dcbf77ef-06f1-32ae-823b-3e76831ea626" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="227fa960-4ba9-3da1-8b02-90458e4ca8f1" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="The type 'int' of function argument number '5' does not match declared type 'unsigned long'" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="3" auth="username" locRef="4" rule="PB-11" lnHash="-2033288726" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-2033288726" unbViolId="0726afad-1c6f-3910-9c11-0d489993ea2b" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d648072-abd0-3470-87e9-2e70da6adaf1" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="The type 'DWORD __stdcall (void *)*' of function argument number '3' does not match declared type 'DWORD __stdcall (LPVOID)*'" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="3" auth="username" locRef="4" rule="PB-11" lnHash="-2033288726" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-2033288726" unbViolId="b6d235d3-cd3a-3763-b4f2-56a72fd11e4c" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c33ee351-3331-34da-a6e8-aa1474d8b612" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="2" auth="username" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="cc99b862-07a5-3839-b730-17c8271afb24" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be273557-5a14-315e-bba9-a29c5d4da40f" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="4" auth="username" locRef="4" rule="HICPP-2_5_3-a" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="5d6ed382-eadc-380a-ac08-db3ba8771ca4" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d78ceff-9f4b-34a0-a98d-0fbdeb7164e1" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="4" auth="username" locRef="4" rule="CODSTA-MCPP-04" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="a29d67a0-76f3-30b2-970c-5b324f19feec" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cdbb79ab-3754-37d6-9dff-9c6b38aac243" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="3" auth="username" locRef="4" rule="CODSTA-131" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="91ba4926-da83-3031-8a4c-a8d793e5e3cb" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6695f1e9-50b3-3f42-8ab6-791896b8e96d" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-2033288726" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-2033288726" unbViolId="893bf86c-78e1-332a-b1b4-86bae062f80a" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="990b93a4-f428-3e98-91d0-e3d2e785b97a" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="844e94ed-a75f-31b6-9b65-94e115e12a1e" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="449b4b7a-b96b-3df6-8ae4-73128bfd880c" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="2" auth="username" locRef="4" rule="MISRA2008-5_0_4_a" lnHash="-2033288726" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-2033288726" unbViolId="1478cf2a-df52-3c61-8ffb-8e350fa8bf87" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a5ae7e0-6b5e-3589-aa8a-c80a10ae23e9" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="2" auth="username" locRef="4" rule="AUTOSAR-M5_0_4-a" lnHash="-2033288726" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-2033288726" unbViolId="73d72956-8c32-344b-9584-1bc90fd0d3b9" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5adb5429-c0d9-3f77-bc15-aba788dfb847" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="3" auth="username" locRef="4" rule="MISRA2004-10_1_a" lnHash="-2033288726" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-2033288726" unbViolId="9e634501-c559-382e-a80e-005548925acd" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b52f78be-debf-3eb0-b5c7-2b611ee7a155" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="3" auth="username" locRef="4" rule="HICPP-4_2_1-a" lnHash="-2033288726" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-2033288726" unbViolId="7857876a-0bc7-356a-ad66-5d6edfe62f2e" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="542f6743-eebc-37d2-828a-f3d236fa8a39" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="3" auth="username" locRef="4" rule="CERT_CPP-EXP56-a" lnHash="-2033288726" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-2033288726" unbViolId="cc5fb0d4-973a-31ce-a3de-61e97441c735" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a71f31ab-c87b-3a4c-95c8-1b4392f83f41" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-96" lnHash="-2033288726" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-2033288726" unbViolId="5424d780-e2df-3ed9-9489-79250906d950" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dfa5b5fe-b8f2-32ee-bf2d-90514379ad08" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Pointer to function 'GameLogic_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="3" auth="username" locRef="4" rule="MISRA2004-16_9" lnHash="-2033288726" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-2033288726" unbViolId="9ab30e52-f47c-3eb6-a755-020a97214629" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04df97e2-7913-3699-ad98-5d519bfb5e2b" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Pointer to function 'GameLogic_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="2" auth="username" locRef="4" rule="AUTOSAR-M8_4_4-a" lnHash="-2033288726" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-2033288726" unbViolId="1c3d8ef4-174d-33d9-a21c-bc2c1c1cf319" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b425ed93-4158-3e6c-b8e8-806fa06dc473" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Pointer to function 'GameLogic_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="2" auth="username" locRef="4" rule="MISRA2008-8_4_4" lnHash="-2033288726" rule.header="A function identifier shall either be used to call the function or it shall be preceded by '&amp;'" tool="c++test" lineHash="-2033288726" unbViolId="f3ad7230-816c-3e37-a99f-e1643ee23f6e" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d80d443-6a08-3813-a6f0-fc7a49d907e7" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="2" auth="username" locRef="4" rule="MISRA2008-5_0_4_a" lnHash="-2033288726" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-2033288726" unbViolId="8508857c-e59f-3388-ac04-6dd5c85893b4" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ed34a17-eca1-39ac-9a82-7b2293ca8c3b" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="2" auth="username" locRef="4" rule="AUTOSAR-M5_0_4-a" lnHash="-2033288726" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-2033288726" unbViolId="9a2e2fea-9c33-3ca1-9731-b8314298ce62" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3de2ae5-0a27-3b82-9f9b-d5cb6f842a4b" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="3" auth="username" locRef="4" rule="MISRA2004-10_1_a" lnHash="-2033288726" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-2033288726" unbViolId="3142bd27-d42a-3cb4-805f-e6734e8a2954" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6cac309-33d3-329f-8245-8d22cec26d29" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="2" auth="username" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="21f1913f-8a78-36e9-9e6f-5fcd50a9d99b" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e7f020e-5720-3912-adfc-031bd971f5d3" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="4" auth="username" locRef="4" rule="HICPP-2_5_3-a" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="f0015fbb-30e0-3aa6-8910-005ebef4eb09" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8597aef2-c711-3ca5-8d15-a60bdbc4ba03" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="4" auth="username" locRef="4" rule="CODSTA-MCPP-04" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="917ebdc6-7175-349d-bb7d-d4701fa1a7cd" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aab5391a-a47d-3956-85ac-2b70dbb91406" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="3" auth="username" locRef="4" rule="CODSTA-131" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="3a008b07-8f6e-3839-a68b-937e64be6070" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7884e5e2-65b8-3452-aedd-7f232c69c080" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-2033288726" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-2033288726" unbViolId="f22c807b-5d3b-3162-946a-258eb336a6d2" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96f6934c-b12b-38df-b0e5-b14cb6b18d2c" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="9eeef838-3819-3d9a-a6ad-b4cf6737b8a0" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38c63742-9f96-38b0-979b-86624215c5b8" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="3" auth="username" locRef="4" rule="CODSTA-131" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="55e931fa-74b5-37cc-8db3-97549ac5ba89" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70f7ba36-4000-3a90-b217-8a38174b6eae" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-2033288726" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-2033288726" unbViolId="5d192d0f-2127-3a83-8a46-04ac69d5bcfd" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f029dd5f-f6be-3093-81fc-98594b01d0fa" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="56a7d515-2914-33f9-9d96-4066885efec6" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16da669b-b03f-337c-a6a4-a3af5bcec516" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="148" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="148" sev="3" auth="username" locRef="4" rule="HICPP-4_2_1-a" lnHash="-2033288726" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-2033288726" unbViolId="479a2a0b-2d9f-3775-b4b9-31f179ae6125" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cfd1558b-0134-3bb7-9e0e-a76d76631d67" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1824414877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1824414877" unbViolId="f0fa58d4-b8bf-32cd-b0e3-450b1df407fb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3fb9a086-2c6e-3994-9872-977e8ec4ef9e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1824414877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1824414877" unbViolId="9c1e4b6e-b1ef-3a85-8516-f9b6f4db6ff7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ff0c3c2-8122-3089-b30a-fab111d8cdc4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1824414877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1824414877" unbViolId="38a014b4-d20c-3b38-89e3-0ba7533b315c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc4e4435-3a4b-376d-90b6-21402fd96e51" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <FlowViol msg="Value of &quot;thread2&quot; is never used" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="150" rule="AUTOSAR-A0_1_1-a" FirstElSrcRngStartPos="0" lnHash="-1824414877" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="149" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1265996232" lang="cpp" violId="b285bb07-12c2-3f49-8696-98acd604f637" locEndPos="0" locEndLn="150" goals="0," locStartln="149" sev="2" locRef="4" tool="c++test" lineHash="-1824414877" unbViolId="7b858d8d-32a3-319d-9da7-761a6f26506e" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1824414877" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="149" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="149" srcRngEndLn="150" desc="THREAD_CREATE(thread2, Controller_Thread);" ElType="CP" rngLn="149">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread2&quot; is never used" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="150" rule="BD-PB-VOVR" FirstElSrcRngStartPos="0" lnHash="-1824414877" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="149" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1909385742" lang="cpp" violId="c378a05e-61e9-3c1b-99e0-b3e627f39785" locEndPos="0" locEndLn="150" goals="0," locStartln="149" sev="3" locRef="4" tool="c++test" lineHash="-1824414877" unbViolId="747580d4-a4eb-3294-b58e-3b3c4b6a75c2" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1824414877" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="149" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="149" srcRngEndLn="150" desc="THREAD_CREATE(thread2, Controller_Thread);" ElType="CP" rngLn="149">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread2&quot; is never used" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="150" rule="CERT_C-DCL22-a" FirstElSrcRngStartPos="0" lnHash="-1824414877" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="149" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-417811701" lang="cpp" violId="99b5bb96-9317-3f81-a7c4-59ba24daa8e9" locEndPos="0" locEndLn="150" goals="0," locStartln="149" sev="3" locRef="4" tool="c++test" lineHash="-1824414877" unbViolId="4d9f645c-4857-3a2a-b1bc-59a345221ff5" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1824414877" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="149" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="149" srcRngEndLn="150" desc="THREAD_CREATE(thread2, Controller_Thread);" ElType="CP" rngLn="149">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread2&quot; is never used" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="150" rule="MISRA2008-0_1_6" FirstElSrcRngStartPos="0" lnHash="-1824414877" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="149" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-52763601" lang="cpp" violId="ab3144e6-616a-3f26-a537-c2e32f380594" locEndPos="0" locEndLn="150" goals="0," locStartln="149" sev="2" locRef="4" tool="c++test" lineHash="-1824414877" unbViolId="10ef7a89-b490-35ca-9605-1c6a7e6618cc" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1824414877" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="149" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="149" srcRngEndLn="150" desc="THREAD_CREATE(thread2, Controller_Thread);" ElType="CP" rngLn="149">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread2&quot; is never used" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="150" rule="MISRA2012-RULE-2_2_b" FirstElSrcRngStartPos="0" lnHash="-1824414877" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="149" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1386143848" lang="cpp" violId="0c5aacaf-2f2b-3640-ab83-e5eedb845522" locEndPos="0" locEndLn="150" goals="0," locStartln="149" sev="2" locRef="4" tool="c++test" lineHash="-1824414877" unbViolId="9d230d9f-a535-3464-a4db-491a6dbdae67" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1824414877" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="149" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="149" srcRngEndLn="150" desc="THREAD_CREATE(thread2, Controller_Thread);" ElType="CP" rngLn="149">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread2&quot; is never used" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="150" rule="MISRAC2012-RULE_2_2-b" FirstElSrcRngStartPos="0" lnHash="-1824414877" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="149" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1742675199" lang="cpp" violId="9f99fefd-7bad-3109-9d3e-e7d4eb18d2b6" locEndPos="0" locEndLn="150" goals="0," locStartln="149" sev="2" locRef="4" tool="c++test" lineHash="-1824414877" unbViolId="6c314a5f-4106-30e4-b190-c54011108f5b" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1824414877" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="149" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="149" srcRngEndLn="150" desc="THREAD_CREATE(thread2, Controller_Thread);" ElType="CP" rngLn="149">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="The type 'int' of function argument number '2' does not match declared type 'unsigned long'" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="3" auth="username" locRef="4" rule="PB-11" lnHash="-1824414877" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-1824414877" unbViolId="a625fde6-311a-311f-91e5-cc819d370e34" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="240ceff5-f041-3876-b52e-cc8b7f42bdd6" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="The type 'int' of function argument number '5' does not match declared type 'unsigned long'" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="3" auth="username" locRef="4" rule="PB-11" lnHash="-1824414877" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-1824414877" unbViolId="478118f6-c97b-3f94-b3ad-16458cefd36a" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff2b00cf-d98d-310f-87fc-61e5e57b590c" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="The type 'DWORD __stdcall (void *)*' of function argument number '3' does not match declared type 'DWORD __stdcall (LPVOID)*'" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="3" auth="username" locRef="4" rule="PB-11" lnHash="-1824414877" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-1824414877" unbViolId="87153f36-dbe5-3f30-83ff-7d96592ba152" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eef6394d-e5ad-3c6d-9adf-6e595addc6bd" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="d411a101-fbe5-3e84-a4c2-d2e8599ced77" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c88df40-e878-3a29-9f55-c4bea3d206a9" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="2" auth="username" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="d49ef598-458c-3c86-badb-5ab56581f18e" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bfba754d-5547-3146-928a-9bc019dc1077" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="4" auth="username" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="744787d7-fe00-3ee9-be81-4ec162447664" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c3acc61a-d952-3512-adbd-4783d226c09b" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="4" auth="username" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="85fb3e35-0e38-3f2b-8325-f296eff8d0bb" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="14a503f8-06ce-39da-b9b7-32c894d26d55" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="3" auth="username" locRef="4" rule="CODSTA-131" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="a2a63986-9938-3b5a-97fa-437636345969" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3f8a08e-1b77-3842-8ba1-422f96b49dae" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1824414877" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1824414877" unbViolId="b1015061-e8c0-33e1-8c07-9771385a65fa" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba7c1815-744a-3479-8861-deb66cd4ee12" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="2" auth="username" locRef="4" rule="MISRA2008-5_0_4_a" lnHash="-1824414877" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-1824414877" unbViolId="072469db-96c6-31e4-b67e-34aa4eeb0ef7" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b48b7f9-c3e3-3e8a-a5c5-98b13861898e" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="2" auth="username" locRef="4" rule="AUTOSAR-M5_0_4-a" lnHash="-1824414877" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1824414877" unbViolId="a6c782b4-98f0-3e1a-8b84-cacac24af063" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="156b57b3-df0a-3625-b528-327bdcf522fd" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="3" auth="username" locRef="4" rule="MISRA2004-10_1_a" lnHash="-1824414877" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1824414877" unbViolId="3df9893b-2002-3227-88e4-a3cfafdcaa5d" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6df8f2eb-108e-31d0-9d86-11c85edf49b5" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="3" auth="username" locRef="4" rule="HICPP-4_2_1-a" lnHash="-1824414877" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-1824414877" unbViolId="a2d7c57f-222f-31fb-b1b9-e8989d257dcb" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06012430-a8f5-3381-a4dc-46e033374fb4" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="3" auth="username" locRef="4" rule="CERT_CPP-EXP56-a" lnHash="-1824414877" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1824414877" unbViolId="b9715650-605a-3958-8eb2-5286af0c47ac" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76ea66b4-b6aa-3b4a-beab-196d5f6b59c1" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-96" lnHash="-1824414877" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1824414877" unbViolId="0bff8dd8-5f53-3fee-99ba-d6c74900195c" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="45fc6351-f08b-3693-8d24-720fa645a98b" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Pointer to function 'Controller_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="3" auth="username" locRef="4" rule="MISRA2004-16_9" lnHash="-1824414877" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-1824414877" unbViolId="2191b914-44d1-3c67-924b-052ed8a697a5" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f2e6350-4a9f-3d05-a9bd-b9187abb65df" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Pointer to function 'Controller_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="2" auth="username" locRef="4" rule="AUTOSAR-M8_4_4-a" lnHash="-1824414877" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-1824414877" unbViolId="9225fa7a-df1c-3f63-b9e0-1ba2e5338cce" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f405a73b-a911-37a6-8545-e93e041da257" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Pointer to function 'Controller_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="2" auth="username" locRef="4" rule="MISRA2008-8_4_4" lnHash="-1824414877" rule.header="A function identifier shall either be used to call the function or it shall be preceded by '&amp;'" tool="c++test" lineHash="-1824414877" unbViolId="e847b4c8-7fb5-3e63-9890-a032f5dc6ebb" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ec9fe4e-68aa-3e75-add4-61de28374579" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="2" auth="username" locRef="4" rule="MISRA2008-5_0_4_a" lnHash="-1824414877" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-1824414877" unbViolId="f90b455a-0751-3b1f-bce4-51204cfe5e3b" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="997e0095-f4e4-3a9a-a47e-77dbf1570792" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="2" auth="username" locRef="4" rule="AUTOSAR-M5_0_4-a" lnHash="-1824414877" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1824414877" unbViolId="dfaeeeb0-a8be-3039-b4a2-87bdd0518e72" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12dd3d3c-9dcf-363a-a014-603b98a93698" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="3" auth="username" locRef="4" rule="MISRA2004-10_1_a" lnHash="-1824414877" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1824414877" unbViolId="ce3fb0c5-fdc7-33a3-b2d9-dfdd1e0d8440" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee3e58e9-bcd6-30ab-a0be-fb34dde3b65b" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="2" auth="username" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="f444582c-61be-333a-b06e-834ada1c8c74" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="deb5296d-9248-319f-88c2-24705c48fd76" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="4" auth="username" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="cc866739-792d-3969-b3c2-e6b85a850e85" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="371a2c48-91be-3887-9c3c-bceec8f5d0f0" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="4" auth="username" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="da1843ed-12aa-3c6a-9a15-8b512faf195f" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="206d5161-10d0-3f7b-af8b-52bbc8a92ca7" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="3" auth="username" locRef="4" rule="CODSTA-131" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="237f585a-0c2a-377b-9db9-42fc12d73077" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b33df8c5-6574-3ac4-83dc-375bd751ec88" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1824414877" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1824414877" unbViolId="0969f727-5d57-3c01-b2d4-89d327a6df14" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b966c9b-f1f8-3501-b052-ec7da47a60c1" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="9bb6289a-75a7-3323-840a-3b3237553690" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aaf341c3-21e6-382d-8175-31b8469955de" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="3" auth="username" locRef="4" rule="CODSTA-131" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="0f43edce-611b-360c-bda0-0ea2753914d5" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e50f652c-9153-3457-b1ab-7d2f5632927c" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1824414877" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1824414877" unbViolId="bc475cd0-bce9-38ea-ae48-52699d30d7ba" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9ff84e8-553c-3d00-936c-75c53a80656e" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="9c4fdd37-f5cb-36f1-b9be-1ee45dd2f0ae" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f4de3017-e5ff-32e6-b041-ed1a7f7399dc" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="149" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="149" sev="3" auth="username" locRef="4" rule="HICPP-4_2_1-a" lnHash="-1824414877" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-1824414877" unbViolId="fcf9e128-66a7-337b-99dd-b21e5c8162c6" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="142c8c1c-7760-3a47-99eb-404a61a7c4d3" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-1305984162" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1305984162" unbViolId="e24a6bd3-42b3-3987-aaad-ec607474c26a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7914f9b-6fa4-3073-bb3c-054d0bd6c53d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-1305984162" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1305984162" unbViolId="1fa5307f-dcc8-32b1-98be-8bbb7829c129" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a520d0f5-815c-3de5-a28f-a352da6b411e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1305984162" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1305984162" unbViolId="09c8bbf9-8db4-3b2f-b6ee-770b797e8d31" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe46c5fb-ef61-3746-8d60-9016f4f41d0e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <FlowViol msg="Value of &quot;thread3&quot; is never used" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="151" rule="AUTOSAR-A0_1_1-a" FirstElSrcRngStartPos="0" lnHash="-1305984162" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="150" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="755462121" lang="cpp" violId="6d85289e-3d31-303e-8d77-1870f055406f" locEndPos="0" locEndLn="151" goals="0," locStartln="150" sev="2" locRef="4" tool="c++test" lineHash="-1305984162" unbViolId="faedeb21-fb72-3893-bcc2-ee633cf5667b" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1305984162" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="150" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="150" srcRngEndLn="151" desc="THREAD_CREATE(thread3, Physics::Physics_Thread);" ElType="CP" rngLn="150">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread3&quot; is never used" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="151" rule="BD-PB-VOVR" FirstElSrcRngStartPos="0" lnHash="-1305984162" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="150" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-398201901" lang="cpp" violId="ed1223ed-4d9b-3fa5-a01e-8440c281481e" locEndPos="0" locEndLn="151" goals="0," locStartln="150" sev="3" locRef="4" tool="c++test" lineHash="-1305984162" unbViolId="8d0d2261-2ee3-3395-b74c-167a21c41b2a" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1305984162" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="150" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="150" srcRngEndLn="151" desc="THREAD_CREATE(thread3, Physics::Physics_Thread);" ElType="CP" rngLn="150">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread3&quot; is never used" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="151" rule="CERT_C-DCL22-a" FirstElSrcRngStartPos="0" lnHash="-1305984162" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="150" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-2123739862" lang="cpp" violId="ced889aa-adf4-3899-b6f6-11932e48ead6" locEndPos="0" locEndLn="151" goals="0," locStartln="150" sev="3" locRef="4" tool="c++test" lineHash="-1305984162" unbViolId="f28f2555-3995-38a8-957b-0bdebe690f45" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1305984162" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="150" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="150" srcRngEndLn="151" desc="THREAD_CREATE(thread3, Physics::Physics_Thread);" ElType="CP" rngLn="150">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread3&quot; is never used" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="151" rule="MISRA2008-0_1_6" FirstElSrcRngStartPos="0" lnHash="-1305984162" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="150" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1700259314" lang="cpp" violId="82c4c4d7-bdd8-3766-bb76-1ba46295ab69" locEndPos="0" locEndLn="151" goals="0," locStartln="150" sev="2" locRef="4" tool="c++test" lineHash="-1305984162" unbViolId="ece0998d-5aca-370e-b36e-342e98265daa" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1305984162" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="150" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="150" srcRngEndLn="151" desc="THREAD_CREATE(thread3, Physics::Physics_Thread);" ElType="CP" rngLn="150">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread3&quot; is never used" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="151" rule="MISRA2012-RULE-2_2_b" FirstElSrcRngStartPos="0" lnHash="-1305984162" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="150" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="887889481" lang="cpp" violId="4cdf775f-8c83-3be6-a2e1-4dc923e050f6" locEndPos="0" locEndLn="151" goals="0," locStartln="150" sev="2" locRef="4" tool="c++test" lineHash="-1305984162" unbViolId="ee880a04-4fdb-39aa-a384-63227c171e6d" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1305984162" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="150" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="150" srcRngEndLn="151" desc="THREAD_CREATE(thread3, Physics::Physics_Thread);" ElType="CP" rngLn="150">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread3&quot; is never used" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="151" rule="MISRAC2012-RULE_2_2-b" FirstElSrcRngStartPos="0" lnHash="-1305984162" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="150" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="28173022" lang="cpp" violId="5c85ac28-7a23-31b8-bbcb-413a6b552d8c" locEndPos="0" locEndLn="151" goals="0," locStartln="150" sev="2" locRef="4" tool="c++test" lineHash="-1305984162" unbViolId="a0422fce-54f8-3d1d-aee2-196def7c9629" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1305984162" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="150" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="150" srcRngEndLn="151" desc="THREAD_CREATE(thread3, Physics::Physics_Thread);" ElType="CP" rngLn="150">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="The type 'int' of function argument number '2' does not match declared type 'unsigned long'" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="3" auth="username" locRef="4" rule="PB-11" lnHash="-1305984162" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-1305984162" unbViolId="39999633-3c9e-33c1-b990-c106fc9b6ffe" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c302101e-87ad-37e2-9eb6-ef2333385eff" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="The type 'int' of function argument number '5' does not match declared type 'unsigned long'" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="3" auth="username" locRef="4" rule="PB-11" lnHash="-1305984162" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-1305984162" unbViolId="560e69a2-4fe0-3ed4-978f-adfcebf59a8e" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2250828-a397-3624-8062-7dd05d028e48" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="The type 'DWORD __stdcall (void *)*' of function argument number '3' does not match declared type 'DWORD __stdcall (LPVOID)*'" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="3" auth="username" locRef="4" rule="PB-11" lnHash="-1305984162" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-1305984162" unbViolId="cbc93931-6814-3848-9fc0-f78961ab3ef1" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ee4cd95-7c3d-30d8-806d-a282b9ddb153" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="3" auth="username" locRef="4" rule="CODSTA-131" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="c7341be8-0d80-37dd-a117-8e2d6dada9dd" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e8389fc-c4d1-30d7-8c5b-dd9f68e140b9" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1305984162" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1305984162" unbViolId="282fe305-d2fe-3634-acb9-7dffc1215c3a" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21e12489-c45f-36c6-87e2-77aa9304a687" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="72fefa9f-d5dd-342f-ace7-3b50e93daf64" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e7a633c1-5e5c-3bad-9344-5271e1470543" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="2" auth="username" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="e53f187f-fc1d-32e3-bac6-37bf07c5dc0d" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12a36e8f-8d73-3f90-8484-bb8386bb30af" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="4" auth="username" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="2d381c70-1291-3d79-824e-3c4193465bea" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f68ffd05-0a50-3137-a525-1d0b1f35dcaf" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="4" auth="username" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="79cd5ee0-bb19-3705-b642-847452d0fe1e" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f1899aee-4b9d-3635-a88e-541b88255935" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="2" auth="username" locRef="4" rule="MISRA2008-5_0_4_a" lnHash="-1305984162" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-1305984162" unbViolId="f4870f92-21e3-3590-ad30-720337c97929" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43ec4ae4-5517-3098-a115-4208bba812ef" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="2" auth="username" locRef="4" rule="AUTOSAR-M5_0_4-a" lnHash="-1305984162" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1305984162" unbViolId="8bc140c7-f82e-3ca7-b423-590357ae3e4f" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="35c335cf-1538-317a-9a38-cc02f22741f7" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="3" auth="username" locRef="4" rule="MISRA2004-10_1_a" lnHash="-1305984162" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1305984162" unbViolId="c9ad27b1-509b-34d1-9346-390a131a9ccc" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99bf5c58-0394-3809-af81-91f15fcdb5ed" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="3" auth="username" locRef="4" rule="HICPP-4_2_1-a" lnHash="-1305984162" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-1305984162" unbViolId="e06639f2-6a06-3166-826f-f7030ad89d88" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eaa48c1e-c747-3ade-bedc-07f95ee9ad63" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="3" auth="username" locRef="4" rule="CERT_CPP-EXP56-a" lnHash="-1305984162" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1305984162" unbViolId="083a90ae-b295-3d70-bba8-f72154bc6486" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5ff9811-dce6-39d3-9244-e49d597c6b42" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-96" lnHash="-1305984162" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1305984162" unbViolId="b1c23890-984d-32e0-831d-aeb1bc1ce96d" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5fc101b1-564a-3dd9-82c1-7b0adc19c160" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Pointer to function 'Physics_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="3" auth="username" locRef="4" rule="MISRA2004-16_9" lnHash="-1305984162" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-1305984162" unbViolId="fe722036-2039-3990-98d4-ccf30869074f" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c36f149-9dc9-3f4c-b33a-893db1d9a63a" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Pointer to function 'Physics_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="2" auth="username" locRef="4" rule="AUTOSAR-M8_4_4-a" lnHash="-1305984162" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-1305984162" unbViolId="29dac09f-d7b4-309c-8a9b-5219a2e03566" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31b35963-403d-3e62-8752-31e347fa507c" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Pointer to function 'Physics_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="2" auth="username" locRef="4" rule="MISRA2008-8_4_4" lnHash="-1305984162" rule.header="A function identifier shall either be used to call the function or it shall be preceded by '&amp;'" tool="c++test" lineHash="-1305984162" unbViolId="977530cf-a2ea-3137-a440-abd01ad440a2" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cab8a048-b65a-3c68-9767-82de783fed27" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="2" auth="username" locRef="4" rule="MISRA2008-5_0_4_a" lnHash="-1305984162" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-1305984162" unbViolId="a98bccc2-d94d-37db-8d06-7ec03e89c78e" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bab5fdbd-03e1-3890-b390-40dac2b8403d" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="2" auth="username" locRef="4" rule="AUTOSAR-M5_0_4-a" lnHash="-1305984162" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1305984162" unbViolId="93f0161f-4a7f-3a29-beed-8b524860a714" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4a965a2-d6fc-36af-9f12-9adfa0034939" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="3" auth="username" locRef="4" rule="MISRA2004-10_1_a" lnHash="-1305984162" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1305984162" unbViolId="538ded0c-203f-3632-8c90-5ef4b6efdac9" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ee8a20d-3ba5-307d-9f77-395944cd5b8c" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="2" auth="username" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="aea379b8-7800-3971-a88d-06b4ed681e77" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31f77c49-c275-3bc7-84e7-e0bc3f912088" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="4" auth="username" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="ce01efaf-0e8b-3e70-bea1-637c765056f0" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59a12b37-4360-3168-8bdc-0573876aad81" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="4" auth="username" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="d4215178-90fe-3acb-980c-7b4d4c377986" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c60ae3d2-41d1-3c8c-84d3-6224d1901dd5" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="3" auth="username" locRef="4" rule="CODSTA-131" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="d9c932f1-a882-3192-a930-1835544a9bfe" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9399f02-36b5-3684-994e-334f102aaf47" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1305984162" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1305984162" unbViolId="a370693f-7173-3aff-9a82-17255f4d050e" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6033da88-2cea-3dfc-8049-1608c7071d2a" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="d0f9636f-1e70-3fde-807a-7aab06716f84" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c084fe9-1ed3-354e-9ea0-cb8b65c3efa4" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="3" auth="username" locRef="4" rule="CODSTA-131" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="8999bd81-03b0-3926-8e63-cb907e521607" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9639f4c9-5027-343b-856f-c956b1ae5d1b" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1305984162" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1305984162" unbViolId="620456ef-4683-3de5-8d0c-ab7a66fa0301" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="edb0b602-7c93-36dc-b3c4-cef7b07d2b94" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="4c7df902-58df-3438-b0d9-a323c8e01e9c" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="941bb4fb-facc-3780-be9d-3d639a542bfe" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="150" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="150" sev="3" auth="username" locRef="4" rule="HICPP-4_2_1-a" lnHash="-1305984162" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-1305984162" unbViolId="34ff1302-4fd7-3163-9dfd-49e50427a3d6" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a60e743-2898-3a59-9115-5242e8edd7e2" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="4" auth="username" locRef="4" rule="JSF-043" lnHash="-604051279" rule.header="Tabs should be avoided" tool="c++test" lineHash="-604051279" unbViolId="12cc838b-d2cf-36dc-b173-163e29c8fe61" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="775e6708-c1da-3df7-8cc7-1f879ef9a620" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="5" auth="username" locRef="4" rule="FORMAT-01" lnHash="-604051279" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-604051279" unbViolId="3bd19b78-7e21-36bb-8612-707cb3f594e5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42ef6659-46cf-35bd-9bd2-5b1b6d653d3d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="5" auth="username" locRef="4" rule="HICPP-2_1_1-a" lnHash="-604051279" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-604051279" unbViolId="a1dd6a52-b41c-3f1a-a255-9e440243046b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a26c7bb-5a38-31f8-b41a-ddd9397f8a33" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <FlowViol msg="Value of &quot;thread4&quot; is never used" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="152" rule="AUTOSAR-A0_1_1-a" FirstElSrcRngStartPos="0" lnHash="-604051279" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="151" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="244927494" lang="cpp" violId="3c222c09-3f95-3c71-95e0-5e4c1ee5c1ff" locEndPos="0" locEndLn="152" goals="0," locStartln="151" sev="2" locRef="4" tool="c++test" lineHash="-604051279" unbViolId="51f91cbb-6ef6-36d6-bcc1-e7caba0f27a6" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-604051279" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="151" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="151" srcRngEndLn="152" desc="THREAD_CREATE(thread4, Render::Render_Thread);" ElType="CP" rngLn="151">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread4&quot; is never used" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="152" rule="BD-PB-VOVR" FirstElSrcRngStartPos="0" lnHash="-604051279" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="151" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-874657732" lang="cpp" violId="268f23fe-a7c0-35bc-9d59-916787afd5e0" locEndPos="0" locEndLn="152" goals="0," locStartln="151" sev="3" locRef="4" tool="c++test" lineHash="-604051279" unbViolId="291a313d-97b7-3227-8f11-143fd91716fd" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-604051279" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="151" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="151" srcRngEndLn="152" desc="THREAD_CREATE(thread4, Render::Render_Thread);" ElType="CP" rngLn="151">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread4&quot; is never used" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="152" rule="CERT_C-DCL22-a" FirstElSrcRngStartPos="0" lnHash="-604051279" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="151" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1561039163" lang="cpp" violId="51da6b1c-db1e-33e5-902c-5f8c71e26d35" locEndPos="0" locEndLn="152" goals="0," locStartln="151" sev="3" locRef="4" tool="c++test" lineHash="-604051279" unbViolId="786e0f57-77bd-35d2-ac0d-2bc1765c0008" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-604051279" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="151" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="151" srcRngEndLn="152" desc="THREAD_CREATE(thread4, Render::Render_Thread);" ElType="CP" rngLn="151">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread4&quot; is never used" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="152" rule="MISRA2008-0_1_6" FirstElSrcRngStartPos="0" lnHash="-604051279" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="151" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1187628575" lang="cpp" violId="be06da64-230a-303d-834a-46b3c1cf1a7f" locEndPos="0" locEndLn="152" goals="0," locStartln="151" sev="2" locRef="4" tool="c++test" lineHash="-604051279" unbViolId="48276963-f04f-357a-8781-8631cbfa6ebc" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-604051279" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="151" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="151" srcRngEndLn="152" desc="THREAD_CREATE(thread4, Render::Render_Thread);" ElType="CP" rngLn="151">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread4&quot; is never used" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="152" rule="MISRA2012-RULE-2_2_b" FirstElSrcRngStartPos="0" lnHash="-604051279" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="151" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="393362854" lang="cpp" violId="19525aec-f7db-380d-bf59-ffacb10180ae" locEndPos="0" locEndLn="152" goals="0," locStartln="151" sev="2" locRef="4" tool="c++test" lineHash="-604051279" unbViolId="0fd63acb-11b0-3e61-9f3a-8d7546a9ce2f" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-604051279" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="151" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="151" srcRngEndLn="152" desc="THREAD_CREATE(thread4, Render::Render_Thread);" ElType="CP" rngLn="151">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;thread4&quot; is never used" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="username" FirstElSrcRngEndLn="152" rule="MISRAC2012-RULE_2_2-b" FirstElSrcRngStartPos="0" lnHash="-604051279" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/flowanalysiscpp/DeadLock.cpp" rule.header="Avoid unused values" FirstElSrcRngStartln="151" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="573817137" lang="cpp" violId="91777b91-ee2d-3400-9921-7c57dc157752" locEndPos="0" locEndLn="152" goals="0," locStartln="151" sev="2" locRef="4" tool="c++test" lineHash="-604051279" unbViolId="f65fca58-29e2-3ffc-9cd8-f2d55f1ac7c3" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-604051279" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/flowanalysiscpp/DeadLock.cpp" ln="151" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="151" srcRngEndLn="152" desc="THREAD_CREATE(thread4, Render::Render_Thread);" ElType="CP" rngLn="151">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol><StdViol msg="The type 'int' of function argument number '2' does not match declared type 'unsigned long'" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="3" auth="username" locRef="4" rule="PB-11" lnHash="-604051279" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-604051279" unbViolId="30cd3e73-7dae-39bc-adb8-d2f2f5911817" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="546c6ebf-f005-3a38-80d9-ea3aaae3ad6d" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="The type 'int' of function argument number '5' does not match declared type 'unsigned long'" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="3" auth="username" locRef="4" rule="PB-11" lnHash="-604051279" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-604051279" unbViolId="215aeee1-96ca-3726-a0e9-098da8300991" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="89ac66f0-505c-3751-9f6b-09cf8d375861" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="The type 'DWORD __stdcall (void *)*' of function argument number '3' does not match declared type 'DWORD __stdcall (LPVOID)*'" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="3" auth="username" locRef="4" rule="PB-11" lnHash="-604051279" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="-604051279" unbViolId="05e134e5-1b54-313b-875a-b2c54220bc53" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8fedfda5-6d81-3cb3-8f3d-3aa23d36c986" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="3" auth="username" locRef="4" rule="CODSTA-131" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="fe48f9d9-9a3e-38fd-b028-42c2948e142d" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c448069c-cc33-36f4-a886-2e19a0735cda" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-604051279" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-604051279" unbViolId="d021601c-c9d4-3beb-99da-8b4114ad5d9f" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a609a65a-9054-30d8-9e6f-07e5c264b1d4" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="The value '0' is passed as '1' argument to function 'CreateThread' " ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="0b749b0b-8445-30d8-846a-128fdd526966" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="39aa7d6f-a02c-33cf-81dc-cc6db9ef3f45" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="2" auth="username" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="9e144e33-c96d-3cbc-9531-13af1e1300c9" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62164043-2791-396e-a368-ae8fb7450014" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="4" auth="username" locRef="4" rule="HICPP-2_5_3-a" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="1e43a025-2f3e-3522-913c-fc8b6f8bf322" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e01e08a4-982c-3fea-9d95-a23ed6466034" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="4" auth="username" locRef="4" rule="CODSTA-MCPP-04" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="0c40d79a-002c-3258-9aed-ce9ec9231632" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a806e099-827c-36c8-8c16-681e9be8340a" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="2" auth="username" locRef="4" rule="MISRA2008-5_0_4_a" lnHash="-604051279" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-604051279" unbViolId="efeb0a0c-583d-34d6-b1ac-16daadde1ce4" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f0fbcbc-03cf-3f90-baf1-be9d1e75d4cd" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="2" auth="username" locRef="4" rule="AUTOSAR-M5_0_4-a" lnHash="-604051279" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-604051279" unbViolId="bfd9ab48-76b8-3df2-b6dc-2fa93d73aa64" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5911c36a-6471-3134-b61e-67982ea115b7" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '2' shall not be used" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="3" auth="username" locRef="4" rule="MISRA2004-10_1_a" lnHash="-604051279" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-604051279" unbViolId="0944fd07-452d-32aa-8119-0f9ee0e6cb51" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f100b5df-431a-324b-b6f0-343bd6c05946" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="3" auth="username" locRef="4" rule="HICPP-4_2_1-a" lnHash="-604051279" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-604051279" unbViolId="65b18a31-e4e4-3e4b-b5e2-631cb6f311fd" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4acc6871-7446-3b03-aa86-ac2ed73d7ad5" locEndPos="28" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="3" auth="username" locRef="4" rule="CERT_CPP-EXP56-a" lnHash="-604051279" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-604051279" unbViolId="da2c473f-0455-310e-bf54-b3e0bf8e6290" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ffc4bdd2-4a65-31da-abd8-e208c8861b00" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="3" auth="username" locRef="4" rule="CODSTA-CPP-96" lnHash="-604051279" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-604051279" unbViolId="bbdb9bb8-6ea9-30c3-a5f7-94c5cbce002f" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02efe8eb-8e7d-38cc-8f4b-0822b11fc17c" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Pointer to function 'Render_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="3" auth="username" locRef="4" rule="MISRA2004-16_9" lnHash="-604051279" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-604051279" unbViolId="cbcc8b0c-a3ed-3184-b510-e2237028ffb1" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9b860db-473e-361a-a579-fc07417ceeca" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Pointer to function 'Render_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="2" auth="username" locRef="4" rule="AUTOSAR-M8_4_4-a" lnHash="-604051279" rule.header="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" tool="c++test" lineHash="-604051279" unbViolId="36e17d16-a4e9-33fc-a98e-ed490327397f" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="defd4f91-47b3-360d-a5ad-039575dfdb5c" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Pointer to function 'Render_Thread' should be preceded by '&amp;' operator or followed by '()'" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="2" auth="username" locRef="4" rule="MISRA2008-8_4_4" lnHash="-604051279" rule.header="A function identifier shall either be used to call the function or it shall be preceded by '&amp;'" tool="c++test" lineHash="-604051279" unbViolId="3344fcda-9a34-313c-adf8-e28ed7386a03" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d23c590b-08f8-3491-aa00-bfa0bee935a6" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="2" auth="username" locRef="4" rule="MISRA2008-5_0_4_a" lnHash="-604051279" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-604051279" unbViolId="8572f418-985a-3a00-8530-94c955512151" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b6e07f8-e89f-33c6-90f4-3cdada75395f" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="2" auth="username" locRef="4" rule="AUTOSAR-M5_0_4-a" lnHash="-604051279" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-604051279" unbViolId="bcb9dc7d-03fd-3886-993f-2f8ee7409dad" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7c3e97a-2f72-3c4c-9a9a-4a2e409e7c8a" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '5' shall not be used" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="3" auth="username" locRef="4" rule="MISRA2004-10_1_a" lnHash="-604051279" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-604051279" unbViolId="5878f8ff-4941-37a1-ae2c-32fcf58aa2f7" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5aed7749-7e3d-31bd-8d80-ee453e74d075" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="2" auth="username" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="6eaf4e06-4f0e-30bf-9e53-5a425db65ef7" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6ff2346-b770-3b65-94c7-d24fa602b390" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="4" auth="username" locRef="4" rule="HICPP-2_5_3-a" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="3000799a-bb88-3e9e-814d-d18869d763e5" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d313fc8-1c05-3756-80bd-90511e835b98" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="4" auth="username" locRef="4" rule="CODSTA-MCPP-04" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="57afb7ab-0c0f-3a00-b882-8797ac8f1fba" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47db20db-a7f2-3c4b-ad57-1d2be7df8da5" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="151" goals="0," /><StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="3" auth="username" locRef="4" rule="CODSTA-131" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="301fc49a-02e7-35aa-93fd-1c0bb37201e4" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="264af7d7-701a-33a7-8905-e90891c73e1e" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-604051279" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-604051279" unbViolId="76e7ce01-9946-3fa8-9da9-f779d7aa617b" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9145590e-7422-3482-93f3-a6be58041d09" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'CreateThread' " ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="994595b4-488f-3f21-82b8-f3daf8ef6e6f" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3631b7cf-03d9-3d68-bb11-86ffc7f8828e" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="3" auth="username" locRef="4" rule="CODSTA-131" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="e2fda8c8-42ee-3526-92c3-eed2c4b4b9d5" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f399b33f-aae0-36f8-8330-b99a32569295" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="2" auth="username" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-604051279" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-604051279" unbViolId="8ec4d35f-55e4-3eb1-82f4-a80498d9f7fb" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3ec69c6-893e-3b3c-a3fe-b476a6a52293" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="The value '0' is passed as '6' argument to function 'CreateThread' " ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="2" auth="username" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="f2566f3f-7a00-38d2-ab6f-ff9dc8ae20b7" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef6a4ab9-b679-39ee-ac5b-399d582646ee" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="151" locFile="/flowanalysiscpp/DeadLock.cpp" locStartln="151" sev="3" auth="username" locRef="4" rule="HICPP-4_2_1-a" lnHash="-604051279" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="-604051279" unbViolId="fa7025a2-de15-342d-ba1f-5a5ce181b771" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8fcf0d54-d722-35cc-af13-97a4a75e2c5d" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="151" goals="0," /></StdViols>
      <TestedFilesDetails>
         <Total name="Total (Suppressed)" supp="0" total="2431">
            <Project id="flowanalysiscpp" name="flowanalysiscpp" supp="0" total="2431">
               <Res loc="/flowanalysiscpp/NullPointer.cpp" locRef="1" locType="sr" name="NullPointer.cpp" supp="0" total="182" />
               <Res loc="/flowanalysiscpp/DivisionByZero.cpp" locRef="2" locType="sr" name="DivisionByZero.cpp" supp="0" total="98" />
               <Res loc="/flowanalysiscpp/MemoryLeak.cpp" locRef="3" locType="sr" name="MemoryLeak.cpp" supp="0" total="324" />
               <Res loc="/flowanalysiscpp/DeadLock.cpp" locRef="4" locType="sr" name="DeadLock.cpp" supp="0" total="1827" />
            </Project>
         </Total>
      </TestedFilesDetails>
   </CodingStandards>
   <Statistics>

   </Statistics>
</ResultsSession>
